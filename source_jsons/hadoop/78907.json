{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileStatus.java",
  "functionName": "readFields",
  "functionId": "readFields___in-DataInput",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
  "functionStartLine": 482,
  "functionEndLine": 506,
  "numCommitsSeen": 37,
  "timeTaken": 2572,
  "changeHistory": [
    "12ecb55ffee2b89108eea2565e7ad955ea1fabe7",
    "0e560f3b8d194c10dce06443979df4074e14b0db",
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
    "0199fe97636625da5f33b01c376df0f656c6843f",
    "032216a3a79ddec3298eccd2e37d95af1c144b38",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "12ecb55ffee2b89108eea2565e7ad955ea1fabe7": "Ybodychange",
    "0e560f3b8d194c10dce06443979df4074e14b0db": "Ybodychange",
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a": "Ybodychange",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": "Ybodychange",
    "0199fe97636625da5f33b01c376df0f656c6843f": "Ybodychange",
    "032216a3a79ddec3298eccd2e37d95af1c144b38": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "12ecb55ffee2b89108eea2565e7ad955ea1fabe7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15289. FileStatus.readFields() assertion incorrect.\nContributed by Steve Loughran.\n",
      "commitDate": "06/03/18 2:05 AM",
      "commitName": "12ecb55ffee2b89108eea2565e7ad955ea1fabe7",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "02/01/18 5:34 PM",
      "commitNameOld": "4ad39ec3084ab45fb9bbace13082c88666a76a4c",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 62.35,
      "commitsBetweenForRepo": 385,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void readFields(DataInput in) throws IOException {\n     int size \u003d in.readInt();\n     if (size \u003c 0) {\n       throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n           \"size of \" + size);\n     }\n     byte[] buf \u003d new byte[size];\n     in.readFully(buf);\n     FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n     FileStatus other \u003d PBHelper.convert(proto);\n     isdir \u003d other.isDirectory();\n     length \u003d other.getLen();\n     block_replication \u003d other.getReplication();\n     blocksize \u003d other.getBlockSize();\n     modification_time \u003d other.getModificationTime();\n     access_time \u003d other.getAccessTime();\n     setPermission(other.getPermission());\n     setOwner(other.getOwner());\n     setGroup(other.getGroup());\n     setSymlink((other.isSymlink() ? other.getSymlink() : null));\n     setPath(other.getPath());\n     attr \u003d attributes(other.hasAcl(), other.isEncrypted(),\n         other.isErasureCoded(), other.isSnapshotEnabled());\n-    assert (isDirectory() \u0026\u0026 getSymlink() \u003d\u003d null) || !isDirectory();\n+    assert !(isDirectory() \u0026\u0026 isSymlink()) : \"A directory cannot be a symlink\";\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    int size \u003d in.readInt();\n    if (size \u003c 0) {\n      throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n          \"size of \" + size);\n    }\n    byte[] buf \u003d new byte[size];\n    in.readFully(buf);\n    FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n    FileStatus other \u003d PBHelper.convert(proto);\n    isdir \u003d other.isDirectory();\n    length \u003d other.getLen();\n    block_replication \u003d other.getReplication();\n    blocksize \u003d other.getBlockSize();\n    modification_time \u003d other.getModificationTime();\n    access_time \u003d other.getAccessTime();\n    setPermission(other.getPermission());\n    setOwner(other.getOwner());\n    setGroup(other.getGroup());\n    setSymlink((other.isSymlink() ? other.getSymlink() : null));\n    setPath(other.getPath());\n    attr \u003d attributes(other.hasAcl(), other.isEncrypted(),\n        other.isErasureCoded(), other.isSnapshotEnabled());\n    assert !(isDirectory() \u0026\u0026 isSymlink()) : \"A directory cannot be a symlink\";\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {}
    },
    "0e560f3b8d194c10dce06443979df4074e14b0db": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12681. Make HdfsLocatedFileStatus a subtype of LocatedFileStatus\n",
      "commitDate": "29/11/17 8:28 PM",
      "commitName": "0e560f3b8d194c10dce06443979df4074e14b0db",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "03/10/17 1:02 PM",
      "commitNameOld": "107c177782a24a16c66113841f2fc5144f56207b",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 57.35,
      "commitsBetweenForRepo": 458,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public void readFields(DataInput in) throws IOException {\n     int size \u003d in.readInt();\n     if (size \u003c 0) {\n       throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n           \"size of \" + size);\n     }\n     byte[] buf \u003d new byte[size];\n     in.readFully(buf);\n     FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n     FileStatus other \u003d PBHelper.convert(proto);\n     isdir \u003d other.isDirectory();\n     length \u003d other.getLen();\n     block_replication \u003d other.getReplication();\n     blocksize \u003d other.getBlockSize();\n     modification_time \u003d other.getModificationTime();\n     access_time \u003d other.getAccessTime();\n     setPermission(other.getPermission());\n     setOwner(other.getOwner());\n     setGroup(other.getGroup());\n     setSymlink((other.isSymlink() ? other.getSymlink() : null));\n     setPath(other.getPath());\n-    attr \u003d flags(other.hasAcl(), other.isEncrypted(), other.isErasureCoded());\n+    attr \u003d attributes(other.hasAcl(), other.isEncrypted(),\n+        other.isErasureCoded(), other.isSnapshotEnabled());\n     assert (isDirectory() \u0026\u0026 getSymlink() \u003d\u003d null) || !isDirectory();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    int size \u003d in.readInt();\n    if (size \u003c 0) {\n      throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n          \"size of \" + size);\n    }\n    byte[] buf \u003d new byte[size];\n    in.readFully(buf);\n    FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n    FileStatus other \u003d PBHelper.convert(proto);\n    isdir \u003d other.isDirectory();\n    length \u003d other.getLen();\n    block_replication \u003d other.getReplication();\n    blocksize \u003d other.getBlockSize();\n    modification_time \u003d other.getModificationTime();\n    access_time \u003d other.getAccessTime();\n    setPermission(other.getPermission());\n    setOwner(other.getOwner());\n    setGroup(other.getGroup());\n    setSymlink((other.isSymlink() ? other.getSymlink() : null));\n    setPath(other.getPath());\n    attr \u003d attributes(other.hasAcl(), other.isEncrypted(),\n        other.isErasureCoded(), other.isSnapshotEnabled());\n    assert (isDirectory() \u0026\u0026 getSymlink() \u003d\u003d null) || !isDirectory();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {}
    },
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14726. Mark FileStatus::isDir as final\n",
      "commitDate": "14/08/17 9:57 PM",
      "commitName": "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "02/08/17 12:12 PM",
      "commitNameOld": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 12.41,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,24 @@\n   public void readFields(DataInput in) throws IOException {\n     int size \u003d in.readInt();\n     if (size \u003c 0) {\n       throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n           \"size of \" + size);\n     }\n     byte[] buf \u003d new byte[size];\n     in.readFully(buf);\n     FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n     FileStatus other \u003d PBHelper.convert(proto);\n     isdir \u003d other.isDirectory();\n     length \u003d other.getLen();\n-    isdir \u003d other.isDirectory();\n     block_replication \u003d other.getReplication();\n     blocksize \u003d other.getBlockSize();\n     modification_time \u003d other.getModificationTime();\n     access_time \u003d other.getAccessTime();\n     setPermission(other.getPermission());\n     setOwner(other.getOwner());\n     setGroup(other.getGroup());\n     setSymlink((other.isSymlink() ? other.getSymlink() : null));\n     setPath(other.getPath());\n     attr \u003d flags(other.hasAcl(), other.isEncrypted(), other.isErasureCoded());\n     assert (isDirectory() \u0026\u0026 getSymlink() \u003d\u003d null) || !isDirectory();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    int size \u003d in.readInt();\n    if (size \u003c 0) {\n      throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n          \"size of \" + size);\n    }\n    byte[] buf \u003d new byte[size];\n    in.readFully(buf);\n    FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n    FileStatus other \u003d PBHelper.convert(proto);\n    isdir \u003d other.isDirectory();\n    length \u003d other.getLen();\n    block_replication \u003d other.getReplication();\n    blocksize \u003d other.getBlockSize();\n    modification_time \u003d other.getModificationTime();\n    access_time \u003d other.getAccessTime();\n    setPermission(other.getPermission());\n    setOwner(other.getOwner());\n    setGroup(other.getGroup());\n    setSymlink((other.isSymlink() ? other.getSymlink() : null));\n    setPath(other.getPath());\n    attr \u003d flags(other.hasAcl(), other.isEncrypted(), other.isErasureCoded());\n    assert (isDirectory() \u0026\u0026 getSymlink() \u003d\u003d null) || !isDirectory();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {}
    },
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6984. Serialize FileStatus via protobuf.\n",
      "commitDate": "02/08/17 12:12 PM",
      "commitName": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "01/08/17 5:13 PM",
      "commitNameOld": "cf6794ebe93906c406a54acc5c8854dc600a9a7f",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,25 @@\n   public void readFields(DataInput in) throws IOException {\n-    String strPath \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n-    this.path \u003d new Path(strPath);\n-    this.length \u003d in.readLong();\n-    this.isdir \u003d in.readBoolean();\n-    this.block_replication \u003d in.readShort();\n-    blocksize \u003d in.readLong();\n-    modification_time \u003d in.readLong();\n-    access_time \u003d in.readLong();\n-    permission.readFields(in);\n-    owner \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n-    group \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n-    if (in.readBoolean()) {\n-      this.symlink \u003d new Path(Text.readString(in, Text.DEFAULT_MAX_LEN));\n-    } else {\n-      this.symlink \u003d null;\n+    int size \u003d in.readInt();\n+    if (size \u003c 0) {\n+      throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n+          \"size of \" + size);\n     }\n+    byte[] buf \u003d new byte[size];\n+    in.readFully(buf);\n+    FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n+    FileStatus other \u003d PBHelper.convert(proto);\n+    isdir \u003d other.isDirectory();\n+    length \u003d other.getLen();\n+    isdir \u003d other.isDirectory();\n+    block_replication \u003d other.getReplication();\n+    blocksize \u003d other.getBlockSize();\n+    modification_time \u003d other.getModificationTime();\n+    access_time \u003d other.getAccessTime();\n+    setPermission(other.getPermission());\n+    setOwner(other.getOwner());\n+    setGroup(other.getGroup());\n+    setSymlink((other.isSymlink() ? other.getSymlink() : null));\n+    setPath(other.getPath());\n+    attr \u003d flags(other.hasAcl(), other.isEncrypted(), other.isErasureCoded());\n+    assert (isDirectory() \u0026\u0026 getSymlink() \u003d\u003d null) || !isDirectory();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    int size \u003d in.readInt();\n    if (size \u003c 0) {\n      throw new IOException(\"Can\u0027t read FileStatusProto with negative \" +\n          \"size of \" + size);\n    }\n    byte[] buf \u003d new byte[size];\n    in.readFully(buf);\n    FileStatusProto proto \u003d FileStatusProto.parseFrom(buf);\n    FileStatus other \u003d PBHelper.convert(proto);\n    isdir \u003d other.isDirectory();\n    length \u003d other.getLen();\n    isdir \u003d other.isDirectory();\n    block_replication \u003d other.getReplication();\n    blocksize \u003d other.getBlockSize();\n    modification_time \u003d other.getModificationTime();\n    access_time \u003d other.getAccessTime();\n    setPermission(other.getPermission());\n    setOwner(other.getOwner());\n    setGroup(other.getGroup());\n    setSymlink((other.isSymlink() ? other.getSymlink() : null));\n    setPath(other.getPath());\n    attr \u003d flags(other.hasAcl(), other.isEncrypted(), other.isErasureCoded());\n    assert (isDirectory() \u0026\u0026 getSymlink() \u003d\u003d null) || !isDirectory();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {}
    },
    "0199fe97636625da5f33b01c376df0f656c6843f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8507. Avoid OOM while deserializing DelegationTokenIdentifer. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1349561 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/12 3:10 PM",
      "commitName": "0199fe97636625da5f33b01c376df0f656c6843f",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "10/05/12 4:15 PM",
      "commitNameOld": "032216a3a79ddec3298eccd2e37d95af1c144b38",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 32.95,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public void readFields(DataInput in) throws IOException {\n-    String strPath \u003d Text.readString(in, Text.ONE_MEGABYTE);\n+    String strPath \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n     this.path \u003d new Path(strPath);\n     this.length \u003d in.readLong();\n     this.isdir \u003d in.readBoolean();\n     this.block_replication \u003d in.readShort();\n     blocksize \u003d in.readLong();\n     modification_time \u003d in.readLong();\n     access_time \u003d in.readLong();\n     permission.readFields(in);\n-    owner \u003d Text.readString(in, Text.ONE_MEGABYTE);\n-    group \u003d Text.readString(in, Text.ONE_MEGABYTE);\n+    owner \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n+    group \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n     if (in.readBoolean()) {\n-      this.symlink \u003d new Path(Text.readString(in, Text.ONE_MEGABYTE));\n+      this.symlink \u003d new Path(Text.readString(in, Text.DEFAULT_MAX_LEN));\n     } else {\n       this.symlink \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    String strPath \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n    this.path \u003d new Path(strPath);\n    this.length \u003d in.readLong();\n    this.isdir \u003d in.readBoolean();\n    this.block_replication \u003d in.readShort();\n    blocksize \u003d in.readLong();\n    modification_time \u003d in.readLong();\n    access_time \u003d in.readLong();\n    permission.readFields(in);\n    owner \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n    group \u003d Text.readString(in, Text.DEFAULT_MAX_LEN);\n    if (in.readBoolean()) {\n      this.symlink \u003d new Path(Text.readString(in, Text.DEFAULT_MAX_LEN));\n    } else {\n      this.symlink \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {}
    },
    "032216a3a79ddec3298eccd2e37d95af1c144b38": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8361. Avoid out-of-memory problems when deserializing strings. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1336945 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/05/12 4:15 PM",
      "commitName": "032216a3a79ddec3298eccd2e37d95af1c144b38",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "05/12/11 10:35 PM",
      "commitNameOld": "788f28b6798df10e199618cc08d90284a1ee15ad",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 156.7,
      "commitsBetweenForRepo": 1127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public void readFields(DataInput in) throws IOException {\n-    String strPath \u003d Text.readString(in);\n+    String strPath \u003d Text.readString(in, Text.ONE_MEGABYTE);\n     this.path \u003d new Path(strPath);\n     this.length \u003d in.readLong();\n     this.isdir \u003d in.readBoolean();\n     this.block_replication \u003d in.readShort();\n     blocksize \u003d in.readLong();\n     modification_time \u003d in.readLong();\n     access_time \u003d in.readLong();\n     permission.readFields(in);\n-    owner \u003d Text.readString(in);\n-    group \u003d Text.readString(in);\n+    owner \u003d Text.readString(in, Text.ONE_MEGABYTE);\n+    group \u003d Text.readString(in, Text.ONE_MEGABYTE);\n     if (in.readBoolean()) {\n-      this.symlink \u003d new Path(Text.readString(in));\n+      this.symlink \u003d new Path(Text.readString(in, Text.ONE_MEGABYTE));\n     } else {\n       this.symlink \u003d null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    String strPath \u003d Text.readString(in, Text.ONE_MEGABYTE);\n    this.path \u003d new Path(strPath);\n    this.length \u003d in.readLong();\n    this.isdir \u003d in.readBoolean();\n    this.block_replication \u003d in.readShort();\n    blocksize \u003d in.readLong();\n    modification_time \u003d in.readLong();\n    access_time \u003d in.readLong();\n    permission.readFields(in);\n    owner \u003d Text.readString(in, Text.ONE_MEGABYTE);\n    group \u003d Text.readString(in, Text.ONE_MEGABYTE);\n    if (in.readBoolean()) {\n      this.symlink \u003d new Path(Text.readString(in, Text.ONE_MEGABYTE));\n    } else {\n      this.symlink \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    String strPath \u003d Text.readString(in);\n    this.path \u003d new Path(strPath);\n    this.length \u003d in.readLong();\n    this.isdir \u003d in.readBoolean();\n    this.block_replication \u003d in.readShort();\n    blocksize \u003d in.readLong();\n    modification_time \u003d in.readLong();\n    access_time \u003d in.readLong();\n    permission.readFields(in);\n    owner \u003d Text.readString(in);\n    group \u003d Text.readString(in);\n    if (in.readBoolean()) {\n      this.symlink \u003d new Path(Text.readString(in));\n    } else {\n      this.symlink \u003d null;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    String strPath \u003d Text.readString(in);\n    this.path \u003d new Path(strPath);\n    this.length \u003d in.readLong();\n    this.isdir \u003d in.readBoolean();\n    this.block_replication \u003d in.readShort();\n    blocksize \u003d in.readLong();\n    modification_time \u003d in.readLong();\n    access_time \u003d in.readLong();\n    permission.readFields(in);\n    owner \u003d Text.readString(in);\n    group \u003d Text.readString(in);\n    if (in.readBoolean()) {\n      this.symlink \u003d new Path(Text.readString(in));\n    } else {\n      this.symlink \u003d null;\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileStatus.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileStatus.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    String strPath \u003d Text.readString(in);\n    this.path \u003d new Path(strPath);\n    this.length \u003d in.readLong();\n    this.isdir \u003d in.readBoolean();\n    this.block_replication \u003d in.readShort();\n    blocksize \u003d in.readLong();\n    modification_time \u003d in.readLong();\n    access_time \u003d in.readLong();\n    permission.readFields(in);\n    owner \u003d Text.readString(in);\n    group \u003d Text.readString(in);\n    if (in.readBoolean()) {\n      this.symlink \u003d new Path(Text.readString(in));\n    } else {\n      this.symlink \u003d null;\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileStatus.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileStatus.java"
      }
    },
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/10 1:43 PM",
      "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "30/10/09 3:24 PM",
      "commitNameOld": "3f371a0a644181b204111ee4e12c995fc7b5e5f5",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 108.97,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,18 @@\n   public void readFields(DataInput in) throws IOException {\n     String strPath \u003d Text.readString(in);\n     this.path \u003d new Path(strPath);\n     this.length \u003d in.readLong();\n     this.isdir \u003d in.readBoolean();\n     this.block_replication \u003d in.readShort();\n     blocksize \u003d in.readLong();\n     modification_time \u003d in.readLong();\n     access_time \u003d in.readLong();\n     permission.readFields(in);\n     owner \u003d Text.readString(in);\n     group \u003d Text.readString(in);\n+    if (in.readBoolean()) {\n+      this.symlink \u003d new Path(Text.readString(in));\n+    } else {\n+      this.symlink \u003d null;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    String strPath \u003d Text.readString(in);\n    this.path \u003d new Path(strPath);\n    this.length \u003d in.readLong();\n    this.isdir \u003d in.readBoolean();\n    this.block_replication \u003d in.readShort();\n    blocksize \u003d in.readLong();\n    modification_time \u003d in.readLong();\n    access_time \u003d in.readLong();\n    permission.readFields(in);\n    owner \u003d Text.readString(in);\n    group \u003d Text.readString(in);\n    if (in.readBoolean()) {\n      this.symlink \u003d new Path(Text.readString(in));\n    } else {\n      this.symlink \u003d null;\n    }\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileStatus.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,13 @@\n+  public void readFields(DataInput in) throws IOException {\n+    String strPath \u003d Text.readString(in);\n+    this.path \u003d new Path(strPath);\n+    this.length \u003d in.readLong();\n+    this.isdir \u003d in.readBoolean();\n+    this.block_replication \u003d in.readShort();\n+    blocksize \u003d in.readLong();\n+    modification_time \u003d in.readLong();\n+    access_time \u003d in.readLong();\n+    permission.readFields(in);\n+    owner \u003d Text.readString(in);\n+    group \u003d Text.readString(in);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void readFields(DataInput in) throws IOException {\n    String strPath \u003d Text.readString(in);\n    this.path \u003d new Path(strPath);\n    this.length \u003d in.readLong();\n    this.isdir \u003d in.readBoolean();\n    this.block_replication \u003d in.readShort();\n    blocksize \u003d in.readLong();\n    modification_time \u003d in.readLong();\n    access_time \u003d in.readLong();\n    permission.readFields(in);\n    owner \u003d Text.readString(in);\n    group \u003d Text.readString(in);\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileStatus.java"
    }
  }
}