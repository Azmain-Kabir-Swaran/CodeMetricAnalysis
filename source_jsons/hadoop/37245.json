{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NoOverCommitPolicy.java",
  "functionName": "validate",
  "functionId": "validate___plan-Plan__reservation-ReservationAllocation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
  "functionStartLine": 38,
  "functionEndLine": 62,
  "numCommitsSeen": 11,
  "timeTaken": 3455,
  "changeHistory": [
    "6b21a599fbd53e3d6113fcd9a984f6ac59ccd302",
    "fa6137501c1499ae33f6e0e2adc31671a7e782dc",
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
    "e3345e985bff93c6c74a76747e45376c6027f42c",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
    "9f03b403ec69658fc57bc0f6b832da0e3c746497",
    "db54670e83a84c1d7deff2c225725687cf9e5f14",
    "b6df0dddcdafd7ec67c76ea92aea3ff3e94db247"
  ],
  "changeHistoryShort": {
    "6b21a599fbd53e3d6113fcd9a984f6ac59ccd302": "Ybodychange",
    "fa6137501c1499ae33f6e0e2adc31671a7e782dc": "Ybodychange",
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": "Ybodychange",
    "e3345e985bff93c6c74a76747e45376c6027f42c": "Ybodychange",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": "Ybodychange",
    "9f03b403ec69658fc57bc0f6b832da0e3c746497": "Ybodychange",
    "db54670e83a84c1d7deff2c225725687cf9e5f14": "Ybodychange",
    "b6df0dddcdafd7ec67c76ea92aea3ff3e94db247": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6b21a599fbd53e3d6113fcd9a984f6ac59ccd302": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7340. Fix the missing time stamp in exception message in Class\nNoOverCommitPolicy. Contributed by Dinesh Chitlangia.\n",
      "commitDate": "31/05/18 10:30 PM",
      "commitName": "6b21a599fbd53e3d6113fcd9a984f6ac59ccd302",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "07/09/17 7:07 PM",
      "commitNameOld": "fa6137501c1499ae33f6e0e2adc31671a7e782dc",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 266.14,
      "commitsBetweenForRepo": 2541,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,25 @@\n   public void validate(Plan plan, ReservationAllocation reservation)\n       throws PlanningException {\n \n     RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n         reservation.getUser(), reservation.getReservationId(),\n         reservation.getStartTime(), reservation.getEndTime(),\n         reservation.getPeriodicity());\n \n     // test the reservation does not exceed what is available\n     try {\n \n       RLESparseResourceAllocation ask \u003d reservation.getResourcesOverTime(\n               reservation.getStartTime(), reservation.getEndTime());\n       RLESparseResourceAllocation\n           .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               available, ask,\n               RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n               reservation.getStartTime(), reservation.getEndTime());\n     } catch (PlanningException p) {\n       throw new ResourceOverCommitException(\n-          \"Resources at time \" + \" would be overcommitted by \"\n-              + \"accepting reservation: \" + reservation.getReservationId());\n+          \"Resources at time \" + reservation.getStartTime()\n+          + \" would be overcommitted by accepting reservation: \"\n+              + reservation.getReservationId(), p);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n        reservation.getUser(), reservation.getReservationId(),\n        reservation.getStartTime(), reservation.getEndTime(),\n        reservation.getPeriodicity());\n\n    // test the reservation does not exceed what is available\n    try {\n\n      RLESparseResourceAllocation ask \u003d reservation.getResourcesOverTime(\n              reservation.getStartTime(), reservation.getEndTime());\n      RLESparseResourceAllocation\n          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              available, ask,\n              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n              reservation.getStartTime(), reservation.getEndTime());\n    } catch (PlanningException p) {\n      throw new ResourceOverCommitException(\n          \"Resources at time \" + reservation.getStartTime()\n          + \" would be overcommitted by accepting reservation: \"\n              + reservation.getReservationId(), p);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
      "extendedDetails": {}
    },
    "fa6137501c1499ae33f6e0e2adc31671a7e782dc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5330. SharingPolicy enhancements required to support recurring reservations in ReservationSystem. (Carlo Curino via Subru).\n",
      "commitDate": "07/09/17 7:07 PM",
      "commitName": "fa6137501c1499ae33f6e0e2adc31671a7e782dc",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/09/17 4:46 PM",
      "commitNameOld": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 1.1,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,24 @@\n   public void validate(Plan plan, ReservationAllocation reservation)\n       throws PlanningException {\n \n     RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n         reservation.getUser(), reservation.getReservationId(),\n-        reservation.getStartTime(), reservation.getEndTime(), 0);\n+        reservation.getStartTime(), reservation.getEndTime(),\n+        reservation.getPeriodicity());\n \n     // test the reservation does not exceed what is available\n     try {\n+\n+      RLESparseResourceAllocation ask \u003d reservation.getResourcesOverTime(\n+              reservation.getStartTime(), reservation.getEndTime());\n       RLESparseResourceAllocation\n           .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n-              available, reservation.getResourcesOverTime(),\n+              available, ask,\n               RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n               reservation.getStartTime(), reservation.getEndTime());\n     } catch (PlanningException p) {\n       throw new ResourceOverCommitException(\n           \"Resources at time \" + \" would be overcommitted by \"\n               + \"accepting reservation: \" + reservation.getReservationId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n        reservation.getUser(), reservation.getReservationId(),\n        reservation.getStartTime(), reservation.getEndTime(),\n        reservation.getPeriodicity());\n\n    // test the reservation does not exceed what is available\n    try {\n\n      RLESparseResourceAllocation ask \u003d reservation.getResourcesOverTime(\n              reservation.getStartTime(), reservation.getEndTime());\n      RLESparseResourceAllocation\n          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              available, ask,\n              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n              reservation.getStartTime(), reservation.getEndTime());\n    } catch (PlanningException p) {\n      throw new ResourceOverCommitException(\n          \"Resources at time \" + \" would be overcommitted by \"\n              + \"accepting reservation: \" + reservation.getReservationId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
      "extendedDetails": {}
    },
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "06/09/17 4:46 PM",
      "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/09/17 4:39 PM",
      "commitNameOld": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void validate(Plan plan, ReservationAllocation reservation)\n       throws PlanningException {\n \n     RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n         reservation.getUser(), reservation.getReservationId(),\n-        reservation.getStartTime(), reservation.getEndTime());\n+        reservation.getStartTime(), reservation.getEndTime(), 0);\n \n     // test the reservation does not exceed what is available\n     try {\n       RLESparseResourceAllocation\n           .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               available, reservation.getResourcesOverTime(),\n               RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n               reservation.getStartTime(), reservation.getEndTime());\n     } catch (PlanningException p) {\n       throw new ResourceOverCommitException(\n           \"Resources at time \" + \" would be overcommitted by \"\n               + \"accepting reservation: \" + reservation.getReservationId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n        reservation.getUser(), reservation.getReservationId(),\n        reservation.getStartTime(), reservation.getEndTime(), 0);\n\n    // test the reservation does not exceed what is available\n    try {\n      RLESparseResourceAllocation\n          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              available, reservation.getResourcesOverTime(),\n              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n              reservation.getStartTime(), reservation.getEndTime());\n    } catch (PlanningException p) {\n      throw new ResourceOverCommitException(\n          \"Resources at time \" + \" would be overcommitted by \"\n              + \"accepting reservation: \" + reservation.getReservationId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
      "extendedDetails": {}
    },
    "e3345e985bff93c6c74a76747e45376c6027f42c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\"\n\nThis reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.\n",
      "commitDate": "06/09/17 4:39 PM",
      "commitName": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/09/17 3:16 PM",
      "commitNameOld": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void validate(Plan plan, ReservationAllocation reservation)\n       throws PlanningException {\n \n     RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n         reservation.getUser(), reservation.getReservationId(),\n-        reservation.getStartTime(), reservation.getEndTime(), 0);\n+        reservation.getStartTime(), reservation.getEndTime());\n \n     // test the reservation does not exceed what is available\n     try {\n       RLESparseResourceAllocation\n           .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               available, reservation.getResourcesOverTime(),\n               RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n               reservation.getStartTime(), reservation.getEndTime());\n     } catch (PlanningException p) {\n       throw new ResourceOverCommitException(\n           \"Resources at time \" + \" would be overcommitted by \"\n               + \"accepting reservation: \" + reservation.getReservationId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n        reservation.getUser(), reservation.getReservationId(),\n        reservation.getStartTime(), reservation.getEndTime());\n\n    // test the reservation does not exceed what is available\n    try {\n      RLESparseResourceAllocation\n          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              available, reservation.getResourcesOverTime(),\n              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n              reservation.getStartTime(), reservation.getEndTime());\n    } catch (PlanningException p) {\n      throw new ResourceOverCommitException(\n          \"Resources at time \" + \" would be overcommitted by \"\n              + \"accepting reservation: \" + reservation.getReservationId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
      "extendedDetails": {}
    },
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": {
      "type": "Ybodychange",
      "commitMessage": "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "01/09/17 3:16 PM",
      "commitName": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "20/09/16 12:27 PM",
      "commitNameOld": "9f03b403ec69658fc57bc0f6b832da0e3c746497",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 346.12,
      "commitsBetweenForRepo": 2153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public void validate(Plan plan, ReservationAllocation reservation)\n       throws PlanningException {\n \n     RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n         reservation.getUser(), reservation.getReservationId(),\n-        reservation.getStartTime(), reservation.getEndTime());\n+        reservation.getStartTime(), reservation.getEndTime(), 0);\n \n     // test the reservation does not exceed what is available\n     try {\n       RLESparseResourceAllocation\n           .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               available, reservation.getResourcesOverTime(),\n               RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n               reservation.getStartTime(), reservation.getEndTime());\n     } catch (PlanningException p) {\n       throw new ResourceOverCommitException(\n           \"Resources at time \" + \" would be overcommitted by \"\n               + \"accepting reservation: \" + reservation.getReservationId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n        reservation.getUser(), reservation.getReservationId(),\n        reservation.getStartTime(), reservation.getEndTime(), 0);\n\n    // test the reservation does not exceed what is available\n    try {\n      RLESparseResourceAllocation\n          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              available, reservation.getResourcesOverTime(),\n              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n              reservation.getStartTime(), reservation.getEndTime());\n    } catch (PlanningException p) {\n      throw new ResourceOverCommitException(\n          \"Resources at time \" + \" would be overcommitted by \"\n              + \"accepting reservation: \" + reservation.getReservationId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
      "extendedDetails": {}
    },
    "9f03b403ec69658fc57bc0f6b832da0e3c746497": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5656. Fix ReservationACLsTestBase. (Sean Po via asuresh)\n",
      "commitDate": "20/09/16 12:27 PM",
      "commitName": "9f03b403ec69658fc57bc0f6b832da0e3c746497",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "03/06/16 2:49 PM",
      "commitNameOld": "db54670e83a84c1d7deff2c225725687cf9e5f14",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 108.9,
      "commitsBetweenForRepo": 827,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,20 @@\n   public void validate(Plan plan, ReservationAllocation reservation)\n       throws PlanningException {\n \n-    ReservationAllocation oldReservation \u003d\n-        plan.getReservationById(reservation.getReservationId());\n-\n-    // check updates are using same name\n-    if (oldReservation !\u003d null\n-        \u0026\u0026 !oldReservation.getUser().equals(reservation.getUser())) {\n-      throw new MismatchedUserException(\n-          \"Updating an existing reservation with mismatching user:\"\n-              + oldReservation.getUser() + \" !\u003d \" + reservation.getUser());\n-    }\n-\n     RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n         reservation.getUser(), reservation.getReservationId(),\n         reservation.getStartTime(), reservation.getEndTime());\n \n     // test the reservation does not exceed what is available\n     try {\n       RLESparseResourceAllocation\n           .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n               available, reservation.getResourcesOverTime(),\n               RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n               reservation.getStartTime(), reservation.getEndTime());\n     } catch (PlanningException p) {\n       throw new ResourceOverCommitException(\n           \"Resources at time \" + \" would be overcommitted by \"\n               + \"accepting reservation: \" + reservation.getReservationId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n        reservation.getUser(), reservation.getReservationId(),\n        reservation.getStartTime(), reservation.getEndTime());\n\n    // test the reservation does not exceed what is available\n    try {\n      RLESparseResourceAllocation\n          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              available, reservation.getResourcesOverTime(),\n              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n              reservation.getStartTime(), reservation.getEndTime());\n    } catch (PlanningException p) {\n      throw new ResourceOverCommitException(\n          \"Resources at time \" + \" would be overcommitted by \"\n              + \"accepting reservation: \" + reservation.getReservationId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
      "extendedDetails": {}
    },
    "db54670e83a84c1d7deff2c225725687cf9e5f14": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5165. Fix NoOvercommitPolicy to take advantage of RLE representation of plan. (Carlo Curino via asuresh)\n",
      "commitDate": "03/06/16 2:49 PM",
      "commitName": "db54670e83a84c1d7deff2c225725687cf9e5f14",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/12/15 9:26 PM",
      "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 180.68,
      "commitsBetweenForRepo": 1133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,31 @@\n   public void validate(Plan plan, ReservationAllocation reservation)\n       throws PlanningException {\n \n     ReservationAllocation oldReservation \u003d\n         plan.getReservationById(reservation.getReservationId());\n \n     // check updates are using same name\n     if (oldReservation !\u003d null\n         \u0026\u0026 !oldReservation.getUser().equals(reservation.getUser())) {\n       throw new MismatchedUserException(\n           \"Updating an existing reservation with mismatching user:\"\n               + oldReservation.getUser() + \" !\u003d \" + reservation.getUser());\n     }\n \n-    long startTime \u003d reservation.getStartTime();\n-    long endTime \u003d reservation.getEndTime();\n-    long step \u003d plan.getStep();\n+    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n+        reservation.getUser(), reservation.getReservationId(),\n+        reservation.getStartTime(), reservation.getEndTime());\n \n-    // for every instant in time, check we are respecting cluster capacity\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n-      Resource currExistingAllocTot \u003d plan.getTotalCommittedResources(t);\n-      Resource currNewAlloc \u003d reservation.getResourcesAtTime(t);\n-      Resource currOldAlloc \u003d Resource.newInstance(0, 0);\n-      if (oldReservation !\u003d null) {\n-        oldReservation.getResourcesAtTime(t);\n-      }\n-      // check the cluster is never over committed\n-      // currExistingAllocTot + currNewAlloc - currOldAlloc \u003e\n-      // capPlan.getTotalCapacity()\n-      if (Resources.greaterThan(plan.getResourceCalculator(), plan\n-          .getTotalCapacity(), Resources.subtract(\n-          Resources.add(currExistingAllocTot, currNewAlloc), currOldAlloc),\n-          plan.getTotalCapacity())) {\n-        throw new ResourceOverCommitException(\"Resources at time \" + t\n-            + \" would be overcommitted by \" + \"accepting reservation: \"\n-            + reservation.getReservationId());\n-      }\n+    // test the reservation does not exceed what is available\n+    try {\n+      RLESparseResourceAllocation\n+          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n+              available, reservation.getResourcesOverTime(),\n+              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n+              reservation.getStartTime(), reservation.getEndTime());\n+    } catch (PlanningException p) {\n+      throw new ResourceOverCommitException(\n+          \"Resources at time \" + \" would be overcommitted by \"\n+              + \"accepting reservation: \" + reservation.getReservationId());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    ReservationAllocation oldReservation \u003d\n        plan.getReservationById(reservation.getReservationId());\n\n    // check updates are using same name\n    if (oldReservation !\u003d null\n        \u0026\u0026 !oldReservation.getUser().equals(reservation.getUser())) {\n      throw new MismatchedUserException(\n          \"Updating an existing reservation with mismatching user:\"\n              + oldReservation.getUser() + \" !\u003d \" + reservation.getUser());\n    }\n\n    RLESparseResourceAllocation available \u003d plan.getAvailableResourceOverTime(\n        reservation.getUser(), reservation.getReservationId(),\n        reservation.getStartTime(), reservation.getEndTime());\n\n    // test the reservation does not exceed what is available\n    try {\n      RLESparseResourceAllocation\n          .merge(plan.getResourceCalculator(), plan.getTotalCapacity(),\n              available, reservation.getResourcesOverTime(),\n              RLESparseResourceAllocation.RLEOperator.subtractTestNonNegative,\n              reservation.getStartTime(), reservation.getEndTime());\n    } catch (PlanningException p) {\n      throw new ResourceOverCommitException(\n          \"Resources at time \" + \" would be overcommitted by \"\n              + \"accepting reservation: \" + reservation.getReservationId());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java",
      "extendedDetails": {}
    },
    "b6df0dddcdafd7ec67c76ea92aea3ff3e94db247": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1711. Policy to enforce instantaneous and over-time quotas on user reservation. Contributed by Carlo Curino and Subru Krishnan.\n(cherry picked from commit c4918cb4cb5a267a8cfd6eace28fcfe7ad6174e8)\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "b6df0dddcdafd7ec67c76ea92aea3ff3e94db247",
      "commitAuthor": "carlo curino",
      "diff": "@@ -0,0 +1,39 @@\n+  public void validate(Plan plan, ReservationAllocation reservation)\n+      throws PlanningException {\n+\n+    ReservationAllocation oldReservation \u003d\n+        plan.getReservationById(reservation.getReservationId());\n+\n+    // check updates are using same name\n+    if (oldReservation !\u003d null\n+        \u0026\u0026 !oldReservation.getUser().equals(reservation.getUser())) {\n+      throw new MismatchedUserException(\n+          \"Updating an existing reservation with mismatching user:\"\n+              + oldReservation.getUser() + \" !\u003d \" + reservation.getUser());\n+    }\n+\n+    long startTime \u003d reservation.getStartTime();\n+    long endTime \u003d reservation.getEndTime();\n+    long step \u003d plan.getStep();\n+\n+    // for every instant in time, check we are respecting cluster capacity\n+    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+      Resource currExistingAllocTot \u003d plan.getTotalCommittedResources(t);\n+      Resource currNewAlloc \u003d reservation.getResourcesAtTime(t);\n+      Resource currOldAlloc \u003d Resource.newInstance(0, 0);\n+      if (oldReservation !\u003d null) {\n+        oldReservation.getResourcesAtTime(t);\n+      }\n+      // check the cluster is never over committed\n+      // currExistingAllocTot + currNewAlloc - currOldAlloc \u003e\n+      // capPlan.getTotalCapacity()\n+      if (Resources.greaterThan(plan.getResourceCalculator(), plan\n+          .getTotalCapacity(), Resources.subtract(\n+          Resources.add(currExistingAllocTot, currNewAlloc), currOldAlloc),\n+          plan.getTotalCapacity())) {\n+        throw new ResourceOverCommitException(\"Resources at time \" + t\n+            + \" would be overcommitted by \" + \"accepting reservation: \"\n+            + reservation.getReservationId());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void validate(Plan plan, ReservationAllocation reservation)\n      throws PlanningException {\n\n    ReservationAllocation oldReservation \u003d\n        plan.getReservationById(reservation.getReservationId());\n\n    // check updates are using same name\n    if (oldReservation !\u003d null\n        \u0026\u0026 !oldReservation.getUser().equals(reservation.getUser())) {\n      throw new MismatchedUserException(\n          \"Updating an existing reservation with mismatching user:\"\n              + oldReservation.getUser() + \" !\u003d \" + reservation.getUser());\n    }\n\n    long startTime \u003d reservation.getStartTime();\n    long endTime \u003d reservation.getEndTime();\n    long step \u003d plan.getStep();\n\n    // for every instant in time, check we are respecting cluster capacity\n    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n      Resource currExistingAllocTot \u003d plan.getTotalCommittedResources(t);\n      Resource currNewAlloc \u003d reservation.getResourcesAtTime(t);\n      Resource currOldAlloc \u003d Resource.newInstance(0, 0);\n      if (oldReservation !\u003d null) {\n        oldReservation.getResourcesAtTime(t);\n      }\n      // check the cluster is never over committed\n      // currExistingAllocTot + currNewAlloc - currOldAlloc \u003e\n      // capPlan.getTotalCapacity()\n      if (Resources.greaterThan(plan.getResourceCalculator(), plan\n          .getTotalCapacity(), Resources.subtract(\n          Resources.add(currExistingAllocTot, currNewAlloc), currOldAlloc),\n          plan.getTotalCapacity())) {\n        throw new ResourceOverCommitException(\"Resources at time \" + t\n            + \" would be overcommitted by \" + \"accepting reservation: \"\n            + reservation.getReservationId());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/NoOverCommitPolicy.java"
    }
  }
}