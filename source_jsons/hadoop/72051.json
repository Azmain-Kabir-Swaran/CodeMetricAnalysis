{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JWTRedirectAuthenticationHandler.java",
  "functionName": "validateAudiences",
  "functionId": "validateAudiences___jwtToken-SignedJWT",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/JWTRedirectAuthenticationHandler.java",
  "functionStartLine": 303,
  "functionEndLine": 331,
  "numCommitsSeen": 5,
  "timeTaken": 549,
  "changeHistory": [
    "ce635733144456bce6bcf8664c5850ef6b60aa49"
  ],
  "changeHistoryShort": {
    "ce635733144456bce6bcf8664c5850ef6b60aa49": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ce635733144456bce6bcf8664c5850ef6b60aa49": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11717. Support JWT tokens for web single sign on to the Hadoop\nservers. (Larry McCay via omalley)\n",
      "commitDate": "07/04/15 8:09 AM",
      "commitName": "ce635733144456bce6bcf8664c5850ef6b60aa49",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,29 @@\n+  protected boolean validateAudiences(SignedJWT jwtToken) {\n+    boolean valid \u003d false;\n+    try {\n+      List\u003cString\u003e tokenAudienceList \u003d jwtToken.getJWTClaimsSet()\n+          .getAudience();\n+      // if there were no expected audiences configured then just\n+      // consider any audience acceptable\n+      if (audiences \u003d\u003d null) {\n+        valid \u003d true;\n+      } else {\n+        // if any of the configured audiences is found then consider it\n+        // acceptable\n+        boolean found \u003d false;\n+        for (String aud : tokenAudienceList) {\n+          if (audiences.contains(aud)) {\n+            LOG.debug(\"JWT token audience has been successfully validated\");\n+            valid \u003d true;\n+            break;\n+          }\n+        }\n+        if (!valid) {\n+          LOG.warn(\"JWT audience validation failed.\");\n+        }\n+      }\n+    } catch (ParseException pe) {\n+      LOG.warn(\"Unable to parse the JWT token.\", pe);\n+    }\n+    return valid;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean validateAudiences(SignedJWT jwtToken) {\n    boolean valid \u003d false;\n    try {\n      List\u003cString\u003e tokenAudienceList \u003d jwtToken.getJWTClaimsSet()\n          .getAudience();\n      // if there were no expected audiences configured then just\n      // consider any audience acceptable\n      if (audiences \u003d\u003d null) {\n        valid \u003d true;\n      } else {\n        // if any of the configured audiences is found then consider it\n        // acceptable\n        boolean found \u003d false;\n        for (String aud : tokenAudienceList) {\n          if (audiences.contains(aud)) {\n            LOG.debug(\"JWT token audience has been successfully validated\");\n            valid \u003d true;\n            break;\n          }\n        }\n        if (!valid) {\n          LOG.warn(\"JWT audience validation failed.\");\n        }\n      }\n    } catch (ParseException pe) {\n      LOG.warn(\"Unable to parse the JWT token.\", pe);\n    }\n    return valid;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/JWTRedirectAuthenticationHandler.java"
    }
  }
}