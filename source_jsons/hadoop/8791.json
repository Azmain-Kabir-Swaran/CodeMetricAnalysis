{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeaseManager.java",
  "functionName": "getINodeWithLeases",
  "functionId": "getINodeWithLeases___ancestorDir-INodeDirectory(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/LeaseManager.java",
  "functionStartLine": 220,
  "functionEndLine": 278,
  "numCommitsSeen": 51,
  "timeTaken": 3182,
  "changeHistory": [
    "96be795656039c0c12031ec31becfcd35fbb1b70",
    "52d7bafcf49916887197436ddb0f08f021d248d9",
    "20e3ae260b40cd6ef657b2a629a02219d68f162f"
  ],
  "changeHistoryShort": {
    "96be795656039c0c12031ec31becfcd35fbb1b70": "Ybodychange",
    "52d7bafcf49916887197436ddb0f08f021d248d9": "Ymultichange(Yexceptionschange,Ybodychange)",
    "20e3ae260b40cd6ef657b2a629a02219d68f162f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96be795656039c0c12031ec31becfcd35fbb1b70": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12650. Use slf4j instead of log4j in LeaseManager. Contributed by Ajay Kumar.\n",
      "commitDate": "23/10/17 1:20 PM",
      "commitName": "96be795656039c0c12031ec31becfcd35fbb1b70",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "07/09/17 4:30 PM",
      "commitNameOld": "52b894db33bc68b46eec5cdf2735dfcf4030853a",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 45.87,
      "commitsBetweenForRepo": 392,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,59 @@\n   public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n       ancestorDir) throws IOException {\n     assert fsnamesystem.hasReadLock();\n     final long startTimeMs \u003d Time.monotonicNow();\n     Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n     final INode[] inodes \u003d getINodesWithLease();\n     int inodeCount \u003d inodes.length;\n     if (inodeCount \u003d\u003d 0) {\n       return iipSet;\n     }\n \n     List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n     final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n         (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n     ExecutorService inodeFilterService \u003d\n         Executors.newFixedThreadPool(workerCount);\n     for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n       final int startIdx \u003d workerIdx;\n       Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n         @Override\n         public List\u003cINodesInPath\u003e call() {\n           List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n           for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n             INode inode \u003d inodes[idx];\n             if (!inode.isFile()) {\n               continue;\n             }\n             INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n                 fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n             if (ancestorDir !\u003d null \u0026\u0026\n                 !inodesInPath.isDescendant(ancestorDir)) {\n               continue;\n             }\n             iNodesInPaths.add(inodesInPath);\n           }\n           return iNodesInPaths;\n         }\n       };\n \n       // Submit the inode filter task to the Executor Service\n       futureList.add(inodeFilterService.submit(c));\n     }\n     inodeFilterService.shutdown();\n \n     for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n       try {\n         iipSet.addAll(f.get());\n       } catch (Exception e) {\n         throw new IOException(\"Failed to get files with active leases\", e);\n       }\n     }\n     final long endTimeMs \u003d Time.monotonicNow();\n     if ((endTimeMs - startTimeMs) \u003e 1000) {\n-      LOG.info(\"Took \" + (endTimeMs - startTimeMs) + \" ms to collect \"\n-          + iipSet.size() + \" open files with leases\" +\n-          ((ancestorDir !\u003d null) ?\n+      LOG.info(\"Took {} ms to collect {} open files with leases {}\",\n+          (endTimeMs - startTimeMs), iipSet.size(), ((ancestorDir !\u003d null) ?\n               \" under \" + ancestorDir.getFullPathName() : \".\"));\n     }\n     return iipSet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n      ancestorDir) throws IOException {\n    assert fsnamesystem.hasReadLock();\n    final long startTimeMs \u003d Time.monotonicNow();\n    Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n    final INode[] inodes \u003d getINodesWithLease();\n    int inodeCount \u003d inodes.length;\n    if (inodeCount \u003d\u003d 0) {\n      return iipSet;\n    }\n\n    List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n    final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n        (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n    ExecutorService inodeFilterService \u003d\n        Executors.newFixedThreadPool(workerCount);\n    for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n      final int startIdx \u003d workerIdx;\n      Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n        @Override\n        public List\u003cINodesInPath\u003e call() {\n          List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n          for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n            INode inode \u003d inodes[idx];\n            if (!inode.isFile()) {\n              continue;\n            }\n            INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n                fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n            if (ancestorDir !\u003d null \u0026\u0026\n                !inodesInPath.isDescendant(ancestorDir)) {\n              continue;\n            }\n            iNodesInPaths.add(inodesInPath);\n          }\n          return iNodesInPaths;\n        }\n      };\n\n      // Submit the inode filter task to the Executor Service\n      futureList.add(inodeFilterService.submit(c));\n    }\n    inodeFilterService.shutdown();\n\n    for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n      try {\n        iipSet.addAll(f.get());\n      } catch (Exception e) {\n        throw new IOException(\"Failed to get files with active leases\", e);\n      }\n    }\n    final long endTimeMs \u003d Time.monotonicNow();\n    if ((endTimeMs - startTimeMs) \u003e 1000) {\n      LOG.info(\"Took {} ms to collect {} open files with leases {}\",\n          (endTimeMs - startTimeMs), iipSet.size(), ((ancestorDir !\u003d null) ?\n              \" under \" + ancestorDir.getFullPathName() : \".\"));\n    }\n    return iipSet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/LeaseManager.java",
      "extendedDetails": {}
    },
    "52d7bafcf49916887197436ddb0f08f021d248d9": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-12217. HDFS snapshots doesn\u0027t capture all open files when one of the open files is deleted.\n",
      "commitDate": "01/08/17 4:28 PM",
      "commitName": "52d7bafcf49916887197436ddb0f08f021d248d9",
      "commitAuthor": "Manoj Govindassamy",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-12217. HDFS snapshots doesn\u0027t capture all open files when one of the open files is deleted.\n",
          "commitDate": "01/08/17 4:28 PM",
          "commitName": "52d7bafcf49916887197436ddb0f08f021d248d9",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "15/06/17 2:46 PM",
          "commitNameOld": "fb68980959f95f0d89e86f91909867724ad01791",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 47.07,
          "commitsBetweenForRepo": 235,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,60 @@\n   public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n-      ancestorDir) {\n+      ancestorDir) throws IOException {\n     assert fsnamesystem.hasReadLock();\n     final long startTimeMs \u003d Time.monotonicNow();\n     Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n     final INode[] inodes \u003d getINodesWithLease();\n     int inodeCount \u003d inodes.length;\n     if (inodeCount \u003d\u003d 0) {\n       return iipSet;\n     }\n \n     List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n     final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n         (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n     ExecutorService inodeFilterService \u003d\n         Executors.newFixedThreadPool(workerCount);\n     for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n       final int startIdx \u003d workerIdx;\n       Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n         @Override\n         public List\u003cINodesInPath\u003e call() {\n           List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n           for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n             INode inode \u003d inodes[idx];\n             if (!inode.isFile()) {\n               continue;\n             }\n             INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n                 fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n             if (ancestorDir !\u003d null \u0026\u0026\n                 !inodesInPath.isDescendant(ancestorDir)) {\n               continue;\n             }\n             iNodesInPaths.add(inodesInPath);\n           }\n           return iNodesInPaths;\n         }\n       };\n \n       // Submit the inode filter task to the Executor Service\n       futureList.add(inodeFilterService.submit(c));\n     }\n     inodeFilterService.shutdown();\n \n     for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n       try {\n         iipSet.addAll(f.get());\n       } catch (Exception e) {\n-        LOG.warn(\"INode filter task encountered exception: \", e);\n+        throw new IOException(\"Failed to get files with active leases\", e);\n       }\n     }\n     final long endTimeMs \u003d Time.monotonicNow();\n     if ((endTimeMs - startTimeMs) \u003e 1000) {\n       LOG.info(\"Took \" + (endTimeMs - startTimeMs) + \" ms to collect \"\n           + iipSet.size() + \" open files with leases\" +\n           ((ancestorDir !\u003d null) ?\n               \" under \" + ancestorDir.getFullPathName() : \".\"));\n     }\n     return iipSet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n      ancestorDir) throws IOException {\n    assert fsnamesystem.hasReadLock();\n    final long startTimeMs \u003d Time.monotonicNow();\n    Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n    final INode[] inodes \u003d getINodesWithLease();\n    int inodeCount \u003d inodes.length;\n    if (inodeCount \u003d\u003d 0) {\n      return iipSet;\n    }\n\n    List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n    final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n        (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n    ExecutorService inodeFilterService \u003d\n        Executors.newFixedThreadPool(workerCount);\n    for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n      final int startIdx \u003d workerIdx;\n      Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n        @Override\n        public List\u003cINodesInPath\u003e call() {\n          List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n          for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n            INode inode \u003d inodes[idx];\n            if (!inode.isFile()) {\n              continue;\n            }\n            INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n                fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n            if (ancestorDir !\u003d null \u0026\u0026\n                !inodesInPath.isDescendant(ancestorDir)) {\n              continue;\n            }\n            iNodesInPaths.add(inodesInPath);\n          }\n          return iNodesInPaths;\n        }\n      };\n\n      // Submit the inode filter task to the Executor Service\n      futureList.add(inodeFilterService.submit(c));\n    }\n    inodeFilterService.shutdown();\n\n    for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n      try {\n        iipSet.addAll(f.get());\n      } catch (Exception e) {\n        throw new IOException(\"Failed to get files with active leases\", e);\n      }\n    }\n    final long endTimeMs \u003d Time.monotonicNow();\n    if ((endTimeMs - startTimeMs) \u003e 1000) {\n      LOG.info(\"Took \" + (endTimeMs - startTimeMs) + \" ms to collect \"\n          + iipSet.size() + \" open files with leases\" +\n          ((ancestorDir !\u003d null) ?\n              \" under \" + ancestorDir.getFullPathName() : \".\"));\n    }\n    return iipSet;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/LeaseManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12217. HDFS snapshots doesn\u0027t capture all open files when one of the open files is deleted.\n",
          "commitDate": "01/08/17 4:28 PM",
          "commitName": "52d7bafcf49916887197436ddb0f08f021d248d9",
          "commitAuthor": "Manoj Govindassamy",
          "commitDateOld": "15/06/17 2:46 PM",
          "commitNameOld": "fb68980959f95f0d89e86f91909867724ad01791",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 47.07,
          "commitsBetweenForRepo": 235,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,60 @@\n   public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n-      ancestorDir) {\n+      ancestorDir) throws IOException {\n     assert fsnamesystem.hasReadLock();\n     final long startTimeMs \u003d Time.monotonicNow();\n     Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n     final INode[] inodes \u003d getINodesWithLease();\n     int inodeCount \u003d inodes.length;\n     if (inodeCount \u003d\u003d 0) {\n       return iipSet;\n     }\n \n     List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n     final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n         (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n     ExecutorService inodeFilterService \u003d\n         Executors.newFixedThreadPool(workerCount);\n     for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n       final int startIdx \u003d workerIdx;\n       Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n         @Override\n         public List\u003cINodesInPath\u003e call() {\n           List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n           for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n             INode inode \u003d inodes[idx];\n             if (!inode.isFile()) {\n               continue;\n             }\n             INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n                 fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n             if (ancestorDir !\u003d null \u0026\u0026\n                 !inodesInPath.isDescendant(ancestorDir)) {\n               continue;\n             }\n             iNodesInPaths.add(inodesInPath);\n           }\n           return iNodesInPaths;\n         }\n       };\n \n       // Submit the inode filter task to the Executor Service\n       futureList.add(inodeFilterService.submit(c));\n     }\n     inodeFilterService.shutdown();\n \n     for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n       try {\n         iipSet.addAll(f.get());\n       } catch (Exception e) {\n-        LOG.warn(\"INode filter task encountered exception: \", e);\n+        throw new IOException(\"Failed to get files with active leases\", e);\n       }\n     }\n     final long endTimeMs \u003d Time.monotonicNow();\n     if ((endTimeMs - startTimeMs) \u003e 1000) {\n       LOG.info(\"Took \" + (endTimeMs - startTimeMs) + \" ms to collect \"\n           + iipSet.size() + \" open files with leases\" +\n           ((ancestorDir !\u003d null) ?\n               \" under \" + ancestorDir.getFullPathName() : \".\"));\n     }\n     return iipSet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n      ancestorDir) throws IOException {\n    assert fsnamesystem.hasReadLock();\n    final long startTimeMs \u003d Time.monotonicNow();\n    Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n    final INode[] inodes \u003d getINodesWithLease();\n    int inodeCount \u003d inodes.length;\n    if (inodeCount \u003d\u003d 0) {\n      return iipSet;\n    }\n\n    List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n    final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n        (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n    ExecutorService inodeFilterService \u003d\n        Executors.newFixedThreadPool(workerCount);\n    for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n      final int startIdx \u003d workerIdx;\n      Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n        @Override\n        public List\u003cINodesInPath\u003e call() {\n          List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n          for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n            INode inode \u003d inodes[idx];\n            if (!inode.isFile()) {\n              continue;\n            }\n            INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n                fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n            if (ancestorDir !\u003d null \u0026\u0026\n                !inodesInPath.isDescendant(ancestorDir)) {\n              continue;\n            }\n            iNodesInPaths.add(inodesInPath);\n          }\n          return iNodesInPaths;\n        }\n      };\n\n      // Submit the inode filter task to the Executor Service\n      futureList.add(inodeFilterService.submit(c));\n    }\n    inodeFilterService.shutdown();\n\n    for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n      try {\n        iipSet.addAll(f.get());\n      } catch (Exception e) {\n        throw new IOException(\"Failed to get files with active leases\", e);\n      }\n    }\n    final long endTimeMs \u003d Time.monotonicNow();\n    if ((endTimeMs - startTimeMs) \u003e 1000) {\n      LOG.info(\"Took \" + (endTimeMs - startTimeMs) + \" ms to collect \"\n          + iipSet.size() + \" open files with leases\" +\n          ((ancestorDir !\u003d null) ?\n              \" under \" + ancestorDir.getFullPathName() : \".\"));\n    }\n    return iipSet;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/LeaseManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "20e3ae260b40cd6ef657b2a629a02219d68f162f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11402. HDFS Snapshots should capture point-in-time copies of OPEN files. (Manoj Govindassamy via Yongjun Zhang)\n",
      "commitDate": "21/04/17 8:35 PM",
      "commitName": "20e3ae260b40cd6ef657b2a629a02219d68f162f",
      "commitAuthor": "Yongjun Zhang",
      "diff": "@@ -0,0 +1,60 @@\n+  public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n+      ancestorDir) {\n+    assert fsnamesystem.hasReadLock();\n+    final long startTimeMs \u003d Time.monotonicNow();\n+    Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n+    final INode[] inodes \u003d getINodesWithLease();\n+    int inodeCount \u003d inodes.length;\n+    if (inodeCount \u003d\u003d 0) {\n+      return iipSet;\n+    }\n+\n+    List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n+    final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n+        (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n+    ExecutorService inodeFilterService \u003d\n+        Executors.newFixedThreadPool(workerCount);\n+    for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n+      final int startIdx \u003d workerIdx;\n+      Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n+        @Override\n+        public List\u003cINodesInPath\u003e call() {\n+          List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n+          for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n+            INode inode \u003d inodes[idx];\n+            if (!inode.isFile()) {\n+              continue;\n+            }\n+            INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n+                fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n+            if (ancestorDir !\u003d null \u0026\u0026\n+                !inodesInPath.isDescendant(ancestorDir)) {\n+              continue;\n+            }\n+            iNodesInPaths.add(inodesInPath);\n+          }\n+          return iNodesInPaths;\n+        }\n+      };\n+\n+      // Submit the inode filter task to the Executor Service\n+      futureList.add(inodeFilterService.submit(c));\n+    }\n+    inodeFilterService.shutdown();\n+\n+    for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n+      try {\n+        iipSet.addAll(f.get());\n+      } catch (Exception e) {\n+        LOG.warn(\"INode filter task encountered exception: \", e);\n+      }\n+    }\n+    final long endTimeMs \u003d Time.monotonicNow();\n+    if ((endTimeMs - startTimeMs) \u003e 1000) {\n+      LOG.info(\"Took \" + (endTimeMs - startTimeMs) + \" ms to collect \"\n+          + iipSet.size() + \" open files with leases\" +\n+          ((ancestorDir !\u003d null) ?\n+              \" under \" + ancestorDir.getFullPathName() : \".\"));\n+    }\n+    return iipSet;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cINodesInPath\u003e getINodeWithLeases(final INodeDirectory\n      ancestorDir) {\n    assert fsnamesystem.hasReadLock();\n    final long startTimeMs \u003d Time.monotonicNow();\n    Set\u003cINodesInPath\u003e iipSet \u003d new HashSet\u003c\u003e();\n    final INode[] inodes \u003d getINodesWithLease();\n    int inodeCount \u003d inodes.length;\n    if (inodeCount \u003d\u003d 0) {\n      return iipSet;\n    }\n\n    List\u003cFuture\u003cList\u003cINodesInPath\u003e\u003e\u003e futureList \u003d Lists.newArrayList();\n    final int workerCount \u003d Math.min(INODE_FILTER_WORKER_COUNT_MAX,\n        (((inodeCount - 1) / INODE_FILTER_WORKER_TASK_MIN) + 1));\n    ExecutorService inodeFilterService \u003d\n        Executors.newFixedThreadPool(workerCount);\n    for (int workerIdx \u003d 0; workerIdx \u003c workerCount; workerIdx++) {\n      final int startIdx \u003d workerIdx;\n      Callable\u003cList\u003cINodesInPath\u003e\u003e c \u003d new Callable\u003cList\u003cINodesInPath\u003e\u003e() {\n        @Override\n        public List\u003cINodesInPath\u003e call() {\n          List\u003cINodesInPath\u003e iNodesInPaths \u003d Lists.newArrayList();\n          for (int idx \u003d startIdx; idx \u003c inodeCount; idx +\u003d workerCount) {\n            INode inode \u003d inodes[idx];\n            if (!inode.isFile()) {\n              continue;\n            }\n            INodesInPath inodesInPath \u003d INodesInPath.fromINode(\n                fsnamesystem.getFSDirectory().getRoot(), inode.asFile());\n            if (ancestorDir !\u003d null \u0026\u0026\n                !inodesInPath.isDescendant(ancestorDir)) {\n              continue;\n            }\n            iNodesInPaths.add(inodesInPath);\n          }\n          return iNodesInPaths;\n        }\n      };\n\n      // Submit the inode filter task to the Executor Service\n      futureList.add(inodeFilterService.submit(c));\n    }\n    inodeFilterService.shutdown();\n\n    for (Future\u003cList\u003cINodesInPath\u003e\u003e f : futureList) {\n      try {\n        iipSet.addAll(f.get());\n      } catch (Exception e) {\n        LOG.warn(\"INode filter task encountered exception: \", e);\n      }\n    }\n    final long endTimeMs \u003d Time.monotonicNow();\n    if ((endTimeMs - startTimeMs) \u003e 1000) {\n      LOG.info(\"Took \" + (endTimeMs - startTimeMs) + \" ms to collect \"\n          + iipSet.size() + \" open files with leases\" +\n          ((ancestorDir !\u003d null) ?\n              \" under \" + ancestorDir.getFullPathName() : \".\"));\n    }\n    return iipSet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/LeaseManager.java"
    }
  }
}