{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineACLsManager.java",
  "functionName": "checkAccess",
  "functionId": "checkAccess___callerUGI-UserGroupInformation__domain-TimelineDomain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/security/TimelineACLsManager.java",
  "functionStartLine": 146,
  "functionEndLine": 169,
  "numCommitsSeen": 8,
  "timeTaken": 1379,
  "changeHistory": [
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,24 @@\n+  public boolean checkAccess(UserGroupInformation callerUGI,\n+      TimelineDomain domain) throws YarnException, IOException {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Verifying the access of \"\n+          + (callerUGI \u003d\u003d null ? null : callerUGI.getShortUserName())\n+          + \" on the timeline domain \" + domain);\n+    }\n+\n+    if (!adminAclsManager.areACLsEnabled()) {\n+      return true;\n+    }\n+\n+    String owner \u003d domain.getOwner();\n+    if (owner \u003d\u003d null || owner.length() \u003d\u003d 0) {\n+      throw new YarnException(\"Owner information of the timeline domain \"\n+          + domain.getId() + \" is corrupted.\");\n+    }\n+    if (callerUGI !\u003d null\n+        \u0026\u0026 (adminAclsManager.isAdmin(callerUGI) ||\n+            callerUGI.getShortUserName().equals(owner))) {\n+      return true;\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean checkAccess(UserGroupInformation callerUGI,\n      TimelineDomain domain) throws YarnException, IOException {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Verifying the access of \"\n          + (callerUGI \u003d\u003d null ? null : callerUGI.getShortUserName())\n          + \" on the timeline domain \" + domain);\n    }\n\n    if (!adminAclsManager.areACLsEnabled()) {\n      return true;\n    }\n\n    String owner \u003d domain.getOwner();\n    if (owner \u003d\u003d null || owner.length() \u003d\u003d 0) {\n      throw new YarnException(\"Owner information of the timeline domain \"\n          + domain.getId() + \" is corrupted.\");\n    }\n    if (callerUGI !\u003d null\n        \u0026\u0026 (adminAclsManager.isAdmin(callerUGI) ||\n            callerUGI.getShortUserName().equals(owner))) {\n      return true;\n    }\n    return false;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/security/TimelineACLsManager.java"
    }
  }
}