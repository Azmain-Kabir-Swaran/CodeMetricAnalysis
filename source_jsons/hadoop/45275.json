{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMClientImpl.java",
  "functionName": "addResourceRequest",
  "functionId": "addResourceRequest___priority-Priority__resourceName-String__execTypeReq-ExecutionTypeRequest__capability-Resource__req-T__relaxLocality-boolean__labelExpression-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
  "functionStartLine": 925,
  "functionEndLine": 951,
  "numCommitsSeen": 227,
  "timeTaken": 7002,
  "changeHistory": [
    "aae629913cee0157c945a2c7384c7bf398f10616",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
    "19c743c1bbcaf3df8f1d63e557143c960a538c42",
    "51432779588fdd741b4840601f5db637ec783d92",
    "c1957fef29b07fea70938e971b30532a1e131fd0",
    "a5ec3d080978a67837946a991843a081ea712539",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7",
    "3520039979188c4ca6e69654223b3ac794e8bf8f",
    "1fe8e2d7eed74453cfe172853881fafc360a10b6",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
    "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
    "0a61990855c23ebfa065145fa01084e84781b51c"
  ],
  "changeHistoryShort": {
    "aae629913cee0157c945a2c7384c7bf398f10616": "Ymultichange(Yparameterchange,Ybodychange)",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Ymultichange(Yparameterchange,Ybodychange)",
    "19c743c1bbcaf3df8f1d63e557143c960a538c42": "Ybodychange",
    "51432779588fdd741b4840601f5db637ec783d92": "Ymultichange(Yparameterchange,Ybodychange)",
    "c1957fef29b07fea70938e971b30532a1e131fd0": "Ybodychange",
    "a5ec3d080978a67837946a991843a081ea712539": "Ymultichange(Yparameterchange,Ybodychange)",
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": "Ybodychange",
    "3520039979188c4ca6e69654223b3ac794e8bf8f": "Ymultichange(Yparameterchange,Ybodychange)",
    "1fe8e2d7eed74453cfe172853881fafc360a10b6": "Ymultichange(Yparameterchange,Ybodychange)",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": "Yfilerename",
    "3492f5eff1a22aba0d09d72a9dfd3353525c072e": "Ymultichange(Yparameterchange,Ybodychange)",
    "0a61990855c23ebfa065145fa01084e84781b51c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aae629913cee0157c945a2c7384c7bf398f10616": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7292. Retrospect Resource Profile Behavior for overriding capability. Contributed by Wangda Tan.\n",
      "commitDate": "15/02/18 11:07 PM",
      "commitName": "aae629913cee0157c945a2c7384c7bf398f10616",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7292. Retrospect Resource Profile Behavior for overriding capability. Contributed by Wangda Tan.\n",
          "commitDate": "15/02/18 11:07 PM",
          "commitName": "aae629913cee0157c945a2c7384c7bf398f10616",
          "commitAuthor": "Sunil G",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "29d9e4d5814900d5c59d77fe05d32186d4ad9385",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.9,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,27 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req,\n+      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n       boolean relaxLocality, String labelExpression) {\n     RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n         getTable(req.getAllocationRequestId());\n     if (remoteRequestsTable \u003d\u003d null) {\n-      remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n-      if (this.resourceProfilesMap instanceof HashMap) {\n-        remoteRequestsTable.setResourceComparator(\n-            new ProfileCapabilityComparator((HashMap) resourceProfilesMap));\n-      }\n+      remoteRequestsTable \u003d new RemoteRequestsTable\u003c\u003e();\n       putTable(req.getAllocationRequestId(), remoteRequestsTable);\n     }\n     @SuppressWarnings(\"unchecked\")\n     ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n         .addResourceRequest(req.getAllocationRequestId(), priority,\n             resourceName, execTypeReq, capability, req, relaxLocality,\n             labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n      boolean relaxLocality, String labelExpression) {\n    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n        getTable(req.getAllocationRequestId());\n    if (remoteRequestsTable \u003d\u003d null) {\n      remoteRequestsTable \u003d new RemoteRequestsTable\u003c\u003e();\n      putTable(req.getAllocationRequestId(), remoteRequestsTable);\n    }\n    @SuppressWarnings(\"unchecked\")\n    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n        .addResourceRequest(req.getAllocationRequestId(), priority,\n            resourceName, execTypeReq, capability, req, relaxLocality,\n            labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, resourceName-String, execTypeReq-ExecutionTypeRequest, capability-ProfileCapability, req-T, relaxLocality-boolean, labelExpression-String]",
            "newValue": "[priority-Priority, resourceName-String, execTypeReq-ExecutionTypeRequest, capability-Resource, req-T, relaxLocality-boolean, labelExpression-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7292. Retrospect Resource Profile Behavior for overriding capability. Contributed by Wangda Tan.\n",
          "commitDate": "15/02/18 11:07 PM",
          "commitName": "aae629913cee0157c945a2c7384c7bf398f10616",
          "commitAuthor": "Sunil G",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "29d9e4d5814900d5c59d77fe05d32186d4ad9385",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 15.9,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,27 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req,\n+      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n       boolean relaxLocality, String labelExpression) {\n     RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n         getTable(req.getAllocationRequestId());\n     if (remoteRequestsTable \u003d\u003d null) {\n-      remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n-      if (this.resourceProfilesMap instanceof HashMap) {\n-        remoteRequestsTable.setResourceComparator(\n-            new ProfileCapabilityComparator((HashMap) resourceProfilesMap));\n-      }\n+      remoteRequestsTable \u003d new RemoteRequestsTable\u003c\u003e();\n       putTable(req.getAllocationRequestId(), remoteRequestsTable);\n     }\n     @SuppressWarnings(\"unchecked\")\n     ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n         .addResourceRequest(req.getAllocationRequestId(), priority,\n             resourceName, execTypeReq, capability, req, relaxLocality,\n             labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n      boolean relaxLocality, String labelExpression) {\n    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n        getTable(req.getAllocationRequestId());\n    if (remoteRequestsTable \u003d\u003d null) {\n      remoteRequestsTable \u003d new RemoteRequestsTable\u003c\u003e();\n      putTable(req.getAllocationRequestId(), remoteRequestsTable);\n    }\n    @SuppressWarnings(\"unchecked\")\n    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n        .addResourceRequest(req.getAllocationRequestId(), priority,\n            resourceName, execTypeReq, capability, req, relaxLocality,\n            labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "24/07/17 12:03 PM",
          "commitNameOld": "4c40cd451cbdbce5d2b94ad0e7e3cc991c3439c5",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 49.89,
          "commitsBetweenForRepo": 442,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,31 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n+      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req,\n       boolean relaxLocality, String labelExpression) {\n     RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n         getTable(req.getAllocationRequestId());\n     if (remoteRequestsTable \u003d\u003d null) {\n       remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n+      if (this.resourceProfilesMap instanceof HashMap) {\n+        remoteRequestsTable.setResourceComparator(\n+            new ProfileCapabilityComparator((HashMap) resourceProfilesMap));\n+      }\n       putTable(req.getAllocationRequestId(), remoteRequestsTable);\n     }\n     @SuppressWarnings(\"unchecked\")\n     ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n         .addResourceRequest(req.getAllocationRequestId(), priority,\n             resourceName, execTypeReq, capability, req, relaxLocality,\n             labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req,\n      boolean relaxLocality, String labelExpression) {\n    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n        getTable(req.getAllocationRequestId());\n    if (remoteRequestsTable \u003d\u003d null) {\n      remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n      if (this.resourceProfilesMap instanceof HashMap) {\n        remoteRequestsTable.setResourceComparator(\n            new ProfileCapabilityComparator((HashMap) resourceProfilesMap));\n      }\n      putTable(req.getAllocationRequestId(), remoteRequestsTable);\n    }\n    @SuppressWarnings(\"unchecked\")\n    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n        .addResourceRequest(req.getAllocationRequestId(), priority,\n            resourceName, execTypeReq, capability, req, relaxLocality,\n            labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, resourceName-String, execTypeReq-ExecutionTypeRequest, capability-Resource, req-T, relaxLocality-boolean, labelExpression-String]",
            "newValue": "[priority-Priority, resourceName-String, execTypeReq-ExecutionTypeRequest, capability-ProfileCapability, req-T, relaxLocality-boolean, labelExpression-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
          "commitDate": "12/09/17 9:19 AM",
          "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "24/07/17 12:03 PM",
          "commitNameOld": "4c40cd451cbdbce5d2b94ad0e7e3cc991c3439c5",
          "commitAuthorOld": "Daniel Templeton",
          "daysBetweenCommits": 49.89,
          "commitsBetweenForRepo": 442,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,31 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n+      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req,\n       boolean relaxLocality, String labelExpression) {\n     RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n         getTable(req.getAllocationRequestId());\n     if (remoteRequestsTable \u003d\u003d null) {\n       remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n+      if (this.resourceProfilesMap instanceof HashMap) {\n+        remoteRequestsTable.setResourceComparator(\n+            new ProfileCapabilityComparator((HashMap) resourceProfilesMap));\n+      }\n       putTable(req.getAllocationRequestId(), remoteRequestsTable);\n     }\n     @SuppressWarnings(\"unchecked\")\n     ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n         .addResourceRequest(req.getAllocationRequestId(), priority,\n             resourceName, execTypeReq, capability, req, relaxLocality,\n             labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      ExecutionTypeRequest execTypeReq, ProfileCapability capability, T req,\n      boolean relaxLocality, String labelExpression) {\n    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n        getTable(req.getAllocationRequestId());\n    if (remoteRequestsTable \u003d\u003d null) {\n      remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n      if (this.resourceProfilesMap instanceof HashMap) {\n        remoteRequestsTable.setResourceComparator(\n            new ProfileCapabilityComparator((HashMap) resourceProfilesMap));\n      }\n      putTable(req.getAllocationRequestId(), remoteRequestsTable);\n    }\n    @SuppressWarnings(\"unchecked\")\n    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n        .addResourceRequest(req.getAllocationRequestId(), priority,\n            resourceName, execTypeReq, capability, req, relaxLocality,\n            labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Adding request to ask \" + resourceRequestInfo.remoteRequest);\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "19c743c1bbcaf3df8f1d63e557143c960a538c42": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4889. Changes in AMRMClient for identifying resource-requests explicitly. (Arun Suresh via wangda)\n",
      "commitDate": "26/08/16 5:14 PM",
      "commitName": "19c743c1bbcaf3df8f1d63e557143c960a538c42",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/06/16 9:42 AM",
      "commitNameOld": "51432779588fdd741b4840601f5db637ec783d92",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 75.31,
      "commitsBetweenForRepo": 650,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,26 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n       ExecutionTypeRequest execTypeReq, Resource capability, T req,\n       boolean relaxLocality, String labelExpression) {\n+    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n+        getTable(req.getAllocationRequestId());\n+    if (remoteRequestsTable \u003d\u003d null) {\n+      remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n+      putTable(req.getAllocationRequestId(), remoteRequestsTable);\n+    }\n     @SuppressWarnings(\"unchecked\")\n     ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n-        .addResourceRequest(priority, resourceName,\n-        execTypeReq, capability, req, relaxLocality, labelExpression);\n+        .addResourceRequest(req.getAllocationRequestId(), priority,\n+            resourceName, execTypeReq, capability, req, relaxLocality,\n+            labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n      boolean relaxLocality, String labelExpression) {\n    RemoteRequestsTable\u003cT\u003e remoteRequestsTable \u003d\n        getTable(req.getAllocationRequestId());\n    if (remoteRequestsTable \u003d\u003d null) {\n      remoteRequestsTable \u003d new RemoteRequestsTable\u003cT\u003e();\n      putTable(req.getAllocationRequestId(), remoteRequestsTable);\n    }\n    @SuppressWarnings(\"unchecked\")\n    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n        .addResourceRequest(req.getAllocationRequestId(), priority,\n            resourceName, execTypeReq, capability, req, relaxLocality,\n            labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "51432779588fdd741b4840601f5db637ec783d92": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5124. Modify AMRMClient to set the ExecutionType in the ResourceRequest. (asuresh)\n",
      "commitDate": "12/06/16 9:42 AM",
      "commitName": "51432779588fdd741b4840601f5db637ec783d92",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5124. Modify AMRMClient to set the ExecutionType in the ResourceRequest. (asuresh)\n",
          "commitDate": "12/06/16 9:42 AM",
          "commitName": "51432779588fdd741b4840601f5db637ec783d92",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/05/16 8:54 AM",
          "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 14.03,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,19 @@\n-      addResourceRequest(Priority priority, String resourceName,\n-          Resource capability, T req, boolean relaxLocality,\n-          String labelExpression) {\n-    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n-      this.remoteRequestsTable.get(priority);\n-    if (remoteRequests \u003d\u003d null) {\n-      remoteRequests \u003d \n-          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n-      this.remoteRequestsTable.put(priority, remoteRequests);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Added priority\u003d\" + priority);\n-      }\n-    }\n-    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n-                                          remoteRequests.get(resourceName);\n-    if (reqMap \u003d\u003d null) {\n-      // capabilities are stored in reverse sorted order. smallest last.\n-      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n-          new ResourceReverseMemoryThenCpuComparator());\n-      remoteRequests.put(resourceName, reqMap);\n-    }\n-    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n-    if (resourceRequestInfo \u003d\u003d null) {\n-      resourceRequestInfo \u003d\n-          new ResourceRequestInfo(priority, resourceName, capability,\n-              relaxLocality);\n-      reqMap.put(capability, resourceRequestInfo);\n-    }\n-    \n-    resourceRequestInfo.remoteRequest.setNumContainers(\n-         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n-\n-    if (relaxLocality) {\n-      resourceRequestInfo.containerRequests.add(req);\n-    }\n-    \n-    if (ResourceRequest.ANY.equals(resourceName)) {\n-      resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n-    }\n+  private void addResourceRequest(Priority priority, String resourceName,\n+      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n+      boolean relaxLocality, String labelExpression) {\n+    @SuppressWarnings(\"unchecked\")\n+    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n+        .addResourceRequest(priority, resourceName,\n+        execTypeReq, capability, req, relaxLocality, labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n      boolean relaxLocality, String labelExpression) {\n    @SuppressWarnings(\"unchecked\")\n    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n        .addResourceRequest(priority, resourceName,\n        execTypeReq, capability, req, relaxLocality, labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, resourceName-String, capability-Resource, req-T, relaxLocality-boolean, labelExpression-String]",
            "newValue": "[priority-Priority, resourceName-String, execTypeReq-ExecutionTypeRequest, capability-Resource, req-T, relaxLocality-boolean, labelExpression-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5124. Modify AMRMClient to set the ExecutionType in the ResourceRequest. (asuresh)\n",
          "commitDate": "12/06/16 9:42 AM",
          "commitName": "51432779588fdd741b4840601f5db637ec783d92",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/05/16 8:54 AM",
          "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 14.03,
          "commitsBetweenForRepo": 85,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,51 +1,19 @@\n-      addResourceRequest(Priority priority, String resourceName,\n-          Resource capability, T req, boolean relaxLocality,\n-          String labelExpression) {\n-    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n-      this.remoteRequestsTable.get(priority);\n-    if (remoteRequests \u003d\u003d null) {\n-      remoteRequests \u003d \n-          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n-      this.remoteRequestsTable.put(priority, remoteRequests);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Added priority\u003d\" + priority);\n-      }\n-    }\n-    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n-                                          remoteRequests.get(resourceName);\n-    if (reqMap \u003d\u003d null) {\n-      // capabilities are stored in reverse sorted order. smallest last.\n-      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n-          new ResourceReverseMemoryThenCpuComparator());\n-      remoteRequests.put(resourceName, reqMap);\n-    }\n-    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n-    if (resourceRequestInfo \u003d\u003d null) {\n-      resourceRequestInfo \u003d\n-          new ResourceRequestInfo(priority, resourceName, capability,\n-              relaxLocality);\n-      reqMap.put(capability, resourceRequestInfo);\n-    }\n-    \n-    resourceRequestInfo.remoteRequest.setNumContainers(\n-         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n-\n-    if (relaxLocality) {\n-      resourceRequestInfo.containerRequests.add(req);\n-    }\n-    \n-    if (ResourceRequest.ANY.equals(resourceName)) {\n-      resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n-    }\n+  private void addResourceRequest(Priority priority, String resourceName,\n+      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n+      boolean relaxLocality, String labelExpression) {\n+    @SuppressWarnings(\"unchecked\")\n+    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n+        .addResourceRequest(priority, resourceName,\n+        execTypeReq, capability, req, relaxLocality, labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      ExecutionTypeRequest execTypeReq, Resource capability, T req,\n      boolean relaxLocality, String labelExpression) {\n    @SuppressWarnings(\"unchecked\")\n    ResourceRequestInfo resourceRequestInfo \u003d remoteRequestsTable\n        .addResourceRequest(priority, resourceName,\n        execTypeReq, capability, req, relaxLocality, labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "c1957fef29b07fea70938e971b30532a1e131fd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2694. Ensure only single node label specified in ResourceRequest. Contributed by Wangda Tan\n",
      "commitDate": "06/02/15 11:34 AM",
      "commitName": "c1957fef29b07fea70938e971b30532a1e131fd0",
      "commitAuthor": "Jian He",
      "commitDateOld": "28/01/15 3:23 PM",
      "commitNameOld": "6d2bdbd7dab179dfb4f19bb41809e97f1db88c6b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 8.84,
      "commitsBetweenForRepo": 89,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n       addResourceRequest(Priority priority, String resourceName,\n           Resource capability, T req, boolean relaxLocality,\n           String labelExpression) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n           new ResourceRequestInfo(priority, resourceName, capability,\n               relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n          resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n \n     if (relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n     \n-    resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n+    if (ResourceRequest.ANY.equals(resourceName)) {\n+      resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n+    }\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addResourceRequest(Priority priority, String resourceName,\n          Resource capability, T req, boolean relaxLocality,\n          String labelExpression) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n\n    if (relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n    \n    if (ResourceRequest.ANY.equals(resourceName)) {\n      resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "a5ec3d080978a67837946a991843a081ea712539": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2501. Enhanced AMRMClient library to support requests against node labels. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 7:57 PM",
      "commitName": "a5ec3d080978a67837946a991843a081ea712539",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2501. Enhanced AMRMClient library to support requests against node labels. Contributed by Wangda Tan.\n",
          "commitDate": "10/10/14 7:57 PM",
          "commitName": "a5ec3d080978a67837946a991843a081ea712539",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/09/14 10:16 AM",
          "commitNameOld": "a3d9934f916471a845dc679449d08f94dead550d",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 22.4,
          "commitsBetweenForRepo": 257,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,49 @@\n-  private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, T req, boolean relaxLocality) {\n+      addResourceRequest(Priority priority, String resourceName,\n+          Resource capability, T req, boolean relaxLocality,\n+          String labelExpression) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n           new ResourceRequestInfo(priority, resourceName, capability,\n               relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n          resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n \n     if (relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n+    \n+    resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      addResourceRequest(Priority priority, String resourceName,\n          Resource capability, T req, boolean relaxLocality,\n          String labelExpression) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n\n    if (relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, resourceName-String, capability-Resource, req-T, relaxLocality-boolean]",
            "newValue": "[priority-Priority, resourceName-String, capability-Resource, req-T, relaxLocality-boolean, labelExpression-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2501. Enhanced AMRMClient library to support requests against node labels. Contributed by Wangda Tan.\n",
          "commitDate": "10/10/14 7:57 PM",
          "commitName": "a5ec3d080978a67837946a991843a081ea712539",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/09/14 10:16 AM",
          "commitNameOld": "a3d9934f916471a845dc679449d08f94dead550d",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 22.4,
          "commitsBetweenForRepo": 257,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,49 @@\n-  private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, T req, boolean relaxLocality) {\n+      addResourceRequest(Priority priority, String resourceName,\n+          Resource capability, T req, boolean relaxLocality,\n+          String labelExpression) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n           new ResourceRequestInfo(priority, resourceName, capability,\n               relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n          resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n \n     if (relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n+    \n+    resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "      addResourceRequest(Priority priority, String resourceName,\n          Resource capability, T req, boolean relaxLocality,\n          String labelExpression) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n\n    if (relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNodeLabelExpression(labelExpression);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "ac914f79bc80b152e71e7de5497b73f22824f4a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-918. Remove ApplicationAttemptId from RegisterApplicationMasterRequestProto. Contributed by Vinod K V.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:57 PM",
      "commitName": "ac914f79bc80b152e71e7de5497b73f22824f4a7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "16/07/13 5:47 PM",
      "commitNameOld": "3520039979188c4ca6e69654223b3ac794e8bf8f",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 2.01,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n       Resource capability, T req, boolean relaxLocality) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n           new ResourceRequestInfo(priority, resourceName, capability,\n               relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n          resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n \n     if (relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n-          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n+          + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, T req, boolean relaxLocality) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n\n    if (relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {}
    },
    "3520039979188c4ca6e69654223b3ac794e8bf8f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-927. Change ContainerRequest to not have more than 1 container count and remove StoreContainerRequest (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503960 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 5:47 PM",
      "commitName": "3520039979188c4ca6e69654223b3ac794e8bf8f",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-927. Change ContainerRequest to not have more than 1 container count and remove StoreContainerRequest (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503960 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 5:47 PM",
          "commitName": "3520039979188c4ca6e69654223b3ac794e8bf8f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "16/07/13 3:47 PM",
          "commitNameOld": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, int containerCount, T req, boolean relaxLocality) {\n+      Resource capability, T req, boolean relaxLocality) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n           new ResourceRequestInfo(priority, resourceName, capability,\n               relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n-         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n+         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n \n-    if (req instanceof StoredContainerRequest \u0026\u0026 relaxLocality) {\n+    if (relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + appAttemptId + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, T req, boolean relaxLocality) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n\n    if (relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, resourceName-String, capability-Resource, containerCount-int, req-T, relaxLocality-boolean]",
            "newValue": "[priority-Priority, resourceName-String, capability-Resource, req-T, relaxLocality-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-927. Change ContainerRequest to not have more than 1 container count and remove StoreContainerRequest (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503960 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/13 5:47 PM",
          "commitName": "3520039979188c4ca6e69654223b3ac794e8bf8f",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "16/07/13 3:47 PM",
          "commitNameOld": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,46 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, int containerCount, T req, boolean relaxLocality) {\n+      Resource capability, T req, boolean relaxLocality) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n           new ResourceRequestInfo(priority, resourceName, capability,\n               relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n-         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n+         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n \n-    if (req instanceof StoredContainerRequest \u0026\u0026 relaxLocality) {\n+    if (relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + appAttemptId + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, T req, boolean relaxLocality) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + 1);\n\n    if (relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "1fe8e2d7eed74453cfe172853881fafc360a10b6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-521. Augment AM - RM client module to be able to request containers only at specific locations (Sandy Ryza via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503526 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/13 5:23 PM",
      "commitName": "1fe8e2d7eed74453cfe172853881fafc360a10b6",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-521. Augment AM - RM client module to be able to request containers only at specific locations (Sandy Ryza via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503526 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/07/13 5:23 PM",
          "commitName": "1fe8e2d7eed74453cfe172853881fafc360a10b6",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "15/07/13 10:13 AM",
          "commitNameOld": "fe735f237c735a375d2bd194ed80ef9949fb1a68",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 0.3,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, int containerCount, T req) {\n+      Resource capability, int containerCount, T req, boolean relaxLocality) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n-          new ResourceRequestInfo(priority, resourceName, capability);\n+          new ResourceRequestInfo(priority, resourceName, capability,\n+              relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n          resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n \n-    if(req instanceof StoredContainerRequest) {\n+    if (req instanceof StoredContainerRequest \u0026\u0026 relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + appAttemptId + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, int containerCount, T req, boolean relaxLocality) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n\n    if (req instanceof StoredContainerRequest \u0026\u0026 relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, resourceName-String, capability-Resource, containerCount-int, req-T]",
            "newValue": "[priority-Priority, resourceName-String, capability-Resource, containerCount-int, req-T, relaxLocality-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-521. Augment AM - RM client module to be able to request containers only at specific locations (Sandy Ryza via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503526 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/07/13 5:23 PM",
          "commitName": "1fe8e2d7eed74453cfe172853881fafc360a10b6",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "15/07/13 10:13 AM",
          "commitNameOld": "fe735f237c735a375d2bd194ed80ef9949fb1a68",
          "commitAuthorOld": "Bikas Saha",
          "daysBetweenCommits": 0.3,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,46 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, int containerCount, T req) {\n+      Resource capability, int containerCount, T req, boolean relaxLocality) {\n     Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n       remoteRequests \u003d \n           new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n     TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                           remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n       // capabilities are stored in reverse sorted order. smallest last.\n       reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n           new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n     ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n     if (resourceRequestInfo \u003d\u003d null) {\n       resourceRequestInfo \u003d\n-          new ResourceRequestInfo(priority, resourceName, capability);\n+          new ResourceRequestInfo(priority, resourceName, capability,\n+              relaxLocality);\n       reqMap.put(capability, resourceRequestInfo);\n     }\n     \n     resourceRequestInfo.remoteRequest.setNumContainers(\n          resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n \n-    if(req instanceof StoredContainerRequest) {\n+    if (req instanceof StoredContainerRequest \u0026\u0026 relaxLocality) {\n       resourceRequestInfo.containerRequests.add(req);\n     }\n \n     // Note this down for next interaction with ResourceManager\n     addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + appAttemptId + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n           + resourceRequestInfo.remoteRequest.getNumContainers() \n           + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, int containerCount, T req, boolean relaxLocality) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability,\n              relaxLocality);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n\n    if (req instanceof StoredContainerRequest \u0026\u0026 relaxLocality) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": {
      "type": "Yfilerename",
      "commitMessage": "YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 9:02 PM",
      "commitName": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 8:10 PM",
      "commitNameOld": "2b14656ab5050dd75935b64681cdc25fb49db94f",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, int containerCount, T req) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n\n    if(req instanceof StoredContainerRequest) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java"
      }
    },
    "3492f5eff1a22aba0d09d72a9dfd3353525c072e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-660. Improve AMRMClient with matching requests (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488485 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 1:23 AM",
      "commitName": "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
      "commitAuthor": "Bikas Saha",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-660. Improve AMRMClient with matching requests (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488485 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/06/13 1:23 AM",
          "commitName": "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "08/05/13 10:32 PM",
          "commitNameOld": "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 23.12,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,45 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, int containerCount) {\n-    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n+      Resource capability, int containerCount, T req) {\n+    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n-      remoteRequests \u003d new HashMap\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e();\n+      remoteRequests \u003d \n+          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n-    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n+    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n+                                          remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n-      reqMap \u003d new HashMap\u003cResource, ResourceRequest\u003e();\n+      // capabilities are stored in reverse sorted order. smallest last.\n+      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n+          new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n-    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n-    if (remoteRequest \u003d\u003d null) {\n-      remoteRequest \u003d BuilderUtils.\n-          newResourceRequest(priority, resourceName, capability, 0);\n-      reqMap.put(capability, remoteRequest);\n+    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n+    if (resourceRequestInfo \u003d\u003d null) {\n+      resourceRequestInfo \u003d\n+          new ResourceRequestInfo(priority, resourceName, capability);\n+      reqMap.put(capability, resourceRequestInfo);\n     }\n     \n-    remoteRequest.setNumContainers(remoteRequest.getNumContainers() + containerCount);\n+    resourceRequestInfo.remoteRequest.setNumContainers(\n+         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n+\n+    if(req instanceof StoredContainerRequest) {\n+      resourceRequestInfo.containerRequests.add(req);\n+    }\n \n     // Note this down for next interaction with ResourceManager\n-    addResourceRequestToAsk(remoteRequest);\n+    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + appAttemptId + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n-          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n+          + resourceRequestInfo.remoteRequest.getNumContainers() \n+          + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, int containerCount, T req) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n\n    if(req instanceof StoredContainerRequest) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, resourceName-String, capability-Resource, containerCount-int]",
            "newValue": "[priority-Priority, resourceName-String, capability-Resource, containerCount-int, req-T]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-660. Improve AMRMClient with matching requests (bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488485 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/06/13 1:23 AM",
          "commitName": "3492f5eff1a22aba0d09d72a9dfd3353525c072e",
          "commitAuthor": "Bikas Saha",
          "commitDateOld": "08/05/13 10:32 PM",
          "commitNameOld": "9c4f86879cad6d6e19255d4ae8f28b61328bd10b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 23.12,
          "commitsBetweenForRepo": 117,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,45 @@\n   private void addResourceRequest(Priority priority, String resourceName,\n-      Resource capability, int containerCount) {\n-    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n+      Resource capability, int containerCount, T req) {\n+    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n       this.remoteRequestsTable.get(priority);\n     if (remoteRequests \u003d\u003d null) {\n-      remoteRequests \u003d new HashMap\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e();\n+      remoteRequests \u003d \n+          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n       this.remoteRequestsTable.put(priority, remoteRequests);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Added priority\u003d\" + priority);\n       }\n     }\n-    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n+    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n+                                          remoteRequests.get(resourceName);\n     if (reqMap \u003d\u003d null) {\n-      reqMap \u003d new HashMap\u003cResource, ResourceRequest\u003e();\n+      // capabilities are stored in reverse sorted order. smallest last.\n+      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n+          new ResourceReverseMemoryThenCpuComparator());\n       remoteRequests.put(resourceName, reqMap);\n     }\n-    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n-    if (remoteRequest \u003d\u003d null) {\n-      remoteRequest \u003d BuilderUtils.\n-          newResourceRequest(priority, resourceName, capability, 0);\n-      reqMap.put(capability, remoteRequest);\n+    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n+    if (resourceRequestInfo \u003d\u003d null) {\n+      resourceRequestInfo \u003d\n+          new ResourceRequestInfo(priority, resourceName, capability);\n+      reqMap.put(capability, resourceRequestInfo);\n     }\n     \n-    remoteRequest.setNumContainers(remoteRequest.getNumContainers() + containerCount);\n+    resourceRequestInfo.remoteRequest.setNumContainers(\n+         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n+\n+    if(req instanceof StoredContainerRequest) {\n+      resourceRequestInfo.containerRequests.add(req);\n+    }\n \n     // Note this down for next interaction with ResourceManager\n-    addResourceRequestToAsk(remoteRequest);\n+    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n           + appAttemptId + \" priority\u003d\" + priority.getPriority()\n           + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n-          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n+          + resourceRequestInfo.remoteRequest.getNumContainers() \n+          + \" #asks\u003d\" + ask.size());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, int containerCount, T req) {\n    Map\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d \n          new HashMap\u003cString, TreeMap\u003cResource, ResourceRequestInfo\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    TreeMap\u003cResource, ResourceRequestInfo\u003e reqMap \u003d \n                                          remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      // capabilities are stored in reverse sorted order. smallest last.\n      reqMap \u003d new TreeMap\u003cResource, ResourceRequestInfo\u003e(\n          new ResourceReverseMemoryThenCpuComparator());\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequestInfo resourceRequestInfo \u003d reqMap.get(capability);\n    if (resourceRequestInfo \u003d\u003d null) {\n      resourceRequestInfo \u003d\n          new ResourceRequestInfo(priority, resourceName, capability);\n      reqMap.put(capability, resourceRequestInfo);\n    }\n    \n    resourceRequestInfo.remoteRequest.setNumContainers(\n         resourceRequestInfo.remoteRequest.getNumContainers() + containerCount);\n\n    if(req instanceof StoredContainerRequest) {\n      resourceRequestInfo.containerRequests.add(req);\n    }\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(resourceRequestInfo.remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + resourceRequestInfo.remoteRequest.getNumContainers() \n          + \" #asks\u003d\" + ask.size());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "0a61990855c23ebfa065145fa01084e84781b51c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-103. Add a yarn AM-RM client module. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1428554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/01/13 11:11 AM",
      "commitName": "0a61990855c23ebfa065145fa01084e84781b51c",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,35 @@\n+  private void addResourceRequest(Priority priority, String resourceName,\n+      Resource capability, int containerCount) {\n+    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n+      this.remoteRequestsTable.get(priority);\n+    if (remoteRequests \u003d\u003d null) {\n+      remoteRequests \u003d new HashMap\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e();\n+      this.remoteRequestsTable.put(priority, remoteRequests);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Added priority\u003d\" + priority);\n+      }\n+    }\n+    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n+    if (reqMap \u003d\u003d null) {\n+      reqMap \u003d new HashMap\u003cResource, ResourceRequest\u003e();\n+      remoteRequests.put(resourceName, reqMap);\n+    }\n+    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n+    if (remoteRequest \u003d\u003d null) {\n+      remoteRequest \u003d BuilderUtils.\n+          newResourceRequest(priority, resourceName, capability, 0);\n+      reqMap.put(capability, remoteRequest);\n+    }\n+    \n+    remoteRequest.setNumContainers(remoteRequest.getNumContainers() + containerCount);\n+\n+    // Note this down for next interaction with ResourceManager\n+    addResourceRequestToAsk(remoteRequest);\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n+          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n+          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n+          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addResourceRequest(Priority priority, String resourceName,\n      Resource capability, int containerCount) {\n    Map\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e remoteRequests \u003d\n      this.remoteRequestsTable.get(priority);\n    if (remoteRequests \u003d\u003d null) {\n      remoteRequests \u003d new HashMap\u003cString, Map\u003cResource, ResourceRequest\u003e\u003e();\n      this.remoteRequestsTable.put(priority, remoteRequests);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Added priority\u003d\" + priority);\n      }\n    }\n    Map\u003cResource, ResourceRequest\u003e reqMap \u003d remoteRequests.get(resourceName);\n    if (reqMap \u003d\u003d null) {\n      reqMap \u003d new HashMap\u003cResource, ResourceRequest\u003e();\n      remoteRequests.put(resourceName, reqMap);\n    }\n    ResourceRequest remoteRequest \u003d reqMap.get(capability);\n    if (remoteRequest \u003d\u003d null) {\n      remoteRequest \u003d BuilderUtils.\n          newResourceRequest(priority, resourceName, capability, 0);\n      reqMap.put(capability, remoteRequest);\n    }\n    \n    remoteRequest.setNumContainers(remoteRequest.getNumContainers() + containerCount);\n\n    // Note this down for next interaction with ResourceManager\n    addResourceRequestToAsk(remoteRequest);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"addResourceRequest:\" + \" applicationId\u003d\"\n          + appAttemptId + \" priority\u003d\" + priority.getPriority()\n          + \" resourceName\u003d\" + resourceName + \" numContainers\u003d\"\n          + remoteRequest.getNumContainers() + \" #asks\u003d\" + ask.size());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/AMRMClientImpl.java"
    }
  }
}