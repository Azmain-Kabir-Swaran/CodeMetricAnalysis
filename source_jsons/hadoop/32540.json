{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebServer.java",
  "functionName": "serviceStart",
  "functionId": "serviceStart",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
  "functionStartLine": 67,
  "functionEndLine": 133,
  "numCommitsSeen": 33,
  "timeTaken": 10786,
  "changeHistory": [
    "154449fbd80d1b357063ec675d12b17b6c6e20fc",
    "1f9c4f32e842529be5980e395587f135452372bb",
    "347ea385817766a5c418017009728cd8b9959776",
    "8fadd69047143c9c389cc09ca24100b5f90f79d2",
    "22fcd819f0c445be661e644ed67221f867013af8",
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
    "f8adeb712dc834c27cec15c04a986f2f635aba83",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "2214871d916fdcae62aa51afbb5fd571f2808745",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
    "e86036662c139cd7e67e69a0215471b1ec724a05",
    "0928502029ef141759008997335ea2cd836a7154",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "2692675fc3b5046d2ec88542c30203c87e135b70",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "90f096d86c93d2e5acaa3d9fc1ce1e0ae9de050a",
    "0ea8570be578be60e2f32849900a1c50506d78d3",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "5f6adcf396b78934d7da2bba0d052038ff962f26",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "154449fbd80d1b357063ec675d12b17b6c6e20fc": "Ybodychange",
    "1f9c4f32e842529be5980e395587f135452372bb": "Ybodychange",
    "347ea385817766a5c418017009728cd8b9959776": "Ybodychange",
    "8fadd69047143c9c389cc09ca24100b5f90f79d2": "Ybodychange",
    "22fcd819f0c445be661e644ed67221f867013af8": "Ybodychange",
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea": "Ybodychange",
    "f8adeb712dc834c27cec15c04a986f2f635aba83": "Ybodychange",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "2214871d916fdcae62aa51afbb5fd571f2808745": "Ybodychange",
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": "Ybodychange",
    "e86036662c139cd7e67e69a0215471b1ec724a05": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "2692675fc3b5046d2ec88542c30203c87e135b70": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "90f096d86c93d2e5acaa3d9fc1ce1e0ae9de050a": "Ybodychange",
    "0ea8570be578be60e2f32849900a1c50506d78d3": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "5f6adcf396b78934d7da2bba0d052038ff962f26": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "154449fbd80d1b357063ec675d12b17b6c6e20fc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8914. Add xtermjs to YARN UI2. Contributed by Eric Yang and Akhil PB\n",
      "commitDate": "07/12/18 10:56 AM",
      "commitName": "154449fbd80d1b357063ec675d12b17b6c6e20fc",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "12/11/18 10:42 AM",
      "commitNameOld": "1f9c4f32e842529be5980e395587f135452372bb",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 25.01,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,67 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n+    Map\u003cString, String\u003e terminalParams \u003d new HashMap\u003cString, String\u003e();\n+    terminalParams.put(\"resourceBase\", WebServer.class\n+        .getClassLoader().getResource(\"TERMINAL\").toExternalForm());\n+    terminalParams.put(\"dirAllowed\", \"false\");\n+    terminalParams.put(\"pathInfoOnly\", \"true\");\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.NM_BIND_HOST,\n                           WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n     boolean enableCors \u003d conf\n         .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n     if (enableCors) {\n       getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user.\n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n             conf.getClasses(filterInitializerConfKey);\n     List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n           break;\n         }\n         targets.add(initializer.getName());\n       }\n     }\n     if (!hasHadoopAuthFilterInitializer) {\n       targets.add(AuthenticationFilterInitializer.class.getName());\n       conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n     }\n     ContainerShellWebSocket.init(nmContext);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .withServlet(\"ContainerShellWebSocket\", \"/container/*\",\n-              ContainerShellWebSocketServlet.class, params, false)\n+                ContainerShellWebSocketServlet.class, params, false)\n+            .withServlet(\"Terminal\", \"/terminal/*\",\n+                TerminalServlet.class, terminalParams, false)\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n               .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n               .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    Map\u003cString, String\u003e terminalParams \u003d new HashMap\u003cString, String\u003e();\n    terminalParams.put(\"resourceBase\", WebServer.class\n        .getClassLoader().getResource(\"TERMINAL\").toExternalForm());\n    terminalParams.put(\"dirAllowed\", \"false\");\n    terminalParams.put(\"pathInfoOnly\", \"true\");\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n    boolean enableCors \u003d conf\n        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n    if (enableCors) {\n      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user.\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n            conf.getClasses(filterInitializerConfKey);\n    List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n          break;\n        }\n        targets.add(initializer.getName());\n      }\n    }\n    if (!hasHadoopAuthFilterInitializer) {\n      targets.add(AuthenticationFilterInitializer.class.getName());\n      conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n    }\n    ContainerShellWebSocket.init(nmContext);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .withServlet(\"ContainerShellWebSocket\", \"/container/*\",\n                ContainerShellWebSocketServlet.class, params, false)\n            .withServlet(\"Terminal\", \"/terminal/*\",\n                TerminalServlet.class, terminalParams, false)\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n              .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "1f9c4f32e842529be5980e395587f135452372bb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8776. Implement Container Exec feature in LinuxContainerExecutor. Contributed by Eric Yang\n",
      "commitDate": "12/11/18 10:42 AM",
      "commitName": "1f9c4f32e842529be5980e395587f135452372bb",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "08/10/18 10:56 AM",
      "commitNameOld": "347ea385817766a5c418017009728cd8b9959776",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 35.03,
      "commitsBetweenForRepo": 335,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n     Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.NM_BIND_HOST,\n                           WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n     boolean enableCors \u003d conf\n         .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n     if (enableCors) {\n       getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user.\n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n             conf.getClasses(filterInitializerConfKey);\n     List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n           break;\n         }\n         targets.add(initializer.getName());\n       }\n     }\n     if (!hasHadoopAuthFilterInitializer) {\n       targets.add(AuthenticationFilterInitializer.class.getName());\n       conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n     }\n+    ContainerShellWebSocket.init(nmContext);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .withServlet(\"ContainerShellWebSocket\", \"/container/*\",\n               ContainerShellWebSocketServlet.class, params, false)\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n               .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n               .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n    boolean enableCors \u003d conf\n        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n    if (enableCors) {\n      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user.\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n            conf.getClasses(filterInitializerConfKey);\n    List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n          break;\n        }\n        targets.add(initializer.getName());\n      }\n    }\n    if (!hasHadoopAuthFilterInitializer) {\n      targets.add(AuthenticationFilterInitializer.class.getName());\n      conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n    }\n    ContainerShellWebSocket.init(nmContext);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .withServlet(\"ContainerShellWebSocket\", \"/container/*\",\n              ContainerShellWebSocketServlet.class, params, false)\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n              .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "347ea385817766a5c418017009728cd8b9959776": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8763.  Added node manager websocket API for accessing containers.\n            Contributed by Zian Chen\n",
      "commitDate": "08/10/18 10:56 AM",
      "commitName": "347ea385817766a5c418017009728cd8b9959776",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 412.4,
      "commitsBetweenForRepo": 3717,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,59 @@\n   protected void serviceStart() throws Exception {\n     Configuration conf \u003d getConfig();\n+    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.NM_BIND_HOST,\n                           WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n     boolean enableCors \u003d conf\n         .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n     if (enableCors) {\n       getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user.\n     boolean hasHadoopAuthFilterInitializer \u003d false;\n     String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n     Class\u003c?\u003e[] initializersClasses \u003d\n             conf.getClasses(filterInitializerConfKey);\n     List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n     if (initializersClasses !\u003d null) {\n       for (Class\u003c?\u003e initializer : initializersClasses) {\n         if (initializer.getName().equals(\n             AuthenticationFilterInitializer.class.getName())) {\n           hasHadoopAuthFilterInitializer \u003d true;\n           break;\n         }\n         targets.add(initializer.getName());\n       }\n     }\n     if (!hasHadoopAuthFilterInitializer) {\n       targets.add(AuthenticationFilterInitializer.class.getName());\n       conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n     }\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n+            .withServlet(\"ContainerShellWebSocket\", \"/container/*\",\n+              ContainerShellWebSocketServlet.class, params, false)\n             .with(conf)\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n               .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n               .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    Map\u003cString, String\u003e params \u003d new HashMap\u003cString, String\u003e();\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n    boolean enableCors \u003d conf\n        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n    if (enableCors) {\n      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user.\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n            conf.getClasses(filterInitializerConfKey);\n    List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n          break;\n        }\n        targets.add(initializer.getName());\n      }\n    }\n    if (!hasHadoopAuthFilterInitializer) {\n      targets.add(AuthenticationFilterInitializer.class.getName());\n      conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n    }\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .withServlet(\"ContainerShellWebSocket\", \"/container/*\",\n              ContainerShellWebSocketServlet.class, params, false)\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n              .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "8fadd69047143c9c389cc09ca24100b5f90f79d2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5923. Unable to access logs for a running application if YARN_ACL_ENABLE is enabled. Contributed by Xuan Gong.\n",
      "commitDate": "03/01/17 3:03 PM",
      "commitName": "8fadd69047143c9c389cc09ca24100b5f90f79d2",
      "commitAuthor": "Junping Du",
      "commitDateOld": "19/05/16 2:15 PM",
      "commitNameOld": "22fcd819f0c445be661e644ed67221f867013af8",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 229.08,
      "commitsBetweenForRepo": 1656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,56 @@\n   protected void serviceStart() throws Exception {\n-    String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n+    Configuration conf \u003d getConfig();\n+    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.NM_BIND_HOST,\n-                          WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n-    boolean enableCors \u003d getConfig()\n+                          WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n+    boolean enableCors \u003d conf\n         .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n     if (enableCors) {\n       getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n+    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n+    // to identify a HTTP request\u0027s user.\n+    boolean hasHadoopAuthFilterInitializer \u003d false;\n+    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n+    Class\u003c?\u003e[] initializersClasses \u003d\n+            conf.getClasses(filterInitializerConfKey);\n+    List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n+    if (initializersClasses !\u003d null) {\n+      for (Class\u003c?\u003e initializer : initializersClasses) {\n+        if (initializer.getName().equals(\n+            AuthenticationFilterInitializer.class.getName())) {\n+          hasHadoopAuthFilterInitializer \u003d true;\n+          break;\n+        }\n+        targets.add(initializer.getName());\n+      }\n+    }\n+    if (!hasHadoopAuthFilterInitializer) {\n+      targets.add(AuthenticationFilterInitializer.class.getName());\n+      conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n+    }\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n-            .with(getConfig())\n+            .with(conf)\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n                 YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n               .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n               .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    Configuration conf \u003d getConfig();\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(conf));\n    boolean enableCors \u003d conf\n        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n    if (enableCors) {\n      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user.\n    boolean hasHadoopAuthFilterInitializer \u003d false;\n    String filterInitializerConfKey \u003d \"hadoop.http.filter.initializers\";\n    Class\u003c?\u003e[] initializersClasses \u003d\n            conf.getClasses(filterInitializerConfKey);\n    List\u003cString\u003e targets \u003d new ArrayList\u003cString\u003e();\n    if (initializersClasses !\u003d null) {\n      for (Class\u003c?\u003e initializer : initializersClasses) {\n        if (initializer.getName().equals(\n            AuthenticationFilterInitializer.class.getName())) {\n          hasHadoopAuthFilterInitializer \u003d true;\n          break;\n        }\n        targets.add(initializer.getName());\n      }\n    }\n    if (!hasHadoopAuthFilterInitializer) {\n      targets.add(AuthenticationFilterInitializer.class.getName());\n      conf.set(filterInitializerConfKey, StringUtils.join(\",\", targets));\n    }\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(conf)\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n              .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "22fcd819f0c445be661e644ed67221f867013af8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5076. YARN web interfaces lack XFS protection. Contributed by Jonathan Maron.\n(cherry picked from commit 2703ec68712279494d67b0d76b7ac10e7a1628be)\n",
      "commitDate": "19/05/16 2:15 PM",
      "commitName": "22fcd819f0c445be661e644ed67221f867013af8",
      "commitAuthor": "Junping Du",
      "commitDateOld": "07/03/16 1:56 AM",
      "commitNameOld": "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 73.47,
      "commitsBetweenForRepo": 464,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   protected void serviceStart() throws Exception {\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n                           YarnConfiguration.NM_BIND_HOST,\n                           WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n     boolean enableCors \u003d getConfig()\n         .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n     if (enableCors) {\n       getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n-              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n-            .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n+                YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+              .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n+              .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n    boolean enableCors \u003d getConfig()\n        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n    if (enableCors) {\n      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n                YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n              .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.NM_XFS_PREFIX)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4737. Add CSRF filter support in YARN. Contributed by Jonathan Maron.\n",
      "commitDate": "07/03/16 1:56 AM",
      "commitName": "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "23/10/15 8:34 AM",
      "commitNameOld": "f8adeb712dc834c27cec15c04a986f2f635aba83",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 135.77,
      "commitsBetweenForRepo": 905,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   protected void serviceStart() throws Exception {\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n                           YarnConfiguration.NM_BIND_HOST,\n                           WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n     boolean enableCors \u003d getConfig()\n         .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n             YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n     if (enableCors) {\n       getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n           + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n     }\n \n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+            .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n    boolean enableCors \u003d getConfig()\n        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n    if (enableCors) {\n      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .withCSRFProtection(YarnConfiguration.NM_CSRF_PREFIX)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "f8adeb712dc834c27cec15c04a986f2f635aba83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4009. CORS support for ResourceManager REST API. ( Varun Vasudev via jeagles)\n",
      "commitDate": "23/10/15 8:34 AM",
      "commitName": "f8adeb712dc834c27cec15c04a986f2f635aba83",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "20/05/15 5:20 PM",
      "commitNameOld": "6329bd00fa1f17cc9555efa496ea7607ad93e0ce",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 155.63,
      "commitsBetweenForRepo": 1219,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n   protected void serviceStart() throws Exception {\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n                           YarnConfiguration.NM_BIND_HOST,\n                           WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n-    \n+    boolean enableCors \u003d getConfig()\n+        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n+            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n+    if (enableCors) {\n+      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n+          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n+    }\n+\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n    boolean enableCors \u003d getConfig()\n        .getBoolean(YarnConfiguration.NM_WEBAPP_ENABLE_CORS_FILTER,\n            YarnConfiguration.DEFAULT_NM_WEBAPP_ENABLE_CORS_FILTER);\n    if (enableCors) {\n      getConfig().setBoolean(HttpCrossOriginFilterInitializer.PREFIX\n          + HttpCrossOriginFilterInitializer.ENABLED_SUFFIX, true);\n    }\n\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "27/11/13 10:20 AM",
      "commitNameOld": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 246.07,
      "commitsBetweenForRepo": 1647,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   protected void serviceStart() throws Exception {\n-    String bindAddress \u003d WebAppUtils.getNMWebAppURLWithoutScheme(getConfig());\n+    String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n+                          YarnConfiguration.NM_BIND_HOST,\n+                          WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n     \n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(getConfig(),\n                          YarnConfiguration.NM_BIND_HOST,\n                          WebAppUtils.getNMWebAppURLWithoutScheme(getConfig()));\n    \n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "2214871d916fdcae62aa51afbb5fd571f2808745": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5545. Allow specifying endpoints for listeners in HttpServer. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546151 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/13 10:20 AM",
      "commitName": "2214871d916fdcae62aa51afbb5fd571f2808745",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "24/09/13 10:20 AM",
      "commitNameOld": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 64.04,
      "commitsBetweenForRepo": 419,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   protected void serviceStart() throws Exception {\n     String bindAddress \u003d WebAppUtils.getNMWebAppURLWithoutScheme(getConfig());\n     \n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .start(this.nmWebApp);\n-      this.port \u003d this.webApp.httpServer().getPort();\n+      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d WebAppUtils.getNMWebAppURLWithoutScheme(getConfig());\n    \n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getConnectorAddress(0).getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "78e995a37d44cfcf511dcaf7e149a6fd47ba3434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1204. Added separate configuration properties for https for RM and NM without which servers enabled with https will also start on http ports. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5523. Added separate configuration properties for https for JHS without which even when https is enabled, it starts on http port itself. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1525947 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/09/13 10:20 AM",
      "commitName": "78e995a37d44cfcf511dcaf7e149a6fd47ba3434",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/08/13 7:47 PM",
      "commitNameOld": "e86036662c139cd7e67e69a0215471b1ec724a05",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 31.61,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   protected void serviceStart() throws Exception {\n-    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n-        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n+    String bindAddress \u003d WebAppUtils.getNMWebAppURLWithoutScheme(getConfig());\n+    \n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps\n             .$for(\"node\", Context.class, this.nmContext, \"ws\")\n             .at(bindAddress)\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n               YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d WebAppUtils.getNMWebAppURLWithoutScheme(getConfig());\n    \n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "e86036662c139cd7e67e69a0215471b1ec724a05": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1085. Modified YARN and MR2 web-apps to do HTTP authentication in secure setup with kerberos. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517101 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 7:47 PM",
      "commitName": "e86036662c139cd7e67e69a0215471b1ec724a05",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 67.84,
      "commitsBetweenForRepo": 409,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,23 @@\n   protected void serviceStart() throws Exception {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n-          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n-              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n+          WebApps\n+            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n+            .at(bindAddress)\n+            .with(getConfig())\n+            .withHttpSpnegoPrincipalKey(\n+              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n+            .withHttpSpnegoKeytabKey(\n+              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+            .start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n     super.serviceStart();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps\n            .$for(\"node\", Context.class, this.nmContext, \"ws\")\n            .at(bindAddress)\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.NM_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public synchronized void start() {\n+  protected void serviceStart() throws Exception {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n               .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n-      throw new YarnRuntimeException(msg);\n+      throw new YarnRuntimeException(msg, e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
          "extendedDetails": {
            "oldValue": "start",
            "newValue": "serviceStart"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public synchronized void start() {\n+  protected void serviceStart() throws Exception {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n               .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n-      throw new YarnRuntimeException(msg);\n+      throw new YarnRuntimeException(msg, e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public synchronized void start() {\n+  protected void serviceStart() throws Exception {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n               .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n-      throw new YarnRuntimeException(msg);\n+      throw new YarnRuntimeException(msg, e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 9:05 PM",
          "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.49,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,16 @@\n-  public synchronized void start() {\n+  protected void serviceStart() throws Exception {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n               .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n-      throw new YarnRuntimeException(msg);\n+      throw new YarnRuntimeException(msg, e);\n     }\n-    super.start();\n+    super.serviceStart();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceStart() throws Exception {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n    super.serviceStart();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 3.99,
      "commitsBetweenForRepo": 43,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public synchronized void start() {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n               .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n       this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n-      throw new YarnException(msg);\n+      throw new YarnRuntimeException(msg);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "2692675fc3b5046d2ec88542c30203c87e135b70": {
      "type": "Ybodychange",
      "commitMessage": "YARN-684. ContainerManager.startContainer should use ContainerTokenIdentifier instead of the entire Container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488085 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/13 9:13 PM",
      "commitName": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 295.95,
      "commitsBetweenForRepo": 1684,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,16 @@\n   public synchronized void start() {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n               .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n-      int port \u003d this.webApp.httpServer().getPort();\n-      String webAddress \u003d StringUtils.split(bindAddress, \u0027:\u0027)[0] + \":\" + port;\n-      getConfig().set(YarnConfiguration.NM_WEBAPP_ADDRESS, webAddress);\n+      this.port \u003d this.webApp.httpServer().getPort();\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnException(msg);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      this.port \u003d this.webApp.httpServer().getPort();\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      int port \u003d this.webApp.httpServer().getPort();\n      String webAddress \u003d StringUtils.split(bindAddress, \u0027:\u0027)[0] + \":\" + port;\n      getConfig().set(YarnConfiguration.NM_WEBAPP_ADDRESS, webAddress);\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java"
      }
    },
    "90f096d86c93d2e5acaa3d9fc1ce1e0ae9de050a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3532. Modified NM to report correct http address when an ephemeral web port is configured. Contributed by Bhallamudi Venkata Siva Kamesh.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1231342 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/01/12 2:21 PM",
      "commitName": "90f096d86c93d2e5acaa3d9fc1ce1e0ae9de050a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 30.97,
      "commitsBetweenForRepo": 139,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n   public synchronized void start() {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n               .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n+      int port \u003d this.webApp.httpServer().getPort();\n+      String webAddress \u003d StringUtils.split(bindAddress, \u0027:\u0027)[0] + \":\" + port;\n+      getConfig().set(YarnConfiguration.NM_WEBAPP_ADDRESS, webAddress);\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnException(msg);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n      int port \u003d this.webApp.httpServer().getPort();\n      String webAddress \u003d StringUtils.split(bindAddress, \u0027:\u0027)[0] + \":\" + port;\n      getConfig().set(YarnConfiguration.NM_WEBAPP_ADDRESS, webAddress);\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "0ea8570be578be60e2f32849900a1c50506d78d3": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2863. Support web services for YARN and MR components. (Thomas Graves via vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1213975 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/12/11 3:05 PM",
      "commitName": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 13.99,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n   public synchronized void start() {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n-      this.webApp \u003d WebApps.$for(\"node\", Context.class, this.nmContext).at(\n-          bindAddress).with(getConfig()).start(this.nmWebApp);\n+      this.webApp \u003d\n+          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n+              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnException(msg);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext, \"ws\")\n              .at(bindAddress).with(getConfig()).start(this.nmWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/09/11 6:23 PM",
      "commitNameOld": "5f6adcf396b78934d7da2bba0d052038ff962f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 22.43,
      "commitsBetweenForRepo": 184,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,14 @@\n   public synchronized void start() {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n-      this.webApp \u003d\n-          WebApps.$for(\"node\", Context.class, this.nmContext)\n-              .at(bindAddress).with(getConfig())\n-              .start(new NMWebApp(this.resourceView));\n+      this.webApp \u003d WebApps.$for(\"node\", Context.class, this.nmContext).at(\n+          bindAddress).with(getConfig()).start(this.nmWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnException(msg);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d WebApps.$for(\"node\", Context.class, this.nmContext).at(\n          bindAddress).with(getConfig()).start(this.nmWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "5f6adcf396b78934d7da2bba0d052038ff962f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3021. Change base urls for RM web-ui. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176681 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/11 6:23 PM",
      "commitName": "5f6adcf396b78934d7da2bba0d052038ff962f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 18.98,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public synchronized void start() {\n     String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n-          WebApps.$for(\"yarn\", Context.class, this.nmContext)\n+          WebApps.$for(\"node\", Context.class, this.nmContext)\n               .at(bindAddress).with(getConfig())\n               .start(new NMWebApp(this.resourceView));\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnException(msg);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"node\", Context.class, this.nmContext)\n              .at(bindAddress).with(getConfig())\n              .start(new NMWebApp(this.resourceView));\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public synchronized void start() {\n-    String bindAddress \u003d getConfig().get(NMConfig.NM_HTTP_BIND_ADDRESS,\n-        NMConfig.DEFAULT_NM_HTTP_BIND_ADDRESS);\n+    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n+        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n     LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n     try {\n       this.webApp \u003d\n           WebApps.$for(\"yarn\", Context.class, this.nmContext)\n               .at(bindAddress).with(getConfig())\n               .start(new NMWebApp(this.resourceView));\n     } catch (Exception e) {\n       String msg \u003d \"NMWebapps failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnException(msg);\n     }\n     super.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(YarnConfiguration.NM_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_NM_WEBAPP_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"yarn\", Context.class, this.nmContext)\n              .at(bindAddress).with(getConfig())\n              .start(new NMWebApp(this.resourceView));\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(NMConfig.NM_HTTP_BIND_ADDRESS,\n        NMConfig.DEFAULT_NM_HTTP_BIND_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"yarn\", Context.class, this.nmContext)\n              .at(bindAddress).with(getConfig())\n              .start(new NMWebApp(this.resourceView));\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+  public synchronized void start() {\n+    String bindAddress \u003d getConfig().get(NMConfig.NM_HTTP_BIND_ADDRESS,\n+        NMConfig.DEFAULT_NM_HTTP_BIND_ADDRESS);\n+    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n+    try {\n+      this.webApp \u003d\n+          WebApps.$for(\"yarn\", Context.class, this.nmContext)\n+              .at(bindAddress).with(getConfig())\n+              .start(new NMWebApp(this.resourceView));\n+    } catch (Exception e) {\n+      String msg \u003d \"NMWebapps failed to start.\";\n+      LOG.error(msg, e);\n+      throw new YarnException(msg);\n+    }\n+    super.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void start() {\n    String bindAddress \u003d getConfig().get(NMConfig.NM_HTTP_BIND_ADDRESS,\n        NMConfig.DEFAULT_NM_HTTP_BIND_ADDRESS);\n    LOG.info(\"Instantiating NMWebApp at \" + bindAddress);\n    try {\n      this.webApp \u003d\n          WebApps.$for(\"yarn\", Context.class, this.nmContext)\n              .at(bindAddress).with(getConfig())\n              .start(new NMWebApp(this.resourceView));\n    } catch (Exception e) {\n      String msg \u003d \"NMWebapps failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnException(msg);\n    }\n    super.start();\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/webapp/WebServer.java"
    }
  }
}