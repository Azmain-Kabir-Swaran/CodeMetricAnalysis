{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpenFileCtxCache.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
  "functionStartLine": 249,
  "functionEndLine": 270,
  "numCommitsSeen": 18,
  "timeTaken": 1298,
  "changeHistory": [
    "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd": "Ybodychange",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": "Ymultichange(Ymovefromfile,Ybodychange)",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6416. Use Time#monotonicNow in OpenFileCtx and OpenFileCtxCatch to avoid system clock bugs. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/05/14 1:21 PM",
      "commitName": "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "07/11/13 1:49 PM",
      "commitNameOld": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 200.94,
      "commitsBetweenForRepo": 1350,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n     public void run() {\n       while (shouldRun) {\n         scan(streamTimeout);\n \n         // Check if it can sleep\n         try {\n-          long workedTime \u003d System.currentTimeMillis() - lastWakeupTime;\n+          long workedTime \u003d Time.monotonicNow() - lastWakeupTime;\n           if (workedTime \u003c rotation) {\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(\"StreamMonitor can still have a sleep:\"\n                   + ((rotation - workedTime) / 1000));\n             }\n             Thread.sleep(rotation - workedTime);\n           }\n-          lastWakeupTime \u003d System.currentTimeMillis();\n+          lastWakeupTime \u003d Time.monotonicNow();\n \n         } catch (InterruptedException e) {\n           LOG.info(\"StreamMonitor got interrupted\");\n           return;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (shouldRun) {\n        scan(streamTimeout);\n\n        // Check if it can sleep\n        try {\n          long workedTime \u003d Time.monotonicNow() - lastWakeupTime;\n          if (workedTime \u003c rotation) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(\"StreamMonitor can still have a sleep:\"\n                  + ((rotation - workedTime) / 1000));\n            }\n            Thread.sleep(rotation - workedTime);\n          }\n          lastWakeupTime \u003d Time.monotonicNow();\n\n        } catch (InterruptedException e) {\n          LOG.info(\"StreamMonitor got interrupted\");\n          return;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
      "extendedDetails": {}
    },
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-5364. Add OpenFileCtx cache. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 1:49 PM",
      "commitName": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-5364. Add OpenFileCtx cache. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 1:49 PM",
          "commitName": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "07/11/13 11:58 AM",
          "commitNameOld": "77afc605fd30accef9ac6059e26879d971f013b0",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,22 @@\n     public void run() {\n-      while (true) {\n-        Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n-            .iterator();\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"openFileMap size:\" + openFileMap.size());\n-        }\n-        while (it.hasNext()) {\n-          Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n-          OpenFileCtx ctx \u003d pairs.getValue();\n-          if (ctx.streamCleanup((pairs.getKey()).getFileId(), streamTimeout)) {\n-            it.remove();\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"After remove stream \" + pairs.getKey().getFileId()\n-                  + \", the stream number:\" + openFileMap.size());\n-            }\n-          }\n-        }\n+      while (shouldRun) {\n+        scan(streamTimeout);\n \n         // Check if it can sleep\n         try {\n           long workedTime \u003d System.currentTimeMillis() - lastWakeupTime;\n           if (workedTime \u003c rotation) {\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(\"StreamMonitor can still have a sleep:\"\n                   + ((rotation - workedTime) / 1000));\n             }\n             Thread.sleep(rotation - workedTime);\n           }\n           lastWakeupTime \u003d System.currentTimeMillis();\n \n         } catch (InterruptedException e) {\n           LOG.info(\"StreamMonitor got interrupted\");\n           return;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      while (shouldRun) {\n        scan(streamTimeout);\n\n        // Check if it can sleep\n        try {\n          long workedTime \u003d System.currentTimeMillis() - lastWakeupTime;\n          if (workedTime \u003c rotation) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(\"StreamMonitor can still have a sleep:\"\n                  + ((rotation - workedTime) / 1000));\n            }\n            Thread.sleep(rotation - workedTime);\n          }\n          lastWakeupTime \u003d System.currentTimeMillis();\n\n        } catch (InterruptedException e) {\n          LOG.info(\"StreamMonitor got interrupted\");\n          return;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/WriteManager.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5364. Add OpenFileCtx cache. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539834 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/11/13 1:49 PM",
          "commitName": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "07/11/13 11:58 AM",
          "commitNameOld": "77afc605fd30accef9ac6059e26879d971f013b0",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,22 @@\n     public void run() {\n-      while (true) {\n-        Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n-            .iterator();\n-        if (LOG.isTraceEnabled()) {\n-          LOG.trace(\"openFileMap size:\" + openFileMap.size());\n-        }\n-        while (it.hasNext()) {\n-          Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n-          OpenFileCtx ctx \u003d pairs.getValue();\n-          if (ctx.streamCleanup((pairs.getKey()).getFileId(), streamTimeout)) {\n-            it.remove();\n-            if (LOG.isDebugEnabled()) {\n-              LOG.debug(\"After remove stream \" + pairs.getKey().getFileId()\n-                  + \", the stream number:\" + openFileMap.size());\n-            }\n-          }\n-        }\n+      while (shouldRun) {\n+        scan(streamTimeout);\n \n         // Check if it can sleep\n         try {\n           long workedTime \u003d System.currentTimeMillis() - lastWakeupTime;\n           if (workedTime \u003c rotation) {\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(\"StreamMonitor can still have a sleep:\"\n                   + ((rotation - workedTime) / 1000));\n             }\n             Thread.sleep(rotation - workedTime);\n           }\n           lastWakeupTime \u003d System.currentTimeMillis();\n \n         } catch (InterruptedException e) {\n           LOG.info(\"StreamMonitor got interrupted\");\n           return;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void run() {\n      while (shouldRun) {\n        scan(streamTimeout);\n\n        // Check if it can sleep\n        try {\n          long workedTime \u003d System.currentTimeMillis() - lastWakeupTime;\n          if (workedTime \u003c rotation) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(\"StreamMonitor can still have a sleep:\"\n                  + ((rotation - workedTime) / 1000));\n            }\n            Thread.sleep(rotation - workedTime);\n          }\n          lastWakeupTime \u003d System.currentTimeMillis();\n\n        } catch (InterruptedException e) {\n          LOG.info(\"StreamMonitor got interrupted\");\n          return;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,37 @@\n+    public void run() {\n+      while (true) {\n+        Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n+            .iterator();\n+        if (LOG.isTraceEnabled()) {\n+          LOG.trace(\"openFileMap size:\" + openFileMap.size());\n+        }\n+        while (it.hasNext()) {\n+          Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n+          OpenFileCtx ctx \u003d pairs.getValue();\n+          if (ctx.streamCleanup((pairs.getKey()).getFileId(), streamTimeout)) {\n+            it.remove();\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"After remove stream \" + pairs.getKey().getFileId()\n+                  + \", the stream number:\" + openFileMap.size());\n+            }\n+          }\n+        }\n+\n+        // Check if it can sleep\n+        try {\n+          long workedTime \u003d System.currentTimeMillis() - lastWakeupTime;\n+          if (workedTime \u003c rotation) {\n+            if (LOG.isTraceEnabled()) {\n+              LOG.trace(\"StreamMonitor can still have a sleep:\"\n+                  + ((rotation - workedTime) / 1000));\n+            }\n+            Thread.sleep(rotation - workedTime);\n+          }\n+          lastWakeupTime \u003d System.currentTimeMillis();\n+\n+        } catch (InterruptedException e) {\n+          LOG.info(\"StreamMonitor got interrupted\");\n+          return;\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      while (true) {\n        Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n            .iterator();\n        if (LOG.isTraceEnabled()) {\n          LOG.trace(\"openFileMap size:\" + openFileMap.size());\n        }\n        while (it.hasNext()) {\n          Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n          OpenFileCtx ctx \u003d pairs.getValue();\n          if (ctx.streamCleanup((pairs.getKey()).getFileId(), streamTimeout)) {\n            it.remove();\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"After remove stream \" + pairs.getKey().getFileId()\n                  + \", the stream number:\" + openFileMap.size());\n            }\n          }\n        }\n\n        // Check if it can sleep\n        try {\n          long workedTime \u003d System.currentTimeMillis() - lastWakeupTime;\n          if (workedTime \u003c rotation) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(\"StreamMonitor can still have a sleep:\"\n                  + ((rotation - workedTime) / 1000));\n            }\n            Thread.sleep(rotation - workedTime);\n          }\n          lastWakeupTime \u003d System.currentTimeMillis();\n\n        } catch (InterruptedException e) {\n          LOG.info(\"StreamMonitor got interrupted\");\n          return;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/WriteManager.java"
    }
  }
}