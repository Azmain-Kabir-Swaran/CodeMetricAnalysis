{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WorkloadDriver.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
  "functionStartLine": 61,
  "functionEndLine": 138,
  "numCommitsSeen": 4,
  "timeTaken": 1299,
  "changeHistory": [
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090": "Ybodychange",
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": "Ybodychange",
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "477505ccfc480f2605a7b65de95ea6f6ff5ce090": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14824. [Dynamometer] Dynamometer in org.apache.hadoop.tools does not output the benchmark results. (#1685)\n\n\r\n",
      "commitDate": "01/11/19 9:32 AM",
      "commitName": "477505ccfc480f2605a7b65de95ea6f6ff5ce090",
      "commitAuthor": "Takanobu Asanuma",
      "commitDateOld": "11/07/19 8:29 AM",
      "commitNameOld": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 113.04,
      "commitsBetweenForRepo": 885,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   public int run(String[] args) throws Exception {\n     Option helpOption \u003d new Option(\"h\", \"help\", false,\n         \"Shows this message. Additionally specify the \" + MAPPER_CLASS_NAME\n             + \" argument to show help for a specific mapper class.\");\n     Options options \u003d new Options();\n     options.addOption(helpOption);\n     options.addOption(OptionBuilder.withArgName(\"NN URI\").hasArg()\n         .withDescription(\"URI of the NameNode under test\").isRequired()\n         .create(NN_URI));\n     OptionGroup startTimeOptions \u003d new OptionGroup();\n     startTimeOptions.addOption(OptionBuilder.withArgName(\"Start Timestamp\")\n         .hasArg().withDescription(\"Mapper start UTC timestamp in ms\")\n         .create(START_TIMESTAMP_MS));\n     startTimeOptions\n         .addOption(OptionBuilder.withArgName(\"Start Time Offset\").hasArg()\n             .withDescription(\"Mapper start time as an offset from current \"\n                 + \"time. Human-readable formats accepted, e.g. 10m (default \"\n                 + START_TIME_OFFSET_DEFAULT + \").\")\n             .create(START_TIME_OFFSET));\n     options.addOptionGroup(startTimeOptions);\n     Option mapperClassOption \u003d OptionBuilder.withArgName(\"Mapper ClassName\")\n         .hasArg()\n         .withDescription(\"Class name of the mapper; must be a WorkloadMapper \"\n             + \"subclass. Mappers supported currently: \\n\"\n             + \"1. AuditReplayMapper \\n\"\n             + \"2. CreateFileMapper \\n\"\n             + \"Fully specified class names are also supported.\")\n         .isRequired().create(MAPPER_CLASS_NAME);\n     options.addOption(mapperClassOption);\n \n     Options helpOptions \u003d new Options();\n     helpOptions.addOption(helpOption);\n     Option mapperClassNotRequiredOption \u003d (Option) mapperClassOption.clone();\n     mapperClassNotRequiredOption.setRequired(false);\n     helpOptions.addOption(mapperClassNotRequiredOption);\n \n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cli \u003d parser.parse(helpOptions, args, true);\n     if (cli.hasOption(\"h\")) {\n       String footer \u003d null;\n       if (cli.hasOption(MAPPER_CLASS_NAME)) {\n         footer \u003d getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME));\n       }\n \n       HelpFormatter formatter \u003d new HelpFormatter();\n       formatter.printHelp(200, \"./start-workload [options]\", null, options,\n           footer);\n       return 1;\n     }\n \n     cli \u003d parser.parse(options, args);\n     String nnURI \u003d cli.getOptionValue(NN_URI);\n     long startTimestampMs;\n     if (cli.hasOption(START_TIMESTAMP_MS)) {\n       startTimestampMs \u003d Long.parseLong(cli.getOptionValue(START_TIMESTAMP_MS));\n     } else {\n       // Leverage the human-readable time parsing capabilities of Configuration\n       String tmpConfKey \u003d \"___temp_config_property___\";\n       Configuration tmpConf \u003d new Configuration();\n       tmpConf.set(tmpConfKey,\n           cli.getOptionValue(START_TIME_OFFSET, START_TIME_OFFSET_DEFAULT));\n       startTimestampMs \u003d tmpConf.getTimeDuration(tmpConfKey, 0,\n           TimeUnit.MILLISECONDS) + System.currentTimeMillis();\n     }\n-    Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass \u003d getMapperClass(\n+    Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e mapperClass \u003d getMapperClass(\n         cli.getOptionValue(MAPPER_CLASS_NAME));\n     if (!mapperClass.newInstance().verifyConfigurations(getConf())) {\n       System.err\n           .println(getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME)));\n       return 1;\n     }\n \n     Job job \u003d getJobForSubmission(getConf(), nnURI, startTimestampMs,\n         mapperClass);\n \n     boolean success \u003d job.waitForCompletion(true);\n     return success ? 0 : 1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Option helpOption \u003d new Option(\"h\", \"help\", false,\n        \"Shows this message. Additionally specify the \" + MAPPER_CLASS_NAME\n            + \" argument to show help for a specific mapper class.\");\n    Options options \u003d new Options();\n    options.addOption(helpOption);\n    options.addOption(OptionBuilder.withArgName(\"NN URI\").hasArg()\n        .withDescription(\"URI of the NameNode under test\").isRequired()\n        .create(NN_URI));\n    OptionGroup startTimeOptions \u003d new OptionGroup();\n    startTimeOptions.addOption(OptionBuilder.withArgName(\"Start Timestamp\")\n        .hasArg().withDescription(\"Mapper start UTC timestamp in ms\")\n        .create(START_TIMESTAMP_MS));\n    startTimeOptions\n        .addOption(OptionBuilder.withArgName(\"Start Time Offset\").hasArg()\n            .withDescription(\"Mapper start time as an offset from current \"\n                + \"time. Human-readable formats accepted, e.g. 10m (default \"\n                + START_TIME_OFFSET_DEFAULT + \").\")\n            .create(START_TIME_OFFSET));\n    options.addOptionGroup(startTimeOptions);\n    Option mapperClassOption \u003d OptionBuilder.withArgName(\"Mapper ClassName\")\n        .hasArg()\n        .withDescription(\"Class name of the mapper; must be a WorkloadMapper \"\n            + \"subclass. Mappers supported currently: \\n\"\n            + \"1. AuditReplayMapper \\n\"\n            + \"2. CreateFileMapper \\n\"\n            + \"Fully specified class names are also supported.\")\n        .isRequired().create(MAPPER_CLASS_NAME);\n    options.addOption(mapperClassOption);\n\n    Options helpOptions \u003d new Options();\n    helpOptions.addOption(helpOption);\n    Option mapperClassNotRequiredOption \u003d (Option) mapperClassOption.clone();\n    mapperClassNotRequiredOption.setRequired(false);\n    helpOptions.addOption(mapperClassNotRequiredOption);\n\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cli \u003d parser.parse(helpOptions, args, true);\n    if (cli.hasOption(\"h\")) {\n      String footer \u003d null;\n      if (cli.hasOption(MAPPER_CLASS_NAME)) {\n        footer \u003d getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME));\n      }\n\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(200, \"./start-workload [options]\", null, options,\n          footer);\n      return 1;\n    }\n\n    cli \u003d parser.parse(options, args);\n    String nnURI \u003d cli.getOptionValue(NN_URI);\n    long startTimestampMs;\n    if (cli.hasOption(START_TIMESTAMP_MS)) {\n      startTimestampMs \u003d Long.parseLong(cli.getOptionValue(START_TIMESTAMP_MS));\n    } else {\n      // Leverage the human-readable time parsing capabilities of Configuration\n      String tmpConfKey \u003d \"___temp_config_property___\";\n      Configuration tmpConf \u003d new Configuration();\n      tmpConf.set(tmpConfKey,\n          cli.getOptionValue(START_TIME_OFFSET, START_TIME_OFFSET_DEFAULT));\n      startTimestampMs \u003d tmpConf.getTimeDuration(tmpConfKey, 0,\n          TimeUnit.MILLISECONDS) + System.currentTimeMillis();\n    }\n    Class\u003c? extends WorkloadMapper\u003c?, ?, ?, ?\u003e\u003e mapperClass \u003d getMapperClass(\n        cli.getOptionValue(MAPPER_CLASS_NAME));\n    if (!mapperClass.newInstance().verifyConfigurations(getConf())) {\n      System.err\n          .println(getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME)));\n      return 1;\n    }\n\n    Job job \u003d getJobForSubmission(getConf(), nnURI, startTimestampMs,\n        mapperClass);\n\n    boolean success \u003d job.waitForCompletion(true);\n    return success ? 0 : 1;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
      "extendedDetails": {}
    },
    "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16418. [Dynamometer] Fix checkstyle and findbugs warnings. Contributed by Erik Krogen.\n",
      "commitDate": "11/07/19 8:29 AM",
      "commitName": "fc0656dd300f037cb8f97a4c1fac4bf942af3d0a",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "25/06/19 8:07 AM",
      "commitNameOld": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 16.02,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   public int run(String[] args) throws Exception {\n     Option helpOption \u003d new Option(\"h\", \"help\", false,\n         \"Shows this message. Additionally specify the \" + MAPPER_CLASS_NAME\n             + \" argument to show help for a specific mapper class.\");\n     Options options \u003d new Options();\n     options.addOption(helpOption);\n     options.addOption(OptionBuilder.withArgName(\"NN URI\").hasArg()\n         .withDescription(\"URI of the NameNode under test\").isRequired()\n         .create(NN_URI));\n     OptionGroup startTimeOptions \u003d new OptionGroup();\n     startTimeOptions.addOption(OptionBuilder.withArgName(\"Start Timestamp\")\n         .hasArg().withDescription(\"Mapper start UTC timestamp in ms\")\n         .create(START_TIMESTAMP_MS));\n     startTimeOptions\n         .addOption(OptionBuilder.withArgName(\"Start Time Offset\").hasArg()\n             .withDescription(\"Mapper start time as an offset from current \"\n                 + \"time. Human-readable formats accepted, e.g. 10m (default \"\n                 + START_TIME_OFFSET_DEFAULT + \").\")\n             .create(START_TIME_OFFSET));\n     options.addOptionGroup(startTimeOptions);\n     Option mapperClassOption \u003d OptionBuilder.withArgName(\"Mapper ClassName\")\n         .hasArg()\n         .withDescription(\"Class name of the mapper; must be a WorkloadMapper \"\n             + \"subclass. Mappers supported currently: \\n\"\n             + \"1. AuditReplayMapper \\n\"\n             + \"2. CreateFileMapper \\n\"\n             + \"Fully specified class names are also supported.\")\n         .isRequired().create(MAPPER_CLASS_NAME);\n     options.addOption(mapperClassOption);\n \n     Options helpOptions \u003d new Options();\n     helpOptions.addOption(helpOption);\n     Option mapperClassNotRequiredOption \u003d (Option) mapperClassOption.clone();\n     mapperClassNotRequiredOption.setRequired(false);\n     helpOptions.addOption(mapperClassNotRequiredOption);\n \n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cli \u003d parser.parse(helpOptions, args, true);\n     if (cli.hasOption(\"h\")) {\n       String footer \u003d null;\n       if (cli.hasOption(MAPPER_CLASS_NAME)) {\n         footer \u003d getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME));\n       }\n \n       HelpFormatter formatter \u003d new HelpFormatter();\n       formatter.printHelp(200, \"./start-workload [options]\", null, options,\n           footer);\n       return 1;\n     }\n \n     cli \u003d parser.parse(options, args);\n     String nnURI \u003d cli.getOptionValue(NN_URI);\n     long startTimestampMs;\n     if (cli.hasOption(START_TIMESTAMP_MS)) {\n       startTimestampMs \u003d Long.parseLong(cli.getOptionValue(START_TIMESTAMP_MS));\n     } else {\n       // Leverage the human-readable time parsing capabilities of Configuration\n       String tmpConfKey \u003d \"___temp_config_property___\";\n       Configuration tmpConf \u003d new Configuration();\n       tmpConf.set(tmpConfKey,\n           cli.getOptionValue(START_TIME_OFFSET, START_TIME_OFFSET_DEFAULT));\n       startTimestampMs \u003d tmpConf.getTimeDuration(tmpConfKey, 0,\n           TimeUnit.MILLISECONDS) + System.currentTimeMillis();\n     }\n-    Class\u003c? extends WorkloadMapper\u003e mapperClass \u003d getMapperClass(\n+    Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass \u003d getMapperClass(\n         cli.getOptionValue(MAPPER_CLASS_NAME));\n     if (!mapperClass.newInstance().verifyConfigurations(getConf())) {\n       System.err\n           .println(getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME)));\n       return 1;\n     }\n \n     Job job \u003d getJobForSubmission(getConf(), nnURI, startTimestampMs,\n         mapperClass);\n \n     boolean success \u003d job.waitForCompletion(true);\n     return success ? 0 : 1;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Option helpOption \u003d new Option(\"h\", \"help\", false,\n        \"Shows this message. Additionally specify the \" + MAPPER_CLASS_NAME\n            + \" argument to show help for a specific mapper class.\");\n    Options options \u003d new Options();\n    options.addOption(helpOption);\n    options.addOption(OptionBuilder.withArgName(\"NN URI\").hasArg()\n        .withDescription(\"URI of the NameNode under test\").isRequired()\n        .create(NN_URI));\n    OptionGroup startTimeOptions \u003d new OptionGroup();\n    startTimeOptions.addOption(OptionBuilder.withArgName(\"Start Timestamp\")\n        .hasArg().withDescription(\"Mapper start UTC timestamp in ms\")\n        .create(START_TIMESTAMP_MS));\n    startTimeOptions\n        .addOption(OptionBuilder.withArgName(\"Start Time Offset\").hasArg()\n            .withDescription(\"Mapper start time as an offset from current \"\n                + \"time. Human-readable formats accepted, e.g. 10m (default \"\n                + START_TIME_OFFSET_DEFAULT + \").\")\n            .create(START_TIME_OFFSET));\n    options.addOptionGroup(startTimeOptions);\n    Option mapperClassOption \u003d OptionBuilder.withArgName(\"Mapper ClassName\")\n        .hasArg()\n        .withDescription(\"Class name of the mapper; must be a WorkloadMapper \"\n            + \"subclass. Mappers supported currently: \\n\"\n            + \"1. AuditReplayMapper \\n\"\n            + \"2. CreateFileMapper \\n\"\n            + \"Fully specified class names are also supported.\")\n        .isRequired().create(MAPPER_CLASS_NAME);\n    options.addOption(mapperClassOption);\n\n    Options helpOptions \u003d new Options();\n    helpOptions.addOption(helpOption);\n    Option mapperClassNotRequiredOption \u003d (Option) mapperClassOption.clone();\n    mapperClassNotRequiredOption.setRequired(false);\n    helpOptions.addOption(mapperClassNotRequiredOption);\n\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cli \u003d parser.parse(helpOptions, args, true);\n    if (cli.hasOption(\"h\")) {\n      String footer \u003d null;\n      if (cli.hasOption(MAPPER_CLASS_NAME)) {\n        footer \u003d getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME));\n      }\n\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(200, \"./start-workload [options]\", null, options,\n          footer);\n      return 1;\n    }\n\n    cli \u003d parser.parse(options, args);\n    String nnURI \u003d cli.getOptionValue(NN_URI);\n    long startTimestampMs;\n    if (cli.hasOption(START_TIMESTAMP_MS)) {\n      startTimestampMs \u003d Long.parseLong(cli.getOptionValue(START_TIMESTAMP_MS));\n    } else {\n      // Leverage the human-readable time parsing capabilities of Configuration\n      String tmpConfKey \u003d \"___temp_config_property___\";\n      Configuration tmpConf \u003d new Configuration();\n      tmpConf.set(tmpConfKey,\n          cli.getOptionValue(START_TIME_OFFSET, START_TIME_OFFSET_DEFAULT));\n      startTimestampMs \u003d tmpConf.getTimeDuration(tmpConfKey, 0,\n          TimeUnit.MILLISECONDS) + System.currentTimeMillis();\n    }\n    Class\u003c? extends WorkloadMapper\u003c?, ?\u003e\u003e mapperClass \u003d getMapperClass(\n        cli.getOptionValue(MAPPER_CLASS_NAME));\n    if (!mapperClass.newInstance().verifyConfigurations(getConf())) {\n      System.err\n          .println(getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME)));\n      return 1;\n    }\n\n    Job job \u003d getJobForSubmission(getConf(), nnURI, startTimestampMs,\n        mapperClass);\n\n    boolean success \u003d job.waitForCompletion(true);\n    return success ? 0 : 1;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java",
      "extendedDetails": {}
    },
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,78 @@\n+  public int run(String[] args) throws Exception {\n+    Option helpOption \u003d new Option(\"h\", \"help\", false,\n+        \"Shows this message. Additionally specify the \" + MAPPER_CLASS_NAME\n+            + \" argument to show help for a specific mapper class.\");\n+    Options options \u003d new Options();\n+    options.addOption(helpOption);\n+    options.addOption(OptionBuilder.withArgName(\"NN URI\").hasArg()\n+        .withDescription(\"URI of the NameNode under test\").isRequired()\n+        .create(NN_URI));\n+    OptionGroup startTimeOptions \u003d new OptionGroup();\n+    startTimeOptions.addOption(OptionBuilder.withArgName(\"Start Timestamp\")\n+        .hasArg().withDescription(\"Mapper start UTC timestamp in ms\")\n+        .create(START_TIMESTAMP_MS));\n+    startTimeOptions\n+        .addOption(OptionBuilder.withArgName(\"Start Time Offset\").hasArg()\n+            .withDescription(\"Mapper start time as an offset from current \"\n+                + \"time. Human-readable formats accepted, e.g. 10m (default \"\n+                + START_TIME_OFFSET_DEFAULT + \").\")\n+            .create(START_TIME_OFFSET));\n+    options.addOptionGroup(startTimeOptions);\n+    Option mapperClassOption \u003d OptionBuilder.withArgName(\"Mapper ClassName\")\n+        .hasArg()\n+        .withDescription(\"Class name of the mapper; must be a WorkloadMapper \"\n+            + \"subclass. Mappers supported currently: \\n\"\n+            + \"1. AuditReplayMapper \\n\"\n+            + \"2. CreateFileMapper \\n\"\n+            + \"Fully specified class names are also supported.\")\n+        .isRequired().create(MAPPER_CLASS_NAME);\n+    options.addOption(mapperClassOption);\n+\n+    Options helpOptions \u003d new Options();\n+    helpOptions.addOption(helpOption);\n+    Option mapperClassNotRequiredOption \u003d (Option) mapperClassOption.clone();\n+    mapperClassNotRequiredOption.setRequired(false);\n+    helpOptions.addOption(mapperClassNotRequiredOption);\n+\n+    CommandLineParser parser \u003d new PosixParser();\n+    CommandLine cli \u003d parser.parse(helpOptions, args, true);\n+    if (cli.hasOption(\"h\")) {\n+      String footer \u003d null;\n+      if (cli.hasOption(MAPPER_CLASS_NAME)) {\n+        footer \u003d getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME));\n+      }\n+\n+      HelpFormatter formatter \u003d new HelpFormatter();\n+      formatter.printHelp(200, \"./start-workload [options]\", null, options,\n+          footer);\n+      return 1;\n+    }\n+\n+    cli \u003d parser.parse(options, args);\n+    String nnURI \u003d cli.getOptionValue(NN_URI);\n+    long startTimestampMs;\n+    if (cli.hasOption(START_TIMESTAMP_MS)) {\n+      startTimestampMs \u003d Long.parseLong(cli.getOptionValue(START_TIMESTAMP_MS));\n+    } else {\n+      // Leverage the human-readable time parsing capabilities of Configuration\n+      String tmpConfKey \u003d \"___temp_config_property___\";\n+      Configuration tmpConf \u003d new Configuration();\n+      tmpConf.set(tmpConfKey,\n+          cli.getOptionValue(START_TIME_OFFSET, START_TIME_OFFSET_DEFAULT));\n+      startTimestampMs \u003d tmpConf.getTimeDuration(tmpConfKey, 0,\n+          TimeUnit.MILLISECONDS) + System.currentTimeMillis();\n+    }\n+    Class\u003c? extends WorkloadMapper\u003e mapperClass \u003d getMapperClass(\n+        cli.getOptionValue(MAPPER_CLASS_NAME));\n+    if (!mapperClass.newInstance().verifyConfigurations(getConf())) {\n+      System.err\n+          .println(getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME)));\n+      return 1;\n+    }\n+\n+    Job job \u003d getJobForSubmission(getConf(), nnURI, startTimestampMs,\n+        mapperClass);\n+\n+    boolean success \u003d job.waitForCompletion(true);\n+    return success ? 0 : 1;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    Option helpOption \u003d new Option(\"h\", \"help\", false,\n        \"Shows this message. Additionally specify the \" + MAPPER_CLASS_NAME\n            + \" argument to show help for a specific mapper class.\");\n    Options options \u003d new Options();\n    options.addOption(helpOption);\n    options.addOption(OptionBuilder.withArgName(\"NN URI\").hasArg()\n        .withDescription(\"URI of the NameNode under test\").isRequired()\n        .create(NN_URI));\n    OptionGroup startTimeOptions \u003d new OptionGroup();\n    startTimeOptions.addOption(OptionBuilder.withArgName(\"Start Timestamp\")\n        .hasArg().withDescription(\"Mapper start UTC timestamp in ms\")\n        .create(START_TIMESTAMP_MS));\n    startTimeOptions\n        .addOption(OptionBuilder.withArgName(\"Start Time Offset\").hasArg()\n            .withDescription(\"Mapper start time as an offset from current \"\n                + \"time. Human-readable formats accepted, e.g. 10m (default \"\n                + START_TIME_OFFSET_DEFAULT + \").\")\n            .create(START_TIME_OFFSET));\n    options.addOptionGroup(startTimeOptions);\n    Option mapperClassOption \u003d OptionBuilder.withArgName(\"Mapper ClassName\")\n        .hasArg()\n        .withDescription(\"Class name of the mapper; must be a WorkloadMapper \"\n            + \"subclass. Mappers supported currently: \\n\"\n            + \"1. AuditReplayMapper \\n\"\n            + \"2. CreateFileMapper \\n\"\n            + \"Fully specified class names are also supported.\")\n        .isRequired().create(MAPPER_CLASS_NAME);\n    options.addOption(mapperClassOption);\n\n    Options helpOptions \u003d new Options();\n    helpOptions.addOption(helpOption);\n    Option mapperClassNotRequiredOption \u003d (Option) mapperClassOption.clone();\n    mapperClassNotRequiredOption.setRequired(false);\n    helpOptions.addOption(mapperClassNotRequiredOption);\n\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cli \u003d parser.parse(helpOptions, args, true);\n    if (cli.hasOption(\"h\")) {\n      String footer \u003d null;\n      if (cli.hasOption(MAPPER_CLASS_NAME)) {\n        footer \u003d getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME));\n      }\n\n      HelpFormatter formatter \u003d new HelpFormatter();\n      formatter.printHelp(200, \"./start-workload [options]\", null, options,\n          footer);\n      return 1;\n    }\n\n    cli \u003d parser.parse(options, args);\n    String nnURI \u003d cli.getOptionValue(NN_URI);\n    long startTimestampMs;\n    if (cli.hasOption(START_TIMESTAMP_MS)) {\n      startTimestampMs \u003d Long.parseLong(cli.getOptionValue(START_TIMESTAMP_MS));\n    } else {\n      // Leverage the human-readable time parsing capabilities of Configuration\n      String tmpConfKey \u003d \"___temp_config_property___\";\n      Configuration tmpConf \u003d new Configuration();\n      tmpConf.set(tmpConfKey,\n          cli.getOptionValue(START_TIME_OFFSET, START_TIME_OFFSET_DEFAULT));\n      startTimestampMs \u003d tmpConf.getTimeDuration(tmpConfKey, 0,\n          TimeUnit.MILLISECONDS) + System.currentTimeMillis();\n    }\n    Class\u003c? extends WorkloadMapper\u003e mapperClass \u003d getMapperClass(\n        cli.getOptionValue(MAPPER_CLASS_NAME));\n    if (!mapperClass.newInstance().verifyConfigurations(getConf())) {\n      System.err\n          .println(getMapperUsageInfo(cli.getOptionValue(MAPPER_CLASS_NAME)));\n      return 1;\n    }\n\n    Job job \u003d getJobForSubmission(getConf(), nnURI, startTimestampMs,\n        mapperClass);\n\n    boolean success \u003d job.waitForCompletion(true);\n    return success ? 0 : 1;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-workload/src/main/java/org/apache/hadoop/tools/dynamometer/workloadgenerator/WorkloadDriver.java"
    }
  }
}