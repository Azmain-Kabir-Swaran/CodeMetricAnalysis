{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DtFileOperations.java",
  "functionName": "getTokenFile",
  "functionId": "getTokenFile___tokenFile-File__fileFormat-String__alias-Text__service-Text__url-String__renewer-String__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/DtFileOperations.java",
  "functionStartLine": 175,
  "functionEndLine": 220,
  "numCommitsSeen": 9,
  "timeTaken": 1444,
  "changeHistory": [
    "202926ac3301298753abd0e6e1f324caf0202ec6",
    "2753185a010e70f8d9539f42151c79177781122d"
  ],
  "changeHistoryShort": {
    "202926ac3301298753abd0e6e1f324caf0202ec6": "Ybodychange",
    "2753185a010e70f8d9539f42151c79177781122d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "202926ac3301298753abd0e6e1f324caf0202ec6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15808. Harden Token service loader use.\n\nContributed by Steve Loughran.\n",
      "commitDate": "11/12/18 9:33 AM",
      "commitName": "202926ac3301298753abd0e6e1f324caf0202ec6",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "02/11/18 10:54 AM",
      "commitNameOld": "44e37b4fd9f441becf536368a89436afcd6dede8",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 38.99,
      "commitsBetweenForRepo": 253,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,46 @@\n   public static void getTokenFile(File tokenFile, String fileFormat,\n       Text alias, Text service, String url, String renewer, Configuration conf)\n       throws Exception {\n     Token\u003c?\u003e token \u003d null;\n     Credentials creds \u003d tokenFile.exists() ?\n         Credentials.readTokenStorageFile(tokenFile, conf) : new Credentials();\n     ServiceLoader\u003cDtFetcher\u003e loader \u003d ServiceLoader.load(DtFetcher.class);\n-    for (DtFetcher fetcher : loader) {\n+    Iterator\u003cDtFetcher\u003e iterator \u003d loader.iterator();\n+    while (iterator.hasNext()) {\n+      DtFetcher fetcher;\n+      try {\n+        fetcher \u003d iterator.next();\n+      } catch (ServiceConfigurationError e) {\n+        // failure to load a token implementation\n+        // log at debug and continue.\n+        LOG.debug(\"Failed to load token fetcher implementation\", e);\n+        continue;\n+      }\n       if (matchService(fetcher, service, url)) {\n         if (!fetcher.isTokenRequired()) {\n           String message \u003d \"DtFetcher for service \u0027\" + service +\n               \"\u0027 does not require a token.  Check your configuration.  \" +\n               \"Note: security may be disabled or there may be two DtFetcher \" +\n               \"providers for the same service designation.\";\n           LOG.error(message);\n           throw new IllegalArgumentException(message);\n         }\n         token \u003d fetcher.addDelegationTokens(conf, creds, renewer,\n                                             stripPrefix(url));\n       }\n     }\n     if (alias !\u003d null) {\n       if (token \u003d\u003d null) {\n         String message \u003d \"DtFetcher for service \u0027\" + service + \"\u0027\" +\n             \" does not allow aliasing.  Cannot apply alias \u0027\" + alias + \"\u0027.\" +\n             \"  Drop alias flag to get token for this service.\";\n         LOG.error(message);\n         throw new IOException(message);\n       }\n       Token\u003c?\u003e aliasedToken \u003d token.copyToken();\n       aliasedToken.setService(alias);\n       creds.addToken(alias, aliasedToken);\n       LOG.info(\"Add token with service \" + alias);\n     }\n     doFormattedWrite(tokenFile, fileFormat, creds, conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void getTokenFile(File tokenFile, String fileFormat,\n      Text alias, Text service, String url, String renewer, Configuration conf)\n      throws Exception {\n    Token\u003c?\u003e token \u003d null;\n    Credentials creds \u003d tokenFile.exists() ?\n        Credentials.readTokenStorageFile(tokenFile, conf) : new Credentials();\n    ServiceLoader\u003cDtFetcher\u003e loader \u003d ServiceLoader.load(DtFetcher.class);\n    Iterator\u003cDtFetcher\u003e iterator \u003d loader.iterator();\n    while (iterator.hasNext()) {\n      DtFetcher fetcher;\n      try {\n        fetcher \u003d iterator.next();\n      } catch (ServiceConfigurationError e) {\n        // failure to load a token implementation\n        // log at debug and continue.\n        LOG.debug(\"Failed to load token fetcher implementation\", e);\n        continue;\n      }\n      if (matchService(fetcher, service, url)) {\n        if (!fetcher.isTokenRequired()) {\n          String message \u003d \"DtFetcher for service \u0027\" + service +\n              \"\u0027 does not require a token.  Check your configuration.  \" +\n              \"Note: security may be disabled or there may be two DtFetcher \" +\n              \"providers for the same service designation.\";\n          LOG.error(message);\n          throw new IllegalArgumentException(message);\n        }\n        token \u003d fetcher.addDelegationTokens(conf, creds, renewer,\n                                            stripPrefix(url));\n      }\n    }\n    if (alias !\u003d null) {\n      if (token \u003d\u003d null) {\n        String message \u003d \"DtFetcher for service \u0027\" + service + \"\u0027\" +\n            \" does not allow aliasing.  Cannot apply alias \u0027\" + alias + \"\u0027.\" +\n            \"  Drop alias flag to get token for this service.\";\n        LOG.error(message);\n        throw new IOException(message);\n      }\n      Token\u003c?\u003e aliasedToken \u003d token.copyToken();\n      aliasedToken.setService(alias);\n      creds.addToken(alias, aliasedToken);\n      LOG.info(\"Add token with service \" + alias);\n    }\n    doFormattedWrite(tokenFile, fileFormat, creds, conf);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/DtFileOperations.java",
      "extendedDetails": {}
    },
    "2753185a010e70f8d9539f42151c79177781122d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12563. Updated utility (dtutil) to create/modify token files. Contributed by Matthew Paduano\n",
      "commitDate": "29/04/16 10:32 PM",
      "commitName": "2753185a010e70f8d9539f42151c79177781122d",
      "commitAuthor": "Ravi Prakash",
      "diff": "@@ -0,0 +1,36 @@\n+  public static void getTokenFile(File tokenFile, String fileFormat,\n+      Text alias, Text service, String url, String renewer, Configuration conf)\n+      throws Exception {\n+    Token\u003c?\u003e token \u003d null;\n+    Credentials creds \u003d tokenFile.exists() ?\n+        Credentials.readTokenStorageFile(tokenFile, conf) : new Credentials();\n+    ServiceLoader\u003cDtFetcher\u003e loader \u003d ServiceLoader.load(DtFetcher.class);\n+    for (DtFetcher fetcher : loader) {\n+      if (matchService(fetcher, service, url)) {\n+        if (!fetcher.isTokenRequired()) {\n+          String message \u003d \"DtFetcher for service \u0027\" + service +\n+              \"\u0027 does not require a token.  Check your configuration.  \" +\n+              \"Note: security may be disabled or there may be two DtFetcher \" +\n+              \"providers for the same service designation.\";\n+          LOG.error(message);\n+          throw new IllegalArgumentException(message);\n+        }\n+        token \u003d fetcher.addDelegationTokens(conf, creds, renewer,\n+                                            stripPrefix(url));\n+      }\n+    }\n+    if (alias !\u003d null) {\n+      if (token \u003d\u003d null) {\n+        String message \u003d \"DtFetcher for service \u0027\" + service + \"\u0027\" +\n+            \" does not allow aliasing.  Cannot apply alias \u0027\" + alias + \"\u0027.\" +\n+            \"  Drop alias flag to get token for this service.\";\n+        LOG.error(message);\n+        throw new IOException(message);\n+      }\n+      Token\u003c?\u003e aliasedToken \u003d token.copyToken();\n+      aliasedToken.setService(alias);\n+      creds.addToken(alias, aliasedToken);\n+      LOG.info(\"Add token with service \" + alias);\n+    }\n+    doFormattedWrite(tokenFile, fileFormat, creds, conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void getTokenFile(File tokenFile, String fileFormat,\n      Text alias, Text service, String url, String renewer, Configuration conf)\n      throws Exception {\n    Token\u003c?\u003e token \u003d null;\n    Credentials creds \u003d tokenFile.exists() ?\n        Credentials.readTokenStorageFile(tokenFile, conf) : new Credentials();\n    ServiceLoader\u003cDtFetcher\u003e loader \u003d ServiceLoader.load(DtFetcher.class);\n    for (DtFetcher fetcher : loader) {\n      if (matchService(fetcher, service, url)) {\n        if (!fetcher.isTokenRequired()) {\n          String message \u003d \"DtFetcher for service \u0027\" + service +\n              \"\u0027 does not require a token.  Check your configuration.  \" +\n              \"Note: security may be disabled or there may be two DtFetcher \" +\n              \"providers for the same service designation.\";\n          LOG.error(message);\n          throw new IllegalArgumentException(message);\n        }\n        token \u003d fetcher.addDelegationTokens(conf, creds, renewer,\n                                            stripPrefix(url));\n      }\n    }\n    if (alias !\u003d null) {\n      if (token \u003d\u003d null) {\n        String message \u003d \"DtFetcher for service \u0027\" + service + \"\u0027\" +\n            \" does not allow aliasing.  Cannot apply alias \u0027\" + alias + \"\u0027.\" +\n            \"  Drop alias flag to get token for this service.\";\n        LOG.error(message);\n        throw new IOException(message);\n      }\n      Token\u003c?\u003e aliasedToken \u003d token.copyToken();\n      aliasedToken.setService(alias);\n      creds.addToken(alias, aliasedToken);\n      LOG.info(\"Add token with service \" + alias);\n    }\n    doFormattedWrite(tokenFile, fileFormat, creds, conf);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/DtFileOperations.java"
    }
  }
}