{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BackupNode.java",
  "functionName": "initialize",
  "functionId": "initialize___conf-Configuration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
  "functionStartLine": 144,
  "functionEndLine": 174,
  "numCommitsSeen": 57,
  "timeTaken": 6025,
  "changeHistory": [
    "2151716832ad14932dd65b1a4e47e64d8d6cd767",
    "692b1a45ce46a76586c9c375854940454eeca306",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "d02baff9a0d8cec92bde751777f3e575da2339c8",
    "1ab97373deea303e3f43af36b974db52e0ba6d13",
    "64c019cccc266b9896746d45e314cc4a59ba2e6e",
    "f00198b16c529bafeb8460427f12de69401941c3",
    "9992cae54120d2742922745c1f513c6bfbde67a9",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "2151716832ad14932dd65b1a4e47e64d8d6cd767": "Ybodychange",
    "692b1a45ce46a76586c9c375854940454eeca306": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "d02baff9a0d8cec92bde751777f3e575da2339c8": "Ybodychange",
    "1ab97373deea303e3f43af36b974db52e0ba6d13": "Ybodychange",
    "64c019cccc266b9896746d45e314cc4a59ba2e6e": "Ybodychange",
    "f00198b16c529bafeb8460427f12de69401941c3": "Ybodychange",
    "9992cae54120d2742922745c1f513c6bfbde67a9": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2151716832ad14932dd65b1a4e47e64d8d6cd767": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7964. Add support for async edit logging. Contributed by Daryn Sharp.\n",
      "commitDate": "29/02/16 3:34 PM",
      "commitName": "2151716832ad14932dd65b1a4e47e64d8d6cd767",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "09/11/15 2:04 PM",
      "commitNameOld": "2741a2109b98d0febb463cb318018ecbd3995102",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 112.06,
      "commitsBetweenForRepo": 713,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,31 @@\n   protected void initialize(Configuration conf) throws IOException {\n+    // async edit logs are incompatible with backup node due to race\n+    // conditions resulting from laxer synchronization\n+    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_EDITS_ASYNC_LOGGING, false);\n+\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n     namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n \n     if (false \u003d\u003d namesystem.isInSafeMode()) {\n       namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n     }\n \n     // Backup node should never do lease recovery,\n     // therefore lease hard limit should never expire.\n     namesystem.leaseManager.setLeasePeriod(\n         HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n     InetSocketAddress addr \u003d getHttpAddress();\n     if (addr !\u003d null) {\n       conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // async edit logs are incompatible with backup node due to race\n    // conditions resulting from laxer synchronization\n    conf.setBoolean(DFSConfigKeys.DFS_NAMENODE_EDITS_ASYNC_LOGGING, false);\n\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n\n    if (false \u003d\u003d namesystem.isInSafeMode()) {\n      namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n    }\n\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n    InetSocketAddress addr \u003d getHttpAddress();\n    if (addr !\u003d null) {\n      conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "692b1a45ce46a76586c9c375854940454eeca306": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9134. Move LEASE_{SOFTLIMIT,HARDLIMIT}_PERIOD constants from HdfsServerConstants to HdfsConstants. Contributed by Mingliang Liu.\n",
      "commitDate": "24/09/15 8:19 PM",
      "commitName": "692b1a45ce46a76586c9c375854940454eeca306",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "02/05/15 10:03 AM",
      "commitNameOld": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 145.43,
      "commitsBetweenForRepo": 1031,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n     namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n \n     if (false \u003d\u003d namesystem.isInSafeMode()) {\n       namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n     }\n \n     // Backup node should never do lease recovery,\n     // therefore lease hard limit should never expire.\n     namesystem.leaseManager.setLeasePeriod(\n-        HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n+        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n     InetSocketAddress addr \u003d getHttpAddress();\n     if (addr !\u003d null) {\n       conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n\n    if (false \u003d\u003d namesystem.isInSafeMode()) {\n      namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n    }\n\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n    InetSocketAddress addr \u003d getHttpAddress();\n    if (addr !\u003d null) {\n      conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "12/02/15 5:40 PM",
      "commitNameOld": "46b6d23e8fbed4c2ba537dd752116c173805bca7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 78.64,
      "commitsBetweenForRepo": 684,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n     namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n \n     if (false \u003d\u003d namesystem.isInSafeMode()) {\n       namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n     }\n \n     // Backup node should never do lease recovery,\n     // therefore lease hard limit should never expire.\n     namesystem.leaseManager.setLeasePeriod(\n-        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n+        HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n     InetSocketAddress addr \u003d getHttpAddress();\n     if (addr !\u003d null) {\n       conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n\n    if (false \u003d\u003d namesystem.isInSafeMode()) {\n      namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n    }\n\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n    InetSocketAddress addr \u003d getHttpAddress();\n    if (addr !\u003d null) {\n      conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "d02baff9a0d8cec92bde751777f3e575da2339c8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5536. Implement HTTP policy for Namenode and DataNode. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1547925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 1:40 PM",
      "commitName": "d02baff9a0d8cec92bde751777f3e575da2339c8",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/06/13 8:52 PM",
      "commitNameOld": "5694c3404016b07d285c54e0f440317df5971391",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 172.74,
      "commitsBetweenForRepo": 1046,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n     namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n \n     if (false \u003d\u003d namesystem.isInSafeMode()) {\n       namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n     }\n \n     // Backup node should never do lease recovery,\n     // therefore lease hard limit should never expire.\n     namesystem.leaseManager.setLeasePeriod(\n         HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n+    InetSocketAddress addr \u003d getHttpAddress();\n+    if (addr !\u003d null) {\n+      conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n\n    if (false \u003d\u003d namesystem.isInSafeMode()) {\n      namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n    }\n\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n    InetSocketAddress addr \u003d getHttpAddress();\n    if (addr !\u003d null) {\n      conf.set(BN_HTTP_ADDRESS_NAME_KEY, NetUtils.getHostPortString(getHttpAddress()));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "1ab97373deea303e3f43af36b974db52e0ba6d13": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4138. BackupNode startup fails due to uninitialized edit log. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406734 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/12 9:45 AM",
      "commitName": "1ab97373deea303e3f43af36b974db52e0ba6d13",
      "commitAuthor": "Konstantin Shvachko",
      "commitDateOld": "16/07/12 11:54 AM",
      "commitNameOld": "6df36b58e1a393d84d1f95387e2ebe45e66b1db7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 113.95,
      "commitsBetweenForRepo": 667,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,23 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n+    namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n \n     if (false \u003d\u003d namesystem.isInSafeMode()) {\n       namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n     }\n \n     // Backup node should never do lease recovery,\n     // therefore lease hard limit should never expire.\n     namesystem.leaseManager.setLeasePeriod(\n         HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n-    \n-    clusterId \u003d nsInfo.getClusterID();\n-    blockPoolId \u003d nsInfo.getBlockPoolID();\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    namesystem.setBlockPoolId(nsInfo.getBlockPoolID());\n\n    if (false \u003d\u003d namesystem.isInSafeMode()) {\n      namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n    }\n\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "64c019cccc266b9896746d45e314cc4a59ba2e6e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2285. BackupNode should reject requests to modify namespace. Contributed by Konstantin Shvachko and Uma Maheswara Rao G.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1195013 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/11 1:11 PM",
      "commitName": "64c019cccc266b9896746d45e314cc4a59ba2e6e",
      "commitAuthor": "Konstantin Shvachko",
      "commitDateOld": "24/10/11 12:08 PM",
      "commitNameOld": "0920056f0467bcf055628bc23d91c602aac7da49",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 5.04,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,24 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n+    if (false \u003d\u003d namesystem.isInSafeMode()) {\n+      namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n+    }\n+\n     // Backup node should never do lease recovery,\n     // therefore lease hard limit should never expire.\n     namesystem.leaseManager.setLeasePeriod(\n         HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n     \n     clusterId \u003d nsInfo.getClusterID();\n     blockPoolId \u003d nsInfo.getBlockPoolID();\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    if (false \u003d\u003d namesystem.isInSafeMode()) {\n      namesystem.setSafeMode(SafeModeAction.SAFEMODE_ENTER);\n    }\n\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n    \n    clusterId \u003d nsInfo.getClusterID();\n    blockPoolId \u003d nsInfo.getBlockPoolID();\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "f00198b16c529bafeb8460427f12de69401941c3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2301. Start/stop appropriate namenode services when transition to active and standby states. Contributed by Suresh Srinivas.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1182080 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/10/11 1:44 PM",
      "commitName": "f00198b16c529bafeb8460427f12de69401941c3",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "28/09/11 5:42 PM",
      "commitNameOld": "ab0402bc1def44e3d52eea517f4132c460bd5f87",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 12.83,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,15 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n-    // Backup node should never do lease recovery,\n-    // therefore lease hard limit should never expire.\n-    namesystem.leaseManager.setLeasePeriod(\n-        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n-    \n     clusterId \u003d nsInfo.getClusterID();\n     blockPoolId \u003d nsInfo.getBlockPoolID();\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    clusterId \u003d nsInfo.getClusterID();\n    blockPoolId \u003d nsInfo.getBlockPoolID();\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "9992cae54120d2742922745c1f513c6bfbde67a9": {
      "type": "Ybodychange",
      "commitMessage": "Reverting the previous trunk merge since it added other unintended changes in addition\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1177127 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/11 5:33 PM",
      "commitName": "9992cae54120d2742922745c1f513c6bfbde67a9",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "28/09/11 5:09 PM",
      "commitNameOld": "122113922fd398b1a76c1664b58a61661e936e30",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,20 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n+    // Backup node should never do lease recovery,\n+    // therefore lease hard limit should never expire.\n+    namesystem.leaseManager.setLeasePeriod(\n+        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n+    \n     clusterId \u003d nsInfo.getClusterID();\n     blockPoolId \u003d nsInfo.getBlockPoolID();\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n    \n    clusterId \u003d nsInfo.getClusterID();\n    blockPoolId \u003d nsInfo.getBlockPoolID();\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   protected void initialize(Configuration conf) throws IOException {\n     // Trash is disabled in BackupNameNode,\n     // but should be turned back on if it ever becomes active.\n     conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                  CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n     NamespaceInfo nsInfo \u003d handshake(conf);\n     super.initialize(conf);\n     // Backup node should never do lease recovery,\n     // therefore lease hard limit should never expire.\n     namesystem.leaseManager.setLeasePeriod(\n-        FSConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n+        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n     \n     clusterId \u003d nsInfo.getClusterID();\n     blockPoolId \u003d nsInfo.getBlockPoolID();\n \n     // register with the active name-node \n     registerWith(nsInfo);\n     // Checkpoint daemon should start after the rpc server started\n     runCheckpointDaemon(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        HdfsConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n    \n    clusterId \u003d nsInfo.getClusterID();\n    blockPoolId \u003d nsInfo.getBlockPoolID();\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        FSConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n    \n    clusterId \u003d nsInfo.getClusterID();\n    blockPoolId \u003d nsInfo.getBlockPoolID();\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        FSConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n    \n    clusterId \u003d nsInfo.getClusterID();\n    blockPoolId \u003d nsInfo.getBlockPoolID();\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  protected void initialize(Configuration conf) throws IOException {\n+    // Trash is disabled in BackupNameNode,\n+    // but should be turned back on if it ever becomes active.\n+    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n+                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n+    NamespaceInfo nsInfo \u003d handshake(conf);\n+    super.initialize(conf);\n+    // Backup node should never do lease recovery,\n+    // therefore lease hard limit should never expire.\n+    namesystem.leaseManager.setLeasePeriod(\n+        FSConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n+    \n+    clusterId \u003d nsInfo.getClusterID();\n+    blockPoolId \u003d nsInfo.getBlockPoolID();\n+\n+    // register with the active name-node \n+    registerWith(nsInfo);\n+    // Checkpoint daemon should start after the rpc server started\n+    runCheckpointDaemon(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void initialize(Configuration conf) throws IOException {\n    // Trash is disabled in BackupNameNode,\n    // but should be turned back on if it ever becomes active.\n    conf.setLong(CommonConfigurationKeys.FS_TRASH_INTERVAL_KEY, \n                 CommonConfigurationKeys.FS_TRASH_INTERVAL_DEFAULT);\n    NamespaceInfo nsInfo \u003d handshake(conf);\n    super.initialize(conf);\n    // Backup node should never do lease recovery,\n    // therefore lease hard limit should never expire.\n    namesystem.leaseManager.setLeasePeriod(\n        FSConstants.LEASE_SOFTLIMIT_PERIOD, Long.MAX_VALUE);\n    \n    clusterId \u003d nsInfo.getClusterID();\n    blockPoolId \u003d nsInfo.getBlockPoolID();\n\n    // register with the active name-node \n    registerWith(nsInfo);\n    // Checkpoint daemon should start after the rpc server started\n    runCheckpointDaemon(conf);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BackupNode.java"
    }
  }
}