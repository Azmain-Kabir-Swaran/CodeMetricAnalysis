{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KerberosAuthenticationHandler.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
  "functionStartLine": 207,
  "functionEndLine": 209,
  "numCommitsSeen": 23,
  "timeTaken": 2528,
  "changeHistory": [
    "e806c6e0ce6026d53227b51d58ec6d5458164571",
    "f5e0bd30fde654ed48fe73e5c0523030365385a4",
    "4c38f11cec0664b70e52f9563052dca8fb17c33f",
    "95665a6eea32ff7134ea556db4dd4ae068364fc0",
    "9097e2efe4c92d83c8fab88dc11be84505a6cab5",
    "47f03bc9fe9c8c94a567d29765cef2266f2993d0",
    "228742acad6b56c0e4fafe285099fcdfa5b6e47f",
    "f9993b5ffb23aa430d50c9708dd2b5b1533a852e",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af"
  ],
  "changeHistoryShort": {
    "e806c6e0ce6026d53227b51d58ec6d5458164571": "Ybodychange",
    "f5e0bd30fde654ed48fe73e5c0523030365385a4": "Ybodychange",
    "4c38f11cec0664b70e52f9563052dca8fb17c33f": "Ybodychange",
    "95665a6eea32ff7134ea556db4dd4ae068364fc0": "Ybodychange",
    "9097e2efe4c92d83c8fab88dc11be84505a6cab5": "Ybodychange",
    "47f03bc9fe9c8c94a567d29765cef2266f2993d0": "Ybodychange",
    "228742acad6b56c0e4fafe285099fcdfa5b6e47f": "Ybodychange",
    "f9993b5ffb23aa430d50c9708dd2b5b1533a852e": "Ybodychange",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e806c6e0ce6026d53227b51d58ec6d5458164571": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14146.  KerberosAuthenticationHandler should authenticate with SPN in AP-REQ.  Contributed by Daryn Sharp\n",
      "commitDate": "21/06/17 9:03 AM",
      "commitName": "e806c6e0ce6026d53227b51d58ec6d5458164571",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "14/12/16 1:45 PM",
      "commitNameOld": "f5e0bd30fde654ed48fe73e5c0523030365385a4",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 188.76,
      "commitsBetweenForRepo": 981,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,4 @@\n               public AuthenticationToken run() throws Exception {\n-                if (LOG.isTraceEnabled()) {\n-                  LOG.trace(\"SPNEGO with server principals: {} for {}\",\n-                      serverPrincipals.toString(), serverName);\n-                }\n-                AuthenticationToken token \u003d null;\n-                Exception lastException \u003d null;\n-                for (String serverPrincipal : serverPrincipals) {\n-                  try {\n-                    token \u003d runWithPrincipal(serverPrincipal, clientToken,\n-                        base64, response);\n-                  } catch (Exception ex) {\n-                    lastException \u003d ex;\n-                    LOG.trace(\"Auth {} failed with {}\", serverPrincipal, ex);\n-                  } finally {\n-                      if (token !\u003d null) {\n-                        LOG.trace(\"Auth {} successfully\", serverPrincipal);\n-                        break;\n-                    }\n-                  }\n-                }\n-                if (token !\u003d null) {\n-                  return token;\n-                } else {\n-                  throw new AuthenticationException(lastException);\n-                }\n+                return runWithPrincipal(serverPrincipal, clientToken,\n+                      base64, response);\n               }\n\\ No newline at end of file\n",
      "actualSource": "              public AuthenticationToken run() throws Exception {\n                return runWithPrincipal(serverPrincipal, clientToken,\n                      base64, response);\n              }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "f5e0bd30fde654ed48fe73e5c0523030365385a4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13890. Maintain HTTP/host as SPNEGO SPN support and fix KerberosName parsing. Contributed by Xiaoyu Yao.\n",
      "commitDate": "14/12/16 1:45 PM",
      "commitName": "f5e0bd30fde654ed48fe73e5c0523030365385a4",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "09/12/16 9:27 PM",
      "commitNameOld": "4c38f11cec0664b70e52f9563052dca8fb17c33f",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 4.68,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n               public AuthenticationToken run() throws Exception {\n                 if (LOG.isTraceEnabled()) {\n-                  LOG.trace(\"SPNEGO with principals: {}\",\n-                      serverPrincipals.toString());\n+                  LOG.trace(\"SPNEGO with server principals: {} for {}\",\n+                      serverPrincipals.toString(), serverName);\n                 }\n                 AuthenticationToken token \u003d null;\n                 Exception lastException \u003d null;\n                 for (String serverPrincipal : serverPrincipals) {\n                   try {\n                     token \u003d runWithPrincipal(serverPrincipal, clientToken,\n                         base64, response);\n                   } catch (Exception ex) {\n                     lastException \u003d ex;\n                     LOG.trace(\"Auth {} failed with {}\", serverPrincipal, ex);\n                   } finally {\n                       if (token !\u003d null) {\n                         LOG.trace(\"Auth {} successfully\", serverPrincipal);\n                         break;\n                     }\n                   }\n                 }\n                 if (token !\u003d null) {\n                   return token;\n                 } else {\n                   throw new AuthenticationException(lastException);\n                 }\n               }\n\\ No newline at end of file\n",
      "actualSource": "              public AuthenticationToken run() throws Exception {\n                if (LOG.isTraceEnabled()) {\n                  LOG.trace(\"SPNEGO with server principals: {} for {}\",\n                      serverPrincipals.toString(), serverName);\n                }\n                AuthenticationToken token \u003d null;\n                Exception lastException \u003d null;\n                for (String serverPrincipal : serverPrincipals) {\n                  try {\n                    token \u003d runWithPrincipal(serverPrincipal, clientToken,\n                        base64, response);\n                  } catch (Exception ex) {\n                    lastException \u003d ex;\n                    LOG.trace(\"Auth {} failed with {}\", serverPrincipal, ex);\n                  } finally {\n                      if (token !\u003d null) {\n                        LOG.trace(\"Auth {} successfully\", serverPrincipal);\n                        break;\n                    }\n                  }\n                }\n                if (token !\u003d null) {\n                  return token;\n                } else {\n                  throw new AuthenticationException(lastException);\n                }\n              }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "4c38f11cec0664b70e52f9563052dca8fb17c33f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13565. KerberosAuthenticationHandler#authenticate should not rebuild SPN based on client request. Contributed by Xiaoyu Yao.\n",
      "commitDate": "09/12/16 9:27 PM",
      "commitName": "4c38f11cec0664b70e52f9563052dca8fb17c33f",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "04/11/16 4:02 PM",
      "commitNameOld": "95665a6eea32ff7134ea556db4dd4ae068364fc0",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 35.27,
      "commitsBetweenForRepo": 262,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,27 @@\n-          public AuthenticationToken run() throws Exception {\n-            AuthenticationToken token \u003d null;\n-            GSSContext gssContext \u003d null;\n-            GSSCredential gssCreds \u003d null;\n-            try {\n-              gssCreds \u003d gssManager.createCredential(\n-                  gssManager.createName(\n-                      KerberosUtil.getServicePrincipal(\"HTTP\", serverName),\n-                      KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n-                  GSSCredential.INDEFINITE_LIFETIME,\n-                  new Oid[]{\n-                    KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n-                    KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n-                  GSSCredential.ACCEPT_ONLY);\n-              gssContext \u003d gssManager.createContext(gssCreds);\n-              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n-              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n-                String authenticate \u003d base64.encodeToString(serverToken);\n-                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n-                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n-              }\n-              if (!gssContext.isEstablished()) {\n-                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n-                LOG.trace(\"SPNEGO in progress\");\n-              } else {\n-                String clientPrincipal \u003d gssContext.getSrcName().toString();\n-                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n-                String userName \u003d kerberosName.getShortName();\n-                token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n-                response.setStatus(HttpServletResponse.SC_OK);\n-                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n-              }\n-            } finally {\n-              if (gssContext !\u003d null) {\n-                gssContext.dispose();\n-              }\n-              if (gssCreds !\u003d null) {\n-                gssCreds.dispose();\n-              }\n-            }\n-            return token;\n-          }\n\\ No newline at end of file\n+              public AuthenticationToken run() throws Exception {\n+                if (LOG.isTraceEnabled()) {\n+                  LOG.trace(\"SPNEGO with principals: {}\",\n+                      serverPrincipals.toString());\n+                }\n+                AuthenticationToken token \u003d null;\n+                Exception lastException \u003d null;\n+                for (String serverPrincipal : serverPrincipals) {\n+                  try {\n+                    token \u003d runWithPrincipal(serverPrincipal, clientToken,\n+                        base64, response);\n+                  } catch (Exception ex) {\n+                    lastException \u003d ex;\n+                    LOG.trace(\"Auth {} failed with {}\", serverPrincipal, ex);\n+                  } finally {\n+                      if (token !\u003d null) {\n+                        LOG.trace(\"Auth {} successfully\", serverPrincipal);\n+                        break;\n+                    }\n+                  }\n+                }\n+                if (token !\u003d null) {\n+                  return token;\n+                } else {\n+                  throw new AuthenticationException(lastException);\n+                }\n+              }\n\\ No newline at end of file\n",
      "actualSource": "              public AuthenticationToken run() throws Exception {\n                if (LOG.isTraceEnabled()) {\n                  LOG.trace(\"SPNEGO with principals: {}\",\n                      serverPrincipals.toString());\n                }\n                AuthenticationToken token \u003d null;\n                Exception lastException \u003d null;\n                for (String serverPrincipal : serverPrincipals) {\n                  try {\n                    token \u003d runWithPrincipal(serverPrincipal, clientToken,\n                        base64, response);\n                  } catch (Exception ex) {\n                    lastException \u003d ex;\n                    LOG.trace(\"Auth {} failed with {}\", serverPrincipal, ex);\n                  } finally {\n                      if (token !\u003d null) {\n                        LOG.trace(\"Auth {} successfully\", serverPrincipal);\n                        break;\n                    }\n                  }\n                }\n                if (token !\u003d null) {\n                  return token;\n                } else {\n                  throw new AuthenticationException(lastException);\n                }\n              }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "95665a6eea32ff7134ea556db4dd4ae068364fc0": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13565. KerberosAuthenticationHandler#authenticate should not rebuild SPN based on client request. Contributed by Xiaoyu Yao.\"\n\nThis reverts commit 9097e2efe4c92d83c8fab88dc11be84505a6cab5.\n",
      "commitDate": "04/11/16 4:02 PM",
      "commitName": "95665a6eea32ff7134ea556db4dd4ae068364fc0",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "13/10/16 10:52 AM",
      "commitNameOld": "9097e2efe4c92d83c8fab88dc11be84505a6cab5",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 22.22,
      "commitsBetweenForRepo": 214,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n           public AuthenticationToken run() throws Exception {\n             AuthenticationToken token \u003d null;\n             GSSContext gssContext \u003d null;\n             GSSCredential gssCreds \u003d null;\n             try {\n-              gssCreds \u003d gssManager.createCredential(null,\n+              gssCreds \u003d gssManager.createCredential(\n+                  gssManager.createName(\n+                      KerberosUtil.getServicePrincipal(\"HTTP\", serverName),\n+                      KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n                   GSSCredential.INDEFINITE_LIFETIME,\n                   new Oid[]{\n                     KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n                     KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n                   GSSCredential.ACCEPT_ONLY);\n               gssContext \u003d gssManager.createContext(gssCreds);\n               byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n               if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                 String authenticate \u003d base64.encodeToString(serverToken);\n                 response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                    KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n               }\n               if (!gssContext.isEstablished()) {\n                 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                 LOG.trace(\"SPNEGO in progress\");\n               } else {\n                 String clientPrincipal \u003d gssContext.getSrcName().toString();\n                 KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                 String userName \u003d kerberosName.getShortName();\n                 token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                 response.setStatus(HttpServletResponse.SC_OK);\n                 LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n               }\n             } finally {\n               if (gssContext !\u003d null) {\n                 gssContext.dispose();\n               }\n               if (gssCreds !\u003d null) {\n                 gssCreds.dispose();\n               }\n             }\n             return token;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            GSSCredential gssCreds \u003d null;\n            try {\n              gssCreds \u003d gssManager.createCredential(\n                  gssManager.createName(\n                      KerberosUtil.getServicePrincipal(\"HTTP\", serverName),\n                      KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n                  GSSCredential.INDEFINITE_LIFETIME,\n                  new Oid[]{\n                    KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n                    KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n                  GSSCredential.ACCEPT_ONLY);\n              gssContext \u003d gssManager.createContext(gssCreds);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n              if (gssCreds !\u003d null) {\n                gssCreds.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "9097e2efe4c92d83c8fab88dc11be84505a6cab5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13565. KerberosAuthenticationHandler#authenticate should not rebuild SPN based on client request. Contributed by Xiaoyu Yao.\n",
      "commitDate": "13/10/16 10:52 AM",
      "commitName": "9097e2efe4c92d83c8fab88dc11be84505a6cab5",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "18/10/15 3:45 AM",
      "commitNameOld": "bafeb6c7bc50efd11c6637921a50dd9cfdd53841",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 361.3,
      "commitsBetweenForRepo": 2507,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,39 @@\n           public AuthenticationToken run() throws Exception {\n             AuthenticationToken token \u003d null;\n             GSSContext gssContext \u003d null;\n             GSSCredential gssCreds \u003d null;\n             try {\n-              gssCreds \u003d gssManager.createCredential(\n-                  gssManager.createName(\n-                      KerberosUtil.getServicePrincipal(\"HTTP\", serverName),\n-                      KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n+              gssCreds \u003d gssManager.createCredential(null,\n                   GSSCredential.INDEFINITE_LIFETIME,\n                   new Oid[]{\n                     KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n                     KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n                   GSSCredential.ACCEPT_ONLY);\n               gssContext \u003d gssManager.createContext(gssCreds);\n               byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n               if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                 String authenticate \u003d base64.encodeToString(serverToken);\n                 response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                    KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n               }\n               if (!gssContext.isEstablished()) {\n                 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                 LOG.trace(\"SPNEGO in progress\");\n               } else {\n                 String clientPrincipal \u003d gssContext.getSrcName().toString();\n                 KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                 String userName \u003d kerberosName.getShortName();\n                 token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                 response.setStatus(HttpServletResponse.SC_OK);\n                 LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n               }\n             } finally {\n               if (gssContext !\u003d null) {\n                 gssContext.dispose();\n               }\n               if (gssCreds !\u003d null) {\n                 gssCreds.dispose();\n               }\n             }\n             return token;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            GSSCredential gssCreds \u003d null;\n            try {\n              gssCreds \u003d gssManager.createCredential(null,\n                  GSSCredential.INDEFINITE_LIFETIME,\n                  new Oid[]{\n                    KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n                    KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n                  GSSCredential.ACCEPT_ONLY);\n              gssContext \u003d gssManager.createContext(gssCreds);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n              if (gssCreds !\u003d null) {\n                gssCreds.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "47f03bc9fe9c8c94a567d29765cef2266f2993d0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10158. SPNEGO should work with multiple interfaces/SPNs. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593362 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/14 11:26 AM",
      "commitName": "47f03bc9fe9c8c94a567d29765cef2266f2993d0",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "13/08/13 4:12 PM",
      "commitNameOld": "228742acad6b56c0e4fafe285099fcdfa5b6e47f",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 267.8,
      "commitsBetweenForRepo": 1818,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n           public AuthenticationToken run() throws Exception {\n             AuthenticationToken token \u003d null;\n             GSSContext gssContext \u003d null;\n             GSSCredential gssCreds \u003d null;\n             try {\n-              if (IBM_JAVA) {\n-                // IBM JDK needs non-null credentials to be passed to createContext here, with\n-                // SPNEGO mechanism specified, otherwise JGSS will use its default mechanism\n-                // only, which is Kerberos V5.\n-                gssCreds \u003d gssManager.createCredential(null, GSSCredential.INDEFINITE_LIFETIME,\n-                    new Oid[]{KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n-                        KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n-                    GSSCredential.ACCEPT_ONLY);\n-              }\n+              gssCreds \u003d gssManager.createCredential(\n+                  gssManager.createName(\n+                      KerberosUtil.getServicePrincipal(\"HTTP\", serverName),\n+                      KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n+                  GSSCredential.INDEFINITE_LIFETIME,\n+                  new Oid[]{\n+                    KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n+                    KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n+                  GSSCredential.ACCEPT_ONLY);\n               gssContext \u003d gssManager.createContext(gssCreds);\n               byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n               if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                 String authenticate \u003d base64.encodeToString(serverToken);\n                 response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                    KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n               }\n               if (!gssContext.isEstablished()) {\n                 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                 LOG.trace(\"SPNEGO in progress\");\n               } else {\n                 String clientPrincipal \u003d gssContext.getSrcName().toString();\n                 KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                 String userName \u003d kerberosName.getShortName();\n                 token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                 response.setStatus(HttpServletResponse.SC_OK);\n                 LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n               }\n             } finally {\n               if (gssContext !\u003d null) {\n                 gssContext.dispose();\n               }\n               if (gssCreds !\u003d null) {\n                 gssCreds.dispose();\n               }\n             }\n             return token;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            GSSCredential gssCreds \u003d null;\n            try {\n              gssCreds \u003d gssManager.createCredential(\n                  gssManager.createName(\n                      KerberosUtil.getServicePrincipal(\"HTTP\", serverName),\n                      KerberosUtil.getOidInstance(\"NT_GSS_KRB5_PRINCIPAL\")),\n                  GSSCredential.INDEFINITE_LIFETIME,\n                  new Oid[]{\n                    KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n                    KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n                  GSSCredential.ACCEPT_ONLY);\n              gssContext \u003d gssManager.createContext(gssCreds);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n              if (gssCreds !\u003d null) {\n                gssCreds.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "228742acad6b56c0e4fafe285099fcdfa5b6e47f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9446. Support Kerberos SPNEGO for IBM JDK. (Yu Gao via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1513687 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/13 4:12 PM",
      "commitName": "228742acad6b56c0e4fafe285099fcdfa5b6e47f",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "12/06/12 1:45 PM",
      "commitNameOld": "22c65886237ed7c4e8cfa0aff95d751b6d70f7cc",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 427.1,
      "commitsBetweenForRepo": 2452,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,42 @@\n           public AuthenticationToken run() throws Exception {\n             AuthenticationToken token \u003d null;\n             GSSContext gssContext \u003d null;\n+            GSSCredential gssCreds \u003d null;\n             try {\n-              gssContext \u003d gssManager.createContext((GSSCredential) null);\n+              if (IBM_JAVA) {\n+                // IBM JDK needs non-null credentials to be passed to createContext here, with\n+                // SPNEGO mechanism specified, otherwise JGSS will use its default mechanism\n+                // only, which is Kerberos V5.\n+                gssCreds \u003d gssManager.createCredential(null, GSSCredential.INDEFINITE_LIFETIME,\n+                    new Oid[]{KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n+                        KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n+                    GSSCredential.ACCEPT_ONLY);\n+              }\n+              gssContext \u003d gssManager.createContext(gssCreds);\n               byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n               if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                 String authenticate \u003d base64.encodeToString(serverToken);\n                 response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                    KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n               }\n               if (!gssContext.isEstablished()) {\n                 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                 LOG.trace(\"SPNEGO in progress\");\n               } else {\n                 String clientPrincipal \u003d gssContext.getSrcName().toString();\n                 KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                 String userName \u003d kerberosName.getShortName();\n                 token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                 response.setStatus(HttpServletResponse.SC_OK);\n                 LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n               }\n             } finally {\n               if (gssContext !\u003d null) {\n                 gssContext.dispose();\n               }\n+              if (gssCreds !\u003d null) {\n+                gssCreds.dispose();\n+              }\n             }\n             return token;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            GSSCredential gssCreds \u003d null;\n            try {\n              if (IBM_JAVA) {\n                // IBM JDK needs non-null credentials to be passed to createContext here, with\n                // SPNEGO mechanism specified, otherwise JGSS will use its default mechanism\n                // only, which is Kerberos V5.\n                gssCreds \u003d gssManager.createCredential(null, GSSCredential.INDEFINITE_LIFETIME,\n                    new Oid[]{KerberosUtil.getOidInstance(\"GSS_SPNEGO_MECH_OID\"),\n                        KerberosUtil.getOidInstance(\"GSS_KRB5_MECH_OID\")},\n                    GSSCredential.ACCEPT_ONLY);\n              }\n              gssContext \u003d gssManager.createContext(gssCreds);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n              if (gssCreds !\u003d null) {\n                gssCreds.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "f9993b5ffb23aa430d50c9708dd2b5b1533a852e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8309. Pseudo \u0026 Kerberos AuthenticationHandler should use getType() to create token (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329713 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/12 6:44 AM",
      "commitName": "f9993b5ffb23aa430d50c9708dd2b5b1533a852e",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "15/03/12 6:45 PM",
      "commitNameOld": "2a0147f8f698f22e61281c06691107e24a2f139c",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 39.5,
      "commitsBetweenForRepo": 294,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n           public AuthenticationToken run() throws Exception {\n             AuthenticationToken token \u003d null;\n             GSSContext gssContext \u003d null;\n             try {\n               gssContext \u003d gssManager.createContext((GSSCredential) null);\n               byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n               if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                 String authenticate \u003d base64.encodeToString(serverToken);\n                 response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                    KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n               }\n               if (!gssContext.isEstablished()) {\n                 response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                 LOG.trace(\"SPNEGO in progress\");\n               } else {\n                 String clientPrincipal \u003d gssContext.getSrcName().toString();\n                 KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                 String userName \u003d kerberosName.getShortName();\n-                token \u003d new AuthenticationToken(userName, clientPrincipal, TYPE);\n+                token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                 response.setStatus(HttpServletResponse.SC_OK);\n                 LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n               }\n             } finally {\n               if (gssContext !\u003d null) {\n                 gssContext.dispose();\n               }\n             }\n             return token;\n           }\n\\ No newline at end of file\n",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            try {\n              gssContext \u003d gssManager.createContext((GSSCredential) null);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, getType());\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {}
    },
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7579. Rename package names from alfredo to auth.  Contributed by Alejandro Abdelnur\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 3:40 PM",
      "commitName": "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/08/11 2:18 PM",
      "commitNameOld": "4f1a0e36fab1f18e6e2c5fcc72cd9a7634967fcd",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            try {\n              gssContext \u003d gssManager.createContext((GSSCredential) null);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, TYPE);\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/KerberosAuthenticationHandler.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            try {\n              gssContext \u003d gssManager.createContext((GSSCredential) null);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, TYPE);\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,29 @@\n+          public AuthenticationToken run() throws Exception {\n+            AuthenticationToken token \u003d null;\n+            GSSContext gssContext \u003d null;\n+            try {\n+              gssContext \u003d gssManager.createContext((GSSCredential) null);\n+              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n+              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n+                String authenticate \u003d base64.encodeToString(serverToken);\n+                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n+                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n+              }\n+              if (!gssContext.isEstablished()) {\n+                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n+                LOG.trace(\"SPNEGO in progress\");\n+              } else {\n+                String clientPrincipal \u003d gssContext.getSrcName().toString();\n+                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n+                String userName \u003d kerberosName.getShortName();\n+                token \u003d new AuthenticationToken(userName, clientPrincipal, TYPE);\n+                response.setStatus(HttpServletResponse.SC_OK);\n+                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n+              }\n+            } finally {\n+              if (gssContext !\u003d null) {\n+                gssContext.dispose();\n+              }\n+            }\n+            return token;\n+          }\n\\ No newline at end of file\n",
      "actualSource": "          public AuthenticationToken run() throws Exception {\n            AuthenticationToken token \u003d null;\n            GSSContext gssContext \u003d null;\n            try {\n              gssContext \u003d gssManager.createContext((GSSCredential) null);\n              byte[] serverToken \u003d gssContext.acceptSecContext(clientToken, 0, clientToken.length);\n              if (serverToken !\u003d null \u0026\u0026 serverToken.length \u003e 0) {\n                String authenticate \u003d base64.encodeToString(serverToken);\n                response.setHeader(KerberosAuthenticator.WWW_AUTHENTICATE,\n                                   KerberosAuthenticator.NEGOTIATE + \" \" + authenticate);\n              }\n              if (!gssContext.isEstablished()) {\n                response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n                LOG.trace(\"SPNEGO in progress\");\n              } else {\n                String clientPrincipal \u003d gssContext.getSrcName().toString();\n                KerberosName kerberosName \u003d new KerberosName(clientPrincipal);\n                String userName \u003d kerberosName.getShortName();\n                token \u003d new AuthenticationToken(userName, clientPrincipal, TYPE);\n                response.setStatus(HttpServletResponse.SC_OK);\n                LOG.trace(\"SPNEGO completed for principal [{}]\", clientPrincipal);\n              }\n            } finally {\n              if (gssContext !\u003d null) {\n                gssContext.dispose();\n              }\n            }\n            return token;\n          }",
      "path": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/KerberosAuthenticationHandler.java"
    }
  }
}