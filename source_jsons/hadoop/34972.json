{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMTimelinePublisher.java",
  "functionName": "reportContainerResourceUsage",
  "functionId": "reportContainerResourceUsage___container-Container__pmemUsage-Long__cpuUsagePercentPerCore-Float",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
  "functionStartLine": 166,
  "functionEndLine": 220,
  "numCommitsSeen": 34,
  "timeTaken": 4784,
  "changeHistory": [
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
    "092fead5d9875fb3760206bcdd76cdafec5e9481",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "39cce4e629aadb7fadf1fb14a23108f55b59eb21",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
    "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51"
  ],
  "changeHistoryShort": {
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676": "Ybodychange",
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": "Ybodychange",
    "092fead5d9875fb3760206bcdd76cdafec5e9481": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "39cce4e629aadb7fadf1fb14a23108f55b59eb21": "Ybodychange",
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": "Ybodychange",
    "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b": "Ymultichange(Yparameterchange,Ybodychange)",
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": "Yparameterchange",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": "Ybodychange",
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": "Yintroduced"
  },
  "changeHistoryDetails": {
    "332cab5518ba9c70a5f191883db8c4d22e8e48b7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9418. ATSV2 /apps//entities/YARN_CONTAINER rest api does not show metrics. Contributed by Prabhu Joseph.\n",
      "commitDate": "01/04/19 11:06 AM",
      "commitName": "332cab5518ba9c70a5f191883db8c4d22e8e48b7",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.78,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,55 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n     if (publishNMContainerEvents) {\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE\n           || cpuUsagePercentPerCore !\u003d\n           ResourceCalculatorProcessTree.UNAVAILABLE) {\n         ContainerEntity entity \u003d\n             createContainerEntity(container.getContainerId());\n         long currentTimeMillis \u003d System.currentTimeMillis();\n         if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n           TimelineMetric memoryMetric \u003d new TimelineMetric();\n           memoryMetric.setId(ContainerMetric.MEMORY.toString());\n           memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n           memoryMetric.addValue(currentTimeMillis, pmemUsage);\n           entity.addMetric(memoryMetric);\n         }\n         if (cpuUsagePercentPerCore !\u003d\n             ResourceCalculatorProcessTree.UNAVAILABLE) {\n           TimelineMetric cpuMetric \u003d new TimelineMetric();\n           cpuMetric.setId(ContainerMetric.CPU.toString());\n           // TODO: support average\n           cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n           cpuMetric.addValue(currentTimeMillis,\n               Math.round(cpuUsagePercentPerCore));\n           entity.addMetric(cpuMetric);\n         }\n-        entity.setIdPrefix(TimelineServiceHelper.\n-            invertLong(container.getContainerStartTime()));\n         ApplicationId appId \u003d container.getContainerId().\n             getApplicationAttemptId().getApplicationId();\n         try {\n           // no need to put it as part of publisher as timeline client\n           // already has Queuing concept\n           TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n           if (timelineClient !\u003d null) {\n             timelineClient.putEntitiesAsync(entity);\n           } else {\n             LOG.error(\"Seems like client has been removed before the container\"\n                 + \" metric could be published for \" +\n                 container.getContainerId());\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to publish Container metrics for container \" +\n                   container.getContainerId());\n           LOG.debug(\"Failed to publish Container metrics for container {}\",\n               container.getContainerId(), e);\n         } catch (YarnException e) {\n           LOG.error(\n               \"Failed to publish Container metrics for container \" +\n                   container.getContainerId(), e.getMessage());\n           LOG.debug(\"Failed to publish Container metrics for container {}\",\n               container.getContainerId(), e);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (publishNMContainerEvents) {\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE\n          || cpuUsagePercentPerCore !\u003d\n          ResourceCalculatorProcessTree.UNAVAILABLE) {\n        ContainerEntity entity \u003d\n            createContainerEntity(container.getContainerId());\n        long currentTimeMillis \u003d System.currentTimeMillis();\n        if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n          TimelineMetric memoryMetric \u003d new TimelineMetric();\n          memoryMetric.setId(ContainerMetric.MEMORY.toString());\n          memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n          memoryMetric.addValue(currentTimeMillis, pmemUsage);\n          entity.addMetric(memoryMetric);\n        }\n        if (cpuUsagePercentPerCore !\u003d\n            ResourceCalculatorProcessTree.UNAVAILABLE) {\n          TimelineMetric cpuMetric \u003d new TimelineMetric();\n          cpuMetric.setId(ContainerMetric.CPU.toString());\n          // TODO: support average\n          cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n          cpuMetric.addValue(currentTimeMillis,\n              Math.round(cpuUsagePercentPerCore));\n          entity.addMetric(cpuMetric);\n        }\n        ApplicationId appId \u003d container.getContainerId().\n            getApplicationAttemptId().getApplicationId();\n        try {\n          // no need to put it as part of publisher as timeline client\n          // already has Queuing concept\n          TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n          if (timelineClient !\u003d null) {\n            timelineClient.putEntitiesAsync(entity);\n          } else {\n            LOG.error(\"Seems like client has been removed before the container\"\n                + \" metric could be published for \" +\n                container.getContainerId());\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to publish Container metrics for container \" +\n                  container.getContainerId());\n          LOG.debug(\"Failed to publish Container metrics for container {}\",\n              container.getContainerId(), e);\n        } catch (YarnException e) {\n          LOG.error(\n              \"Failed to publish Container metrics for container \" +\n                  container.getContainerId(), e.getMessage());\n          LOG.debug(\"Failed to publish Container metrics for container {}\",\n              container.getContainerId(), e);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/02/19 12:18 AM",
      "commitNameOld": "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 38.63,
      "commitsBetweenForRepo": 349,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,57 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n     if (publishNMContainerEvents) {\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE\n           || cpuUsagePercentPerCore !\u003d\n           ResourceCalculatorProcessTree.UNAVAILABLE) {\n         ContainerEntity entity \u003d\n             createContainerEntity(container.getContainerId());\n         long currentTimeMillis \u003d System.currentTimeMillis();\n         if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n           TimelineMetric memoryMetric \u003d new TimelineMetric();\n           memoryMetric.setId(ContainerMetric.MEMORY.toString());\n           memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n           memoryMetric.addValue(currentTimeMillis, pmemUsage);\n           entity.addMetric(memoryMetric);\n         }\n         if (cpuUsagePercentPerCore !\u003d\n             ResourceCalculatorProcessTree.UNAVAILABLE) {\n           TimelineMetric cpuMetric \u003d new TimelineMetric();\n           cpuMetric.setId(ContainerMetric.CPU.toString());\n           // TODO: support average\n           cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n           cpuMetric.addValue(currentTimeMillis,\n               Math.round(cpuUsagePercentPerCore));\n           entity.addMetric(cpuMetric);\n         }\n         entity.setIdPrefix(TimelineServiceHelper.\n             invertLong(container.getContainerStartTime()));\n         ApplicationId appId \u003d container.getContainerId().\n             getApplicationAttemptId().getApplicationId();\n         try {\n           // no need to put it as part of publisher as timeline client\n           // already has Queuing concept\n           TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n           if (timelineClient !\u003d null) {\n             timelineClient.putEntitiesAsync(entity);\n           } else {\n             LOG.error(\"Seems like client has been removed before the container\"\n                 + \" metric could be published for \" +\n                 container.getContainerId());\n           }\n         } catch (IOException e) {\n           LOG.error(\n               \"Failed to publish Container metrics for container \" +\n                   container.getContainerId());\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Failed to publish Container metrics for container \" +\n-                container.getContainerId(), e);\n-          }\n+          LOG.debug(\"Failed to publish Container metrics for container {}\",\n+              container.getContainerId(), e);\n         } catch (YarnException e) {\n           LOG.error(\n               \"Failed to publish Container metrics for container \" +\n                   container.getContainerId(), e.getMessage());\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Failed to publish Container metrics for container \" +\n-                container.getContainerId(), e);\n-          }\n+          LOG.debug(\"Failed to publish Container metrics for container {}\",\n+              container.getContainerId(), e);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (publishNMContainerEvents) {\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE\n          || cpuUsagePercentPerCore !\u003d\n          ResourceCalculatorProcessTree.UNAVAILABLE) {\n        ContainerEntity entity \u003d\n            createContainerEntity(container.getContainerId());\n        long currentTimeMillis \u003d System.currentTimeMillis();\n        if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n          TimelineMetric memoryMetric \u003d new TimelineMetric();\n          memoryMetric.setId(ContainerMetric.MEMORY.toString());\n          memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n          memoryMetric.addValue(currentTimeMillis, pmemUsage);\n          entity.addMetric(memoryMetric);\n        }\n        if (cpuUsagePercentPerCore !\u003d\n            ResourceCalculatorProcessTree.UNAVAILABLE) {\n          TimelineMetric cpuMetric \u003d new TimelineMetric();\n          cpuMetric.setId(ContainerMetric.CPU.toString());\n          // TODO: support average\n          cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n          cpuMetric.addValue(currentTimeMillis,\n              Math.round(cpuUsagePercentPerCore));\n          entity.addMetric(cpuMetric);\n        }\n        entity.setIdPrefix(TimelineServiceHelper.\n            invertLong(container.getContainerStartTime()));\n        ApplicationId appId \u003d container.getContainerId().\n            getApplicationAttemptId().getApplicationId();\n        try {\n          // no need to put it as part of publisher as timeline client\n          // already has Queuing concept\n          TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n          if (timelineClient !\u003d null) {\n            timelineClient.putEntitiesAsync(entity);\n          } else {\n            LOG.error(\"Seems like client has been removed before the container\"\n                + \" metric could be published for \" +\n                container.getContainerId());\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to publish Container metrics for container \" +\n                  container.getContainerId());\n          LOG.debug(\"Failed to publish Container metrics for container {}\",\n              container.getContainerId(), e);\n        } catch (YarnException e) {\n          LOG.error(\n              \"Failed to publish Container metrics for container \" +\n                  container.getContainerId(), e.getMessage());\n          LOG.debug(\"Failed to publish Container metrics for container {}\",\n              container.getContainerId(), e);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6735. Have a way to turn off container metrics from NMs. Contributed by Abhishek Modi.\n",
      "commitDate": "05/02/19 12:18 AM",
      "commitName": "e3ec18b0c4fb93bd00c12d90057c2b982ca8a676",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "14/06/18 12:08 AM",
      "commitNameOld": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 236.05,
      "commitsBetweenForRepo": 1785,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,61 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n-    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n-        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n-      ContainerEntity entity \u003d\n-          createContainerEntity(container.getContainerId());\n-      long currentTimeMillis \u003d System.currentTimeMillis();\n-      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n-        TimelineMetric memoryMetric \u003d new TimelineMetric();\n-        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n-        memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n-        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n-        entity.addMetric(memoryMetric);\n-      }\n-      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n-        TimelineMetric cpuMetric \u003d new TimelineMetric();\n-        cpuMetric.setId(ContainerMetric.CPU.toString());\n-        // TODO: support average\n-        cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n-        cpuMetric.addValue(currentTimeMillis,\n-            Math.round(cpuUsagePercentPerCore));\n-        entity.addMetric(cpuMetric);\n-      }\n-      entity.setIdPrefix(TimelineServiceHelper.\n-          invertLong(container.getContainerStartTime()));\n-      ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n-          .getApplicationId();\n-      try {\n-        // no need to put it as part of publisher as timeline client already has\n-        // Queuing concept\n-        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n-        if (timelineClient !\u003d null) {\n-          timelineClient.putEntitiesAsync(entity);\n-        } else {\n-          LOG.error(\"Seems like client has been removed before the container\"\n-              + \" metric could be published for \" + container.getContainerId());\n+    if (publishNMContainerEvents) {\n+      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE\n+          || cpuUsagePercentPerCore !\u003d\n+          ResourceCalculatorProcessTree.UNAVAILABLE) {\n+        ContainerEntity entity \u003d\n+            createContainerEntity(container.getContainerId());\n+        long currentTimeMillis \u003d System.currentTimeMillis();\n+        if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+          TimelineMetric memoryMetric \u003d new TimelineMetric();\n+          memoryMetric.setId(ContainerMetric.MEMORY.toString());\n+          memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n+          memoryMetric.addValue(currentTimeMillis, pmemUsage);\n+          entity.addMetric(memoryMetric);\n         }\n-      } catch (IOException e) {\n-        LOG.error(\"Failed to publish Container metrics for container \"\n-            + container.getContainerId());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Failed to publish Container metrics for container \"\n-              + container.getContainerId(), e);\n+        if (cpuUsagePercentPerCore !\u003d\n+            ResourceCalculatorProcessTree.UNAVAILABLE) {\n+          TimelineMetric cpuMetric \u003d new TimelineMetric();\n+          cpuMetric.setId(ContainerMetric.CPU.toString());\n+          // TODO: support average\n+          cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n+          cpuMetric.addValue(currentTimeMillis,\n+              Math.round(cpuUsagePercentPerCore));\n+          entity.addMetric(cpuMetric);\n         }\n-      } catch (YarnException e) {\n-        LOG.error(\"Failed to publish Container metrics for container \"\n-            + container.getContainerId(), e.getMessage());\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Failed to publish Container metrics for container \"\n-              + container.getContainerId(), e);\n+        entity.setIdPrefix(TimelineServiceHelper.\n+            invertLong(container.getContainerStartTime()));\n+        ApplicationId appId \u003d container.getContainerId().\n+            getApplicationAttemptId().getApplicationId();\n+        try {\n+          // no need to put it as part of publisher as timeline client\n+          // already has Queuing concept\n+          TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n+          if (timelineClient !\u003d null) {\n+            timelineClient.putEntitiesAsync(entity);\n+          } else {\n+            LOG.error(\"Seems like client has been removed before the container\"\n+                + \" metric could be published for \" +\n+                container.getContainerId());\n+          }\n+        } catch (IOException e) {\n+          LOG.error(\n+              \"Failed to publish Container metrics for container \" +\n+                  container.getContainerId());\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Failed to publish Container metrics for container \" +\n+                container.getContainerId(), e);\n+          }\n+        } catch (YarnException e) {\n+          LOG.error(\n+              \"Failed to publish Container metrics for container \" +\n+                  container.getContainerId(), e.getMessage());\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Failed to publish Container metrics for container \" +\n+                container.getContainerId(), e);\n+          }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (publishNMContainerEvents) {\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE\n          || cpuUsagePercentPerCore !\u003d\n          ResourceCalculatorProcessTree.UNAVAILABLE) {\n        ContainerEntity entity \u003d\n            createContainerEntity(container.getContainerId());\n        long currentTimeMillis \u003d System.currentTimeMillis();\n        if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n          TimelineMetric memoryMetric \u003d new TimelineMetric();\n          memoryMetric.setId(ContainerMetric.MEMORY.toString());\n          memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n          memoryMetric.addValue(currentTimeMillis, pmemUsage);\n          entity.addMetric(memoryMetric);\n        }\n        if (cpuUsagePercentPerCore !\u003d\n            ResourceCalculatorProcessTree.UNAVAILABLE) {\n          TimelineMetric cpuMetric \u003d new TimelineMetric();\n          cpuMetric.setId(ContainerMetric.CPU.toString());\n          // TODO: support average\n          cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n          cpuMetric.addValue(currentTimeMillis,\n              Math.round(cpuUsagePercentPerCore));\n          entity.addMetric(cpuMetric);\n        }\n        entity.setIdPrefix(TimelineServiceHelper.\n            invertLong(container.getContainerStartTime()));\n        ApplicationId appId \u003d container.getContainerId().\n            getApplicationAttemptId().getApplicationId();\n        try {\n          // no need to put it as part of publisher as timeline client\n          // already has Queuing concept\n          TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n          if (timelineClient !\u003d null) {\n            timelineClient.putEntitiesAsync(entity);\n          } else {\n            LOG.error(\"Seems like client has been removed before the container\"\n                + \" metric could be published for \" +\n                container.getContainerId());\n          }\n        } catch (IOException e) {\n          LOG.error(\n              \"Failed to publish Container metrics for container \" +\n                  container.getContainerId());\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Failed to publish Container metrics for container \" +\n                container.getContainerId(), e);\n          }\n        } catch (YarnException e) {\n          LOG.error(\n              \"Failed to publish Container metrics for container \" +\n                  container.getContainerId(), e.getMessage());\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Failed to publish Container metrics for container \" +\n                container.getContainerId(), e);\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "9119b3cf8f883aa2d5df534afc0c50249fed03c6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8155. Improve ATSv2 client logging in RM and NM publisher. Contributed by Abhishek Modi.\n",
      "commitDate": "14/06/18 12:08 AM",
      "commitName": "9119b3cf8f883aa2d5df534afc0c50249fed03c6",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "14/05/18 11:08 AM",
      "commitNameOld": "2d00a0c71b5dde31e2cf8fcb96d9d541d41fb879",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 30.54,
      "commitsBetweenForRepo": 257,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,54 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n         cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n         memoryMetric.setId(ContainerMetric.MEMORY.toString());\n         memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n       if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n         cpuMetric.setId(ContainerMetric.CPU.toString());\n         // TODO: support average\n         cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         cpuMetric.addValue(currentTimeMillis,\n             Math.round(cpuUsagePercentPerCore));\n         entity.addMetric(cpuMetric);\n       }\n       entity.setIdPrefix(TimelineServiceHelper.\n           invertLong(container.getContainerStartTime()));\n       ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n           .getApplicationId();\n       try {\n         // no need to put it as part of publisher as timeline client already has\n         // Queuing concept\n         TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n         if (timelineClient !\u003d null) {\n           timelineClient.putEntitiesAsync(entity);\n         } else {\n           LOG.error(\"Seems like client has been removed before the container\"\n               + \" metric could be published for \" + container.getContainerId());\n         }\n-      } catch (IOException | YarnException e) {\n+      } catch (IOException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n-            + container.getContainerId(), e);\n+            + container.getContainerId());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Failed to publish Container metrics for container \"\n+              + container.getContainerId(), e);\n+        }\n+      } catch (YarnException e) {\n+        LOG.error(\"Failed to publish Container metrics for container \"\n+            + container.getContainerId(), e.getMessage());\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Failed to publish Container metrics for container \"\n+              + container.getContainerId(), e);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n        memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString());\n        // TODO: support average\n        cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        cpuMetric.addValue(currentTimeMillis,\n            Math.round(cpuUsagePercentPerCore));\n        entity.addMetric(cpuMetric);\n      }\n      entity.setIdPrefix(TimelineServiceHelper.\n          invertLong(container.getContainerStartTime()));\n      ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n          .getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the container\"\n              + \" metric could be published for \" + container.getContainerId());\n        }\n      } catch (IOException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Failed to publish Container metrics for container \"\n              + container.getContainerId(), e);\n        }\n      } catch (YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e.getMessage());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Failed to publish Container metrics for container \"\n              + container.getContainerId(), e);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "092fead5d9875fb3760206bcdd76cdafec5e9481": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5792. Adopt the id prefix for YARN, MR, and DS entities. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "278bd6fcff8d084acfd85b91a6f4ca7e189e742d",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n         cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n         memoryMetric.setId(ContainerMetric.MEMORY.toString());\n         memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n       if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n         cpuMetric.setId(ContainerMetric.CPU.toString());\n         // TODO: support average\n         cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         cpuMetric.addValue(currentTimeMillis,\n             Math.round(cpuUsagePercentPerCore));\n         entity.addMetric(cpuMetric);\n       }\n+      entity.setIdPrefix(TimelineServiceHelper.\n+          invertLong(container.getContainerStartTime()));\n       ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n           .getApplicationId();\n       try {\n         // no need to put it as part of publisher as timeline client already has\n         // Queuing concept\n         TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n         if (timelineClient !\u003d null) {\n           timelineClient.putEntitiesAsync(entity);\n         } else {\n           LOG.error(\"Seems like client has been removed before the container\"\n               + \" metric could be published for \" + container.getContainerId());\n         }\n       } catch (IOException | YarnException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n             + container.getContainerId(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n        memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString());\n        // TODO: support average\n        cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        cpuMetric.addValue(currentTimeMillis,\n            Math.round(cpuUsagePercentPerCore));\n        entity.addMetric(cpuMetric);\n      }\n      entity.setIdPrefix(TimelineServiceHelper.\n          invertLong(container.getContainerStartTime()));\n      ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n          .getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the container\"\n              + \" metric could be published for \" + container.getContainerId());\n        }\n      } catch (IOException | YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "06/01/17 6:41 PM",
      "commitNameOld": "a59df15757fac7f917cb96fc8fcfeb7017475e4f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 40.71,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n         cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n         memoryMetric.setId(ContainerMetric.MEMORY.toString());\n         memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n       if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n         cpuMetric.setId(ContainerMetric.CPU.toString());\n         // TODO: support average\n         cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         cpuMetric.addValue(currentTimeMillis,\n             Math.round(cpuUsagePercentPerCore));\n         entity.addMetric(cpuMetric);\n       }\n       ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n           .getApplicationId();\n       try {\n         // no need to put it as part of publisher as timeline client already has\n         // Queuing concept\n-        TimelineClient timelineClient \u003d getTimelineClient(appId);\n+        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n         if (timelineClient !\u003d null) {\n           timelineClient.putEntitiesAsync(entity);\n         } else {\n           LOG.error(\"Seems like client has been removed before the container\"\n               + \" metric could be published for \" + container.getContainerId());\n         }\n       } catch (IOException | YarnException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n             + container.getContainerId(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n        memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString());\n        // TODO: support average\n        cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        cpuMetric.addValue(currentTimeMillis,\n            Math.round(cpuUsagePercentPerCore));\n        entity.addMetric(cpuMetric);\n      }\n      ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n          .getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineV2Client timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the container\"\n              + \" metric could be published for \" + container.getContainerId());\n        }\n      } catch (IOException | YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "39cce4e629aadb7fadf1fb14a23108f55b59eb21": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3816. [Aggregation] App-level aggregation and accumulation for YARN system metrics (Li Lu via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "39cce4e629aadb7fadf1fb14a23108f55b59eb21",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n         cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n         memoryMetric.setId(ContainerMetric.MEMORY.toString());\n+        memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n       if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n         cpuMetric.setId(ContainerMetric.CPU.toString());\n+        // TODO: support average\n+        cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n         cpuMetric.addValue(currentTimeMillis,\n             Math.round(cpuUsagePercentPerCore));\n         entity.addMetric(cpuMetric);\n       }\n       ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n           .getApplicationId();\n       try {\n         // no need to put it as part of publisher as timeline client already has\n         // Queuing concept\n         TimelineClient timelineClient \u003d getTimelineClient(appId);\n         if (timelineClient !\u003d null) {\n           timelineClient.putEntitiesAsync(entity);\n         } else {\n           LOG.error(\"Seems like client has been removed before the container\"\n               + \" metric could be published for \" + container.getContainerId());\n         }\n       } catch (IOException | YarnException e) {\n         LOG.error(\"Failed to publish Container metrics for container \"\n             + container.getContainerId(), e);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n        memoryMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString());\n        // TODO: support average\n        cpuMetric.setRealtimeAggregationOp(TimelineMetricOperation.SUM);\n        cpuMetric.addValue(currentTimeMillis,\n            Math.round(cpuUsagePercentPerCore));\n        entity.addMetric(cpuMetric);\n      }\n      ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n          .getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineClient timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the container\"\n              + \" metric could be published for \" + container.getContainerId());\n        }\n      } catch (IOException | YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "84c35ac6c4a76c31d9bf9c87b87ed29394564611": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4711. NM is going down with NPE\u0027s due to single thread processing of events by Timeline client (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "84c35ac6c4a76c31d9bf9c87b87ed29394564611",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,38 @@\n   public void reportContainerResourceUsage(Container container, Long pmemUsage,\n       Float cpuUsagePercentPerCore) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n         cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n         memoryMetric.setId(ContainerMetric.MEMORY.toString());\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n       if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n         cpuMetric.setId(ContainerMetric.CPU.toString());\n         cpuMetric.addValue(currentTimeMillis,\n             Math.round(cpuUsagePercentPerCore));\n         entity.addMetric(cpuMetric);\n       }\n-      dispatcher.getEventHandler()\n-          .handle(new TimelinePublishEvent(entity, container.getContainerId()\n-              .getApplicationAttemptId().getApplicationId()));\n+      ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n+          .getApplicationId();\n+      try {\n+        // no need to put it as part of publisher as timeline client already has\n+        // Queuing concept\n+        TimelineClient timelineClient \u003d getTimelineClient(appId);\n+        if (timelineClient !\u003d null) {\n+          timelineClient.putEntitiesAsync(entity);\n+        } else {\n+          LOG.error(\"Seems like client has been removed before the container\"\n+              + \" metric could be published for \" + container.getContainerId());\n+        }\n+      } catch (IOException | YarnException e) {\n+        LOG.error(\"Failed to publish Container metrics for container \"\n+            + container.getContainerId(), e);\n+      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString());\n        cpuMetric.addValue(currentTimeMillis,\n            Math.round(cpuUsagePercentPerCore));\n        entity.addMetric(cpuMetric);\n      }\n      ApplicationId appId \u003d container.getContainerId().getApplicationAttemptId()\n          .getApplicationId();\n      try {\n        // no need to put it as part of publisher as timeline client already has\n        // Queuing concept\n        TimelineClient timelineClient \u003d getTimelineClient(appId);\n        if (timelineClient !\u003d null) {\n          timelineClient.putEntitiesAsync(entity);\n        } else {\n          LOG.error(\"Seems like client has been removed before the container\"\n              + \" metric could be published for \" + container.getContainerId());\n        }\n      } catch (IOException | YarnException e) {\n        LOG.error(\"Failed to publish Container metrics for container \"\n            + container.getContainerId(), e);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4712. CPU Usage Metric is not captured properly in YARN-2928. (Naganarasimha G R via Varun Saxena)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4712. CPU Usage Metric is not captured properly in YARN-2928. (Naganarasimha G R via Varun Saxena)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  public void reportContainerResourceUsage(Container container, String pId,\n-      Long pmemUsage, Float cpuUsageTotalCoresPercentage) {\n+  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n+      Float cpuUsagePercentPerCore) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n-        cpuUsageTotalCoresPercentage !\u003d\n-            ResourceCalculatorProcessTree.UNAVAILABLE) {\n+        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n-        memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n+        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n-      if (cpuUsageTotalCoresPercentage !\u003d\n-          ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n-        cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n-        cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n+        cpuMetric.setId(ContainerMetric.CPU.toString());\n+        cpuMetric.addValue(currentTimeMillis,\n+            Math.round(cpuUsagePercentPerCore));\n         entity.addMetric(cpuMetric);\n       }\n-      dispatcher.getEventHandler().handle(\n-          new TimelinePublishEvent(entity, container.getContainerId()\n+      dispatcher.getEventHandler()\n+          .handle(new TimelinePublishEvent(entity, container.getContainerId()\n               .getApplicationAttemptId().getApplicationId()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString());\n        cpuMetric.addValue(currentTimeMillis,\n            Math.round(cpuUsagePercentPerCore));\n        entity.addMetric(cpuMetric);\n      }\n      dispatcher.getEventHandler()\n          .handle(new TimelinePublishEvent(entity, container.getContainerId()\n              .getApplicationAttemptId().getApplicationId()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
          "extendedDetails": {
            "oldValue": "[container-Container, pId-String, pmemUsage-Long, cpuUsageTotalCoresPercentage-Float]",
            "newValue": "[container-Container, pmemUsage-Long, cpuUsagePercentPerCore-Float]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4712. CPU Usage Metric is not captured properly in YARN-2928. (Naganarasimha G R via Varun Saxena)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "6f6cc647d6e77f6cc4c66e0534f8c73bc1612a1b",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,25 @@\n-  public void reportContainerResourceUsage(Container container, String pId,\n-      Long pmemUsage, Float cpuUsageTotalCoresPercentage) {\n+  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n+      Float cpuUsagePercentPerCore) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n-        cpuUsageTotalCoresPercentage !\u003d\n-            ResourceCalculatorProcessTree.UNAVAILABLE) {\n+        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n-        memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n+        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n-      if (cpuUsageTotalCoresPercentage !\u003d\n-          ResourceCalculatorProcessTree.UNAVAILABLE) {\n+      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n-        cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n-        cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n+        cpuMetric.setId(ContainerMetric.CPU.toString());\n+        cpuMetric.addValue(currentTimeMillis,\n+            Math.round(cpuUsagePercentPerCore));\n         entity.addMetric(cpuMetric);\n       }\n-      dispatcher.getEventHandler().handle(\n-          new TimelinePublishEvent(entity, container.getContainerId()\n+      dispatcher.getEventHandler()\n+          .handle(new TimelinePublishEvent(entity, container.getContainerId()\n               .getApplicationAttemptId().getApplicationId()));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void reportContainerResourceUsage(Container container, Long pmemUsage,\n      Float cpuUsagePercentPerCore) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString());\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsagePercentPerCore !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString());\n        cpuMetric.addValue(currentTimeMillis,\n            Math.round(cpuUsagePercentPerCore));\n        entity.addMetric(cpuMetric);\n      }\n      dispatcher.getEventHandler()\n          .handle(new TimelinePublishEvent(entity, container.getContainerId()\n              .getApplicationAttemptId().getApplicationId()));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
          "extendedDetails": {}
        }
      ]
    },
    "6934b05c7117a12286fb2ba7a47f75e227cacb22": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-4238. createdTime and modifiedTime is not reported while publishing entities to ATSv2. (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n-  public void reportContainerResourceUsage(Container container,\n-      long createdTime, String pId, Long pmemUsage,\n-      Float cpuUsageTotalCoresPercentage) {\n+  public void reportContainerResourceUsage(Container container, String pId,\n+      Long pmemUsage, Float cpuUsageTotalCoresPercentage) {\n     if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n         cpuUsageTotalCoresPercentage !\u003d\n             ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n         memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n       if (cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n         cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n         cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n         entity.addMetric(cpuMetric);\n       }\n       dispatcher.getEventHandler().handle(\n           new TimelinePublishEvent(entity, container.getContainerId()\n               .getApplicationAttemptId().getApplicationId()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container, String pId,\n      Long pmemUsage, Float cpuUsageTotalCoresPercentage) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsageTotalCoresPercentage !\u003d\n            ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n        cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n        entity.addMetric(cpuMetric);\n      }\n      dispatcher.getEventHandler().handle(\n          new TimelinePublishEvent(entity, container.getContainerId()\n              .getApplicationAttemptId().getApplicationId()));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {
        "oldValue": "[container-Container, createdTime-long, pId-String, pmemUsage-Long, cpuUsageTotalCoresPercentage-Float]",
        "newValue": "[container-Container, pId-String, pmemUsage-Long, cpuUsageTotalCoresPercentage-Float]"
      }
    },
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4356. Ensure the timeline service v.2 is disabled cleanly and has no\nimpact when it\u0027s turned off. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "477a30f536277bf95d7181bf1b2fdda52d83bf51",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public void reportContainerResourceUsage(Container container,\n       long createdTime, String pId, Long pmemUsage,\n       Float cpuUsageTotalCoresPercentage) {\n-    if (publishSystemMetrics\n-        \u0026\u0026 (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE || cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE)) {\n+    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n+        cpuUsageTotalCoresPercentage !\u003d\n+            ResourceCalculatorProcessTree.UNAVAILABLE) {\n       ContainerEntity entity \u003d\n           createContainerEntity(container.getContainerId());\n       long currentTimeMillis \u003d System.currentTimeMillis();\n       if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric memoryMetric \u003d new TimelineMetric();\n         memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n         memoryMetric.addValue(currentTimeMillis, pmemUsage);\n         entity.addMetric(memoryMetric);\n       }\n       if (cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n         TimelineMetric cpuMetric \u003d new TimelineMetric();\n         cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n         cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n         entity.addMetric(cpuMetric);\n       }\n       dispatcher.getEventHandler().handle(\n           new TimelinePublishEvent(entity, container.getContainerId()\n               .getApplicationAttemptId().getApplicationId()));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container,\n      long createdTime, String pId, Long pmemUsage,\n      Float cpuUsageTotalCoresPercentage) {\n    if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE ||\n        cpuUsageTotalCoresPercentage !\u003d\n            ResourceCalculatorProcessTree.UNAVAILABLE) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n        cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n        entity.addMetric(cpuMetric);\n      }\n      dispatcher.getEventHandler().handle(\n          new TimelinePublishEvent(entity, container.getContainerId()\n              .getApplicationAttemptId().getApplicationId()));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java",
      "extendedDetails": {}
    },
    "477a30f536277bf95d7181bf1b2fdda52d83bf51": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3045. Implement NM writing container lifecycle events to Timeline Service v2. Contributed by Naganarasimha G R.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "477a30f536277bf95d7181bf1b2fdda52d83bf51",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,25 @@\n+  public void reportContainerResourceUsage(Container container,\n+      long createdTime, String pId, Long pmemUsage,\n+      Float cpuUsageTotalCoresPercentage) {\n+    if (publishSystemMetrics\n+        \u0026\u0026 (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE || cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE)) {\n+      ContainerEntity entity \u003d\n+          createContainerEntity(container.getContainerId());\n+      long currentTimeMillis \u003d System.currentTimeMillis();\n+      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+        TimelineMetric memoryMetric \u003d new TimelineMetric();\n+        memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n+        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n+        entity.addMetric(memoryMetric);\n+      }\n+      if (cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n+        TimelineMetric cpuMetric \u003d new TimelineMetric();\n+        cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n+        cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n+        entity.addMetric(cpuMetric);\n+      }\n+      dispatcher.getEventHandler().handle(\n+          new TimelinePublishEvent(entity, container.getContainerId()\n+              .getApplicationAttemptId().getApplicationId()));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reportContainerResourceUsage(Container container,\n      long createdTime, String pId, Long pmemUsage,\n      Float cpuUsageTotalCoresPercentage) {\n    if (publishSystemMetrics\n        \u0026\u0026 (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE || cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE)) {\n      ContainerEntity entity \u003d\n          createContainerEntity(container.getContainerId());\n      long currentTimeMillis \u003d System.currentTimeMillis();\n      if (pmemUsage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric memoryMetric \u003d new TimelineMetric();\n        memoryMetric.setId(ContainerMetric.MEMORY.toString() + pId);\n        memoryMetric.addValue(currentTimeMillis, pmemUsage);\n        entity.addMetric(memoryMetric);\n      }\n      if (cpuUsageTotalCoresPercentage !\u003d ResourceCalculatorProcessTree.UNAVAILABLE) {\n        TimelineMetric cpuMetric \u003d new TimelineMetric();\n        cpuMetric.setId(ContainerMetric.CPU.toString() + pId);\n        cpuMetric.addValue(currentTimeMillis, cpuUsageTotalCoresPercentage);\n        entity.addMetric(cpuMetric);\n      }\n      dispatcher.getEventHandler().handle(\n          new TimelinePublishEvent(entity, container.getContainerId()\n              .getApplicationAttemptId().getApplicationId()));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/timelineservice/NMTimelinePublisher.java"
    }
  }
}