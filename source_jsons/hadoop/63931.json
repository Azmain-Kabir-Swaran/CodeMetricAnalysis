{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceUtils.java",
  "functionName": "parseResourcesString",
  "functionId": "parseResourcesString___resourcesStr-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
  "functionStartLine": 834,
  "functionEndLine": 890,
  "numCommitsSeen": 42,
  "timeTaken": 3435,
  "changeHistory": [
    "a4bd64e724cbe2ef639c984ddfe2da3baf170a96",
    "8a5361116e6158b28b185ba903ece4aa454344c8",
    "076b795b2e82d7f89cc91e0a8513c7081ee8b930",
    "cadbc8b57f94896aeff2ff5583c9a5ec374c80e2"
  ],
  "changeHistoryShort": {
    "a4bd64e724cbe2ef639c984ddfe2da3baf170a96": "Ymultichange(Ymovefromfile,Ybodychange)",
    "8a5361116e6158b28b185ba903ece4aa454344c8": "Ybodychange",
    "076b795b2e82d7f89cc91e0a8513c7081ee8b930": "Ybodychange",
    "cadbc8b57f94896aeff2ff5583c9a5ec374c80e2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a4bd64e724cbe2ef639c984ddfe2da3baf170a96": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-9116. Capacity Scheduler: implements queue level maximum-allocation inheritance. Contributed by Aihua Xu.\n",
      "commitDate": "24/01/19 1:53 AM",
      "commitName": "a4bd64e724cbe2ef639c984ddfe2da3baf170a96",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-9116. Capacity Scheduler: implements queue level maximum-allocation inheritance. Contributed by Aihua Xu.\n",
          "commitDate": "24/01/19 1:53 AM",
          "commitName": "a4bd64e724cbe2ef639c984ddfe2da3baf170a96",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "24/01/19 1:31 AM",
          "commitNameOld": "c7264459901e59021e180228cea3a6ae334a339f",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n     Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n     String[] pairs \u003d resourcesStr.trim().split(\",\");\n     for (String resource : pairs) {\n       resource \u003d resource.trim();\n       if (!resource.matches(RES_PATTERN)) {\n         throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n-            + \"valid resource type/amount pair. \"\n-            + \"Please provide key\u003damount pairs separated by commas.\");\n+                + \"valid resource type/amount pair. \"\n+                + \"Please provide key\u003damount pairs separated by commas.\");\n       }\n       String[] splits \u003d resource.split(\"\u003d\");\n       String key \u003d splits[0], value \u003d splits[1];\n-      String units \u003d ResourceUtils.getUnits(value);\n+      String units \u003d getUnits(value);\n \n       String valueWithoutUnit \u003d value.substring(0,\n-          value.length()- units.length()).trim();\n+              value.length()- units.length()).trim();\n       long resourceValue \u003d Long.parseLong(valueWithoutUnit);\n \n       // Convert commandline unit to standard YARN unit.\n       if (units.equals(\"M\") || units.equals(\"m\")) {\n         units \u003d \"Mi\";\n       } else if (units.equals(\"G\") || units.equals(\"g\")) {\n         units \u003d \"Gi\";\n       } else if (units.isEmpty()) {\n         // do nothing;\n       } else {\n         throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n       }\n \n       // special handle memory-mb and memory\n       if (key.equals(ResourceInformation.MEMORY_URI)) {\n         if (!units.isEmpty()) {\n           resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n-              resourceValue);\n+                  resourceValue);\n         }\n       }\n \n       if (key.equals(\"memory\")) {\n         key \u003d ResourceInformation.MEMORY_URI;\n         resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n-            resourceValue);\n+                resourceValue);\n       }\n \n       // special handle gpu\n       if (key.equals(\"gpu\")) {\n         key \u003d ResourceInformation.GPU_URI;\n       }\n \n       // special handle fpga\n       if (key.equals(\"fpga\")) {\n         key \u003d ResourceInformation.FPGA_URI;\n       }\n \n       resources.put(key, resourceValue);\n     }\n     return resources;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n    String[] pairs \u003d resourcesStr.trim().split(\",\");\n    for (String resource : pairs) {\n      resource \u003d resource.trim();\n      if (!resource.matches(RES_PATTERN)) {\n        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n                + \"valid resource type/amount pair. \"\n                + \"Please provide key\u003damount pairs separated by commas.\");\n      }\n      String[] splits \u003d resource.split(\"\u003d\");\n      String key \u003d splits[0], value \u003d splits[1];\n      String units \u003d getUnits(value);\n\n      String valueWithoutUnit \u003d value.substring(0,\n              value.length()- units.length()).trim();\n      long resourceValue \u003d Long.parseLong(valueWithoutUnit);\n\n      // Convert commandline unit to standard YARN unit.\n      if (units.equals(\"M\") || units.equals(\"m\")) {\n        units \u003d \"Mi\";\n      } else if (units.equals(\"G\") || units.equals(\"g\")) {\n        units \u003d \"Gi\";\n      } else if (units.isEmpty()) {\n        // do nothing;\n      } else {\n        throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n      }\n\n      // special handle memory-mb and memory\n      if (key.equals(ResourceInformation.MEMORY_URI)) {\n        if (!units.isEmpty()) {\n          resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n                  resourceValue);\n        }\n      }\n\n      if (key.equals(\"memory\")) {\n        key \u003d ResourceInformation.MEMORY_URI;\n        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n                resourceValue);\n      }\n\n      // special handle gpu\n      if (key.equals(\"gpu\")) {\n        key \u003d ResourceInformation.GPU_URI;\n      }\n\n      // special handle fpga\n      if (key.equals(\"fpga\")) {\n        key \u003d ResourceInformation.FPGA_URI;\n      }\n\n      resources.put(key, resourceValue);\n    }\n    return resources;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-submarine/src/main/java/org/apache/hadoop/yarn/submarine/client/cli/CliUtils.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
            "oldMethodName": "parseResourcesString",
            "newMethodName": "parseResourcesString"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9116. Capacity Scheduler: implements queue level maximum-allocation inheritance. Contributed by Aihua Xu.\n",
          "commitDate": "24/01/19 1:53 AM",
          "commitName": "a4bd64e724cbe2ef639c984ddfe2da3baf170a96",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "24/01/19 1:31 AM",
          "commitNameOld": "c7264459901e59021e180228cea3a6ae334a339f",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n     Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n     String[] pairs \u003d resourcesStr.trim().split(\",\");\n     for (String resource : pairs) {\n       resource \u003d resource.trim();\n       if (!resource.matches(RES_PATTERN)) {\n         throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n-            + \"valid resource type/amount pair. \"\n-            + \"Please provide key\u003damount pairs separated by commas.\");\n+                + \"valid resource type/amount pair. \"\n+                + \"Please provide key\u003damount pairs separated by commas.\");\n       }\n       String[] splits \u003d resource.split(\"\u003d\");\n       String key \u003d splits[0], value \u003d splits[1];\n-      String units \u003d ResourceUtils.getUnits(value);\n+      String units \u003d getUnits(value);\n \n       String valueWithoutUnit \u003d value.substring(0,\n-          value.length()- units.length()).trim();\n+              value.length()- units.length()).trim();\n       long resourceValue \u003d Long.parseLong(valueWithoutUnit);\n \n       // Convert commandline unit to standard YARN unit.\n       if (units.equals(\"M\") || units.equals(\"m\")) {\n         units \u003d \"Mi\";\n       } else if (units.equals(\"G\") || units.equals(\"g\")) {\n         units \u003d \"Gi\";\n       } else if (units.isEmpty()) {\n         // do nothing;\n       } else {\n         throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n       }\n \n       // special handle memory-mb and memory\n       if (key.equals(ResourceInformation.MEMORY_URI)) {\n         if (!units.isEmpty()) {\n           resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n-              resourceValue);\n+                  resourceValue);\n         }\n       }\n \n       if (key.equals(\"memory\")) {\n         key \u003d ResourceInformation.MEMORY_URI;\n         resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n-            resourceValue);\n+                resourceValue);\n       }\n \n       // special handle gpu\n       if (key.equals(\"gpu\")) {\n         key \u003d ResourceInformation.GPU_URI;\n       }\n \n       // special handle fpga\n       if (key.equals(\"fpga\")) {\n         key \u003d ResourceInformation.FPGA_URI;\n       }\n \n       resources.put(key, resourceValue);\n     }\n     return resources;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n    String[] pairs \u003d resourcesStr.trim().split(\",\");\n    for (String resource : pairs) {\n      resource \u003d resource.trim();\n      if (!resource.matches(RES_PATTERN)) {\n        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n                + \"valid resource type/amount pair. \"\n                + \"Please provide key\u003damount pairs separated by commas.\");\n      }\n      String[] splits \u003d resource.split(\"\u003d\");\n      String key \u003d splits[0], value \u003d splits[1];\n      String units \u003d getUnits(value);\n\n      String valueWithoutUnit \u003d value.substring(0,\n              value.length()- units.length()).trim();\n      long resourceValue \u003d Long.parseLong(valueWithoutUnit);\n\n      // Convert commandline unit to standard YARN unit.\n      if (units.equals(\"M\") || units.equals(\"m\")) {\n        units \u003d \"Mi\";\n      } else if (units.equals(\"G\") || units.equals(\"g\")) {\n        units \u003d \"Gi\";\n      } else if (units.isEmpty()) {\n        // do nothing;\n      } else {\n        throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n      }\n\n      // special handle memory-mb and memory\n      if (key.equals(ResourceInformation.MEMORY_URI)) {\n        if (!units.isEmpty()) {\n          resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n                  resourceValue);\n        }\n      }\n\n      if (key.equals(\"memory\")) {\n        key \u003d ResourceInformation.MEMORY_URI;\n        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n                resourceValue);\n      }\n\n      // special handle gpu\n      if (key.equals(\"gpu\")) {\n        key \u003d ResourceInformation.GPU_URI;\n      }\n\n      // special handle fpga\n      if (key.equals(\"fpga\")) {\n        key \u003d ResourceInformation.FPGA_URI;\n      }\n\n      resources.put(key, resourceValue);\n    }\n    return resources;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/util/resource/ResourceUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "8a5361116e6158b28b185ba903ece4aa454344c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9078. [Submarine] Clean up the code of CliUtils#parseResourcesString. (Zhankun Tang via wangda)\n\nChange-Id: I21ac5757b6115d55ec3157ba25db1b65bc85a37b\n",
      "commitDate": "12/12/18 11:42 AM",
      "commitName": "8a5361116e6158b28b185ba903ece4aa454344c8",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "19/11/18 8:55 AM",
      "commitNameOld": "8b2381441558cd49b4c940b0760c8accbb2a5567",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 23.12,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,57 @@\n   private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n     Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n-\n-    // Ignore the grouping \"[]\"\n-    if (resourcesStr.startsWith(\"[\")) {\n-      resourcesStr \u003d resourcesStr.substring(1);\n-    }\n-    if (resourcesStr.endsWith(\"]\")) {\n-      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length() - 1);\n-    }\n-\n-    for (String resource : resourcesStr.trim().split(\",\")) {\n+    String[] pairs \u003d resourcesStr.trim().split(\",\");\n+    for (String resource : pairs) {\n       resource \u003d resource.trim();\n       if (!resource.matches(RES_PATTERN)) {\n         throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n             + \"valid resource type/amount pair. \"\n             + \"Please provide key\u003damount pairs separated by commas.\");\n       }\n       String[] splits \u003d resource.split(\"\u003d\");\n       String key \u003d splits[0], value \u003d splits[1];\n       String units \u003d ResourceUtils.getUnits(value);\n \n-      String valueWithoutUnit \u003d value.substring(0, value.length() - units.length()).trim();\n-      Long resourceValue \u003d Long.valueOf(valueWithoutUnit);\n+      String valueWithoutUnit \u003d value.substring(0,\n+          value.length()- units.length()).trim();\n+      long resourceValue \u003d Long.parseLong(valueWithoutUnit);\n \n       // Convert commandline unit to standard YARN unit.\n       if (units.equals(\"M\") || units.equals(\"m\")) {\n         units \u003d \"Mi\";\n       } else if (units.equals(\"G\") || units.equals(\"g\")) {\n         units \u003d \"Gi\";\n       } else if (units.isEmpty()) {\n         // do nothing;\n-      } else{\n+      } else {\n         throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n       }\n \n       // special handle memory-mb and memory\n       if (key.equals(ResourceInformation.MEMORY_URI)) {\n         if (!units.isEmpty()) {\n           resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n               resourceValue);\n         }\n       }\n \n       if (key.equals(\"memory\")) {\n         key \u003d ResourceInformation.MEMORY_URI;\n-        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n+        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n+            resourceValue);\n       }\n \n       // special handle gpu\n       if (key.equals(\"gpu\")) {\n         key \u003d ResourceInformation.GPU_URI;\n       }\n \n       // special handle fpga\n       if (key.equals(\"fpga\")) {\n         key \u003d ResourceInformation.FPGA_URI;\n       }\n \n       resources.put(key, resourceValue);\n     }\n     return resources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n    String[] pairs \u003d resourcesStr.trim().split(\",\");\n    for (String resource : pairs) {\n      resource \u003d resource.trim();\n      if (!resource.matches(RES_PATTERN)) {\n        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n            + \"valid resource type/amount pair. \"\n            + \"Please provide key\u003damount pairs separated by commas.\");\n      }\n      String[] splits \u003d resource.split(\"\u003d\");\n      String key \u003d splits[0], value \u003d splits[1];\n      String units \u003d ResourceUtils.getUnits(value);\n\n      String valueWithoutUnit \u003d value.substring(0,\n          value.length()- units.length()).trim();\n      long resourceValue \u003d Long.parseLong(valueWithoutUnit);\n\n      // Convert commandline unit to standard YARN unit.\n      if (units.equals(\"M\") || units.equals(\"m\")) {\n        units \u003d \"Mi\";\n      } else if (units.equals(\"G\") || units.equals(\"g\")) {\n        units \u003d \"Gi\";\n      } else if (units.isEmpty()) {\n        // do nothing;\n      } else {\n        throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n      }\n\n      // special handle memory-mb and memory\n      if (key.equals(ResourceInformation.MEMORY_URI)) {\n        if (!units.isEmpty()) {\n          resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n              resourceValue);\n        }\n      }\n\n      if (key.equals(\"memory\")) {\n        key \u003d ResourceInformation.MEMORY_URI;\n        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n            resourceValue);\n      }\n\n      // special handle gpu\n      if (key.equals(\"gpu\")) {\n        key \u003d ResourceInformation.GPU_URI;\n      }\n\n      // special handle fpga\n      if (key.equals(\"fpga\")) {\n        key \u003d ResourceInformation.FPGA_URI;\n      }\n\n      resources.put(key, resourceValue);\n    }\n    return resources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-submarine/src/main/java/org/apache/hadoop/yarn/submarine/client/cli/CliUtils.java",
      "extendedDetails": {}
    },
    "076b795b2e82d7f89cc91e0a8513c7081ee8b930": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8918. [Submarine] Correct method usage of str.subString in CliUtils. (Zhankun Tang via wangda)\n\nChange-Id: Id1f11dbab3aa838dee3a0ec8b8fd5dc32f5dd946\n",
      "commitDate": "13/11/18 11:24 AM",
      "commitName": "076b795b2e82d7f89cc91e0a8513c7081ee8b930",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/11/18 3:06 PM",
      "commitNameOld": "e269c3fb5a938e4359232628175569dbbd1a12c1",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 0.85,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n     Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n \n     // Ignore the grouping \"[]\"\n     if (resourcesStr.startsWith(\"[\")) {\n       resourcesStr \u003d resourcesStr.substring(1);\n     }\n     if (resourcesStr.endsWith(\"]\")) {\n-      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length());\n+      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length() - 1);\n     }\n \n     for (String resource : resourcesStr.trim().split(\",\")) {\n       resource \u003d resource.trim();\n       if (!resource.matches(RES_PATTERN)) {\n         throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n             + \"valid resource type/amount pair. \"\n             + \"Please provide key\u003damount pairs separated by commas.\");\n       }\n       String[] splits \u003d resource.split(\"\u003d\");\n       String key \u003d splits[0], value \u003d splits[1];\n       String units \u003d ResourceUtils.getUnits(value);\n \n       String valueWithoutUnit \u003d value.substring(0, value.length() - units.length()).trim();\n       Long resourceValue \u003d Long.valueOf(valueWithoutUnit);\n \n       // Convert commandline unit to standard YARN unit.\n       if (units.equals(\"M\") || units.equals(\"m\")) {\n         units \u003d \"Mi\";\n       } else if (units.equals(\"G\") || units.equals(\"g\")) {\n         units \u003d \"Gi\";\n       } else if (units.isEmpty()) {\n         // do nothing;\n       } else{\n         throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n       }\n \n       // special handle memory-mb and memory\n       if (key.equals(ResourceInformation.MEMORY_URI)) {\n         if (!units.isEmpty()) {\n           resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n               resourceValue);\n         }\n       }\n \n       if (key.equals(\"memory\")) {\n         key \u003d ResourceInformation.MEMORY_URI;\n         resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n       }\n \n       // special handle gpu\n       if (key.equals(\"gpu\")) {\n         key \u003d ResourceInformation.GPU_URI;\n       }\n \n       // special handle fpga\n       if (key.equals(\"fpga\")) {\n         key \u003d ResourceInformation.FPGA_URI;\n       }\n \n       resources.put(key, resourceValue);\n     }\n     return resources;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n\n    // Ignore the grouping \"[]\"\n    if (resourcesStr.startsWith(\"[\")) {\n      resourcesStr \u003d resourcesStr.substring(1);\n    }\n    if (resourcesStr.endsWith(\"]\")) {\n      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length() - 1);\n    }\n\n    for (String resource : resourcesStr.trim().split(\",\")) {\n      resource \u003d resource.trim();\n      if (!resource.matches(RES_PATTERN)) {\n        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n            + \"valid resource type/amount pair. \"\n            + \"Please provide key\u003damount pairs separated by commas.\");\n      }\n      String[] splits \u003d resource.split(\"\u003d\");\n      String key \u003d splits[0], value \u003d splits[1];\n      String units \u003d ResourceUtils.getUnits(value);\n\n      String valueWithoutUnit \u003d value.substring(0, value.length() - units.length()).trim();\n      Long resourceValue \u003d Long.valueOf(valueWithoutUnit);\n\n      // Convert commandline unit to standard YARN unit.\n      if (units.equals(\"M\") || units.equals(\"m\")) {\n        units \u003d \"Mi\";\n      } else if (units.equals(\"G\") || units.equals(\"g\")) {\n        units \u003d \"Gi\";\n      } else if (units.isEmpty()) {\n        // do nothing;\n      } else{\n        throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n      }\n\n      // special handle memory-mb and memory\n      if (key.equals(ResourceInformation.MEMORY_URI)) {\n        if (!units.isEmpty()) {\n          resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n              resourceValue);\n        }\n      }\n\n      if (key.equals(\"memory\")) {\n        key \u003d ResourceInformation.MEMORY_URI;\n        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n      }\n\n      // special handle gpu\n      if (key.equals(\"gpu\")) {\n        key \u003d ResourceInformation.GPU_URI;\n      }\n\n      // special handle fpga\n      if (key.equals(\"fpga\")) {\n        key \u003d ResourceInformation.FPGA_URI;\n      }\n\n      resources.put(key, resourceValue);\n    }\n    return resources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-submarine/src/main/java/org/apache/hadoop/yarn/submarine/client/cli/CliUtils.java",
      "extendedDetails": {}
    },
    "cadbc8b57f94896aeff2ff5583c9a5ec374c80e2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8561. [Submarine] Initial implementation: Training job submission and job history retrieval. Contributed by Wangda Tan.\n",
      "commitDate": "13/08/18 1:52 AM",
      "commitName": "cadbc8b57f94896aeff2ff5583c9a5ec374c80e2",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,63 @@\n+  private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n+    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n+\n+    // Ignore the grouping \"[]\"\n+    if (resourcesStr.startsWith(\"[\")) {\n+      resourcesStr \u003d resourcesStr.substring(1);\n+    }\n+    if (resourcesStr.endsWith(\"]\")) {\n+      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length());\n+    }\n+\n+    for (String resource : resourcesStr.trim().split(\",\")) {\n+      resource \u003d resource.trim();\n+      if (!resource.matches(RES_PATTERN)) {\n+        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n+            + \"valid resource type/amount pair. \"\n+            + \"Please provide key\u003damount pairs separated by commas.\");\n+      }\n+      String[] splits \u003d resource.split(\"\u003d\");\n+      String key \u003d splits[0], value \u003d splits[1];\n+      String units \u003d ResourceUtils.getUnits(value);\n+\n+      String valueWithoutUnit \u003d value.substring(0, value.length() - units.length()).trim();\n+      Long resourceValue \u003d Long.valueOf(valueWithoutUnit);\n+\n+      // Convert commandline unit to standard YARN unit.\n+      if (units.equals(\"M\") || units.equals(\"m\")) {\n+        units \u003d \"Mi\";\n+      } else if (units.equals(\"G\") || units.equals(\"g\")) {\n+        units \u003d \"Gi\";\n+      } else if (units.isEmpty()) {\n+        // do nothing;\n+      } else{\n+        throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n+      }\n+\n+      // special handle memory-mb and memory\n+      if (key.equals(ResourceInformation.MEMORY_URI)) {\n+        if (!units.isEmpty()) {\n+          resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n+              resourceValue);\n+        }\n+      }\n+\n+      if (key.equals(\"memory\")) {\n+        key \u003d ResourceInformation.MEMORY_URI;\n+        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n+      }\n+\n+      // special handle gpu\n+      if (key.equals(\"gpu\")) {\n+        key \u003d ResourceInformation.GPU_URI;\n+      }\n+\n+      // special handle fpga\n+      if (key.equals(\"fpga\")) {\n+        key \u003d ResourceInformation.FPGA_URI;\n+      }\n+\n+      resources.put(key, resourceValue);\n+    }\n+    return resources;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static Map\u003cString, Long\u003e parseResourcesString(String resourcesStr) {\n    Map\u003cString, Long\u003e resources \u003d new HashMap\u003c\u003e();\n\n    // Ignore the grouping \"[]\"\n    if (resourcesStr.startsWith(\"[\")) {\n      resourcesStr \u003d resourcesStr.substring(1);\n    }\n    if (resourcesStr.endsWith(\"]\")) {\n      resourcesStr \u003d resourcesStr.substring(0, resourcesStr.length());\n    }\n\n    for (String resource : resourcesStr.trim().split(\",\")) {\n      resource \u003d resource.trim();\n      if (!resource.matches(RES_PATTERN)) {\n        throw new IllegalArgumentException(\"\\\"\" + resource + \"\\\" is not a \"\n            + \"valid resource type/amount pair. \"\n            + \"Please provide key\u003damount pairs separated by commas.\");\n      }\n      String[] splits \u003d resource.split(\"\u003d\");\n      String key \u003d splits[0], value \u003d splits[1];\n      String units \u003d ResourceUtils.getUnits(value);\n\n      String valueWithoutUnit \u003d value.substring(0, value.length() - units.length()).trim();\n      Long resourceValue \u003d Long.valueOf(valueWithoutUnit);\n\n      // Convert commandline unit to standard YARN unit.\n      if (units.equals(\"M\") || units.equals(\"m\")) {\n        units \u003d \"Mi\";\n      } else if (units.equals(\"G\") || units.equals(\"g\")) {\n        units \u003d \"Gi\";\n      } else if (units.isEmpty()) {\n        // do nothing;\n      } else{\n        throw new IllegalArgumentException(\"Acceptable units are M/G or empty\");\n      }\n\n      // special handle memory-mb and memory\n      if (key.equals(ResourceInformation.MEMORY_URI)) {\n        if (!units.isEmpty()) {\n          resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\",\n              resourceValue);\n        }\n      }\n\n      if (key.equals(\"memory\")) {\n        key \u003d ResourceInformation.MEMORY_URI;\n        resourceValue \u003d UnitsConversionUtil.convert(units, \"Mi\", resourceValue);\n      }\n\n      // special handle gpu\n      if (key.equals(\"gpu\")) {\n        key \u003d ResourceInformation.GPU_URI;\n      }\n\n      // special handle fpga\n      if (key.equals(\"fpga\")) {\n        key \u003d ResourceInformation.FPGA_URI;\n      }\n\n      resources.put(key, resourceValue);\n    }\n    return resources;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-submarine/src/main/java/org/apache/hadoop/yarn/submarine/client/cli/CliUtils.java"
    }
  }
}