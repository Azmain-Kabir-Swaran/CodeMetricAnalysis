{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CBZip2InputStream.java",
  "functionName": "initBlock",
  "functionId": "initBlock",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
  "functionStartLine": 497,
  "functionEndLine": 556,
  "numCommitsSeen": 10,
  "timeTaken": 986,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "86724941c5144a06113090d40c50c289e7ebd290",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "86724941c5144a06113090d40c50c289e7ebd290": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initBlock() throws IOException {\n    if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n      // this.checkBlockIntegrity();\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n      return;\n    }\n\n    char magic0 \u003d bsGetUByte();\n    char magic1 \u003d bsGetUByte();\n    char magic2 \u003d bsGetUByte();\n    char magic3 \u003d bsGetUByte();\n    char magic4 \u003d bsGetUByte();\n    char magic5 \u003d bsGetUByte();\n\n    if (magic0 \u003d\u003d 0x17 \u0026\u0026 magic1 \u003d\u003d 0x72 \u0026\u0026 magic2 \u003d\u003d 0x45\n        \u0026\u0026 magic3 \u003d\u003d 0x38 \u0026\u0026 magic4 \u003d\u003d 0x50 \u0026\u0026 magic5 \u003d\u003d 0x90) {\n      complete(); // end of file\n    } else if (magic0 !\u003d 0x31 || // \u00271\u0027\n        magic1 !\u003d 0x41 || // \u0027)\u0027\n        magic2 !\u003d 0x59 || // \u0027Y\u0027\n        magic3 !\u003d 0x26 || // \u0027\u0026\u0027\n        magic4 !\u003d 0x53 || // \u0027S\u0027\n        magic5 !\u003d 0x59 // \u0027Y\u0027\n    ) {\n      this.currentState \u003d STATE.EOF;\n      throw new IOException(\"bad block header\");\n    } else {\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initBlock() throws IOException {\n    if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n      // this.checkBlockIntegrity();\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n      return;\n    }\n\n    char magic0 \u003d bsGetUByte();\n    char magic1 \u003d bsGetUByte();\n    char magic2 \u003d bsGetUByte();\n    char magic3 \u003d bsGetUByte();\n    char magic4 \u003d bsGetUByte();\n    char magic5 \u003d bsGetUByte();\n\n    if (magic0 \u003d\u003d 0x17 \u0026\u0026 magic1 \u003d\u003d 0x72 \u0026\u0026 magic2 \u003d\u003d 0x45\n        \u0026\u0026 magic3 \u003d\u003d 0x38 \u0026\u0026 magic4 \u003d\u003d 0x50 \u0026\u0026 magic5 \u003d\u003d 0x90) {\n      complete(); // end of file\n    } else if (magic0 !\u003d 0x31 || // \u00271\u0027\n        magic1 !\u003d 0x41 || // \u0027)\u0027\n        magic2 !\u003d 0x59 || // \u0027Y\u0027\n        magic3 !\u003d 0x26 || // \u0027\u0026\u0027\n        magic4 !\u003d 0x53 || // \u0027S\u0027\n        magic5 !\u003d 0x59 // \u0027Y\u0027\n    ) {\n      this.currentState \u003d STATE.EOF;\n      throw new IOException(\"bad block header\");\n    } else {\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void initBlock() throws IOException {\n    if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n      // this.checkBlockIntegrity();\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n      return;\n    }\n\n    char magic0 \u003d bsGetUByte();\n    char magic1 \u003d bsGetUByte();\n    char magic2 \u003d bsGetUByte();\n    char magic3 \u003d bsGetUByte();\n    char magic4 \u003d bsGetUByte();\n    char magic5 \u003d bsGetUByte();\n\n    if (magic0 \u003d\u003d 0x17 \u0026\u0026 magic1 \u003d\u003d 0x72 \u0026\u0026 magic2 \u003d\u003d 0x45\n        \u0026\u0026 magic3 \u003d\u003d 0x38 \u0026\u0026 magic4 \u003d\u003d 0x50 \u0026\u0026 magic5 \u003d\u003d 0x90) {\n      complete(); // end of file\n    } else if (magic0 !\u003d 0x31 || // \u00271\u0027\n        magic1 !\u003d 0x41 || // \u0027)\u0027\n        magic2 !\u003d 0x59 || // \u0027Y\u0027\n        magic3 !\u003d 0x26 || // \u0027\u0026\u0027\n        magic4 !\u003d 0x53 || // \u0027S\u0027\n        magic5 !\u003d 0x59 // \u0027Y\u0027\n    ) {\n      this.currentState \u003d STATE.EOF;\n      throw new IOException(\"bad block header\");\n    } else {\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
      }
    },
    "86724941c5144a06113090d40c50c289e7ebd290": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-4012. Provide splitting support for bzip2 compressed files. Contributed by Abdul Qadeer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@813581 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/09 1:51 PM",
      "commitName": "86724941c5144a06113090d40c50c289e7ebd290",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 114.69,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,60 @@\n   private void initBlock() throws IOException {\n+    if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n+      // this.checkBlockIntegrity();\n+      this.storedBlockCRC \u003d bsGetInt();\n+      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n+\n+      /**\n+      * Allocate data here instead in constructor, so we do not allocate\n+      * it if the input file is empty.\n+      */\n+      if (this.data \u003d\u003d null) {\n+        this.data \u003d new Data(this.blockSize100k);\n+      }\n+\n+      // currBlockNo++;\n+      getAndMoveToFrontDecode();\n+\n+      this.crc.initialiseCRC();\n+      this.currentState \u003d STATE.START_BLOCK_STATE;\n+      return;\n+    }\n+\n     char magic0 \u003d bsGetUByte();\n     char magic1 \u003d bsGetUByte();\n     char magic2 \u003d bsGetUByte();\n     char magic3 \u003d bsGetUByte();\n     char magic4 \u003d bsGetUByte();\n     char magic5 \u003d bsGetUByte();\n \n     if (magic0 \u003d\u003d 0x17 \u0026\u0026 magic1 \u003d\u003d 0x72 \u0026\u0026 magic2 \u003d\u003d 0x45\n         \u0026\u0026 magic3 \u003d\u003d 0x38 \u0026\u0026 magic4 \u003d\u003d 0x50 \u0026\u0026 magic5 \u003d\u003d 0x90) {\n       complete(); // end of file\n     } else if (magic0 !\u003d 0x31 || // \u00271\u0027\n         magic1 !\u003d 0x41 || // \u0027)\u0027\n         magic2 !\u003d 0x59 || // \u0027Y\u0027\n         magic3 !\u003d 0x26 || // \u0027\u0026\u0027\n         magic4 !\u003d 0x53 || // \u0027S\u0027\n         magic5 !\u003d 0x59 // \u0027Y\u0027\n     ) {\n-      this.currentState \u003d EOF;\n+      this.currentState \u003d STATE.EOF;\n       throw new IOException(\"bad block header\");\n     } else {\n       this.storedBlockCRC \u003d bsGetInt();\n       this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n \n       /**\n       * Allocate data here instead in constructor, so we do not allocate\n       * it if the input file is empty.\n       */\n       if (this.data \u003d\u003d null) {\n         this.data \u003d new Data(this.blockSize100k);\n       }\n \n       // currBlockNo++;\n       getAndMoveToFrontDecode();\n \n       this.crc.initialiseCRC();\n-      this.currentState \u003d START_BLOCK_STATE;\n+      this.currentState \u003d STATE.START_BLOCK_STATE;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initBlock() throws IOException {\n    if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n      // this.checkBlockIntegrity();\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n      return;\n    }\n\n    char magic0 \u003d bsGetUByte();\n    char magic1 \u003d bsGetUByte();\n    char magic2 \u003d bsGetUByte();\n    char magic3 \u003d bsGetUByte();\n    char magic4 \u003d bsGetUByte();\n    char magic5 \u003d bsGetUByte();\n\n    if (magic0 \u003d\u003d 0x17 \u0026\u0026 magic1 \u003d\u003d 0x72 \u0026\u0026 magic2 \u003d\u003d 0x45\n        \u0026\u0026 magic3 \u003d\u003d 0x38 \u0026\u0026 magic4 \u003d\u003d 0x50 \u0026\u0026 magic5 \u003d\u003d 0x90) {\n      complete(); // end of file\n    } else if (magic0 !\u003d 0x31 || // \u00271\u0027\n        magic1 !\u003d 0x41 || // \u0027)\u0027\n        magic2 !\u003d 0x59 || // \u0027Y\u0027\n        magic3 !\u003d 0x26 || // \u0027\u0026\u0027\n        magic4 !\u003d 0x53 || // \u0027S\u0027\n        magic5 !\u003d 0x59 // \u0027Y\u0027\n    ) {\n      this.currentState \u003d STATE.EOF;\n      throw new IOException(\"bad block header\");\n    } else {\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d STATE.START_BLOCK_STATE;\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,39 @@\n+  private void initBlock() throws IOException {\n+    char magic0 \u003d bsGetUByte();\n+    char magic1 \u003d bsGetUByte();\n+    char magic2 \u003d bsGetUByte();\n+    char magic3 \u003d bsGetUByte();\n+    char magic4 \u003d bsGetUByte();\n+    char magic5 \u003d bsGetUByte();\n+\n+    if (magic0 \u003d\u003d 0x17 \u0026\u0026 magic1 \u003d\u003d 0x72 \u0026\u0026 magic2 \u003d\u003d 0x45\n+        \u0026\u0026 magic3 \u003d\u003d 0x38 \u0026\u0026 magic4 \u003d\u003d 0x50 \u0026\u0026 magic5 \u003d\u003d 0x90) {\n+      complete(); // end of file\n+    } else if (magic0 !\u003d 0x31 || // \u00271\u0027\n+        magic1 !\u003d 0x41 || // \u0027)\u0027\n+        magic2 !\u003d 0x59 || // \u0027Y\u0027\n+        magic3 !\u003d 0x26 || // \u0027\u0026\u0027\n+        magic4 !\u003d 0x53 || // \u0027S\u0027\n+        magic5 !\u003d 0x59 // \u0027Y\u0027\n+    ) {\n+      this.currentState \u003d EOF;\n+      throw new IOException(\"bad block header\");\n+    } else {\n+      this.storedBlockCRC \u003d bsGetInt();\n+      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n+\n+      /**\n+      * Allocate data here instead in constructor, so we do not allocate\n+      * it if the input file is empty.\n+      */\n+      if (this.data \u003d\u003d null) {\n+        this.data \u003d new Data(this.blockSize100k);\n+      }\n+\n+      // currBlockNo++;\n+      getAndMoveToFrontDecode();\n+\n+      this.crc.initialiseCRC();\n+      this.currentState \u003d START_BLOCK_STATE;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initBlock() throws IOException {\n    char magic0 \u003d bsGetUByte();\n    char magic1 \u003d bsGetUByte();\n    char magic2 \u003d bsGetUByte();\n    char magic3 \u003d bsGetUByte();\n    char magic4 \u003d bsGetUByte();\n    char magic5 \u003d bsGetUByte();\n\n    if (magic0 \u003d\u003d 0x17 \u0026\u0026 magic1 \u003d\u003d 0x72 \u0026\u0026 magic2 \u003d\u003d 0x45\n        \u0026\u0026 magic3 \u003d\u003d 0x38 \u0026\u0026 magic4 \u003d\u003d 0x50 \u0026\u0026 magic5 \u003d\u003d 0x90) {\n      complete(); // end of file\n    } else if (magic0 !\u003d 0x31 || // \u00271\u0027\n        magic1 !\u003d 0x41 || // \u0027)\u0027\n        magic2 !\u003d 0x59 || // \u0027Y\u0027\n        magic3 !\u003d 0x26 || // \u0027\u0026\u0027\n        magic4 !\u003d 0x53 || // \u0027S\u0027\n        magic5 !\u003d 0x59 // \u0027Y\u0027\n    ) {\n      this.currentState \u003d EOF;\n      throw new IOException(\"bad block header\");\n    } else {\n      this.storedBlockCRC \u003d bsGetInt();\n      this.blockRandomised \u003d bsR(1) \u003d\u003d 1;\n\n      /**\n      * Allocate data here instead in constructor, so we do not allocate\n      * it if the input file is empty.\n      */\n      if (this.data \u003d\u003d null) {\n        this.data \u003d new Data(this.blockSize100k);\n      }\n\n      // currBlockNo++;\n      getAndMoveToFrontDecode();\n\n      this.crc.initialiseCRC();\n      this.currentState \u003d START_BLOCK_STATE;\n    }\n  }",
      "path": "src/java/org/apache/hadoop/io/compress/bzip2/CBZip2InputStream.java"
    }
  }
}