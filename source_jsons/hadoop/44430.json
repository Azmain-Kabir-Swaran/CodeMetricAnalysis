{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Client.java",
  "functionName": "addToLocalResources",
  "functionId": "addToLocalResources___fs-FileSystem__fileSrcPath-String__fileDstPath-String__appId-String__localResources-Map__String,LocalResource____resources-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
  "functionStartLine": 1189,
  "functionEndLine": 1215,
  "numCommitsSeen": 102,
  "timeTaken": 2687,
  "changeHistory": [
    "fb55e5201e5b2ff40e1b757a9c5bf23c5d8aec93",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "d6a6e982a84eb9545cbac51ee6277ea2837f88de",
    "c4bdddeab56287c8a8ae314fac238cbbc6c1bcf4"
  ],
  "changeHistoryShort": {
    "fb55e5201e5b2ff40e1b757a9c5bf23c5d8aec93": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "d6a6e982a84eb9545cbac51ee6277ea2837f88de": "Yparameterchange",
    "c4bdddeab56287c8a8ae314fac238cbbc6c1bcf4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "fb55e5201e5b2ff40e1b757a9c5bf23c5d8aec93": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9008. Extend YARN distributed shell with file localization feature. (Contributed by Peter Bacsko)\n",
      "commitDate": "11/12/18 2:13 PM",
      "commitName": "fb55e5201e5b2ff40e1b757a9c5bf23c5d8aec93",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 90.49,
      "commitsBetweenForRepo": 785,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void addToLocalResources(FileSystem fs, String fileSrcPath,\n       String fileDstPath, String appId, Map\u003cString, LocalResource\u003e localResources,\n       String resources) throws IOException {\n     String suffix \u003d\n-        appName + \"/\" + appId + \"/\" + fileDstPath;\n+        ApplicationMaster.getRelativePath(appName, appId, fileDstPath);\n     Path dst \u003d\n         new Path(fs.getHomeDirectory(), suffix);\n     if (fileSrcPath \u003d\u003d null) {\n       FSDataOutputStream ostream \u003d null;\n       try {\n         ostream \u003d FileSystem\n             .create(fs, dst, new FsPermission((short) 0710));\n         ostream.writeUTF(resources);\n       } finally {\n         IOUtils.closeQuietly(ostream);\n       }\n     } else {\n       fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n     }\n     FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n     LocalResource scRsrc \u003d\n         LocalResource.newInstance(\n             URL.fromURI(dst.toUri()),\n             LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n             scFileStatus.getLen(), scFileStatus.getModificationTime());\n     localResources.put(fileDstPath, scRsrc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToLocalResources(FileSystem fs, String fileSrcPath,\n      String fileDstPath, String appId, Map\u003cString, LocalResource\u003e localResources,\n      String resources) throws IOException {\n    String suffix \u003d\n        ApplicationMaster.getRelativePath(appName, appId, fileDstPath);\n    Path dst \u003d\n        new Path(fs.getHomeDirectory(), suffix);\n    if (fileSrcPath \u003d\u003d null) {\n      FSDataOutputStream ostream \u003d null;\n      try {\n        ostream \u003d FileSystem\n            .create(fs, dst, new FsPermission((short) 0710));\n        ostream.writeUTF(resources);\n      } finally {\n        IOUtils.closeQuietly(ostream);\n      }\n    } else {\n      fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n    }\n    FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n    LocalResource scRsrc \u003d\n        LocalResource.newInstance(\n            URL.fromURI(dst.toUri()),\n            LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n            scFileStatus.getLen(), scFileStatus.getModificationTime());\n    localResources.put(fileDstPath, scRsrc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 16.26,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void addToLocalResources(FileSystem fs, String fileSrcPath,\n       String fileDstPath, String appId, Map\u003cString, LocalResource\u003e localResources,\n       String resources) throws IOException {\n     String suffix \u003d\n         appName + \"/\" + appId + \"/\" + fileDstPath;\n     Path dst \u003d\n         new Path(fs.getHomeDirectory(), suffix);\n     if (fileSrcPath \u003d\u003d null) {\n       FSDataOutputStream ostream \u003d null;\n       try {\n         ostream \u003d FileSystem\n             .create(fs, dst, new FsPermission((short) 0710));\n         ostream.writeUTF(resources);\n       } finally {\n         IOUtils.closeQuietly(ostream);\n       }\n     } else {\n       fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n     }\n     FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n     LocalResource scRsrc \u003d\n         LocalResource.newInstance(\n-            ConverterUtils.getYarnUrlFromURI(dst.toUri()),\n+            URL.fromURI(dst.toUri()),\n             LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n             scFileStatus.getLen(), scFileStatus.getModificationTime());\n     localResources.put(fileDstPath, scRsrc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToLocalResources(FileSystem fs, String fileSrcPath,\n      String fileDstPath, String appId, Map\u003cString, LocalResource\u003e localResources,\n      String resources) throws IOException {\n    String suffix \u003d\n        appName + \"/\" + appId + \"/\" + fileDstPath;\n    Path dst \u003d\n        new Path(fs.getHomeDirectory(), suffix);\n    if (fileSrcPath \u003d\u003d null) {\n      FSDataOutputStream ostream \u003d null;\n      try {\n        ostream \u003d FileSystem\n            .create(fs, dst, new FsPermission((short) 0710));\n        ostream.writeUTF(resources);\n      } finally {\n        IOUtils.closeQuietly(ostream);\n      }\n    } else {\n      fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n    }\n    FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n    LocalResource scRsrc \u003d\n        LocalResource.newInstance(\n            URL.fromURI(dst.toUri()),\n            LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n            scFileStatus.getLen(), scFileStatus.getModificationTime());\n    localResources.put(fileDstPath, scRsrc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {}
    },
    "d6a6e982a84eb9545cbac51ee6277ea2837f88de": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-1926. Changed DistributedShell to use appIDs as unique identifiers for HDFS paths and thus avoid test failures on Windows. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586562 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 9:06 PM",
      "commitName": "d6a6e982a84eb9545cbac51ee6277ea2837f88de",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/03/14 11:32 AM",
      "commitNameOld": "96e0ca2d272dc7ecd7f7f0e65a0c596fcc063bcb",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 25.4,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   private void addToLocalResources(FileSystem fs, String fileSrcPath,\n-      String fileDstPath, int appId, Map\u003cString, LocalResource\u003e localResources,\n+      String fileDstPath, String appId, Map\u003cString, LocalResource\u003e localResources,\n       String resources) throws IOException {\n     String suffix \u003d\n         appName + \"/\" + appId + \"/\" + fileDstPath;\n     Path dst \u003d\n         new Path(fs.getHomeDirectory(), suffix);\n     if (fileSrcPath \u003d\u003d null) {\n       FSDataOutputStream ostream \u003d null;\n       try {\n         ostream \u003d FileSystem\n             .create(fs, dst, new FsPermission((short) 0710));\n         ostream.writeUTF(resources);\n       } finally {\n         IOUtils.closeQuietly(ostream);\n       }\n     } else {\n       fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n     }\n     FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n     LocalResource scRsrc \u003d\n         LocalResource.newInstance(\n             ConverterUtils.getYarnUrlFromURI(dst.toUri()),\n             LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n             scFileStatus.getLen(), scFileStatus.getModificationTime());\n     localResources.put(fileDstPath, scRsrc);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToLocalResources(FileSystem fs, String fileSrcPath,\n      String fileDstPath, String appId, Map\u003cString, LocalResource\u003e localResources,\n      String resources) throws IOException {\n    String suffix \u003d\n        appName + \"/\" + appId + \"/\" + fileDstPath;\n    Path dst \u003d\n        new Path(fs.getHomeDirectory(), suffix);\n    if (fileSrcPath \u003d\u003d null) {\n      FSDataOutputStream ostream \u003d null;\n      try {\n        ostream \u003d FileSystem\n            .create(fs, dst, new FsPermission((short) 0710));\n        ostream.writeUTF(resources);\n      } finally {\n        IOUtils.closeQuietly(ostream);\n      }\n    } else {\n      fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n    }\n    FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n    LocalResource scRsrc \u003d\n        LocalResource.newInstance(\n            ConverterUtils.getYarnUrlFromURI(dst.toUri()),\n            LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n            scFileStatus.getLen(), scFileStatus.getModificationTime());\n    localResources.put(fileDstPath, scRsrc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java",
      "extendedDetails": {
        "oldValue": "[fs-FileSystem, fileSrcPath-String, fileDstPath-String, appId-int, localResources-Map\u003cString,LocalResource\u003e, resources-String]",
        "newValue": "[fs-FileSystem, fileSrcPath-String, fileDstPath-String, appId-String, localResources-Map\u003cString,LocalResource\u003e, resources-String]"
      }
    },
    "c4bdddeab56287c8a8ae314fac238cbbc6c1bcf4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1314. Fixed DistributedShell to not fail with multiple arguments for a shell command separated by spaces. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1545486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/11/13 5:10 PM",
      "commitName": "c4bdddeab56287c8a8ae314fac238cbbc6c1bcf4",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,27 @@\n+  private void addToLocalResources(FileSystem fs, String fileSrcPath,\n+      String fileDstPath, int appId, Map\u003cString, LocalResource\u003e localResources,\n+      String resources) throws IOException {\n+    String suffix \u003d\n+        appName + \"/\" + appId + \"/\" + fileDstPath;\n+    Path dst \u003d\n+        new Path(fs.getHomeDirectory(), suffix);\n+    if (fileSrcPath \u003d\u003d null) {\n+      FSDataOutputStream ostream \u003d null;\n+      try {\n+        ostream \u003d FileSystem\n+            .create(fs, dst, new FsPermission((short) 0710));\n+        ostream.writeUTF(resources);\n+      } finally {\n+        IOUtils.closeQuietly(ostream);\n+      }\n+    } else {\n+      fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n+    }\n+    FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n+    LocalResource scRsrc \u003d\n+        LocalResource.newInstance(\n+            ConverterUtils.getYarnUrlFromURI(dst.toUri()),\n+            LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n+            scFileStatus.getLen(), scFileStatus.getModificationTime());\n+    localResources.put(fileDstPath, scRsrc);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addToLocalResources(FileSystem fs, String fileSrcPath,\n      String fileDstPath, int appId, Map\u003cString, LocalResource\u003e localResources,\n      String resources) throws IOException {\n    String suffix \u003d\n        appName + \"/\" + appId + \"/\" + fileDstPath;\n    Path dst \u003d\n        new Path(fs.getHomeDirectory(), suffix);\n    if (fileSrcPath \u003d\u003d null) {\n      FSDataOutputStream ostream \u003d null;\n      try {\n        ostream \u003d FileSystem\n            .create(fs, dst, new FsPermission((short) 0710));\n        ostream.writeUTF(resources);\n      } finally {\n        IOUtils.closeQuietly(ostream);\n      }\n    } else {\n      fs.copyFromLocalFile(new Path(fileSrcPath), dst);\n    }\n    FileStatus scFileStatus \u003d fs.getFileStatus(dst);\n    LocalResource scRsrc \u003d\n        LocalResource.newInstance(\n            ConverterUtils.getYarnUrlFromURI(dst.toUri()),\n            LocalResourceType.FILE, LocalResourceVisibility.APPLICATION,\n            scFileStatus.getLen(), scFileStatus.getModificationTime());\n    localResources.put(fileDstPath, scRsrc);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/Client.java"
    }
  }
}