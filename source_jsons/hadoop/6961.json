{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirectory.java",
  "functionName": "getStorageTypeDeltas",
  "functionId": "getStorageTypeDeltas___storagePolicyID-byte__dsDelta-long__oldRep-short__newRep-short",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
  "functionStartLine": 1112,
  "functionEndLine": 1148,
  "numCommitsSeen": 321,
  "timeTaken": 4786,
  "changeHistory": [
    "b7372b7166a13111b98794602ca4c166dfd78d29",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "5c97db07fb306842f49d73a67a90cecec19a7833",
    "5dae97a584d30cef3e34141edfaca49c4ec57913"
  ],
  "changeHistoryShort": {
    "b7372b7166a13111b98794602ca4c166dfd78d29": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "5c97db07fb306842f49d73a67a90cecec19a7833": "Ybodychange",
    "5dae97a584d30cef3e34141edfaca49c4ec57913": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b7372b7166a13111b98794602ca4c166dfd78d29": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9625. set replication for empty file failed when set storage policy (Contributed by DENG FEI)\n",
      "commitDate": "21/01/16 5:47 AM",
      "commitName": "b7372b7166a13111b98794602ca4c166dfd78d29",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "11/01/16 11:31 AM",
      "commitNameOld": "9f4bf3bdf9e74800643477cfb18361e01cf6859c",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 9.76,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,37 @@\n   public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n       long dsDelta, short oldRep, short newRep) {\n     EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n         new EnumCounters\u003cStorageType\u003e(StorageType.class);\n+    // empty file\n+    if(dsDelta \u003d\u003d 0){\n+      return typeSpaceDeltas;\n+    }\n     // Storage type and its quota are only available when storage policy is set\n     if (storagePolicyID !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n       BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n \n       if (oldRep !\u003d newRep) {\n         List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n             storagePolicy.chooseStorageTypes(oldRep);\n \n         for (StorageType t : oldChosenStorageTypes) {\n           if (!t.supportTypeQuota()) {\n             continue;\n           }\n           Preconditions.checkArgument(dsDelta \u003e 0);\n           typeSpaceDeltas.add(t, -dsDelta);\n         }\n       }\n \n       List\u003cStorageType\u003e newChosenStorageTypes \u003d\n           storagePolicy.chooseStorageTypes(newRep);\n \n       for (StorageType t : newChosenStorageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         typeSpaceDeltas.add(t, dsDelta);\n       }\n     }\n     return typeSpaceDeltas;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep) {\n    EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n        new EnumCounters\u003cStorageType\u003e(StorageType.class);\n    // empty file\n    if(dsDelta \u003d\u003d 0){\n      return typeSpaceDeltas;\n    }\n    // Storage type and its quota are only available when storage policy is set\n    if (storagePolicyID !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n      BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n\n      if (oldRep !\u003d newRep) {\n        List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n            storagePolicy.chooseStorageTypes(oldRep);\n\n        for (StorageType t : oldChosenStorageTypes) {\n          if (!t.supportTypeQuota()) {\n            continue;\n          }\n          Preconditions.checkArgument(dsDelta \u003e 0);\n          typeSpaceDeltas.add(t, -dsDelta);\n        }\n      }\n\n      List\u003cStorageType\u003e newChosenStorageTypes \u003d\n          storagePolicy.chooseStorageTypes(newRep);\n\n      for (StorageType t : newChosenStorageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        typeSpaceDeltas.add(t, dsDelta);\n      }\n    }\n    return typeSpaceDeltas;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "20/04/15 12:36 AM",
      "commitNameOld": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 12.39,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n       long dsDelta, short oldRep, short newRep) {\n     EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n         new EnumCounters\u003cStorageType\u003e(StorageType.class);\n     // Storage type and its quota are only available when storage policy is set\n-    if (storagePolicyID !\u003d HdfsConstantsClient.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n+    if (storagePolicyID !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n       BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n \n       if (oldRep !\u003d newRep) {\n         List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n             storagePolicy.chooseStorageTypes(oldRep);\n \n         for (StorageType t : oldChosenStorageTypes) {\n           if (!t.supportTypeQuota()) {\n             continue;\n           }\n           Preconditions.checkArgument(dsDelta \u003e 0);\n           typeSpaceDeltas.add(t, -dsDelta);\n         }\n       }\n \n       List\u003cStorageType\u003e newChosenStorageTypes \u003d\n           storagePolicy.chooseStorageTypes(newRep);\n \n       for (StorageType t : newChosenStorageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         typeSpaceDeltas.add(t, dsDelta);\n       }\n     }\n     return typeSpaceDeltas;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep) {\n    EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n        new EnumCounters\u003cStorageType\u003e(StorageType.class);\n    // Storage type and its quota are only available when storage policy is set\n    if (storagePolicyID !\u003d HdfsConstants.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n      BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n\n      if (oldRep !\u003d newRep) {\n        List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n            storagePolicy.chooseStorageTypes(oldRep);\n\n        for (StorageType t : oldChosenStorageTypes) {\n          if (!t.supportTypeQuota()) {\n            continue;\n          }\n          Preconditions.checkArgument(dsDelta \u003e 0);\n          typeSpaceDeltas.add(t, -dsDelta);\n        }\n      }\n\n      List\u003cStorageType\u003e newChosenStorageTypes \u003d\n          storagePolicy.chooseStorageTypes(newRep);\n\n      for (StorageType t : newChosenStorageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        typeSpaceDeltas.add(t, dsDelta);\n      }\n    }\n    return typeSpaceDeltas;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "5c97db07fb306842f49d73a67a90cecec19a7833": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8169. Move LocatedBlocks and related classes to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "20/04/15 12:36 AM",
      "commitName": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "16/04/15 10:13 PM",
      "commitNameOld": "369ddc67bdaf61cca3f2f766ab504e2932f6fb72",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 3.1,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n       long dsDelta, short oldRep, short newRep) {\n     EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n         new EnumCounters\u003cStorageType\u003e(StorageType.class);\n     // Storage type and its quota are only available when storage policy is set\n-    if (storagePolicyID !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED) {\n+    if (storagePolicyID !\u003d HdfsConstantsClient.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n       BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n \n       if (oldRep !\u003d newRep) {\n         List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n             storagePolicy.chooseStorageTypes(oldRep);\n \n         for (StorageType t : oldChosenStorageTypes) {\n           if (!t.supportTypeQuota()) {\n             continue;\n           }\n           Preconditions.checkArgument(dsDelta \u003e 0);\n           typeSpaceDeltas.add(t, -dsDelta);\n         }\n       }\n \n       List\u003cStorageType\u003e newChosenStorageTypes \u003d\n           storagePolicy.chooseStorageTypes(newRep);\n \n       for (StorageType t : newChosenStorageTypes) {\n         if (!t.supportTypeQuota()) {\n           continue;\n         }\n         typeSpaceDeltas.add(t, dsDelta);\n       }\n     }\n     return typeSpaceDeltas;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep) {\n    EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n        new EnumCounters\u003cStorageType\u003e(StorageType.class);\n    // Storage type and its quota are only available when storage policy is set\n    if (storagePolicyID !\u003d HdfsConstantsClient.BLOCK_STORAGE_POLICY_ID_UNSPECIFIED) {\n      BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n\n      if (oldRep !\u003d newRep) {\n        List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n            storagePolicy.chooseStorageTypes(oldRep);\n\n        for (StorageType t : oldChosenStorageTypes) {\n          if (!t.supportTypeQuota()) {\n            continue;\n          }\n          Preconditions.checkArgument(dsDelta \u003e 0);\n          typeSpaceDeltas.add(t, -dsDelta);\n        }\n      }\n\n      List\u003cStorageType\u003e newChosenStorageTypes \u003d\n          storagePolicy.chooseStorageTypes(newRep);\n\n      for (StorageType t : newChosenStorageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        typeSpaceDeltas.add(t, dsDelta);\n      }\n    }\n    return typeSpaceDeltas;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "5dae97a584d30cef3e34141edfaca49c4ec57913": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7723. Quota By Storage Type namenode implemenation. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "11/02/15 10:41 AM",
      "commitName": "5dae97a584d30cef3e34141edfaca49c4ec57913",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,33 @@\n+  public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n+      long dsDelta, short oldRep, short newRep) {\n+    EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n+        new EnumCounters\u003cStorageType\u003e(StorageType.class);\n+    // Storage type and its quota are only available when storage policy is set\n+    if (storagePolicyID !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED) {\n+      BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n+\n+      if (oldRep !\u003d newRep) {\n+        List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n+            storagePolicy.chooseStorageTypes(oldRep);\n+\n+        for (StorageType t : oldChosenStorageTypes) {\n+          if (!t.supportTypeQuota()) {\n+            continue;\n+          }\n+          Preconditions.checkArgument(dsDelta \u003e 0);\n+          typeSpaceDeltas.add(t, -dsDelta);\n+        }\n+      }\n+\n+      List\u003cStorageType\u003e newChosenStorageTypes \u003d\n+          storagePolicy.chooseStorageTypes(newRep);\n+\n+      for (StorageType t : newChosenStorageTypes) {\n+        if (!t.supportTypeQuota()) {\n+          continue;\n+        }\n+        typeSpaceDeltas.add(t, dsDelta);\n+      }\n+    }\n+    return typeSpaceDeltas;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public EnumCounters\u003cStorageType\u003e getStorageTypeDeltas(byte storagePolicyID,\n      long dsDelta, short oldRep, short newRep) {\n    EnumCounters\u003cStorageType\u003e typeSpaceDeltas \u003d\n        new EnumCounters\u003cStorageType\u003e(StorageType.class);\n    // Storage type and its quota are only available when storage policy is set\n    if (storagePolicyID !\u003d BlockStoragePolicySuite.ID_UNSPECIFIED) {\n      BlockStoragePolicy storagePolicy \u003d getBlockManager().getStoragePolicy(storagePolicyID);\n\n      if (oldRep !\u003d newRep) {\n        List\u003cStorageType\u003e oldChosenStorageTypes \u003d\n            storagePolicy.chooseStorageTypes(oldRep);\n\n        for (StorageType t : oldChosenStorageTypes) {\n          if (!t.supportTypeQuota()) {\n            continue;\n          }\n          Preconditions.checkArgument(dsDelta \u003e 0);\n          typeSpaceDeltas.add(t, -dsDelta);\n        }\n      }\n\n      List\u003cStorageType\u003e newChosenStorageTypes \u003d\n          storagePolicy.chooseStorageTypes(newRep);\n\n      for (StorageType t : newChosenStorageTypes) {\n        if (!t.supportTypeQuota()) {\n          continue;\n        }\n        typeSpaceDeltas.add(t, dsDelta);\n      }\n    }\n    return typeSpaceDeltas;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java"
    }
  }
}