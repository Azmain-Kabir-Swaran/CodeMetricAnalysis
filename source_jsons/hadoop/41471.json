{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "validateResourceRequests",
  "functionId": "validateResourceRequests___requests-List__ResourceRequest____queue-FSLeafQueue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 975,
  "functionEndLine": 1001,
  "numCommitsSeen": 226,
  "timeTaken": 2369,
  "changeHistory": [
    "f48fec83d0f2d1a781a141ad7216463c5526321f"
  ],
  "changeHistoryShort": {
    "f48fec83d0f2d1a781a141ad7216463c5526321f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f48fec83d0f2d1a781a141ad7216463c5526321f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "21/05/18 8:10 AM",
      "commitName": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,27 @@\n+  private List\u003cMaxResourceValidationResult\u003e validateResourceRequests(\n+      List\u003cResourceRequest\u003e requests, FSLeafQueue queue) {\n+    List\u003cMaxResourceValidationResult\u003e validationResults \u003d Lists.newArrayList();\n+\n+    for (ResourceRequest resourceRequest : requests) {\n+      if (LOG.isTraceEnabled()) {\n+        LOG.trace(\"Validating resource request: \" + resourceRequest);\n+      }\n+\n+      MaxResourceValidationResult validationResult \u003d\n+              SchedulerUtils.validateResourceRequestsAgainstQueueMaxResource(\n+                      resourceRequest, queue.getMaxShare());\n+      if (!validationResult.isValid()) {\n+        validationResults.add(validationResult);\n+        LOG.warn(String.format(\"Queue %s cannot handle resource request\" +\n+                        \"because it has zero available amount of resource \" +\n+                        \"for a requested resource type, \" +\n+                        \"so the resource request is ignored!\"\n+                        + \" Requested resources: %s, \" +\n+                        \"maximum queue resources: %s\",\n+                queue.getName(), resourceRequest.getCapability(),\n+                queue.getMaxShare()));\n+      }\n+    }\n+\n+    return validationResults;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cMaxResourceValidationResult\u003e validateResourceRequests(\n      List\u003cResourceRequest\u003e requests, FSLeafQueue queue) {\n    List\u003cMaxResourceValidationResult\u003e validationResults \u003d Lists.newArrayList();\n\n    for (ResourceRequest resourceRequest : requests) {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Validating resource request: \" + resourceRequest);\n      }\n\n      MaxResourceValidationResult validationResult \u003d\n              SchedulerUtils.validateResourceRequestsAgainstQueueMaxResource(\n                      resourceRequest, queue.getMaxShare());\n      if (!validationResult.isValid()) {\n        validationResults.add(validationResult);\n        LOG.warn(String.format(\"Queue %s cannot handle resource request\" +\n                        \"because it has zero available amount of resource \" +\n                        \"for a requested resource type, \" +\n                        \"so the resource request is ignored!\"\n                        + \" Requested resources: %s, \" +\n                        \"maximum queue resources: %s\",\n                queue.getName(), resourceRequest.getCapability(),\n                queue.getMaxShare()));\n      }\n    }\n\n    return validationResults;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}