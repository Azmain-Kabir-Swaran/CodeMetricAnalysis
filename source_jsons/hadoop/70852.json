{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RemoteWasbAuthorizerImpl.java",
  "functionName": "authorizeInternal",
  "functionId": "authorizeInternal___wasbAbsolutePath-String__accessType-String__resourceOwner-String",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
  "functionStartLine": 170,
  "functionEndLine": 205,
  "numCommitsSeen": 31,
  "timeTaken": 5246,
  "changeHistory": [
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329",
    "b08cc973964b4eb7e7a7445a440b19d3a0f3d4d5",
    "89bb8bfe582ba85566cede321b233bb642f1c675",
    "8b5f2c372e70999f3ee0a0bd685a494e06bc3652",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
    "8e15e240597f821968e14893eabfea39815de207",
    "686823529be09bea2a6cecb3503ef722017475bc"
  ],
  "changeHistoryShort": {
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": "Ybodychange",
    "b08cc973964b4eb7e7a7445a440b19d3a0f3d4d5": "Ybodychange",
    "89bb8bfe582ba85566cede321b233bb642f1c675": "Ymultichange(Yparameterchange,Ybodychange)",
    "8b5f2c372e70999f3ee0a0bd685a494e06bc3652": "Ybodychange",
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": "Ybodychange",
    "8e15e240597f821968e14893eabfea39815de207": "Ymultichange(Yparameterchange,Ybodychange)",
    "686823529be09bea2a6cecb3503ef722017475bc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2843c688bcc21c65eb3538ffb3caeaffe440eda8": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-14642. wasb: add support for caching Authorization and SASKeys. Contributed by Sivaguru Sankaridurg.\n",
      "commitDate": "19/07/17 12:13 AM",
      "commitName": "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
      "commitAuthor": "Jitendra Pandey",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-14642. wasb: add support for caching Authorization and SASKeys. Contributed by Sivaguru Sankaridurg.\n",
          "commitDate": "19/07/17 12:13 AM",
          "commitName": "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
          "commitAuthor": "Jitendra Pandey",
          "commitDateOld": "17/07/17 2:27 AM",
          "commitNameOld": "b0e78ae085928c82ae63a05a29a628c2e289c0fc",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n-      throws WasbAuthorizationException, IOException {\n+  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n+          throws IOException {\n \n     try {\n-        /* Make an exception for the internal -RenamePending files */\n       final URIBuilder uriBuilder \u003d new URIBuilder();\n       uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n       uriBuilder\n           .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n       uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n       if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n         uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n             resourceOwner);\n       }\n \n       String responseBody \u003d remoteCallHelper\n           .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n               uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n \n       RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n           .readValue(responseBody);\n \n       if (authorizerResponse \u003d\u003d null) {\n         throw new WasbAuthorizationException(\n             \"RemoteWasbAuthorizerResponse object null from remote call\");\n       } else if (authorizerResponse.getResponseCode()\n           \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n         return authorizerResponse.getAuthorizationResult();\n       } else {\n         throw new WasbAuthorizationException(\n             \"Remote authorization\" + \" service encountered an error \"\n                 + authorizerResponse.getResponseMessage());\n       }\n     } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n       throw new WasbAuthorizationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n          throws IOException {\n\n    try {\n      final URIBuilder uriBuilder \u003d new URIBuilder();\n      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n      uriBuilder\n          .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n      if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n        uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n            resourceOwner);\n      }\n\n      String responseBody \u003d remoteCallHelper\n          .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n              uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n\n      RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n          .readValue(responseBody);\n\n      if (authorizerResponse \u003d\u003d null) {\n        throw new WasbAuthorizationException(\n            \"RemoteWasbAuthorizerResponse object null from remote call\");\n      } else if (authorizerResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return authorizerResponse.getAuthorizationResult();\n      } else {\n        throw new WasbAuthorizationException(\n            \"Remote authorization\" + \" service encountered an error \"\n                + authorizerResponse.getResponseMessage());\n      }\n    } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n      throw new WasbAuthorizationException(ex);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {
            "oldValue": "authorize",
            "newValue": "authorizeInternal"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-14642. wasb: add support for caching Authorization and SASKeys. Contributed by Sivaguru Sankaridurg.\n",
          "commitDate": "19/07/17 12:13 AM",
          "commitName": "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
          "commitAuthor": "Jitendra Pandey",
          "commitDateOld": "17/07/17 2:27 AM",
          "commitNameOld": "b0e78ae085928c82ae63a05a29a628c2e289c0fc",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n-      throws WasbAuthorizationException, IOException {\n+  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n+          throws IOException {\n \n     try {\n-        /* Make an exception for the internal -RenamePending files */\n       final URIBuilder uriBuilder \u003d new URIBuilder();\n       uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n       uriBuilder\n           .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n       uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n       if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n         uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n             resourceOwner);\n       }\n \n       String responseBody \u003d remoteCallHelper\n           .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n               uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n \n       RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n           .readValue(responseBody);\n \n       if (authorizerResponse \u003d\u003d null) {\n         throw new WasbAuthorizationException(\n             \"RemoteWasbAuthorizerResponse object null from remote call\");\n       } else if (authorizerResponse.getResponseCode()\n           \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n         return authorizerResponse.getAuthorizationResult();\n       } else {\n         throw new WasbAuthorizationException(\n             \"Remote authorization\" + \" service encountered an error \"\n                 + authorizerResponse.getResponseMessage());\n       }\n     } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n       throw new WasbAuthorizationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n          throws IOException {\n\n    try {\n      final URIBuilder uriBuilder \u003d new URIBuilder();\n      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n      uriBuilder\n          .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n      if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n        uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n            resourceOwner);\n      }\n\n      String responseBody \u003d remoteCallHelper\n          .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n              uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n\n      RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n          .readValue(responseBody);\n\n      if (authorizerResponse \u003d\u003d null) {\n        throw new WasbAuthorizationException(\n            \"RemoteWasbAuthorizerResponse object null from remote call\");\n      } else if (authorizerResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return authorizerResponse.getAuthorizationResult();\n      } else {\n        throw new WasbAuthorizationException(\n            \"Remote authorization\" + \" service encountered an error \"\n                + authorizerResponse.getResponseMessage());\n      }\n    } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n      throw new WasbAuthorizationException(ex);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-14642. wasb: add support for caching Authorization and SASKeys. Contributed by Sivaguru Sankaridurg.\n",
          "commitDate": "19/07/17 12:13 AM",
          "commitName": "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
          "commitAuthor": "Jitendra Pandey",
          "commitDateOld": "17/07/17 2:27 AM",
          "commitNameOld": "b0e78ae085928c82ae63a05a29a628c2e289c0fc",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n-      throws WasbAuthorizationException, IOException {\n+  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n+          throws IOException {\n \n     try {\n-        /* Make an exception for the internal -RenamePending files */\n       final URIBuilder uriBuilder \u003d new URIBuilder();\n       uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n       uriBuilder\n           .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n       uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n       if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n         uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n             resourceOwner);\n       }\n \n       String responseBody \u003d remoteCallHelper\n           .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n               uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n \n       RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n           .readValue(responseBody);\n \n       if (authorizerResponse \u003d\u003d null) {\n         throw new WasbAuthorizationException(\n             \"RemoteWasbAuthorizerResponse object null from remote call\");\n       } else if (authorizerResponse.getResponseCode()\n           \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n         return authorizerResponse.getAuthorizationResult();\n       } else {\n         throw new WasbAuthorizationException(\n             \"Remote authorization\" + \" service encountered an error \"\n                 + authorizerResponse.getResponseMessage());\n       }\n     } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n       throw new WasbAuthorizationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n          throws IOException {\n\n    try {\n      final URIBuilder uriBuilder \u003d new URIBuilder();\n      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n      uriBuilder\n          .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n      if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n        uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n            resourceOwner);\n      }\n\n      String responseBody \u003d remoteCallHelper\n          .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n              uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n\n      RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n          .readValue(responseBody);\n\n      if (authorizerResponse \u003d\u003d null) {\n        throw new WasbAuthorizationException(\n            \"RemoteWasbAuthorizerResponse object null from remote call\");\n      } else if (authorizerResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return authorizerResponse.getAuthorizationResult();\n      } else {\n        throw new WasbAuthorizationException(\n            \"Remote authorization\" + \" service encountered an error \"\n                + authorizerResponse.getResponseMessage());\n      }\n    } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n      throw new WasbAuthorizationException(ex);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {
            "oldValue": "[WasbAuthorizationException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14642. wasb: add support for caching Authorization and SASKeys. Contributed by Sivaguru Sankaridurg.\n",
          "commitDate": "19/07/17 12:13 AM",
          "commitName": "2843c688bcc21c65eb3538ffb3caeaffe440eda8",
          "commitAuthor": "Jitendra Pandey",
          "commitDateOld": "17/07/17 2:27 AM",
          "commitNameOld": "b0e78ae085928c82ae63a05a29a628c2e289c0fc",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n-      throws WasbAuthorizationException, IOException {\n+  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n+          throws IOException {\n \n     try {\n-        /* Make an exception for the internal -RenamePending files */\n       final URIBuilder uriBuilder \u003d new URIBuilder();\n       uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n       uriBuilder\n           .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n       uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n       if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n         uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n             resourceOwner);\n       }\n \n       String responseBody \u003d remoteCallHelper\n           .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n               uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n \n       RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n           .readValue(responseBody);\n \n       if (authorizerResponse \u003d\u003d null) {\n         throw new WasbAuthorizationException(\n             \"RemoteWasbAuthorizerResponse object null from remote call\");\n       } else if (authorizerResponse.getResponseCode()\n           \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n         return authorizerResponse.getAuthorizationResult();\n       } else {\n         throw new WasbAuthorizationException(\n             \"Remote authorization\" + \" service encountered an error \"\n                 + authorizerResponse.getResponseMessage());\n       }\n     } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n       throw new WasbAuthorizationException(ex);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean authorizeInternal(String wasbAbsolutePath, String accessType, String resourceOwner)\n          throws IOException {\n\n    try {\n      final URIBuilder uriBuilder \u003d new URIBuilder();\n      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n      uriBuilder\n          .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n      if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n        uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n            resourceOwner);\n      }\n\n      String responseBody \u003d remoteCallHelper\n          .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n              uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n\n      RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n          .readValue(responseBody);\n\n      if (authorizerResponse \u003d\u003d null) {\n        throw new WasbAuthorizationException(\n            \"RemoteWasbAuthorizerResponse object null from remote call\");\n      } else if (authorizerResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return authorizerResponse.getAuthorizationResult();\n      } else {\n        throw new WasbAuthorizationException(\n            \"Remote authorization\" + \" service encountered an error \"\n                + authorizerResponse.getResponseMessage());\n      }\n    } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n      throw new WasbAuthorizationException(ex);\n    }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "38996fdcf0987d1da00ce46f8284d8fcdce57329": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14443. Azure: Support retry and client side failover for authorization, SASKey and delegation token generation. Contributed by Santhosh G Nayak\n",
      "commitDate": "30/06/17 4:53 PM",
      "commitName": "38996fdcf0987d1da00ce46f8284d8fcdce57329",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "29/06/17 9:22 AM",
      "commitNameOld": "b08cc973964b4eb7e7a7445a440b19d3a0f3d4d5",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 1.31,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,37 @@\n   public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n       throws WasbAuthorizationException, IOException {\n \n-      try {\n-\n+    try {\n         /* Make an exception for the internal -RenamePending files */\n-        if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n-          return true;\n-        }\n-\n-        setDelegationToken();\n-        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n-        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n-        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n-            wasbAbsolutePath);\n-        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n-            accessType);\n-        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n-          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n-              delegationToken);\n-        }\n-        if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n-          uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n-              resourceOwner);\n-        }\n-\n-        String responseBody \u003d null;\n-        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n-        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n-        if (connectUgi \u003d\u003d null) {\n-          connectUgi \u003d ugi;\n-        } else {\n-          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n-        }\n-\n-        try {\n-          responseBody \u003d connectUgi\n-              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n-                @Override\n-                public String run() throws Exception {\n-                  AuthenticatedURL.Token token \u003d null;\n-                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n-                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n-                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n-                      || delegationToken.isEmpty())) {\n-                    token \u003d new AuthenticatedURL.Token();\n-                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n-                    try {\n-                      kerberosAuthenticator\n-                          .authenticate(uriBuilder.build().toURL(), token);\n-                      Validate.isTrue(token.isSet(),\n-                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n-                    } catch (AuthenticationException e){\n-                      throw new IOException(\"Authentication failed in check authorization\", e);\n-                    }\n-                    if (token !\u003d null) {\n-                      httpGet.setHeader(\"Cookie\",\n-                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n-                    }\n-                  }\n-                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n-                }\n-              });\n-        } catch (InterruptedException e) {\n-          LOG.error(\"Error in check authorization\", e);\n-          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n-        }\n-\n-        RemoteAuthorizerResponse authorizerResponse \u003d\n-            RESPONSE_READER.readValue(responseBody);\n-\n-        if (authorizerResponse \u003d\u003d null) {\n-          throw new WasbAuthorizationException(\n-              \"RemoteAuthorizerResponse object null from remote call\");\n-        } else if (authorizerResponse.getResponseCode()\n-            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n-          return authorizerResponse.getAuthorizationResult();\n-        } else {\n-          throw new WasbAuthorizationException(\"Remote authorization\"\n-              + \" service encountered an error \"\n-              + authorizerResponse.getResponseMessage());\n-        }\n-      } catch (URISyntaxException | WasbRemoteCallException\n-          | JsonParseException | JsonMappingException ex) {\n-        throw new WasbAuthorizationException(ex);\n+      final URIBuilder uriBuilder \u003d new URIBuilder();\n+      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n+      uriBuilder\n+          .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n+      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n+      if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n+        uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n+            resourceOwner);\n       }\n+\n+      String responseBody \u003d remoteCallHelper\n+          .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n+              uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n+\n+      RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n+          .readValue(responseBody);\n+\n+      if (authorizerResponse \u003d\u003d null) {\n+        throw new WasbAuthorizationException(\n+            \"RemoteWasbAuthorizerResponse object null from remote call\");\n+      } else if (authorizerResponse.getResponseCode()\n+          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n+        return authorizerResponse.getAuthorizationResult();\n+      } else {\n+        throw new WasbAuthorizationException(\n+            \"Remote authorization\" + \" service encountered an error \"\n+                + authorizerResponse.getResponseMessage());\n+      }\n+    } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n+      throw new WasbAuthorizationException(ex);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n      throws WasbAuthorizationException, IOException {\n\n    try {\n        /* Make an exception for the internal -RenamePending files */\n      final URIBuilder uriBuilder \u003d new URIBuilder();\n      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n      uriBuilder\n          .addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME, wasbAbsolutePath);\n      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME, accessType);\n      if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n        uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n            resourceOwner);\n      }\n\n      String responseBody \u003d remoteCallHelper\n          .makeRemoteRequest(commaSeparatedUrls, uriBuilder.getPath(),\n              uriBuilder.getQueryParams(), HttpGet.METHOD_NAME);\n\n      RemoteWasbAuthorizerResponse authorizerResponse \u003d RESPONSE_READER\n          .readValue(responseBody);\n\n      if (authorizerResponse \u003d\u003d null) {\n        throw new WasbAuthorizationException(\n            \"RemoteWasbAuthorizerResponse object null from remote call\");\n      } else if (authorizerResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return authorizerResponse.getAuthorizationResult();\n      } else {\n        throw new WasbAuthorizationException(\n            \"Remote authorization\" + \" service encountered an error \"\n                + authorizerResponse.getResponseMessage());\n      }\n    } catch (WasbRemoteCallException | JsonParseException | JsonMappingException ex) {\n      throw new WasbAuthorizationException(ex);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
      "extendedDetails": {}
    },
    "b08cc973964b4eb7e7a7445a440b19d3a0f3d4d5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14601. Azure: Reuse ObjectMapper. Contributed by Mingliang Liu\n",
      "commitDate": "29/06/17 9:22 AM",
      "commitName": "b08cc973964b4eb7e7a7445a440b19d3a0f3d4d5",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "26/05/17 5:54 PM",
      "commitNameOld": "89bb8bfe582ba85566cede321b233bb642f1c675",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 33.64,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,87 @@\n   public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n       throws WasbAuthorizationException, IOException {\n \n       try {\n \n         /* Make an exception for the internal -RenamePending files */\n         if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n           return true;\n         }\n \n         setDelegationToken();\n         URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n         uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n         uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n             wasbAbsolutePath);\n         uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n             accessType);\n         if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n           uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n               delegationToken);\n         }\n         if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n           uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n               resourceOwner);\n         }\n \n         String responseBody \u003d null;\n         UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n         UserGroupInformation connectUgi \u003d ugi.getRealUser();\n         if (connectUgi \u003d\u003d null) {\n           connectUgi \u003d ugi;\n         } else {\n           uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n         }\n \n         try {\n           responseBody \u003d connectUgi\n               .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                 @Override\n                 public String run() throws Exception {\n                   AuthenticatedURL.Token token \u003d null;\n                   HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                   if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                       .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                       || delegationToken.isEmpty())) {\n                     token \u003d new AuthenticatedURL.Token();\n                     final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                     try {\n                       kerberosAuthenticator\n                           .authenticate(uriBuilder.build().toURL(), token);\n                       Validate.isTrue(token.isSet(),\n                           \"Authenticated Token is NOT present. The request cannot proceed.\");\n                     } catch (AuthenticationException e){\n                       throw new IOException(\"Authentication failed in check authorization\", e);\n                     }\n                     if (token !\u003d null) {\n                       httpGet.setHeader(\"Cookie\",\n                           AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                     }\n                   }\n                   return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                 }\n               });\n         } catch (InterruptedException e) {\n           LOG.error(\"Error in check authorization\", e);\n           throw new WasbAuthorizationException(\"Error in check authorize\", e);\n         }\n \n-        ObjectMapper objectMapper \u003d new ObjectMapper();\n         RemoteAuthorizerResponse authorizerResponse \u003d\n-            objectMapper\n-            .readValue(responseBody, RemoteAuthorizerResponse.class);\n+            RESPONSE_READER.readValue(responseBody);\n \n         if (authorizerResponse \u003d\u003d null) {\n           throw new WasbAuthorizationException(\n               \"RemoteAuthorizerResponse object null from remote call\");\n         } else if (authorizerResponse.getResponseCode()\n             \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n           return authorizerResponse.getAuthorizationResult();\n         } else {\n           throw new WasbAuthorizationException(\"Remote authorization\"\n               + \" service encountered an error \"\n               + authorizerResponse.getResponseMessage());\n         }\n       } catch (URISyntaxException | WasbRemoteCallException\n           | JsonParseException | JsonMappingException ex) {\n         throw new WasbAuthorizationException(ex);\n       }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n      throws WasbAuthorizationException, IOException {\n\n      try {\n\n        /* Make an exception for the internal -RenamePending files */\n        if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n          return true;\n        }\n\n        setDelegationToken();\n        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n            wasbAbsolutePath);\n        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n            accessType);\n        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n              delegationToken);\n        }\n        if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n          uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n              resourceOwner);\n        }\n\n        String responseBody \u003d null;\n        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n        if (connectUgi \u003d\u003d null) {\n          connectUgi \u003d ugi;\n        } else {\n          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n        }\n\n        try {\n          responseBody \u003d connectUgi\n              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                @Override\n                public String run() throws Exception {\n                  AuthenticatedURL.Token token \u003d null;\n                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                      || delegationToken.isEmpty())) {\n                    token \u003d new AuthenticatedURL.Token();\n                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                    try {\n                      kerberosAuthenticator\n                          .authenticate(uriBuilder.build().toURL(), token);\n                      Validate.isTrue(token.isSet(),\n                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n                    } catch (AuthenticationException e){\n                      throw new IOException(\"Authentication failed in check authorization\", e);\n                    }\n                    if (token !\u003d null) {\n                      httpGet.setHeader(\"Cookie\",\n                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                    }\n                  }\n                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                }\n              });\n        } catch (InterruptedException e) {\n          LOG.error(\"Error in check authorization\", e);\n          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n        }\n\n        RemoteAuthorizerResponse authorizerResponse \u003d\n            RESPONSE_READER.readValue(responseBody);\n\n        if (authorizerResponse \u003d\u003d null) {\n          throw new WasbAuthorizationException(\n              \"RemoteAuthorizerResponse object null from remote call\");\n        } else if (authorizerResponse.getResponseCode()\n            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n          return authorizerResponse.getAuthorizationResult();\n        } else {\n          throw new WasbAuthorizationException(\"Remote authorization\"\n              + \" service encountered an error \"\n              + authorizerResponse.getResponseMessage());\n        }\n      } catch (URISyntaxException | WasbRemoteCallException\n          | JsonParseException | JsonMappingException ex) {\n        throw new WasbAuthorizationException(ex);\n      }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
      "extendedDetails": {}
    },
    "89bb8bfe582ba85566cede321b233bb642f1c675": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14442. Owner support for ranger-wasb integration. Contributed by Varada Hemeswari\n",
      "commitDate": "26/05/17 5:54 PM",
      "commitName": "89bb8bfe582ba85566cede321b233bb642f1c675",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14442. Owner support for ranger-wasb integration. Contributed by Varada Hemeswari\n",
          "commitDate": "26/05/17 5:54 PM",
          "commitName": "89bb8bfe582ba85566cede321b233bb642f1c675",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "26/04/17 1:47 PM",
          "commitNameOld": "8b5f2c372e70999f3ee0a0bd685a494e06bc3652",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 30.17,
          "commitsBetweenForRepo": 178,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,89 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType)\n+  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n       throws WasbAuthorizationException, IOException {\n \n       try {\n \n         /* Make an exception for the internal -RenamePending files */\n         if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n           return true;\n         }\n \n         setDelegationToken();\n         URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n         uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n         uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n             wasbAbsolutePath);\n         uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n             accessType);\n         if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n           uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n               delegationToken);\n         }\n+        if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n+          uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n+              resourceOwner);\n+        }\n \n         String responseBody \u003d null;\n         UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n         UserGroupInformation connectUgi \u003d ugi.getRealUser();\n         if (connectUgi \u003d\u003d null) {\n           connectUgi \u003d ugi;\n         } else {\n           uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n         }\n \n         try {\n           responseBody \u003d connectUgi\n               .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                 @Override\n                 public String run() throws Exception {\n                   AuthenticatedURL.Token token \u003d null;\n                   HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                   if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                       .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                       || delegationToken.isEmpty())) {\n                     token \u003d new AuthenticatedURL.Token();\n                     final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                     try {\n                       kerberosAuthenticator\n                           .authenticate(uriBuilder.build().toURL(), token);\n                       Validate.isTrue(token.isSet(),\n                           \"Authenticated Token is NOT present. The request cannot proceed.\");\n                     } catch (AuthenticationException e){\n                       throw new IOException(\"Authentication failed in check authorization\", e);\n                     }\n                     if (token !\u003d null) {\n                       httpGet.setHeader(\"Cookie\",\n                           AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                     }\n                   }\n                   return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                 }\n               });\n         } catch (InterruptedException e) {\n           LOG.error(\"Error in check authorization\", e);\n           throw new WasbAuthorizationException(\"Error in check authorize\", e);\n         }\n \n         ObjectMapper objectMapper \u003d new ObjectMapper();\n         RemoteAuthorizerResponse authorizerResponse \u003d\n             objectMapper\n             .readValue(responseBody, RemoteAuthorizerResponse.class);\n \n         if (authorizerResponse \u003d\u003d null) {\n           throw new WasbAuthorizationException(\n               \"RemoteAuthorizerResponse object null from remote call\");\n         } else if (authorizerResponse.getResponseCode()\n             \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n           return authorizerResponse.getAuthorizationResult();\n         } else {\n           throw new WasbAuthorizationException(\"Remote authorization\"\n               + \" service encountered an error \"\n               + authorizerResponse.getResponseMessage());\n         }\n       } catch (URISyntaxException | WasbRemoteCallException\n           | JsonParseException | JsonMappingException ex) {\n         throw new WasbAuthorizationException(ex);\n       }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n      throws WasbAuthorizationException, IOException {\n\n      try {\n\n        /* Make an exception for the internal -RenamePending files */\n        if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n          return true;\n        }\n\n        setDelegationToken();\n        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n            wasbAbsolutePath);\n        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n            accessType);\n        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n              delegationToken);\n        }\n        if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n          uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n              resourceOwner);\n        }\n\n        String responseBody \u003d null;\n        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n        if (connectUgi \u003d\u003d null) {\n          connectUgi \u003d ugi;\n        } else {\n          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n        }\n\n        try {\n          responseBody \u003d connectUgi\n              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                @Override\n                public String run() throws Exception {\n                  AuthenticatedURL.Token token \u003d null;\n                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                      || delegationToken.isEmpty())) {\n                    token \u003d new AuthenticatedURL.Token();\n                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                    try {\n                      kerberosAuthenticator\n                          .authenticate(uriBuilder.build().toURL(), token);\n                      Validate.isTrue(token.isSet(),\n                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n                    } catch (AuthenticationException e){\n                      throw new IOException(\"Authentication failed in check authorization\", e);\n                    }\n                    if (token !\u003d null) {\n                      httpGet.setHeader(\"Cookie\",\n                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                    }\n                  }\n                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                }\n              });\n        } catch (InterruptedException e) {\n          LOG.error(\"Error in check authorization\", e);\n          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n        }\n\n        ObjectMapper objectMapper \u003d new ObjectMapper();\n        RemoteAuthorizerResponse authorizerResponse \u003d\n            objectMapper\n            .readValue(responseBody, RemoteAuthorizerResponse.class);\n\n        if (authorizerResponse \u003d\u003d null) {\n          throw new WasbAuthorizationException(\n              \"RemoteAuthorizerResponse object null from remote call\");\n        } else if (authorizerResponse.getResponseCode()\n            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n          return authorizerResponse.getAuthorizationResult();\n        } else {\n          throw new WasbAuthorizationException(\"Remote authorization\"\n              + \" service encountered an error \"\n              + authorizerResponse.getResponseMessage());\n        }\n      } catch (URISyntaxException | WasbRemoteCallException\n          | JsonParseException | JsonMappingException ex) {\n        throw new WasbAuthorizationException(ex);\n      }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {
            "oldValue": "[wasbAbsolutePath-String, accessType-String]",
            "newValue": "[wasbAbsolutePath-String, accessType-String, resourceOwner-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14442. Owner support for ranger-wasb integration. Contributed by Varada Hemeswari\n",
          "commitDate": "26/05/17 5:54 PM",
          "commitName": "89bb8bfe582ba85566cede321b233bb642f1c675",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "26/04/17 1:47 PM",
          "commitNameOld": "8b5f2c372e70999f3ee0a0bd685a494e06bc3652",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 30.17,
          "commitsBetweenForRepo": 178,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,85 +1,89 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType)\n+  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n       throws WasbAuthorizationException, IOException {\n \n       try {\n \n         /* Make an exception for the internal -RenamePending files */\n         if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n           return true;\n         }\n \n         setDelegationToken();\n         URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n         uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n         uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n             wasbAbsolutePath);\n         uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n             accessType);\n         if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n           uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n               delegationToken);\n         }\n+        if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n+          uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n+              resourceOwner);\n+        }\n \n         String responseBody \u003d null;\n         UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n         UserGroupInformation connectUgi \u003d ugi.getRealUser();\n         if (connectUgi \u003d\u003d null) {\n           connectUgi \u003d ugi;\n         } else {\n           uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n         }\n \n         try {\n           responseBody \u003d connectUgi\n               .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                 @Override\n                 public String run() throws Exception {\n                   AuthenticatedURL.Token token \u003d null;\n                   HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                   if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                       .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                       || delegationToken.isEmpty())) {\n                     token \u003d new AuthenticatedURL.Token();\n                     final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                     try {\n                       kerberosAuthenticator\n                           .authenticate(uriBuilder.build().toURL(), token);\n                       Validate.isTrue(token.isSet(),\n                           \"Authenticated Token is NOT present. The request cannot proceed.\");\n                     } catch (AuthenticationException e){\n                       throw new IOException(\"Authentication failed in check authorization\", e);\n                     }\n                     if (token !\u003d null) {\n                       httpGet.setHeader(\"Cookie\",\n                           AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                     }\n                   }\n                   return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                 }\n               });\n         } catch (InterruptedException e) {\n           LOG.error(\"Error in check authorization\", e);\n           throw new WasbAuthorizationException(\"Error in check authorize\", e);\n         }\n \n         ObjectMapper objectMapper \u003d new ObjectMapper();\n         RemoteAuthorizerResponse authorizerResponse \u003d\n             objectMapper\n             .readValue(responseBody, RemoteAuthorizerResponse.class);\n \n         if (authorizerResponse \u003d\u003d null) {\n           throw new WasbAuthorizationException(\n               \"RemoteAuthorizerResponse object null from remote call\");\n         } else if (authorizerResponse.getResponseCode()\n             \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n           return authorizerResponse.getAuthorizationResult();\n         } else {\n           throw new WasbAuthorizationException(\"Remote authorization\"\n               + \" service encountered an error \"\n               + authorizerResponse.getResponseMessage());\n         }\n       } catch (URISyntaxException | WasbRemoteCallException\n           | JsonParseException | JsonMappingException ex) {\n         throw new WasbAuthorizationException(ex);\n       }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType, String resourceOwner)\n      throws WasbAuthorizationException, IOException {\n\n      try {\n\n        /* Make an exception for the internal -RenamePending files */\n        if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n          return true;\n        }\n\n        setDelegationToken();\n        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n            wasbAbsolutePath);\n        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n            accessType);\n        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n              delegationToken);\n        }\n        if (resourceOwner !\u003d null \u0026\u0026 StringUtils.isNotEmpty(resourceOwner)) {\n          uriBuilder.addParameter(WASB_RESOURCE_OWNER_QUERY_PARAM_NAME,\n              resourceOwner);\n        }\n\n        String responseBody \u003d null;\n        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n        if (connectUgi \u003d\u003d null) {\n          connectUgi \u003d ugi;\n        } else {\n          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n        }\n\n        try {\n          responseBody \u003d connectUgi\n              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                @Override\n                public String run() throws Exception {\n                  AuthenticatedURL.Token token \u003d null;\n                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                      || delegationToken.isEmpty())) {\n                    token \u003d new AuthenticatedURL.Token();\n                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                    try {\n                      kerberosAuthenticator\n                          .authenticate(uriBuilder.build().toURL(), token);\n                      Validate.isTrue(token.isSet(),\n                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n                    } catch (AuthenticationException e){\n                      throw new IOException(\"Authentication failed in check authorization\", e);\n                    }\n                    if (token !\u003d null) {\n                      httpGet.setHeader(\"Cookie\",\n                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                    }\n                  }\n                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                }\n              });\n        } catch (InterruptedException e) {\n          LOG.error(\"Error in check authorization\", e);\n          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n        }\n\n        ObjectMapper objectMapper \u003d new ObjectMapper();\n        RemoteAuthorizerResponse authorizerResponse \u003d\n            objectMapper\n            .readValue(responseBody, RemoteAuthorizerResponse.class);\n\n        if (authorizerResponse \u003d\u003d null) {\n          throw new WasbAuthorizationException(\n              \"RemoteAuthorizerResponse object null from remote call\");\n        } else if (authorizerResponse.getResponseCode()\n            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n          return authorizerResponse.getAuthorizationResult();\n        } else {\n          throw new WasbAuthorizationException(\"Remote authorization\"\n              + \" service encountered an error \"\n              + authorizerResponse.getResponseMessage());\n        }\n      } catch (URISyntaxException | WasbRemoteCallException\n          | JsonParseException | JsonMappingException ex) {\n        throw new WasbAuthorizationException(ex);\n      }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "8b5f2c372e70999f3ee0a0bd685a494e06bc3652": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14351. Azure: RemoteWasbAuthorizerImpl and RemoteSASKeyGeneratorImpl should not use Kerberos interactive user cache. Contributed by Santhosh G Nayak\n",
      "commitDate": "26/04/17 1:47 PM",
      "commitName": "8b5f2c372e70999f3ee0a0bd685a494e06bc3652",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "12/04/17 4:07 PM",
      "commitNameOld": "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 13.9,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,85 @@\n   public boolean authorize(String wasbAbsolutePath, String accessType)\n       throws WasbAuthorizationException, IOException {\n \n       try {\n \n         /* Make an exception for the internal -RenamePending files */\n         if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n           return true;\n         }\n \n+        setDelegationToken();\n         URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n         uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n         uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n             wasbAbsolutePath);\n         uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n             accessType);\n         if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n           uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n               delegationToken);\n         }\n \n         String responseBody \u003d null;\n         UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n         UserGroupInformation connectUgi \u003d ugi.getRealUser();\n         if (connectUgi \u003d\u003d null) {\n           connectUgi \u003d ugi;\n         } else {\n           uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n         }\n-        if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n-          connectUgi \u003d UserGroupInformation.getLoginUser();\n-        }\n-        connectUgi.checkTGTAndReloginFromKeytab();\n \n         try {\n           responseBody \u003d connectUgi\n               .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                 @Override\n                 public String run() throws Exception {\n                   AuthenticatedURL.Token token \u003d null;\n                   HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                   if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                       .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                       || delegationToken.isEmpty())) {\n                     token \u003d new AuthenticatedURL.Token();\n                     final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                     try {\n                       kerberosAuthenticator\n                           .authenticate(uriBuilder.build().toURL(), token);\n                       Validate.isTrue(token.isSet(),\n                           \"Authenticated Token is NOT present. The request cannot proceed.\");\n                     } catch (AuthenticationException e){\n                       throw new IOException(\"Authentication failed in check authorization\", e);\n                     }\n                     if (token !\u003d null) {\n                       httpGet.setHeader(\"Cookie\",\n                           AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                     }\n                   }\n                   return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                 }\n               });\n         } catch (InterruptedException e) {\n           LOG.error(\"Error in check authorization\", e);\n           throw new WasbAuthorizationException(\"Error in check authorize\", e);\n         }\n \n         ObjectMapper objectMapper \u003d new ObjectMapper();\n         RemoteAuthorizerResponse authorizerResponse \u003d\n             objectMapper\n             .readValue(responseBody, RemoteAuthorizerResponse.class);\n \n         if (authorizerResponse \u003d\u003d null) {\n           throw new WasbAuthorizationException(\n               \"RemoteAuthorizerResponse object null from remote call\");\n         } else if (authorizerResponse.getResponseCode()\n             \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n           return authorizerResponse.getAuthorizationResult();\n         } else {\n           throw new WasbAuthorizationException(\"Remote authorization\"\n               + \" service encountered an error \"\n               + authorizerResponse.getResponseMessage());\n         }\n       } catch (URISyntaxException | WasbRemoteCallException\n           | JsonParseException | JsonMappingException ex) {\n         throw new WasbAuthorizationException(ex);\n       }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType)\n      throws WasbAuthorizationException, IOException {\n\n      try {\n\n        /* Make an exception for the internal -RenamePending files */\n        if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n          return true;\n        }\n\n        setDelegationToken();\n        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n            wasbAbsolutePath);\n        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n            accessType);\n        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n              delegationToken);\n        }\n\n        String responseBody \u003d null;\n        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n        if (connectUgi \u003d\u003d null) {\n          connectUgi \u003d ugi;\n        } else {\n          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n        }\n\n        try {\n          responseBody \u003d connectUgi\n              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                @Override\n                public String run() throws Exception {\n                  AuthenticatedURL.Token token \u003d null;\n                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                      || delegationToken.isEmpty())) {\n                    token \u003d new AuthenticatedURL.Token();\n                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                    try {\n                      kerberosAuthenticator\n                          .authenticate(uriBuilder.build().toURL(), token);\n                      Validate.isTrue(token.isSet(),\n                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n                    } catch (AuthenticationException e){\n                      throw new IOException(\"Authentication failed in check authorization\", e);\n                    }\n                    if (token !\u003d null) {\n                      httpGet.setHeader(\"Cookie\",\n                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                    }\n                  }\n                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                }\n              });\n        } catch (InterruptedException e) {\n          LOG.error(\"Error in check authorization\", e);\n          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n        }\n\n        ObjectMapper objectMapper \u003d new ObjectMapper();\n        RemoteAuthorizerResponse authorizerResponse \u003d\n            objectMapper\n            .readValue(responseBody, RemoteAuthorizerResponse.class);\n\n        if (authorizerResponse \u003d\u003d null) {\n          throw new WasbAuthorizationException(\n              \"RemoteAuthorizerResponse object null from remote call\");\n        } else if (authorizerResponse.getResponseCode()\n            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n          return authorizerResponse.getAuthorizationResult();\n        } else {\n          throw new WasbAuthorizationException(\"Remote authorization\"\n              + \" service encountered an error \"\n              + authorizerResponse.getResponseMessage());\n        }\n      } catch (URISyntaxException | WasbRemoteCallException\n          | JsonParseException | JsonMappingException ex) {\n        throw new WasbAuthorizationException(ex);\n      }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
      "extendedDetails": {}
    },
    "0cab57223e3f54be17a5f27cefdb6d1da1b073e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14274. Azure: Simplify Ranger-WASB policy model. Contributed by Sivaguru Sankaridurg\n",
      "commitDate": "12/04/17 4:07 PM",
      "commitName": "0cab57223e3f54be17a5f27cefdb6d1da1b073e5",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "20/03/17 4:31 PM",
      "commitNameOld": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 22.98,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,88 @@\n   public boolean authorize(String wasbAbsolutePath, String accessType)\n       throws WasbAuthorizationException, IOException {\n+\n       try {\n+\n+        /* Make an exception for the internal -RenamePending files */\n+        if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n+          return true;\n+        }\n+\n         URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n         uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n         uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n             wasbAbsolutePath);\n         uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n             accessType);\n         if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n           uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n               delegationToken);\n         }\n \n         String responseBody \u003d null;\n         UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n         UserGroupInformation connectUgi \u003d ugi.getRealUser();\n         if (connectUgi \u003d\u003d null) {\n           connectUgi \u003d ugi;\n         } else {\n           uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n         }\n         if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n           connectUgi \u003d UserGroupInformation.getLoginUser();\n         }\n         connectUgi.checkTGTAndReloginFromKeytab();\n \n         try {\n           responseBody \u003d connectUgi\n               .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                 @Override\n                 public String run() throws Exception {\n                   AuthenticatedURL.Token token \u003d null;\n                   HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                   if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                       .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                       || delegationToken.isEmpty())) {\n                     token \u003d new AuthenticatedURL.Token();\n                     final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                     try {\n                       kerberosAuthenticator\n                           .authenticate(uriBuilder.build().toURL(), token);\n                       Validate.isTrue(token.isSet(),\n                           \"Authenticated Token is NOT present. The request cannot proceed.\");\n                     } catch (AuthenticationException e){\n                       throw new IOException(\"Authentication failed in check authorization\", e);\n                     }\n                     if (token !\u003d null) {\n                       httpGet.setHeader(\"Cookie\",\n                           AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                     }\n                   }\n                   return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                 }\n               });\n         } catch (InterruptedException e) {\n           LOG.error(\"Error in check authorization\", e);\n           throw new WasbAuthorizationException(\"Error in check authorize\", e);\n         }\n \n         ObjectMapper objectMapper \u003d new ObjectMapper();\n         RemoteAuthorizerResponse authorizerResponse \u003d\n             objectMapper\n             .readValue(responseBody, RemoteAuthorizerResponse.class);\n \n         if (authorizerResponse \u003d\u003d null) {\n           throw new WasbAuthorizationException(\n               \"RemoteAuthorizerResponse object null from remote call\");\n         } else if (authorizerResponse.getResponseCode()\n             \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n           return authorizerResponse.getAuthorizationResult();\n         } else {\n           throw new WasbAuthorizationException(\"Remote authorization\"\n-              + \" serivce encountered an error \"\n+              + \" service encountered an error \"\n               + authorizerResponse.getResponseMessage());\n         }\n       } catch (URISyntaxException | WasbRemoteCallException\n           | JsonParseException | JsonMappingException ex) {\n         throw new WasbAuthorizationException(ex);\n       }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType)\n      throws WasbAuthorizationException, IOException {\n\n      try {\n\n        /* Make an exception for the internal -RenamePending files */\n        if (wasbAbsolutePath.endsWith(NativeAzureFileSystem.FolderRenamePending.SUFFIX)) {\n          return true;\n        }\n\n        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n            wasbAbsolutePath);\n        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n            accessType);\n        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n              delegationToken);\n        }\n\n        String responseBody \u003d null;\n        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n        if (connectUgi \u003d\u003d null) {\n          connectUgi \u003d ugi;\n        } else {\n          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n        }\n        if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n          connectUgi \u003d UserGroupInformation.getLoginUser();\n        }\n        connectUgi.checkTGTAndReloginFromKeytab();\n\n        try {\n          responseBody \u003d connectUgi\n              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                @Override\n                public String run() throws Exception {\n                  AuthenticatedURL.Token token \u003d null;\n                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                      || delegationToken.isEmpty())) {\n                    token \u003d new AuthenticatedURL.Token();\n                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                    try {\n                      kerberosAuthenticator\n                          .authenticate(uriBuilder.build().toURL(), token);\n                      Validate.isTrue(token.isSet(),\n                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n                    } catch (AuthenticationException e){\n                      throw new IOException(\"Authentication failed in check authorization\", e);\n                    }\n                    if (token !\u003d null) {\n                      httpGet.setHeader(\"Cookie\",\n                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                    }\n                  }\n                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                }\n              });\n        } catch (InterruptedException e) {\n          LOG.error(\"Error in check authorization\", e);\n          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n        }\n\n        ObjectMapper objectMapper \u003d new ObjectMapper();\n        RemoteAuthorizerResponse authorizerResponse \u003d\n            objectMapper\n            .readValue(responseBody, RemoteAuthorizerResponse.class);\n\n        if (authorizerResponse \u003d\u003d null) {\n          throw new WasbAuthorizationException(\n              \"RemoteAuthorizerResponse object null from remote call\");\n        } else if (authorizerResponse.getResponseCode()\n            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n          return authorizerResponse.getAuthorizationResult();\n        } else {\n          throw new WasbAuthorizationException(\"Remote authorization\"\n              + \" service encountered an error \"\n              + authorizerResponse.getResponseMessage());\n        }\n      } catch (URISyntaxException | WasbRemoteCallException\n          | JsonParseException | JsonMappingException ex) {\n        throw new WasbAuthorizationException(ex);\n      }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
      "extendedDetails": {}
    },
    "8e15e240597f821968e14893eabfea39815de207": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13945. Azure: Add Kerberos and Delegation token support to WASB client. Contributed by Santhosh G Nayak\n\nChange-Id: I39fb0a3b0491bf2160571366939a0502a0045429\n",
      "commitDate": "20/03/17 4:31 PM",
      "commitName": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13945. Azure: Add Kerberos and Delegation token support to WASB client. Contributed by Santhosh G Nayak\n\nChange-Id: I39fb0a3b0491bf2160571366939a0502a0045429\n",
          "commitDate": "20/03/17 4:31 PM",
          "commitName": "8e15e240597f821968e14893eabfea39815de207",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "06/03/17 5:16 PM",
          "commitNameOld": "686823529be09bea2a6cecb3503ef722017475bc",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 13.93,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,81 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType,\n-      String delegationToken) throws WasbAuthorizationException, IOException {\n+  public boolean authorize(String wasbAbsolutePath, String accessType)\n+      throws WasbAuthorizationException, IOException {\n+      try {\n+        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n+        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n+        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n+            wasbAbsolutePath);\n+        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n+            accessType);\n+        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n+          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n+              delegationToken);\n+        }\n \n-    try {\n-      URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n-      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n-      uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n-          wasbAbsolutePath);\n-      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n-          accessType);\n-      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n-          delegationToken);\n+        String responseBody \u003d null;\n+        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n+        if (connectUgi \u003d\u003d null) {\n+          connectUgi \u003d ugi;\n+        } else {\n+          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n+        }\n+        if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n+          connectUgi \u003d UserGroupInformation.getLoginUser();\n+        }\n+        connectUgi.checkTGTAndReloginFromKeytab();\n \n-      String responseBody \u003d remoteCallHelper.makeRemoteGetRequest(\n-          new HttpGet(uriBuilder.build()));\n+        try {\n+          responseBody \u003d connectUgi\n+              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n+                @Override\n+                public String run() throws Exception {\n+                  AuthenticatedURL.Token token \u003d null;\n+                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n+                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n+                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n+                      || delegationToken.isEmpty())) {\n+                    token \u003d new AuthenticatedURL.Token();\n+                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n+                    try {\n+                      kerberosAuthenticator\n+                          .authenticate(uriBuilder.build().toURL(), token);\n+                      Validate.isTrue(token.isSet(),\n+                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n+                    } catch (AuthenticationException e){\n+                      throw new IOException(\"Authentication failed in check authorization\", e);\n+                    }\n+                    if (token !\u003d null) {\n+                      httpGet.setHeader(\"Cookie\",\n+                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n+                    }\n+                  }\n+                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n+                }\n+              });\n+        } catch (InterruptedException e) {\n+          LOG.error(\"Error in check authorization\", e);\n+          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n+        }\n \n-      ObjectMapper objectMapper \u003d new ObjectMapper();\n-      RemoteAuthorizerResponse authorizerResponse \u003d\n-          objectMapper.readValue(responseBody, RemoteAuthorizerResponse.class);\n+        ObjectMapper objectMapper \u003d new ObjectMapper();\n+        RemoteAuthorizerResponse authorizerResponse \u003d\n+            objectMapper\n+            .readValue(responseBody, RemoteAuthorizerResponse.class);\n \n-      if (authorizerResponse \u003d\u003d null) {\n-        throw new WasbAuthorizationException(\n-            \"RemoteAuthorizerResponse object null from remote call\");\n-      } else if (authorizerResponse.getResponseCode()\n-          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n-        return authorizerResponse.getAuthorizationResult();\n-      } else {\n-        throw new WasbAuthorizationException(\"Remote authorization\"\n-            + \" service encountered an error \"\n-            + authorizerResponse.getResponseMessage());\n+        if (authorizerResponse \u003d\u003d null) {\n+          throw new WasbAuthorizationException(\n+              \"RemoteAuthorizerResponse object null from remote call\");\n+        } else if (authorizerResponse.getResponseCode()\n+            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n+          return authorizerResponse.getAuthorizationResult();\n+        } else {\n+          throw new WasbAuthorizationException(\"Remote authorization\"\n+              + \" serivce encountered an error \"\n+              + authorizerResponse.getResponseMessage());\n+        }\n+      } catch (URISyntaxException | WasbRemoteCallException\n+          | JsonParseException | JsonMappingException ex) {\n+        throw new WasbAuthorizationException(ex);\n       }\n-    } catch (URISyntaxException | WasbRemoteCallException\n-        | JsonParseException | JsonMappingException ex) {\n-      throw new WasbAuthorizationException(ex);\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType)\n      throws WasbAuthorizationException, IOException {\n      try {\n        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n            wasbAbsolutePath);\n        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n            accessType);\n        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n              delegationToken);\n        }\n\n        String responseBody \u003d null;\n        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n        if (connectUgi \u003d\u003d null) {\n          connectUgi \u003d ugi;\n        } else {\n          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n        }\n        if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n          connectUgi \u003d UserGroupInformation.getLoginUser();\n        }\n        connectUgi.checkTGTAndReloginFromKeytab();\n\n        try {\n          responseBody \u003d connectUgi\n              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                @Override\n                public String run() throws Exception {\n                  AuthenticatedURL.Token token \u003d null;\n                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                      || delegationToken.isEmpty())) {\n                    token \u003d new AuthenticatedURL.Token();\n                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                    try {\n                      kerberosAuthenticator\n                          .authenticate(uriBuilder.build().toURL(), token);\n                      Validate.isTrue(token.isSet(),\n                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n                    } catch (AuthenticationException e){\n                      throw new IOException(\"Authentication failed in check authorization\", e);\n                    }\n                    if (token !\u003d null) {\n                      httpGet.setHeader(\"Cookie\",\n                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                    }\n                  }\n                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                }\n              });\n        } catch (InterruptedException e) {\n          LOG.error(\"Error in check authorization\", e);\n          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n        }\n\n        ObjectMapper objectMapper \u003d new ObjectMapper();\n        RemoteAuthorizerResponse authorizerResponse \u003d\n            objectMapper\n            .readValue(responseBody, RemoteAuthorizerResponse.class);\n\n        if (authorizerResponse \u003d\u003d null) {\n          throw new WasbAuthorizationException(\n              \"RemoteAuthorizerResponse object null from remote call\");\n        } else if (authorizerResponse.getResponseCode()\n            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n          return authorizerResponse.getAuthorizationResult();\n        } else {\n          throw new WasbAuthorizationException(\"Remote authorization\"\n              + \" serivce encountered an error \"\n              + authorizerResponse.getResponseMessage());\n        }\n      } catch (URISyntaxException | WasbRemoteCallException\n          | JsonParseException | JsonMappingException ex) {\n        throw new WasbAuthorizationException(ex);\n      }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {
            "oldValue": "[wasbAbsolutePath-String, accessType-String, delegationToken-String]",
            "newValue": "[wasbAbsolutePath-String, accessType-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13945. Azure: Add Kerberos and Delegation token support to WASB client. Contributed by Santhosh G Nayak\n\nChange-Id: I39fb0a3b0491bf2160571366939a0502a0045429\n",
          "commitDate": "20/03/17 4:31 PM",
          "commitName": "8e15e240597f821968e14893eabfea39815de207",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "06/03/17 5:16 PM",
          "commitNameOld": "686823529be09bea2a6cecb3503ef722017475bc",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 13.93,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,81 @@\n-  public boolean authorize(String wasbAbsolutePath, String accessType,\n-      String delegationToken) throws WasbAuthorizationException, IOException {\n+  public boolean authorize(String wasbAbsolutePath, String accessType)\n+      throws WasbAuthorizationException, IOException {\n+      try {\n+        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n+        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n+        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n+            wasbAbsolutePath);\n+        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n+            accessType);\n+        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n+          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n+              delegationToken);\n+        }\n \n-    try {\n-      URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n-      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n-      uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n-          wasbAbsolutePath);\n-      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n-          accessType);\n-      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n-          delegationToken);\n+        String responseBody \u003d null;\n+        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n+        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n+        if (connectUgi \u003d\u003d null) {\n+          connectUgi \u003d ugi;\n+        } else {\n+          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n+        }\n+        if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n+          connectUgi \u003d UserGroupInformation.getLoginUser();\n+        }\n+        connectUgi.checkTGTAndReloginFromKeytab();\n \n-      String responseBody \u003d remoteCallHelper.makeRemoteGetRequest(\n-          new HttpGet(uriBuilder.build()));\n+        try {\n+          responseBody \u003d connectUgi\n+              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n+                @Override\n+                public String run() throws Exception {\n+                  AuthenticatedURL.Token token \u003d null;\n+                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n+                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n+                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n+                      || delegationToken.isEmpty())) {\n+                    token \u003d new AuthenticatedURL.Token();\n+                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n+                    try {\n+                      kerberosAuthenticator\n+                          .authenticate(uriBuilder.build().toURL(), token);\n+                      Validate.isTrue(token.isSet(),\n+                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n+                    } catch (AuthenticationException e){\n+                      throw new IOException(\"Authentication failed in check authorization\", e);\n+                    }\n+                    if (token !\u003d null) {\n+                      httpGet.setHeader(\"Cookie\",\n+                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n+                    }\n+                  }\n+                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n+                }\n+              });\n+        } catch (InterruptedException e) {\n+          LOG.error(\"Error in check authorization\", e);\n+          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n+        }\n \n-      ObjectMapper objectMapper \u003d new ObjectMapper();\n-      RemoteAuthorizerResponse authorizerResponse \u003d\n-          objectMapper.readValue(responseBody, RemoteAuthorizerResponse.class);\n+        ObjectMapper objectMapper \u003d new ObjectMapper();\n+        RemoteAuthorizerResponse authorizerResponse \u003d\n+            objectMapper\n+            .readValue(responseBody, RemoteAuthorizerResponse.class);\n \n-      if (authorizerResponse \u003d\u003d null) {\n-        throw new WasbAuthorizationException(\n-            \"RemoteAuthorizerResponse object null from remote call\");\n-      } else if (authorizerResponse.getResponseCode()\n-          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n-        return authorizerResponse.getAuthorizationResult();\n-      } else {\n-        throw new WasbAuthorizationException(\"Remote authorization\"\n-            + \" service encountered an error \"\n-            + authorizerResponse.getResponseMessage());\n+        if (authorizerResponse \u003d\u003d null) {\n+          throw new WasbAuthorizationException(\n+              \"RemoteAuthorizerResponse object null from remote call\");\n+        } else if (authorizerResponse.getResponseCode()\n+            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n+          return authorizerResponse.getAuthorizationResult();\n+        } else {\n+          throw new WasbAuthorizationException(\"Remote authorization\"\n+              + \" serivce encountered an error \"\n+              + authorizerResponse.getResponseMessage());\n+        }\n+      } catch (URISyntaxException | WasbRemoteCallException\n+          | JsonParseException | JsonMappingException ex) {\n+        throw new WasbAuthorizationException(ex);\n       }\n-    } catch (URISyntaxException | WasbRemoteCallException\n-        | JsonParseException | JsonMappingException ex) {\n-      throw new WasbAuthorizationException(ex);\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType)\n      throws WasbAuthorizationException, IOException {\n      try {\n        URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n        uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n        uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n            wasbAbsolutePath);\n        uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n            accessType);\n        if (isSecurityEnabled \u0026\u0026 StringUtils.isNotEmpty(delegationToken)) {\n          uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n              delegationToken);\n        }\n\n        String responseBody \u003d null;\n        UserGroupInformation ugi \u003d UserGroupInformation.getCurrentUser();\n        UserGroupInformation connectUgi \u003d ugi.getRealUser();\n        if (connectUgi \u003d\u003d null) {\n          connectUgi \u003d ugi;\n        } else {\n          uriBuilder.addParameter(Constants.DOAS_PARAM, ugi.getShortUserName());\n        }\n        if (isSecurityEnabled \u0026\u0026 !connectUgi.hasKerberosCredentials()) {\n          connectUgi \u003d UserGroupInformation.getLoginUser();\n        }\n        connectUgi.checkTGTAndReloginFromKeytab();\n\n        try {\n          responseBody \u003d connectUgi\n              .doAs(new PrivilegedExceptionAction\u003cString\u003e() {\n                @Override\n                public String run() throws Exception {\n                  AuthenticatedURL.Token token \u003d null;\n                  HttpGet httpGet \u003d new HttpGet(uriBuilder.build());\n                  if (isKerberosSupportEnabled \u0026\u0026 UserGroupInformation\n                      .isSecurityEnabled() \u0026\u0026 (delegationToken \u003d\u003d null\n                      || delegationToken.isEmpty())) {\n                    token \u003d new AuthenticatedURL.Token();\n                    final Authenticator kerberosAuthenticator \u003d new KerberosDelegationTokenAuthenticator();\n                    try {\n                      kerberosAuthenticator\n                          .authenticate(uriBuilder.build().toURL(), token);\n                      Validate.isTrue(token.isSet(),\n                          \"Authenticated Token is NOT present. The request cannot proceed.\");\n                    } catch (AuthenticationException e){\n                      throw new IOException(\"Authentication failed in check authorization\", e);\n                    }\n                    if (token !\u003d null) {\n                      httpGet.setHeader(\"Cookie\",\n                          AuthenticatedURL.AUTH_COOKIE + \"\u003d\" + token);\n                    }\n                  }\n                  return remoteCallHelper.makeRemoteGetRequest(httpGet);\n                }\n              });\n        } catch (InterruptedException e) {\n          LOG.error(\"Error in check authorization\", e);\n          throw new WasbAuthorizationException(\"Error in check authorize\", e);\n        }\n\n        ObjectMapper objectMapper \u003d new ObjectMapper();\n        RemoteAuthorizerResponse authorizerResponse \u003d\n            objectMapper\n            .readValue(responseBody, RemoteAuthorizerResponse.class);\n\n        if (authorizerResponse \u003d\u003d null) {\n          throw new WasbAuthorizationException(\n              \"RemoteAuthorizerResponse object null from remote call\");\n        } else if (authorizerResponse.getResponseCode()\n            \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n          return authorizerResponse.getAuthorizationResult();\n        } else {\n          throw new WasbAuthorizationException(\"Remote authorization\"\n              + \" serivce encountered an error \"\n              + authorizerResponse.getResponseMessage());\n        }\n      } catch (URISyntaxException | WasbRemoteCallException\n          | JsonParseException | JsonMappingException ex) {\n        throw new WasbAuthorizationException(ex);\n      }\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "686823529be09bea2a6cecb3503ef722017475bc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "06/03/17 5:16 PM",
      "commitName": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthor": "Mingliang Liu",
      "diff": "@@ -0,0 +1,36 @@\n+  public boolean authorize(String wasbAbsolutePath, String accessType,\n+      String delegationToken) throws WasbAuthorizationException, IOException {\n+\n+    try {\n+      URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n+      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n+      uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n+          wasbAbsolutePath);\n+      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n+          accessType);\n+      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n+          delegationToken);\n+\n+      String responseBody \u003d remoteCallHelper.makeRemoteGetRequest(\n+          new HttpGet(uriBuilder.build()));\n+\n+      ObjectMapper objectMapper \u003d new ObjectMapper();\n+      RemoteAuthorizerResponse authorizerResponse \u003d\n+          objectMapper.readValue(responseBody, RemoteAuthorizerResponse.class);\n+\n+      if (authorizerResponse \u003d\u003d null) {\n+        throw new WasbAuthorizationException(\n+            \"RemoteAuthorizerResponse object null from remote call\");\n+      } else if (authorizerResponse.getResponseCode()\n+          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n+        return authorizerResponse.getAuthorizationResult();\n+      } else {\n+        throw new WasbAuthorizationException(\"Remote authorization\"\n+            + \" service encountered an error \"\n+            + authorizerResponse.getResponseMessage());\n+      }\n+    } catch (URISyntaxException | WasbRemoteCallException\n+        | JsonParseException | JsonMappingException ex) {\n+      throw new WasbAuthorizationException(ex);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean authorize(String wasbAbsolutePath, String accessType,\n      String delegationToken) throws WasbAuthorizationException, IOException {\n\n    try {\n      URIBuilder uriBuilder \u003d new URIBuilder(remoteAuthorizerServiceUrl);\n      uriBuilder.setPath(\"/\" + CHECK_AUTHORIZATION_OP);\n      uriBuilder.addParameter(WASB_ABSOLUTE_PATH_QUERY_PARAM_NAME,\n          wasbAbsolutePath);\n      uriBuilder.addParameter(ACCESS_OPERATION_QUERY_PARAM_NAME,\n          accessType);\n      uriBuilder.addParameter(DELEGATION_TOKEN_QUERY_PARAM_NAME,\n          delegationToken);\n\n      String responseBody \u003d remoteCallHelper.makeRemoteGetRequest(\n          new HttpGet(uriBuilder.build()));\n\n      ObjectMapper objectMapper \u003d new ObjectMapper();\n      RemoteAuthorizerResponse authorizerResponse \u003d\n          objectMapper.readValue(responseBody, RemoteAuthorizerResponse.class);\n\n      if (authorizerResponse \u003d\u003d null) {\n        throw new WasbAuthorizationException(\n            \"RemoteAuthorizerResponse object null from remote call\");\n      } else if (authorizerResponse.getResponseCode()\n          \u003d\u003d REMOTE_CALL_SUCCESS_CODE) {\n        return authorizerResponse.getAuthorizationResult();\n      } else {\n        throw new WasbAuthorizationException(\"Remote authorization\"\n            + \" service encountered an error \"\n            + authorizerResponse.getResponseMessage());\n      }\n    } catch (URISyntaxException | WasbRemoteCallException\n        | JsonParseException | JsonMappingException ex) {\n      throw new WasbAuthorizationException(ex);\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/RemoteWasbAuthorizerImpl.java"
    }
  }
}