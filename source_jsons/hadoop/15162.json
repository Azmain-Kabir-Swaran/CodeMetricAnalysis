{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageLoader.java",
  "functionName": "getFileStatus",
  "functionId": "getFileStatus___inode-FsImageProto.INodeSection.INode__printSuffix-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
  "functionStartLine": 585,
  "functionEndLine": 655,
  "numCommitsSeen": 22,
  "timeTaken": 1867,
  "changeHistory": [
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
    "bb84f1fccb18c6c7373851e05d2451d55e908242",
    "042b33f20b01aadb5cd03da731ae7a3d94026aac",
    "ed6f32c54035f022604d650427cae0833bf8cfb6",
    "54c1daa580e1cceee541be86fc2b694fa1be26df"
  ],
  "changeHistoryShort": {
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": "Ybodychange",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ybodychange",
    "042b33f20b01aadb5cd03da731ae7a3d94026aac": "Ybodychange",
    "ed6f32c54035f022604d650427cae0833bf8cfb6": "Ybodychange",
    "54c1daa580e1cceee541be86fc2b694fa1be26df": "Yintroduced"
  },
  "changeHistoryDetails": {
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11382. Persist Erasure Coding Policy ID in a new optional field in INodeFile in FSImage. Contributed by Manoj Govindassamy.\n",
      "commitDate": "27/02/17 5:07 PM",
      "commitName": "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/02/16 8:57 AM",
      "commitNameOld": "e6a7044b8530afded8f8e86ff309dd0e4d39238a",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 381.34,
      "commitsBetweenForRepo": 2545,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,71 @@\n   private Map\u003cString, Object\u003e getFileStatus\n       (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n     Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n     switch (inode.getType()) {\n       case FILE: {\n         FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             f.getPermission(), stringTable);\n         map.put(\"accessTime\", f.getAccessTime());\n         map.put(\"blockSize\", f.getPreferredBlockSize());\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", getFileSize(f));\n         map.put(\"modificationTime\", f.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n-        map.put(\"replication\", f.getReplication());\n+        if (f.hasErasureCodingPolicyID()) {\n+          map.put(\"replication\", INodeFile.DEFAULT_REPL_FOR_STRIPED_BLOCKS);\n+        } else {\n+          map.put(\"replication\", f.getReplication());\n+        }\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       case DIRECTORY: {\n         FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", 0);\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n             dirmap.get(inode.getId()).length : 0);\n         return map;\n       }\n       case SYMLINK: {\n         FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", d.getAccessTime());\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"symlink\", d.getTarget().toStringUtf8());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       default:\n         return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Object\u003e getFileStatus\n      (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n    Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n    switch (inode.getType()) {\n      case FILE: {\n        FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            f.getPermission(), stringTable);\n        map.put(\"accessTime\", f.getAccessTime());\n        map.put(\"blockSize\", f.getPreferredBlockSize());\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", getFileSize(f));\n        map.put(\"modificationTime\", f.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        if (f.hasErasureCodingPolicyID()) {\n          map.put(\"replication\", INodeFile.DEFAULT_REPL_FOR_STRIPED_BLOCKS);\n        } else {\n          map.put(\"replication\", f.getReplication());\n        }\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      case DIRECTORY: {\n        FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", 0);\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n            dirmap.get(inode.getId()).length : 0);\n        return map;\n      }\n      case SYMLINK: {\n        FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", d.getAccessTime());\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"symlink\", d.getTarget().toStringUtf8());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      default:\n        return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "commitDateOld": "27/08/14 9:47 PM",
      "commitNameOld": "042b33f20b01aadb5cd03da731ae7a3d94026aac",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 33.03,
      "commitsBetweenForRepo": 374,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,67 @@\n   private Map\u003cString, Object\u003e getFileStatus\n       (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n     Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n     switch (inode.getType()) {\n       case FILE: {\n         FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             f.getPermission(), stringTable);\n         map.put(\"accessTime\", f.getAccessTime());\n         map.put(\"blockSize\", f.getPreferredBlockSize());\n-        map.put(\"lazyPersist\", f.getIsLazyPersist());\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", getFileSize(f));\n         map.put(\"modificationTime\", f.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", f.getReplication());\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       case DIRECTORY: {\n         FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", 0);\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n             dirmap.get(inode.getId()).length : 0);\n         return map;\n       }\n       case SYMLINK: {\n         FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", d.getAccessTime());\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"symlink\", d.getTarget().toStringUtf8());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       default:\n         return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Object\u003e getFileStatus\n      (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n    Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n    switch (inode.getType()) {\n      case FILE: {\n        FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            f.getPermission(), stringTable);\n        map.put(\"accessTime\", f.getAccessTime());\n        map.put(\"blockSize\", f.getPreferredBlockSize());\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", getFileSize(f));\n        map.put(\"modificationTime\", f.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", f.getReplication());\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      case DIRECTORY: {\n        FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", 0);\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n            dirmap.get(inode.getId()).length : 0);\n        return map;\n      }\n      case SYMLINK: {\n        FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", d.getAccessTime());\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"symlink\", d.getTarget().toStringUtf8());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      default:\n        return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "042b33f20b01aadb5cd03da731ae7a3d94026aac": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6922. Add LazyPersist flag to INodeFile, save it in FsImage and edit logs. (Arpit Agarwal)\n",
      "commitDate": "27/08/14 9:47 PM",
      "commitName": "042b33f20b01aadb5cd03da731ae7a3d94026aac",
      "commitAuthor": "arp",
      "commitDateOld": "09/05/14 11:43 AM",
      "commitNameOld": "ed6f32c54035f022604d650427cae0833bf8cfb6",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 110.42,
      "commitsBetweenForRepo": 814,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,68 @@\n   private Map\u003cString, Object\u003e getFileStatus\n       (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n     Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n     switch (inode.getType()) {\n       case FILE: {\n         FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             f.getPermission(), stringTable);\n         map.put(\"accessTime\", f.getAccessTime());\n         map.put(\"blockSize\", f.getPreferredBlockSize());\n+        map.put(\"lazyPersist\", f.getIsLazyPersist());\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", getFileSize(f));\n         map.put(\"modificationTime\", f.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", f.getReplication());\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       case DIRECTORY: {\n         FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", 0);\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n             dirmap.get(inode.getId()).length : 0);\n         return map;\n       }\n       case SYMLINK: {\n         FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", d.getAccessTime());\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"symlink\", d.getTarget().toStringUtf8());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       default:\n         return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Object\u003e getFileStatus\n      (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n    Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n    switch (inode.getType()) {\n      case FILE: {\n        FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            f.getPermission(), stringTable);\n        map.put(\"accessTime\", f.getAccessTime());\n        map.put(\"blockSize\", f.getPreferredBlockSize());\n        map.put(\"lazyPersist\", f.getIsLazyPersist());\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", getFileSize(f));\n        map.put(\"modificationTime\", f.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", f.getReplication());\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      case DIRECTORY: {\n        FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", 0);\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n            dirmap.get(inode.getId()).length : 0);\n        return map;\n      }\n      case SYMLINK: {\n        FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", d.getAccessTime());\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"symlink\", d.getTarget().toStringUtf8());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      default:\n        return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "ed6f32c54035f022604d650427cae0833bf8cfb6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6240. WebImageViewer returns 404 if LISTSTATUS to an empty directory. Contributed by Akira Ajisaka.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593591 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/05/14 11:43 AM",
      "commitName": "ed6f32c54035f022604d650427cae0833bf8cfb6",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/04/14 10:55 PM",
      "commitNameOld": "bce5a92c54cf2fc6162383eac5af27a8b12b7b51",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 14.53,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,67 @@\n   private Map\u003cString, Object\u003e getFileStatus\n       (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n     Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n     switch (inode.getType()) {\n       case FILE: {\n         FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             f.getPermission(), stringTable);\n         map.put(\"accessTime\", f.getAccessTime());\n         map.put(\"blockSize\", f.getPreferredBlockSize());\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", getFileSize(f));\n         map.put(\"modificationTime\", f.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", f.getReplication());\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       case DIRECTORY: {\n         FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", 0);\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"fileId\", inode.getId());\n-        map.put(\"childrenNum\", dirmap.get(inode.getId()).length);\n+        map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n+            dirmap.get(inode.getId()).length : 0);\n         return map;\n       }\n       case SYMLINK: {\n         FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n         PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n             d.getPermission(), stringTable);\n         map.put(\"accessTime\", d.getAccessTime());\n         map.put(\"blockSize\", 0);\n         map.put(\"group\", p.getGroupName());\n         map.put(\"length\", 0);\n         map.put(\"modificationTime\", d.getModificationTime());\n         map.put(\"owner\", p.getUserName());\n         map.put(\"pathSuffix\",\n             printSuffix ? inode.getName().toStringUtf8() : \"\");\n         map.put(\"permission\", toString(p.getPermission()));\n         map.put(\"replication\", 0);\n         map.put(\"type\", inode.getType());\n         map.put(\"symlink\", d.getTarget().toStringUtf8());\n         map.put(\"fileId\", inode.getId());\n         map.put(\"childrenNum\", 0);\n         return map;\n       }\n       default:\n         return null;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Object\u003e getFileStatus\n      (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n    Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n    switch (inode.getType()) {\n      case FILE: {\n        FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            f.getPermission(), stringTable);\n        map.put(\"accessTime\", f.getAccessTime());\n        map.put(\"blockSize\", f.getPreferredBlockSize());\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", getFileSize(f));\n        map.put(\"modificationTime\", f.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", f.getReplication());\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      case DIRECTORY: {\n        FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", 0);\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", dirmap.containsKey(inode.getId()) ?\n            dirmap.get(inode.getId()).length : 0);\n        return map;\n      }\n      case SYMLINK: {\n        FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", d.getAccessTime());\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"symlink\", d.getTarget().toStringUtf8());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      default:\n        return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java",
      "extendedDetails": {}
    },
    "54c1daa580e1cceee541be86fc2b694fa1be26df": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5978. Create a tool to take fsimage and expose read-only WebHDFS API. Contributed by Akira Ajisaka.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/03/14 11:15 AM",
      "commitName": "54c1daa580e1cceee541be86fc2b694fa1be26df",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,66 @@\n+  private Map\u003cString, Object\u003e getFileStatus\n+      (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n+    Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n+    switch (inode.getType()) {\n+      case FILE: {\n+        FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n+        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n+            f.getPermission(), stringTable);\n+        map.put(\"accessTime\", f.getAccessTime());\n+        map.put(\"blockSize\", f.getPreferredBlockSize());\n+        map.put(\"group\", p.getGroupName());\n+        map.put(\"length\", getFileSize(f));\n+        map.put(\"modificationTime\", f.getModificationTime());\n+        map.put(\"owner\", p.getUserName());\n+        map.put(\"pathSuffix\",\n+            printSuffix ? inode.getName().toStringUtf8() : \"\");\n+        map.put(\"permission\", toString(p.getPermission()));\n+        map.put(\"replication\", f.getReplication());\n+        map.put(\"type\", inode.getType());\n+        map.put(\"fileId\", inode.getId());\n+        map.put(\"childrenNum\", 0);\n+        return map;\n+      }\n+      case DIRECTORY: {\n+        FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n+        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n+            d.getPermission(), stringTable);\n+        map.put(\"accessTime\", 0);\n+        map.put(\"blockSize\", 0);\n+        map.put(\"group\", p.getGroupName());\n+        map.put(\"length\", 0);\n+        map.put(\"modificationTime\", d.getModificationTime());\n+        map.put(\"owner\", p.getUserName());\n+        map.put(\"pathSuffix\",\n+            printSuffix ? inode.getName().toStringUtf8() : \"\");\n+        map.put(\"permission\", toString(p.getPermission()));\n+        map.put(\"replication\", 0);\n+        map.put(\"type\", inode.getType());\n+        map.put(\"fileId\", inode.getId());\n+        map.put(\"childrenNum\", dirmap.get(inode.getId()).length);\n+        return map;\n+      }\n+      case SYMLINK: {\n+        FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n+        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n+            d.getPermission(), stringTable);\n+        map.put(\"accessTime\", d.getAccessTime());\n+        map.put(\"blockSize\", 0);\n+        map.put(\"group\", p.getGroupName());\n+        map.put(\"length\", 0);\n+        map.put(\"modificationTime\", d.getModificationTime());\n+        map.put(\"owner\", p.getUserName());\n+        map.put(\"pathSuffix\",\n+            printSuffix ? inode.getName().toStringUtf8() : \"\");\n+        map.put(\"permission\", toString(p.getPermission()));\n+        map.put(\"replication\", 0);\n+        map.put(\"type\", inode.getType());\n+        map.put(\"symlink\", d.getTarget().toStringUtf8());\n+        map.put(\"fileId\", inode.getId());\n+        map.put(\"childrenNum\", 0);\n+        return map;\n+      }\n+      default:\n+        return null;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cString, Object\u003e getFileStatus\n      (FsImageProto.INodeSection.INode inode, boolean printSuffix){\n    Map\u003cString, Object\u003e map \u003d Maps.newHashMap();\n    switch (inode.getType()) {\n      case FILE: {\n        FsImageProto.INodeSection.INodeFile f \u003d inode.getFile();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            f.getPermission(), stringTable);\n        map.put(\"accessTime\", f.getAccessTime());\n        map.put(\"blockSize\", f.getPreferredBlockSize());\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", getFileSize(f));\n        map.put(\"modificationTime\", f.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", f.getReplication());\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      case DIRECTORY: {\n        FsImageProto.INodeSection.INodeDirectory d \u003d inode.getDirectory();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", 0);\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", dirmap.get(inode.getId()).length);\n        return map;\n      }\n      case SYMLINK: {\n        FsImageProto.INodeSection.INodeSymlink d \u003d inode.getSymlink();\n        PermissionStatus p \u003d FSImageFormatPBINode.Loader.loadPermission(\n            d.getPermission(), stringTable);\n        map.put(\"accessTime\", d.getAccessTime());\n        map.put(\"blockSize\", 0);\n        map.put(\"group\", p.getGroupName());\n        map.put(\"length\", 0);\n        map.put(\"modificationTime\", d.getModificationTime());\n        map.put(\"owner\", p.getUserName());\n        map.put(\"pathSuffix\",\n            printSuffix ? inode.getName().toStringUtf8() : \"\");\n        map.put(\"permission\", toString(p.getPermission()));\n        map.put(\"replication\", 0);\n        map.put(\"type\", inode.getType());\n        map.put(\"symlink\", d.getTarget().toStringUtf8());\n        map.put(\"fileId\", inode.getId());\n        map.put(\"childrenNum\", 0);\n        return map;\n      }\n      default:\n        return null;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/offlineImageViewer/FSImageLoader.java"
    }
  }
}