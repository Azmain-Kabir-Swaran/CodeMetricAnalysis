{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintsUtil.java",
  "functionName": "canSatisfyConstraints",
  "functionId": "canSatisfyConstraints___applicationId-ApplicationId__request-SchedulingRequest__schedulerNode-SchedulerNode__pcm-PlacementConstraintManager__atm-AllocationTagsManager__dcOpt-Optional__DiagnosticsCollector__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
  "functionStartLine": 352,
  "functionEndLine": 366,
  "numCommitsSeen": 42,
  "timeTaken": 8034,
  "changeHistory": [
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
    "d4813447831770446399f2d6501860141551ff33",
    "8bf7c444368f48f63f8011cf155f551c6b51ee21",
    "38af23796971193fa529c3d08ffde8fcd6e607b6"
  ],
  "changeHistoryShort": {
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": "Ybodychange",
    "d4813447831770446399f2d6501860141551ff33": "Ybodychange",
    "8bf7c444368f48f63f8011cf155f551c6b51ee21": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "06/05/19 5:00 AM",
      "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "06/05/19 5:00 AM",
          "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "18/03/19 10:57 AM",
          "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 48.75,
          "commitsBetweenForRepo": 303,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,15 @@\n-  private static boolean canSatisfyConstraints(ApplicationId appId,\n-      PlacementConstraint constraint, SchedulerNode node,\n-      AllocationTagsManager atm)\n+  public static boolean canSatisfyConstraints(ApplicationId applicationId,\n+      SchedulingRequest request, SchedulerNode schedulerNode,\n+      PlacementConstraintManager pcm, AllocationTagsManager atm,\n+      Optional\u003cDiagnosticsCollector\u003e dcOpt)\n       throws InvalidAllocationTagsQueryException {\n-    if (constraint \u003d\u003d null) {\n-      LOG.debug(\"Constraint is found empty during constraint validation for\"\n-          + \" app:{}\", appId);\n-      return true;\n+    Set\u003cString\u003e sourceTags \u003d null;\n+    PlacementConstraint pc \u003d null;\n+    if (request !\u003d null) {\n+      sourceTags \u003d request.getAllocationTags();\n+      pc \u003d request.getPlacementConstraint();\n     }\n-\n-    // If this is a single constraint, transform to SingleConstraint\n-    SingleConstraintTransformer singleTransformer \u003d\n-        new SingleConstraintTransformer(constraint);\n-    constraint \u003d singleTransformer.transform();\n-    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n-\n-    // TODO handle other type of constraints, e.g CompositeConstraint\n-    if (sConstraintExpr instanceof SingleConstraint) {\n-      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n-      return canSatisfySingleConstraint(appId, single, node, atm);\n-    } else if (sConstraintExpr instanceof And) {\n-      And and \u003d (And) sConstraintExpr;\n-      return canSatisfyAndConstraint(appId, and, node, atm);\n-    } else if (sConstraintExpr instanceof Or) {\n-      Or or \u003d (Or) sConstraintExpr;\n-      return canSatisfyOrConstraint(appId, or, node, atm);\n-    } else {\n-      throw new InvalidAllocationTagsQueryException(\n-          \"Unsupported type of constraint: \"\n-              + sConstraintExpr.getClass().getSimpleName());\n-    }\n+    return canSatisfyConstraints(applicationId,\n+        pcm.getMultilevelConstraint(applicationId, sourceTags, pc),\n+        schedulerNode, atm, dcOpt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean canSatisfyConstraints(ApplicationId applicationId,\n      SchedulingRequest request, SchedulerNode schedulerNode,\n      PlacementConstraintManager pcm, AllocationTagsManager atm,\n      Optional\u003cDiagnosticsCollector\u003e dcOpt)\n      throws InvalidAllocationTagsQueryException {\n    Set\u003cString\u003e sourceTags \u003d null;\n    PlacementConstraint pc \u003d null;\n    if (request !\u003d null) {\n      sourceTags \u003d request.getAllocationTags();\n      pc \u003d request.getPlacementConstraint();\n    }\n    return canSatisfyConstraints(applicationId,\n        pcm.getMultilevelConstraint(applicationId, sourceTags, pc),\n        schedulerNode, atm, dcOpt);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, constraint-PlacementConstraint, node-SchedulerNode, atm-AllocationTagsManager]",
            "newValue": "[applicationId-ApplicationId, request-SchedulingRequest, schedulerNode-SchedulerNode, pcm-PlacementConstraintManager, atm-AllocationTagsManager, dcOpt-Optional\u003cDiagnosticsCollector\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "06/05/19 5:00 AM",
          "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "18/03/19 10:57 AM",
          "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 48.75,
          "commitsBetweenForRepo": 303,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,15 @@\n-  private static boolean canSatisfyConstraints(ApplicationId appId,\n-      PlacementConstraint constraint, SchedulerNode node,\n-      AllocationTagsManager atm)\n+  public static boolean canSatisfyConstraints(ApplicationId applicationId,\n+      SchedulingRequest request, SchedulerNode schedulerNode,\n+      PlacementConstraintManager pcm, AllocationTagsManager atm,\n+      Optional\u003cDiagnosticsCollector\u003e dcOpt)\n       throws InvalidAllocationTagsQueryException {\n-    if (constraint \u003d\u003d null) {\n-      LOG.debug(\"Constraint is found empty during constraint validation for\"\n-          + \" app:{}\", appId);\n-      return true;\n+    Set\u003cString\u003e sourceTags \u003d null;\n+    PlacementConstraint pc \u003d null;\n+    if (request !\u003d null) {\n+      sourceTags \u003d request.getAllocationTags();\n+      pc \u003d request.getPlacementConstraint();\n     }\n-\n-    // If this is a single constraint, transform to SingleConstraint\n-    SingleConstraintTransformer singleTransformer \u003d\n-        new SingleConstraintTransformer(constraint);\n-    constraint \u003d singleTransformer.transform();\n-    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n-\n-    // TODO handle other type of constraints, e.g CompositeConstraint\n-    if (sConstraintExpr instanceof SingleConstraint) {\n-      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n-      return canSatisfySingleConstraint(appId, single, node, atm);\n-    } else if (sConstraintExpr instanceof And) {\n-      And and \u003d (And) sConstraintExpr;\n-      return canSatisfyAndConstraint(appId, and, node, atm);\n-    } else if (sConstraintExpr instanceof Or) {\n-      Or or \u003d (Or) sConstraintExpr;\n-      return canSatisfyOrConstraint(appId, or, node, atm);\n-    } else {\n-      throw new InvalidAllocationTagsQueryException(\n-          \"Unsupported type of constraint: \"\n-              + sConstraintExpr.getClass().getSimpleName());\n-    }\n+    return canSatisfyConstraints(applicationId,\n+        pcm.getMultilevelConstraint(applicationId, sourceTags, pc),\n+        schedulerNode, atm, dcOpt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean canSatisfyConstraints(ApplicationId applicationId,\n      SchedulingRequest request, SchedulerNode schedulerNode,\n      PlacementConstraintManager pcm, AllocationTagsManager atm,\n      Optional\u003cDiagnosticsCollector\u003e dcOpt)\n      throws InvalidAllocationTagsQueryException {\n    Set\u003cString\u003e sourceTags \u003d null;\n    PlacementConstraint pc \u003d null;\n    if (request !\u003d null) {\n      sourceTags \u003d request.getAllocationTags();\n      pc \u003d request.getPlacementConstraint();\n    }\n    return canSatisfyConstraints(applicationId,\n        pcm.getMultilevelConstraint(applicationId, sourceTags, pc),\n        schedulerNode, atm, dcOpt);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "06/05/19 5:00 AM",
          "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "18/03/19 10:57 AM",
          "commitNameOld": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 48.75,
          "commitsBetweenForRepo": 303,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,15 @@\n-  private static boolean canSatisfyConstraints(ApplicationId appId,\n-      PlacementConstraint constraint, SchedulerNode node,\n-      AllocationTagsManager atm)\n+  public static boolean canSatisfyConstraints(ApplicationId applicationId,\n+      SchedulingRequest request, SchedulerNode schedulerNode,\n+      PlacementConstraintManager pcm, AllocationTagsManager atm,\n+      Optional\u003cDiagnosticsCollector\u003e dcOpt)\n       throws InvalidAllocationTagsQueryException {\n-    if (constraint \u003d\u003d null) {\n-      LOG.debug(\"Constraint is found empty during constraint validation for\"\n-          + \" app:{}\", appId);\n-      return true;\n+    Set\u003cString\u003e sourceTags \u003d null;\n+    PlacementConstraint pc \u003d null;\n+    if (request !\u003d null) {\n+      sourceTags \u003d request.getAllocationTags();\n+      pc \u003d request.getPlacementConstraint();\n     }\n-\n-    // If this is a single constraint, transform to SingleConstraint\n-    SingleConstraintTransformer singleTransformer \u003d\n-        new SingleConstraintTransformer(constraint);\n-    constraint \u003d singleTransformer.transform();\n-    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n-\n-    // TODO handle other type of constraints, e.g CompositeConstraint\n-    if (sConstraintExpr instanceof SingleConstraint) {\n-      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n-      return canSatisfySingleConstraint(appId, single, node, atm);\n-    } else if (sConstraintExpr instanceof And) {\n-      And and \u003d (And) sConstraintExpr;\n-      return canSatisfyAndConstraint(appId, and, node, atm);\n-    } else if (sConstraintExpr instanceof Or) {\n-      Or or \u003d (Or) sConstraintExpr;\n-      return canSatisfyOrConstraint(appId, or, node, atm);\n-    } else {\n-      throw new InvalidAllocationTagsQueryException(\n-          \"Unsupported type of constraint: \"\n-              + sConstraintExpr.getClass().getSimpleName());\n-    }\n+    return canSatisfyConstraints(applicationId,\n+        pcm.getMultilevelConstraint(applicationId, sourceTags, pc),\n+        schedulerNode, atm, dcOpt);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static boolean canSatisfyConstraints(ApplicationId applicationId,\n      SchedulingRequest request, SchedulerNode schedulerNode,\n      PlacementConstraintManager pcm, AllocationTagsManager atm,\n      Optional\u003cDiagnosticsCollector\u003e dcOpt)\n      throws InvalidAllocationTagsQueryException {\n    Set\u003cString\u003e sourceTags \u003d null;\n    PlacementConstraint pc \u003d null;\n    if (request !\u003d null) {\n      sourceTags \u003d request.getAllocationTags();\n      pc \u003d request.getPlacementConstraint();\n    }\n    return canSatisfyConstraints(applicationId,\n        pcm.getMultilevelConstraint(applicationId, sourceTags, pc),\n        schedulerNode, atm, dcOpt);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,32 @@\n   private static boolean canSatisfyConstraints(ApplicationId appId,\n       PlacementConstraint constraint, SchedulerNode node,\n       AllocationTagsManager atm)\n       throws InvalidAllocationTagsQueryException {\n     if (constraint \u003d\u003d null) {\n-      if(LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            \"Constraint is found empty during constraint validation for app:\"\n-                + appId);\n-      }\n+      LOG.debug(\"Constraint is found empty during constraint validation for\"\n+          + \" app:{}\", appId);\n       return true;\n     }\n \n     // If this is a single constraint, transform to SingleConstraint\n     SingleConstraintTransformer singleTransformer \u003d\n         new SingleConstraintTransformer(constraint);\n     constraint \u003d singleTransformer.transform();\n     AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n \n     // TODO handle other type of constraints, e.g CompositeConstraint\n     if (sConstraintExpr instanceof SingleConstraint) {\n       SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n       return canSatisfySingleConstraint(appId, single, node, atm);\n     } else if (sConstraintExpr instanceof And) {\n       And and \u003d (And) sConstraintExpr;\n       return canSatisfyAndConstraint(appId, and, node, atm);\n     } else if (sConstraintExpr instanceof Or) {\n       Or or \u003d (Or) sConstraintExpr;\n       return canSatisfyOrConstraint(appId, or, node, atm);\n     } else {\n       throw new InvalidAllocationTagsQueryException(\n           \"Unsupported type of constraint: \"\n               + sConstraintExpr.getClass().getSimpleName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfyConstraints(ApplicationId appId,\n      PlacementConstraint constraint, SchedulerNode node,\n      AllocationTagsManager atm)\n      throws InvalidAllocationTagsQueryException {\n    if (constraint \u003d\u003d null) {\n      LOG.debug(\"Constraint is found empty during constraint validation for\"\n          + \" app:{}\", appId);\n      return true;\n    }\n\n    // If this is a single constraint, transform to SingleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(constraint);\n    constraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n\n    // TODO handle other type of constraints, e.g CompositeConstraint\n    if (sConstraintExpr instanceof SingleConstraint) {\n      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n      return canSatisfySingleConstraint(appId, single, node, atm);\n    } else if (sConstraintExpr instanceof And) {\n      And and \u003d (And) sConstraintExpr;\n      return canSatisfyAndConstraint(appId, and, node, atm);\n    } else if (sConstraintExpr instanceof Or) {\n      Or or \u003d (Or) sConstraintExpr;\n      return canSatisfyOrConstraint(appId, or, node, atm);\n    } else {\n      throw new InvalidAllocationTagsQueryException(\n          \"Unsupported type of constraint: \"\n              + sConstraintExpr.getClass().getSimpleName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7863. Modify placement constraints to support node attributes. Contributed by Sunil Govindan.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "67ae81f0e0ac7f107261ee15f2eb4d189e3b1983",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "30/04/18 11:54 AM",
      "commitNameOld": "9b0955545174abe16fd81240db30f175145ee89b",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 134.65,
      "commitsBetweenForRepo": 1013,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   private static boolean canSatisfyConstraints(ApplicationId appId,\n       PlacementConstraint constraint, SchedulerNode node,\n       AllocationTagsManager atm)\n       throws InvalidAllocationTagsQueryException {\n     if (constraint \u003d\u003d null) {\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"Constraint is found empty during constraint validation for app:\"\n+                + appId);\n+      }\n       return true;\n     }\n \n     // If this is a single constraint, transform to SingleConstraint\n     SingleConstraintTransformer singleTransformer \u003d\n         new SingleConstraintTransformer(constraint);\n     constraint \u003d singleTransformer.transform();\n     AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n \n     // TODO handle other type of constraints, e.g CompositeConstraint\n     if (sConstraintExpr instanceof SingleConstraint) {\n       SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n       return canSatisfySingleConstraint(appId, single, node, atm);\n     } else if (sConstraintExpr instanceof And) {\n       And and \u003d (And) sConstraintExpr;\n       return canSatisfyAndConstraint(appId, and, node, atm);\n     } else if (sConstraintExpr instanceof Or) {\n       Or or \u003d (Or) sConstraintExpr;\n       return canSatisfyOrConstraint(appId, or, node, atm);\n     } else {\n       throw new InvalidAllocationTagsQueryException(\n           \"Unsupported type of constraint: \"\n               + sConstraintExpr.getClass().getSimpleName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfyConstraints(ApplicationId appId,\n      PlacementConstraint constraint, SchedulerNode node,\n      AllocationTagsManager atm)\n      throws InvalidAllocationTagsQueryException {\n    if (constraint \u003d\u003d null) {\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Constraint is found empty during constraint validation for app:\"\n                + appId);\n      }\n      return true;\n    }\n\n    // If this is a single constraint, transform to SingleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(constraint);\n    constraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n\n    // TODO handle other type of constraints, e.g CompositeConstraint\n    if (sConstraintExpr instanceof SingleConstraint) {\n      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n      return canSatisfySingleConstraint(appId, single, node, atm);\n    } else if (sConstraintExpr instanceof And) {\n      And and \u003d (And) sConstraintExpr;\n      return canSatisfyAndConstraint(appId, and, node, atm);\n    } else if (sConstraintExpr instanceof Or) {\n      Or or \u003d (Or) sConstraintExpr;\n      return canSatisfyOrConstraint(appId, or, node, atm);\n    } else {\n      throw new InvalidAllocationTagsQueryException(\n          \"Unsupported type of constraint: \"\n              + sConstraintExpr.getClass().getSimpleName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "d4813447831770446399f2d6501860141551ff33": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7822. Constraint satisfaction checker support for composite OR and AND constraints. (Weiwei Yang via asuresh)\n",
      "commitDate": "31/01/18 1:51 AM",
      "commitName": "d4813447831770446399f2d6501860141551ff33",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "c23980c4f2cf4c751a99fd310e60149cb32ea7c7",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,30 @@\n   private static boolean canSatisfyConstraints(ApplicationId appId,\n       PlacementConstraint constraint, SchedulerNode node,\n       AllocationTagsManager atm)\n       throws InvalidAllocationTagsQueryException {\n     if (constraint \u003d\u003d null) {\n       return true;\n     }\n \n     // If this is a single constraint, transform to SingleConstraint\n     SingleConstraintTransformer singleTransformer \u003d\n         new SingleConstraintTransformer(constraint);\n     constraint \u003d singleTransformer.transform();\n     AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n \n     // TODO handle other type of constraints, e.g CompositeConstraint\n     if (sConstraintExpr instanceof SingleConstraint) {\n       SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n       return canSatisfySingleConstraint(appId, single, node, atm);\n+    } else if (sConstraintExpr instanceof And) {\n+      And and \u003d (And) sConstraintExpr;\n+      return canSatisfyAndConstraint(appId, and, node, atm);\n+    } else if (sConstraintExpr instanceof Or) {\n+      Or or \u003d (Or) sConstraintExpr;\n+      return canSatisfyOrConstraint(appId, or, node, atm);\n     } else {\n       throw new InvalidAllocationTagsQueryException(\n-          \"Unsupported type of constraint.\");\n+          \"Unsupported type of constraint: \"\n+              + sConstraintExpr.getClass().getSimpleName());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean canSatisfyConstraints(ApplicationId appId,\n      PlacementConstraint constraint, SchedulerNode node,\n      AllocationTagsManager atm)\n      throws InvalidAllocationTagsQueryException {\n    if (constraint \u003d\u003d null) {\n      return true;\n    }\n\n    // If this is a single constraint, transform to SingleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(constraint);\n    constraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n\n    // TODO handle other type of constraints, e.g CompositeConstraint\n    if (sConstraintExpr instanceof SingleConstraint) {\n      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n      return canSatisfySingleConstraint(appId, single, node, atm);\n    } else if (sConstraintExpr instanceof And) {\n      And and \u003d (And) sConstraintExpr;\n      return canSatisfyAndConstraint(appId, and, node, atm);\n    } else if (sConstraintExpr instanceof Or) {\n      Or or \u003d (Or) sConstraintExpr;\n      return canSatisfyOrConstraint(appId, or, node, atm);\n    } else {\n      throw new InvalidAllocationTagsQueryException(\n          \"Unsupported type of constraint: \"\n              + sConstraintExpr.getClass().getSimpleName());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "8bf7c444368f48f63f8011cf155f551c6b51ee21": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-7763. Allow Constraints specified in the SchedulingRequest to override application level constraints. (Weiwei Yang via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "8bf7c444368f48f63f8011cf155f551c6b51ee21",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7763. Allow Constraints specified in the SchedulingRequest to override application level constraints. (Weiwei Yang via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "8bf7c444368f48f63f8011cf155f551c6b51ee21",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "28fe7f331837b36e78fa34ed990993677dddeaee",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,23 @@\n-  public static boolean canSatisfySingleConstraint(ApplicationId applicationId,\n-      PlacementConstraint placementConstraint, SchedulerNode node,\n-      AllocationTagsManager tagsManager)\n+  private static boolean canSatisfyConstraints(ApplicationId appId,\n+      PlacementConstraint constraint, SchedulerNode node,\n+      AllocationTagsManager atm)\n       throws InvalidAllocationTagsQueryException {\n-    if (placementConstraint \u003d\u003d null) {\n+    if (constraint \u003d\u003d null) {\n       return true;\n     }\n-    // Transform to SimpleConstraint\n-    SingleConstraintTransformer singleTransformer \u003d\n-        new SingleConstraintTransformer(placementConstraint);\n-    placementConstraint \u003d singleTransformer.transform();\n-    AbstractConstraint sConstraintExpr \u003d placementConstraint.getConstraintExpr();\n-    SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n \n-    return canSatisfySingleConstraint(applicationId, single, node, tagsManager);\n+    // If this is a single constraint, transform to SingleConstraint\n+    SingleConstraintTransformer singleTransformer \u003d\n+        new SingleConstraintTransformer(constraint);\n+    constraint \u003d singleTransformer.transform();\n+    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n+\n+    // TODO handle other type of constraints, e.g CompositeConstraint\n+    if (sConstraintExpr instanceof SingleConstraint) {\n+      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n+      return canSatisfySingleConstraint(appId, single, node, atm);\n+    } else {\n+      throw new InvalidAllocationTagsQueryException(\n+          \"Unsupported type of constraint.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyConstraints(ApplicationId appId,\n      PlacementConstraint constraint, SchedulerNode node,\n      AllocationTagsManager atm)\n      throws InvalidAllocationTagsQueryException {\n    if (constraint \u003d\u003d null) {\n      return true;\n    }\n\n    // If this is a single constraint, transform to SingleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(constraint);\n    constraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n\n    // TODO handle other type of constraints, e.g CompositeConstraint\n    if (sConstraintExpr instanceof SingleConstraint) {\n      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n      return canSatisfySingleConstraint(appId, single, node, atm);\n    } else {\n      throw new InvalidAllocationTagsQueryException(\n          \"Unsupported type of constraint.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "canSatisfySingleConstraint",
            "newValue": "canSatisfyConstraints"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7763. Allow Constraints specified in the SchedulingRequest to override application level constraints. (Weiwei Yang via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "8bf7c444368f48f63f8011cf155f551c6b51ee21",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "28fe7f331837b36e78fa34ed990993677dddeaee",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,23 @@\n-  public static boolean canSatisfySingleConstraint(ApplicationId applicationId,\n-      PlacementConstraint placementConstraint, SchedulerNode node,\n-      AllocationTagsManager tagsManager)\n+  private static boolean canSatisfyConstraints(ApplicationId appId,\n+      PlacementConstraint constraint, SchedulerNode node,\n+      AllocationTagsManager atm)\n       throws InvalidAllocationTagsQueryException {\n-    if (placementConstraint \u003d\u003d null) {\n+    if (constraint \u003d\u003d null) {\n       return true;\n     }\n-    // Transform to SimpleConstraint\n-    SingleConstraintTransformer singleTransformer \u003d\n-        new SingleConstraintTransformer(placementConstraint);\n-    placementConstraint \u003d singleTransformer.transform();\n-    AbstractConstraint sConstraintExpr \u003d placementConstraint.getConstraintExpr();\n-    SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n \n-    return canSatisfySingleConstraint(applicationId, single, node, tagsManager);\n+    // If this is a single constraint, transform to SingleConstraint\n+    SingleConstraintTransformer singleTransformer \u003d\n+        new SingleConstraintTransformer(constraint);\n+    constraint \u003d singleTransformer.transform();\n+    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n+\n+    // TODO handle other type of constraints, e.g CompositeConstraint\n+    if (sConstraintExpr instanceof SingleConstraint) {\n+      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n+      return canSatisfySingleConstraint(appId, single, node, atm);\n+    } else {\n+      throw new InvalidAllocationTagsQueryException(\n+          \"Unsupported type of constraint.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyConstraints(ApplicationId appId,\n      PlacementConstraint constraint, SchedulerNode node,\n      AllocationTagsManager atm)\n      throws InvalidAllocationTagsQueryException {\n    if (constraint \u003d\u003d null) {\n      return true;\n    }\n\n    // If this is a single constraint, transform to SingleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(constraint);\n    constraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n\n    // TODO handle other type of constraints, e.g CompositeConstraint\n    if (sConstraintExpr instanceof SingleConstraint) {\n      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n      return canSatisfySingleConstraint(appId, single, node, atm);\n    } else {\n      throw new InvalidAllocationTagsQueryException(\n          \"Unsupported type of constraint.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, placementConstraint-PlacementConstraint, node-SchedulerNode, tagsManager-AllocationTagsManager]",
            "newValue": "[appId-ApplicationId, constraint-PlacementConstraint, node-SchedulerNode, atm-AllocationTagsManager]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-7763. Allow Constraints specified in the SchedulingRequest to override application level constraints. (Weiwei Yang via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "8bf7c444368f48f63f8011cf155f551c6b51ee21",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "28fe7f331837b36e78fa34ed990993677dddeaee",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,23 @@\n-  public static boolean canSatisfySingleConstraint(ApplicationId applicationId,\n-      PlacementConstraint placementConstraint, SchedulerNode node,\n-      AllocationTagsManager tagsManager)\n+  private static boolean canSatisfyConstraints(ApplicationId appId,\n+      PlacementConstraint constraint, SchedulerNode node,\n+      AllocationTagsManager atm)\n       throws InvalidAllocationTagsQueryException {\n-    if (placementConstraint \u003d\u003d null) {\n+    if (constraint \u003d\u003d null) {\n       return true;\n     }\n-    // Transform to SimpleConstraint\n-    SingleConstraintTransformer singleTransformer \u003d\n-        new SingleConstraintTransformer(placementConstraint);\n-    placementConstraint \u003d singleTransformer.transform();\n-    AbstractConstraint sConstraintExpr \u003d placementConstraint.getConstraintExpr();\n-    SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n \n-    return canSatisfySingleConstraint(applicationId, single, node, tagsManager);\n+    // If this is a single constraint, transform to SingleConstraint\n+    SingleConstraintTransformer singleTransformer \u003d\n+        new SingleConstraintTransformer(constraint);\n+    constraint \u003d singleTransformer.transform();\n+    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n+\n+    // TODO handle other type of constraints, e.g CompositeConstraint\n+    if (sConstraintExpr instanceof SingleConstraint) {\n+      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n+      return canSatisfySingleConstraint(appId, single, node, atm);\n+    } else {\n+      throw new InvalidAllocationTagsQueryException(\n+          \"Unsupported type of constraint.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyConstraints(ApplicationId appId,\n      PlacementConstraint constraint, SchedulerNode node,\n      AllocationTagsManager atm)\n      throws InvalidAllocationTagsQueryException {\n    if (constraint \u003d\u003d null) {\n      return true;\n    }\n\n    // If this is a single constraint, transform to SingleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(constraint);\n    constraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n\n    // TODO handle other type of constraints, e.g CompositeConstraint\n    if (sConstraintExpr instanceof SingleConstraint) {\n      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n      return canSatisfySingleConstraint(appId, single, node, atm);\n    } else {\n      throw new InvalidAllocationTagsQueryException(\n          \"Unsupported type of constraint.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7763. Allow Constraints specified in the SchedulingRequest to override application level constraints. (Weiwei Yang via asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "8bf7c444368f48f63f8011cf155f551c6b51ee21",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "31/01/18 1:30 AM",
          "commitNameOld": "28fe7f331837b36e78fa34ed990993677dddeaee",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,23 @@\n-  public static boolean canSatisfySingleConstraint(ApplicationId applicationId,\n-      PlacementConstraint placementConstraint, SchedulerNode node,\n-      AllocationTagsManager tagsManager)\n+  private static boolean canSatisfyConstraints(ApplicationId appId,\n+      PlacementConstraint constraint, SchedulerNode node,\n+      AllocationTagsManager atm)\n       throws InvalidAllocationTagsQueryException {\n-    if (placementConstraint \u003d\u003d null) {\n+    if (constraint \u003d\u003d null) {\n       return true;\n     }\n-    // Transform to SimpleConstraint\n-    SingleConstraintTransformer singleTransformer \u003d\n-        new SingleConstraintTransformer(placementConstraint);\n-    placementConstraint \u003d singleTransformer.transform();\n-    AbstractConstraint sConstraintExpr \u003d placementConstraint.getConstraintExpr();\n-    SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n \n-    return canSatisfySingleConstraint(applicationId, single, node, tagsManager);\n+    // If this is a single constraint, transform to SingleConstraint\n+    SingleConstraintTransformer singleTransformer \u003d\n+        new SingleConstraintTransformer(constraint);\n+    constraint \u003d singleTransformer.transform();\n+    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n+\n+    // TODO handle other type of constraints, e.g CompositeConstraint\n+    if (sConstraintExpr instanceof SingleConstraint) {\n+      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n+      return canSatisfySingleConstraint(appId, single, node, atm);\n+    } else {\n+      throw new InvalidAllocationTagsQueryException(\n+          \"Unsupported type of constraint.\");\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static boolean canSatisfyConstraints(ApplicationId appId,\n      PlacementConstraint constraint, SchedulerNode node,\n      AllocationTagsManager atm)\n      throws InvalidAllocationTagsQueryException {\n    if (constraint \u003d\u003d null) {\n      return true;\n    }\n\n    // If this is a single constraint, transform to SingleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(constraint);\n    constraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d constraint.getConstraintExpr();\n\n    // TODO handle other type of constraints, e.g CompositeConstraint\n    if (sConstraintExpr instanceof SingleConstraint) {\n      SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n      return canSatisfySingleConstraint(appId, single, node, atm);\n    } else {\n      throw new InvalidAllocationTagsQueryException(\n          \"Unsupported type of constraint.\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,16 @@\n+  public static boolean canSatisfySingleConstraint(ApplicationId applicationId,\n+      PlacementConstraint placementConstraint, SchedulerNode node,\n+      AllocationTagsManager tagsManager)\n+      throws InvalidAllocationTagsQueryException {\n+    if (placementConstraint \u003d\u003d null) {\n+      return true;\n+    }\n+    // Transform to SimpleConstraint\n+    SingleConstraintTransformer singleTransformer \u003d\n+        new SingleConstraintTransformer(placementConstraint);\n+    placementConstraint \u003d singleTransformer.transform();\n+    AbstractConstraint sConstraintExpr \u003d placementConstraint.getConstraintExpr();\n+    SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n+\n+    return canSatisfySingleConstraint(applicationId, single, node, tagsManager);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static boolean canSatisfySingleConstraint(ApplicationId applicationId,\n      PlacementConstraint placementConstraint, SchedulerNode node,\n      AllocationTagsManager tagsManager)\n      throws InvalidAllocationTagsQueryException {\n    if (placementConstraint \u003d\u003d null) {\n      return true;\n    }\n    // Transform to SimpleConstraint\n    SingleConstraintTransformer singleTransformer \u003d\n        new SingleConstraintTransformer(placementConstraint);\n    placementConstraint \u003d singleTransformer.transform();\n    AbstractConstraint sConstraintExpr \u003d placementConstraint.getConstraintExpr();\n    SingleConstraint single \u003d (SingleConstraint) sConstraintExpr;\n\n    return canSatisfySingleConstraint(applicationId, single, node, tagsManager);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java"
    }
  }
}