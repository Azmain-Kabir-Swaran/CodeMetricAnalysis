{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "resolveNNAddr",
  "functionId": "resolveNNAddr",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 1956,
  "functionEndLine": 1980,
  "numCommitsSeen": 179,
  "timeTaken": 4478,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "5323d5e388a0b65b5b6670387c2efb6bed98a235",
    "e90687f90ee2ec76baeac49df8423524b7e83586"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ymultichange(Yexceptionschange,Ybodychange)",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Yfilerename",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ybodychange",
    "5323d5e388a0b65b5b6670387c2efb6bed98a235": "Ybodychange",
    "e90687f90ee2ec76baeac49df8423524b7e83586": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
          "commitDate": "03/10/15 11:38 AM",
          "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "29/09/15 5:52 PM",
          "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private InetSocketAddress[] resolveNNAddr() throws IOException {\n+  private InetSocketAddress[] resolveNNAddr() {\n     Configuration conf \u003d getConf();\n     final String scheme \u003d uri.getScheme();\n \n-    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n+    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003c\u003e();\n \n     if (!HAUtilClient.isLogicalUri(conf, uri)) {\n       InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n           getDefaultPort());\n       ret.add(addr);\n \n     } else {\n       Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtilClient\n           .getHaNnWebHdfsAddresses(conf, scheme);\n \n       // Extract the entry corresponding to the logical name.\n       Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n       for (InetSocketAddress addr : addrs.values()) {\n         ret.add(addr);\n       }\n     }\n \n     InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n     return ret.toArray(r);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private InetSocketAddress[] resolveNNAddr() {\n    Configuration conf \u003d getConf();\n    final String scheme \u003d uri.getScheme();\n\n    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003c\u003e();\n\n    if (!HAUtilClient.isLogicalUri(conf, uri)) {\n      InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n          getDefaultPort());\n      ret.add(addr);\n\n    } else {\n      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtilClient\n          .getHaNnWebHdfsAddresses(conf, scheme);\n\n      // Extract the entry corresponding to the logical name.\n      Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n      for (InetSocketAddress addr : addrs.values()) {\n        ret.add(addr);\n      }\n    }\n\n    InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n    return ret.toArray(r);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
          "commitDate": "03/10/15 11:38 AM",
          "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "29/09/15 5:52 PM",
          "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 3.74,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  private InetSocketAddress[] resolveNNAddr() throws IOException {\n+  private InetSocketAddress[] resolveNNAddr() {\n     Configuration conf \u003d getConf();\n     final String scheme \u003d uri.getScheme();\n \n-    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n+    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003c\u003e();\n \n     if (!HAUtilClient.isLogicalUri(conf, uri)) {\n       InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n           getDefaultPort());\n       ret.add(addr);\n \n     } else {\n       Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtilClient\n           .getHaNnWebHdfsAddresses(conf, scheme);\n \n       // Extract the entry corresponding to the logical name.\n       Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n       for (InetSocketAddress addr : addrs.values()) {\n         ret.add(addr);\n       }\n     }\n \n     InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n     return ret.toArray(r);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private InetSocketAddress[] resolveNNAddr() {\n    Configuration conf \u003d getConf();\n    final String scheme \u003d uri.getScheme();\n\n    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003c\u003e();\n\n    if (!HAUtilClient.isLogicalUri(conf, uri)) {\n      InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n          getDefaultPort());\n      ret.add(addr);\n\n    } else {\n      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtilClient\n          .getHaNnWebHdfsAddresses(conf, scheme);\n\n      // Extract the entry corresponding to the logical name.\n      Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n      for (InetSocketAddress addr : addrs.values()) {\n        ret.add(addr);\n      }\n    }\n\n    InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n    return ret.toArray(r);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private InetSocketAddress[] resolveNNAddr() throws IOException {\n    Configuration conf \u003d getConf();\n    final String scheme \u003d uri.getScheme();\n\n    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    if (!HAUtilClient.isLogicalUri(conf, uri)) {\n      InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n          getDefaultPort());\n      ret.add(addr);\n\n    } else {\n      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtilClient\n          .getHaNnWebHdfsAddresses(conf, scheme);\n\n      // Extract the entry corresponding to the logical name.\n      Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n      for (InetSocketAddress addr : addrs.values()) {\n        ret.add(addr);\n      }\n    }\n\n    InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n    return ret.toArray(r);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
      }
    },
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "20/04/15 12:36 AM",
      "commitNameOld": "5c97db07fb306842f49d73a67a90cecec19a7833",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.89,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private InetSocketAddress[] resolveNNAddr() throws IOException {\n     Configuration conf \u003d getConf();\n     final String scheme \u003d uri.getScheme();\n \n     ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n \n-    if (!HAUtil.isLogicalUri(conf, uri)) {\n+    if (!HAUtilClient.isLogicalUri(conf, uri)) {\n       InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n           getDefaultPort());\n       ret.add(addr);\n \n     } else {\n-      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtil\n+      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtilClient\n           .getHaNnWebHdfsAddresses(conf, scheme);\n \n       // Extract the entry corresponding to the logical name.\n       Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n       for (InetSocketAddress addr : addrs.values()) {\n         ret.add(addr);\n       }\n     }\n \n     InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n     return ret.toArray(r);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private InetSocketAddress[] resolveNNAddr() throws IOException {\n    Configuration conf \u003d getConf();\n    final String scheme \u003d uri.getScheme();\n\n    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    if (!HAUtilClient.isLogicalUri(conf, uri)) {\n      InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n          getDefaultPort());\n      ret.add(addr);\n\n    } else {\n      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtilClient\n          .getHaNnWebHdfsAddresses(conf, scheme);\n\n      // Extract the entry corresponding to the logical name.\n      Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n      for (InetSocketAddress addr : addrs.values()) {\n        ret.add(addr);\n      }\n    }\n\n    InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n    return ret.toArray(r);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "5323d5e388a0b65b5b6670387c2efb6bed98a235": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6313. WebHdfs may use the wrong NN when configured for multiple HA NNs. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/14 7:01 PM",
      "commitName": "5323d5e388a0b65b5b6670387c2efb6bed98a235",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "23/04/14 3:00 PM",
      "commitNameOld": "53cb787d48eead93bfa47faac469d88ec464146a",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 15.17,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private InetSocketAddress[] resolveNNAddr() throws IOException {\n     Configuration conf \u003d getConf();\n     final String scheme \u003d uri.getScheme();\n \n     ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n \n     if (!HAUtil.isLogicalUri(conf, uri)) {\n       InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n           getDefaultPort());\n       ret.add(addr);\n \n     } else {\n       Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtil\n           .getHaNnWebHdfsAddresses(conf, scheme);\n \n-      for (Map\u003cString, InetSocketAddress\u003e addrs : addresses.values()) {\n-        for (InetSocketAddress addr : addrs.values()) {\n-          ret.add(addr);\n-        }\n+      // Extract the entry corresponding to the logical name.\n+      Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n+      for (InetSocketAddress addr : addrs.values()) {\n+        ret.add(addr);\n       }\n     }\n \n     InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n     return ret.toArray(r);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private InetSocketAddress[] resolveNNAddr() throws IOException {\n    Configuration conf \u003d getConf();\n    final String scheme \u003d uri.getScheme();\n\n    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    if (!HAUtil.isLogicalUri(conf, uri)) {\n      InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n          getDefaultPort());\n      ret.add(addr);\n\n    } else {\n      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtil\n          .getHaNnWebHdfsAddresses(conf, scheme);\n\n      // Extract the entry corresponding to the logical name.\n      Map\u003cString, InetSocketAddress\u003e addrs \u003d addresses.get(uri.getHost());\n      for (InetSocketAddress addr : addrs.values()) {\n        ret.add(addr);\n      }\n    }\n\n    InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n    return ret.toArray(r);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "e90687f90ee2ec76baeac49df8423524b7e83586": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5321. Clean up the HTTP-related configuration in HDFS. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574270 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/14 4:28 PM",
      "commitName": "e90687f90ee2ec76baeac49df8423524b7e83586",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,25 @@\n+  private InetSocketAddress[] resolveNNAddr() throws IOException {\n+    Configuration conf \u003d getConf();\n+    final String scheme \u003d uri.getScheme();\n+\n+    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n+\n+    if (!HAUtil.isLogicalUri(conf, uri)) {\n+      InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n+          getDefaultPort());\n+      ret.add(addr);\n+\n+    } else {\n+      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtil\n+          .getHaNnWebHdfsAddresses(conf, scheme);\n+\n+      for (Map\u003cString, InetSocketAddress\u003e addrs : addresses.values()) {\n+        for (InetSocketAddress addr : addrs.values()) {\n+          ret.add(addr);\n+        }\n+      }\n+    }\n+\n+    InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n+    return ret.toArray(r);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private InetSocketAddress[] resolveNNAddr() throws IOException {\n    Configuration conf \u003d getConf();\n    final String scheme \u003d uri.getScheme();\n\n    ArrayList\u003cInetSocketAddress\u003e ret \u003d new ArrayList\u003cInetSocketAddress\u003e();\n\n    if (!HAUtil.isLogicalUri(conf, uri)) {\n      InetSocketAddress addr \u003d NetUtils.createSocketAddr(uri.getAuthority(),\n          getDefaultPort());\n      ret.add(addr);\n\n    } else {\n      Map\u003cString, Map\u003cString, InetSocketAddress\u003e\u003e addresses \u003d DFSUtil\n          .getHaNnWebHdfsAddresses(conf, scheme);\n\n      for (Map\u003cString, InetSocketAddress\u003e addrs : addresses.values()) {\n        for (InetSocketAddress addr : addrs.values()) {\n          ret.add(addr);\n        }\n      }\n    }\n\n    InetSocketAddress[] r \u003d new InetSocketAddress[ret.size()];\n    return ret.toArray(r);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}