{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GaloisField.java",
  "functionName": "gaussianElimination",
  "functionId": "gaussianElimination___matrix-int[][]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GaloisField.java",
  "functionStartLine": 523,
  "functionEndLine": 562,
  "numCommitsSeen": 7,
  "timeTaken": 698,
  "changeHistory": [
    "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf"
  ],
  "changeHistoryShort": {
    "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11542. Raw Reed-Solomon coder in pure Java. Contributed by Kai Zheng\n",
      "commitDate": "26/05/15 11:07 AM",
      "commitName": "dae27f6dd14ac3ed0b9821a3c5239569b13f6adf",
      "commitAuthor": "drankye",
      "diff": "@@ -0,0 +1,40 @@\n+  public void gaussianElimination(int[][] matrix) {\n+    assert(matrix !\u003d null \u0026\u0026 matrix.length \u003e 0 \u0026\u0026 matrix[0].length \u003e 0\n+        \u0026\u0026 matrix.length \u003c matrix[0].length);\n+    int height \u003d matrix.length;\n+    int width \u003d matrix[0].length;\n+    for (int i \u003d 0; i \u003c height; i++) {\n+      boolean pivotFound \u003d false;\n+      // scan the column for a nonzero pivot and swap it to the diagonal\n+      for (int j \u003d i; j \u003c height; j++) {\n+        if (matrix[i][j] !\u003d 0) {\n+          int[] tmp \u003d matrix[i];\n+          matrix[i] \u003d matrix[j];\n+          matrix[j] \u003d tmp;\n+          pivotFound \u003d true;\n+          break;\n+        }\n+      }\n+      if (!pivotFound) {\n+        continue;\n+      }\n+      int pivot \u003d matrix[i][i];\n+      for (int j \u003d i; j \u003c width; j++) {\n+        matrix[i][j] \u003d divide(matrix[i][j], pivot);\n+      }\n+      for (int j \u003d i + 1; j \u003c height; j++) {\n+        int lead \u003d matrix[j][i];\n+        for (int k \u003d i; k \u003c width; k++) {\n+          matrix[j][k] \u003d add(matrix[j][k], multiply(lead, matrix[i][k]));\n+        }\n+      }\n+    }\n+    for (int i \u003d height - 1; i \u003e\u003d0; i--) {\n+      for (int j \u003d 0; j \u003c i; j++) {\n+        int lead \u003d matrix[j][i];\n+        for (int k \u003d i; k \u003c width; k++) {\n+          matrix[j][k] \u003d add(matrix[j][k], multiply(lead, matrix[i][k]));\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void gaussianElimination(int[][] matrix) {\n    assert(matrix !\u003d null \u0026\u0026 matrix.length \u003e 0 \u0026\u0026 matrix[0].length \u003e 0\n        \u0026\u0026 matrix.length \u003c matrix[0].length);\n    int height \u003d matrix.length;\n    int width \u003d matrix[0].length;\n    for (int i \u003d 0; i \u003c height; i++) {\n      boolean pivotFound \u003d false;\n      // scan the column for a nonzero pivot and swap it to the diagonal\n      for (int j \u003d i; j \u003c height; j++) {\n        if (matrix[i][j] !\u003d 0) {\n          int[] tmp \u003d matrix[i];\n          matrix[i] \u003d matrix[j];\n          matrix[j] \u003d tmp;\n          pivotFound \u003d true;\n          break;\n        }\n      }\n      if (!pivotFound) {\n        continue;\n      }\n      int pivot \u003d matrix[i][i];\n      for (int j \u003d i; j \u003c width; j++) {\n        matrix[i][j] \u003d divide(matrix[i][j], pivot);\n      }\n      for (int j \u003d i + 1; j \u003c height; j++) {\n        int lead \u003d matrix[j][i];\n        for (int k \u003d i; k \u003c width; k++) {\n          matrix[j][k] \u003d add(matrix[j][k], multiply(lead, matrix[i][k]));\n        }\n      }\n    }\n    for (int i \u003d height - 1; i \u003e\u003d0; i--) {\n      for (int j \u003d 0; j \u003c i; j++) {\n        int lead \u003d matrix[j][i];\n        for (int k \u003d i; k \u003c width; k++) {\n          matrix[j][k] \u003d add(matrix[j][k], multiply(lead, matrix[i][k]));\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GaloisField.java"
    }
  }
}