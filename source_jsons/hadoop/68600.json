{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StreamJob.java",
  "functionName": "parseArgv",
  "functionId": "parseArgv",
  "sourceFilePath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java",
  "functionStartLine": 249,
  "functionEndLine": 374,
  "numCommitsSeen": 22,
  "timeTaken": 5203,
  "changeHistory": [
    "4222c971080f2b150713727092c7197df58c88e5",
    "41c4cd08a0feb2fa6b1125ab70504ab70fe59a09",
    "40c3b7f0b2d0e5bfcdc748bddb3de6a8dd3648d4",
    "a9808de0d9a73a99c10a3e4290ec20778fed4f24",
    "7afb9aca709bc5d34a4661c816b6941189d85cb1",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "b8e8b8da75baf62ac7465e64acf17f280475bb20",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "4222c971080f2b150713727092c7197df58c88e5": "Ybodychange",
    "41c4cd08a0feb2fa6b1125ab70504ab70fe59a09": "Ybodychange",
    "40c3b7f0b2d0e5bfcdc748bddb3de6a8dd3648d4": "Ybodychange",
    "a9808de0d9a73a99c10a3e4290ec20778fed4f24": "Ybodychange",
    "7afb9aca709bc5d34a4661c816b6941189d85cb1": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "b8e8b8da75baf62ac7465e64acf17f280475bb20": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4222c971080f2b150713727092c7197df58c88e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10392. Use FileSystem#makeQualified(Path) instead of Path#makeQualified(FileSystem) (ajisakaa via aw)\n",
      "commitDate": "11/08/17 9:25 AM",
      "commitName": "4222c971080f2b150713727092c7197df58c88e5",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "31/03/16 7:51 AM",
      "commitNameOld": "0a74610d1c7c7f183d2b2d0b7a775add53cf6c94",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 498.07,
      "commitsBetweenForRepo": 3211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,124 +1,126 @@\n   void parseArgv() {\n     CommandLine cmdLine \u003d null;\n     try {\n       cmdLine \u003d parser.parse(allOptions, argv_);\n     } catch(Exception oe) {\n       LOG.error(oe.getMessage());\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n \n     if (cmdLine !\u003d null) {\n       @SuppressWarnings(\"unchecked\")\n       List\u003cString\u003e args \u003d cmdLine.getArgList();\n       if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n         fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n             \"command line \" + args);\n       }\n       \n       detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n       if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n         printUsage \u003d true;\n         return;\n       }\n       verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n       background_ \u003d  cmdLine.hasOption(\"background\");\n       debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n \n       String[] values \u003d cmdLine.getOptionValues(\"input\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         for (String input : values) {\n           inputSpecs_.add(input);\n         }\n       }\n       output_ \u003d  cmdLine.getOptionValue(\"output\");\n \n       mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n       comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n       redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n \n       lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n \n       values \u003d cmdLine.getOptionValues(\"file\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         LOG.warn(\"-file option is deprecated, please use generic option\" +\n         \t\t\" -files instead.\");\n \n         StringBuffer fileList \u003d new StringBuffer();\n         for (String file : values) {\n           packageFiles_.add(file);\n           try {\n             Path path \u003d new Path(file);\n             FileSystem localFs \u003d FileSystem.getLocal(config_);\n-            String finalPath \u003d path.makeQualified(localFs).toString();\n+            Path qualifiedPath \u003d path.makeQualified(\n+                localFs.getUri(), localFs.getWorkingDirectory());\n+            validate(qualifiedPath);\n+            String finalPath \u003d qualifiedPath.toString();\n             if(fileList.length() \u003e 0) {\n               fileList.append(\u0027,\u0027);\n             }\n             fileList.append(finalPath);\n           } catch (Exception e) {\n             throw new IllegalArgumentException(e);\n           }\n         }\n         String tmpFiles \u003d config_.get(\"tmpfiles\", \"\");\n         if (tmpFiles.isEmpty()) {\n           tmpFiles \u003d fileList.toString();\n         } else {\n           tmpFiles \u003d tmpFiles + \",\" + fileList;\n         }\n         config_.set(\"tmpfiles\", tmpFiles);\n-        validate(packageFiles_);\n       }\n \n       String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n       if (null !\u003d fsName){\n         LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n         config_.set(\"fs.default.name\", fsName);\n       }\n \n       additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n       inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n       outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n       numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n       partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n       inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n       mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n       reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n       ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n \n       String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n       if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n         LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n         for(String s : car){\n           cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n         }\n       }\n \n       String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n       if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n         LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n         for(String s : caf){\n           cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n         }\n       }\n \n       String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n       if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n         LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n         for(String s : jobconf){\n           String[] parts \u003d s.split(\"\u003d\", 2);\n           config_.set(parts[0], parts[1]);\n         }\n       }\n \n       String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n       if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n         for(String s : cmd) {\n           if (addTaskEnvironment_.length() \u003e 0) {\n             addTaskEnvironment_ +\u003d \" \";\n           }\n           addTaskEnvironment_ +\u003d s;\n         }\n       }\n     } else {\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n\n    if (cmdLine !\u003d null) {\n      @SuppressWarnings(\"unchecked\")\n      List\u003cString\u003e args \u003d cmdLine.getArgList();\n      if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n        fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n            \"command line \" + args);\n      }\n      \n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n\n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\");\n\n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n\n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n\n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n\n        StringBuffer fileList \u003d new StringBuffer();\n        for (String file : values) {\n          packageFiles_.add(file);\n          try {\n            Path path \u003d new Path(file);\n            FileSystem localFs \u003d FileSystem.getLocal(config_);\n            Path qualifiedPath \u003d path.makeQualified(\n                localFs.getUri(), localFs.getWorkingDirectory());\n            validate(qualifiedPath);\n            String finalPath \u003d qualifiedPath.toString();\n            if(fileList.length() \u003e 0) {\n              fileList.append(\u0027,\u0027);\n            }\n            fileList.append(finalPath);\n          } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n        String tmpFiles \u003d config_.get(\"tmpfiles\", \"\");\n        if (tmpFiles.isEmpty()) {\n          tmpFiles \u003d fileList.toString();\n        } else {\n          tmpFiles \u003d tmpFiles + \",\" + fileList;\n        }\n        config_.set(\"tmpfiles\", tmpFiles);\n      }\n\n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n\n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n\n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n        }\n      }\n\n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n\n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {}
    },
    "41c4cd08a0feb2fa6b1125ab70504ab70fe59a09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4885. Streaming tests have multiple failures on Windows. (Chris Nauroth via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467158 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/13 8:00 PM",
      "commitName": "41c4cd08a0feb2fa6b1125ab70504ab70fe59a09",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "01/04/13 2:42 PM",
      "commitNameOld": "806073867ead9492da09ad95596e8e11606ee5c3",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 10.22,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,124 @@\n   void parseArgv() {\n     CommandLine cmdLine \u003d null;\n     try {\n       cmdLine \u003d parser.parse(allOptions, argv_);\n     } catch(Exception oe) {\n       LOG.error(oe.getMessage());\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n \n     if (cmdLine !\u003d null) {\n       @SuppressWarnings(\"unchecked\")\n       List\u003cString\u003e args \u003d cmdLine.getArgList();\n       if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n         fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n             \"command line \" + args);\n       }\n       \n       detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n       if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n         printUsage \u003d true;\n         return;\n       }\n       verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n       background_ \u003d  cmdLine.hasOption(\"background\");\n       debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n \n       String[] values \u003d cmdLine.getOptionValues(\"input\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         for (String input : values) {\n           inputSpecs_.add(input);\n         }\n       }\n       output_ \u003d  cmdLine.getOptionValue(\"output\");\n \n       mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n       comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n       redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n \n       lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n \n       values \u003d cmdLine.getOptionValues(\"file\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         LOG.warn(\"-file option is deprecated, please use generic option\" +\n         \t\t\" -files instead.\");\n \n         StringBuffer fileList \u003d new StringBuffer();\n         for (String file : values) {\n           packageFiles_.add(file);\n           try {\n-            URI pathURI \u003d new URI(file);\n-            Path path \u003d new Path(pathURI);\n+            Path path \u003d new Path(file);\n             FileSystem localFs \u003d FileSystem.getLocal(config_);\n             String finalPath \u003d path.makeQualified(localFs).toString();\n             if(fileList.length() \u003e 0) {\n               fileList.append(\u0027,\u0027);\n             }\n             fileList.append(finalPath);\n           } catch (Exception e) {\n             throw new IllegalArgumentException(e);\n           }\n         }\n         String tmpFiles \u003d config_.get(\"tmpfiles\", \"\");\n         if (tmpFiles.isEmpty()) {\n           tmpFiles \u003d fileList.toString();\n         } else {\n           tmpFiles \u003d tmpFiles + \",\" + fileList;\n         }\n         config_.set(\"tmpfiles\", tmpFiles);\n         validate(packageFiles_);\n       }\n \n       String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n       if (null !\u003d fsName){\n         LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n         config_.set(\"fs.default.name\", fsName);\n       }\n \n       additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n       inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n       outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n       numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n       partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n       inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n       mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n       reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n       ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n \n       String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n       if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n         LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n         for(String s : car){\n           cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n         }\n       }\n \n       String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n       if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n         LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n         for(String s : caf){\n           cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n         }\n       }\n \n       String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n       if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n         LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n         for(String s : jobconf){\n           String[] parts \u003d s.split(\"\u003d\", 2);\n           config_.set(parts[0], parts[1]);\n         }\n       }\n \n       String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n       if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n         for(String s : cmd) {\n           if (addTaskEnvironment_.length() \u003e 0) {\n             addTaskEnvironment_ +\u003d \" \";\n           }\n           addTaskEnvironment_ +\u003d s;\n         }\n       }\n     } else {\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n\n    if (cmdLine !\u003d null) {\n      @SuppressWarnings(\"unchecked\")\n      List\u003cString\u003e args \u003d cmdLine.getArgList();\n      if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n        fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n            \"command line \" + args);\n      }\n      \n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n\n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\");\n\n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n\n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n\n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n\n        StringBuffer fileList \u003d new StringBuffer();\n        for (String file : values) {\n          packageFiles_.add(file);\n          try {\n            Path path \u003d new Path(file);\n            FileSystem localFs \u003d FileSystem.getLocal(config_);\n            String finalPath \u003d path.makeQualified(localFs).toString();\n            if(fileList.length() \u003e 0) {\n              fileList.append(\u0027,\u0027);\n            }\n            fileList.append(finalPath);\n          } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n        String tmpFiles \u003d config_.get(\"tmpfiles\", \"\");\n        if (tmpFiles.isEmpty()) {\n          tmpFiles \u003d fileList.toString();\n        } else {\n          tmpFiles \u003d tmpFiles + \",\" + fileList;\n        }\n        config_.set(\"tmpfiles\", tmpFiles);\n        validate(packageFiles_);\n      }\n\n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n\n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n\n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n        }\n      }\n\n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n\n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {}
    },
    "40c3b7f0b2d0e5bfcdc748bddb3de6a8dd3648d4": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4793. Problem with adding resources when using both -files and -file to hadoop streaming. Contributed by Jason Lowe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1425177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/12/12 3:05 PM",
      "commitName": "40c3b7f0b2d0e5bfcdc748bddb3de6a8dd3648d4",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "31/07/12 12:20 PM",
      "commitNameOld": "735b50e8bd23f7fbeff3a08cf8f3fff8cbff7449",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 143.16,
      "commitsBetweenForRepo": 786,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,119 +1,125 @@\n   void parseArgv() {\n     CommandLine cmdLine \u003d null;\n     try {\n       cmdLine \u003d parser.parse(allOptions, argv_);\n     } catch(Exception oe) {\n       LOG.error(oe.getMessage());\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n \n     if (cmdLine !\u003d null) {\n       @SuppressWarnings(\"unchecked\")\n       List\u003cString\u003e args \u003d cmdLine.getArgList();\n       if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n         fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n             \"command line \" + args);\n       }\n       \n       detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n       if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n         printUsage \u003d true;\n         return;\n       }\n       verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n       background_ \u003d  cmdLine.hasOption(\"background\");\n       debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n \n       String[] values \u003d cmdLine.getOptionValues(\"input\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         for (String input : values) {\n           inputSpecs_.add(input);\n         }\n       }\n       output_ \u003d  cmdLine.getOptionValue(\"output\");\n \n       mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n       comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n       redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n \n       lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n \n       values \u003d cmdLine.getOptionValues(\"file\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         LOG.warn(\"-file option is deprecated, please use generic option\" +\n         \t\t\" -files instead.\");\n \n         StringBuffer fileList \u003d new StringBuffer();\n         for (String file : values) {\n           packageFiles_.add(file);\n           try {\n             URI pathURI \u003d new URI(file);\n             Path path \u003d new Path(pathURI);\n             FileSystem localFs \u003d FileSystem.getLocal(config_);\n             String finalPath \u003d path.makeQualified(localFs).toString();\n             if(fileList.length() \u003e 0) {\n               fileList.append(\u0027,\u0027);\n             }\n             fileList.append(finalPath);\n           } catch (Exception e) {\n             throw new IllegalArgumentException(e);\n           }\n         }\n-        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") + fileList);\n+        String tmpFiles \u003d config_.get(\"tmpfiles\", \"\");\n+        if (tmpFiles.isEmpty()) {\n+          tmpFiles \u003d fileList.toString();\n+        } else {\n+          tmpFiles \u003d tmpFiles + \",\" + fileList;\n+        }\n+        config_.set(\"tmpfiles\", tmpFiles);\n         validate(packageFiles_);\n       }\n \n       String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n       if (null !\u003d fsName){\n         LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n         config_.set(\"fs.default.name\", fsName);\n       }\n \n       additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n       inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n       outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n       numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n       partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n       inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n       mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n       reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n       ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n \n       String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n       if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n         LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n         for(String s : car){\n           cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n         }\n       }\n \n       String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n       if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n         LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n         for(String s : caf){\n           cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n         }\n       }\n \n       String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n       if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n         LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n         for(String s : jobconf){\n           String[] parts \u003d s.split(\"\u003d\", 2);\n           config_.set(parts[0], parts[1]);\n         }\n       }\n \n       String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n       if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n         for(String s : cmd) {\n           if (addTaskEnvironment_.length() \u003e 0) {\n             addTaskEnvironment_ +\u003d \" \";\n           }\n           addTaskEnvironment_ +\u003d s;\n         }\n       }\n     } else {\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n\n    if (cmdLine !\u003d null) {\n      @SuppressWarnings(\"unchecked\")\n      List\u003cString\u003e args \u003d cmdLine.getArgList();\n      if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n        fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n            \"command line \" + args);\n      }\n      \n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n\n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\");\n\n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n\n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n\n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n\n        StringBuffer fileList \u003d new StringBuffer();\n        for (String file : values) {\n          packageFiles_.add(file);\n          try {\n            URI pathURI \u003d new URI(file);\n            Path path \u003d new Path(pathURI);\n            FileSystem localFs \u003d FileSystem.getLocal(config_);\n            String finalPath \u003d path.makeQualified(localFs).toString();\n            if(fileList.length() \u003e 0) {\n              fileList.append(\u0027,\u0027);\n            }\n            fileList.append(finalPath);\n          } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n        String tmpFiles \u003d config_.get(\"tmpfiles\", \"\");\n        if (tmpFiles.isEmpty()) {\n          tmpFiles \u003d fileList.toString();\n        } else {\n          tmpFiles \u003d tmpFiles + \",\" + fileList;\n        }\n        config_.set(\"tmpfiles\", tmpFiles);\n        validate(packageFiles_);\n      }\n\n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n\n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n\n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n        }\n      }\n\n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n\n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {}
    },
    "a9808de0d9a73a99c10a3e4290ec20778fed4f24": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8341. Fix or filter findbugs issues in hadoop-tools (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335505 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 6:20 AM",
      "commitName": "a9808de0d9a73a99c10a3e4290ec20778fed4f24",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "29/12/11 12:24 AM",
      "commitNameOld": "7afb9aca709bc5d34a4661c816b6941189d85cb1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 131.21,
      "commitsBetweenForRepo": 960,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,117 +1,119 @@\n   void parseArgv() {\n     CommandLine cmdLine \u003d null;\n     try {\n       cmdLine \u003d parser.parse(allOptions, argv_);\n     } catch(Exception oe) {\n       LOG.error(oe.getMessage());\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n \n     if (cmdLine !\u003d null) {\n       @SuppressWarnings(\"unchecked\")\n       List\u003cString\u003e args \u003d cmdLine.getArgList();\n       if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n         fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n             \"command line \" + args);\n       }\n       \n       detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n       if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n         printUsage \u003d true;\n         return;\n       }\n       verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n       background_ \u003d  cmdLine.hasOption(\"background\");\n       debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n \n       String[] values \u003d cmdLine.getOptionValues(\"input\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         for (String input : values) {\n           inputSpecs_.add(input);\n         }\n       }\n       output_ \u003d  cmdLine.getOptionValue(\"output\");\n \n       mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n       comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n       redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n \n       lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n \n       values \u003d cmdLine.getOptionValues(\"file\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         LOG.warn(\"-file option is deprecated, please use generic option\" +\n         \t\t\" -files instead.\");\n \n-        String fileList \u003d null;\n+        StringBuffer fileList \u003d new StringBuffer();\n         for (String file : values) {\n           packageFiles_.add(file);\n           try {\n             URI pathURI \u003d new URI(file);\n             Path path \u003d new Path(pathURI);\n             FileSystem localFs \u003d FileSystem.getLocal(config_);\n             String finalPath \u003d path.makeQualified(localFs).toString();\n-            fileList \u003d fileList \u003d\u003d null ? finalPath : fileList + \",\" + finalPath;\n+            if(fileList.length() \u003e 0) {\n+              fileList.append(\u0027,\u0027);\n+            }\n+            fileList.append(finalPath);\n           } catch (Exception e) {\n             throw new IllegalArgumentException(e);\n           }\n         }\n-        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") +\n-                                  (fileList \u003d\u003d null ? \"\" : fileList));\n+        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") + fileList);\n         validate(packageFiles_);\n       }\n \n       String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n       if (null !\u003d fsName){\n         LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n         config_.set(\"fs.default.name\", fsName);\n       }\n \n       additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n       inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n       outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n       numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n       partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n       inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n       mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n       reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n       ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n \n       String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n       if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n         LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n         for(String s : car){\n           cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n         }\n       }\n \n       String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n       if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n         LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n         for(String s : caf){\n           cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n         }\n       }\n \n       String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n       if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n         LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n         for(String s : jobconf){\n           String[] parts \u003d s.split(\"\u003d\", 2);\n           config_.set(parts[0], parts[1]);\n         }\n       }\n \n       String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n       if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n         for(String s : cmd) {\n           if (addTaskEnvironment_.length() \u003e 0) {\n             addTaskEnvironment_ +\u003d \" \";\n           }\n           addTaskEnvironment_ +\u003d s;\n         }\n       }\n     } else {\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n\n    if (cmdLine !\u003d null) {\n      @SuppressWarnings(\"unchecked\")\n      List\u003cString\u003e args \u003d cmdLine.getArgList();\n      if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n        fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n            \"command line \" + args);\n      }\n      \n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n\n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\");\n\n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n\n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n\n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n\n        StringBuffer fileList \u003d new StringBuffer();\n        for (String file : values) {\n          packageFiles_.add(file);\n          try {\n            URI pathURI \u003d new URI(file);\n            Path path \u003d new Path(pathURI);\n            FileSystem localFs \u003d FileSystem.getLocal(config_);\n            String finalPath \u003d path.makeQualified(localFs).toString();\n            if(fileList.length() \u003e 0) {\n              fileList.append(\u0027,\u0027);\n            }\n            fileList.append(finalPath);\n          } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") + fileList);\n        validate(packageFiles_);\n      }\n\n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n\n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n\n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n        }\n      }\n\n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n\n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {}
    },
    "7afb9aca709bc5d34a4661c816b6941189d85cb1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3521. Fixed streaming to ensure it doesn\u0027t silently ignore unknown arguments. Contributed by Robert Evans. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1225471 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/12/11 12:24 AM",
      "commitName": "7afb9aca709bc5d34a4661c816b6941189d85cb1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "18/11/11 5:24 PM",
      "commitNameOld": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 40.29,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,117 @@\n   void parseArgv() {\n     CommandLine cmdLine \u003d null;\n     try {\n       cmdLine \u003d parser.parse(allOptions, argv_);\n     } catch(Exception oe) {\n       LOG.error(oe.getMessage());\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n \n     if (cmdLine !\u003d null) {\n+      @SuppressWarnings(\"unchecked\")\n+      List\u003cString\u003e args \u003d cmdLine.getArgList();\n+      if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n+        fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n+            \"command line \" + args);\n+      }\n+      \n       detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n       if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n         printUsage \u003d true;\n         return;\n       }\n       verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n       background_ \u003d  cmdLine.hasOption(\"background\");\n       debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n \n       String[] values \u003d cmdLine.getOptionValues(\"input\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         for (String input : values) {\n           inputSpecs_.add(input);\n         }\n       }\n       output_ \u003d  cmdLine.getOptionValue(\"output\");\n \n       mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n       comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n       redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n \n       lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n \n       values \u003d cmdLine.getOptionValues(\"file\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         LOG.warn(\"-file option is deprecated, please use generic option\" +\n         \t\t\" -files instead.\");\n \n         String fileList \u003d null;\n         for (String file : values) {\n           packageFiles_.add(file);\n           try {\n             URI pathURI \u003d new URI(file);\n             Path path \u003d new Path(pathURI);\n             FileSystem localFs \u003d FileSystem.getLocal(config_);\n             String finalPath \u003d path.makeQualified(localFs).toString();\n             fileList \u003d fileList \u003d\u003d null ? finalPath : fileList + \",\" + finalPath;\n           } catch (Exception e) {\n             throw new IllegalArgumentException(e);\n           }\n         }\n         config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") +\n                                   (fileList \u003d\u003d null ? \"\" : fileList));\n         validate(packageFiles_);\n       }\n \n       String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n       if (null !\u003d fsName){\n         LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n         config_.set(\"fs.default.name\", fsName);\n       }\n \n       additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n       inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n       outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n       numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n       partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n       inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n       mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n       reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n       ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n \n       String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n       if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n         LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n         for(String s : car){\n           cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n         }\n       }\n \n       String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n       if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n         LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n         for(String s : caf){\n           cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n         }\n       }\n \n       String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n       if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n         LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n         for(String s : jobconf){\n           String[] parts \u003d s.split(\"\u003d\", 2);\n           config_.set(parts[0], parts[1]);\n         }\n       }\n \n       String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n       if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n         for(String s : cmd) {\n           if (addTaskEnvironment_.length() \u003e 0) {\n             addTaskEnvironment_ +\u003d \" \";\n           }\n           addTaskEnvironment_ +\u003d s;\n         }\n       }\n     } else {\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n\n    if (cmdLine !\u003d null) {\n      @SuppressWarnings(\"unchecked\")\n      List\u003cString\u003e args \u003d cmdLine.getArgList();\n      if(args !\u003d null \u0026\u0026 args.size() \u003e 0) {\n        fail(\"Found \" + args.size() + \" unexpected arguments on the \" +\n            \"command line \" + args);\n      }\n      \n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n\n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\");\n\n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n\n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n\n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n\n        String fileList \u003d null;\n        for (String file : values) {\n          packageFiles_.add(file);\n          try {\n            URI pathURI \u003d new URI(file);\n            Path path \u003d new Path(pathURI);\n            FileSystem localFs \u003d FileSystem.getLocal(config_);\n            String finalPath \u003d path.makeQualified(localFs).toString();\n            fileList \u003d fileList \u003d\u003d null ? finalPath : fileList + \",\" + finalPath;\n          } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") +\n                                  (fileList \u003d\u003d null ? \"\" : fileList));\n        validate(packageFiles_);\n      }\n\n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n\n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n\n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n        }\n      }\n\n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n\n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,110 @@\n   void parseArgv() {\n     CommandLine cmdLine \u003d null;\n     try {\n       cmdLine \u003d parser.parse(allOptions, argv_);\n     } catch(Exception oe) {\n       LOG.error(oe.getMessage());\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n-    \n+\n     if (cmdLine !\u003d null) {\n       detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n       if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n         printUsage \u003d true;\n         return;\n       }\n       verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n       background_ \u003d  cmdLine.hasOption(\"background\");\n       debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n-      \n+\n       String[] values \u003d cmdLine.getOptionValues(\"input\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         for (String input : values) {\n           inputSpecs_.add(input);\n         }\n       }\n-      output_ \u003d  cmdLine.getOptionValue(\"output\"); \n-      \n-      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\"); \n-      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\"); \n-      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\"); \n-      \n+      output_ \u003d  cmdLine.getOptionValue(\"output\");\n+\n+      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n+      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n+      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n+\n       lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n-      \n+\n       values \u003d cmdLine.getOptionValues(\"file\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         LOG.warn(\"-file option is deprecated, please use generic option\" +\n         \t\t\" -files instead.\");\n \n         String fileList \u003d null;\n         for (String file : values) {\n           packageFiles_.add(file);\n           try {\n             URI pathURI \u003d new URI(file);\n             Path path \u003d new Path(pathURI);\n             FileSystem localFs \u003d FileSystem.getLocal(config_);\n             String finalPath \u003d path.makeQualified(localFs).toString();\n             fileList \u003d fileList \u003d\u003d null ? finalPath : fileList + \",\" + finalPath;\n           } catch (Exception e) {\n             throw new IllegalArgumentException(e);\n           }\n         }\n         config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") +\n                                   (fileList \u003d\u003d null ? \"\" : fileList));\n         validate(packageFiles_);\n       }\n \n       String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n       if (null !\u003d fsName){\n         LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n         config_.set(\"fs.default.name\", fsName);\n       }\n-      \n-      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\"); \n-      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\"); \n+\n+      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n+      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n       outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n-      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\"); \n+      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n       partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n-      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\"); \n-      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");    \n+      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n+      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n       reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n       ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n-      \n-      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\"); \n+\n+      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n       if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n         LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n         for(String s : car){\n-          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;  \n+          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n         }\n       }\n \n-      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\"); \n+      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n       if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n         LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n         for(String s : caf){\n-          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;  \n+          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n         }\n       }\n-      \n-      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\"); \n+\n+      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n       if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n         LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n         for(String s : jobconf){\n           String[] parts \u003d s.split(\"\u003d\", 2);\n           config_.set(parts[0], parts[1]);\n         }\n       }\n-      \n-      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\"); \n+\n+      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n       if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n         for(String s : cmd) {\n           if (addTaskEnvironment_.length() \u003e 0) {\n             addTaskEnvironment_ +\u003d \" \";\n           }\n           addTaskEnvironment_ +\u003d s;\n         }\n       }\n     } else {\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n\n    if (cmdLine !\u003d null) {\n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n\n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\");\n\n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\");\n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\");\n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\");\n\n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n\n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n\n        String fileList \u003d null;\n        for (String file : values) {\n          packageFiles_.add(file);\n          try {\n            URI pathURI \u003d new URI(file);\n            Path path \u003d new Path(pathURI);\n            FileSystem localFs \u003d FileSystem.getLocal(config_);\n            String finalPath \u003d path.makeQualified(localFs).toString();\n            fileList \u003d fileList \u003d\u003d null ? finalPath : fileList + \",\" + finalPath;\n          } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") +\n                                  (fileList \u003d\u003d null ? \"\" : fileList));\n        validate(packageFiles_);\n      }\n\n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n\n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\");\n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\");\n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\");\n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\");\n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");\n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n\n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\");\n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;\n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\");\n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;\n        }\n      }\n\n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\");\n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n\n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\");\n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java",
        "newPath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/streaming/StreamJob.java"
      }
    },
    "b8e8b8da75baf62ac7465e64acf17f280475bb20": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3018. Fixed -file option for streaming. Contributed by Mahadev Konar.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173451 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/09/11 6:10 PM",
      "commitName": "b8e8b8da75baf62ac7465e64acf17f280475bb20",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 27.04,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,110 @@\n   void parseArgv() {\n     CommandLine cmdLine \u003d null;\n     try {\n       cmdLine \u003d parser.parse(allOptions, argv_);\n     } catch(Exception oe) {\n       LOG.error(oe.getMessage());\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n     \n     if (cmdLine !\u003d null) {\n       detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n       if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n         printUsage \u003d true;\n         return;\n       }\n       verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n       background_ \u003d  cmdLine.hasOption(\"background\");\n       debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n       \n       String[] values \u003d cmdLine.getOptionValues(\"input\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         for (String input : values) {\n           inputSpecs_.add(input);\n         }\n       }\n       output_ \u003d  cmdLine.getOptionValue(\"output\"); \n       \n       mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\"); \n       comCmd_ \u003d cmdLine.getOptionValue(\"combiner\"); \n       redCmd_ \u003d cmdLine.getOptionValue(\"reducer\"); \n       \n       lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n       \n       values \u003d cmdLine.getOptionValues(\"file\");\n       if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n         LOG.warn(\"-file option is deprecated, please use generic option\" +\n         \t\t\" -files instead.\");\n-        StringBuilder unpackRegex \u003d new StringBuilder(\n-          config_.getPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n-                             JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern());\n+\n+        String fileList \u003d null;\n         for (String file : values) {\n           packageFiles_.add(file);\n-          String fname \u003d new File(file).getName();\n-          unpackRegex.append(\"|(?:\").append(Pattern.quote(fname)).append(\")\");\n+          try {\n+            URI pathURI \u003d new URI(file);\n+            Path path \u003d new Path(pathURI);\n+            FileSystem localFs \u003d FileSystem.getLocal(config_);\n+            String finalPath \u003d path.makeQualified(localFs).toString();\n+            fileList \u003d fileList \u003d\u003d null ? finalPath : fileList + \",\" + finalPath;\n+          } catch (Exception e) {\n+            throw new IllegalArgumentException(e);\n+          }\n         }\n-        config_.setPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n-                           Pattern.compile(unpackRegex.toString()));\n+        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") +\n+                                  (fileList \u003d\u003d null ? \"\" : fileList));\n         validate(packageFiles_);\n       }\n-         \n+\n       String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n       if (null !\u003d fsName){\n         LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n         config_.set(\"fs.default.name\", fsName);\n       }\n       \n       additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\"); \n       inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\"); \n       outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n       numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\"); \n       partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n       inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\"); \n       mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");    \n       reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n       ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n       \n       String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\"); \n       if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n         LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n         for(String s : car){\n           cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;  \n         }\n       }\n \n       String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\"); \n       if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n         LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n         for(String s : caf){\n           cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;  \n         }\n       }\n       \n       String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\"); \n       if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n         LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n         for(String s : jobconf){\n           String[] parts \u003d s.split(\"\u003d\", 2);\n           config_.set(parts[0], parts[1]);\n         }\n       }\n       \n       String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\"); \n       if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n         for(String s : cmd) {\n           if (addTaskEnvironment_.length() \u003e 0) {\n             addTaskEnvironment_ +\u003d \" \";\n           }\n           addTaskEnvironment_ +\u003d s;\n         }\n       }\n     } else {\n       exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n    \n    if (cmdLine !\u003d null) {\n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n      \n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\"); \n      \n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\"); \n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\"); \n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\"); \n      \n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n      \n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n\n        String fileList \u003d null;\n        for (String file : values) {\n          packageFiles_.add(file);\n          try {\n            URI pathURI \u003d new URI(file);\n            Path path \u003d new Path(pathURI);\n            FileSystem localFs \u003d FileSystem.getLocal(config_);\n            String finalPath \u003d path.makeQualified(localFs).toString();\n            fileList \u003d fileList \u003d\u003d null ? finalPath : fileList + \",\" + finalPath;\n          } catch (Exception e) {\n            throw new IllegalArgumentException(e);\n          }\n        }\n        config_.set(\"tmpfiles\", config_.get(\"tmpfiles\", \"\") +\n                                  (fileList \u003d\u003d null ? \"\" : fileList));\n        validate(packageFiles_);\n      }\n\n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n      \n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\"); \n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\"); \n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\"); \n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\"); \n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");    \n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n      \n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\"); \n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;  \n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\"); \n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;  \n        }\n      }\n      \n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\"); \n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n      \n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\"); \n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n    \n    if (cmdLine !\u003d null) {\n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n      \n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\"); \n      \n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\"); \n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\"); \n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\"); \n      \n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n      \n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n        StringBuilder unpackRegex \u003d new StringBuilder(\n          config_.getPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n                             JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern());\n        for (String file : values) {\n          packageFiles_.add(file);\n          String fname \u003d new File(file).getName();\n          unpackRegex.append(\"|(?:\").append(Pattern.quote(fname)).append(\")\");\n        }\n        config_.setPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n                           Pattern.compile(unpackRegex.toString()));\n        validate(packageFiles_);\n      }\n         \n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n      \n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\"); \n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\"); \n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\"); \n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\"); \n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");    \n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n      \n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\"); \n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;  \n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\"); \n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;  \n        }\n      }\n      \n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\"); \n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n      \n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\"); \n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n    \n    if (cmdLine !\u003d null) {\n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n      \n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\"); \n      \n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\"); \n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\"); \n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\"); \n      \n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n      \n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n        StringBuilder unpackRegex \u003d new StringBuilder(\n          config_.getPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n                             JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern());\n        for (String file : values) {\n          packageFiles_.add(file);\n          String fname \u003d new File(file).getName();\n          unpackRegex.append(\"|(?:\").append(Pattern.quote(fname)).append(\")\");\n        }\n        config_.setPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n                           Pattern.compile(unpackRegex.toString()));\n        validate(packageFiles_);\n      }\n         \n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n      \n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\"); \n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\"); \n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\"); \n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\"); \n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");    \n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n      \n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\"); \n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;  \n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\"); \n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;  \n        }\n      }\n      \n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\"); \n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n      \n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\"); \n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java",
        "newPath": "hadoop-mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,104 @@\n+  void parseArgv() {\n+    CommandLine cmdLine \u003d null;\n+    try {\n+      cmdLine \u003d parser.parse(allOptions, argv_);\n+    } catch(Exception oe) {\n+      LOG.error(oe.getMessage());\n+      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n+    }\n+    \n+    if (cmdLine !\u003d null) {\n+      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n+      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n+        printUsage \u003d true;\n+        return;\n+      }\n+      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n+      background_ \u003d  cmdLine.hasOption(\"background\");\n+      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n+      \n+      String[] values \u003d cmdLine.getOptionValues(\"input\");\n+      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n+        for (String input : values) {\n+          inputSpecs_.add(input);\n+        }\n+      }\n+      output_ \u003d  cmdLine.getOptionValue(\"output\"); \n+      \n+      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\"); \n+      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\"); \n+      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\"); \n+      \n+      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n+      \n+      values \u003d cmdLine.getOptionValues(\"file\");\n+      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n+        LOG.warn(\"-file option is deprecated, please use generic option\" +\n+        \t\t\" -files instead.\");\n+        StringBuilder unpackRegex \u003d new StringBuilder(\n+          config_.getPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n+                             JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern());\n+        for (String file : values) {\n+          packageFiles_.add(file);\n+          String fname \u003d new File(file).getName();\n+          unpackRegex.append(\"|(?:\").append(Pattern.quote(fname)).append(\")\");\n+        }\n+        config_.setPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n+                           Pattern.compile(unpackRegex.toString()));\n+        validate(packageFiles_);\n+      }\n+         \n+      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n+      if (null !\u003d fsName){\n+        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n+        config_.set(\"fs.default.name\", fsName);\n+      }\n+      \n+      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\"); \n+      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\"); \n+      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n+      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\"); \n+      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n+      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\"); \n+      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");    \n+      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n+      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n+      \n+      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\"); \n+      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n+        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n+        for(String s : car){\n+          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;  \n+        }\n+      }\n+\n+      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\"); \n+      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n+        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n+        for(String s : caf){\n+          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;  \n+        }\n+      }\n+      \n+      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\"); \n+      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n+        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n+        for(String s : jobconf){\n+          String[] parts \u003d s.split(\"\u003d\", 2);\n+          config_.set(parts[0], parts[1]);\n+        }\n+      }\n+      \n+      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\"); \n+      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n+        for(String s : cmd) {\n+          if (addTaskEnvironment_.length() \u003e 0) {\n+            addTaskEnvironment_ +\u003d \" \";\n+          }\n+          addTaskEnvironment_ +\u003d s;\n+        }\n+      }\n+    } else {\n+      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void parseArgv() {\n    CommandLine cmdLine \u003d null;\n    try {\n      cmdLine \u003d parser.parse(allOptions, argv_);\n    } catch(Exception oe) {\n      LOG.error(oe.getMessage());\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n    \n    if (cmdLine !\u003d null) {\n      detailedUsage_ \u003d cmdLine.hasOption(\"info\");\n      if (cmdLine.hasOption(\"help\") || detailedUsage_) {\n        printUsage \u003d true;\n        return;\n      }\n      verbose_ \u003d  cmdLine.hasOption(\"verbose\");\n      background_ \u003d  cmdLine.hasOption(\"background\");\n      debug_ \u003d cmdLine.hasOption(\"debug\")? debug_ + 1 : debug_;\n      \n      String[] values \u003d cmdLine.getOptionValues(\"input\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        for (String input : values) {\n          inputSpecs_.add(input);\n        }\n      }\n      output_ \u003d  cmdLine.getOptionValue(\"output\"); \n      \n      mapCmd_ \u003d cmdLine.getOptionValue(\"mapper\"); \n      comCmd_ \u003d cmdLine.getOptionValue(\"combiner\"); \n      redCmd_ \u003d cmdLine.getOptionValue(\"reducer\"); \n      \n      lazyOutput_ \u003d cmdLine.hasOption(\"lazyOutput\");\n      \n      values \u003d cmdLine.getOptionValues(\"file\");\n      if (values !\u003d null \u0026\u0026 values.length \u003e 0) {\n        LOG.warn(\"-file option is deprecated, please use generic option\" +\n        \t\t\" -files instead.\");\n        StringBuilder unpackRegex \u003d new StringBuilder(\n          config_.getPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n                             JobConf.UNPACK_JAR_PATTERN_DEFAULT).pattern());\n        for (String file : values) {\n          packageFiles_.add(file);\n          String fname \u003d new File(file).getName();\n          unpackRegex.append(\"|(?:\").append(Pattern.quote(fname)).append(\")\");\n        }\n        config_.setPattern(MRJobConfig.JAR_UNPACK_PATTERN,\n                           Pattern.compile(unpackRegex.toString()));\n        validate(packageFiles_);\n      }\n         \n      String fsName \u003d cmdLine.getOptionValue(\"dfs\");\n      if (null !\u003d fsName){\n        LOG.warn(\"-dfs option is deprecated, please use -fs instead.\");\n        config_.set(\"fs.default.name\", fsName);\n      }\n      \n      additionalConfSpec_ \u003d cmdLine.getOptionValue(\"additionalconfspec\"); \n      inputFormatSpec_ \u003d cmdLine.getOptionValue(\"inputformat\"); \n      outputFormatSpec_ \u003d cmdLine.getOptionValue(\"outputformat\");\n      numReduceTasksSpec_ \u003d cmdLine.getOptionValue(\"numReduceTasks\"); \n      partitionerSpec_ \u003d cmdLine.getOptionValue(\"partitioner\");\n      inReaderSpec_ \u003d cmdLine.getOptionValue(\"inputreader\"); \n      mapDebugSpec_ \u003d cmdLine.getOptionValue(\"mapdebug\");    \n      reduceDebugSpec_ \u003d cmdLine.getOptionValue(\"reducedebug\");\n      ioSpec_ \u003d cmdLine.getOptionValue(\"io\");\n      \n      String[] car \u003d cmdLine.getOptionValues(\"cacheArchive\"); \n      if (null !\u003d car \u0026\u0026 car.length \u003e 0){\n        LOG.warn(\"-cacheArchive option is deprecated, please use -archives instead.\");\n        for(String s : car){\n          cacheArchives \u003d (cacheArchives \u003d\u003d null)?s :cacheArchives + \",\" + s;  \n        }\n      }\n\n      String[] caf \u003d cmdLine.getOptionValues(\"cacheFile\"); \n      if (null !\u003d caf \u0026\u0026 caf.length \u003e 0){\n        LOG.warn(\"-cacheFile option is deprecated, please use -files instead.\");\n        for(String s : caf){\n          cacheFiles \u003d (cacheFiles \u003d\u003d null)?s :cacheFiles + \",\" + s;  \n        }\n      }\n      \n      String[] jobconf \u003d cmdLine.getOptionValues(\"jobconf\"); \n      if (null !\u003d jobconf \u0026\u0026 jobconf.length \u003e 0){\n        LOG.warn(\"-jobconf option is deprecated, please use -D instead.\");\n        for(String s : jobconf){\n          String[] parts \u003d s.split(\"\u003d\", 2);\n          config_.set(parts[0], parts[1]);\n        }\n      }\n      \n      String[] cmd \u003d cmdLine.getOptionValues(\"cmdenv\"); \n      if (null !\u003d cmd \u0026\u0026 cmd.length \u003e 0){\n        for(String s : cmd) {\n          if (addTaskEnvironment_.length() \u003e 0) {\n            addTaskEnvironment_ +\u003d \" \";\n          }\n          addTaskEnvironment_ +\u003d s;\n        }\n      }\n    } else {\n      exitUsage(argv_.length \u003e 0 \u0026\u0026 \"-info\".equals(argv_[0]));\n    }\n  }",
      "path": "mapreduce/src/contrib/streaming/src/java/org/apache/hadoop/streaming/StreamJob.java"
    }
  }
}