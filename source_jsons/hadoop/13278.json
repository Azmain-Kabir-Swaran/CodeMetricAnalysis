{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DatanodeManager.java",
  "functionName": "getDatanodeDescriptor",
  "functionId": "getDatanodeDescriptor___address-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
  "functionStartLine": 610,
  "functionEndLine": 650,
  "numCommitsSeen": 172,
  "timeTaken": 4486,
  "changeHistory": [
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
    "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f",
    "4bb72210c266707806f3ce3e974968a9a137b25b",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec"
  ],
  "changeHistoryShort": {
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": "Ybodychange",
    "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f": "Ybodychange",
    "4bb72210c266707806f3ce3e974968a9a137b25b": "Ybodychange",
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11970. Replace uses of ThreadLocal\u003cRandom\u003e with JDK7 ThreadLocalRandom (Sean Busbey via Colin P. McCabe)\n",
      "commitDate": "19/05/15 10:50 AM",
      "commitName": "470c87dbc6c24dd3b370f1ad9e7ab1f6dabd2080",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "08/05/15 1:18 PM",
      "commitNameOld": "7a7960be41c32f20ffec9fea811878b113da62db",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 10.9,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   DatanodeDescriptor getDatanodeDescriptor(String address) {\n     DatanodeID dnId \u003d parseDNFromHostsEntry(address);\n     String host \u003d dnId.getIpAddr();\n     int xferPort \u003d dnId.getXferPort();\n     DatanodeDescriptor node \u003d getDatanodeByXferAddr(host, xferPort);\n     if (node \u003d\u003d null) {\n       node \u003d getDatanodeByHost(host);\n     }\n     if (node \u003d\u003d null) {\n       String networkLocation \u003d \n           resolveNetworkLocationWithFallBackToDefaultLocation(dnId);\n \n       // If the current cluster doesn\u0027t contain the node, fallback to\n       // something machine local and then rack local.\n       List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n                                    .getDatanodesInRack(networkLocation);\n       if (rackNodes !\u003d null) {\n         // Try something machine local.\n         for (Node rackNode : rackNodes) {\n           if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n             node \u003d (DatanodeDescriptor) rackNode;\n             break;\n           }\n         }\n \n         // Try something rack local.\n         if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n           node \u003d (DatanodeDescriptor) (rackNodes\n-              .get(DFSUtil.getRandom().nextInt(rackNodes.size())));\n+              .get(ThreadLocalRandom.current().nextInt(rackNodes.size())));\n         }\n       }\n \n       // If we can\u0027t even choose rack local, just choose any node in the\n       // cluster.\n       if (node \u003d\u003d null) {\n         node \u003d (DatanodeDescriptor)getNetworkTopology()\n                                    .chooseRandom(NodeBase.ROOT);\n       }\n     }\n     return node;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  DatanodeDescriptor getDatanodeDescriptor(String address) {\n    DatanodeID dnId \u003d parseDNFromHostsEntry(address);\n    String host \u003d dnId.getIpAddr();\n    int xferPort \u003d dnId.getXferPort();\n    DatanodeDescriptor node \u003d getDatanodeByXferAddr(host, xferPort);\n    if (node \u003d\u003d null) {\n      node \u003d getDatanodeByHost(host);\n    }\n    if (node \u003d\u003d null) {\n      String networkLocation \u003d \n          resolveNetworkLocationWithFallBackToDefaultLocation(dnId);\n\n      // If the current cluster doesn\u0027t contain the node, fallback to\n      // something machine local and then rack local.\n      List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n                                   .getDatanodesInRack(networkLocation);\n      if (rackNodes !\u003d null) {\n        // Try something machine local.\n        for (Node rackNode : rackNodes) {\n          if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n            node \u003d (DatanodeDescriptor) rackNode;\n            break;\n          }\n        }\n\n        // Try something rack local.\n        if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n          node \u003d (DatanodeDescriptor) (rackNodes\n              .get(ThreadLocalRandom.current().nextInt(rackNodes.size())));\n        }\n      }\n\n      // If we can\u0027t even choose rack local, just choose any node in the\n      // cluster.\n      if (node \u003d\u003d null) {\n        node \u003d (DatanodeDescriptor)getNetworkTopology()\n                                   .chooseRandom(NodeBase.ROOT);\n      }\n    }\n    return node;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5846. Shuffle phase is slow in Windows - FadviseFileRegion::transferTo does not read disks efficiently. Contributed by Nikola Vujic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581091 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 3:16 PM",
      "commitName": "328fc86bdbf84fcc80a0920b2cacfc2e74ac5c9f",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "24/03/14 8:39 AM",
      "commitNameOld": "7a18c4a1992aefc6f5cac4e0fb6931e0e3efdd1c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   DatanodeDescriptor getDatanodeDescriptor(String address) {\n     DatanodeID dnId \u003d parseDNFromHostsEntry(address);\n     String host \u003d dnId.getIpAddr();\n     int xferPort \u003d dnId.getXferPort();\n     DatanodeDescriptor node \u003d getDatanodeByXferAddr(host, xferPort);\n     if (node \u003d\u003d null) {\n       node \u003d getDatanodeByHost(host);\n     }\n     if (node \u003d\u003d null) {\n-      String networkLocation \u003d resolveNetworkLocation(dnId);\n+      String networkLocation \u003d \n+          resolveNetworkLocationWithFallBackToDefaultLocation(dnId);\n \n       // If the current cluster doesn\u0027t contain the node, fallback to\n       // something machine local and then rack local.\n       List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n                                    .getDatanodesInRack(networkLocation);\n       if (rackNodes !\u003d null) {\n         // Try something machine local.\n         for (Node rackNode : rackNodes) {\n           if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n             node \u003d (DatanodeDescriptor) rackNode;\n             break;\n           }\n         }\n \n         // Try something rack local.\n         if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n           node \u003d (DatanodeDescriptor) (rackNodes\n               .get(DFSUtil.getRandom().nextInt(rackNodes.size())));\n         }\n       }\n \n       // If we can\u0027t even choose rack local, just choose any node in the\n       // cluster.\n       if (node \u003d\u003d null) {\n         node \u003d (DatanodeDescriptor)getNetworkTopology()\n                                    .chooseRandom(NodeBase.ROOT);\n       }\n     }\n     return node;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  DatanodeDescriptor getDatanodeDescriptor(String address) {\n    DatanodeID dnId \u003d parseDNFromHostsEntry(address);\n    String host \u003d dnId.getIpAddr();\n    int xferPort \u003d dnId.getXferPort();\n    DatanodeDescriptor node \u003d getDatanodeByXferAddr(host, xferPort);\n    if (node \u003d\u003d null) {\n      node \u003d getDatanodeByHost(host);\n    }\n    if (node \u003d\u003d null) {\n      String networkLocation \u003d \n          resolveNetworkLocationWithFallBackToDefaultLocation(dnId);\n\n      // If the current cluster doesn\u0027t contain the node, fallback to\n      // something machine local and then rack local.\n      List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n                                   .getDatanodesInRack(networkLocation);\n      if (rackNodes !\u003d null) {\n        // Try something machine local.\n        for (Node rackNode : rackNodes) {\n          if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n            node \u003d (DatanodeDescriptor) rackNode;\n            break;\n          }\n        }\n\n        // Try something rack local.\n        if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n          node \u003d (DatanodeDescriptor) (rackNodes\n              .get(DFSUtil.getRandom().nextInt(rackNodes.size())));\n        }\n      }\n\n      // If we can\u0027t even choose rack local, just choose any node in the\n      // cluster.\n      if (node \u003d\u003d null) {\n        node \u003d (DatanodeDescriptor)getNetworkTopology()\n                                   .chooseRandom(NodeBase.ROOT);\n      }\n    }\n    return node;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "4bb72210c266707806f3ce3e974968a9a137b25b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4827. Slight update to the implementation of API for handling favored nodes in DFSClient. Contributed by Devaraj Das.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487093 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/13 1:17 PM",
      "commitName": "4bb72210c266707806f3ce3e974968a9a137b25b",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "30/04/13 2:46 PM",
      "commitNameOld": "2542d69d65544bab75052a0b9c97a720f3c80cd5",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 27.94,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,40 @@\n   DatanodeDescriptor getDatanodeDescriptor(String address) {\n-    DatanodeDescriptor node \u003d null;\n-    int colon \u003d address.indexOf(\":\");\n-    int xferPort;\n-    String host \u003d address;\n-    if (colon \u003e 0) {\n-      host \u003d address.substring(0, colon);\n-      xferPort \u003d Integer.parseInt(address.substring(colon+1));\n-      node \u003d getDatanodeByXferAddr(host, xferPort);\n-    }\n+    DatanodeID dnId \u003d parseDNFromHostsEntry(address);\n+    String host \u003d dnId.getIpAddr();\n+    int xferPort \u003d dnId.getXferPort();\n+    DatanodeDescriptor node \u003d getDatanodeByXferAddr(host, xferPort);\n     if (node \u003d\u003d null) {\n       node \u003d getDatanodeByHost(host);\n     }\n     if (node \u003d\u003d null) {\n-      String networkLocation \u003d resolveNetworkLocation(host);\n+      String networkLocation \u003d resolveNetworkLocation(dnId);\n \n       // If the current cluster doesn\u0027t contain the node, fallback to\n       // something machine local and then rack local.\n       List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n                                    .getDatanodesInRack(networkLocation);\n       if (rackNodes !\u003d null) {\n         // Try something machine local.\n         for (Node rackNode : rackNodes) {\n           if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n             node \u003d (DatanodeDescriptor) rackNode;\n             break;\n           }\n         }\n \n         // Try something rack local.\n         if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n           node \u003d (DatanodeDescriptor) (rackNodes\n               .get(DFSUtil.getRandom().nextInt(rackNodes.size())));\n         }\n       }\n \n       // If we can\u0027t even choose rack local, just choose any node in the\n       // cluster.\n       if (node \u003d\u003d null) {\n         node \u003d (DatanodeDescriptor)getNetworkTopology()\n                                    .chooseRandom(NodeBase.ROOT);\n       }\n     }\n     return node;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  DatanodeDescriptor getDatanodeDescriptor(String address) {\n    DatanodeID dnId \u003d parseDNFromHostsEntry(address);\n    String host \u003d dnId.getIpAddr();\n    int xferPort \u003d dnId.getXferPort();\n    DatanodeDescriptor node \u003d getDatanodeByXferAddr(host, xferPort);\n    if (node \u003d\u003d null) {\n      node \u003d getDatanodeByHost(host);\n    }\n    if (node \u003d\u003d null) {\n      String networkLocation \u003d resolveNetworkLocation(dnId);\n\n      // If the current cluster doesn\u0027t contain the node, fallback to\n      // something machine local and then rack local.\n      List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n                                   .getDatanodesInRack(networkLocation);\n      if (rackNodes !\u003d null) {\n        // Try something machine local.\n        for (Node rackNode : rackNodes) {\n          if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n            node \u003d (DatanodeDescriptor) rackNode;\n            break;\n          }\n        }\n\n        // Try something rack local.\n        if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n          node \u003d (DatanodeDescriptor) (rackNodes\n              .get(DFSUtil.getRandom().nextInt(rackNodes.size())));\n        }\n      }\n\n      // If we can\u0027t even choose rack local, just choose any node in the\n      // cluster.\n      if (node \u003d\u003d null) {\n        node \u003d (DatanodeDescriptor)getNetworkTopology()\n                                   .chooseRandom(NodeBase.ROOT);\n      }\n    }\n    return node;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java",
      "extendedDetails": {}
    },
    "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2576. Enhances the DistributedFileSystem\u0027s create API so that clients can specify favored datanodes for a file\u0027s blocks. Contributed by Devaraj Das and Pritam Damania.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476395 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/04/13 1:39 PM",
      "commitName": "5d2ffde68e2c14ee33fa2ba4a34cb42fbd14b5ec",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,45 @@\n+  DatanodeDescriptor getDatanodeDescriptor(String address) {\n+    DatanodeDescriptor node \u003d null;\n+    int colon \u003d address.indexOf(\":\");\n+    int xferPort;\n+    String host \u003d address;\n+    if (colon \u003e 0) {\n+      host \u003d address.substring(0, colon);\n+      xferPort \u003d Integer.parseInt(address.substring(colon+1));\n+      node \u003d getDatanodeByXferAddr(host, xferPort);\n+    }\n+    if (node \u003d\u003d null) {\n+      node \u003d getDatanodeByHost(host);\n+    }\n+    if (node \u003d\u003d null) {\n+      String networkLocation \u003d resolveNetworkLocation(host);\n+\n+      // If the current cluster doesn\u0027t contain the node, fallback to\n+      // something machine local and then rack local.\n+      List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n+                                   .getDatanodesInRack(networkLocation);\n+      if (rackNodes !\u003d null) {\n+        // Try something machine local.\n+        for (Node rackNode : rackNodes) {\n+          if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n+            node \u003d (DatanodeDescriptor) rackNode;\n+            break;\n+          }\n+        }\n+\n+        // Try something rack local.\n+        if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n+          node \u003d (DatanodeDescriptor) (rackNodes\n+              .get(DFSUtil.getRandom().nextInt(rackNodes.size())));\n+        }\n+      }\n+\n+      // If we can\u0027t even choose rack local, just choose any node in the\n+      // cluster.\n+      if (node \u003d\u003d null) {\n+        node \u003d (DatanodeDescriptor)getNetworkTopology()\n+                                   .chooseRandom(NodeBase.ROOT);\n+      }\n+    }\n+    return node;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  DatanodeDescriptor getDatanodeDescriptor(String address) {\n    DatanodeDescriptor node \u003d null;\n    int colon \u003d address.indexOf(\":\");\n    int xferPort;\n    String host \u003d address;\n    if (colon \u003e 0) {\n      host \u003d address.substring(0, colon);\n      xferPort \u003d Integer.parseInt(address.substring(colon+1));\n      node \u003d getDatanodeByXferAddr(host, xferPort);\n    }\n    if (node \u003d\u003d null) {\n      node \u003d getDatanodeByHost(host);\n    }\n    if (node \u003d\u003d null) {\n      String networkLocation \u003d resolveNetworkLocation(host);\n\n      // If the current cluster doesn\u0027t contain the node, fallback to\n      // something machine local and then rack local.\n      List\u003cNode\u003e rackNodes \u003d getNetworkTopology()\n                                   .getDatanodesInRack(networkLocation);\n      if (rackNodes !\u003d null) {\n        // Try something machine local.\n        for (Node rackNode : rackNodes) {\n          if (((DatanodeDescriptor) rackNode).getIpAddr().equals(host)) {\n            node \u003d (DatanodeDescriptor) rackNode;\n            break;\n          }\n        }\n\n        // Try something rack local.\n        if (node \u003d\u003d null \u0026\u0026 !rackNodes.isEmpty()) {\n          node \u003d (DatanodeDescriptor) (rackNodes\n              .get(DFSUtil.getRandom().nextInt(rackNodes.size())));\n        }\n      }\n\n      // If we can\u0027t even choose rack local, just choose any node in the\n      // cluster.\n      if (node \u003d\u003d null) {\n        node \u003d (DatanodeDescriptor)getNetworkTopology()\n                                   .chooseRandom(NodeBase.ROOT);\n      }\n    }\n    return node;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/DatanodeManager.java"
    }
  }
}