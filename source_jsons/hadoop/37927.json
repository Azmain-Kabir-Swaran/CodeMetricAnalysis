{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceTrackerService.java",
  "functionName": "handleNMContainerStatus",
  "functionId": "handleNMContainerStatus___containerStatus-NMContainerStatus__nodeId-NodeId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
  "functionStartLine": 286,
  "functionEndLine": 324,
  "numCommitsSeen": 170,
  "timeTaken": 4215,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "52734134116eb4b18686e308d00e71e7e903383e",
    "99f6bd4f7ab1c5cac57362690c686139e73251d9",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84",
    "23c325ad47e305989b7f2cf172bd709f73dd26d1",
    "f67218809c50b194e463af6e6196db298353c8c1"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "52734134116eb4b18686e308d00e71e7e903383e": "Ybodychange",
    "99f6bd4f7ab1c5cac57362690c686139e73251d9": "Ybodychange",
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": "Ymultichange(Yparameterchange,Ybodychange)",
    "23c325ad47e305989b7f2cf172bd709f73dd26d1": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "f67218809c50b194e463af6e6196db298353c8c1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,39 @@\n   void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n           + \" for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Ignoring container completion status for unmanaged AM \"\n-            + rmApp.getApplicationId());\n-      }\n+      LOG.debug(\"Ignoring container completion status for unmanaged AM {}\",\n+          rmApp.getApplicationId());\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n     if (rmAppAttempt \u003d\u003d null) {\n       LOG.info(\"Ignoring not found attempt \" + appAttemptId);\n       return;\n     }\n \n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n         \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n       ContainerStatus status \u003d\n           ContainerStatus.newInstance(containerStatus.getContainerId(),\n             containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n             containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n           new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n               nodeId);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \" for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      LOG.debug(\"Ignoring container completion status for unmanaged AM {}\",\n          rmApp.getApplicationId());\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    if (rmAppAttempt \u003d\u003d null) {\n      LOG.info(\"Ignoring not found attempt \" + appAttemptId);\n      return;\n    }\n\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n              nodeId);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "52734134116eb4b18686e308d00e71e7e903383e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3480. Remove attempts that are beyond max-attempt limit from state store. Contributed by Jun Gong\n",
      "commitDate": "29/12/15 3:58 PM",
      "commitName": "52734134116eb4b18686e308d00e71e7e903383e",
      "commitAuthor": "Jian He",
      "commitDateOld": "24/11/15 12:17 AM",
      "commitNameOld": "52948bb20bd1446164df1d3920c46c96dad750ae",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 35.65,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,41 @@\n   void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n           + \" for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Ignoring container completion status for unmanaged AM \"\n             + rmApp.getApplicationId());\n       }\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n+    if (rmAppAttempt \u003d\u003d null) {\n+      LOG.info(\"Ignoring not found attempt \" + appAttemptId);\n+      return;\n+    }\n+\n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n         \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n       ContainerStatus status \u003d\n           ContainerStatus.newInstance(containerStatus.getContainerId(),\n             containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n             containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n           new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n               nodeId);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \" for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM \"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    if (rmAppAttempt \u003d\u003d null) {\n      LOG.info(\"Ignoring not found attempt \" + appAttemptId);\n      return;\n    }\n\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n              nodeId);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "99f6bd4f7ab1c5cac57362690c686139e73251d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3158. Correct log messages in ResourceTrackerService. Contributed\nby Varun Saxena\n",
      "commitDate": "12/02/15 4:42 PM",
      "commitName": "99f6bd4f7ab1c5cac57362690c686139e73251d9",
      "commitAuthor": "Xuan",
      "commitDateOld": "27/10/14 3:49 PM",
      "commitNameOld": "a16d022ca4313a41425c8e97841c841a2d6f2f54",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 108.08,
      "commitsBetweenForRepo": 843,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n-          + \"for unknown application \" + appAttemptId.getApplicationId()\n+          + \" for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n+        LOG.debug(\"Ignoring container completion status for unmanaged AM \"\n             + rmApp.getApplicationId());\n       }\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n         \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n       ContainerStatus status \u003d\n           ContainerStatus.newInstance(containerStatus.getContainerId(),\n             containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n             containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n           new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n               nodeId);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \" for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM \"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n              nodeId);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
      "extendedDetails": {}
    },
    "0a641496c706fc175e7bf66d69ebf71c7d078e84": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
      "commitDate": "22/09/14 10:30 AM",
      "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
          "commitDate": "22/09/14 10:30 AM",
          "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/08/14 11:05 PM",
          "commitNameOld": "5c14bc426b4be381383018ebc2236be83eef15cd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 23.48,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n-  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n+  void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n           + \"for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n             + rmApp.getApplicationId());\n       }\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n         \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n       ContainerStatus status \u003d\n           ContainerStatus.newInstance(containerStatus.getContainerId(),\n             containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n             containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n-          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n+          new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n+              nodeId);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \"for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n              nodeId);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "[containerStatus-NMContainerStatus]",
            "newValue": "[containerStatus-NMContainerStatus, nodeId-NodeId]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1372. Ensure all completed containers are reported to the AMs across RM restart. Contributed by Anubhav Dhoot\n",
          "commitDate": "22/09/14 10:30 AM",
          "commitName": "0a641496c706fc175e7bf66d69ebf71c7d078e84",
          "commitAuthor": "Jian He",
          "commitDateOld": "29/08/14 11:05 PM",
          "commitNameOld": "5c14bc426b4be381383018ebc2236be83eef15cd",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 23.48,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,36 @@\n-  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n+  void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n           + \"for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n             + rmApp.getApplicationId());\n       }\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n         \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n       ContainerStatus status \u003d\n           ContainerStatus.newInstance(containerStatus.getContainerId(),\n             containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n             containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n-          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n+          new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n+              nodeId);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus, NodeId nodeId) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \"for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status,\n              nodeId);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {}
        }
      ]
    },
    "23c325ad47e305989b7f2cf172bd709f73dd26d1": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2115. Replaced RegisterNodeManagerRequest\u0027s ContainerStatus with a new NMContainerStatus which has more information that is needed for work-preserving RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 5:20 PM",
      "commitName": "23c325ad47e305989b7f2cf172bd709f73dd26d1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2115. Replaced RegisterNodeManagerRequest\u0027s ContainerStatus with a new NMContainerStatus which has more information that is needed for work-preserving RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598790 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/05/14 5:20 PM",
          "commitName": "23c325ad47e305989b7f2cf172bd709f73dd26d1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "21/03/14 3:53 PM",
          "commitNameOld": "f67218809c50b194e463af6e6196db298353c8c1",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 70.06,
          "commitsBetweenForRepo": 428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,35 @@\n-  void handleContainerStatus(ContainerStatus containerStatus) {\n+  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n           + \"for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n             + rmApp.getApplicationId());\n       }\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n-        \u0026\u0026 containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n+        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n+      ContainerStatus status \u003d\n+          ContainerStatus.newInstance(containerStatus.getContainerId(),\n+            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n+            containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n-          new RMAppAttemptContainerFinishedEvent(appAttemptId,\n-              containerStatus);\n+          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \"for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "handleContainerStatus",
            "newValue": "handleNMContainerStatus"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2115. Replaced RegisterNodeManagerRequest\u0027s ContainerStatus with a new NMContainerStatus which has more information that is needed for work-preserving RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598790 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/05/14 5:20 PM",
          "commitName": "23c325ad47e305989b7f2cf172bd709f73dd26d1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "21/03/14 3:53 PM",
          "commitNameOld": "f67218809c50b194e463af6e6196db298353c8c1",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 70.06,
          "commitsBetweenForRepo": 428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,35 @@\n-  void handleContainerStatus(ContainerStatus containerStatus) {\n+  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n           + \"for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n             + rmApp.getApplicationId());\n       }\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n-        \u0026\u0026 containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n+        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n+      ContainerStatus status \u003d\n+          ContainerStatus.newInstance(containerStatus.getContainerId(),\n+            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n+            containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n-          new RMAppAttemptContainerFinishedEvent(appAttemptId,\n-              containerStatus);\n+          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \"for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {
            "oldValue": "[containerStatus-ContainerStatus]",
            "newValue": "[containerStatus-NMContainerStatus]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2115. Replaced RegisterNodeManagerRequest\u0027s ContainerStatus with a new NMContainerStatus which has more information that is needed for work-preserving RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598790 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/05/14 5:20 PM",
          "commitName": "23c325ad47e305989b7f2cf172bd709f73dd26d1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "21/03/14 3:53 PM",
          "commitNameOld": "f67218809c50b194e463af6e6196db298353c8c1",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 70.06,
          "commitsBetweenForRepo": 428,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,35 @@\n-  void handleContainerStatus(ContainerStatus containerStatus) {\n+  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n     ApplicationAttemptId appAttemptId \u003d\n         containerStatus.getContainerId().getApplicationAttemptId();\n     RMApp rmApp \u003d\n         rmContext.getRMApps().get(appAttemptId.getApplicationId());\n     if (rmApp \u003d\u003d null) {\n       LOG.error(\"Received finished container : \"\n           + containerStatus.getContainerId()\n           + \"for unknown application \" + appAttemptId.getApplicationId()\n           + \" Skipping.\");\n       return;\n     }\n \n     if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n             + rmApp.getApplicationId());\n       }\n       return;\n     }\n \n     RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n     Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n     if (masterContainer.getId().equals(containerStatus.getContainerId())\n-        \u0026\u0026 containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n+        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n+      ContainerStatus status \u003d\n+          ContainerStatus.newInstance(containerStatus.getContainerId(),\n+            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n+            containerStatus.getContainerExitStatus());\n       // sending master container finished event.\n       RMAppAttemptContainerFinishedEvent evt \u003d\n-          new RMAppAttemptContainerFinishedEvent(appAttemptId,\n-              containerStatus);\n+          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n       rmContext.getDispatcher().getEventHandler().handle(evt);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void handleNMContainerStatus(NMContainerStatus containerStatus) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \"for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getContainerState() \u003d\u003d ContainerState.COMPLETE) {\n      ContainerStatus status \u003d\n          ContainerStatus.newInstance(containerStatus.getContainerId(),\n            containerStatus.getContainerState(), containerStatus.getDiagnostics(),\n            containerStatus.getContainerExitStatus());\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId, status);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java",
          "extendedDetails": {}
        }
      ]
    },
    "f67218809c50b194e463af6e6196db298353c8c1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1849. Fixed NPE in ResourceTrackerService#registerNodeManager for UAM. Contributed by Karthik Kambatla\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580077 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 3:53 PM",
      "commitName": "f67218809c50b194e463af6e6196db298353c8c1",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,32 @@\n+  void handleContainerStatus(ContainerStatus containerStatus) {\n+    ApplicationAttemptId appAttemptId \u003d\n+        containerStatus.getContainerId().getApplicationAttemptId();\n+    RMApp rmApp \u003d\n+        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n+    if (rmApp \u003d\u003d null) {\n+      LOG.error(\"Received finished container : \"\n+          + containerStatus.getContainerId()\n+          + \"for unknown application \" + appAttemptId.getApplicationId()\n+          + \" Skipping.\");\n+      return;\n+    }\n+\n+    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n+            + rmApp.getApplicationId());\n+      }\n+      return;\n+    }\n+\n+    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n+    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n+    if (masterContainer.getId().equals(containerStatus.getContainerId())\n+        \u0026\u0026 containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n+      // sending master container finished event.\n+      RMAppAttemptContainerFinishedEvent evt \u003d\n+          new RMAppAttemptContainerFinishedEvent(appAttemptId,\n+              containerStatus);\n+      rmContext.getDispatcher().getEventHandler().handle(evt);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void handleContainerStatus(ContainerStatus containerStatus) {\n    ApplicationAttemptId appAttemptId \u003d\n        containerStatus.getContainerId().getApplicationAttemptId();\n    RMApp rmApp \u003d\n        rmContext.getRMApps().get(appAttemptId.getApplicationId());\n    if (rmApp \u003d\u003d null) {\n      LOG.error(\"Received finished container : \"\n          + containerStatus.getContainerId()\n          + \"for unknown application \" + appAttemptId.getApplicationId()\n          + \" Skipping.\");\n      return;\n    }\n\n    if (rmApp.getApplicationSubmissionContext().getUnmanagedAM()) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Ignoring container completion status for unmanaged AM\"\n            + rmApp.getApplicationId());\n      }\n      return;\n    }\n\n    RMAppAttempt rmAppAttempt \u003d rmApp.getRMAppAttempt(appAttemptId);\n    Container masterContainer \u003d rmAppAttempt.getMasterContainer();\n    if (masterContainer.getId().equals(containerStatus.getContainerId())\n        \u0026\u0026 containerStatus.getState() \u003d\u003d ContainerState.COMPLETE) {\n      // sending master container finished event.\n      RMAppAttemptContainerFinishedEvent evt \u003d\n          new RMAppAttemptContainerFinishedEvent(appAttemptId,\n              containerStatus);\n      rmContext.getDispatcher().getEventHandler().handle(evt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java"
    }
  }
}