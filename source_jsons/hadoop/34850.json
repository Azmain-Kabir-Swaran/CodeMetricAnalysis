{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FederationInterceptor.java",
  "functionName": "init",
  "functionId": "init___appContext-AMRMProxyApplicationContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
  "functionStartLine": 277,
  "functionEndLine": 353,
  "numCommitsSeen": 21,
  "timeTaken": 5203,
  "changeHistory": [
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa",
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
    "3090922805699b8374a359e92323884a4177dc4e",
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
    "f1525825623a1307b5aa55c456b6afa3e0c61135",
    "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f"
  ],
  "changeHistoryShort": {
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa": "Ybodychange",
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de": "Ybodychange",
    "3090922805699b8374a359e92323884a4177dc4e": "Ybodychange",
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": "Ybodychange",
    "f1525825623a1307b5aa55c456b6afa3e0c61135": "Ybodychange",
    "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9": "Ybodychange",
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": "Ybodychange",
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": "Ybodychange",
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": "Ybodychange",
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": "Ybodychange",
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b5ec85d96615e8214c14b57f8980a1dee6197ffa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8933. [AMRMProxy] Fix potential empty fields in allocation response, move SubClusterTimeout to FederationInterceptor. Contributed by Botong Huang.\n",
      "commitDate": "11/11/18 11:12 AM",
      "commitName": "b5ec85d96615e8214c14b57f8980a1dee6197ffa",
      "commitAuthor": "Botong Huang",
      "commitDateOld": "02/11/18 3:30 PM",
      "commitNameOld": "989715ec5066c6ac7868e25ad9234dc64723e61e",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 8.86,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,77 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     // The proxy ugi used to talk to home RM as well as Yarn Registry, loaded\n     // with the up-to-date AMRMToken issued by home RM.\n     UserGroupInformation appOwner;\n     try {\n       appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     if (appContext.getRegistryClient() !\u003d null) {\n       this.registryClient \u003d new FederationRegistryClient(conf,\n           appContext.getRegistryClient(), appOwner);\n       // Add all app tokens for Yarn Registry access\n       if (appContext.getCredentials() !\u003d null) {\n         appOwner.addCredentials(appContext.getCredentials());\n       }\n     }\n \n     this.attemptId \u003d appContext.getApplicationAttemptId();\n     ApplicationId appId \u003d this.attemptId.getApplicationId();\n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n     this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n         ApplicationMasterProtocol.class, appOwner), appId,\n         this.homeSubClusterId.toString());\n \n     this.homeHeartbeartHandler \u003d\n         createHomeHeartbeartHandler(conf, appId, this.homeRMRelayer);\n     this.homeHeartbeartHandler.setUGI(appOwner);\n     this.homeHeartbeartHandler.setDaemon(true);\n     this.homeHeartbeartHandler.start();\n \n     // set lastResponseId to -1 before application master registers\n     this.lastAllocateResponse \u003d\n         RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n     this.lastAllocateResponse\n         .setResponseId(AMRMClientUtils.PRE_REGISTER_RESPONSE_ID);\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n \n     this.heartbeatMaxWaitTimeMs \u003d\n         conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\n+\n+    this.subClusterTimeOut \u003d\n+        conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n+            YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n+    if (this.subClusterTimeOut \u003c\u003d 0) {\n+      LOG.info(\n+          \"{} configured to be {}, should be positive. Using default of {}.\",\n+          YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n+          this.subClusterTimeOut,\n+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n+      this.subClusterTimeOut \u003d\n+          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    // The proxy ugi used to talk to home RM as well as Yarn Registry, loaded\n    // with the up-to-date AMRMToken issued by home RM.\n    UserGroupInformation appOwner;\n    try {\n      appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.attemptId \u003d appContext.getApplicationAttemptId();\n    ApplicationId appId \u003d this.attemptId.getApplicationId();\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n        ApplicationMasterProtocol.class, appOwner), appId,\n        this.homeSubClusterId.toString());\n\n    this.homeHeartbeartHandler \u003d\n        createHomeHeartbeartHandler(conf, appId, this.homeRMRelayer);\n    this.homeHeartbeartHandler.setUGI(appOwner);\n    this.homeHeartbeartHandler.setDaemon(true);\n    this.homeHeartbeartHandler.start();\n\n    // set lastResponseId to -1 before application master registers\n    this.lastAllocateResponse \u003d\n        RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n    this.lastAllocateResponse\n        .setResponseId(AMRMClientUtils.PRE_REGISTER_RESPONSE_ID);\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n\n    this.heartbeatMaxWaitTimeMs \u003d\n        conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\n\n    this.subClusterTimeOut \u003d\n        conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n            YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n    if (this.subClusterTimeOut \u003c\u003d 0) {\n      LOG.info(\n          \"{} configured to be {}, should be positive. Using default of {}.\",\n          YarnConfiguration.FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT,\n          this.subClusterTimeOut,\n          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT);\n      this.subClusterTimeOut \u003d\n          YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_SUBCLUSTER_TIMEOUT;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "c3d22d3b4569b7f87af4ee4abfcc284deebe90de": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7652. Handle AM register requests asynchronously in FederationInterceptor. Contributed by Botong Huang.\n",
      "commitDate": "09/10/18 10:29 AM",
      "commitName": "c3d22d3b4569b7f87af4ee4abfcc284deebe90de",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "01/10/18 1:12 PM",
      "commitNameOld": "59d5af21b7a8f52e8c89cbc2d25fe3d449b2657a",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 7.89,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     // The proxy ugi used to talk to home RM as well as Yarn Registry, loaded\n     // with the up-to-date AMRMToken issued by home RM.\n     UserGroupInformation appOwner;\n     try {\n       appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     if (appContext.getRegistryClient() !\u003d null) {\n       this.registryClient \u003d new FederationRegistryClient(conf,\n           appContext.getRegistryClient(), appOwner);\n       // Add all app tokens for Yarn Registry access\n       if (appContext.getCredentials() !\u003d null) {\n         appOwner.addCredentials(appContext.getCredentials());\n       }\n     }\n \n     this.attemptId \u003d appContext.getApplicationAttemptId();\n     ApplicationId appId \u003d this.attemptId.getApplicationId();\n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n     this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n         ApplicationMasterProtocol.class, appOwner), appId,\n         this.homeSubClusterId.toString());\n \n-    this.homeHeartbeartHandler \u003d createHomeHeartbeartHandler(conf, appId);\n-    this.homeHeartbeartHandler.setAMRMClientRelayer(this.homeRMRelayer);\n+    this.homeHeartbeartHandler \u003d\n+        createHomeHeartbeartHandler(conf, appId, this.homeRMRelayer);\n     this.homeHeartbeartHandler.setUGI(appOwner);\n     this.homeHeartbeartHandler.setDaemon(true);\n     this.homeHeartbeartHandler.start();\n \n     // set lastResponseId to -1 before application master registers\n     this.lastAllocateResponse \u003d\n         RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n     this.lastAllocateResponse\n         .setResponseId(AMRMClientUtils.PRE_REGISTER_RESPONSE_ID);\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n \n     this.heartbeatMaxWaitTimeMs \u003d\n         conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    // The proxy ugi used to talk to home RM as well as Yarn Registry, loaded\n    // with the up-to-date AMRMToken issued by home RM.\n    UserGroupInformation appOwner;\n    try {\n      appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.attemptId \u003d appContext.getApplicationAttemptId();\n    ApplicationId appId \u003d this.attemptId.getApplicationId();\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n        ApplicationMasterProtocol.class, appOwner), appId,\n        this.homeSubClusterId.toString());\n\n    this.homeHeartbeartHandler \u003d\n        createHomeHeartbeartHandler(conf, appId, this.homeRMRelayer);\n    this.homeHeartbeartHandler.setUGI(appOwner);\n    this.homeHeartbeartHandler.setDaemon(true);\n    this.homeHeartbeartHandler.start();\n\n    // set lastResponseId to -1 before application master registers\n    this.lastAllocateResponse \u003d\n        RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n    this.lastAllocateResponse\n        .setResponseId(AMRMClientUtils.PRE_REGISTER_RESPONSE_ID);\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n\n    this.heartbeatMaxWaitTimeMs \u003d\n        conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "3090922805699b8374a359e92323884a4177dc4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8696. [AMRMProxy] FederationInterceptor upgrade: home sub-cluster heartbeat async. Contributed by Botong Huang.\n",
      "commitDate": "24/09/18 11:37 AM",
      "commitName": "3090922805699b8374a359e92323884a4177dc4e",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/09/18 11:46 AM",
      "commitNameOld": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,64 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n+    // The proxy ugi used to talk to home RM as well as Yarn Registry, loaded\n+    // with the up-to-date AMRMToken issued by home RM.\n+    UserGroupInformation appOwner;\n     try {\n-      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n+      appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     if (appContext.getRegistryClient() !\u003d null) {\n       this.registryClient \u003d new FederationRegistryClient(conf,\n-          appContext.getRegistryClient(), this.appOwner);\n+          appContext.getRegistryClient(), appOwner);\n       // Add all app tokens for Yarn Registry access\n       if (appContext.getCredentials() !\u003d null) {\n-        this.appOwner.addCredentials(appContext.getCredentials());\n+        appOwner.addCredentials(appContext.getCredentials());\n       }\n     }\n \n     this.attemptId \u003d appContext.getApplicationAttemptId();\n     ApplicationId appId \u003d this.attemptId.getApplicationId();\n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n     this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n-        ApplicationMasterProtocol.class, this.appOwner), appId,\n+        ApplicationMasterProtocol.class, appOwner), appId,\n         this.homeSubClusterId.toString());\n \n+    this.homeHeartbeartHandler \u003d createHomeHeartbeartHandler(conf, appId);\n+    this.homeHeartbeartHandler.setAMRMClientRelayer(this.homeRMRelayer);\n+    this.homeHeartbeartHandler.setUGI(appOwner);\n+    this.homeHeartbeartHandler.setDaemon(true);\n+    this.homeHeartbeartHandler.start();\n+\n+    // set lastResponseId to -1 before application master registers\n+    this.lastAllocateResponse \u003d\n+        RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n+    this.lastAllocateResponse\n+        .setResponseId(AMRMClientUtils.PRE_REGISTER_RESPONSE_ID);\n+\n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n+\n+    this.heartbeatMaxWaitTimeMs \u003d\n+        conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS,\n+            YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    // The proxy ugi used to talk to home RM as well as Yarn Registry, loaded\n    // with the up-to-date AMRMToken issued by home RM.\n    UserGroupInformation appOwner;\n    try {\n      appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.attemptId \u003d appContext.getApplicationAttemptId();\n    ApplicationId appId \u003d this.attemptId.getApplicationId();\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n        ApplicationMasterProtocol.class, appOwner), appId,\n        this.homeSubClusterId.toString());\n\n    this.homeHeartbeartHandler \u003d createHomeHeartbeartHandler(conf, appId);\n    this.homeHeartbeartHandler.setAMRMClientRelayer(this.homeRMRelayer);\n    this.homeHeartbeartHandler.setUGI(appOwner);\n    this.homeHeartbeartHandler.setDaemon(true);\n    this.homeHeartbeartHandler.start();\n\n    // set lastResponseId to -1 before application master registers\n    this.lastAllocateResponse \u003d\n        RECORD_FACTORY.newRecordInstance(AllocateResponse.class);\n    this.lastAllocateResponse\n        .setResponseId(AMRMClientUtils.PRE_REGISTER_RESPONSE_ID);\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n\n    this.heartbeatMaxWaitTimeMs \u003d\n        conf.getLong(YarnConfiguration.FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_FEDERATION_AMRMPROXY_HB_MAX_WAIT_MS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8658. [AMRMProxy] Metrics for AMRMClientRelayer inside FederationInterceptor. Contributed by Young Chen.\n",
      "commitDate": "12/09/18 11:46 AM",
      "commitName": "02b9bfdf9e4bd0b3c05ca5fd75399dedcb656e09",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "27/08/18 10:32 AM",
      "commitNameOld": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 16.05,
      "commitsBetweenForRepo": 142,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,45 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     try {\n       this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     if (appContext.getRegistryClient() !\u003d null) {\n       this.registryClient \u003d new FederationRegistryClient(conf,\n           appContext.getRegistryClient(), this.appOwner);\n       // Add all app tokens for Yarn Registry access\n       if (appContext.getCredentials() !\u003d null) {\n         this.appOwner.addCredentials(appContext.getCredentials());\n       }\n     }\n \n     this.attemptId \u003d appContext.getApplicationAttemptId();\n     ApplicationId appId \u003d this.attemptId.getApplicationId();\n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n     this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n-        ApplicationMasterProtocol.class, this.appOwner), appId);\n+        ApplicationMasterProtocol.class, this.appOwner), appId,\n+        this.homeSubClusterId.toString());\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), this.appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        this.appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.attemptId \u003d appContext.getApplicationAttemptId();\n    ApplicationId appId \u003d this.attemptId.getApplicationId();\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n        ApplicationMasterProtocol.class, this.appOwner), appId,\n        this.homeSubClusterId.toString());\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "f1525825623a1307b5aa55c456b6afa3e0c61135": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8705. Refactor the UAM heartbeat thread in preparation for YARN-8696. Contributed by Botong Huang.\n",
      "commitDate": "27/08/18 10:32 AM",
      "commitName": "f1525825623a1307b5aa55c456b6afa3e0c61135",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 12:22 PM",
      "commitNameOld": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     try {\n       this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     if (appContext.getRegistryClient() !\u003d null) {\n       this.registryClient \u003d new FederationRegistryClient(conf,\n           appContext.getRegistryClient(), this.appOwner);\n       // Add all app tokens for Yarn Registry access\n       if (appContext.getCredentials() !\u003d null) {\n         this.appOwner.addCredentials(appContext.getCredentials());\n       }\n     }\n \n+    this.attemptId \u003d appContext.getApplicationAttemptId();\n+    ApplicationId appId \u003d this.attemptId.getApplicationId();\n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n-    this.homeRMRelayer \u003d new AMRMClientRelayer(\n-        createHomeRMProxy(appContext, ApplicationMasterProtocol.class,\n-            this.appOwner),\n-        getApplicationContext().getApplicationAttemptId().getApplicationId());\n+    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n+        ApplicationMasterProtocol.class, this.appOwner), appId);\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), this.appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        this.appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.attemptId \u003d appContext.getApplicationAttemptId();\n    ApplicationId appId \u003d this.attemptId.getApplicationId();\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n        ApplicationMasterProtocol.class, this.appOwner), appId);\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8673. [AMRMProxy] More robust responseId resync after an YarnRM master slave switch. Contributed by Botong Huang.\n",
      "commitDate": "20/08/18 12:22 PM",
      "commitName": "8736fc39ac3b3de168d2c216f3d1c0edb48fb3f9",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "09/07/18 12:27 PM",
      "commitNameOld": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 42.0,
      "commitsBetweenForRepo": 336,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     try {\n       this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     if (appContext.getRegistryClient() !\u003d null) {\n       this.registryClient \u003d new FederationRegistryClient(conf,\n           appContext.getRegistryClient(), this.appOwner);\n       // Add all app tokens for Yarn Registry access\n       if (appContext.getCredentials() !\u003d null) {\n         this.appOwner.addCredentials(appContext.getCredentials());\n       }\n     }\n \n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n-    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n-        ApplicationMasterProtocol.class, this.appOwner));\n+    this.homeRMRelayer \u003d new AMRMClientRelayer(\n+        createHomeRMProxy(appContext, ApplicationMasterProtocol.class,\n+            this.appOwner),\n+        getApplicationContext().getApplicationAttemptId().getApplicationId());\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), this.appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        this.appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRMRelayer \u003d new AMRMClientRelayer(\n        createHomeRMProxy(appContext, ApplicationMasterProtocol.class,\n            this.appOwner),\n        getApplicationContext().getApplicationAttemptId().getApplicationId());\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7899. [AMRMProxy] Stateful FederationInterceptor for pending requests. Contributed by Botong Huang.\n",
      "commitDate": "09/07/18 12:27 PM",
      "commitName": "ea9b608237e7f2cf9b1e36b0f78c9674ec84096f",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/05/18 8:00 PM",
      "commitNameOld": "3159bffce23abf35754da2d7d51de7d8c2631ae3",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 52.69,
      "commitsBetweenForRepo": 338,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     try {\n       this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     if (appContext.getRegistryClient() !\u003d null) {\n       this.registryClient \u003d new FederationRegistryClient(conf,\n           appContext.getRegistryClient(), this.appOwner);\n       // Add all app tokens for Yarn Registry access\n       if (appContext.getCredentials() !\u003d null) {\n         this.appOwner.addCredentials(appContext.getCredentials());\n       }\n     }\n \n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n-    this.homeRM \u003d createHomeRMProxy(appContext, ApplicationMasterProtocol.class,\n-        this.appOwner);\n+    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n+        ApplicationMasterProtocol.class, this.appOwner));\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), this.appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        this.appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRMRelayer \u003d new AMRMClientRelayer(createHomeRMProxy(appContext,\n        ApplicationMasterProtocol.class, this.appOwner));\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "670e8d4ec7e71fc3b054cd3b2826f869b649a788": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6704. Add support for work preserving NM restart when FederationInterceptor is enabled in AMRMProxyService. (Botong Huang via Subru).\n",
      "commitDate": "08/12/17 3:39 PM",
      "commitName": "670e8d4ec7e71fc3b054cd3b2826f869b649a788",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "17/11/17 5:39 PM",
      "commitNameOld": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.92,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     try {\n       this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n-    // Add all app tokens for Yarn Registry access\n-    if (this.registryClient !\u003d null \u0026\u0026 appContext.getCredentials() !\u003d null) {\n-      this.appOwner.addCredentials(appContext.getCredentials());\n+\n+    if (appContext.getRegistryClient() !\u003d null) {\n+      this.registryClient \u003d new FederationRegistryClient(conf,\n+          appContext.getRegistryClient(), this.appOwner);\n+      // Add all app tokens for Yarn Registry access\n+      if (appContext.getCredentials() !\u003d null) {\n+        this.appOwner.addCredentials(appContext.getCredentials());\n+      }\n     }\n \n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n-    this.homeRM \u003d createHomeRMProxy(appContext);\n+    this.homeRM \u003d createHomeRMProxy(appContext, ApplicationMasterProtocol.class,\n+        this.appOwner);\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n-\n-    if (appContext.getRegistryClient() !\u003d null) {\n-      this.registryClient \u003d new FederationRegistryClient(conf,\n-          appContext.getRegistryClient(), this.appOwner);\n-    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), this.appOwner);\n      // Add all app tokens for Yarn Registry access\n      if (appContext.getCredentials() !\u003d null) {\n        this.appOwner.addCredentials(appContext.getCredentials());\n      }\n    }\n\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRM \u003d createHomeRMProxy(appContext, ApplicationMasterProtocol.class,\n        this.appOwner);\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "d5f66888b8d767ee6706fab9950c194a1bf26d32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6128. Add support for AMRMProxy HA. (Botong Huang via Subru).\n",
      "commitDate": "17/11/17 5:39 PM",
      "commitName": "d5f66888b8d767ee6706fab9950c194a1bf26d32",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "28/09/17 1:04 PM",
      "commitNameOld": "ca669f9f8bc7abe5b7d4648c589aa1756bd336d1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 50.23,
      "commitsBetweenForRepo": 444,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,41 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     try {\n       this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n+    // Add all app tokens for Yarn Registry access\n+    if (this.registryClient !\u003d null \u0026\u0026 appContext.getCredentials() !\u003d null) {\n+      this.appOwner.addCredentials(appContext.getCredentials());\n+    }\n \n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n     this.homeRM \u003d createHomeRMProxy(appContext);\n \n     this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n     this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n \n     // AMRMProxyPolicy will be initialized in registerApplicationMaster\n     this.policyInterpreter \u003d null;\n \n     this.uamPool.init(conf);\n     this.uamPool.start();\n+\n+    if (appContext.getRegistryClient() !\u003d null) {\n+      this.registryClient \u003d new FederationRegistryClient(conf,\n+          appContext.getRegistryClient(), this.appOwner);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n    // Add all app tokens for Yarn Registry access\n    if (this.registryClient !\u003d null \u0026\u0026 appContext.getCredentials() !\u003d null) {\n      this.appOwner.addCredentials(appContext.getCredentials());\n    }\n\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRM \u003d createHomeRMProxy(appContext);\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n\n    if (appContext.getRegistryClient() !\u003d null) {\n      this.registryClient \u003d new FederationRegistryClient(conf,\n          appContext.getRegistryClient(), this.appOwner);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "70b1a757f13b01a9192ea5fb0820ba7babfd974e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6511. Federation: transparently spanning application across multiple sub-clusters. (Botong Huang via Subru).\n\n(cherry picked from commit 8c988d235eaf0972783985b1ab24680d029aea79)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "70b1a757f13b01a9192ea5fb0820ba7babfd974e",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,32 @@\n   public void init(AMRMProxyApplicationContext appContext) {\n     super.init(appContext);\n     LOG.info(\"Initializing Federation Interceptor\");\n \n     // Update the conf if available\n     Configuration conf \u003d appContext.getConf();\n     if (conf \u003d\u003d null) {\n       conf \u003d getConf();\n     } else {\n       setConf(conf);\n     }\n \n     try {\n       this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n           UserGroupInformation.getCurrentUser());\n     } catch (Exception ex) {\n       throw new YarnRuntimeException(ex);\n     }\n \n     this.homeSubClusterId \u003d\n         SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n     this.homeRM \u003d createHomeRMProxy(appContext);\n+\n+    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n+    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n+\n+    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n+    this.policyInterpreter \u003d null;\n+\n+    this.uamPool.init(conf);\n+    this.uamPool.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRM \u003d createHomeRMProxy(appContext);\n\n    this.federationFacade \u003d FederationStateStoreFacade.getInstance();\n    this.subClusterResolver \u003d this.federationFacade.getSubClusterResolver();\n\n    // AMRMProxyPolicy will be initialized in registerApplicationMaster\n    this.policyInterpreter \u003d null;\n\n    this.uamPool.init(conf);\n    this.uamPool.start();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java",
      "extendedDetails": {}
    },
    "bed1832c934fe4ba44efdcdc49fce06457dc3d4f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3666. Federation Intercepting and propagating AM- home RM communications. (Botong Huang via Subru).\n\n(cherry picked from commit 2399eb8200609246cb623c74450ca4a2032063cc)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "bed1832c934fe4ba44efdcdc49fce06457dc3d4f",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,23 @@\n+  public void init(AMRMProxyApplicationContext appContext) {\n+    super.init(appContext);\n+    LOG.info(\"Initializing Federation Interceptor\");\n+\n+    // Update the conf if available\n+    Configuration conf \u003d appContext.getConf();\n+    if (conf \u003d\u003d null) {\n+      conf \u003d getConf();\n+    } else {\n+      setConf(conf);\n+    }\n+\n+    try {\n+      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n+          UserGroupInformation.getCurrentUser());\n+    } catch (Exception ex) {\n+      throw new YarnRuntimeException(ex);\n+    }\n+\n+    this.homeSubClusterId \u003d\n+        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n+    this.homeRM \u003d createHomeRMProxy(appContext);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(AMRMProxyApplicationContext appContext) {\n    super.init(appContext);\n    LOG.info(\"Initializing Federation Interceptor\");\n\n    // Update the conf if available\n    Configuration conf \u003d appContext.getConf();\n    if (conf \u003d\u003d null) {\n      conf \u003d getConf();\n    } else {\n      setConf(conf);\n    }\n\n    try {\n      this.appOwner \u003d UserGroupInformation.createProxyUser(appContext.getUser(),\n          UserGroupInformation.getCurrentUser());\n    } catch (Exception ex) {\n      throw new YarnRuntimeException(ex);\n    }\n\n    this.homeSubClusterId \u003d\n        SubClusterId.newInstance(YarnConfiguration.getClusterId(conf));\n    this.homeRM \u003d createHomeRMProxy(appContext);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/amrmproxy/FederationInterceptor.java"
    }
  }
}