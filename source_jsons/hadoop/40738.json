{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueMetrics.java",
  "functionName": "getPartitionQueueMetrics",
  "functionId": "getPartitionQueueMetrics___partition-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java",
  "functionStartLine": 300,
  "functionEndLine": 328,
  "numCommitsSeen": 39,
  "timeTaken": 1877,
  "changeHistory": [
    "c30c23cb665761e997bcfc1dc00908f70b069fa2"
  ],
  "changeHistoryShort": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c30c23cb665761e997bcfc1dc00908f70b069fa2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6492. Generate queue metrics for each partition. Contributed by Manikandan R\n",
      "commitDate": "26/05/20 4:29 PM",
      "commitName": "c30c23cb665761e997bcfc1dc00908f70b069fa2",
      "commitAuthor": "Jonathan Hung",
      "diff": "@@ -0,0 +1,29 @@\n+  public synchronized QueueMetrics getPartitionQueueMetrics(String partition) {\n+\n+    String partitionJMXStr \u003d partition;\n+\n+    if ((partition \u003d\u003d null)\n+        || (partition.equals(RMNodeLabelsManager.NO_LABEL))) {\n+      partition \u003d DEFAULT_PARTITION;\n+      partitionJMXStr \u003d DEFAULT_PARTITION_JMX_STR;\n+    }\n+\n+    String metricName \u003d partition + METRIC_NAME_DELIMITER + this.queueName;\n+    QueueMetrics metrics \u003d getQueueMetrics().get(metricName);\n+\n+    if (metrics \u003d\u003d null) {\n+      QueueMetrics queueMetrics \u003d\n+          new PartitionQueueMetrics(metricsSystem, this.queueName, parentQueue,\n+              this.enableUserMetrics, this.conf, partition);\n+      metricsSystem.register(\n+          pSourceName(partitionJMXStr).append(qSourceName(this.queueName))\n+              .toString(),\n+          \"Metrics for queue: \" + this.queueName,\n+          queueMetrics.tag(PARTITION_INFO, partitionJMXStr).tag(QUEUE_INFO,\n+              this.queueName));\n+      getQueueMetrics().put(metricName, queueMetrics);\n+      return queueMetrics;\n+    } else {\n+      return metrics;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized QueueMetrics getPartitionQueueMetrics(String partition) {\n\n    String partitionJMXStr \u003d partition;\n\n    if ((partition \u003d\u003d null)\n        || (partition.equals(RMNodeLabelsManager.NO_LABEL))) {\n      partition \u003d DEFAULT_PARTITION;\n      partitionJMXStr \u003d DEFAULT_PARTITION_JMX_STR;\n    }\n\n    String metricName \u003d partition + METRIC_NAME_DELIMITER + this.queueName;\n    QueueMetrics metrics \u003d getQueueMetrics().get(metricName);\n\n    if (metrics \u003d\u003d null) {\n      QueueMetrics queueMetrics \u003d\n          new PartitionQueueMetrics(metricsSystem, this.queueName, parentQueue,\n              this.enableUserMetrics, this.conf, partition);\n      metricsSystem.register(\n          pSourceName(partitionJMXStr).append(qSourceName(this.queueName))\n              .toString(),\n          \"Metrics for queue: \" + this.queueName,\n          queueMetrics.tag(PARTITION_INFO, partitionJMXStr).tag(QUEUE_INFO,\n              this.queueName));\n      getQueueMetrics().put(metricName, queueMetrics);\n      return queueMetrics;\n    } else {\n      return metrics;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/QueueMetrics.java"
    }
  }
}