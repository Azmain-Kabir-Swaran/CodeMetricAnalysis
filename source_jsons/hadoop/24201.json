{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobHistoryUtils.java",
  "functionName": "getHistoryDirsForCleaning",
  "functionId": "getHistoryDirsForCleaning___fc-FileContext__root-Path__cutoff-long",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java",
  "functionStartLine": 609,
  "functionEndLine": 663,
  "numCommitsSeen": 24,
  "timeTaken": 894,
  "changeHistory": [
    "84cec3c805867cf0c880c9ecb9fc220733032bc9"
  ],
  "changeHistoryShort": {
    "84cec3c805867cf0c880c9ecb9fc220733032bc9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84cec3c805867cf0c880c9ecb9fc220733032bc9": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4680. Job history cleaner should only check timestamps of files in old enough directories (Robert Kanter via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1536558 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/13 4:48 PM",
      "commitName": "84cec3c805867cf0c880c9ecb9fc220733032bc9",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,55 @@\n+  public static List\u003cFileStatus\u003e getHistoryDirsForCleaning(FileContext fc,\n+      Path root, long cutoff) throws IOException {\n+    List\u003cFileStatus\u003e fsList \u003d new ArrayList\u003cFileStatus\u003e();\n+    Calendar cCal \u003d Calendar.getInstance();\n+    cCal.setTimeInMillis(cutoff);\n+    int cYear \u003d cCal.get(Calendar.YEAR);\n+    int cMonth \u003d cCal.get(Calendar.MONTH) + 1;\n+    int cDate \u003d cCal.get(Calendar.DATE);\n+\n+    RemoteIterator\u003cFileStatus\u003e yearDirIt \u003d fc.listStatus(root);\n+    while (yearDirIt.hasNext()) {\n+      FileStatus yearDir \u003d yearDirIt.next();\n+      try {\n+        int year \u003d Integer.parseInt(yearDir.getPath().getName());\n+        if (year \u003c\u003d cYear) {\n+          RemoteIterator\u003cFileStatus\u003e monthDirIt \u003d\n+              fc.listStatus(yearDir.getPath());\n+          while (monthDirIt.hasNext()) {\n+            FileStatus monthDir \u003d monthDirIt.next();\n+            try {\n+              int month \u003d Integer.parseInt(monthDir.getPath().getName());\n+              // If we only checked the month here, then something like 07/2013\n+              // would incorrectly not pass when the cutoff is 06/2014\n+              if (year \u003c cYear || month \u003c\u003d cMonth) {\n+                RemoteIterator\u003cFileStatus\u003e dateDirIt \u003d\n+                    fc.listStatus(monthDir.getPath());\n+                while (dateDirIt.hasNext()) {\n+                  FileStatus dateDir \u003d dateDirIt.next();\n+                  try {\n+                    int date \u003d Integer.parseInt(dateDir.getPath().getName());\n+                    // If we only checked the date here, then something like\n+                    // 07/21/2013 would incorrectly not pass when the cutoff is\n+                    // 08/20/2013 or 07/20/2012\n+                    if (year \u003c cYear || month \u003c cMonth || date \u003c\u003d cDate) {\n+                      fsList.addAll(remoteIterToList(\n+                          fc.listStatus(dateDir.getPath())));\n+                    }\n+                  } catch (NumberFormatException nfe) {\n+                    // the directory didn\u0027t fit the format we\u0027re looking for so\n+                    // skip the dir\n+                  }\n+                }\n+              }\n+            } catch (NumberFormatException nfe) {\n+              // the directory didn\u0027t fit the format we\u0027re looking for so skip\n+              // the dir\n+            }\n+          }\n+        }\n+      } catch (NumberFormatException nfe) {\n+        // the directory didn\u0027t fit the format we\u0027re looking for so skip the dir\n+      }\n+    }\n+    return fsList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cFileStatus\u003e getHistoryDirsForCleaning(FileContext fc,\n      Path root, long cutoff) throws IOException {\n    List\u003cFileStatus\u003e fsList \u003d new ArrayList\u003cFileStatus\u003e();\n    Calendar cCal \u003d Calendar.getInstance();\n    cCal.setTimeInMillis(cutoff);\n    int cYear \u003d cCal.get(Calendar.YEAR);\n    int cMonth \u003d cCal.get(Calendar.MONTH) + 1;\n    int cDate \u003d cCal.get(Calendar.DATE);\n\n    RemoteIterator\u003cFileStatus\u003e yearDirIt \u003d fc.listStatus(root);\n    while (yearDirIt.hasNext()) {\n      FileStatus yearDir \u003d yearDirIt.next();\n      try {\n        int year \u003d Integer.parseInt(yearDir.getPath().getName());\n        if (year \u003c\u003d cYear) {\n          RemoteIterator\u003cFileStatus\u003e monthDirIt \u003d\n              fc.listStatus(yearDir.getPath());\n          while (monthDirIt.hasNext()) {\n            FileStatus monthDir \u003d monthDirIt.next();\n            try {\n              int month \u003d Integer.parseInt(monthDir.getPath().getName());\n              // If we only checked the month here, then something like 07/2013\n              // would incorrectly not pass when the cutoff is 06/2014\n              if (year \u003c cYear || month \u003c\u003d cMonth) {\n                RemoteIterator\u003cFileStatus\u003e dateDirIt \u003d\n                    fc.listStatus(monthDir.getPath());\n                while (dateDirIt.hasNext()) {\n                  FileStatus dateDir \u003d dateDirIt.next();\n                  try {\n                    int date \u003d Integer.parseInt(dateDir.getPath().getName());\n                    // If we only checked the date here, then something like\n                    // 07/21/2013 would incorrectly not pass when the cutoff is\n                    // 08/20/2013 or 07/20/2012\n                    if (year \u003c cYear || month \u003c cMonth || date \u003c\u003d cDate) {\n                      fsList.addAll(remoteIterToList(\n                          fc.listStatus(dateDir.getPath())));\n                    }\n                  } catch (NumberFormatException nfe) {\n                    // the directory didn\u0027t fit the format we\u0027re looking for so\n                    // skip the dir\n                  }\n                }\n              }\n            } catch (NumberFormatException nfe) {\n              // the directory didn\u0027t fit the format we\u0027re looking for so skip\n              // the dir\n            }\n          }\n        }\n      } catch (NumberFormatException nfe) {\n        // the directory didn\u0027t fit the format we\u0027re looking for so skip the dir\n      }\n    }\n    return fsList;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/jobhistory/JobHistoryUtils.java"
    }
  }
}