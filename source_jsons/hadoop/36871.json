{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "updateSchedulerConfiguration",
  "functionId": "updateSchedulerConfiguration___mutationInfo-SchedConfUpdateInfo__hsr-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2683,
  "functionEndLine": 2729,
  "numCommitsSeen": 177,
  "timeTaken": 5419,
  "changeHistory": [
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
    "e566fd8b58a6570593b21597aa5294d7b37cb388",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e"
  ],
  "changeHistoryShort": {
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18": "Ybodychange",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": "Ymultichange(Ymodifierchange,Ybodychange)",
    "e566fd8b58a6570593b21597aa5294d7b37cb388": "Yparameterchange",
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": "Ybodychange",
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9788. Queue Management API does not support parallel updates. Contributed by Prabhu Joseph\n",
      "commitDate": "14/01/20 3:26 AM",
      "commitName": "1c51f36be79924489ca4a2e5ca7e96ac75a6ec18",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "06/01/20 7:26 AM",
      "commitNameOld": "768ee22e9e73543d2fb193d9b6ec34a247cb0411",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 7.83,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n       mutationInfo, @Context HttpServletRequest hsr)\n       throws AuthorizationException, InterruptedException {\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     initForWritableEndpoints(callerUGI, true);\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n         scheduler).isConfigurationMutable()) {\n       try {\n         callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws Exception {\n             MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n                 scheduler).getMutableConfProvider();\n             if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n                 mutationInfo)) {\n               throw new org.apache.hadoop.security.AccessControlException(\"User\"\n                   + \" is not admin of all modified queues.\");\n             }\n-            provider.logAndApplyMutation(callerUGI, mutationInfo);\n+            LogMutation logMutation \u003d provider.logAndApplyMutation(callerUGI,\n+                mutationInfo);\n             try {\n               rm.getRMContext().getRMAdminService().refreshQueues();\n             } catch (IOException | YarnException e) {\n-              provider.confirmPendingMutation(false);\n+              provider.confirmPendingMutation(logMutation, false);\n               throw e;\n             }\n-            provider.confirmPendingMutation(true);\n+            provider.confirmPendingMutation(logMutation, true);\n             return null;\n           }\n         });\n       } catch (IOException e) {\n         LOG.error(\"Exception thrown when modifying configuration.\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n       return Response.status(Status.OK).entity(\"Configuration change \" +\n           \"successfully applied.\").build();\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n           .entity(\"Configuration change only supported by \" +\n               \"MutableConfScheduler.\")\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n      mutationInfo, @Context HttpServletRequest hsr)\n      throws AuthorizationException, InterruptedException {\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n        scheduler).isConfigurationMutable()) {\n      try {\n        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n                scheduler).getMutableConfProvider();\n            if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n                mutationInfo)) {\n              throw new org.apache.hadoop.security.AccessControlException(\"User\"\n                  + \" is not admin of all modified queues.\");\n            }\n            LogMutation logMutation \u003d provider.logAndApplyMutation(callerUGI,\n                mutationInfo);\n            try {\n              rm.getRMContext().getRMAdminService().refreshQueues();\n            } catch (IOException | YarnException e) {\n              provider.confirmPendingMutation(logMutation, false);\n              throw e;\n            }\n            provider.confirmPendingMutation(logMutation, true);\n            return null;\n          }\n        });\n      } catch (IOException e) {\n        LOG.error(\"Exception thrown when modifying configuration.\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n      return Response.status(Status.OK).entity(\"Configuration change \" +\n          \"successfully applied.\").build();\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n              \"MutableConfScheduler.\")\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,46 @@\n   public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n       mutationInfo, @Context HttpServletRequest hsr)\n       throws AuthorizationException, InterruptedException {\n-    init();\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n-    ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n-    if (aclsManager.areACLsEnabled()) {\n-      if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n-        String msg \u003d \"Only admins can carry out this operation.\";\n-        throw new ForbiddenException(msg);\n-      }\n-    }\n+    initForWritableEndpoints(callerUGI, true);\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n         scheduler).isConfigurationMutable()) {\n       try {\n         callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws Exception {\n             MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n                 scheduler).getMutableConfProvider();\n             if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n                 mutationInfo)) {\n               throw new org.apache.hadoop.security.AccessControlException(\"User\"\n                   + \" is not admin of all modified queues.\");\n             }\n             provider.logAndApplyMutation(callerUGI, mutationInfo);\n             try {\n               rm.getRMContext().getRMAdminService().refreshQueues();\n             } catch (IOException | YarnException e) {\n               provider.confirmPendingMutation(false);\n               throw e;\n             }\n             provider.confirmPendingMutation(true);\n             return null;\n           }\n         });\n       } catch (IOException e) {\n         LOG.error(\"Exception thrown when modifying configuration.\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n       return Response.status(Status.OK).entity(\"Configuration change \" +\n           \"successfully applied.\").build();\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n           .entity(\"Configuration change only supported by \" +\n               \"MutableConfScheduler.\")\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n      mutationInfo, @Context HttpServletRequest hsr)\n      throws AuthorizationException, InterruptedException {\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n        scheduler).isConfigurationMutable()) {\n      try {\n        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n                scheduler).getMutableConfProvider();\n            if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n                mutationInfo)) {\n              throw new org.apache.hadoop.security.AccessControlException(\"User\"\n                  + \" is not admin of all modified queues.\");\n            }\n            provider.logAndApplyMutation(callerUGI, mutationInfo);\n            try {\n              rm.getRMContext().getRMAdminService().refreshQueues();\n            } catch (IOException | YarnException e) {\n              provider.confirmPendingMutation(false);\n              throw e;\n            }\n            provider.confirmPendingMutation(true);\n            return null;\n          }\n        });\n      } catch (IOException e) {\n        LOG.error(\"Exception thrown when modifying configuration.\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n      return Response.status(Status.OK).entity(\"Configuration change \" +\n          \"successfully applied.\").build();\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n              \"MutableConfScheduler.\")\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "ff39c0de206a4fce1f0e8a416357a7a8261f8634": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "916bdbd6bedbc75000bb74e16c1e2ee692a4912c",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,53 @@\n-  public Response updateSchedulerConfiguration(SchedConfUpdateInfo\n+  public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n       mutationInfo, @Context HttpServletRequest hsr)\n       throws AuthorizationException, InterruptedException {\n     init();\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n     if (aclsManager.areACLsEnabled()) {\n       if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n         String msg \u003d \"Only admins can carry out this operation.\";\n         throw new ForbiddenException(msg);\n       }\n     }\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n-    if (scheduler instanceof MutableConfScheduler) {\n+    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n+        scheduler).isConfigurationMutable()) {\n       try {\n         callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n-          public Void run() throws IOException, YarnException {\n-            ((MutableConfScheduler) scheduler).updateConfiguration(callerUGI,\n-                mutationInfo);\n+          public Void run() throws Exception {\n+            MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n+                scheduler).getMutableConfProvider();\n+            if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n+                mutationInfo)) {\n+              throw new org.apache.hadoop.security.AccessControlException(\"User\"\n+                  + \" is not admin of all modified queues.\");\n+            }\n+            provider.logAndApplyMutation(callerUGI, mutationInfo);\n+            try {\n+              rm.getRMContext().getRMAdminService().refreshQueues();\n+            } catch (IOException | YarnException e) {\n+              provider.confirmPendingMutation(false);\n+              throw e;\n+            }\n+            provider.confirmPendingMutation(true);\n             return null;\n           }\n         });\n       } catch (IOException e) {\n+        LOG.error(\"Exception thrown when modifying configuration.\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n       return Response.status(Status.OK).entity(\"Configuration change \" +\n           \"successfully applied.\").build();\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n           .entity(\"Configuration change only supported by \" +\n               \"MutableConfScheduler.\")\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n      mutationInfo, @Context HttpServletRequest hsr)\n      throws AuthorizationException, InterruptedException {\n    init();\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n    if (aclsManager.areACLsEnabled()) {\n      if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n        String msg \u003d \"Only admins can carry out this operation.\";\n        throw new ForbiddenException(msg);\n      }\n    }\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n        scheduler).isConfigurationMutable()) {\n      try {\n        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n                scheduler).getMutableConfProvider();\n            if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n                mutationInfo)) {\n              throw new org.apache.hadoop.security.AccessControlException(\"User\"\n                  + \" is not admin of all modified queues.\");\n            }\n            provider.logAndApplyMutation(callerUGI, mutationInfo);\n            try {\n              rm.getRMContext().getRMAdminService().refreshQueues();\n            } catch (IOException | YarnException e) {\n              provider.confirmPendingMutation(false);\n              throw e;\n            }\n            provider.confirmPendingMutation(true);\n            return null;\n          }\n        });\n      } catch (IOException e) {\n        LOG.error(\"Exception thrown when modifying configuration.\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n      return Response.status(Status.OK).entity(\"Configuration change \" +\n          \"successfully applied.\").build();\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n              \"MutableConfScheduler.\")\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6840. Implement zookeeper based store for scheduler configuration updates. (Jonathan Hung via wangda)\n\nChange-Id: I9debea674fe8c7e4109d4ca136965a1ea4c48bcc\n",
          "commitDate": "09/10/17 11:11 AM",
          "commitName": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "916bdbd6bedbc75000bb74e16c1e2ee692a4912c",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,53 @@\n-  public Response updateSchedulerConfiguration(SchedConfUpdateInfo\n+  public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n       mutationInfo, @Context HttpServletRequest hsr)\n       throws AuthorizationException, InterruptedException {\n     init();\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n     if (aclsManager.areACLsEnabled()) {\n       if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n         String msg \u003d \"Only admins can carry out this operation.\";\n         throw new ForbiddenException(msg);\n       }\n     }\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n-    if (scheduler instanceof MutableConfScheduler) {\n+    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n+        scheduler).isConfigurationMutable()) {\n       try {\n         callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n-          public Void run() throws IOException, YarnException {\n-            ((MutableConfScheduler) scheduler).updateConfiguration(callerUGI,\n-                mutationInfo);\n+          public Void run() throws Exception {\n+            MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n+                scheduler).getMutableConfProvider();\n+            if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n+                mutationInfo)) {\n+              throw new org.apache.hadoop.security.AccessControlException(\"User\"\n+                  + \" is not admin of all modified queues.\");\n+            }\n+            provider.logAndApplyMutation(callerUGI, mutationInfo);\n+            try {\n+              rm.getRMContext().getRMAdminService().refreshQueues();\n+            } catch (IOException | YarnException e) {\n+              provider.confirmPendingMutation(false);\n+              throw e;\n+            }\n+            provider.confirmPendingMutation(true);\n             return null;\n           }\n         });\n       } catch (IOException e) {\n+        LOG.error(\"Exception thrown when modifying configuration.\", e);\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n       return Response.status(Status.OK).entity(\"Configuration change \" +\n           \"successfully applied.\").build();\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n           .entity(\"Configuration change only supported by \" +\n               \"MutableConfScheduler.\")\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized Response updateSchedulerConfiguration(SchedConfUpdateInfo\n      mutationInfo, @Context HttpServletRequest hsr)\n      throws AuthorizationException, InterruptedException {\n    init();\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n    if (aclsManager.areACLsEnabled()) {\n      if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n        String msg \u003d \"Only admins can carry out this operation.\";\n        throw new ForbiddenException(msg);\n      }\n    }\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n        scheduler).isConfigurationMutable()) {\n      try {\n        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws Exception {\n            MutableConfigurationProvider provider \u003d ((MutableConfScheduler)\n                scheduler).getMutableConfProvider();\n            if (!provider.getAclMutationPolicy().isMutationAllowed(callerUGI,\n                mutationInfo)) {\n              throw new org.apache.hadoop.security.AccessControlException(\"User\"\n                  + \" is not admin of all modified queues.\");\n            }\n            provider.logAndApplyMutation(callerUGI, mutationInfo);\n            try {\n              rm.getRMContext().getRMAdminService().refreshQueues();\n            } catch (IOException | YarnException e) {\n              provider.confirmPendingMutation(false);\n              throw e;\n            }\n            provider.confirmPendingMutation(true);\n            return null;\n          }\n        });\n      } catch (IOException e) {\n        LOG.error(\"Exception thrown when modifying configuration.\", e);\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n      return Response.status(Status.OK).entity(\"Configuration change \" +\n          \"successfully applied.\").build();\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n              \"MutableConfScheduler.\")\n          .build();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "e566fd8b58a6570593b21597aa5294d7b37cb388": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-6575. Support global configuration mutation in MutableConfProvider. (Jonathan Hung via Xuan Gong)\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "e566fd8b58a6570593b21597aa5294d7b37cb388",
      "commitAuthor": "Xuan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n-  public Response updateSchedulerConfiguration(QueueConfigsUpdateInfo\n+  public Response updateSchedulerConfiguration(SchedConfUpdateInfo\n       mutationInfo, @Context HttpServletRequest hsr)\n       throws AuthorizationException, InterruptedException {\n     init();\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n     if (aclsManager.areACLsEnabled()) {\n       if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n         String msg \u003d \"Only admins can carry out this operation.\";\n         throw new ForbiddenException(msg);\n       }\n     }\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler) {\n       try {\n         callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws IOException, YarnException {\n             ((MutableConfScheduler) scheduler).updateConfiguration(callerUGI,\n                 mutationInfo);\n             return null;\n           }\n         });\n       } catch (IOException e) {\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n       return Response.status(Status.OK).entity(\"Configuration change \" +\n           \"successfully applied.\").build();\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n           .entity(\"Configuration change only supported by \" +\n               \"MutableConfScheduler.\")\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateSchedulerConfiguration(SchedConfUpdateInfo\n      mutationInfo, @Context HttpServletRequest hsr)\n      throws AuthorizationException, InterruptedException {\n    init();\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n    if (aclsManager.areACLsEnabled()) {\n      if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n        String msg \u003d \"Only admins can carry out this operation.\";\n        throw new ForbiddenException(msg);\n      }\n    }\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler) {\n      try {\n        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException, YarnException {\n            ((MutableConfScheduler) scheduler).updateConfiguration(callerUGI,\n                mutationInfo);\n            return null;\n          }\n        });\n      } catch (IOException e) {\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n      return Response.status(Status.OK).entity(\"Configuration change \" +\n          \"successfully applied.\").build();\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n              \"MutableConfScheduler.\")\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {
        "oldValue": "[mutationInfo-QueueConfigsUpdateInfo, hsr-HttpServletRequest(annotations-@Context)]",
        "newValue": "[mutationInfo-SchedConfUpdateInfo, hsr-HttpServletRequest(annotations-@Context)]"
      }
    },
    "a4e62530469e4c3d5b339a06adeac2146fc15fa5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5949. Add pluggable configuration ACL policy interface and implementation. (Jonathan Hung via wangda)\n\nChange-Id: Ib98e82ff753bede21fcab2e6ca9ec1e7a5a2008f\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "a4e62530469e4c3d5b339a06adeac2146fc15fa5",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,38 @@\n   public Response updateSchedulerConfiguration(QueueConfigsUpdateInfo\n       mutationInfo, @Context HttpServletRequest hsr)\n       throws AuthorizationException, InterruptedException {\n     init();\n \n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n     if (aclsManager.areACLsEnabled()) {\n       if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n         String msg \u003d \"Only admins can carry out this operation.\";\n         throw new ForbiddenException(msg);\n       }\n     }\n \n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler) {\n       try {\n         callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n           @Override\n           public Void run() throws IOException, YarnException {\n-            Map\u003cString, String\u003e confUpdate \u003d\n-                constructKeyValueConfUpdate(mutationInfo);\n-            ((CapacityScheduler) scheduler).updateConfiguration(callerUGI,\n-                confUpdate);\n+            ((MutableConfScheduler) scheduler).updateConfiguration(callerUGI,\n+                mutationInfo);\n             return null;\n           }\n         });\n       } catch (IOException e) {\n         return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n             .build();\n       }\n       return Response.status(Status.OK).entity(\"Configuration change \" +\n           \"successfully applied.\").build();\n     } else {\n       return Response.status(Status.BAD_REQUEST)\n-          .entity(\"Configuration change only supported by CapacityScheduler.\")\n+          .entity(\"Configuration change only supported by \" +\n+              \"MutableConfScheduler.\")\n           .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateSchedulerConfiguration(QueueConfigsUpdateInfo\n      mutationInfo, @Context HttpServletRequest hsr)\n      throws AuthorizationException, InterruptedException {\n    init();\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n    if (aclsManager.areACLsEnabled()) {\n      if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n        String msg \u003d \"Only admins can carry out this operation.\";\n        throw new ForbiddenException(msg);\n      }\n    }\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler) {\n      try {\n        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException, YarnException {\n            ((MutableConfScheduler) scheduler).updateConfiguration(callerUGI,\n                mutationInfo);\n            return null;\n          }\n        });\n      } catch (IOException e) {\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n      return Response.status(Status.OK).entity(\"Configuration change \" +\n          \"successfully applied.\").build();\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by \" +\n              \"MutableConfScheduler.\")\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "d8a5136b1f3761166a08969eda7a7f66d1578d7e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5952. Create REST API for changing YARN scheduler configurations. (Jonathan Hung via wangda)\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "d8a5136b1f3761166a08969eda7a7f66d1578d7e",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,39 @@\n+  public Response updateSchedulerConfiguration(QueueConfigsUpdateInfo\n+      mutationInfo, @Context HttpServletRequest hsr)\n+      throws AuthorizationException, InterruptedException {\n+    init();\n+\n+    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n+    ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n+    if (aclsManager.areACLsEnabled()) {\n+      if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n+        String msg \u003d \"Only admins can carry out this operation.\";\n+        throw new ForbiddenException(msg);\n+      }\n+    }\n+\n+    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n+    if (scheduler instanceof MutableConfScheduler) {\n+      try {\n+        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+          @Override\n+          public Void run() throws IOException, YarnException {\n+            Map\u003cString, String\u003e confUpdate \u003d\n+                constructKeyValueConfUpdate(mutationInfo);\n+            ((CapacityScheduler) scheduler).updateConfiguration(callerUGI,\n+                confUpdate);\n+            return null;\n+          }\n+        });\n+      } catch (IOException e) {\n+        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n+            .build();\n+      }\n+      return Response.status(Status.OK).entity(\"Configuration change \" +\n+          \"successfully applied.\").build();\n+    } else {\n+      return Response.status(Status.BAD_REQUEST)\n+          .entity(\"Configuration change only supported by CapacityScheduler.\")\n+          .build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Response updateSchedulerConfiguration(QueueConfigsUpdateInfo\n      mutationInfo, @Context HttpServletRequest hsr)\n      throws AuthorizationException, InterruptedException {\n    init();\n\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    ApplicationACLsManager aclsManager \u003d rm.getApplicationACLsManager();\n    if (aclsManager.areACLsEnabled()) {\n      if (callerUGI \u003d\u003d null || !aclsManager.isAdmin(callerUGI)) {\n        String msg \u003d \"Only admins can carry out this operation.\";\n        throw new ForbiddenException(msg);\n      }\n    }\n\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler) {\n      try {\n        callerUGI.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n          @Override\n          public Void run() throws IOException, YarnException {\n            Map\u003cString, String\u003e confUpdate \u003d\n                constructKeyValueConfUpdate(mutationInfo);\n            ((CapacityScheduler) scheduler).updateConfiguration(callerUGI,\n                confUpdate);\n            return null;\n          }\n        });\n      } catch (IOException e) {\n        return Response.status(Status.BAD_REQUEST).entity(e.getMessage())\n            .build();\n      }\n      return Response.status(Status.OK).entity(\"Configuration change \" +\n          \"successfully applied.\").build();\n    } else {\n      return Response.status(Status.BAD_REQUEST)\n          .entity(\"Configuration change only supported by CapacityScheduler.\")\n          .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}