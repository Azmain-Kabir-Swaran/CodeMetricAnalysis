{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Find.java",
  "functionName": "recursePath",
  "functionId": "recursePath___item-PathData",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/find/Find.java",
  "functionStartLine": 346,
  "functionEndLine": 371,
  "numCommitsSeen": 3,
  "timeTaken": 636,
  "changeHistory": [
    "ba879a5dadbb0f33bba7e05ebc329a9942f34276"
  ],
  "changeHistoryShort": {
    "ba879a5dadbb0f33bba7e05ebc329a9942f34276": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba879a5dadbb0f33bba7e05ebc329a9942f34276": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8989. hadoop fs -find feature (Jonathan Allen via aw)\n",
      "commitDate": "13/11/14 11:52 AM",
      "commitName": "ba879a5dadbb0f33bba7e05ebc329a9942f34276",
      "commitAuthor": "Allen Wittenauer",
      "diff": "@@ -0,0 +1,26 @@\n+  protected void recursePath(PathData item) throws IOException {\n+    if (isStop(item)) {\n+      // this item returned a stop result so don\u0027t recurse any further\n+      return;\n+    }\n+    if (getDepth() \u003e\u003d getOptions().getMaxDepth()) {\n+      // reached the maximum depth so don\u0027t got any further.\n+      return;\n+    }\n+    if (item.stat.isSymlink() \u0026\u0026 getOptions().isFollowLink()) {\n+      PathData linkedItem \u003d\n+          new PathData(item.stat.getSymlink().toString(), getConf());\n+      if (isAncestor(item, linkedItem)) {\n+        getOptions().getErr().println(\n+            \"Infinite loop ignored: \" + item.toString() + \" -\u003e \"\n+                + linkedItem.toString());\n+        return;\n+      }\n+      if (linkedItem.exists) {\n+        item \u003d linkedItem;\n+      }\n+    }\n+    if (item.stat.isDirectory()) {\n+      super.recursePath(item);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void recursePath(PathData item) throws IOException {\n    if (isStop(item)) {\n      // this item returned a stop result so don\u0027t recurse any further\n      return;\n    }\n    if (getDepth() \u003e\u003d getOptions().getMaxDepth()) {\n      // reached the maximum depth so don\u0027t got any further.\n      return;\n    }\n    if (item.stat.isSymlink() \u0026\u0026 getOptions().isFollowLink()) {\n      PathData linkedItem \u003d\n          new PathData(item.stat.getSymlink().toString(), getConf());\n      if (isAncestor(item, linkedItem)) {\n        getOptions().getErr().println(\n            \"Infinite loop ignored: \" + item.toString() + \" -\u003e \"\n                + linkedItem.toString());\n        return;\n      }\n      if (linkedItem.exists) {\n        item \u003d linkedItem;\n      }\n    }\n    if (item.stat.isDirectory()) {\n      super.recursePath(item);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/find/Find.java"
    }
  }
}