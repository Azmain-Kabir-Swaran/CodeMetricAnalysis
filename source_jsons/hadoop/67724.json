{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CopyCommitter.java",
  "functionName": "listTargetFiles",
  "functionId": "listTargetFiles___conf-Configuration(modifiers-final)__targetListing-Path(modifiers-final)__sortedTargetListing-Path(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java",
  "functionStartLine": 546,
  "functionEndLine": 578,
  "numCommitsSeen": 23,
  "timeTaken": 2085,
  "changeHistory": [
    "ca8b80bf59c0570bb9172208d3a6c993a6854514",
    "1976e0066e9ae8852715fa69d8aea3769330e933"
  ],
  "changeHistoryShort": {
    "ca8b80bf59c0570bb9172208d3a6c993a6854514": "Ybodychange",
    "1976e0066e9ae8852715fa69d8aea3769330e933": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ca8b80bf59c0570bb9172208d3a6c993a6854514": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15384. distcp numListstatusThreads option doesn\u0027t get to -delete scan.\nContributed by Steve Loughran.\n",
      "commitDate": "10/07/18 2:43 AM",
      "commitName": "ca8b80bf59c0570bb9172208d3a6c993a6854514",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "15/03/18 11:05 AM",
      "commitNameOld": "1976e0066e9ae8852715fa69d8aea3769330e933",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 116.65,
      "commitsBetweenForRepo": 1436,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,33 @@\n   private Path listTargetFiles(final Configuration conf,\n       final Path targetListing,\n       final Path sortedTargetListing) throws IOException {\n     CopyListing target \u003d new GlobbedCopyListing(new Configuration(conf), null);\n     Path targetFinalPath \u003d new Path(\n         conf.get(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n     List\u003cPath\u003e targets \u003d new ArrayList\u003c\u003e(1);\n     targets.add(targetFinalPath);\n     Path resultNonePath \u003d Path.getPathWithoutSchemeAndAuthority(targetFinalPath)\n         .toString().startsWith(DistCpConstants.HDFS_RESERVED_RAW_DIRECTORY_NAME)\n         ? DistCpConstants.RAW_NONE_PATH\n         : DistCpConstants.NONE_PATH;\n     //\n     // Set up options to be the same from the CopyListing.buildListing\u0027s\n     // perspective, so to collect similar listings as when doing the copy\n     //\n+    // thread count is picked up from the job\n+    int threads \u003d conf.getInt(DistCpConstants.CONF_LABEL_LISTSTATUS_THREADS,\n+        DistCpConstants.DEFAULT_LISTSTATUS_THREADS);\n+    LOG.info(\"Scanning destination directory {} with thread count: {}\",\n+        targetFinalPath, threads);\n     DistCpOptions options \u003d new DistCpOptions.Builder(targets, resultNonePath)\n         .withOverwrite(overwrite)\n         .withSyncFolder(syncFolder)\n+        .withNumListstatusThreads(threads)\n         .build();\n     DistCpContext distCpContext \u003d new DistCpContext(options);\n     distCpContext.setTargetPathExists(targetPathExists);\n \n     target.buildListing(targetListing, distCpContext);\n     DistCpUtils.sortListing(conf, targetListing, sortedTargetListing);\n     return targetFinalPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Path listTargetFiles(final Configuration conf,\n      final Path targetListing,\n      final Path sortedTargetListing) throws IOException {\n    CopyListing target \u003d new GlobbedCopyListing(new Configuration(conf), null);\n    Path targetFinalPath \u003d new Path(\n        conf.get(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    List\u003cPath\u003e targets \u003d new ArrayList\u003c\u003e(1);\n    targets.add(targetFinalPath);\n    Path resultNonePath \u003d Path.getPathWithoutSchemeAndAuthority(targetFinalPath)\n        .toString().startsWith(DistCpConstants.HDFS_RESERVED_RAW_DIRECTORY_NAME)\n        ? DistCpConstants.RAW_NONE_PATH\n        : DistCpConstants.NONE_PATH;\n    //\n    // Set up options to be the same from the CopyListing.buildListing\u0027s\n    // perspective, so to collect similar listings as when doing the copy\n    //\n    // thread count is picked up from the job\n    int threads \u003d conf.getInt(DistCpConstants.CONF_LABEL_LISTSTATUS_THREADS,\n        DistCpConstants.DEFAULT_LISTSTATUS_THREADS);\n    LOG.info(\"Scanning destination directory {} with thread count: {}\",\n        targetFinalPath, threads);\n    DistCpOptions options \u003d new DistCpOptions.Builder(targets, resultNonePath)\n        .withOverwrite(overwrite)\n        .withSyncFolder(syncFolder)\n        .withNumListstatusThreads(threads)\n        .build();\n    DistCpContext distCpContext \u003d new DistCpContext(options);\n    distCpContext.setTargetPathExists(targetPathExists);\n\n    target.buildListing(targetListing, distCpContext);\n    DistCpUtils.sortListing(conf, targetListing, sortedTargetListing);\n    return targetFinalPath;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java",
      "extendedDetails": {}
    },
    "1976e0066e9ae8852715fa69d8aea3769330e933": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15209. DistCp to eliminate needless deletion of files under already-deleted directories.\nContributed by Steve Loughran.\n",
      "commitDate": "15/03/18 11:05 AM",
      "commitName": "1976e0066e9ae8852715fa69d8aea3769330e933",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,27 @@\n+  private Path listTargetFiles(final Configuration conf,\n+      final Path targetListing,\n+      final Path sortedTargetListing) throws IOException {\n+    CopyListing target \u003d new GlobbedCopyListing(new Configuration(conf), null);\n+    Path targetFinalPath \u003d new Path(\n+        conf.get(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n+    List\u003cPath\u003e targets \u003d new ArrayList\u003c\u003e(1);\n+    targets.add(targetFinalPath);\n+    Path resultNonePath \u003d Path.getPathWithoutSchemeAndAuthority(targetFinalPath)\n+        .toString().startsWith(DistCpConstants.HDFS_RESERVED_RAW_DIRECTORY_NAME)\n+        ? DistCpConstants.RAW_NONE_PATH\n+        : DistCpConstants.NONE_PATH;\n+    //\n+    // Set up options to be the same from the CopyListing.buildListing\u0027s\n+    // perspective, so to collect similar listings as when doing the copy\n+    //\n+    DistCpOptions options \u003d new DistCpOptions.Builder(targets, resultNonePath)\n+        .withOverwrite(overwrite)\n+        .withSyncFolder(syncFolder)\n+        .build();\n+    DistCpContext distCpContext \u003d new DistCpContext(options);\n+    distCpContext.setTargetPathExists(targetPathExists);\n+\n+    target.buildListing(targetListing, distCpContext);\n+    DistCpUtils.sortListing(conf, targetListing, sortedTargetListing);\n+    return targetFinalPath;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Path listTargetFiles(final Configuration conf,\n      final Path targetListing,\n      final Path sortedTargetListing) throws IOException {\n    CopyListing target \u003d new GlobbedCopyListing(new Configuration(conf), null);\n    Path targetFinalPath \u003d new Path(\n        conf.get(DistCpConstants.CONF_LABEL_TARGET_FINAL_PATH));\n    List\u003cPath\u003e targets \u003d new ArrayList\u003c\u003e(1);\n    targets.add(targetFinalPath);\n    Path resultNonePath \u003d Path.getPathWithoutSchemeAndAuthority(targetFinalPath)\n        .toString().startsWith(DistCpConstants.HDFS_RESERVED_RAW_DIRECTORY_NAME)\n        ? DistCpConstants.RAW_NONE_PATH\n        : DistCpConstants.NONE_PATH;\n    //\n    // Set up options to be the same from the CopyListing.buildListing\u0027s\n    // perspective, so to collect similar listings as when doing the copy\n    //\n    DistCpOptions options \u003d new DistCpOptions.Builder(targets, resultNonePath)\n        .withOverwrite(overwrite)\n        .withSyncFolder(syncFolder)\n        .build();\n    DistCpContext distCpContext \u003d new DistCpContext(options);\n    distCpContext.setTargetPathExists(targetPathExists);\n\n    target.buildListing(targetListing, distCpContext);\n    DistCpUtils.sortListing(conf, targetListing, sortedTargetListing);\n    return targetFinalPath;\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/mapred/CopyCommitter.java"
    }
  }
}