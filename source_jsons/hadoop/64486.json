{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "S3AUtils.java",
  "functionName": "lookupPassword",
  "functionId": "lookupPassword___bucket-String__conf-Configuration__baseKey-String__overrideVal-String__defVal-String",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java",
  "functionStartLine": 885,
  "functionEndLine": 912,
  "numCommitsSeen": 51,
  "timeTaken": 1587,
  "changeHistory": [
    "da9a39eed138210de29b59b90c449b28da1c04f9"
  ],
  "changeHistoryShort": {
    "da9a39eed138210de29b59b90c449b28da1c04f9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "da9a39eed138210de29b59b90c449b28da1c04f9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15583. Stabilize S3A Assumed Role support.\nContributed by Steve Loughran.\n",
      "commitDate": "08/08/18 10:57 PM",
      "commitName": "da9a39eed138210de29b59b90c449b28da1c04f9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,28 @@\n+  public static String lookupPassword(\n+      String bucket,\n+      Configuration conf,\n+      String baseKey,\n+      String overrideVal,\n+      String defVal)\n+      throws IOException {\n+    String initialVal;\n+    Preconditions.checkArgument(baseKey.startsWith(FS_S3A_PREFIX),\n+        \"%s does not start with $%s\", baseKey, FS_S3A_PREFIX);\n+    // if there\u0027s a bucket, work with it\n+    if (StringUtils.isNotEmpty(bucket)) {\n+      String subkey \u003d baseKey.substring(FS_S3A_PREFIX.length());\n+      String shortBucketKey \u003d String.format(\n+          BUCKET_PATTERN, bucket, subkey);\n+      String longBucketKey \u003d String.format(\n+          BUCKET_PATTERN, bucket, baseKey);\n+\n+      // set from the long key unless overidden.\n+      initialVal \u003d getPassword(conf, longBucketKey, overrideVal);\n+      // then override from the short one if it is set\n+      initialVal \u003d getPassword(conf, shortBucketKey, initialVal);\n+    } else {\n+      // no bucket, make the initial value the override value\n+      initialVal \u003d overrideVal;\n+    }\n+    return getPassword(conf, baseKey, initialVal, defVal);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String lookupPassword(\n      String bucket,\n      Configuration conf,\n      String baseKey,\n      String overrideVal,\n      String defVal)\n      throws IOException {\n    String initialVal;\n    Preconditions.checkArgument(baseKey.startsWith(FS_S3A_PREFIX),\n        \"%s does not start with $%s\", baseKey, FS_S3A_PREFIX);\n    // if there\u0027s a bucket, work with it\n    if (StringUtils.isNotEmpty(bucket)) {\n      String subkey \u003d baseKey.substring(FS_S3A_PREFIX.length());\n      String shortBucketKey \u003d String.format(\n          BUCKET_PATTERN, bucket, subkey);\n      String longBucketKey \u003d String.format(\n          BUCKET_PATTERN, bucket, baseKey);\n\n      // set from the long key unless overidden.\n      initialVal \u003d getPassword(conf, longBucketKey, overrideVal);\n      // then override from the short one if it is set\n      initialVal \u003d getPassword(conf, shortBucketKey, initialVal);\n    } else {\n      // no bucket, make the initial value the override value\n      initialVal \u003d overrideVal;\n    }\n    return getPassword(conf, baseKey, initialVal, defVal);\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/S3AUtils.java"
    }
  }
}