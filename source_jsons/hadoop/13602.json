{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LowRedundancyBlocks.java",
  "functionName": "chooseLowRedundancyBlocks",
  "functionId": "chooseLowRedundancyBlocks___blocksToProcess-int__resetIterators-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java",
  "functionStartLine": 511,
  "functionEndLine": 542,
  "numCommitsSeen": 8,
  "timeTaken": 1670,
  "changeHistory": [
    "900430b9907b590ed2d73a0d68f079c7f4d754b1"
  ],
  "changeHistoryShort": {
    "900430b9907b590ed2d73a0d68f079c7f4d754b1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "900430b9907b590ed2d73a0d68f079c7f4d754b1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-14861. Reset LowRedundancyBlocks Iterator periodically. Contributed by Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "25/02/20 1:28 PM",
      "commitName": "900430b9907b590ed2d73a0d68f079c7f4d754b1",
      "commitAuthor": "Stephen O\u0027Donnell",
      "diff": "@@ -0,0 +1,32 @@\n+  synchronized List\u003cList\u003cBlockInfo\u003e\u003e chooseLowRedundancyBlocks(\n+      int blocksToProcess, boolean resetIterators) {\n+    final List\u003cList\u003cBlockInfo\u003e\u003e blocksToReconstruct \u003d new ArrayList\u003c\u003e(LEVEL);\n+\n+    int count \u003d 0;\n+    int priority \u003d 0;\n+    for (; count \u003c blocksToProcess \u0026\u0026 priority \u003c LEVEL; priority++) {\n+      if (priority \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS) {\n+        // do not choose corrupted blocks.\n+        continue;\n+      }\n+\n+      // Go through all blocks that need reconstructions with current priority.\n+      // Set the iterator to the first unprocessed block at this priority level\n+      final Iterator\u003cBlockInfo\u003e i \u003d priorityQueues.get(priority).getBookmark();\n+      final List\u003cBlockInfo\u003e blocks \u003d new LinkedList\u003c\u003e();\n+      blocksToReconstruct.add(blocks);\n+      // Loop through all remaining blocks in the list.\n+      for(; count \u003c blocksToProcess \u0026\u0026 i.hasNext(); count++) {\n+        blocks.add(i.next());\n+      }\n+    }\n+\n+    if (priority \u003d\u003d LEVEL || resetIterators) {\n+      // Reset all bookmarks because there were no recently added blocks.\n+      for (LightWeightLinkedSet\u003cBlockInfo\u003e q : priorityQueues) {\n+        q.resetBookmark();\n+      }\n+    }\n+\n+    return blocksToReconstruct;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized List\u003cList\u003cBlockInfo\u003e\u003e chooseLowRedundancyBlocks(\n      int blocksToProcess, boolean resetIterators) {\n    final List\u003cList\u003cBlockInfo\u003e\u003e blocksToReconstruct \u003d new ArrayList\u003c\u003e(LEVEL);\n\n    int count \u003d 0;\n    int priority \u003d 0;\n    for (; count \u003c blocksToProcess \u0026\u0026 priority \u003c LEVEL; priority++) {\n      if (priority \u003d\u003d QUEUE_WITH_CORRUPT_BLOCKS) {\n        // do not choose corrupted blocks.\n        continue;\n      }\n\n      // Go through all blocks that need reconstructions with current priority.\n      // Set the iterator to the first unprocessed block at this priority level\n      final Iterator\u003cBlockInfo\u003e i \u003d priorityQueues.get(priority).getBookmark();\n      final List\u003cBlockInfo\u003e blocks \u003d new LinkedList\u003c\u003e();\n      blocksToReconstruct.add(blocks);\n      // Loop through all remaining blocks in the list.\n      for(; count \u003c blocksToProcess \u0026\u0026 i.hasNext(); count++) {\n        blocks.add(i.next());\n      }\n    }\n\n    if (priority \u003d\u003d LEVEL || resetIterators) {\n      // Reset all bookmarks because there were no recently added blocks.\n      for (LightWeightLinkedSet\u003cBlockInfo\u003e q : priorityQueues) {\n        q.resetBookmark();\n      }\n    }\n\n    return blocksToReconstruct;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/LowRedundancyBlocks.java"
    }
  }
}