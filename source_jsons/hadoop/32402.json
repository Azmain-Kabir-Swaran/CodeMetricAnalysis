{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalDirsHandlerService.java",
  "functionName": "validatePaths",
  "functionId": "validatePaths___paths-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
  "functionStartLine": 661,
  "functionEndLine": 686,
  "numCommitsSeen": 26,
  "timeTaken": 1294,
  "changeHistory": [
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "add00d6d74ee694f8368561f72c4cc83162b4b90",
    "638801cce16fc1dc3259c541dc30a599faaddda1",
    "1e30e49bf68567539a6060f6ecee04f52f49a24d"
  ],
  "changeHistoryShort": {
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "add00d6d74ee694f8368561f72c4cc83162b4b90": "Ybodychange",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Ybodychange",
    "1e30e49bf68567539a6060f6ecee04f52f49a24d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/04/13 6:00 PM",
      "commitNameOld": "add00d6d74ee694f8368561f72c4cc83162b4b90",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 54.13,
      "commitsBetweenForRepo": 345,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static String[] validatePaths(String[] paths) {\n     ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c paths.length; ++i) {\n       try {\n         URI uriPath \u003d (new Path(paths[i])).toUri();\n         if (uriPath.getScheme() \u003d\u003d null\n             || uriPath.getScheme().equals(FILE_SCHEME)) {\n           validPaths.add(new Path(uriPath.getPath()).toString());\n         } else {\n           LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n               + FILE_SCHEME + \" scheme or without scheme\");\n-          throw new YarnException(paths[i]\n+          throw new YarnRuntimeException(paths[i]\n               + \" is not a valid path. Path should be with \" + FILE_SCHEME\n               + \" scheme or without scheme\");\n         }\n       } catch (IllegalArgumentException e) {\n         LOG.warn(e.getMessage());\n-        throw new YarnException(paths[i]\n+        throw new YarnRuntimeException(paths[i]\n             + \" is not a valid path. Path should be with \" + FILE_SCHEME\n             + \" scheme or without scheme\");\n       }\n     }\n     String[] arrValidPaths \u003d new String[validPaths.size()];\n     validPaths.toArray(arrValidPaths);\n     return arrValidPaths;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] validatePaths(String[] paths) {\n    ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c paths.length; ++i) {\n      try {\n        URI uriPath \u003d (new Path(paths[i])).toUri();\n        if (uriPath.getScheme() \u003d\u003d null\n            || uriPath.getScheme().equals(FILE_SCHEME)) {\n          validPaths.add(new Path(uriPath.getPath()).toString());\n        } else {\n          LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n              + FILE_SCHEME + \" scheme or without scheme\");\n          throw new YarnRuntimeException(paths[i]\n              + \" is not a valid path. Path should be with \" + FILE_SCHEME\n              + \" scheme or without scheme\");\n        }\n      } catch (IllegalArgumentException e) {\n        LOG.warn(e.getMessage());\n        throw new YarnRuntimeException(paths[i]\n            + \" is not a valid path. Path should be with \" + FILE_SCHEME\n            + \" scheme or without scheme\");\n      }\n    }\n    String[] arrValidPaths \u003d new String[validPaths.size()];\n    validPaths.toArray(arrValidPaths);\n    return arrValidPaths;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {}
    },
    "add00d6d74ee694f8368561f72c4cc83162b4b90": {
      "type": "Ybodychange",
      "commitMessage": "YARN-487. Modify path manipulation in LocalDirsHandlerService to let TestDiskFailures pass on Windows. Contributed by Chris Nauroth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466746 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 6:00 PM",
      "commitName": "add00d6d74ee694f8368561f72c4cc83162b4b90",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/03/13 11:15 AM",
      "commitNameOld": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 35.24,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static String[] validatePaths(String[] paths) {\n     ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c paths.length; ++i) {\n       try {\n         URI uriPath \u003d (new Path(paths[i])).toUri();\n         if (uriPath.getScheme() \u003d\u003d null\n             || uriPath.getScheme().equals(FILE_SCHEME)) {\n-          validPaths.add(uriPath.getPath());\n+          validPaths.add(new Path(uriPath.getPath()).toString());\n         } else {\n           LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n               + FILE_SCHEME + \" scheme or without scheme\");\n           throw new YarnException(paths[i]\n               + \" is not a valid path. Path should be with \" + FILE_SCHEME\n               + \" scheme or without scheme\");\n         }\n       } catch (IllegalArgumentException e) {\n         LOG.warn(e.getMessage());\n         throw new YarnException(paths[i]\n             + \" is not a valid path. Path should be with \" + FILE_SCHEME\n             + \" scheme or without scheme\");\n       }\n     }\n     String[] arrValidPaths \u003d new String[validPaths.size()];\n     validPaths.toArray(arrValidPaths);\n     return arrValidPaths;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] validatePaths(String[] paths) {\n    ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c paths.length; ++i) {\n      try {\n        URI uriPath \u003d (new Path(paths[i])).toUri();\n        if (uriPath.getScheme() \u003d\u003d null\n            || uriPath.getScheme().equals(FILE_SCHEME)) {\n          validPaths.add(new Path(uriPath.getPath()).toString());\n        } else {\n          LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n              + FILE_SCHEME + \" scheme or without scheme\");\n          throw new YarnException(paths[i]\n              + \" is not a valid path. Path should be with \" + FILE_SCHEME\n              + \" scheme or without scheme\");\n        }\n      } catch (IllegalArgumentException e) {\n        LOG.warn(e.getMessage());\n        throw new YarnException(paths[i]\n            + \" is not a valid path. Path should be with \" + FILE_SCHEME\n            + \" scheme or without scheme\");\n      }\n    }\n    String[] arrValidPaths \u003d new String[validPaths.size()];\n    validPaths.toArray(arrValidPaths);\n    return arrValidPaths;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {}
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "08/10/12 7:26 PM",
      "commitNameOld": "1e30e49bf68567539a6060f6ecee04f52f49a24d",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 148.7,
      "commitsBetweenForRepo": 672,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public static String[] validatePaths(String[] paths) {\n     ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n     for (int i \u003d 0; i \u003c paths.length; ++i) {\n       try {\n-        URI uriPath \u003d new URI(paths[i]);\n+        URI uriPath \u003d (new Path(paths[i])).toUri();\n         if (uriPath.getScheme() \u003d\u003d null\n             || uriPath.getScheme().equals(FILE_SCHEME)) {\n           validPaths.add(uriPath.getPath());\n         } else {\n           LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n               + FILE_SCHEME + \" scheme or without scheme\");\n           throw new YarnException(paths[i]\n               + \" is not a valid path. Path should be with \" + FILE_SCHEME\n               + \" scheme or without scheme\");\n         }\n-      } catch (URISyntaxException e) {\n+      } catch (IllegalArgumentException e) {\n         LOG.warn(e.getMessage());\n         throw new YarnException(paths[i]\n             + \" is not a valid path. Path should be with \" + FILE_SCHEME\n             + \" scheme or without scheme\");\n       }\n     }\n     String[] arrValidPaths \u003d new String[validPaths.size()];\n     validPaths.toArray(arrValidPaths);\n     return arrValidPaths;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] validatePaths(String[] paths) {\n    ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c paths.length; ++i) {\n      try {\n        URI uriPath \u003d (new Path(paths[i])).toUri();\n        if (uriPath.getScheme() \u003d\u003d null\n            || uriPath.getScheme().equals(FILE_SCHEME)) {\n          validPaths.add(uriPath.getPath());\n        } else {\n          LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n              + FILE_SCHEME + \" scheme or without scheme\");\n          throw new YarnException(paths[i]\n              + \" is not a valid path. Path should be with \" + FILE_SCHEME\n              + \" scheme or without scheme\");\n        }\n      } catch (IllegalArgumentException e) {\n        LOG.warn(e.getMessage());\n        throw new YarnException(paths[i]\n            + \" is not a valid path. Path should be with \" + FILE_SCHEME\n            + \" scheme or without scheme\");\n      }\n    }\n    String[] arrValidPaths \u003d new String[validPaths.size()];\n    validPaths.toArray(arrValidPaths);\n    return arrValidPaths;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java",
      "extendedDetails": {}
    },
    "1e30e49bf68567539a6060f6ecee04f52f49a24d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-33. Change LocalDirsHandlerService to validate the configured local and log dirs. (Contributed by Mayank Bansal)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1395844 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/12 7:26 PM",
      "commitName": "1e30e49bf68567539a6060f6ecee04f52f49a24d",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,26 @@\n+  public static String[] validatePaths(String[] paths) {\n+    ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n+    for (int i \u003d 0; i \u003c paths.length; ++i) {\n+      try {\n+        URI uriPath \u003d new URI(paths[i]);\n+        if (uriPath.getScheme() \u003d\u003d null\n+            || uriPath.getScheme().equals(FILE_SCHEME)) {\n+          validPaths.add(uriPath.getPath());\n+        } else {\n+          LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n+              + FILE_SCHEME + \" scheme or without scheme\");\n+          throw new YarnException(paths[i]\n+              + \" is not a valid path. Path should be with \" + FILE_SCHEME\n+              + \" scheme or without scheme\");\n+        }\n+      } catch (URISyntaxException e) {\n+        LOG.warn(e.getMessage());\n+        throw new YarnException(paths[i]\n+            + \" is not a valid path. Path should be with \" + FILE_SCHEME\n+            + \" scheme or without scheme\");\n+      }\n+    }\n+    String[] arrValidPaths \u003d new String[validPaths.size()];\n+    validPaths.toArray(arrValidPaths);\n+    return arrValidPaths;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String[] validatePaths(String[] paths) {\n    ArrayList\u003cString\u003e validPaths \u003d new ArrayList\u003cString\u003e();\n    for (int i \u003d 0; i \u003c paths.length; ++i) {\n      try {\n        URI uriPath \u003d new URI(paths[i]);\n        if (uriPath.getScheme() \u003d\u003d null\n            || uriPath.getScheme().equals(FILE_SCHEME)) {\n          validPaths.add(uriPath.getPath());\n        } else {\n          LOG.warn(paths[i] + \" is not a valid path. Path should be with \"\n              + FILE_SCHEME + \" scheme or without scheme\");\n          throw new YarnException(paths[i]\n              + \" is not a valid path. Path should be with \" + FILE_SCHEME\n              + \" scheme or without scheme\");\n        }\n      } catch (URISyntaxException e) {\n        LOG.warn(e.getMessage());\n        throw new YarnException(paths[i]\n            + \" is not a valid path. Path should be with \" + FILE_SCHEME\n            + \" scheme or without scheme\");\n      }\n    }\n    String[] arrValidPaths \u003d new String[validPaths.size()];\n    validPaths.toArray(arrValidPaths);\n    return arrValidPaths;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LocalDirsHandlerService.java"
    }
  }
}