{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HamletGen.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
  "functionStartLine": 426,
  "functionEndLine": 450,
  "numCommitsSeen": 9,
  "timeTaken": 9621,
  "changeHistory": [
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n    if (cmd.hasOption(\"help\")) {\n      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n      return;\n    }\n    // defaults\n    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n    String outputClass \u003d \"HamletTmp\";\n    String outputPackage \u003d implClass.getPackage().getName();\n    if (cmd.hasOption(\"spec-class\")) {\n      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n    }\n    if (cmd.hasOption(\"impl-class\")) {\n      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n    }\n    if (cmd.hasOption(\"output-class\")) {\n      outputClass \u003d cmd.getOptionValue(\"output-class\");\n    }\n    if (cmd.hasOption(\"output-package\")) {\n      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n    }\n    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) throws Exception {\n    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n    if (cmd.hasOption(\"help\")) {\n      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n      return;\n    }\n    // defaults\n    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n    String outputClass \u003d \"HamletTmp\";\n    String outputPackage \u003d implClass.getPackage().getName();\n    if (cmd.hasOption(\"spec-class\")) {\n      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n    }\n    if (cmd.hasOption(\"impl-class\")) {\n      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n    }\n    if (cmd.hasOption(\"output-class\")) {\n      outputClass \u003d cmd.getOptionValue(\"output-class\");\n    }\n    if (cmd.hasOption(\"output-package\")) {\n      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n    }\n    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,25 @@\n-  public static void main(String[] args) {\n-    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n-    System.out.println(\"Physical memory Size (bytes) : \"\n-        + plugin.getPhysicalMemorySize());\n-    System.out.println(\"Total Virtual memory Size (bytes) : \"\n-        + plugin.getVirtualMemorySize());\n-    System.out.println(\"Available Physical memory Size (bytes) : \"\n-        + plugin.getAvailablePhysicalMemorySize());\n-    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n-        + plugin.getAvailableVirtualMemorySize());\n-    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n-    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n-    System.out.println(\"Cumulative CPU time (ms) : \" +\n-            plugin.getCumulativeCpuTime());\n-    try {\n-      // Sleep so we can compute the CPU usage\n-      Thread.sleep(500L);\n-    } catch (InterruptedException e) {\n-      // do nothing\n+  public static void main(String[] args) throws Exception {\n+    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n+    if (cmd.hasOption(\"help\")) {\n+      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n+      return;\n     }\n-    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n+    // defaults\n+    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n+    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n+    String outputClass \u003d \"HamletTmp\";\n+    String outputPackage \u003d implClass.getPackage().getName();\n+    if (cmd.hasOption(\"spec-class\")) {\n+      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n+    }\n+    if (cmd.hasOption(\"impl-class\")) {\n+      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n+    }\n+    if (cmd.hasOption(\"output-class\")) {\n+      outputClass \u003d cmd.getOptionValue(\"output-class\");\n+    }\n+    if (cmd.hasOption(\"output-package\")) {\n+      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n+    }\n+    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] args) throws Exception {\n    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n    if (cmd.hasOption(\"help\")) {\n      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n      return;\n    }\n    // defaults\n    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n    String outputClass \u003d \"HamletTmp\";\n    String outputPackage \u003d implClass.getPackage().getName();\n    if (cmd.hasOption(\"spec-class\")) {\n      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n    }\n    if (cmd.hasOption(\"impl-class\")) {\n      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n    }\n    if (cmd.hasOption(\"output-class\")) {\n      outputClass \u003d cmd.getOptionValue(\"output-class\");\n    }\n    if (cmd.hasOption(\"output-package\")) {\n      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n    }\n    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/LinuxResourceCalculatorPlugin.java",
            "newPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
            "oldMethodName": "main",
            "newMethodName": "main"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,25 @@\n-  public static void main(String[] args) {\n-    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n-    System.out.println(\"Physical memory Size (bytes) : \"\n-        + plugin.getPhysicalMemorySize());\n-    System.out.println(\"Total Virtual memory Size (bytes) : \"\n-        + plugin.getVirtualMemorySize());\n-    System.out.println(\"Available Physical memory Size (bytes) : \"\n-        + plugin.getAvailablePhysicalMemorySize());\n-    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n-        + plugin.getAvailableVirtualMemorySize());\n-    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n-    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n-    System.out.println(\"Cumulative CPU time (ms) : \" +\n-            plugin.getCumulativeCpuTime());\n-    try {\n-      // Sleep so we can compute the CPU usage\n-      Thread.sleep(500L);\n-    } catch (InterruptedException e) {\n-      // do nothing\n+  public static void main(String[] args) throws Exception {\n+    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n+    if (cmd.hasOption(\"help\")) {\n+      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n+      return;\n     }\n-    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n+    // defaults\n+    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n+    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n+    String outputClass \u003d \"HamletTmp\";\n+    String outputPackage \u003d implClass.getPackage().getName();\n+    if (cmd.hasOption(\"spec-class\")) {\n+      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n+    }\n+    if (cmd.hasOption(\"impl-class\")) {\n+      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n+    }\n+    if (cmd.hasOption(\"output-class\")) {\n+      outputClass \u003d cmd.getOptionValue(\"output-class\");\n+    }\n+    if (cmd.hasOption(\"output-package\")) {\n+      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n+    }\n+    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] args) throws Exception {\n    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n    if (cmd.hasOption(\"help\")) {\n      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n      return;\n    }\n    // defaults\n    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n    String outputClass \u003d \"HamletTmp\";\n    String outputPackage \u003d implClass.getPackage().getName();\n    if (cmd.hasOption(\"spec-class\")) {\n      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n    }\n    if (cmd.hasOption(\"impl-class\")) {\n      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n    }\n    if (cmd.hasOption(\"output-class\")) {\n      outputClass \u003d cmd.getOptionValue(\"output-class\");\n    }\n    if (cmd.hasOption(\"output-package\")) {\n      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n    }\n    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,25 @@\n-  public static void main(String[] args) {\n-    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n-    System.out.println(\"Physical memory Size (bytes) : \"\n-        + plugin.getPhysicalMemorySize());\n-    System.out.println(\"Total Virtual memory Size (bytes) : \"\n-        + plugin.getVirtualMemorySize());\n-    System.out.println(\"Available Physical memory Size (bytes) : \"\n-        + plugin.getAvailablePhysicalMemorySize());\n-    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n-        + plugin.getAvailableVirtualMemorySize());\n-    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n-    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n-    System.out.println(\"Cumulative CPU time (ms) : \" +\n-            plugin.getCumulativeCpuTime());\n-    try {\n-      // Sleep so we can compute the CPU usage\n-      Thread.sleep(500L);\n-    } catch (InterruptedException e) {\n-      // do nothing\n+  public static void main(String[] args) throws Exception {\n+    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n+    if (cmd.hasOption(\"help\")) {\n+      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n+      return;\n     }\n-    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n+    // defaults\n+    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n+    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n+    String outputClass \u003d \"HamletTmp\";\n+    String outputPackage \u003d implClass.getPackage().getName();\n+    if (cmd.hasOption(\"spec-class\")) {\n+      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n+    }\n+    if (cmd.hasOption(\"impl-class\")) {\n+      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n+    }\n+    if (cmd.hasOption(\"output-class\")) {\n+      outputClass \u003d cmd.getOptionValue(\"output-class\");\n+    }\n+    if (cmd.hasOption(\"output-package\")) {\n+      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n+    }\n+    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] args) throws Exception {\n    CommandLine cmd \u003d new GnuParser().parse(opts, args);\n    if (cmd.hasOption(\"help\")) {\n      new HelpFormatter().printHelp(\"Usage: hbgen [OPTIONS]\", opts);\n      return;\n    }\n    // defaults\n    Class\u003c?\u003e specClass \u003d HamletSpec.class;\n    Class\u003c?\u003e implClass \u003d HamletImpl.class;\n    String outputClass \u003d \"HamletTmp\";\n    String outputPackage \u003d implClass.getPackage().getName();\n    if (cmd.hasOption(\"spec-class\")) {\n      specClass \u003d Class.forName(cmd.getOptionValue(\"spec-class\"));\n    }\n    if (cmd.hasOption(\"impl-class\")) {\n      implClass \u003d Class.forName(cmd.getOptionValue(\"impl-class\"));\n    }\n    if (cmd.hasOption(\"output-class\")) {\n      outputClass \u003d cmd.getOptionValue(\"output-class\");\n    }\n    if (cmd.hasOption(\"output-package\")) {\n      outputPackage \u003d cmd.getOptionValue(\"output-package\");\n    }\n    new HamletGen().generate(specClass, implClass, outputClass, outputPackage);\n  }",
          "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/webapp/hamlet/HamletGen.java",
          "extendedDetails": {}
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,22 @@\n+  public static void main(String[] args) {\n+    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n+    System.out.println(\"Physical memory Size (bytes) : \"\n+        + plugin.getPhysicalMemorySize());\n+    System.out.println(\"Total Virtual memory Size (bytes) : \"\n+        + plugin.getVirtualMemorySize());\n+    System.out.println(\"Available Physical memory Size (bytes) : \"\n+        + plugin.getAvailablePhysicalMemorySize());\n+    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n+        + plugin.getAvailableVirtualMemorySize());\n+    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n+    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n+    System.out.println(\"Cumulative CPU time (ms) : \" +\n+            plugin.getCumulativeCpuTime());\n+    try {\n+      // Sleep so we can compute the CPU usage\n+      Thread.sleep(500L);\n+    } catch (InterruptedException e) {\n+      // do nothing\n+    }\n+    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    LinuxResourceCalculatorPlugin plugin \u003d new LinuxResourceCalculatorPlugin();\n    System.out.println(\"Physical memory Size (bytes) : \"\n        + plugin.getPhysicalMemorySize());\n    System.out.println(\"Total Virtual memory Size (bytes) : \"\n        + plugin.getVirtualMemorySize());\n    System.out.println(\"Available Physical memory Size (bytes) : \"\n        + plugin.getAvailablePhysicalMemorySize());\n    System.out.println(\"Total Available Virtual memory Size (bytes) : \"\n        + plugin.getAvailableVirtualMemorySize());\n    System.out.println(\"Number of Processors : \" + plugin.getNumProcessors());\n    System.out.println(\"CPU frequency (kHz) : \" + plugin.getCpuFrequency());\n    System.out.println(\"Cumulative CPU time (ms) : \" +\n            plugin.getCumulativeCpuTime());\n    try {\n      // Sleep so we can compute the CPU usage\n      Thread.sleep(500L);\n    } catch (InterruptedException e) {\n      // do nothing\n    }\n    System.out.println(\"CPU usage % : \" + plugin.getCpuUsage());\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/util/LinuxResourceCalculatorPlugin.java"
    }
  }
}