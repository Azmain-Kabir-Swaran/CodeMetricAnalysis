{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingFileSystemSink.java",
  "functionName": "init",
  "functionId": "init___metrics2Properties-SubsetConfiguration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
  "functionStartLine": 234,
  "functionEndLine": 265,
  "numCommitsSeen": 12,
  "timeTaken": 2240,
  "changeHistory": [
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc",
    "c2460dad642feee1086442d33c30c24ec77236b9",
    "33ce7f6c072144f55be30c66099eef5bc736405e",
    "5b59a0ea85c923384e36ad7c036e751551774142",
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca"
  ],
  "changeHistoryShort": {
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc": "Ybodychange",
    "c2460dad642feee1086442d33c30c24ec77236b9": "Ymultichange(Yparameterchange,Ybodychange)",
    "33ce7f6c072144f55be30c66099eef5bc736405e": "Ybodychange",
    "5b59a0ea85c923384e36ad7c036e751551774142": "Ybodychange",
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9782. RollingFileSystemSink should have configurable roll interval. (Daniel Templeton via kasha)\n",
      "commitDate": "24/05/16 10:37 AM",
      "commitName": "57c31a3fef625f1ec609d7e8873d4941f7ed5cbc",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/02/16 4:31 PM",
      "commitNameOld": "c2460dad642feee1086442d33c30c24ec77236b9",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 88.71,
      "commitsBetweenForRepo": 545,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   public void init(SubsetConfiguration metrics2Properties) {\n     properties \u003d metrics2Properties;\n     basePath \u003d new Path(properties.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n     source \u003d properties.getString(SOURCE_KEY, SOURCE_DEFAULT);\n-    ignoreError \u003d properties.getBoolean(IGNORE_ERROR_KEY, false);\n-    allowAppend \u003d properties.getBoolean(ALLOW_APPEND_KEY, false);\n+    ignoreError \u003d properties.getBoolean(IGNORE_ERROR_KEY, DEFAULT_IGNORE_ERROR);\n+    allowAppend \u003d properties.getBoolean(ALLOW_APPEND_KEY, DEFAULT_ALLOW_APPEND);\n+    rollOffsetIntervalMillis \u003d\n+        getNonNegative(ROLL_OFFSET_INTERVAL_MILLIS_KEY,\n+          DEFAULT_ROLL_OFFSET_INTERVAL_MILLIS);\n+    rollIntervalMillis \u003d getRollInterval();\n \n     conf \u003d loadConf();\n     UserGroupInformation.setConfiguration(conf);\n \n     // Don\u0027t do secure setup if it\u0027s not needed.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       // Validate config so that we don\u0027t get an NPE\n-      checkForProperty(properties, KEYTAB_PROPERTY_KEY);\n-      checkForProperty(properties, USERNAME_PROPERTY_KEY);\n+      checkIfPropertyExists(KEYTAB_PROPERTY_KEY);\n+      checkIfPropertyExists(USERNAME_PROPERTY_KEY);\n \n \n       try {\n         // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n         // from localhost. If security isn\u0027t enabled, this does nothing.\n         SecurityUtil.login(conf, properties.getString(KEYTAB_PROPERTY_KEY),\n             properties.getString(USERNAME_PROPERTY_KEY));\n       } catch (IOException ex) {\n         throw new MetricsException(\"Error logging in securely: [\"\n             + ex.toString() + \"]\", ex);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration metrics2Properties) {\n    properties \u003d metrics2Properties;\n    basePath \u003d new Path(properties.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n    source \u003d properties.getString(SOURCE_KEY, SOURCE_DEFAULT);\n    ignoreError \u003d properties.getBoolean(IGNORE_ERROR_KEY, DEFAULT_IGNORE_ERROR);\n    allowAppend \u003d properties.getBoolean(ALLOW_APPEND_KEY, DEFAULT_ALLOW_APPEND);\n    rollOffsetIntervalMillis \u003d\n        getNonNegative(ROLL_OFFSET_INTERVAL_MILLIS_KEY,\n          DEFAULT_ROLL_OFFSET_INTERVAL_MILLIS);\n    rollIntervalMillis \u003d getRollInterval();\n\n    conf \u003d loadConf();\n    UserGroupInformation.setConfiguration(conf);\n\n    // Don\u0027t do secure setup if it\u0027s not needed.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // Validate config so that we don\u0027t get an NPE\n      checkIfPropertyExists(KEYTAB_PROPERTY_KEY);\n      checkIfPropertyExists(USERNAME_PROPERTY_KEY);\n\n\n      try {\n        // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n        // from localhost. If security isn\u0027t enabled, this does nothing.\n        SecurityUtil.login(conf, properties.getString(KEYTAB_PROPERTY_KEY),\n            properties.getString(USERNAME_PROPERTY_KEY));\n      } catch (IOException ex) {\n        throw new MetricsException(\"Error logging in securely: [\"\n            + ex.toString() + \"]\", ex);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
      "extendedDetails": {}
    },
    "c2460dad642feee1086442d33c30c24ec77236b9": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9858. RollingFileSystemSink can throw an NPE on non-secure clusters. (Daniel Templeton via kasha)\n",
      "commitDate": "25/02/16 4:31 PM",
      "commitName": "c2460dad642feee1086442d33c30c24ec77236b9",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9858. RollingFileSystemSink can throw an NPE on non-secure clusters. (Daniel Templeton via kasha)\n",
          "commitDate": "25/02/16 4:31 PM",
          "commitName": "c2460dad642feee1086442d33c30c24ec77236b9",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "11/02/16 8:37 PM",
          "commitNameOld": "33ce7f6c072144f55be30c66099eef5bc736405e",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 13.83,
          "commitsBetweenForRepo": 94,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,28 @@\n-  public void init(SubsetConfiguration conf) {\n-    basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n-    source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n-    ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n-    allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n+  public void init(SubsetConfiguration metrics2Properties) {\n+    properties \u003d metrics2Properties;\n+    basePath \u003d new Path(properties.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n+    source \u003d properties.getString(SOURCE_KEY, SOURCE_DEFAULT);\n+    ignoreError \u003d properties.getBoolean(IGNORE_ERROR_KEY, false);\n+    allowAppend \u003d properties.getBoolean(ALLOW_APPEND_KEY, false);\n \n-    Configuration configuration \u003d loadConf();\n-\n-    UserGroupInformation.setConfiguration(configuration);\n+    conf \u003d loadConf();\n+    UserGroupInformation.setConfiguration(conf);\n \n     // Don\u0027t do secure setup if it\u0027s not needed.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       // Validate config so that we don\u0027t get an NPE\n-      checkForProperty(conf, KEYTAB_PROPERTY_KEY);\n-      checkForProperty(conf, USERNAME_PROPERTY_KEY);\n+      checkForProperty(properties, KEYTAB_PROPERTY_KEY);\n+      checkForProperty(properties, USERNAME_PROPERTY_KEY);\n \n \n       try {\n         // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n         // from localhost. If security isn\u0027t enabled, this does nothing.\n-        SecurityUtil.login(configuration, conf.getString(KEYTAB_PROPERTY_KEY),\n-            conf.getString(USERNAME_PROPERTY_KEY));\n+        SecurityUtil.login(conf, properties.getString(KEYTAB_PROPERTY_KEY),\n+            properties.getString(USERNAME_PROPERTY_KEY));\n       } catch (IOException ex) {\n         throw new MetricsException(\"Error logging in securely: [\"\n             + ex.toString() + \"]\", ex);\n       }\n     }\n-\n-    fileSystem \u003d getFileSystem(configuration);\n-\n-    // This step isn\u0027t strictly necessary, but it makes debugging issues much\n-    // easier. We try to create the base directory eagerly and fail with\n-    // copious debug info if it fails.\n-    try {\n-      fileSystem.mkdirs(basePath);\n-    } catch (Exception ex) {\n-      throw new MetricsException(\"Failed to create \" + basePath + \"[\"\n-          + SOURCE_KEY + \"\u003d\" + source + \", \"\n-          + IGNORE_ERROR_KEY + \"\u003d\" + ignoreError + \", \"\n-          + ALLOW_APPEND_KEY + \"\u003d\" + allowAppend + \", \"\n-          + KEYTAB_PROPERTY_KEY + \"\u003d\"\n-          + conf.getString(KEYTAB_PROPERTY_KEY) + \", \"\n-          + conf.getString(KEYTAB_PROPERTY_KEY) + \"\u003d\"\n-          + configuration.get(conf.getString(KEYTAB_PROPERTY_KEY)) + \", \"\n-          + USERNAME_PROPERTY_KEY + \"\u003d\"\n-          + conf.getString(USERNAME_PROPERTY_KEY) + \", \"\n-          + conf.getString(USERNAME_PROPERTY_KEY) + \"\u003d\"\n-          + configuration.get(conf.getString(USERNAME_PROPERTY_KEY))\n-          + \"] -- \" + ex.toString(), ex);\n-    }\n-\n-    // If we\u0027re permitted to append, check if we actually can\n-    if (allowAppend) {\n-      allowAppend \u003d checkAppend(fileSystem);\n-    }\n-\n-    flushTimer \u003d new Timer(\"RollingFileSystemSink Flusher\", true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(SubsetConfiguration metrics2Properties) {\n    properties \u003d metrics2Properties;\n    basePath \u003d new Path(properties.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n    source \u003d properties.getString(SOURCE_KEY, SOURCE_DEFAULT);\n    ignoreError \u003d properties.getBoolean(IGNORE_ERROR_KEY, false);\n    allowAppend \u003d properties.getBoolean(ALLOW_APPEND_KEY, false);\n\n    conf \u003d loadConf();\n    UserGroupInformation.setConfiguration(conf);\n\n    // Don\u0027t do secure setup if it\u0027s not needed.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // Validate config so that we don\u0027t get an NPE\n      checkForProperty(properties, KEYTAB_PROPERTY_KEY);\n      checkForProperty(properties, USERNAME_PROPERTY_KEY);\n\n\n      try {\n        // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n        // from localhost. If security isn\u0027t enabled, this does nothing.\n        SecurityUtil.login(conf, properties.getString(KEYTAB_PROPERTY_KEY),\n            properties.getString(USERNAME_PROPERTY_KEY));\n      } catch (IOException ex) {\n        throw new MetricsException(\"Error logging in securely: [\"\n            + ex.toString() + \"]\", ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
          "extendedDetails": {
            "oldValue": "[conf-SubsetConfiguration]",
            "newValue": "[metrics2Properties-SubsetConfiguration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9858. RollingFileSystemSink can throw an NPE on non-secure clusters. (Daniel Templeton via kasha)\n",
          "commitDate": "25/02/16 4:31 PM",
          "commitName": "c2460dad642feee1086442d33c30c24ec77236b9",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "11/02/16 8:37 PM",
          "commitNameOld": "33ce7f6c072144f55be30c66099eef5bc736405e",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 13.83,
          "commitsBetweenForRepo": 94,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,28 @@\n-  public void init(SubsetConfiguration conf) {\n-    basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n-    source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n-    ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n-    allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n+  public void init(SubsetConfiguration metrics2Properties) {\n+    properties \u003d metrics2Properties;\n+    basePath \u003d new Path(properties.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n+    source \u003d properties.getString(SOURCE_KEY, SOURCE_DEFAULT);\n+    ignoreError \u003d properties.getBoolean(IGNORE_ERROR_KEY, false);\n+    allowAppend \u003d properties.getBoolean(ALLOW_APPEND_KEY, false);\n \n-    Configuration configuration \u003d loadConf();\n-\n-    UserGroupInformation.setConfiguration(configuration);\n+    conf \u003d loadConf();\n+    UserGroupInformation.setConfiguration(conf);\n \n     // Don\u0027t do secure setup if it\u0027s not needed.\n     if (UserGroupInformation.isSecurityEnabled()) {\n       // Validate config so that we don\u0027t get an NPE\n-      checkForProperty(conf, KEYTAB_PROPERTY_KEY);\n-      checkForProperty(conf, USERNAME_PROPERTY_KEY);\n+      checkForProperty(properties, KEYTAB_PROPERTY_KEY);\n+      checkForProperty(properties, USERNAME_PROPERTY_KEY);\n \n \n       try {\n         // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n         // from localhost. If security isn\u0027t enabled, this does nothing.\n-        SecurityUtil.login(configuration, conf.getString(KEYTAB_PROPERTY_KEY),\n-            conf.getString(USERNAME_PROPERTY_KEY));\n+        SecurityUtil.login(conf, properties.getString(KEYTAB_PROPERTY_KEY),\n+            properties.getString(USERNAME_PROPERTY_KEY));\n       } catch (IOException ex) {\n         throw new MetricsException(\"Error logging in securely: [\"\n             + ex.toString() + \"]\", ex);\n       }\n     }\n-\n-    fileSystem \u003d getFileSystem(configuration);\n-\n-    // This step isn\u0027t strictly necessary, but it makes debugging issues much\n-    // easier. We try to create the base directory eagerly and fail with\n-    // copious debug info if it fails.\n-    try {\n-      fileSystem.mkdirs(basePath);\n-    } catch (Exception ex) {\n-      throw new MetricsException(\"Failed to create \" + basePath + \"[\"\n-          + SOURCE_KEY + \"\u003d\" + source + \", \"\n-          + IGNORE_ERROR_KEY + \"\u003d\" + ignoreError + \", \"\n-          + ALLOW_APPEND_KEY + \"\u003d\" + allowAppend + \", \"\n-          + KEYTAB_PROPERTY_KEY + \"\u003d\"\n-          + conf.getString(KEYTAB_PROPERTY_KEY) + \", \"\n-          + conf.getString(KEYTAB_PROPERTY_KEY) + \"\u003d\"\n-          + configuration.get(conf.getString(KEYTAB_PROPERTY_KEY)) + \", \"\n-          + USERNAME_PROPERTY_KEY + \"\u003d\"\n-          + conf.getString(USERNAME_PROPERTY_KEY) + \", \"\n-          + conf.getString(USERNAME_PROPERTY_KEY) + \"\u003d\"\n-          + configuration.get(conf.getString(USERNAME_PROPERTY_KEY))\n-          + \"] -- \" + ex.toString(), ex);\n-    }\n-\n-    // If we\u0027re permitted to append, check if we actually can\n-    if (allowAppend) {\n-      allowAppend \u003d checkAppend(fileSystem);\n-    }\n-\n-    flushTimer \u003d new Timer(\"RollingFileSystemSink Flusher\", true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(SubsetConfiguration metrics2Properties) {\n    properties \u003d metrics2Properties;\n    basePath \u003d new Path(properties.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n    source \u003d properties.getString(SOURCE_KEY, SOURCE_DEFAULT);\n    ignoreError \u003d properties.getBoolean(IGNORE_ERROR_KEY, false);\n    allowAppend \u003d properties.getBoolean(ALLOW_APPEND_KEY, false);\n\n    conf \u003d loadConf();\n    UserGroupInformation.setConfiguration(conf);\n\n    // Don\u0027t do secure setup if it\u0027s not needed.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // Validate config so that we don\u0027t get an NPE\n      checkForProperty(properties, KEYTAB_PROPERTY_KEY);\n      checkForProperty(properties, USERNAME_PROPERTY_KEY);\n\n\n      try {\n        // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n        // from localhost. If security isn\u0027t enabled, this does nothing.\n        SecurityUtil.login(conf, properties.getString(KEYTAB_PROPERTY_KEY),\n            properties.getString(USERNAME_PROPERTY_KEY));\n      } catch (IOException ex) {\n        throw new MetricsException(\"Error logging in securely: [\"\n            + ex.toString() + \"]\", ex);\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
          "extendedDetails": {}
        }
      ]
    },
    "33ce7f6c072144f55be30c66099eef5bc736405e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9780. RollingFileSystemSink doesn\u0027t work on secure clusters. (Daniel Templeton via kasha)\n",
      "commitDate": "11/02/16 8:37 PM",
      "commitName": "33ce7f6c072144f55be30c66099eef5bc736405e",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "06/02/16 8:52 PM",
      "commitNameOld": "5b59a0ea85c923384e36ad7c036e751551774142",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.99,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,58 @@\n   public void init(SubsetConfiguration conf) {\n     basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n     source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n     ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n     allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n \n+    Configuration configuration \u003d loadConf();\n+\n+    UserGroupInformation.setConfiguration(configuration);\n+\n+    // Don\u0027t do secure setup if it\u0027s not needed.\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      // Validate config so that we don\u0027t get an NPE\n+      checkForProperty(conf, KEYTAB_PROPERTY_KEY);\n+      checkForProperty(conf, USERNAME_PROPERTY_KEY);\n+\n+\n+      try {\n+        // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n+        // from localhost. If security isn\u0027t enabled, this does nothing.\n+        SecurityUtil.login(configuration, conf.getString(KEYTAB_PROPERTY_KEY),\n+            conf.getString(USERNAME_PROPERTY_KEY));\n+      } catch (IOException ex) {\n+        throw new MetricsException(\"Error logging in securely: [\"\n+            + ex.toString() + \"]\", ex);\n+      }\n+    }\n+\n+    fileSystem \u003d getFileSystem(configuration);\n+\n+    // This step isn\u0027t strictly necessary, but it makes debugging issues much\n+    // easier. We try to create the base directory eagerly and fail with\n+    // copious debug info if it fails.\n     try {\n-      fileSystem \u003d FileSystem.get(new URI(basePath.toString()),\n-          new Configuration());\n-    } catch (URISyntaxException ex) {\n-      throw new MetricsException(\"The supplied filesystem base path URI\"\n-          + \" is not a valid URI: \" + basePath.toString(), ex);\n-    } catch (IOException ex) {\n-      throw new MetricsException(\"Error connecting to file system: \"\n-          + basePath + \" [\" + ex.toString() + \"]\", ex);\n+      fileSystem.mkdirs(basePath);\n+    } catch (Exception ex) {\n+      throw new MetricsException(\"Failed to create \" + basePath + \"[\"\n+          + SOURCE_KEY + \"\u003d\" + source + \", \"\n+          + IGNORE_ERROR_KEY + \"\u003d\" + ignoreError + \", \"\n+          + ALLOW_APPEND_KEY + \"\u003d\" + allowAppend + \", \"\n+          + KEYTAB_PROPERTY_KEY + \"\u003d\"\n+          + conf.getString(KEYTAB_PROPERTY_KEY) + \", \"\n+          + conf.getString(KEYTAB_PROPERTY_KEY) + \"\u003d\"\n+          + configuration.get(conf.getString(KEYTAB_PROPERTY_KEY)) + \", \"\n+          + USERNAME_PROPERTY_KEY + \"\u003d\"\n+          + conf.getString(USERNAME_PROPERTY_KEY) + \", \"\n+          + conf.getString(USERNAME_PROPERTY_KEY) + \"\u003d\"\n+          + configuration.get(conf.getString(USERNAME_PROPERTY_KEY))\n+          + \"] -- \" + ex.toString(), ex);\n     }\n \n     // If we\u0027re permitted to append, check if we actually can\n     if (allowAppend) {\n       allowAppend \u003d checkAppend(fileSystem);\n     }\n \n     flushTimer \u003d new Timer(\"RollingFileSystemSink Flusher\", true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n    source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n    ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n    allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n\n    Configuration configuration \u003d loadConf();\n\n    UserGroupInformation.setConfiguration(configuration);\n\n    // Don\u0027t do secure setup if it\u0027s not needed.\n    if (UserGroupInformation.isSecurityEnabled()) {\n      // Validate config so that we don\u0027t get an NPE\n      checkForProperty(conf, KEYTAB_PROPERTY_KEY);\n      checkForProperty(conf, USERNAME_PROPERTY_KEY);\n\n\n      try {\n        // Login as whoever we\u0027re supposed to be and let the hostname be pulled\n        // from localhost. If security isn\u0027t enabled, this does nothing.\n        SecurityUtil.login(configuration, conf.getString(KEYTAB_PROPERTY_KEY),\n            conf.getString(USERNAME_PROPERTY_KEY));\n      } catch (IOException ex) {\n        throw new MetricsException(\"Error logging in securely: [\"\n            + ex.toString() + \"]\", ex);\n      }\n    }\n\n    fileSystem \u003d getFileSystem(configuration);\n\n    // This step isn\u0027t strictly necessary, but it makes debugging issues much\n    // easier. We try to create the base directory eagerly and fail with\n    // copious debug info if it fails.\n    try {\n      fileSystem.mkdirs(basePath);\n    } catch (Exception ex) {\n      throw new MetricsException(\"Failed to create \" + basePath + \"[\"\n          + SOURCE_KEY + \"\u003d\" + source + \", \"\n          + IGNORE_ERROR_KEY + \"\u003d\" + ignoreError + \", \"\n          + ALLOW_APPEND_KEY + \"\u003d\" + allowAppend + \", \"\n          + KEYTAB_PROPERTY_KEY + \"\u003d\"\n          + conf.getString(KEYTAB_PROPERTY_KEY) + \", \"\n          + conf.getString(KEYTAB_PROPERTY_KEY) + \"\u003d\"\n          + configuration.get(conf.getString(KEYTAB_PROPERTY_KEY)) + \", \"\n          + USERNAME_PROPERTY_KEY + \"\u003d\"\n          + conf.getString(USERNAME_PROPERTY_KEY) + \", \"\n          + conf.getString(USERNAME_PROPERTY_KEY) + \"\u003d\"\n          + configuration.get(conf.getString(USERNAME_PROPERTY_KEY))\n          + \"] -- \" + ex.toString(), ex);\n    }\n\n    // If we\u0027re permitted to append, check if we actually can\n    if (allowAppend) {\n      allowAppend \u003d checkAppend(fileSystem);\n    }\n\n    flushTimer \u003d new Timer(\"RollingFileSystemSink Flusher\", true);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
      "extendedDetails": {}
    },
    "5b59a0ea85c923384e36ad7c036e751551774142": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12759. RollingFileSystemSink should eagerly rotate directories. Contributed by Daniel Templeton.\n",
      "commitDate": "06/02/16 8:52 PM",
      "commitName": "5b59a0ea85c923384e36ad7c036e751551774142",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "28/01/16 5:43 PM",
      "commitNameOld": "ee005e010cff3f97a5daa8000ac2cd151e2631ca",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 9.13,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   public void init(SubsetConfiguration conf) {\n     basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n     source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n     ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n     allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n \n     try {\n       fileSystem \u003d FileSystem.get(new URI(basePath.toString()),\n           new Configuration());\n     } catch (URISyntaxException ex) {\n       throw new MetricsException(\"The supplied filesystem base path URI\"\n           + \" is not a valid URI: \" + basePath.toString(), ex);\n     } catch (IOException ex) {\n       throw new MetricsException(\"Error connecting to file system: \"\n           + basePath + \" [\" + ex.toString() + \"]\", ex);\n     }\n \n     // If we\u0027re permitted to append, check if we actually can\n     if (allowAppend) {\n       allowAppend \u003d checkAppend(fileSystem);\n     }\n+\n+    flushTimer \u003d new Timer(\"RollingFileSystemSink Flusher\", true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n    source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n    ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n    allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n\n    try {\n      fileSystem \u003d FileSystem.get(new URI(basePath.toString()),\n          new Configuration());\n    } catch (URISyntaxException ex) {\n      throw new MetricsException(\"The supplied filesystem base path URI\"\n          + \" is not a valid URI: \" + basePath.toString(), ex);\n    } catch (IOException ex) {\n      throw new MetricsException(\"Error connecting to file system: \"\n          + basePath + \" [\" + ex.toString() + \"]\", ex);\n    }\n\n    // If we\u0027re permitted to append, check if we actually can\n    if (allowAppend) {\n      allowAppend \u003d checkAppend(fileSystem);\n    }\n\n    flushTimer \u003d new Timer(\"RollingFileSystemSink Flusher\", true);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
      "extendedDetails": {}
    },
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12702. Add an HDFS metrics sink. (Daniel Templeton via kasha)\n",
      "commitDate": "28/01/16 5:43 PM",
      "commitName": "ee005e010cff3f97a5daa8000ac2cd151e2631ca",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,22 @@\n+  public void init(SubsetConfiguration conf) {\n+    basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n+    source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n+    ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n+    allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n+\n+    try {\n+      fileSystem \u003d FileSystem.get(new URI(basePath.toString()),\n+          new Configuration());\n+    } catch (URISyntaxException ex) {\n+      throw new MetricsException(\"The supplied filesystem base path URI\"\n+          + \" is not a valid URI: \" + basePath.toString(), ex);\n+    } catch (IOException ex) {\n+      throw new MetricsException(\"Error connecting to file system: \"\n+          + basePath + \" [\" + ex.toString() + \"]\", ex);\n+    }\n+\n+    // If we\u0027re permitted to append, check if we actually can\n+    if (allowAppend) {\n+      allowAppend \u003d checkAppend(fileSystem);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(SubsetConfiguration conf) {\n    basePath \u003d new Path(conf.getString(BASEPATH_KEY, BASEPATH_DEFAULT));\n    source \u003d conf.getString(SOURCE_KEY, SOURCE_DEFAULT);\n    ignoreError \u003d conf.getBoolean(IGNORE_ERROR_KEY, false);\n    allowAppend \u003d conf.getBoolean(ALLOW_APPEND_KEY, false);\n\n    try {\n      fileSystem \u003d FileSystem.get(new URI(basePath.toString()),\n          new Configuration());\n    } catch (URISyntaxException ex) {\n      throw new MetricsException(\"The supplied filesystem base path URI\"\n          + \" is not a valid URI: \" + basePath.toString(), ex);\n    } catch (IOException ex) {\n      throw new MetricsException(\"Error connecting to file system: \"\n          + basePath + \" [\" + ex.toString() + \"]\", ex);\n    }\n\n    // If we\u0027re permitted to append, check if we actually can\n    if (allowAppend) {\n      allowAppend \u003d checkAppend(fileSystem);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java"
    }
  }
}