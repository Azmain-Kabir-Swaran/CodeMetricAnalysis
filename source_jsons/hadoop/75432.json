{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElector.java",
  "functionName": "reJoinElection",
  "functionId": "reJoinElection___sleepTime-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
  "functionStartLine": 753,
  "functionEndLine": 778,
  "numCommitsSeen": 44,
  "timeTaken": 1229,
  "changeHistory": [
    "8a4ff65b3cf5c9b2d544733956fe22e1d03aefe4",
    "66931670287bc859300014ad50531f5d9a648067",
    "31c2e3f29cbdc33a7333022d61130a25cee03684",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec"
  ],
  "changeHistoryShort": {
    "8a4ff65b3cf5c9b2d544733956fe22e1d03aefe4": "Ybodychange",
    "66931670287bc859300014ad50531f5d9a648067": "Ymultichange(Yparameterchange,Ybodychange)",
    "31c2e3f29cbdc33a7333022d61130a25cee03684": "Ybodychange",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8a4ff65b3cf5c9b2d544733956fe22e1d03aefe4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9459. ActiveStandbyElector can join election even before Service HEALTHY, and results in null data at ActiveBreadCrumb. Contributed by Vinay and Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1482227 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/13 11:43 PM",
      "commitName": "8a4ff65b3cf5c9b2d544733956fe22e1d03aefe4",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "10/01/13 2:05 AM",
      "commitNameOld": "d863f7a1e452ecb26c3cb92bc6c90e552731304b",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 123.86,
      "commitsBetweenForRepo": 734,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,26 @@\n   private void reJoinElection(int sleepTime) {\n     LOG.info(\"Trying to re-establish ZK session\");\n     \n     // Some of the test cases rely on expiring the ZK sessions and\n     // ensuring that the other node takes over. But, there\u0027s a race\n     // where the original lease holder could reconnect faster than the other\n     // thread manages to take the lock itself. This lock allows the\n     // tests to block the reconnection. It\u0027s a shame that this leaked\n     // into non-test code, but the lock is only acquired here so will never\n     // be contended.\n     sessionReestablishLockForTests.lock();\n     try {\n       terminateConnection();\n       sleepFor(sleepTime);\n-      \n-      joinElectionInternal();\n+      // Should not join election even before the SERVICE is reported\n+      // as HEALTHY from ZKFC monitoring.\n+      if (appData !\u003d null) {\n+        joinElectionInternal();\n+      } else {\n+        LOG.info(\"Not joining election since service has not yet been \" +\n+            \"reported as healthy.\");\n+      }\n     } finally {\n       sessionReestablishLockForTests.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reJoinElection(int sleepTime) {\n    LOG.info(\"Trying to re-establish ZK session\");\n    \n    // Some of the test cases rely on expiring the ZK sessions and\n    // ensuring that the other node takes over. But, there\u0027s a race\n    // where the original lease holder could reconnect faster than the other\n    // thread manages to take the lock itself. This lock allows the\n    // tests to block the reconnection. It\u0027s a shame that this leaked\n    // into non-test code, but the lock is only acquired here so will never\n    // be contended.\n    sessionReestablishLockForTests.lock();\n    try {\n      terminateConnection();\n      sleepFor(sleepTime);\n      // Should not join election even before the SERVICE is reported\n      // as HEALTHY from ZKFC monitoring.\n      if (appData !\u003d null) {\n        joinElectionInternal();\n      } else {\n        LOG.info(\"Not joining election since service has not yet been \" +\n            \"reported as healthy.\");\n      }\n    } finally {\n      sessionReestablishLockForTests.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "66931670287bc859300014ad50531f5d9a648067": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-8220. ZKFailoverController doesn\u0027t handle failure to become active correctly. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/03/12 1:23 PM",
      "commitName": "66931670287bc859300014ad50531f5d9a648067",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8220. ZKFailoverController doesn\u0027t handle failure to become active correctly. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307596 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/03/12 1:23 PM",
          "commitName": "66931670287bc859300014ad50531f5d9a648067",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "29/03/12 2:49 PM",
          "commitNameOld": "04416861eb068f5d0a4ba1361924714d89f2d73c",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  private void reJoinElection() {\n+  private void reJoinElection(int sleepTime) {\n     LOG.info(\"Trying to re-establish ZK session\");\n     \n     // Some of the test cases rely on expiring the ZK sessions and\n     // ensuring that the other node takes over. But, there\u0027s a race\n     // where the original lease holder could reconnect faster than the other\n     // thread manages to take the lock itself. This lock allows the\n     // tests to block the reconnection. It\u0027s a shame that this leaked\n     // into non-test code, but the lock is only acquired here so will never\n     // be contended.\n     sessionReestablishLockForTests.lock();\n     try {\n       terminateConnection();\n+      sleepFor(sleepTime);\n+      \n       joinElectionInternal();\n     } finally {\n       sessionReestablishLockForTests.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void reJoinElection(int sleepTime) {\n    LOG.info(\"Trying to re-establish ZK session\");\n    \n    // Some of the test cases rely on expiring the ZK sessions and\n    // ensuring that the other node takes over. But, there\u0027s a race\n    // where the original lease holder could reconnect faster than the other\n    // thread manages to take the lock itself. This lock allows the\n    // tests to block the reconnection. It\u0027s a shame that this leaked\n    // into non-test code, but the lock is only acquired here so will never\n    // be contended.\n    sessionReestablishLockForTests.lock();\n    try {\n      terminateConnection();\n      sleepFor(sleepTime);\n      \n      joinElectionInternal();\n    } finally {\n      sessionReestablishLockForTests.unlock();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[sleepTime-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8220. ZKFailoverController doesn\u0027t handle failure to become active correctly. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307596 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/03/12 1:23 PM",
          "commitName": "66931670287bc859300014ad50531f5d9a648067",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "29/03/12 2:49 PM",
          "commitNameOld": "04416861eb068f5d0a4ba1361924714d89f2d73c",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  private void reJoinElection() {\n+  private void reJoinElection(int sleepTime) {\n     LOG.info(\"Trying to re-establish ZK session\");\n     \n     // Some of the test cases rely on expiring the ZK sessions and\n     // ensuring that the other node takes over. But, there\u0027s a race\n     // where the original lease holder could reconnect faster than the other\n     // thread manages to take the lock itself. This lock allows the\n     // tests to block the reconnection. It\u0027s a shame that this leaked\n     // into non-test code, but the lock is only acquired here so will never\n     // be contended.\n     sessionReestablishLockForTests.lock();\n     try {\n       terminateConnection();\n+      sleepFor(sleepTime);\n+      \n       joinElectionInternal();\n     } finally {\n       sessionReestablishLockForTests.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void reJoinElection(int sleepTime) {\n    LOG.info(\"Trying to re-establish ZK session\");\n    \n    // Some of the test cases rely on expiring the ZK sessions and\n    // ensuring that the other node takes over. But, there\u0027s a race\n    // where the original lease holder could reconnect faster than the other\n    // thread manages to take the lock itself. This lock allows the\n    // tests to block the reconnection. It\u0027s a shame that this leaked\n    // into non-test code, but the lock is only acquired here so will never\n    // be contended.\n    sessionReestablishLockForTests.lock();\n    try {\n      terminateConnection();\n      sleepFor(sleepTime);\n      \n      joinElectionInternal();\n    } finally {\n      sessionReestablishLockForTests.unlock();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
          "extendedDetails": {}
        }
      ]
    },
    "31c2e3f29cbdc33a7333022d61130a25cee03684": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 12:31 PM",
      "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/03/12 5:05 PM",
      "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,18 @@\n   private void reJoinElection() {\n-    LOG.debug(\"Trying to re-establish ZK session\");\n-    terminateConnection();\n-    joinElectionInternal();\n+    LOG.info(\"Trying to re-establish ZK session\");\n+    \n+    // Some of the test cases rely on expiring the ZK sessions and\n+    // ensuring that the other node takes over. But, there\u0027s a race\n+    // where the original lease holder could reconnect faster than the other\n+    // thread manages to take the lock itself. This lock allows the\n+    // tests to block the reconnection. It\u0027s a shame that this leaked\n+    // into non-test code, but the lock is only acquired here so will never\n+    // be contended.\n+    sessionReestablishLockForTests.lock();\n+    try {\n+      terminateConnection();\n+      joinElectionInternal();\n+    } finally {\n+      sessionReestablishLockForTests.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void reJoinElection() {\n    LOG.info(\"Trying to re-establish ZK session\");\n    \n    // Some of the test cases rely on expiring the ZK sessions and\n    // ensuring that the other node takes over. But, there\u0027s a race\n    // where the original lease holder could reconnect faster than the other\n    // thread manages to take the lock itself. This lock allows the\n    // tests to block the reconnection. It\u0027s a shame that this leaked\n    // into non-test code, but the lock is only acquired here so will never\n    // be contended.\n    sessionReestablishLockForTests.lock();\n    try {\n      terminateConnection();\n      joinElectionInternal();\n    } finally {\n      sessionReestablishLockForTests.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7992. Add ZKClient library to facilitate leader election. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1235841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 9:26 AM",
      "commitName": "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,5 @@\n+  private void reJoinElection() {\n+    LOG.debug(\"Trying to re-establish ZK session\");\n+    terminateConnection();\n+    joinElectionInternal();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void reJoinElection() {\n    LOG.debug(\"Trying to re-establish ZK session\");\n    terminateConnection();\n    joinElectionInternal();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java"
    }
  }
}