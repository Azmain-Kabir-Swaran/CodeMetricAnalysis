{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingFileSystemSink.java",
  "functionName": "createLogFile",
  "functionId": "createLogFile___initial-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
  "functionStartLine": 688,
  "functionEndLine": 716,
  "numCommitsSeen": 9,
  "timeTaken": 957,
  "changeHistory": [
    "5b59a0ea85c923384e36ad7c036e751551774142",
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca"
  ],
  "changeHistoryShort": {
    "5b59a0ea85c923384e36ad7c036e751551774142": "Ybodychange",
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5b59a0ea85c923384e36ad7c036e751551774142": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12759. RollingFileSystemSink should eagerly rotate directories. Contributed by Daniel Templeton.\n",
      "commitDate": "06/02/16 8:52 PM",
      "commitName": "5b59a0ea85c923384e36ad7c036e751551774142",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "28/01/16 5:43 PM",
      "commitNameOld": "ee005e010cff3f97a5daa8000ac2cd151e2631ca",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 9.13,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   private void createLogFile(Path initial) throws IOException {\n     Path currentAttempt \u003d initial;\n-    int id \u003d 1;\n+    // Start at 0 so that if the base filname exists, we start with the suffix\n+    // \".1\".\n+    int id \u003d 0;\n \n     while (true) {\n       // First try blindly creating the file. If we fail, it either means\n       // the file exists, or the operation actually failed.  We do it this way\n       // because if we check whether the file exists, it might still be created\n       // by the time we try to create it. Creating first works like a\n       // test-and-set.\n       try {\n         currentFSOutStream \u003d fileSystem.create(currentAttempt, false);\n         currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n             StandardCharsets.UTF_8.name());\n         currentFilePath \u003d currentAttempt;\n         break;\n       } catch (IOException ex) {\n         // Now we can check to see if the file exists to know why we failed\n         if (fileSystem.exists(currentAttempt)) {\n+          id \u003d getNextIdToTry(initial, id);\n           currentAttempt \u003d new Path(initial.toString() + \".\" + id);\n-          id +\u003d 1;\n         } else {\n           throw ex;\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createLogFile(Path initial) throws IOException {\n    Path currentAttempt \u003d initial;\n    // Start at 0 so that if the base filname exists, we start with the suffix\n    // \".1\".\n    int id \u003d 0;\n\n    while (true) {\n      // First try blindly creating the file. If we fail, it either means\n      // the file exists, or the operation actually failed.  We do it this way\n      // because if we check whether the file exists, it might still be created\n      // by the time we try to create it. Creating first works like a\n      // test-and-set.\n      try {\n        currentFSOutStream \u003d fileSystem.create(currentAttempt, false);\n        currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n            StandardCharsets.UTF_8.name());\n        currentFilePath \u003d currentAttempt;\n        break;\n      } catch (IOException ex) {\n        // Now we can check to see if the file exists to know why we failed\n        if (fileSystem.exists(currentAttempt)) {\n          id \u003d getNextIdToTry(initial, id);\n          currentAttempt \u003d new Path(initial.toString() + \".\" + id);\n        } else {\n          throw ex;\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java",
      "extendedDetails": {}
    },
    "ee005e010cff3f97a5daa8000ac2cd151e2631ca": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12702. Add an HDFS metrics sink. (Daniel Templeton via kasha)\n",
      "commitDate": "28/01/16 5:43 PM",
      "commitName": "ee005e010cff3f97a5daa8000ac2cd151e2631ca",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,27 @@\n+  private void createLogFile(Path initial) throws IOException {\n+    Path currentAttempt \u003d initial;\n+    int id \u003d 1;\n+\n+    while (true) {\n+      // First try blindly creating the file. If we fail, it either means\n+      // the file exists, or the operation actually failed.  We do it this way\n+      // because if we check whether the file exists, it might still be created\n+      // by the time we try to create it. Creating first works like a\n+      // test-and-set.\n+      try {\n+        currentFSOutStream \u003d fileSystem.create(currentAttempt, false);\n+        currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n+            StandardCharsets.UTF_8.name());\n+        currentFilePath \u003d currentAttempt;\n+        break;\n+      } catch (IOException ex) {\n+        // Now we can check to see if the file exists to know why we failed\n+        if (fileSystem.exists(currentAttempt)) {\n+          currentAttempt \u003d new Path(initial.toString() + \".\" + id);\n+          id +\u003d 1;\n+        } else {\n+          throw ex;\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createLogFile(Path initial) throws IOException {\n    Path currentAttempt \u003d initial;\n    int id \u003d 1;\n\n    while (true) {\n      // First try blindly creating the file. If we fail, it either means\n      // the file exists, or the operation actually failed.  We do it this way\n      // because if we check whether the file exists, it might still be created\n      // by the time we try to create it. Creating first works like a\n      // test-and-set.\n      try {\n        currentFSOutStream \u003d fileSystem.create(currentAttempt, false);\n        currentOutStream \u003d new PrintStream(currentFSOutStream, true,\n            StandardCharsets.UTF_8.name());\n        currentFilePath \u003d currentAttempt;\n        break;\n      } catch (IOException ex) {\n        // Now we can check to see if the file exists to know why we failed\n        if (fileSystem.exists(currentAttempt)) {\n          currentAttempt \u003d new Path(initial.toString() + \".\" + id);\n          id +\u003d 1;\n        } else {\n          throw ex;\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/sink/RollingFileSystemSink.java"
    }
  }
}