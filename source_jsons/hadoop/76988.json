{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CodecUtil.java",
  "functionName": "createRawDecoderWithFallback",
  "functionId": "createRawDecoderWithFallback___conf-Configuration__codecName-String__coderOptions-ErasureCoderOptions",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
  "functionStartLine": 191,
  "functionEndLine": 211,
  "numCommitsSeen": 54,
  "timeTaken": 3710,
  "changeHistory": [
    "465c213439d4955df0b23d38423073890b121ccc",
    "bbf8cac14d8b1a0e919b57cb7f081edce45acd5b",
    "ddaeb3e4979338551573285f219a2d361f502950",
    "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1",
    "f050afb5785dc38875cf644fd4f80a219d4345e7"
  ],
  "changeHistoryShort": {
    "465c213439d4955df0b23d38423073890b121ccc": "Ybodychange",
    "bbf8cac14d8b1a0e919b57cb7f081edce45acd5b": "Ymultichange(Yparameterchange,Ybodychange)",
    "ddaeb3e4979338551573285f219a2d361f502950": "Ymultichange(Yparameterchange,Ybodychange)",
    "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1": "Ymultichange(Yparameterchange,Ybodychange)",
    "f050afb5785dc38875cf644fd4f80a219d4345e7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "465c213439d4955df0b23d38423073890b121ccc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12094. Log torrent when none isa-l EC is used. Contributed by LiXin Ge.\n",
      "commitDate": "21/07/17 12:25 PM",
      "commitName": "465c213439d4955df0b23d38423073890b121ccc",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 3.62,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,21 @@\n   private static RawErasureDecoder createRawDecoderWithFallback(\n       Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n     String[] coders \u003d getRawCoderNames(conf, codecName);\n     for (String rawCoderName : coders) {\n       try {\n         if (rawCoderName !\u003d null) {\n           RawErasureCoderFactory fact \u003d createRawCoderFactory(\n               rawCoderName, codecName);\n           return fact.createDecoder(coderOptions);\n         }\n       } catch (LinkageError | Exception e) {\n         // Fallback to next coder if possible\n-        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n-            \", fallback to next codec if possible\", e);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Failed to create raw erasure decoder \" + rawCoderName +\n+                  \", fallback to next codec if possible\", e);\n+        }\n       }\n     }\n     throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n-        \"encoder with given codec: \" + codecName);\n+        \"decoder with given codec: \" + codecName);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n    String[] coders \u003d getRawCoderNames(conf, codecName);\n    for (String rawCoderName : coders) {\n      try {\n        if (rawCoderName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n              rawCoderName, codecName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Failed to create raw erasure decoder \" + rawCoderName +\n                  \", fallback to next codec if possible\", e);\n        }\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n        \"decoder with given codec: \" + codecName);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
      "extendedDetails": {}
    },
    "bbf8cac14d8b1a0e919b57cb7f081edce45acd5b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\n",
      "commitDate": "27/04/17 12:39 PM",
      "commitName": "bbf8cac14d8b1a0e919b57cb7f081edce45acd5b",
      "commitAuthor": "Wei-Chiu Chuang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\n",
          "commitDate": "27/04/17 12:39 PM",
          "commitName": "bbf8cac14d8b1a0e919b57cb7f081edce45acd5b",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "27/04/17 12:25 PM",
          "commitNameOld": "ddaeb3e4979338551573285f219a2d361f502950",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n   private static RawErasureDecoder createRawDecoderWithFallback(\n-          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n-    String coders \u003d getRawCoders(conf, codec);\n-    for (String factName : Splitter.on(\",\").split(coders)) {\n+      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n+    String[] coders \u003d getRawCoderNames(conf, codecName);\n+    for (String rawCoderName : coders) {\n       try {\n-        if (factName !\u003d null) {\n-          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n-              factName);\n+        if (rawCoderName !\u003d null) {\n+          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n+              rawCoderName, codecName);\n           return fact.createDecoder(coderOptions);\n         }\n       } catch (LinkageError | Exception e) {\n         // Fallback to next coder if possible\n-        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n+        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n             \", fallback to next codec if possible\", e);\n       }\n     }\n     throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n-            \"encoder with given codec: \" + codec);\n+        \"encoder with given codec: \" + codecName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n    String[] coders \u003d getRawCoderNames(conf, codecName);\n    for (String rawCoderName : coders) {\n      try {\n        if (rawCoderName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n              rawCoderName, codecName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n            \", fallback to next codec if possible\", e);\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n        \"encoder with given codec: \" + codecName);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, codec-String, coderOptions-ErasureCoderOptions]",
            "newValue": "[conf-Configuration, codecName-String, coderOptions-ErasureCoderOptions]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\n",
          "commitDate": "27/04/17 12:39 PM",
          "commitName": "bbf8cac14d8b1a0e919b57cb7f081edce45acd5b",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "27/04/17 12:25 PM",
          "commitNameOld": "ddaeb3e4979338551573285f219a2d361f502950",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n   private static RawErasureDecoder createRawDecoderWithFallback(\n-          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n-    String coders \u003d getRawCoders(conf, codec);\n-    for (String factName : Splitter.on(\",\").split(coders)) {\n+      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n+    String[] coders \u003d getRawCoderNames(conf, codecName);\n+    for (String rawCoderName : coders) {\n       try {\n-        if (factName !\u003d null) {\n-          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n-              factName);\n+        if (rawCoderName !\u003d null) {\n+          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n+              rawCoderName, codecName);\n           return fact.createDecoder(coderOptions);\n         }\n       } catch (LinkageError | Exception e) {\n         // Fallback to next coder if possible\n-        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n+        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n             \", fallback to next codec if possible\", e);\n       }\n     }\n     throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n-            \"encoder with given codec: \" + codec);\n+        \"encoder with given codec: \" + codecName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n    String[] coders \u003d getRawCoderNames(conf, codecName);\n    for (String rawCoderName : coders) {\n      try {\n        if (rawCoderName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n              rawCoderName, codecName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n            \", fallback to next codec if possible\", e);\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n        \"encoder with given codec: \" + codecName);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "ddaeb3e4979338551573285f219a2d361f502950": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\"\n\nThis reverts commit 872088c6e7e78534a8ffd1ea6e57b86faea3d6e1.\n",
      "commitDate": "27/04/17 12:25 PM",
      "commitName": "ddaeb3e4979338551573285f219a2d361f502950",
      "commitAuthor": "Wei-Chiu Chuang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\"\n\nThis reverts commit 872088c6e7e78534a8ffd1ea6e57b86faea3d6e1.\n",
          "commitDate": "27/04/17 12:25 PM",
          "commitName": "ddaeb3e4979338551573285f219a2d361f502950",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "27/04/17 11:59 AM",
          "commitNameOld": "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n   private static RawErasureDecoder createRawDecoderWithFallback(\n-      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n-    String[] coders \u003d getRawCoderNames(conf, codecName);\n-    for (String rawCoderName : coders) {\n+          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n+    String coders \u003d getRawCoders(conf, codec);\n+    for (String factName : Splitter.on(\",\").split(coders)) {\n       try {\n-        if (rawCoderName !\u003d null) {\n-          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n-              rawCoderName, codecName);\n+        if (factName !\u003d null) {\n+          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n+              factName);\n           return fact.createDecoder(coderOptions);\n         }\n       } catch (LinkageError | Exception e) {\n         // Fallback to next coder if possible\n-        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n+        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n             \", fallback to next codec if possible\", e);\n       }\n     }\n     throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n-        \"encoder with given codec: \" + codecName);\n+            \"encoder with given codec: \" + codec);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n    String coders \u003d getRawCoders(conf, codec);\n    for (String factName : Splitter.on(\",\").split(coders)) {\n      try {\n        if (factName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n              factName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n            \", fallback to next codec if possible\", e);\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n            \"encoder with given codec: \" + codec);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, codecName-String, coderOptions-ErasureCoderOptions]",
            "newValue": "[conf-Configuration, codec-String, coderOptions-ErasureCoderOptions]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\"\n\nThis reverts commit 872088c6e7e78534a8ffd1ea6e57b86faea3d6e1.\n",
          "commitDate": "27/04/17 12:25 PM",
          "commitName": "ddaeb3e4979338551573285f219a2d361f502950",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "27/04/17 11:59 AM",
          "commitNameOld": "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n   private static RawErasureDecoder createRawDecoderWithFallback(\n-      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n-    String[] coders \u003d getRawCoderNames(conf, codecName);\n-    for (String rawCoderName : coders) {\n+          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n+    String coders \u003d getRawCoders(conf, codec);\n+    for (String factName : Splitter.on(\",\").split(coders)) {\n       try {\n-        if (rawCoderName !\u003d null) {\n-          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n-              rawCoderName, codecName);\n+        if (factName !\u003d null) {\n+          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n+              factName);\n           return fact.createDecoder(coderOptions);\n         }\n       } catch (LinkageError | Exception e) {\n         // Fallback to next coder if possible\n-        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n+        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n             \", fallback to next codec if possible\", e);\n       }\n     }\n     throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n-        \"encoder with given codec: \" + codecName);\n+            \"encoder with given codec: \" + codec);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n    String coders \u003d getRawCoders(conf, codec);\n    for (String factName : Splitter.on(\",\").split(coders)) {\n      try {\n        if (factName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n              factName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n            \", fallback to next codec if possible\", e);\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n            \"encoder with given codec: \" + codec);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\n",
      "commitDate": "27/04/17 11:59 AM",
      "commitName": "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1",
      "commitAuthor": "Wei-Chiu Chuang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\n",
          "commitDate": "27/04/17 11:59 AM",
          "commitName": "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "21/04/17 11:35 AM",
          "commitNameOld": "a22fe02fba66280a8e994282e9ead23d9e20669a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.02,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n   private static RawErasureDecoder createRawDecoderWithFallback(\n-          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n-    String coders \u003d getRawCoders(conf, codec);\n-    for (String factName : Splitter.on(\",\").split(coders)) {\n+      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n+    String[] coders \u003d getRawCoderNames(conf, codecName);\n+    for (String rawCoderName : coders) {\n       try {\n-        if (factName !\u003d null) {\n-          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n-              factName);\n+        if (rawCoderName !\u003d null) {\n+          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n+              rawCoderName, codecName);\n           return fact.createDecoder(coderOptions);\n         }\n       } catch (LinkageError | Exception e) {\n         // Fallback to next coder if possible\n-        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n+        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n             \", fallback to next codec if possible\", e);\n       }\n     }\n     throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n-            \"encoder with given codec: \" + codec);\n+        \"encoder with given codec: \" + codecName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n    String[] coders \u003d getRawCoderNames(conf, codecName);\n    for (String rawCoderName : coders) {\n      try {\n        if (rawCoderName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n              rawCoderName, codecName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n            \", fallback to next codec if possible\", e);\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n        \"encoder with given codec: \" + codecName);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, codec-String, coderOptions-ErasureCoderOptions]",
            "newValue": "[conf-Configuration, codecName-String, coderOptions-ErasureCoderOptions]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13200. Implement customizable and configurable erasure coders. Contributed by Tim Yao.\n",
          "commitDate": "27/04/17 11:59 AM",
          "commitName": "872088c6e7e78534a8ffd1ea6e57b86faea3d6e1",
          "commitAuthor": "Wei-Chiu Chuang",
          "commitDateOld": "21/04/17 11:35 AM",
          "commitNameOld": "a22fe02fba66280a8e994282e9ead23d9e20669a",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 6.02,
          "commitsBetweenForRepo": 29,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n   private static RawErasureDecoder createRawDecoderWithFallback(\n-          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n-    String coders \u003d getRawCoders(conf, codec);\n-    for (String factName : Splitter.on(\",\").split(coders)) {\n+      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n+    String[] coders \u003d getRawCoderNames(conf, codecName);\n+    for (String rawCoderName : coders) {\n       try {\n-        if (factName !\u003d null) {\n-          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n-              factName);\n+        if (rawCoderName !\u003d null) {\n+          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n+              rawCoderName, codecName);\n           return fact.createDecoder(coderOptions);\n         }\n       } catch (LinkageError | Exception e) {\n         // Fallback to next coder if possible\n-        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n+        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n             \", fallback to next codec if possible\", e);\n       }\n     }\n     throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n-            \"encoder with given codec: \" + codec);\n+        \"encoder with given codec: \" + codecName);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n      Configuration conf, String codecName, ErasureCoderOptions coderOptions) {\n    String[] coders \u003d getRawCoderNames(conf, codecName);\n    for (String rawCoderName : coders) {\n      try {\n        if (rawCoderName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(\n              rawCoderName, codecName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        LOG.warn(\"Failed to create raw erasure decoder \" + rawCoderName +\n            \", fallback to next codec if possible\", e);\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n        \"encoder with given codec: \" + codecName);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java",
          "extendedDetails": {}
        }
      ]
    },
    "f050afb5785dc38875cf644fd4f80a219d4345e7": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13665. Erasure Coding codec should support fallback coder. Contributed by Kai Sasaki.\n",
      "commitDate": "11/04/17 7:32 AM",
      "commitName": "f050afb5785dc38875cf644fd4f80a219d4345e7",
      "commitAuthor": "Wei-Chiu Chuang",
      "diff": "@@ -0,0 +1,19 @@\n+  private static RawErasureDecoder createRawDecoderWithFallback(\n+          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n+    String coders \u003d getRawCoders(conf, codec);\n+    for (String factName : Splitter.on(\",\").split(coders)) {\n+      try {\n+        if (factName !\u003d null) {\n+          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n+              factName);\n+          return fact.createDecoder(coderOptions);\n+        }\n+      } catch (LinkageError | Exception e) {\n+        // Fallback to next coder if possible\n+        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n+            \", fallback to next codec if possible\", e);\n+      }\n+    }\n+    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n+            \"encoder with given codec: \" + codec);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static RawErasureDecoder createRawDecoderWithFallback(\n          Configuration conf, String codec, ErasureCoderOptions coderOptions) {\n    String coders \u003d getRawCoders(conf, codec);\n    for (String factName : Splitter.on(\",\").split(coders)) {\n      try {\n        if (factName !\u003d null) {\n          RawErasureCoderFactory fact \u003d createRawCoderFactory(conf,\n              factName);\n          return fact.createDecoder(coderOptions);\n        }\n      } catch (LinkageError | Exception e) {\n        // Fallback to next coder if possible\n        LOG.warn(\"Failed to create raw erasure decoder \" + factName +\n            \", fallback to next codec if possible\", e);\n      }\n    }\n    throw new IllegalArgumentException(\"Fail to create raw erasure \" +\n            \"encoder with given codec: \" + codec);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/CodecUtil.java"
    }
  }
}