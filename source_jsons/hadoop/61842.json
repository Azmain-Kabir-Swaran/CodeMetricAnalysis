{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcfsBasedProcessTree.java",
  "functionName": "toString",
  "functionId": "toString",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
  "functionStartLine": 971,
  "functionEndLine": 999,
  "numCommitsSeen": 34,
  "timeTaken": 8096,
  "changeHistory": [
    "95372657fc25c02399b01793833021ccf88dada2",
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1",
    "06579878dfca0b634aaecfe63bb90c46113b3037",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "95372657fc25c02399b01793833021ccf88dada2": "Ybodychange",
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1": "Ybodychange",
    "06579878dfca0b634aaecfe63bb90c46113b3037": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "95372657fc25c02399b01793833021ccf88dada2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9287. Consecutive StringBuilder append should be reuse. Contributed by Ayush Saxena.\n",
      "commitDate": "25/02/19 11:45 AM",
      "commitName": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 258.17,
      "commitsBetweenForRepo": 1981,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n     public String toString() {\n       StringBuilder sb \u003d new StringBuilder();\n-      sb.append(\"\\t\").append(this.getName()).append(\"\\n\");\n-      sb.append(\"\\t\").append(MemInfo.SIZE.name + \":\" + this.getSize())\n-        .append(\" kB\\n\");\n+      sb.append(\"\\t\").append(this.getName()).append(\"\\n\")\n+          .append(\"\\t\").append(MemInfo.SIZE.name + \":\" + this.getSize())\n+          .append(\" kB\\n\");\n       sb.append(\"\\t\").append(MemInfo.PSS.name + \":\" + this.getPss())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\").append(MemInfo.RSS.name + \":\" + this.getRss())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.SHARED_CLEAN.name + \":\" + this.getSharedClean())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.SHARED_DIRTY.name + \":\" + this.getSharedDirty())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.PRIVATE_CLEAN.name + \":\" + this.getPrivateClean())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.REFERENCED.name + \":\" + this.getReferenced())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.ANONYMOUS.name + \":\" + this.getAnonymous())\n         .append(\" kB\\n\");\n       return sb.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(\"\\t\").append(this.getName()).append(\"\\n\")\n          .append(\"\\t\").append(MemInfo.SIZE.name + \":\" + this.getSize())\n          .append(\" kB\\n\");\n      sb.append(\"\\t\").append(MemInfo.PSS.name + \":\" + this.getPss())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\").append(MemInfo.RSS.name + \":\" + this.getRss())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.SHARED_CLEAN.name + \":\" + this.getSharedClean())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.SHARED_DIRTY.name + \":\" + this.getSharedDirty())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_CLEAN.name + \":\" + this.getPrivateClean())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.REFERENCED.name + \":\" + this.getReferenced())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.ANONYMOUS.name + \":\" + this.getAnonymous())\n        .append(\" kB\\n\");\n      return sb.toString();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5551. Ignore file backed pages from memory computation when smaps is enabled. Contributed by Rajesh Balamohan\n",
      "commitDate": "11/10/16 8:12 AM",
      "commitName": "ecb51b857ac7faceff981b2b6f22ea1af0d42ab1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "08/06/16 5:11 PM",
      "commitNameOld": "1500a0a3009e453c9f05a93df7a78b4e185eef30",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 124.63,
      "commitsBetweenForRepo": 938,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,29 @@\n     public String toString() {\n       StringBuilder sb \u003d new StringBuilder();\n       sb.append(\"\\t\").append(this.getName()).append(\"\\n\");\n       sb.append(\"\\t\").append(MemInfo.SIZE.name + \":\" + this.getSize())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\").append(MemInfo.PSS.name + \":\" + this.getPss())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\").append(MemInfo.RSS.name + \":\" + this.getRss())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.SHARED_CLEAN.name + \":\" + this.getSharedClean())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.SHARED_DIRTY.name + \":\" + this.getSharedDirty())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.PRIVATE_CLEAN.name + \":\" + this.getPrivateClean())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n         .append(MemInfo.REFERENCED.name + \":\" + this.getReferenced())\n         .append(\" kB\\n\");\n       sb.append(\"\\t\")\n-        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n-        .append(\" kB\\n\");\n-      sb.append(\"\\t\")\n-        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n+        .append(MemInfo.ANONYMOUS.name + \":\" + this.getAnonymous())\n         .append(\" kB\\n\");\n       return sb.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(\"\\t\").append(this.getName()).append(\"\\n\");\n      sb.append(\"\\t\").append(MemInfo.SIZE.name + \":\" + this.getSize())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\").append(MemInfo.PSS.name + \":\" + this.getPss())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\").append(MemInfo.RSS.name + \":\" + this.getRss())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.SHARED_CLEAN.name + \":\" + this.getSharedClean())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.SHARED_DIRTY.name + \":\" + this.getSharedDirty())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_CLEAN.name + \":\" + this.getPrivateClean())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.REFERENCED.name + \":\" + this.getReferenced())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.ANONYMOUS.name + \":\" + this.getAnonymous())\n        .append(\" kB\\n\");\n      return sb.toString();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "06579878dfca0b634aaecfe63bb90c46113b3037": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1775. Enhanced ProcfsBasedProcessTree to optionally add the ability to use smaps for obtaining used memory information. Contributed by Rajesh Balamohan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1580087 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/14 5:01 PM",
      "commitName": "06579878dfca0b634aaecfe63bb90c46113b3037",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/04/13 4:11 PM",
      "commitNameOld": "de6d05c8b00d978094b09bf1f92638049dc35a61",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 338.04,
      "commitsBetweenForRepo": 2271,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,32 @@\n-  public String toString() {\n-    StringBuffer pTree \u003d new StringBuffer(\"[ \");\n-    for (String p : processTree.keySet()) {\n-      pTree.append(p);\n-      pTree.append(\" \");\n-    }\n-    return pTree.substring(0, pTree.length()) + \"]\";\n-  }\n\\ No newline at end of file\n+    public String toString() {\n+      StringBuilder sb \u003d new StringBuilder();\n+      sb.append(\"\\t\").append(this.getName()).append(\"\\n\");\n+      sb.append(\"\\t\").append(MemInfo.SIZE.name + \":\" + this.getSize())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\").append(MemInfo.PSS.name + \":\" + this.getPss())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\").append(MemInfo.RSS.name + \":\" + this.getRss())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\")\n+        .append(MemInfo.SHARED_CLEAN.name + \":\" + this.getSharedClean())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\")\n+        .append(MemInfo.SHARED_DIRTY.name + \":\" + this.getSharedDirty())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\")\n+        .append(MemInfo.PRIVATE_CLEAN.name + \":\" + this.getPrivateClean())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\")\n+        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\")\n+        .append(MemInfo.REFERENCED.name + \":\" + this.getReferenced())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\")\n+        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n+        .append(\" kB\\n\");\n+      sb.append(\"\\t\")\n+        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n+        .append(\" kB\\n\");\n+      return sb.toString();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public String toString() {\n      StringBuilder sb \u003d new StringBuilder();\n      sb.append(\"\\t\").append(this.getName()).append(\"\\n\");\n      sb.append(\"\\t\").append(MemInfo.SIZE.name + \":\" + this.getSize())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\").append(MemInfo.PSS.name + \":\" + this.getPss())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\").append(MemInfo.RSS.name + \":\" + this.getRss())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.SHARED_CLEAN.name + \":\" + this.getSharedClean())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.SHARED_DIRTY.name + \":\" + this.getSharedDirty())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_CLEAN.name + \":\" + this.getPrivateClean())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.REFERENCED.name + \":\" + this.getReferenced())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n        .append(\" kB\\n\");\n      sb.append(\"\\t\")\n        .append(MemInfo.PRIVATE_DIRTY.name + \":\" + this.getPrivateDirty())\n        .append(\" kB\\n\");\n      return sb.toString();\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String toString() {\n    StringBuffer pTree \u003d new StringBuffer(\"[ \");\n    for (String p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
      }
    },
    "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3583. Change pid to String and stime to BigInteger in order to handle integers larger than Long.MAX_VALUE.  Contributed by Zhihong Yu\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1245828 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/02/12 5:12 PM",
      "commitName": "b4c8567e1b975ccf32dfc1f63aadb78ac29f2c69",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "29/08/11 4:27 PM",
      "commitNameOld": "fb6ecb9b27798a923ca290ba5d23368e3a820a6c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 172.07,
      "commitsBetweenForRepo": 1095,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   public String toString() {\n     StringBuffer pTree \u003d new StringBuffer(\"[ \");\n-    for (Integer p : processTree.keySet()) {\n+    for (String p : processTree.keySet()) {\n       pTree.append(p);\n       pTree.append(\" \");\n     }\n     return pTree.substring(0, pTree.length()) + \"]\";\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    StringBuffer pTree \u003d new StringBuffer(\"[ \");\n    for (String p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String toString() {\n    StringBuffer pTree \u003d new StringBuffer(\"[ \");\n    for (Integer p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,8 @@\n+  public String toString() {\n+    StringBuffer pTree \u003d new StringBuffer(\"[ \");\n+    for (Integer p : processTree.keySet()) {\n+      pTree.append(p);\n+      pTree.append(\" \");\n+    }\n+    return pTree.substring(0, pTree.length()) + \"]\";\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String toString() {\n    StringBuffer pTree \u003d new StringBuffer(\"[ \");\n    for (Integer p : processTree.keySet()) {\n      pTree.append(p);\n      pTree.append(\" \");\n    }\n    return pTree.substring(0, pTree.length()) + \"]\";\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/ProcfsBasedProcessTree.java"
    }
  }
}