{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "doneApplication",
  "functionId": "doneApplication___applicationId-ApplicationId__finalState-RMAppState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 1103,
  "functionEndLine": 1127,
  "numCommitsSeen": 239,
  "timeTaken": 7849,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "f677175f35f68bde9df72e648dffacbd31cfd620",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "f677175f35f68bde9df72e648dffacbd31cfd620": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/03/20 12:25 AM",
      "commitNameOld": "f2d3ac2a3f27a849e00f529c5c2df6ef0bd82911",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void doneApplication(ApplicationId applicationId,\n       RMAppState finalState) {\n     writeLock.lock();\n     try {\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationId);\n       if (application \u003d\u003d null) {\n         // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n         // apps, ignore it.\n         LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n         return;\n       }\n       CSQueue queue \u003d (CSQueue) application.getQueue();\n       if (!(queue instanceof LeafQueue)) {\n         LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n-            .getQueueName());\n+            .getQueuePath());\n       } else{\n         queue.finishApplication(applicationId, application.getUser());\n       }\n       application.stop(finalState);\n       applications.remove(applicationId);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationId);\n      if (application \u003d\u003d null) {\n        // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n        // apps, ignore it.\n        LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n            .getQueuePath());\n      } else{\n        queue.finishApplication(applicationId, application.getUser());\n      }\n      application.stop(finalState);\n      applications.remove(applicationId);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private void doneApplication(ApplicationId applicationId,\n       RMAppState finalState) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n           applicationId);\n       if (application \u003d\u003d null) {\n         // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n         // apps, ignore it.\n         LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n         return;\n       }\n       CSQueue queue \u003d (CSQueue) application.getQueue();\n       if (!(queue instanceof LeafQueue)) {\n         LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n             .getQueueName());\n       } else{\n         queue.finishApplication(applicationId, application.getUser());\n       }\n       application.stop(finalState);\n       applications.remove(applicationId);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    writeLock.lock();\n    try {\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationId);\n      if (application \u003d\u003d null) {\n        // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n        // apps, ignore it.\n        LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n            .getQueueName());\n      } else{\n        queue.finishApplication(applicationId, application.getUser());\n      }\n      application.stop(finalState);\n      applications.remove(applicationId);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-  private synchronized void doneApplication(ApplicationId applicationId,\n+  private void doneApplication(ApplicationId applicationId,\n       RMAppState finalState) {\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        applications.get(applicationId);\n-    if (application \u003d\u003d null){\n-      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n-      // ignore it.\n-      LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n-      return;\n+    try {\n+      writeLock.lock();\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n+          applicationId);\n+      if (application \u003d\u003d null) {\n+        // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n+        // apps, ignore it.\n+        LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n+        return;\n+      }\n+      CSQueue queue \u003d (CSQueue) application.getQueue();\n+      if (!(queue instanceof LeafQueue)) {\n+        LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n+            .getQueueName());\n+      } else{\n+        queue.finishApplication(applicationId, application.getUser());\n+      }\n+      application.stop(finalState);\n+      applications.remove(applicationId);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    CSQueue queue \u003d (CSQueue) application.getQueue();\n-    if (!(queue instanceof LeafQueue)) {\n-      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n-          + queue.getQueueName());\n-    } else {\n-      queue.finishApplication(applicationId, application.getUser());\n-    }\n-    application.stop(finalState);\n-    applications.remove(applicationId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationId);\n      if (application \u003d\u003d null) {\n        // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n        // apps, ignore it.\n        LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n            .getQueueName());\n      } else{\n        queue.finishApplication(applicationId, application.getUser());\n      }\n      application.stop(finalState);\n      applications.remove(applicationId);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,25 @@\n-  private synchronized void doneApplication(ApplicationId applicationId,\n+  private void doneApplication(ApplicationId applicationId,\n       RMAppState finalState) {\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        applications.get(applicationId);\n-    if (application \u003d\u003d null){\n-      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n-      // ignore it.\n-      LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n-      return;\n+    try {\n+      writeLock.lock();\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n+          applicationId);\n+      if (application \u003d\u003d null) {\n+        // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n+        // apps, ignore it.\n+        LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n+        return;\n+      }\n+      CSQueue queue \u003d (CSQueue) application.getQueue();\n+      if (!(queue instanceof LeafQueue)) {\n+        LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n+            .getQueueName());\n+      } else{\n+        queue.finishApplication(applicationId, application.getUser());\n+      }\n+      application.stop(finalState);\n+      applications.remove(applicationId);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    CSQueue queue \u003d (CSQueue) application.getQueue();\n-    if (!(queue instanceof LeafQueue)) {\n-      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n-          + queue.getQueueName());\n-    } else {\n-      queue.finishApplication(applicationId, application.getUser());\n-    }\n-    application.stop(finalState);\n-    applications.remove(applicationId);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    try {\n      writeLock.lock();\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d applications.get(\n          applicationId);\n      if (application \u003d\u003d null) {\n        // The AppRemovedSchedulerEvent maybe sent on recovery for completed\n        // apps, ignore it.\n        LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n        return;\n      }\n      CSQueue queue \u003d (CSQueue) application.getQueue();\n      if (!(queue instanceof LeafQueue)) {\n        LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \" + queue\n            .getQueueName());\n      } else{\n        queue.finishApplication(applicationId, application.getUser());\n      }\n      application.stop(finalState);\n      applications.remove(applicationId);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 7:53 PM",
      "commitNameOld": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 65.11,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private synchronized void doneApplication(ApplicationId applicationId,\n       RMAppState finalState) {\n-    SchedulerApplication application \u003d applications.get(applicationId);\n+    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n+        applications.get(applicationId);\n     if (application \u003d\u003d null){\n       // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n       // ignore it.\n       LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n       return;\n     }\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queue.getQueueName());\n     } else {\n       queue.finishApplication(applicationId, application.getUser());\n     }\n     application.stop(finalState);\n     applications.remove(applicationId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        applications.get(applicationId);\n    if (application \u003d\u003d null){\n      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n      // ignore it.\n      LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n      return;\n    }\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queue.getQueueName());\n    } else {\n      queue.finishApplication(applicationId, application.getUser());\n    }\n    application.stop(finalState);\n    applications.remove(applicationId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f677175f35f68bde9df72e648dffacbd31cfd620": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1166. Fixed app-specific and attempt-specific QueueMetrics to be triggered by accordingly app event and attempt event. Contributed by Zhijie Shen\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557296 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 5:15 PM",
      "commitName": "f677175f35f68bde9df72e648dffacbd31cfd620",
      "commitAuthor": "Jian He",
      "commitDateOld": "10/01/14 7:04 AM",
      "commitNameOld": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.42,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,19 @@\n   private synchronized void doneApplication(ApplicationId applicationId,\n       RMAppState finalState) {\n     SchedulerApplication application \u003d applications.get(applicationId);\n     if (application \u003d\u003d null){\n       // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n       // ignore it.\n+      LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n       return;\n     }\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queue.getQueueName());\n     } else {\n       queue.finishApplication(applicationId, application.getUser());\n     }\n+    application.stop(finalState);\n     applications.remove(applicationId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    SchedulerApplication application \u003d applications.get(applicationId);\n    if (application \u003d\u003d null){\n      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n      // ignore it.\n      LOG.warn(\"Couldn\u0027t find application \" + applicationId);\n      return;\n    }\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queue.getQueueName());\n    } else {\n      queue.finishApplication(applicationId, application.getUser());\n    }\n    application.stop(finalState);\n    applications.remove(applicationId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n   private synchronized void doneApplication(ApplicationId applicationId,\n       RMAppState finalState) {\n     SchedulerApplication application \u003d applications.get(applicationId);\n     if (application \u003d\u003d null){\n-      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps.\n+      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n+      // ignore it.\n       return;\n     }\n     CSQueue queue \u003d (CSQueue) application.getQueue();\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n           + queue.getQueueName());\n     } else {\n       queue.finishApplication(applicationId, application.getUser());\n     }\n     applications.remove(applicationId);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    SchedulerApplication application \u003d applications.get(applicationId);\n    if (application \u003d\u003d null){\n      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps,\n      // ignore it.\n      return;\n    }\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queue.getQueueName());\n    } else {\n      queue.finishApplication(applicationId, application.getUser());\n    }\n    applications.remove(applicationId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,16 @@\n+  private synchronized void doneApplication(ApplicationId applicationId,\n+      RMAppState finalState) {\n+    SchedulerApplication application \u003d applications.get(applicationId);\n+    if (application \u003d\u003d null){\n+      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps.\n+      return;\n+    }\n+    CSQueue queue \u003d (CSQueue) application.getQueue();\n+    if (!(queue instanceof LeafQueue)) {\n+      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n+          + queue.getQueueName());\n+    } else {\n+      queue.finishApplication(applicationId, application.getUser());\n+    }\n+    applications.remove(applicationId);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void doneApplication(ApplicationId applicationId,\n      RMAppState finalState) {\n    SchedulerApplication application \u003d applications.get(applicationId);\n    if (application \u003d\u003d null){\n      // The AppRemovedSchedulerEvent maybe sent on recovery for completed apps.\n      return;\n    }\n    CSQueue queue \u003d (CSQueue) application.getQueue();\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"Cannot finish application \" + \"from non-leaf queue: \"\n          + queue.getQueueName());\n    } else {\n      queue.finishApplication(applicationId, application.getUser());\n    }\n    applications.remove(applicationId);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}