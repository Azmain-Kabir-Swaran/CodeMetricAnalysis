{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RLESparseResourceAllocation.java",
  "functionName": "getMinimumCapacityInInterval",
  "functionId": "getMinimumCapacityInInterval___interval-ReservationInterval",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
  "functionStartLine": 579,
  "functionEndLine": 595,
  "numCommitsSeen": 11,
  "timeTaken": 3089,
  "changeHistory": [
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
    "e3345e985bff93c6c74a76747e45376c6027f42c",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
    "6bf42e48ef658bf6dd86ebd706562ce7cc06216a"
  ],
  "changeHistoryShort": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": "Ybodychange",
    "e3345e985bff93c6c74a76747e45376c6027f42c": "Ybodychange",
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": "Ybodychange",
    "6bf42e48ef658bf6dd86ebd706562ce7cc06216a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5328. Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "06/09/17 4:46 PM",
      "commitName": "b6e7d1369690eaf50ce9ea7968f91a72ecb74de0",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "06/09/17 4:39 PM",
      "commitNameOld": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n-    Resource minCapacity \u003d Resource.newInstance(\n-        Integer.MAX_VALUE, Integer.MAX_VALUE);\n+    Resource minCapacity \u003d\n+        Resource.newInstance(Integer.MAX_VALUE, Integer.MAX_VALUE);\n     long start \u003d interval.getStartTime();\n     long end \u003d interval.getEndTime();\n     NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n-        this.getRangeOverlapping(start, end).getCumulative();\n+        getRangeOverlapping(start, end).getCumulative();\n     if (!capacityRange.isEmpty()) {\n       for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n         if (entry.getValue() !\u003d null) {\n-          minCapacity \u003d Resources.componentwiseMin(minCapacity,\n-              entry.getValue());\n+          minCapacity \u003d\n+              Resources.componentwiseMin(minCapacity, entry.getValue());\n         }\n       }\n     }\n     return minCapacity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n    Resource minCapacity \u003d\n        Resource.newInstance(Integer.MAX_VALUE, Integer.MAX_VALUE);\n    long start \u003d interval.getStartTime();\n    long end \u003d interval.getEndTime();\n    NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n        getRangeOverlapping(start, end).getCumulative();\n    if (!capacityRange.isEmpty()) {\n      for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n        if (entry.getValue() !\u003d null) {\n          minCapacity \u003d\n              Resources.componentwiseMin(minCapacity, entry.getValue());\n        }\n      }\n    }\n    return minCapacity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
      "extendedDetails": {}
    },
    "e3345e985bff93c6c74a76747e45376c6027f42c": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\"\n\nThis reverts commit 7996eca7dcfaa1bdf970e32022274f2699bef8a1.\n",
      "commitDate": "06/09/17 4:39 PM",
      "commitName": "e3345e985bff93c6c74a76747e45376c6027f42c",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/09/17 3:16 PM",
      "commitNameOld": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 5.06,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n-    Resource minCapacity \u003d\n-        Resource.newInstance(Integer.MAX_VALUE, Integer.MAX_VALUE);\n+    Resource minCapacity \u003d Resource.newInstance(\n+        Integer.MAX_VALUE, Integer.MAX_VALUE);\n     long start \u003d interval.getStartTime();\n     long end \u003d interval.getEndTime();\n     NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n-        getRangeOverlapping(start, end).getCumulative();\n+        this.getRangeOverlapping(start, end).getCumulative();\n     if (!capacityRange.isEmpty()) {\n       for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n         if (entry.getValue() !\u003d null) {\n-          minCapacity \u003d\n-              Resources.componentwiseMin(minCapacity, entry.getValue());\n+          minCapacity \u003d Resources.componentwiseMin(minCapacity,\n+              entry.getValue());\n         }\n       }\n     }\n     return minCapacity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n    Resource minCapacity \u003d Resource.newInstance(\n        Integer.MAX_VALUE, Integer.MAX_VALUE);\n    long start \u003d interval.getStartTime();\n    long end \u003d interval.getEndTime();\n    NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n        this.getRangeOverlapping(start, end).getCumulative();\n    if (!capacityRange.isEmpty()) {\n      for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n        if (entry.getValue() !\u003d null) {\n          minCapacity \u003d Resources.componentwiseMin(minCapacity,\n              entry.getValue());\n        }\n      }\n    }\n    return minCapacity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
      "extendedDetails": {}
    },
    "7996eca7dcfaa1bdf970e32022274f2699bef8a1": {
      "type": "Ybodychange",
      "commitMessage": "Plan/ResourceAllocation data structure enhancements required to support recurring reservations in ReservationSystem.\n",
      "commitDate": "01/09/17 3:16 PM",
      "commitName": "7996eca7dcfaa1bdf970e32022274f2699bef8a1",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "01/05/17 6:48 PM",
      "commitNameOld": "6bf42e48ef658bf6dd86ebd706562ce7cc06216a",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 122.85,
      "commitsBetweenForRepo": 772,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n-    Resource minCapacity \u003d Resource.newInstance(\n-        Integer.MAX_VALUE, Integer.MAX_VALUE);\n+    Resource minCapacity \u003d\n+        Resource.newInstance(Integer.MAX_VALUE, Integer.MAX_VALUE);\n     long start \u003d interval.getStartTime();\n     long end \u003d interval.getEndTime();\n     NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n-        this.getRangeOverlapping(start, end).getCumulative();\n+        getRangeOverlapping(start, end).getCumulative();\n     if (!capacityRange.isEmpty()) {\n       for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n         if (entry.getValue() !\u003d null) {\n-          minCapacity \u003d Resources.componentwiseMin(minCapacity,\n-              entry.getValue());\n+          minCapacity \u003d\n+              Resources.componentwiseMin(minCapacity, entry.getValue());\n         }\n       }\n     }\n     return minCapacity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n    Resource minCapacity \u003d\n        Resource.newInstance(Integer.MAX_VALUE, Integer.MAX_VALUE);\n    long start \u003d interval.getStartTime();\n    long end \u003d interval.getEndTime();\n    NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n        getRangeOverlapping(start, end).getCumulative();\n    if (!capacityRange.isEmpty()) {\n      for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n        if (entry.getValue() !\u003d null) {\n          minCapacity \u003d\n              Resources.componentwiseMin(minCapacity, entry.getValue());\n        }\n      }\n    }\n    return minCapacity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java",
      "extendedDetails": {}
    },
    "6bf42e48ef658bf6dd86ebd706562ce7cc06216a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5331. Extend RLESparseResourceAllocation with period for supporting recurring reservations in YARN ReservationSystem. (Sangeetha Abdu Jyothi via Subru).\n",
      "commitDate": "01/05/17 6:48 PM",
      "commitName": "6bf42e48ef658bf6dd86ebd706562ce7cc06216a",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,17 @@\n+  public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n+    Resource minCapacity \u003d Resource.newInstance(\n+        Integer.MAX_VALUE, Integer.MAX_VALUE);\n+    long start \u003d interval.getStartTime();\n+    long end \u003d interval.getEndTime();\n+    NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n+        this.getRangeOverlapping(start, end).getCumulative();\n+    if (!capacityRange.isEmpty()) {\n+      for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n+        if (entry.getValue() !\u003d null) {\n+          minCapacity \u003d Resources.componentwiseMin(minCapacity,\n+              entry.getValue());\n+        }\n+      }\n+    }\n+    return minCapacity;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMinimumCapacityInInterval(ReservationInterval interval) {\n    Resource minCapacity \u003d Resource.newInstance(\n        Integer.MAX_VALUE, Integer.MAX_VALUE);\n    long start \u003d interval.getStartTime();\n    long end \u003d interval.getEndTime();\n    NavigableMap\u003cLong, Resource\u003e capacityRange \u003d\n        this.getRangeOverlapping(start, end).getCumulative();\n    if (!capacityRange.isEmpty()) {\n      for (Map.Entry\u003cLong, Resource\u003e entry : capacityRange.entrySet()) {\n        if (entry.getValue() !\u003d null) {\n          minCapacity \u003d Resources.componentwiseMin(minCapacity,\n              entry.getValue());\n        }\n      }\n    }\n    return minCapacity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/RLESparseResourceAllocation.java"
    }
  }
}