{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "init",
  "functionId": "init___context-Context",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 294,
  "functionEndLine": 346,
  "numCommitsSeen": 210,
  "timeTaken": 9955,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
    "46b7054fa7eae9129c21c9f3dc70acff46bfdc41",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
    "f76f5c0919cdb0b032edb309d137093952e77268",
    "9ee0e3172ed20b951b458cbbdc4799675f2a2a51",
    "059caf99891943d9587cac19b48e82efbed06b2d",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
    "8d5929308998869933982bd425102c3a9488ee8f",
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "a100be685cc4521e9949589948219231aa5d2733",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "c56e05196190f172e9c8cdcd9d59d09950f1419b"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe": "Ybodychange",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ymultichange(Yparameterchange,Ybodychange)",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Ybodychange",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "46b7054fa7eae9129c21c9f3dc70acff46bfdc41": "Ybodychange",
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": "Ybodychange",
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": "Ybodychange",
    "f76f5c0919cdb0b032edb309d137093952e77268": "Ybodychange",
    "9ee0e3172ed20b951b458cbbdc4799675f2a2a51": "Ybodychange",
    "059caf99891943d9587cac19b48e82efbed06b2d": "Ybodychange",
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": "Ybodychange",
    "8d5929308998869933982bd425102c3a9488ee8f": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "a100be685cc4521e9949589948219231aa5d2733": "Ybodychange",
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": "Ybodychange",
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "c56e05196190f172e9c8cdcd9d59d09950f1419b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void init(Context context) throws IOException {\n     Configuration conf \u003d super.getConf();\n     this.nmContext \u003d context;\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n-      LOG.warn(\"Exit code from container executor initialization is : \"\n-          + exitCode, e);\n+      LOG.warn(\"Exit code from container executor initialization is : {}\",\n+          exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf, nmContext);\n       LOG.debug(\"Resource handler chain enabled \u003d {}\",\n           (resourceHandlerChain !\u003d null));\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain: {}\",\n             resourceHandlerChain);\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf, nmContext);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException {\n    Configuration conf \u003d super.getConf();\n    this.nmContext \u003d context;\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : {}\",\n          exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      LOG.debug(\"Resource handler chain enabled \u003d {}\",\n          (resourceHandlerChain !\u003d null));\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain: {}\",\n            resourceHandlerChain);\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf, nmContext);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/02/19 11:45 AM",
      "commitNameOld": "95372657fc25c02399b01793833021ccf88dada2",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 18.15,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,53 @@\n   public void init(Context context) throws IOException {\n     Configuration conf \u003d super.getConf();\n     this.nmContext \u003d context;\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf, nmContext);\n-      if (LOG.isDebugEnabled()) {\n-        final boolean enabled \u003d resourceHandlerChain !\u003d null;\n-        LOG.debug(\"Resource handler chain enabled \u003d \" + enabled);\n-      }\n+      LOG.debug(\"Resource handler chain enabled \u003d {}\",\n+          (resourceHandlerChain !\u003d null));\n       if (resourceHandlerChain !\u003d null) {\n-        LOG.debug(\"Bootstrapping resource handler chain: \" +\n+        LOG.debug(\"Bootstrapping resource handler chain: {}\",\n             resourceHandlerChain);\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf, nmContext);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException {\n    Configuration conf \u003d super.getConf();\n    this.nmContext \u003d context;\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      LOG.debug(\"Resource handler chain enabled \u003d {}\",\n          (resourceHandlerChain !\u003d null));\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain: {}\",\n            resourceHandlerChain);\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf, nmContext);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9087. Improve logging for initialization of Resource plugins. (Contributed by Szilard Nemeth)\n",
      "commitDate": "10/12/18 11:12 AM",
      "commitName": "ac578c0e82a5ba24bf59e9e58f91a3eb65c60cfe",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "14/11/18 12:22 PM",
      "commitNameOld": "21ec4bdaef4b68adbbf4f33a6f74494c074f803c",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 25.95,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,55 @@\n   public void init(Context context) throws IOException {\n     Configuration conf \u003d super.getConf();\n     this.nmContext \u003d context;\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf, nmContext);\n       if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n-            !\u003d null));\n+        final boolean enabled \u003d resourceHandlerChain !\u003d null;\n+        LOG.debug(\"Resource handler chain enabled \u003d \" + enabled);\n       }\n       if (resourceHandlerChain !\u003d null) {\n-        LOG.debug(\"Bootstrapping resource handler chain\");\n+        LOG.debug(\"Bootstrapping resource handler chain: \" +\n+            resourceHandlerChain);\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf, nmContext);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context context) throws IOException {\n    Configuration conf \u003d super.getConf();\n    this.nmContext \u003d context;\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      if (LOG.isDebugEnabled()) {\n        final boolean enabled \u003d resourceHandlerChain !\u003d null;\n        LOG.debug(\"Resource handler chain enabled \u003d \" + enabled);\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain: \" +\n            resourceHandlerChain);\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf, nmContext);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
          "commitDate": "20/04/18 10:49 AM",
          "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "10/04/18 4:25 PM",
          "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n-  public void init(Context nmContext) throws IOException {\n+  public void init(Context context) throws IOException {\n     Configuration conf \u003d super.getConf();\n+    this.nmContext \u003d context;\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf, nmContext);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             !\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf, nmContext);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Context context) throws IOException {\n    Configuration conf \u003d super.getConf();\n    this.nmContext \u003d context;\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            !\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf, nmContext);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[nmContext-Context]",
            "newValue": "[context-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
          "commitDate": "20/04/18 10:49 AM",
          "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "10/04/18 4:25 PM",
          "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 9.77,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,54 @@\n-  public void init(Context nmContext) throws IOException {\n+  public void init(Context context) throws IOException {\n     Configuration conf \u003d super.getConf();\n+    this.nmContext \u003d context;\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf, nmContext);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             !\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf, nmContext);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Context context) throws IOException {\n    Configuration conf \u003d super.getConf();\n    this.nmContext \u003d context;\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            !\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf, nmContext);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "commitDateOld": "11/10/17 11:14 AM",
      "commitNameOld": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 17.48,
      "commitsBetweenForRepo": 104,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void init(Context nmContext) throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf, nmContext);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             !\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n-        runtime.initialize(conf);\n+        runtime.initialize(conf, nmContext);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(Context nmContext) throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            !\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf, nmContext);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
      "commitDate": "11/10/17 11:14 AM",
      "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
          "commitDate": "11/10/17 11:14 AM",
          "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
          "commitAuthor": "Sunil G",
          "commitDateOld": "02/10/17 7:04 PM",
          "commitNameOld": "7eb8499996869cdb63743f1c9eca2ba91d57ad08",
          "commitAuthorOld": "Sidharta S",
          "daysBetweenCommits": 8.67,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  public void init() throws IOException {\n+  public void init(Context nmContext) throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n-          .getConfiguredResourceHandlerChain(conf);\n+          .getConfiguredResourceHandlerChain(conf, nmContext);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             !\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Context nmContext) throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            !\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[nmContext-Context]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
          "commitDate": "11/10/17 11:14 AM",
          "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
          "commitAuthor": "Sunil G",
          "commitDateOld": "02/10/17 7:04 PM",
          "commitNameOld": "7eb8499996869cdb63743f1c9eca2ba91d57ad08",
          "commitAuthorOld": "Sidharta S",
          "daysBetweenCommits": 8.67,
          "commitsBetweenForRepo": 95,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,53 @@\n-  public void init() throws IOException {\n+  public void init(Context nmContext) throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n-          .getConfiguredResourceHandlerChain(conf);\n+          .getConfiguredResourceHandlerChain(conf, nmContext);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             !\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(Context nmContext) throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf, nmContext);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            !\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "46b7054fa7eae9129c21c9f3dc70acff46bfdc41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6951. Fix debug log when Resource Handler chain is enabled. Contributed by Yang Wang.\n",
      "commitDate": "07/08/17 12:45 AM",
      "commitName": "46b7054fa7eae9129c21c9f3dc70acff46bfdc41",
      "commitAuthor": "Sunil G",
      "commitDateOld": "13/07/17 3:44 PM",
      "commitNameOld": "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 24.38,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void init() throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n-            \u003d\u003d null));\n+            !\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            !\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:44 PM",
      "commitName": "ebc048cc055d0f7d1b85bc0b6f56cd15673e837d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:42 PM",
      "commitNameOld": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void init() throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(conf);\n+          getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             \u003d\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            \u003d\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "0ffca5d347df0acb1979dff7a07ae88ea834adc7": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\"\n\nThis reverts commit f76f5c0919cdb0b032edb309d137093952e77268.\n",
      "commitDate": "13/07/17 3:42 PM",
      "commitName": "0ffca5d347df0acb1979dff7a07ae88ea834adc7",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/07/17 3:38 PM",
      "commitNameOld": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void init() throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          getPrivilegedOperationExecutor();\n+          PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             \u003d\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            \u003d\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "f76f5c0919cdb0b032edb309d137093952e77268": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6805. NPE in LinuxContainerExecutor due to null PrivilegedOperationException exit code. Contributed by Jason Lowe\n",
      "commitDate": "13/07/17 3:38 PM",
      "commitName": "f76f5c0919cdb0b032edb309d137093952e77268",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/05/17 10:46 AM",
      "commitNameOld": "74a61438ca01e2191b54000af73b654a2d0b8253",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 64.2,
      "commitsBetweenForRepo": 304,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void init() throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n-          PrivilegedOperationExecutor.getInstance(conf);\n+          getPrivilegedOperationExecutor();\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             \u003d\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          getPrivilegedOperationExecutor();\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            \u003d\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "9ee0e3172ed20b951b458cbbdc4799675f2a2a51": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5822. Log ContainerRuntime initialization error in LinuxContainerExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "03/11/16 10:03 AM",
      "commitName": "9ee0e3172ed20b951b458cbbdc4799675f2a2a51",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "06/09/16 7:31 AM",
      "commitNameOld": "e6fcfe28e304062c7d09231db757acb2953703ce",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 58.11,
      "commitsBetweenForRepo": 453,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public void init() throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             \u003d\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n+      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            \u003d\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Failed to initialize linux container runtime(s)!\", e);\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "059caf99891943d9587cac19b48e82efbed06b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4744. Too many signal to container failure in case of LCE. Contributed by Sidharta Seethana\n",
      "commitDate": "07/03/16 7:40 AM",
      "commitName": "059caf99891943d9587cac19b48e82efbed06b2d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "25/01/16 4:19 PM",
      "commitNameOld": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthorOld": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "daysBetweenCommits": 41.64,
      "commitsBetweenForRepo": 283,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,52 @@\n   public void init() throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n-          PrivilegedOperation.OperationType.CHECK_SETUP, (String) null);\n+          PrivilegedOperation.OperationType.CHECK_SETUP);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n             \u003d\u003d null));\n       }\n       if (resourceHandlerChain !\u003d null) {\n         LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            \u003d\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "2085e60a9655b59aa2ba8917acdc511ab71ff6e4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3542. Refactored existing CPU cgroups support to use the newer and integrated ResourceHandler mechanism, and also deprecated the old LCEResourceHandler inteface hierarchy. Contributed by Varun Vasudev.\n",
      "commitDate": "25/01/16 4:19 PM",
      "commitName": "2085e60a9655b59aa2ba8917acdc511ab71ff6e4",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "22/01/16 1:13 AM",
      "commitNameOld": "b41a7e89d1eb8650975ac7092532ed9563ac60f2",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 3.63,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,52 @@\n   public void init() throws IOException {\n     Configuration conf \u003d super.getConf();\n \n     // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n     try {\n       PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.CHECK_SETUP, (String) null);\n       PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n           PrivilegedOperationExecutor.getInstance(conf);\n \n       privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n           false);\n     } catch (PrivilegedOperationException e) {\n       int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n \n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n+            \u003d\u003d null));\n+      }\n       if (resourceHandlerChain !\u003d null) {\n+        LOG.debug(\"Bootstrapping resource handler chain\");\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\n           \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n       throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP, (String) null);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resource handler chain enabled \u003d \" + (resourceHandlerChain\n            \u003d\u003d null));\n      }\n      if (resourceHandlerChain !\u003d null) {\n        LOG.debug(\"Bootstrapping resource handler chain\");\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "8d5929308998869933982bd425102c3a9488ee8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4253. Standardize on using PrivilegedOperationExecutor for all invocations of container-executor in LinuxContainerExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "14/10/15 2:28 AM",
      "commitName": "8d5929308998869933982bd425102c3a9488ee8f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "11/09/15 2:07 AM",
      "commitNameOld": "486d5cb803efec7b4db445ee65a3df83392940a3",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 33.01,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n-  public void init() throws IOException {        \n-    // Send command to executor which will just start up, \n+  public void init() throws IOException {\n+    Configuration conf \u003d super.getConf();\n+\n+    // Send command to executor which will just start up,\n     // verify configuration/permissions and exit\n-    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n-        Arrays.asList(containerExecutorExe,\n-            \"--checksetup\"));\n-    String[] commandArray \u003d command.toArray(new String[command.size()]);\n-    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n-    }\n     try {\n-      shExec.execute();\n-    } catch (ExitCodeException e) {\n-      int exitCode \u003d shExec.getExitCode();\n+      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n+          PrivilegedOperation.OperationType.CHECK_SETUP, (String) null);\n+      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n+          PrivilegedOperationExecutor.getInstance(conf);\n+\n+      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n+          false);\n+    } catch (PrivilegedOperationException e) {\n+      int exitCode \u003d e.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n-      logOutput(shExec.getOutput());\n+\n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n-    Configuration conf \u003d super.getConf();\n-\n     try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (resourceHandlerChain !\u003d null) {\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n-      throw new IOException(\"Failed to bootstrap configured resource subsystems!\");\n+      throw new IOException(\n+          \"Failed to bootstrap configured resource subsystems!\");\n     }\n \n     try {\n       if (linuxContainerRuntime \u003d\u003d null) {\n         LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n \n         runtime.initialize(conf);\n         this.linuxContainerRuntime \u003d runtime;\n       }\n     } catch (ContainerExecutionException e) {\n-     throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n+      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n     }\n \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {\n    Configuration conf \u003d super.getConf();\n\n    // Send command to executor which will just start up,\n    // verify configuration/permissions and exit\n    try {\n      PrivilegedOperation checkSetupOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.CHECK_SETUP, (String) null);\n      PrivilegedOperationExecutor privilegedOperationExecutor \u003d\n          PrivilegedOperationExecutor.getInstance(conf);\n\n      privilegedOperationExecutor.executePrivilegedOperation(checkSetupOp,\n          false);\n    } catch (PrivilegedOperationException e) {\n      int exitCode \u003d e.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (resourceHandlerChain !\u003d null) {\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\n          \"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n      throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "07/07/15 4:29 AM",
      "commitNameOld": "c40bdb56a79fe1499c2284d493edc84620c0c078",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 20.31,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,48 @@\n   public void init() throws IOException {        \n     // Send command to executor which will just start up, \n     // verify configuration/permissions and exit\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n             \"--checksetup\"));\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n \n-    try {\n-      Configuration conf \u003d super.getConf();\n+    Configuration conf \u003d super.getConf();\n \n+    try {\n       resourceHandlerChain \u003d ResourceHandlerModule\n           .getConfiguredResourceHandlerChain(conf);\n       if (resourceHandlerChain !\u003d null) {\n         resourceHandlerChain.bootstrap(conf);\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n       throw new IOException(\"Failed to bootstrap configured resource subsystems!\");\n     }\n \n+    try {\n+      if (linuxContainerRuntime \u003d\u003d null) {\n+        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n+\n+        runtime.initialize(conf);\n+        this.linuxContainerRuntime \u003d runtime;\n+      }\n+    } catch (ContainerExecutionException e) {\n+     throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n+    }\n+\n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {        \n    // Send command to executor which will just start up, \n    // verify configuration/permissions and exit\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n            \"--checksetup\"));\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    Configuration conf \u003d super.getConf();\n\n    try {\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (resourceHandlerChain !\u003d null) {\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    try {\n      if (linuxContainerRuntime \u003d\u003d null) {\n        LinuxContainerRuntime runtime \u003d new DelegatingLinuxContainerRuntime();\n\n        runtime.initialize(conf);\n        this.linuxContainerRuntime \u003d runtime;\n      }\n    } catch (ContainerExecutionException e) {\n     throw new IOException(\"Failed to initialize linux container runtime(s)!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "a100be685cc4521e9949589948219231aa5d2733": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3366. Enhanced NodeManager to support classifying/shaping outgoing network bandwidth traffic originating from YARN containers Contributed by Sidharta Seethana.\n",
      "commitDate": "22/04/15 5:26 PM",
      "commitName": "a100be685cc4521e9949589948219231aa5d2733",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/01/15 7:40 AM",
      "commitNameOld": "902c6ea7e4d3b49e49d9ce51ae9d12694ecfcf89",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 86.37,
      "commitsBetweenForRepo": 799,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,37 @@\n   public void init() throws IOException {        \n     // Send command to executor which will just start up, \n     // verify configuration/permissions and exit\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n             \"--checksetup\"));\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container executor initialization is : \"\n           + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n-   \n+\n+    try {\n+      Configuration conf \u003d super.getConf();\n+\n+      resourceHandlerChain \u003d ResourceHandlerModule\n+          .getConfiguredResourceHandlerChain(conf);\n+      if (resourceHandlerChain !\u003d null) {\n+        resourceHandlerChain.bootstrap(conf);\n+      }\n+    } catch (ResourceHandlerException e) {\n+      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n+      throw new IOException(\"Failed to bootstrap configured resource subsystems!\");\n+    }\n+\n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {        \n    // Send command to executor which will just start up, \n    // verify configuration/permissions and exit\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n            \"--checksetup\"));\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n\n    try {\n      Configuration conf \u003d super.getConf();\n\n      resourceHandlerChain \u003d ResourceHandlerModule\n          .getConfiguredResourceHandlerChain(conf);\n      if (resourceHandlerChain !\u003d null) {\n        resourceHandlerChain.bootstrap(conf);\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"Failed to bootstrap configured resource subsystems! \", e);\n      throw new IOException(\"Failed to bootstrap configured resource subsystems!\");\n    }\n\n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "7a29bccd7aaf2eb33adac937379ba6be43a1031d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-814. Improving diagnostics when containers fail during launch due to various reasons like invalid env etc. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504732 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/13 5:28 PM",
      "commitName": "7a29bccd7aaf2eb33adac937379ba6be43a1031d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/05/13 9:13 PM",
      "commitNameOld": "2692675fc3b5046d2ec88542c30203c87e135b70",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 48.84,
      "commitsBetweenForRepo": 322,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public void init() throws IOException {        \n     // Send command to executor which will just start up, \n     // verify configuration/permissions and exit\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n             \"--checksetup\"));\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n-      LOG.warn(\"Exit code from container is : \" + exitCode);\n+      LOG.warn(\"Exit code from container executor initialization is : \"\n+          + exitCode, e);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n    \n     resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {        \n    // Send command to executor which will just start up, \n    // verify configuration/permissions and exit\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n            \"--checksetup\"));\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container executor initialization is : \"\n          + exitCode, e);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n   \n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "5032a694ed250f65ade8c2b62c97b89ab45f53ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3. Add support for CPU isolation/monitoring of containers. (adferguson via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 2:58 PM",
      "commitName": "5032a694ed250f65ade8c2b62c97b89ab45f53ea",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "25/09/12 4:37 PM",
      "commitNameOld": "8912aac81e37a8f49fc21e0e367cd8cb96eea583",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 83.97,
      "commitsBetweenForRepo": 423,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   public void init() throws IOException {        \n     // Send command to executor which will just start up, \n     // verify configuration/permissions and exit\n     List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n         Arrays.asList(containerExecutorExe,\n             \"--checksetup\"));\n     String[] commandArray \u003d command.toArray(new String[command.size()]);\n     ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n     }\n     try {\n       shExec.execute();\n     } catch (ExitCodeException e) {\n       int exitCode \u003d shExec.getExitCode();\n       LOG.warn(\"Exit code from container is : \" + exitCode);\n       logOutput(shExec.getOutput());\n       throw new IOException(\"Linux container executor not configured properly\"\n           + \" (error\u003d\" + exitCode + \")\", e);\n     }\n+   \n+    resourcesHandler.init(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {        \n    // Send command to executor which will just start up, \n    // verify configuration/permissions and exit\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n            \"--checksetup\"));\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n   \n    resourcesHandler.init(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void init() throws IOException {        \n    // Send command to executor which will just start up, \n    // verify configuration/permissions and exit\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n            \"--checksetup\"));\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
      }
    },
    "c56e05196190f172e9c8cdcd9d59d09950f1419b": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3102. Changed NodeManager to fail fast when LinuxContainerExecutor has wrong configuration or permissions. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1202117 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/11/11 2:30 AM",
      "commitName": "c56e05196190f172e9c8cdcd9d59d09950f1419b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public void init() throws IOException {        \n+    // Send command to executor which will just start up, \n+    // verify configuration/permissions and exit\n+    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n+        Arrays.asList(containerExecutorExe,\n+            \"--checksetup\"));\n+    String[] commandArray \u003d command.toArray(new String[command.size()]);\n+    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n+    }\n+    try {\n+      shExec.execute();\n+    } catch (ExitCodeException e) {\n+      int exitCode \u003d shExec.getExitCode();\n+      LOG.warn(\"Exit code from container is : \" + exitCode);\n+      logOutput(shExec.getOutput());\n+      throw new IOException(\"Linux container executor not configured properly\"\n+          + \" (error\u003d\" + exitCode + \")\", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init() throws IOException {        \n    // Send command to executor which will just start up, \n    // verify configuration/permissions and exit\n    List\u003cString\u003e command \u003d new ArrayList\u003cString\u003e(\n        Arrays.asList(containerExecutorExe,\n            \"--checksetup\"));\n    String[] commandArray \u003d command.toArray(new String[command.size()]);\n    ShellCommandExecutor shExec \u003d new ShellCommandExecutor(commandArray);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"checkLinuxExecutorSetup: \" + Arrays.toString(commandArray));\n    }\n    try {\n      shExec.execute();\n    } catch (ExitCodeException e) {\n      int exitCode \u003d shExec.getExitCode();\n      LOG.warn(\"Exit code from container is : \" + exitCode);\n      logOutput(shExec.getOutput());\n      throw new IOException(\"Linux container executor not configured properly\"\n          + \" (error\u003d\" + exitCode + \")\", e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}