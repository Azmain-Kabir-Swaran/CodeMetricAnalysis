{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ResourceManager.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
  "functionStartLine": 268,
  "functionEndLine": 367,
  "numCommitsSeen": 242,
  "timeTaken": 16765,
  "changeHistory": [
    "ed45c13f67da06befcd4a70acb16fcf6d844ef2b",
    "717c853873dd3b9112f5c15059a24655b8654607",
    "9b54dd71863af58c2ef5f2194f5097626b8ef18a",
    "363bd16e314490e31758cc82de584e75cd8357cc",
    "241d985467c4a318fa22a3f3007ee1827c94389c",
    "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2",
    "5d381570f83022b411a8740d58486a7f68ab2af6",
    "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e",
    "c2032e251e86f2c05f6523a0c54f41ac4b6c78df",
    "cbfed0e82f57e96b8d5309e0613057963840554f",
    "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94",
    "a6b06f71797ad1ed9edbcef279bcf7d9e569f955",
    "a6410a542e59acd9827457df4a257a843f785c29",
    "1ff6833bbacf5c4eeaff5e70553ac083a691bb21",
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4",
    "4beff013546dbc29c004a1bad1b019dc9d2b751f",
    "341888a0aa23f24458b4e6e34868794b9735c06a",
    "0928502029ef141759008997335ea2cd836a7154",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "fe7711df98b9dd16259f6534e8461a29f24caadc",
    "606114d6029758f2be130960b8fc3102457406ba",
    "5ee495e6f34faff231ad87ec890188eb63617393",
    "7e4725db41674a74846b9b252a575da23a1a2b11",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
    "29c6c3ed328965a73fe7b68eb29cb30794beef38",
    "d19cfe01642f9582e1fe5d567beb480399c37a01",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "312a7e71001d55f88781e56b331ab1b40a72a980",
    "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72",
    "ca853445e9a31e05278e9dceea9dbed734103f49",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "ed45c13f67da06befcd4a70acb16fcf6d844ef2b": "Ybodychange",
    "717c853873dd3b9112f5c15059a24655b8654607": "Ybodychange",
    "9b54dd71863af58c2ef5f2194f5097626b8ef18a": "Ybodychange",
    "363bd16e314490e31758cc82de584e75cd8357cc": "Ybodychange",
    "241d985467c4a318fa22a3f3007ee1827c94389c": "Ybodychange",
    "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2": "Ybodychange",
    "5d381570f83022b411a8740d58486a7f68ab2af6": "Ybodychange",
    "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e": "Ybodychange",
    "c2032e251e86f2c05f6523a0c54f41ac4b6c78df": "Ybodychange",
    "cbfed0e82f57e96b8d5309e0613057963840554f": "Ybodychange",
    "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94": "Ybodychange",
    "a6b06f71797ad1ed9edbcef279bcf7d9e569f955": "Ybodychange",
    "a6410a542e59acd9827457df4a257a843f785c29": "Ybodychange",
    "1ff6833bbacf5c4eeaff5e70553ac083a691bb21": "Ybodychange",
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4": "Ybodychange",
    "4beff013546dbc29c004a1bad1b019dc9d2b751f": "Ybodychange",
    "341888a0aa23f24458b4e6e34868794b9735c06a": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "fe7711df98b9dd16259f6534e8461a29f24caadc": "Ybodychange",
    "606114d6029758f2be130960b8fc3102457406ba": "Ybodychange",
    "5ee495e6f34faff231ad87ec890188eb63617393": "Ybodychange",
    "7e4725db41674a74846b9b252a575da23a1a2b11": "Ybodychange",
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": "Ybodychange",
    "29c6c3ed328965a73fe7b68eb29cb30794beef38": "Ybodychange",
    "d19cfe01642f9582e1fe5d567beb480399c37a01": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "312a7e71001d55f88781e56b331ab1b40a72a980": "Ybodychange",
    "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72": "Ybodychange",
    "ca853445e9a31e05278e9dceea9dbed734103f49": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5": "Ybodychange",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ed45c13f67da06befcd4a70acb16fcf6d844ef2b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2442. ResourceManager JMX UI does not give HA State. Contributed by Rohith Sharma and Cyrus Jackson.\n",
      "commitDate": "29/10/19 3:24 AM",
      "commitName": "ed45c13f67da06befcd4a70acb16fcf6d844ef2b",
      "commitAuthor": "Abhishek Modi",
      "commitDateOld": "16/10/19 6:13 PM",
      "commitNameOld": "3990ffa0834e6b24314a565a92e92d6e8fa37a1e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 12.38,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,100 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     UserGroupInformation.setConfiguration(conf);\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n+    rmContext.setYarnConfiguration(conf);\n+\n+    rmStatusInfoBean \u003d new RMInfo(this);\n+    rmStatusInfoBean.register();\n \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n-    rmContext.setYarnConfiguration(conf);\n-\n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     registerMXBean();\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    UserGroupInformation.setConfiguration(conf);\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n    rmContext.setYarnConfiguration(conf);\n\n    rmStatusInfoBean \u003d new RMInfo(this);\n    rmStatusInfoBean.register();\n\n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    registerMXBean();\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "717c853873dd3b9112f5c15059a24655b8654607": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9755. Fixed RM failing to start when FileSystemBasedConfigurationProvider is configured.\n           Contributed by Prabhu Joseph\n",
      "commitDate": "27/08/19 10:14 AM",
      "commitName": "717c853873dd3b9112f5c15059a24655b8654607",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "09/08/19 9:55 AM",
      "commitNameOld": "a79564fed0b641f7207f5066500128326a3ac296",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 18.01,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,98 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     UserGroupInformation.setConfiguration(conf);\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n+    // Set HA configuration should be done before login\n+    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n+    if (this.rmContext.isHAEnabled()) {\n+      HAUtil.verifyAndSetConfiguration(this.conf);\n+    }\n+\n+    // Set UGI and do login\n+    // If security is enabled, use login user\n+    // If security is not enabled, use current user\n+    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n+    try {\n+      doSecureLogin();\n+    } catch(IOException ie) {\n+      throw new YarnRuntimeException(\"Failed to login\", ie);\n+    }\n+\n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n-    \n-    // Set HA configuration should be done before login\n-    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n-    if (this.rmContext.isHAEnabled()) {\n-      HAUtil.verifyAndSetConfiguration(this.conf);\n-    }\n-\n-    // Set UGI and do login\n-    // If security is enabled, use login user\n-    // If security is not enabled, use current user\n-    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n-    try {\n-      doSecureLogin();\n-    } catch(IOException ie) {\n-      throw new YarnRuntimeException(\"Failed to login\", ie);\n-    }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     registerMXBean();\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    UserGroupInformation.setConfiguration(conf);\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n\n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    registerMXBean();\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "9b54dd71863af58c2ef5f2194f5097626b8ef18a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9668. UGI conf doesn\u0027t read user overridden configurations on RM and NM startup. (Contributed by Jonathan Hung)\n",
      "commitDate": "11/07/19 1:57 PM",
      "commitName": "9b54dd71863af58c2ef5f2194f5097626b8ef18a",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "01/07/19 11:48 PM",
      "commitNameOld": "e966edd025332394701fe0d2cfa0d76731183aaf",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 9.59,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,98 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n+    UserGroupInformation.setConfiguration(conf);\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     registerMXBean();\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    UserGroupInformation.setConfiguration(conf);\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n\n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    registerMXBean();\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "363bd16e314490e31758cc82de584e75cd8357cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14212. Expose SecurityEnabled boolean field in JMX for other services besides NameNode. Contributed by Adam Antal.\n",
      "commitDate": "14/08/18 5:19 PM",
      "commitName": "363bd16e314490e31758cc82de584e75cd8357cc",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "01/08/18 8:04 PM",
      "commitNameOld": "735b4925569541fb8e65dc0c668ccc2aa2ffb30b",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 12.89,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,97 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n+    registerMXBean();\n+\n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n\n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    registerMXBean();\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "241d985467c4a318fa22a3f3007ee1827c94389c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8145. yarn rmadmin -getGroups doesn\u0027t return updated groups for user. Contributed by Sunil G.\n",
      "commitDate": "18/04/18 1:09 AM",
      "commitName": "241d985467c4a318fa22a3f3007ee1827c94389c",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "06/04/18 9:24 PM",
      "commitNameOld": "d4e63ccca0763b452e4a0169dd932b3f32066281",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.16,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,95 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n-    // Refresh user to group mappings during init.\n-    refreshUserToGroupMappingsWithConf();\n-\n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n\n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8085. ResourceProfilesManager should be set in RMActiveServiceContext. Contributed by Tao Yang.\n",
      "commitDate": "29/03/18 9:11 AM",
      "commitName": "7a59d60e0c50e8264e07f6b1dadaeedba676c8c2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "26/03/18 11:16 AM",
      "commitNameOld": "5d381570f83022b411a8740d58486a7f68ab2af6",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,105 +1,98 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n-\n-    // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n-    ResourceProfilesManager resourceProfilesManager \u003d\n-        createResourceProfileManager();\n-    resourceProfilesManager.init(conf);\n-    rmContext.setResourceProfilesManager(resourceProfilesManager);\n-\n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Refresh user to group mappings during init.\n     refreshUserToGroupMappingsWithConf();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Refresh user to group mappings during init.\n    refreshUserToGroupMappingsWithConf();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "5d381570f83022b411a8740d58486a7f68ab2af6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8062. yarn rmadmin -getGroups returns group from which the user has been removed. (Sunil G via wangda)\n\nChange-Id: I80ed63846502bf7751b890b6c6c6a7c0679e2b4a\n",
      "commitDate": "26/03/18 11:16 AM",
      "commitName": "5d381570f83022b411a8740d58486a7f68ab2af6",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "31/01/18 1:30 AM",
      "commitNameOld": "1efb2b6f250022f41fe5911c1bb3028ec15c5447",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 54.37,
      "commitsBetweenForRepo": 501,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,105 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n \n     // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n     ResourceProfilesManager resourceProfilesManager \u003d\n         createResourceProfileManager();\n     resourceProfilesManager.init(conf);\n     rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n-    // Do refreshUserToGroupsMappings with loaded core-site.xml\n-    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n-        .refresh();\n+    // Refresh user to group mappings during init.\n+    refreshUserToGroupMappingsWithConf();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n\n    // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n    ResourceProfilesManager resourceProfilesManager \u003d\n        createResourceProfileManager();\n    resourceProfilesManager.init(conf);\n    rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Refresh user to group mappings during init.\n    refreshUserToGroupMappingsWithConf();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7237. Cleanup usages of ResourceProfiles. (Wangda Tan)\n\nChange-Id: I959c8531bd48231956068cb7d2312f3235549f9c\n(cherry picked from commit 8536db5a7549fa44d9f9e444b41bd5978b5c6ae1)\n",
      "commitDate": "09/10/17 8:36 PM",
      "commitName": "5cfbad68c0ef6e70d248d4989f9889576d5fcf7e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/10/17 11:11 AM",
      "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.39,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,106 +1,106 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n \n     // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n     ResourceProfilesManager resourceProfilesManager \u003d\n-        new ResourceProfilesManagerImpl();\n+        createResourceProfileManager();\n     resourceProfilesManager.init(conf);\n     rmContext.setResourceProfilesManager(resourceProfilesManager);\n \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n\n    // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n    ResourceProfilesManager resourceProfilesManager \u003d\n        createResourceProfileManager();\n    resourceProfilesManager.init(conf);\n    rmContext.setResourceProfilesManager(resourceProfilesManager);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "c2032e251e86f2c05f6523a0c54f41ac4b6c78df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5708. Implement APIs to get resource profiles from the RM. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "c2032e251e86f2c05f6523a0c54f41ac4b6c78df",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "11/08/17 2:04 PM",
      "commitNameOld": "218588be773123404af4fd26eed5c9e3625feaa7",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 31.8,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,106 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n+\n+    // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n+    ResourceProfilesManager resourceProfilesManager \u003d\n+        new ResourceProfilesManagerImpl();\n+    resourceProfilesManager.init(conf);\n+    rmContext.setResourceProfilesManager(resourceProfilesManager);\n+    \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n\n    // add resource profiles here because it\u0027s used by AbstractYarnScheduler\n    ResourceProfilesManager resourceProfilesManager \u003d\n        new ResourceProfilesManagerImpl();\n    resourceProfilesManager.init(conf);\n    rmContext.setResourceProfilesManager(resourceProfilesManager);\n    \n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cbfed0e82f57e96b8d5309e0613057963840554f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6497. Method length of ResourceManager#serviceInit() is too long (Gergely Novák via jeagles)\n",
      "commitDate": "31/05/17 8:18 AM",
      "commitName": "cbfed0e82f57e96b8d5309e0613057963840554f",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "19/05/17 8:14 PM",
      "commitNameOld": "e135c0b20794705dabf86a296d934eb8df02a774",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 11.5,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,111 +1,99 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     rmContext.setResourceManager(this);\n \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n-    InputStream coreSiteXMLInputStream \u003d\n-        this.configurationProvider.getConfigurationInputStream(this.conf,\n-            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n-    if (coreSiteXMLInputStream !\u003d null) {\n-      this.conf.addResource(coreSiteXMLInputStream,\n-          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n-    }\n+    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n-    InputStream yarnSiteXMLInputStream \u003d\n-        this.configurationProvider.getConfigurationInputStream(this.conf,\n-            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n-    if (yarnSiteXMLInputStream !\u003d null) {\n-      this.conf.addResource(yarnSiteXMLInputStream,\n-          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n-    }\n+    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    loadConfigurationXml(YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    loadConfigurationXml(YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6061. Add an UncaughtExceptionHandler for critical threads in RM. (Yufei Gu via kasha)\n",
      "commitDate": "14/02/17 1:39 PM",
      "commitName": "652679aa8ad6f9e61b8ed8e2b04b3e0332025e94",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "11/01/17 5:10 PM",
      "commitNameOld": "a6b06f71797ad1ed9edbcef279bcf7d9e569f955",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 33.85,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,110 +1,111 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n-    \n+    rmContext.setResourceManager(this);\n+\n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     InputStream coreSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(coreSiteXMLInputStream,\n           YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     }\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     InputStream yarnSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(yarnSiteXMLInputStream,\n           YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     // The order of services below should not be changed as services will be\n     // started in same order\n     // As elector service needs admin service to be initialized and started,\n     // first we add admin service then elector service\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     // elector must be added post adminservice\n     if (this.rmContext.isHAEnabled()) {\n       // If the RM is configured to use an embedded leader elector,\n       // initialize the leader elector.\n       if (HAUtil.isAutomaticFailoverEnabled(conf)\n           \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n         EmbeddedElector elector \u003d createEmbeddedElector();\n         addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    rmContext.setResourceManager(this);\n\n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    InputStream coreSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    if (coreSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    }\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    InputStream yarnSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    if (yarnSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    }\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a6b06f71797ad1ed9edbcef279bcf7d9e569f955": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6072. RM unable to start in secure mode. Contributed by Ajith S.\n",
      "commitDate": "11/01/17 5:10 PM",
      "commitName": "a6b06f71797ad1ed9edbcef279bcf7d9e569f955",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "06/01/17 6:41 PM",
      "commitNameOld": "a59df15757fac7f917cb96fc8fcfeb7017475e4f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 4.94,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,102 +1,110 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     InputStream coreSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(coreSiteXMLInputStream,\n           YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     }\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     InputStream yarnSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(yarnSiteXMLInputStream,\n           YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n-\n-      // If the RM is configured to use an embedded leader elector,\n-      // initialize the leader elector.\n-      if (HAUtil.isAutomaticFailoverEnabled(conf) \u0026\u0026\n-          HAUtil.isAutomaticFailoverEmbedded(conf)) {\n-        EmbeddedElector elector \u003d createEmbeddedElector();\n-        addIfService(elector);\n-        rmContext.setLeaderElectorService(elector);\n-      }\n     }\n \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n+    // The order of services below should not be changed as services will be\n+    // started in same order\n+    // As elector service needs admin service to be initialized and started,\n+    // first we add admin service then elector service\n+\n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n+    // elector must be added post adminservice\n+    if (this.rmContext.isHAEnabled()) {\n+      // If the RM is configured to use an embedded leader elector,\n+      // initialize the leader elector.\n+      if (HAUtil.isAutomaticFailoverEnabled(conf)\n+          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n+        EmbeddedElector elector \u003d createEmbeddedElector();\n+        addIfService(elector);\n+        rmContext.setLeaderElectorService(elector);\n+      }\n+    }\n+\n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    \n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    InputStream coreSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    if (coreSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    }\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    InputStream yarnSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    if (yarnSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    }\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    // The order of services below should not be changed as services will be\n    // started in same order\n    // As elector service needs admin service to be initialized and started,\n    // first we add admin service then elector service\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    // elector must be added post adminservice\n    if (this.rmContext.isHAEnabled()) {\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf)\n          \u0026\u0026 HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a6410a542e59acd9827457df4a257a843f785c29": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5709. Cleanup leader election configs and pluggability. Contribtued by Karthik Kambatla\n",
      "commitDate": "09/12/16 5:00 PM",
      "commitName": "a6410a542e59acd9827457df4a257a843f785c29",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/11/16 9:28 PM",
      "commitNameOld": "b7070f3308fc4c6a8a9a25021562169cae87d223",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 24.81,
      "commitsBetweenForRepo": 166,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,102 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     InputStream coreSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(coreSiteXMLInputStream,\n           YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     }\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     InputStream yarnSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(yarnSiteXMLInputStream,\n           YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n-      curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n-          YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n-      if (curatorEnabled) {\n-        this.curator \u003d createAndStartCurator(conf);\n-        LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n-        addService(elector);\n+\n+      // If the RM is configured to use an embedded leader elector,\n+      // initialize the leader elector.\n+      if (HAUtil.isAutomaticFailoverEnabled(conf) \u0026\u0026\n+          HAUtil.isAutomaticFailoverEmbedded(conf)) {\n+        EmbeddedElector elector \u003d createEmbeddedElector();\n+        addIfService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n-    \n+\n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     // initialize the RM timeline collector first so that the system metrics\n     // publisher can bind to it\n     if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n       RMTimelineCollectorManager timelineCollectorManager \u003d\n           createRMTimelineCollectorManager();\n       addService(timelineCollectorManager);\n       rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n     }\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    \n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    InputStream coreSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    if (coreSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    }\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    InputStream yarnSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    if (yarnSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    }\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n\n      // If the RM is configured to use an embedded leader elector,\n      // initialize the leader elector.\n      if (HAUtil.isAutomaticFailoverEnabled(conf) \u0026\u0026\n          HAUtil.isAutomaticFailoverEmbedded(conf)) {\n        EmbeddedElector elector \u003d createEmbeddedElector();\n        addIfService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n\n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "1ff6833bbacf5c4eeaff5e70553ac083a691bb21": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5243. fix several rebase and other miscellaneous issues before merge. (Sangjin Lee via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "1ff6833bbacf5c4eeaff5e70553ac083a691bb21",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,101 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     InputStream coreSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(coreSiteXMLInputStream,\n           YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     }\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     InputStream yarnSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(yarnSiteXMLInputStream,\n           YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n       curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n           YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n       if (curatorEnabled) {\n         this.curator \u003d createAndStartCurator(conf);\n         LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n         addService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n     \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n+    // initialize the RM timeline collector first so that the system metrics\n+    // publisher can bind to it\n+    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n+      RMTimelineCollectorManager timelineCollectorManager \u003d\n+          createRMTimelineCollectorManager();\n+      addService(timelineCollectorManager);\n+      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n+    }\n+\n     SystemMetricsPublisher systemMetricsPublisher \u003d\n         createSystemMetricsPublisher();\n     addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    \n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    InputStream coreSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    if (coreSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    }\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    InputStream yarnSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    if (yarnSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    }\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n      curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n          YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n      if (curatorEnabled) {\n        this.curator \u003d createAndStartCurator(conf);\n        LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n        addService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n    \n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    // initialize the RM timeline collector first so that the system metrics\n    // publisher can bind to it\n    if (YarnConfiguration.timelineServiceV2Enabled(this.conf)) {\n      RMTimelineCollectorManager timelineCollectorManager \u003d\n          createRMTimelineCollectorManager();\n      addService(timelineCollectorManager);\n      rmContext.setRMTimelineCollectorManager(timelineCollectorManager);\n    }\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4129. Refactor the SystemMetricPublisher in RM to better support newer events (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10ec5586fba20d80dd91d8d0ddb442c66d39a0d4",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "f3c661e8dddc80726f1084ff27815d179540889c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,92 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     InputStream coreSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(coreSiteXMLInputStream,\n           YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     }\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     InputStream yarnSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(yarnSiteXMLInputStream,\n           YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n       curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n           YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n       if (curatorEnabled) {\n         this.curator \u003d createAndStartCurator(conf);\n         LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n         addService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n     \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     rmContext.setYarnConfiguration(conf);\n     \n     createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n-    SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n-    addService(systemMetricsPublisher);\n+    SystemMetricsPublisher systemMetricsPublisher \u003d\n+        createSystemMetricsPublisher();\n+    addIfService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    \n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    InputStream coreSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    if (coreSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    }\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    InputStream yarnSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    if (yarnSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    }\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n      curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n          YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n      if (curatorEnabled) {\n        this.curator \u003d createAndStartCurator(conf);\n        LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n        addService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n    \n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d\n        createSystemMetricsPublisher();\n    addIfService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "4beff013546dbc29c004a1bad1b019dc9d2b751f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4983. JVM and UGI metrics disappear after RM transitioned to standby mode\n",
      "commitDate": "26/04/16 9:00 PM",
      "commitName": "4beff013546dbc29c004a1bad1b019dc9d2b751f",
      "commitAuthor": "Jian He",
      "commitDateOld": "26/04/16 8:12 PM",
      "commitNameOld": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,91 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.conf \u003d conf;\n     this.rmContext \u003d new RMContextImpl();\n     \n     this.configurationProvider \u003d\n         ConfigurationProviderFactory.getConfigurationProvider(conf);\n     this.configurationProvider.init(this.conf);\n     rmContext.setConfigurationProvider(configurationProvider);\n \n     // load core-site.xml\n     InputStream coreSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     if (coreSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(coreSiteXMLInputStream,\n           YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n     }\n \n     // Do refreshUserToGroupsMappings with loaded core-site.xml\n     Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n         .refresh();\n \n     // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n     // Or use RM specific configurations to overwrite the common ones first\n     // if they exist\n     RMServerUtils.processRMProxyUsersConf(conf);\n     ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n \n     // load yarn-site.xml\n     InputStream yarnSiteXMLInputStream \u003d\n         this.configurationProvider.getConfigurationInputStream(this.conf,\n             YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     if (yarnSiteXMLInputStream !\u003d null) {\n       this.conf.addResource(yarnSiteXMLInputStream,\n           YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n     }\n \n     validateConfigs(this.conf);\n     \n     // Set HA configuration should be done before login\n     this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n     if (this.rmContext.isHAEnabled()) {\n       HAUtil.verifyAndSetConfiguration(this.conf);\n       curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n           YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n       if (curatorEnabled) {\n         this.curator \u003d createAndStartCurator(conf);\n         LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n         addService(elector);\n         rmContext.setLeaderElectorService(elector);\n       }\n     }\n     \n     // Set UGI and do login\n     // If security is enabled, use login user\n     // If security is not enabled, use current user\n     this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n     try {\n       doSecureLogin();\n     } catch(IOException ie) {\n       throw new YarnRuntimeException(\"Failed to login\", ie);\n     }\n \n     // register the handlers for all AlwaysOn services using setupDispatcher().\n     rmDispatcher \u003d setupDispatcher();\n     addIfService(rmDispatcher);\n     rmContext.setDispatcher(rmDispatcher);\n \n     adminService \u003d createAdminService();\n     addService(adminService);\n     rmContext.setRMAdminService(adminService);\n \n     rmContext.setYarnConfiguration(conf);\n     \n-    createAndInitActiveServices();\n+    createAndInitActiveServices(false);\n \n     webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                       YarnConfiguration.RM_BIND_HOST,\n                       WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n \n     RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n         createRMApplicationHistoryWriter();\n     addService(rmApplicationHistoryWriter);\n     rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n \n     SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n     addService(systemMetricsPublisher);\n     rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n \n     super.serviceInit(this.conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    \n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    InputStream coreSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    if (coreSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    }\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    InputStream yarnSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    if (yarnSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    }\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n      curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n          YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n      if (curatorEnabled) {\n        this.curator \u003d createAndStartCurator(conf);\n        LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n        addService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n    \n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices(false);\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n    addService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "341888a0aa23f24458b4e6e34868794b9735c06a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4412. Create ClusterMonitor to compute ordered list of preferred NMs for OPPORTUNITIC containers. (asuresh)\n",
      "commitDate": "26/04/16 8:12 PM",
      "commitName": "341888a0aa23f24458b4e6e34868794b9735c06a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "24/04/16 10:38 PM",
      "commitNameOld": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.9,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,91 @@\n-    protected void serviceInit(Configuration conf) throws Exception {\n-      this.shouldExitOnError \u003d\n-          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n-            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n-      super.serviceInit(conf);\n-    }\n\\ No newline at end of file\n+  protected void serviceInit(Configuration conf) throws Exception {\n+    this.conf \u003d conf;\n+    this.rmContext \u003d new RMContextImpl();\n+    \n+    this.configurationProvider \u003d\n+        ConfigurationProviderFactory.getConfigurationProvider(conf);\n+    this.configurationProvider.init(this.conf);\n+    rmContext.setConfigurationProvider(configurationProvider);\n+\n+    // load core-site.xml\n+    InputStream coreSiteXMLInputStream \u003d\n+        this.configurationProvider.getConfigurationInputStream(this.conf,\n+            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n+    if (coreSiteXMLInputStream !\u003d null) {\n+      this.conf.addResource(coreSiteXMLInputStream,\n+          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n+    }\n+\n+    // Do refreshUserToGroupsMappings with loaded core-site.xml\n+    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n+        .refresh();\n+\n+    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n+    // Or use RM specific configurations to overwrite the common ones first\n+    // if they exist\n+    RMServerUtils.processRMProxyUsersConf(conf);\n+    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n+\n+    // load yarn-site.xml\n+    InputStream yarnSiteXMLInputStream \u003d\n+        this.configurationProvider.getConfigurationInputStream(this.conf,\n+            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n+    if (yarnSiteXMLInputStream !\u003d null) {\n+      this.conf.addResource(yarnSiteXMLInputStream,\n+          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n+    }\n+\n+    validateConfigs(this.conf);\n+    \n+    // Set HA configuration should be done before login\n+    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n+    if (this.rmContext.isHAEnabled()) {\n+      HAUtil.verifyAndSetConfiguration(this.conf);\n+      curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n+          YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n+      if (curatorEnabled) {\n+        this.curator \u003d createAndStartCurator(conf);\n+        LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n+        addService(elector);\n+        rmContext.setLeaderElectorService(elector);\n+      }\n+    }\n+    \n+    // Set UGI and do login\n+    // If security is enabled, use login user\n+    // If security is not enabled, use current user\n+    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n+    try {\n+      doSecureLogin();\n+    } catch(IOException ie) {\n+      throw new YarnRuntimeException(\"Failed to login\", ie);\n+    }\n+\n+    // register the handlers for all AlwaysOn services using setupDispatcher().\n+    rmDispatcher \u003d setupDispatcher();\n+    addIfService(rmDispatcher);\n+    rmContext.setDispatcher(rmDispatcher);\n+\n+    adminService \u003d createAdminService();\n+    addService(adminService);\n+    rmContext.setRMAdminService(adminService);\n+\n+    rmContext.setYarnConfiguration(conf);\n+    \n+    createAndInitActiveServices();\n+\n+    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n+                      YarnConfiguration.RM_BIND_HOST,\n+                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n+\n+    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n+        createRMApplicationHistoryWriter();\n+    addService(rmApplicationHistoryWriter);\n+    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n+\n+    SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n+    addService(systemMetricsPublisher);\n+    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n+\n+    super.serviceInit(this.conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.conf \u003d conf;\n    this.rmContext \u003d new RMContextImpl();\n    \n    this.configurationProvider \u003d\n        ConfigurationProviderFactory.getConfigurationProvider(conf);\n    this.configurationProvider.init(this.conf);\n    rmContext.setConfigurationProvider(configurationProvider);\n\n    // load core-site.xml\n    InputStream coreSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    if (coreSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(coreSiteXMLInputStream,\n          YarnConfiguration.CORE_SITE_CONFIGURATION_FILE);\n    }\n\n    // Do refreshUserToGroupsMappings with loaded core-site.xml\n    Groups.getUserToGroupsMappingServiceWithLoadedConfiguration(this.conf)\n        .refresh();\n\n    // Do refreshSuperUserGroupsConfiguration with loaded core-site.xml\n    // Or use RM specific configurations to overwrite the common ones first\n    // if they exist\n    RMServerUtils.processRMProxyUsersConf(conf);\n    ProxyUsers.refreshSuperUserGroupsConfiguration(this.conf);\n\n    // load yarn-site.xml\n    InputStream yarnSiteXMLInputStream \u003d\n        this.configurationProvider.getConfigurationInputStream(this.conf,\n            YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    if (yarnSiteXMLInputStream !\u003d null) {\n      this.conf.addResource(yarnSiteXMLInputStream,\n          YarnConfiguration.YARN_SITE_CONFIGURATION_FILE);\n    }\n\n    validateConfigs(this.conf);\n    \n    // Set HA configuration should be done before login\n    this.rmContext.setHAEnabled(HAUtil.isHAEnabled(this.conf));\n    if (this.rmContext.isHAEnabled()) {\n      HAUtil.verifyAndSetConfiguration(this.conf);\n      curatorEnabled \u003d conf.getBoolean(YarnConfiguration.CURATOR_LEADER_ELECTOR,\n          YarnConfiguration.DEFAULT_CURATOR_LEADER_ELECTOR_ENABLED);\n      if (curatorEnabled) {\n        this.curator \u003d createAndStartCurator(conf);\n        LeaderElectorService elector \u003d new LeaderElectorService(rmContext, this);\n        addService(elector);\n        rmContext.setLeaderElectorService(elector);\n      }\n    }\n    \n    // Set UGI and do login\n    // If security is enabled, use login user\n    // If security is not enabled, use current user\n    this.rmLoginUGI \u003d UserGroupInformation.getCurrentUser();\n    try {\n      doSecureLogin();\n    } catch(IOException ie) {\n      throw new YarnRuntimeException(\"Failed to login\", ie);\n    }\n\n    // register the handlers for all AlwaysOn services using setupDispatcher().\n    rmDispatcher \u003d setupDispatcher();\n    addIfService(rmDispatcher);\n    rmContext.setDispatcher(rmDispatcher);\n\n    adminService \u003d createAdminService();\n    addService(adminService);\n    rmContext.setRMAdminService(adminService);\n\n    rmContext.setYarnConfiguration(conf);\n    \n    createAndInitActiveServices();\n\n    webAppAddress \u003d WebAppUtils.getWebAppBindURL(this.conf,\n                      YarnConfiguration.RM_BIND_HOST,\n                      WebAppUtils.getRMWebAppURLWithoutScheme(this.conf));\n\n    RMApplicationHistoryWriter rmApplicationHistoryWriter \u003d\n        createRMApplicationHistoryWriter();\n    addService(rmApplicationHistoryWriter);\n    rmContext.setRMApplicationHistoryWriter(rmApplicationHistoryWriter);\n\n    SystemMetricsPublisher systemMetricsPublisher \u003d createSystemMetricsPublisher();\n    addService(systemMetricsPublisher);\n    rmContext.setSystemMetricsPublisher(systemMetricsPublisher);\n\n    super.serviceInit(this.conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n-    public synchronized void init(Configuration conf) {\n+    protected void serviceInit(Configuration conf) throws Exception {\n       this.shouldExitOnError \u003d\n           conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n             Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n-      super.init(conf);\n+      super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void serviceInit(Configuration conf) throws Exception {\n      this.shouldExitOnError \u003d\n          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n      super.serviceInit(conf);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n-    public synchronized void init(Configuration conf) {\n+    protected void serviceInit(Configuration conf) throws Exception {\n       this.shouldExitOnError \u003d\n           conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n             Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n-      super.init(conf);\n+      super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void serviceInit(Configuration conf) throws Exception {\n      this.shouldExitOnError \u003d\n          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n      super.serviceInit(conf);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n-    public synchronized void init(Configuration conf) {\n+    protected void serviceInit(Configuration conf) throws Exception {\n       this.shouldExitOnError \u003d\n           conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n             Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n-      super.init(conf);\n+      super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void serviceInit(Configuration conf) throws Exception {\n      this.shouldExitOnError \u003d\n          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n      super.serviceInit(conf);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "11/06/13 3:15 PM",
          "commitNameOld": "25946da4133a3784f1ec280cccac36b24db273a6",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 1.74,
          "commitsBetweenForRepo": 12,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,6 +1,6 @@\n-    public synchronized void init(Configuration conf) {\n+    protected void serviceInit(Configuration conf) throws Exception {\n       this.shouldExitOnError \u003d\n           conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n             Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n-      super.init(conf);\n+      super.serviceInit(conf);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    protected void serviceInit(Configuration conf) throws Exception {\n      this.shouldExitOnError \u003d\n          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n      super.serviceInit(conf);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public synchronized void init(Configuration conf) {\n      this.shouldExitOnError \u003d\n          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n      super.init(conf);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "fe7711df98b9dd16259f6534e8461a29f24caadc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3942. Randomize master key generation for ApplicationTokenSecretManager and roll it every so often. (Contributed by Vinod Kumar Vavilapalli)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327220 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 11:48 AM",
      "commitName": "fe7711df98b9dd16259f6534e8461a29f24caadc",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "25/03/12 10:45 PM",
      "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 22.54,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,6 @@\n-  public synchronized void init(Configuration conf) {\n-\n-    this.conf \u003d conf;\n-\n-    this.conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n-\n-    this.rmDispatcher \u003d createDispatcher();\n-    addIfService(this.rmDispatcher);\n-\n-    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n-        this.rmDispatcher);\n-    addService(this.containerAllocationExpirer);\n-\n-    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n-    addService(amLivelinessMonitor);\n-\n-    DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n-    addService(tokenRenewer);\n-    \n-    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n-        this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n-\n-    // Register event handler for NodesListManager\n-    this.nodesListManager \u003d new NodesListManager(this.rmContext);\n-    this.rmDispatcher.register(NodesListManagerEventType.class, \n-        this.nodesListManager);\n-    addService(nodesListManager);\n-\n-    // Initialize the scheduler\n-    this.scheduler \u003d createScheduler();\n-    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n-    addIfService(this.schedulerDispatcher);\n-    this.rmDispatcher.register(SchedulerEventType.class,\n-        this.schedulerDispatcher);\n-\n-    // Register event handler for RmAppEvents\n-    this.rmDispatcher.register(RMAppEventType.class,\n-        new ApplicationEventDispatcher(this.rmContext));\n-\n-    // Register event handler for RmAppAttemptEvents\n-    this.rmDispatcher.register(RMAppAttemptEventType.class,\n-        new ApplicationAttemptEventDispatcher(this.rmContext));\n-\n-    // Register event handler for RmNodes\n-    this.rmDispatcher.register(RMNodeEventType.class,\n-        new NodeEventDispatcher(this.rmContext));    \n-\n-    //TODO change this to be random\n-    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n-        .createSecretKey(\"Dummy\".getBytes()));\n-\n-    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n-    addService(this.nmLivelinessMonitor);\n-\n-    this.resourceTracker \u003d createResourceTrackerService();\n-    addService(resourceTracker);\n-  \n-    try {\n-      this.scheduler.reinitialize(conf,\n-          this.containerTokenSecretManager, this.rmContext);\n-    } catch (IOException ioe) {\n-      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n-    }\n-\n-    masterService \u003d createApplicationMasterService();\n-    addService(masterService) ;\n-\n-    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n-\n-    this.rmAppManager \u003d createRMAppManager();\n-    // Register event handler for RMAppManagerEvents\n-    this.rmDispatcher.register(RMAppManagerEventType.class,\n-        this.rmAppManager);\n-    this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n-    clientRM \u003d createClientRMService();\n-    addService(clientRM);\n-    \n-    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n-    addService(adminService);\n-\n-    this.applicationMasterLauncher \u003d createAMLauncher();\n-    this.rmDispatcher.register(AMLauncherEventType.class, \n-        this.applicationMasterLauncher);\n-\n-    addService(applicationMasterLauncher);\n-\n-    new RMNMInfo(this.rmContext, this.scheduler);\n-\n-    super.init(conf);\n-  }\n\\ No newline at end of file\n+    public synchronized void init(Configuration conf) {\n+      this.shouldExitOnError \u003d\n+          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n+            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n+      super.init(conf);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized void init(Configuration conf) {\n      this.shouldExitOnError \u003d\n          conf.getBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY,\n            Dispatcher.DEFAULT_DISPATCHER_EXIT_ON_ERROR);\n      super.init(conf);\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "606114d6029758f2be130960b8fc3102457406ba": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3533. Add a channel between RM and AM to get information on nodes. Contributed by Bikas Saha. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/12 10:45 PM",
      "commitName": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/03/12 8:17 AM",
      "commitNameOld": "a98b756c736ae5f7b6b4bab21d0d85be42ff7c03",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 19.56,
      "commitsBetweenForRepo": 103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,90 @@\n   public synchronized void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n     this.conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n \n     this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n     addService(tokenRenewer);\n     \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n \n+    // Register event handler for NodesListManager\n+    this.nodesListManager \u003d new NodesListManager(this.rmContext);\n+    this.rmDispatcher.register(NodesListManagerEventType.class, \n+        this.nodesListManager);\n     addService(nodesListManager);\n \n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n     addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n-        new NodeEventDispatcher(this.rmContext));\n+        new NodeEventDispatcher(this.rmContext));    \n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n     this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n     new RMNMInfo(this.rmContext, this.scheduler);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    this.conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n    addService(tokenRenewer);\n    \n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n\n    // Register event handler for NodesListManager\n    this.nodesListManager \u003d new NodesListManager(this.rmContext);\n    this.rmDispatcher.register(NodesListManagerEventType.class, \n        this.nodesListManager);\n    addService(nodesListManager);\n\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));    \n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n    this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    new RMNMInfo(this.rmContext, this.scheduler);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "5ee495e6f34faff231ad87ec890188eb63617393": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3634. Fixed all daemons to crash instead of hanging around when their EventHandlers get exceptions. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1291598 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/12 9:08 PM",
      "commitName": "5ee495e6f34faff231ad87ec890188eb63617393",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/02/12 12:03 PM",
      "commitNameOld": "c7d64769c1a72f2aab9958e33a7cf28d02612306",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 16.38,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,86 @@\n   public synchronized void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n+    this.conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n+\n     this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n     addService(tokenRenewer);\n     \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n \n     addService(nodesListManager);\n \n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n     addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n     this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n     new RMNMInfo(this.rmContext, this.scheduler);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    this.conf.setBoolean(Dispatcher.DISPATCHER_EXIT_ON_ERROR_KEY, true);\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n    addService(tokenRenewer);\n    \n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n\n    addService(nodesListManager);\n\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n    this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    new RMNMInfo(this.rmContext, this.scheduler);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "7e4725db41674a74846b9b252a575da23a1a2b11": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3703. ResourceManager should provide node lists in JMX output. (Eric Payne via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1237920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/12 10:47 AM",
      "commitName": "7e4725db41674a74846b9b252a575da23a1a2b11",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "13/01/12 1:15 PM",
      "commitNameOld": "78ff0b720e0418785d53802a1b4e72085c1a3556",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 16.9,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,84 @@\n   public synchronized void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n     this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n     addService(tokenRenewer);\n     \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n \n     addService(nodesListManager);\n \n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n     addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n     this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n+    new RMNMInfo(this.rmContext, this.scheduler);\n+\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n    addService(tokenRenewer);\n    \n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n\n    addService(nodesListManager);\n\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n    this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    new RMNMInfo(this.rmContext, this.scheduler);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3380. Token infrastructure for running clients which are not kerberos authenticated. (mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1229855 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/12 5:50 PM",
      "commitName": "bc4b1f48d3aba7f7a324ae76ab65a0920b1e609e",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "13/12/11 3:05 PM",
      "commitNameOld": "0ea8570be578be60e2f32849900a1c50506d78d3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.11,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,82 @@\n   public synchronized void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n     this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n     addService(tokenRenewer);\n     \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n \n     addService(nodesListManager);\n \n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n     addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n-\n+    this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n    addService(tokenRenewer);\n    \n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n\n    addService(nodesListManager);\n\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n    this.rmDTSecretManager \u003d createRMDelegationTokenSecretManager();\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "29c6c3ed328965a73fe7b68eb29cb30794beef38": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2977. Fix ResourceManager to renew HDFS delegation tokens for applications. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189012 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/11 7:53 PM",
      "commitName": "29c6c3ed328965a73fe7b68eb29cb30794beef38",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/10/11 11:07 PM",
      "commitNameOld": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,82 @@\n   public synchronized void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n     this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n+    DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n+    addService(tokenRenewer);\n+    \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n-        this.containerAllocationExpirer, amLivelinessMonitor);\n+        this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n \n     addService(nodesListManager);\n \n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n     addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n \n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    DelegationTokenRenewer tokenRenewer \u003d createDelegationTokenRenewer();\n    addService(tokenRenewer);\n    \n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor, tokenRenewer);\n\n    addService(nodesListManager);\n\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "d19cfe01642f9582e1fe5d567beb480399c37a01": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2746. Yarn servers can\u0027t communicate with each other with hadoop.security.authorization set to true (acmurthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1188522 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/11 11:07 PM",
      "commitName": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "20/10/11 4:45 AM",
      "commitNameOld": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.76,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,79 @@\n   public synchronized void init(Configuration conf) {\n \n     this.conf \u003d conf;\n \n     this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor);\n \n     addService(nodesListManager);\n \n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n     addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n \n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n-    adminService \u003d createAdminService();\n+    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService(clientRM, masterService, resourceTracker);\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "16/10/11 12:27 PM",
      "commitNameOld": "68328ae92632afc9cdd6e75b7a8d832723ddbe3b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 3.68,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,79 @@\n   public synchronized void init(Configuration conf) {\n \n+    this.conf \u003d conf;\n+\n     this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor);\n \n     addService(nodesListManager);\n \n-    // Initialize the config\n-    this.conf \u003d new YarnConfiguration(conf);\n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n     addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n-      this.scheduler.reinitialize(this.conf,\n+      this.scheduler.reinitialize(conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n+    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n+\n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n \n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService();\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.conf \u003d conf;\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.applicationACLsManager \u003d new ApplicationACLsManager(conf);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService();\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "312a7e71001d55f88781e56b331ab1b40a72a980": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3078. Ensure MapReduce AM reports progress correctly for displaying on the RM Web-UI. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1176762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/11 12:31 AM",
      "commitName": "312a7e71001d55f88781e56b331ab1b40a72a980",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "27/09/11 6:23 PM",
      "commitNameOld": "5f6adcf396b78934d7da2bba0d052038ff962f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.26,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,77 @@\n   public synchronized void init(Configuration conf) {\n \n-    this.rmDispatcher \u003d new AsyncDispatcher();\n+    this.rmDispatcher \u003d createDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor);\n \n     addService(nodesListManager);\n \n     // Initialize the config\n     this.conf \u003d new YarnConfiguration(conf);\n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n-    this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n-    addService(this.schedulerDispatcher);\n+    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n+    addIfService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(this.conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n \n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService();\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     this.rmDispatcher.register(AMLauncherEventType.class, \n         this.applicationMasterLauncher);\n \n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.rmDispatcher \u003d createDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the config\n    this.conf \u003d new YarnConfiguration(conf);\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d createSchedulerEventDispatcher();\n    addIfService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(this.conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService();\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2952. Fixed ResourceManager/MR-client to consume diagnostics for AM failures in a couple of corner cases. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175403 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/09/11 7:46 AM",
      "commitName": "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/09/11 10:57 AM",
      "commitNameOld": "4ba2acf3363bdfd7fcdd9de496cd57f8af6f03ad",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,77 @@\n   public synchronized void init(Configuration conf) {\n \n     this.rmDispatcher \u003d new AsyncDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor);\n \n     addService(nodesListManager);\n \n     // Initialize the config\n     this.conf \u003d new YarnConfiguration(conf);\n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n     addService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(this.conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n \n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n     \n     adminService \u003d createAdminService();\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n+    this.rmDispatcher.register(AMLauncherEventType.class, \n+        this.applicationMasterLauncher);\n+\n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.rmDispatcher \u003d new AsyncDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the config\n    this.conf \u003d new YarnConfiguration(conf);\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n    addService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(this.conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService();\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    this.rmDispatcher.register(AMLauncherEventType.class, \n        this.applicationMasterLauncher);\n\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "ca853445e9a31e05278e9dceea9dbed734103f49": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2953. Fix a race condition on submission which caused client to incorrectly assume application was gone by making submission synchronous for RMAppManager. Contributed by Thomas Graves.  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 7:19 PM",
      "commitName": "ca853445e9a31e05278e9dceea9dbed734103f49",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,74 @@\n   public synchronized void init(Configuration conf) {\n \n     this.rmDispatcher \u003d new AsyncDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor);\n \n     addService(nodesListManager);\n \n     // Initialize the config\n     this.conf \u003d new YarnConfiguration(conf);\n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n     addService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(this.conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n-    clientRM \u003d createClientRMService();\n-    addService(clientRM);\n-\n     this.rmAppManager \u003d createRMAppManager();\n     // Register event handler for RMAppManagerEvents\n     this.rmDispatcher.register(RMAppManagerEventType.class,\n         this.rmAppManager);\n+\n+    clientRM \u003d createClientRMService();\n+    addService(clientRM);\n     \n     adminService \u003d createAdminService();\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.rmDispatcher \u003d new AsyncDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the config\n    this.conf \u003d new YarnConfiguration(conf);\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n    addService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(this.conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService();\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.rmDispatcher \u003d new AsyncDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the config\n    this.conf \u003d new YarnConfiguration(conf);\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n    addService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(this.conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n    \n    adminService \u003d createAdminService();\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
      }
    },
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2649. Handling of finished applications in RM. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160521 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 6:32 PM",
      "commitName": "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "18/08/11 4:07 AM",
      "commitNameOld": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.6,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,74 @@\n   public synchronized void init(Configuration conf) {\n \n     this.rmDispatcher \u003d new AsyncDispatcher();\n     addIfService(this.rmDispatcher);\n \n     this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n         this.rmDispatcher);\n     addService(this.containerAllocationExpirer);\n \n     AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n     addService(amLivelinessMonitor);\n \n     this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n         this.containerAllocationExpirer, amLivelinessMonitor);\n \n     addService(nodesListManager);\n \n     // Initialize the config\n     this.conf \u003d new YarnConfiguration(conf);\n     // Initialize the scheduler\n     this.scheduler \u003d createScheduler();\n     this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n     addService(this.schedulerDispatcher);\n     this.rmDispatcher.register(SchedulerEventType.class,\n         this.schedulerDispatcher);\n \n     // Register event handler for RmAppEvents\n     this.rmDispatcher.register(RMAppEventType.class,\n         new ApplicationEventDispatcher(this.rmContext));\n \n     // Register event handler for RmAppAttemptEvents\n     this.rmDispatcher.register(RMAppAttemptEventType.class,\n         new ApplicationAttemptEventDispatcher(this.rmContext));\n \n     // Register event handler for RmNodes\n     this.rmDispatcher.register(RMNodeEventType.class,\n         new NodeEventDispatcher(this.rmContext));\n \n     //TODO change this to be random\n     this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n         .createSecretKey(\"Dummy\".getBytes()));\n \n     this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n     addService(this.nmLivelinessMonitor);\n \n     this.resourceTracker \u003d createResourceTrackerService();\n     addService(resourceTracker);\n   \n     try {\n       this.scheduler.reinitialize(this.conf,\n           this.containerTokenSecretManager, this.rmContext);\n     } catch (IOException ioe) {\n       throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n     }\n \n     masterService \u003d createApplicationMasterService();\n     addService(masterService) ;\n \n     clientRM \u003d createClientRMService();\n     addService(clientRM);\n+\n+    this.rmAppManager \u003d createRMAppManager();\n+    // Register event handler for RMAppManagerEvents\n+    this.rmDispatcher.register(RMAppManagerEventType.class,\n+        this.rmAppManager);\n     \n     adminService \u003d createAdminService();\n     addService(adminService);\n \n     this.applicationMasterLauncher \u003d createAMLauncher();\n     addService(applicationMasterLauncher);\n \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.rmDispatcher \u003d new AsyncDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the config\n    this.conf \u003d new YarnConfiguration(conf);\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n    addService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(this.conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n\n    this.rmAppManager \u003d createRMAppManager();\n    // Register event handler for RMAppManagerEvents\n    this.rmDispatcher.register(RMAppManagerEventType.class,\n        this.rmAppManager);\n    \n    adminService \u003d createAdminService();\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java",
      "extendedDetails": {}
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,69 @@\n+  public synchronized void init(Configuration conf) {\n+\n+    this.rmDispatcher \u003d new AsyncDispatcher();\n+    addIfService(this.rmDispatcher);\n+\n+    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n+        this.rmDispatcher);\n+    addService(this.containerAllocationExpirer);\n+\n+    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n+    addService(amLivelinessMonitor);\n+\n+    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n+        this.containerAllocationExpirer, amLivelinessMonitor);\n+\n+    addService(nodesListManager);\n+\n+    // Initialize the config\n+    this.conf \u003d new YarnConfiguration(conf);\n+    // Initialize the scheduler\n+    this.scheduler \u003d createScheduler();\n+    this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n+    addService(this.schedulerDispatcher);\n+    this.rmDispatcher.register(SchedulerEventType.class,\n+        this.schedulerDispatcher);\n+\n+    // Register event handler for RmAppEvents\n+    this.rmDispatcher.register(RMAppEventType.class,\n+        new ApplicationEventDispatcher(this.rmContext));\n+\n+    // Register event handler for RmAppAttemptEvents\n+    this.rmDispatcher.register(RMAppAttemptEventType.class,\n+        new ApplicationAttemptEventDispatcher(this.rmContext));\n+\n+    // Register event handler for RmNodes\n+    this.rmDispatcher.register(RMNodeEventType.class,\n+        new NodeEventDispatcher(this.rmContext));\n+\n+    //TODO change this to be random\n+    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n+        .createSecretKey(\"Dummy\".getBytes()));\n+\n+    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n+    addService(this.nmLivelinessMonitor);\n+\n+    this.resourceTracker \u003d createResourceTrackerService();\n+    addService(resourceTracker);\n+  \n+    try {\n+      this.scheduler.reinitialize(this.conf,\n+          this.containerTokenSecretManager, this.rmContext);\n+    } catch (IOException ioe) {\n+      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n+    }\n+\n+    masterService \u003d createApplicationMasterService();\n+    addService(masterService) ;\n+\n+    clientRM \u003d createClientRMService();\n+    addService(clientRM);\n+    \n+    adminService \u003d createAdminService();\n+    addService(adminService);\n+\n+    this.applicationMasterLauncher \u003d createAMLauncher();\n+    addService(applicationMasterLauncher);\n+\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n\n    this.rmDispatcher \u003d new AsyncDispatcher();\n    addIfService(this.rmDispatcher);\n\n    this.containerAllocationExpirer \u003d new ContainerAllocationExpirer(\n        this.rmDispatcher);\n    addService(this.containerAllocationExpirer);\n\n    AMLivelinessMonitor amLivelinessMonitor \u003d createAMLivelinessMonitor();\n    addService(amLivelinessMonitor);\n\n    this.rmContext \u003d new RMContextImpl(this.store, this.rmDispatcher,\n        this.containerAllocationExpirer, amLivelinessMonitor);\n\n    addService(nodesListManager);\n\n    // Initialize the config\n    this.conf \u003d new YarnConfiguration(conf);\n    // Initialize the scheduler\n    this.scheduler \u003d createScheduler();\n    this.schedulerDispatcher \u003d new SchedulerEventDispatcher(this.scheduler);\n    addService(this.schedulerDispatcher);\n    this.rmDispatcher.register(SchedulerEventType.class,\n        this.schedulerDispatcher);\n\n    // Register event handler for RmAppEvents\n    this.rmDispatcher.register(RMAppEventType.class,\n        new ApplicationEventDispatcher(this.rmContext));\n\n    // Register event handler for RmAppAttemptEvents\n    this.rmDispatcher.register(RMAppAttemptEventType.class,\n        new ApplicationAttemptEventDispatcher(this.rmContext));\n\n    // Register event handler for RmNodes\n    this.rmDispatcher.register(RMNodeEventType.class,\n        new NodeEventDispatcher(this.rmContext));\n\n    //TODO change this to be random\n    this.appTokenSecretManager.setMasterKey(ApplicationTokenSecretManager\n        .createSecretKey(\"Dummy\".getBytes()));\n\n    this.nmLivelinessMonitor \u003d createNMLivelinessMonitor();\n    addService(this.nmLivelinessMonitor);\n\n    this.resourceTracker \u003d createResourceTrackerService();\n    addService(resourceTracker);\n  \n    try {\n      this.scheduler.reinitialize(this.conf,\n          this.containerTokenSecretManager, this.rmContext);\n    } catch (IOException ioe) {\n      throw new RuntimeException(\"Failed to initialize scheduler\", ioe);\n    }\n\n    masterService \u003d createApplicationMasterService();\n    addService(masterService) ;\n\n    clientRM \u003d createClientRMService();\n    addService(clientRM);\n    \n    adminService \u003d createAdminService();\n    addService(adminService);\n\n    this.applicationMasterLauncher \u003d createAMLauncher();\n    addService(applicationMasterLauncher);\n\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceManager.java"
    }
  }
}