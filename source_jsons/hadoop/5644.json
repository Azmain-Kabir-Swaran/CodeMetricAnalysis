{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSTreeTraverser.java",
  "functionName": "resolvePaths",
  "functionId": "resolvePaths___startId-long(modifiers-final)__startAfters-List__byte[]__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSTreeTraverser.java",
  "functionStartLine": 231,
  "functionEndLine": 261,
  "numCommitsSeen": 6,
  "timeTaken": 3630,
  "changeHistory": [
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f89594f0b80e8efffdcb887daa4a18a2b0a228b3": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "10/04/18 11:05 AM",
      "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
      "commitAuthor": "Rakesh Radhakrishnan",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "10/04/18 7:58 AM",
          "commitNameOld": "cef8eb79810383f9970ed3713deecc18fbf0ffaa",
          "commitAuthorOld": "Ewan Higgs",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private INode resolvePaths(final long zoneId, List\u003cbyte[]\u003e startAfters)\n+  private INode resolvePaths(final long startId, List\u003cbyte[]\u003e startAfters)\n       throws IOException {\n     // If the readlock was reacquired, we need to resolve the paths again\n     // in case things have changed. If our cursor file/dir is changed,\n     // continue from the next one.\n-    INode zoneNode \u003d dir.getInode(zoneId);\n+    INode zoneNode \u003d dir.getInode(startId);\n     if (zoneNode \u003d\u003d null) {\n-      throw new FileNotFoundException(\"Zone \" + zoneId + \" is deleted.\");\n+      throw new FileNotFoundException(\"Zone \" + startId + \" is deleted.\");\n     }\n     INodeDirectory parent \u003d zoneNode.asDirectory();\n     for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n       if (i \u003d\u003d startAfters.size() - 1) {\n         // last startAfter does not need to be resolved, since search for\n         // nextChild will cover that automatically.\n         break;\n       }\n-      INode curr \u003d\n-          parent.getChild(startAfters.get(i), Snapshot.CURRENT_STATE_ID);\n+      INode curr \u003d parent.getChild(startAfters.get(i),\n+          Snapshot.CURRENT_STATE_ID);\n       if (curr \u003d\u003d null) {\n         // inode at this level has changed. Update startAfters to point to\n         // the next dir at the parent level (and dropping any startAfters\n         // at lower levels).\n         for (; i \u003c startAfters.size(); ++i) {\n           startAfters.remove(startAfters.size() - 1);\n         }\n         break;\n       }\n       parent \u003d curr.asDirectory();\n     }\n     return parent;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INode resolvePaths(final long startId, List\u003cbyte[]\u003e startAfters)\n      throws IOException {\n    // If the readlock was reacquired, we need to resolve the paths again\n    // in case things have changed. If our cursor file/dir is changed,\n    // continue from the next one.\n    INode zoneNode \u003d dir.getInode(startId);\n    if (zoneNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Zone \" + startId + \" is deleted.\");\n    }\n    INodeDirectory parent \u003d zoneNode.asDirectory();\n    for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n      if (i \u003d\u003d startAfters.size() - 1) {\n        // last startAfter does not need to be resolved, since search for\n        // nextChild will cover that automatically.\n        break;\n      }\n      INode curr \u003d parent.getChild(startAfters.get(i),\n          Snapshot.CURRENT_STATE_ID);\n      if (curr \u003d\u003d null) {\n        // inode at this level has changed. Update startAfters to point to\n        // the next dir at the parent level (and dropping any startAfters\n        // at lower levels).\n        for (; i \u003c startAfters.size(); ++i) {\n          startAfters.remove(startAfters.size() - 1);\n        }\n        break;\n      }\n      parent \u003d curr.asDirectory();\n    }\n    return parent;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSTreeTraverser.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSTreeTraverser.java",
            "oldMethodName": "resolvePaths",
            "newMethodName": "resolvePaths"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "10/04/18 7:58 AM",
          "commitNameOld": "cef8eb79810383f9970ed3713deecc18fbf0ffaa",
          "commitAuthorOld": "Ewan Higgs",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private INode resolvePaths(final long zoneId, List\u003cbyte[]\u003e startAfters)\n+  private INode resolvePaths(final long startId, List\u003cbyte[]\u003e startAfters)\n       throws IOException {\n     // If the readlock was reacquired, we need to resolve the paths again\n     // in case things have changed. If our cursor file/dir is changed,\n     // continue from the next one.\n-    INode zoneNode \u003d dir.getInode(zoneId);\n+    INode zoneNode \u003d dir.getInode(startId);\n     if (zoneNode \u003d\u003d null) {\n-      throw new FileNotFoundException(\"Zone \" + zoneId + \" is deleted.\");\n+      throw new FileNotFoundException(\"Zone \" + startId + \" is deleted.\");\n     }\n     INodeDirectory parent \u003d zoneNode.asDirectory();\n     for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n       if (i \u003d\u003d startAfters.size() - 1) {\n         // last startAfter does not need to be resolved, since search for\n         // nextChild will cover that automatically.\n         break;\n       }\n-      INode curr \u003d\n-          parent.getChild(startAfters.get(i), Snapshot.CURRENT_STATE_ID);\n+      INode curr \u003d parent.getChild(startAfters.get(i),\n+          Snapshot.CURRENT_STATE_ID);\n       if (curr \u003d\u003d null) {\n         // inode at this level has changed. Update startAfters to point to\n         // the next dir at the parent level (and dropping any startAfters\n         // at lower levels).\n         for (; i \u003c startAfters.size(); ++i) {\n           startAfters.remove(startAfters.size() - 1);\n         }\n         break;\n       }\n       parent \u003d curr.asDirectory();\n     }\n     return parent;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INode resolvePaths(final long startId, List\u003cbyte[]\u003e startAfters)\n      throws IOException {\n    // If the readlock was reacquired, we need to resolve the paths again\n    // in case things have changed. If our cursor file/dir is changed,\n    // continue from the next one.\n    INode zoneNode \u003d dir.getInode(startId);\n    if (zoneNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Zone \" + startId + \" is deleted.\");\n    }\n    INodeDirectory parent \u003d zoneNode.asDirectory();\n    for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n      if (i \u003d\u003d startAfters.size() - 1) {\n        // last startAfter does not need to be resolved, since search for\n        // nextChild will cover that automatically.\n        break;\n      }\n      INode curr \u003d parent.getChild(startAfters.get(i),\n          Snapshot.CURRENT_STATE_ID);\n      if (curr \u003d\u003d null) {\n        // inode at this level has changed. Update startAfters to point to\n        // the next dir at the parent level (and dropping any startAfters\n        // at lower levels).\n        for (; i \u003c startAfters.size(); ++i) {\n          startAfters.remove(startAfters.size() - 1);\n        }\n        break;\n      }\n      parent \u003d curr.asDirectory();\n    }\n    return parent;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSTreeTraverser.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-13328. Abstract ReencryptionHandler recursive logic in separate class. Contributed by Surendra Singh Lilhore.\n",
          "commitDate": "10/04/18 11:05 AM",
          "commitName": "f89594f0b80e8efffdcb887daa4a18a2b0a228b3",
          "commitAuthor": "Rakesh Radhakrishnan",
          "commitDateOld": "10/04/18 7:58 AM",
          "commitNameOld": "cef8eb79810383f9970ed3713deecc18fbf0ffaa",
          "commitAuthorOld": "Ewan Higgs",
          "daysBetweenCommits": 0.13,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  private INode resolvePaths(final long zoneId, List\u003cbyte[]\u003e startAfters)\n+  private INode resolvePaths(final long startId, List\u003cbyte[]\u003e startAfters)\n       throws IOException {\n     // If the readlock was reacquired, we need to resolve the paths again\n     // in case things have changed. If our cursor file/dir is changed,\n     // continue from the next one.\n-    INode zoneNode \u003d dir.getInode(zoneId);\n+    INode zoneNode \u003d dir.getInode(startId);\n     if (zoneNode \u003d\u003d null) {\n-      throw new FileNotFoundException(\"Zone \" + zoneId + \" is deleted.\");\n+      throw new FileNotFoundException(\"Zone \" + startId + \" is deleted.\");\n     }\n     INodeDirectory parent \u003d zoneNode.asDirectory();\n     for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n       if (i \u003d\u003d startAfters.size() - 1) {\n         // last startAfter does not need to be resolved, since search for\n         // nextChild will cover that automatically.\n         break;\n       }\n-      INode curr \u003d\n-          parent.getChild(startAfters.get(i), Snapshot.CURRENT_STATE_ID);\n+      INode curr \u003d parent.getChild(startAfters.get(i),\n+          Snapshot.CURRENT_STATE_ID);\n       if (curr \u003d\u003d null) {\n         // inode at this level has changed. Update startAfters to point to\n         // the next dir at the parent level (and dropping any startAfters\n         // at lower levels).\n         for (; i \u003c startAfters.size(); ++i) {\n           startAfters.remove(startAfters.size() - 1);\n         }\n         break;\n       }\n       parent \u003d curr.asDirectory();\n     }\n     return parent;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INode resolvePaths(final long startId, List\u003cbyte[]\u003e startAfters)\n      throws IOException {\n    // If the readlock was reacquired, we need to resolve the paths again\n    // in case things have changed. If our cursor file/dir is changed,\n    // continue from the next one.\n    INode zoneNode \u003d dir.getInode(startId);\n    if (zoneNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Zone \" + startId + \" is deleted.\");\n    }\n    INodeDirectory parent \u003d zoneNode.asDirectory();\n    for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n      if (i \u003d\u003d startAfters.size() - 1) {\n        // last startAfter does not need to be resolved, since search for\n        // nextChild will cover that automatically.\n        break;\n      }\n      INode curr \u003d parent.getChild(startAfters.get(i),\n          Snapshot.CURRENT_STATE_ID);\n      if (curr \u003d\u003d null) {\n        // inode at this level has changed. Update startAfters to point to\n        // the next dir at the parent level (and dropping any startAfters\n        // at lower levels).\n        for (; i \u003c startAfters.size(); ++i) {\n          startAfters.remove(startAfters.size() - 1);\n        }\n        break;\n      }\n      parent \u003d curr.asDirectory();\n    }\n    return parent;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSTreeTraverser.java",
          "extendedDetails": {
            "oldValue": "[zoneId-long(modifiers-final), startAfters-List\u003cbyte[]\u003e]",
            "newValue": "[startId-long(modifiers-final), startAfters-List\u003cbyte[]\u003e]"
          }
        }
      ]
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,31 @@\n+  private INode resolvePaths(final long zoneId, List\u003cbyte[]\u003e startAfters)\n+      throws IOException {\n+    // If the readlock was reacquired, we need to resolve the paths again\n+    // in case things have changed. If our cursor file/dir is changed,\n+    // continue from the next one.\n+    INode zoneNode \u003d dir.getInode(zoneId);\n+    if (zoneNode \u003d\u003d null) {\n+      throw new FileNotFoundException(\"Zone \" + zoneId + \" is deleted.\");\n+    }\n+    INodeDirectory parent \u003d zoneNode.asDirectory();\n+    for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n+      if (i \u003d\u003d startAfters.size() - 1) {\n+        // last startAfter does not need to be resolved, since search for\n+        // nextChild will cover that automatically.\n+        break;\n+      }\n+      INode curr \u003d\n+          parent.getChild(startAfters.get(i), Snapshot.CURRENT_STATE_ID);\n+      if (curr \u003d\u003d null) {\n+        // inode at this level has changed. Update startAfters to point to\n+        // the next dir at the parent level (and dropping any startAfters\n+        // at lower levels).\n+        for (; i \u003c startAfters.size(); ++i) {\n+          startAfters.remove(startAfters.size() - 1);\n+        }\n+        break;\n+      }\n+      parent \u003d curr.asDirectory();\n+    }\n+    return parent;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private INode resolvePaths(final long zoneId, List\u003cbyte[]\u003e startAfters)\n      throws IOException {\n    // If the readlock was reacquired, we need to resolve the paths again\n    // in case things have changed. If our cursor file/dir is changed,\n    // continue from the next one.\n    INode zoneNode \u003d dir.getInode(zoneId);\n    if (zoneNode \u003d\u003d null) {\n      throw new FileNotFoundException(\"Zone \" + zoneId + \" is deleted.\");\n    }\n    INodeDirectory parent \u003d zoneNode.asDirectory();\n    for (int i \u003d 0; i \u003c startAfters.size(); ++i) {\n      if (i \u003d\u003d startAfters.size() - 1) {\n        // last startAfter does not need to be resolved, since search for\n        // nextChild will cover that automatically.\n        break;\n      }\n      INode curr \u003d\n          parent.getChild(startAfters.get(i), Snapshot.CURRENT_STATE_ID);\n      if (curr \u003d\u003d null) {\n        // inode at this level has changed. Update startAfters to point to\n        // the next dir at the parent level (and dropping any startAfters\n        // at lower levels).\n        for (; i \u003c startAfters.size(); ++i) {\n          startAfters.remove(startAfters.size() - 1);\n        }\n        break;\n      }\n      parent \u003d curr.asDirectory();\n    }\n    return parent;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionHandler.java"
    }
  }
}