{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SolverPreprocessor.java",
  "functionName": "mergeSkyline",
  "functionId": "mergeSkyline___resourceSkylines-List__ResourceSkyline__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java",
  "functionStartLine": 135,
  "functionEndLine": 177,
  "numCommitsSeen": 1,
  "timeTaken": 372,
  "changeHistory": [
    "625039ef20e6011ab360131d70582a6e4bf2ec1d"
  ],
  "changeHistoryShort": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "625039ef20e6011ab360131d70582a6e4bf2ec1d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14840. Tool to estimate resource requirements of an application pipeline based on prior executions. (Rui Li via Subru).\n",
      "commitDate": "25/10/17 3:51 PM",
      "commitName": "625039ef20e6011ab360131d70582a6e4bf2ec1d",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,43 @@\n+  public final ResourceSkyline mergeSkyline(\n+      final List\u003cResourceSkyline\u003e resourceSkylines) {\n+    // TODO:\n+    // rewrite this function with shift and merge once YARN-5328 is committed\n+    /** First, getHistory the pipeline submission time. */\n+    long pipelineSubmission \u003d Long.MAX_VALUE;\n+    for (int i \u003d 0; i \u003c resourceSkylines.size(); i++) {\n+      long jobSubmission \u003d resourceSkylines.get(i).getJobSubmissionTime();\n+      if (pipelineSubmission \u003e jobSubmission) {\n+        pipelineSubmission \u003d jobSubmission;\n+      }\n+    }\n+    final TreeMap\u003cLong, Resource\u003e resourceOverTime \u003d new TreeMap\u003c\u003e();\n+    final RLESparseResourceAllocation skylineListAgg \u003d\n+        new RLESparseResourceAllocation(resourceOverTime,\n+            new DefaultResourceCalculator());\n+    /**\n+     * Second, adjust different jobs\u0027 ResourceSkyline starting time based on\n+     * pipeline submission time, and merge them into one ResourceSkyline.\n+     */\n+    for (int i \u003d 0; i \u003c resourceSkylines.size(); i++) {\n+      long jobSubmission \u003d resourceSkylines.get(i).getJobSubmissionTime();\n+      long diff \u003d (jobSubmission - pipelineSubmission) / 1000;\n+      RLESparseResourceAllocation tmp \u003d\n+          resourceSkylines.get(i).getSkylineList();\n+      Object[] timePoints \u003d tmp.getCumulative().keySet().toArray();\n+      for (int j \u003d 0; j \u003c timePoints.length - 2; j++) {\n+        ReservationInterval riAdd \u003d\n+            new ReservationInterval(toIntExact((long) timePoints[j]) + diff,\n+                toIntExact((long) timePoints[j + 1] + diff));\n+        skylineListAgg.addInterval(riAdd,\n+            tmp.getCapacityAtTime(toIntExact((long) timePoints[j])));\n+      }\n+    }\n+    ResourceSkyline skylineAgg \u003d\n+        new ResourceSkyline(resourceSkylines.get(0).getJobId(),\n+            resourceSkylines.get(0).getJobInputDataSize(),\n+            resourceSkylines.get(0).getJobSubmissionTime(),\n+            resourceSkylines.get(0).getJobFinishTime(),\n+            resourceSkylines.get(0).getContainerSpec(), skylineListAgg);\n+\n+    return skylineAgg;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public final ResourceSkyline mergeSkyline(\n      final List\u003cResourceSkyline\u003e resourceSkylines) {\n    // TODO:\n    // rewrite this function with shift and merge once YARN-5328 is committed\n    /** First, getHistory the pipeline submission time. */\n    long pipelineSubmission \u003d Long.MAX_VALUE;\n    for (int i \u003d 0; i \u003c resourceSkylines.size(); i++) {\n      long jobSubmission \u003d resourceSkylines.get(i).getJobSubmissionTime();\n      if (pipelineSubmission \u003e jobSubmission) {\n        pipelineSubmission \u003d jobSubmission;\n      }\n    }\n    final TreeMap\u003cLong, Resource\u003e resourceOverTime \u003d new TreeMap\u003c\u003e();\n    final RLESparseResourceAllocation skylineListAgg \u003d\n        new RLESparseResourceAllocation(resourceOverTime,\n            new DefaultResourceCalculator());\n    /**\n     * Second, adjust different jobs\u0027 ResourceSkyline starting time based on\n     * pipeline submission time, and merge them into one ResourceSkyline.\n     */\n    for (int i \u003d 0; i \u003c resourceSkylines.size(); i++) {\n      long jobSubmission \u003d resourceSkylines.get(i).getJobSubmissionTime();\n      long diff \u003d (jobSubmission - pipelineSubmission) / 1000;\n      RLESparseResourceAllocation tmp \u003d\n          resourceSkylines.get(i).getSkylineList();\n      Object[] timePoints \u003d tmp.getCumulative().keySet().toArray();\n      for (int j \u003d 0; j \u003c timePoints.length - 2; j++) {\n        ReservationInterval riAdd \u003d\n            new ReservationInterval(toIntExact((long) timePoints[j]) + diff,\n                toIntExact((long) timePoints[j + 1] + diff));\n        skylineListAgg.addInterval(riAdd,\n            tmp.getCapacityAtTime(toIntExact((long) timePoints[j])));\n      }\n    }\n    ResourceSkyline skylineAgg \u003d\n        new ResourceSkyline(resourceSkylines.get(0).getJobId(),\n            resourceSkylines.get(0).getJobInputDataSize(),\n            resourceSkylines.get(0).getJobSubmissionTime(),\n            resourceSkylines.get(0).getJobFinishTime(),\n            resourceSkylines.get(0).getContainerSpec(), skylineListAgg);\n\n    return skylineAgg;\n  }",
      "path": "hadoop-tools/hadoop-resourceestimator/src/main/java/org/apache/hadoop/resourceestimator/solver/preprocess/SolverPreprocessor.java"
    }
  }
}