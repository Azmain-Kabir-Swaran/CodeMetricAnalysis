{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoInputStream.java",
  "functionName": "seek",
  "functionId": "seek___pos-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
  "functionStartLine": 520,
  "functionEndLine": 542,
  "numCommitsSeen": 19,
  "timeTaken": 2156,
  "changeHistory": [
    "13b427fc05da7352fadd7214adfa09c326bba238",
    "4877f0aa518832c37a06e6d3bd2c9552fc3141dc",
    "843ee8d59d8bacbca0d87ccf0790772e39d16138",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d"
  ],
  "changeHistoryShort": {
    "13b427fc05da7352fadd7214adfa09c326bba238": "Ybodychange",
    "4877f0aa518832c37a06e6d3bd2c9552fc3141dc": "Ybodychange",
    "843ee8d59d8bacbca0d87ccf0790772e39d16138": "Ybodychange",
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": "Ybodychange",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13b427fc05da7352fadd7214adfa09c326bba238": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14564: Add libhdfs APIs for readFully; add readFully to ByteBufferPositionedReadable (#963) Contributed by Sahil Takiar.\n\nReviewed-by: Siyao Meng \u003csmeng@cloudera.com\u003e",
      "commitDate": "27/09/19 12:25 PM",
      "commitName": "13b427fc05da7352fadd7214adfa09c326bba238",
      "commitAuthor": "Sahil Takiar",
      "commitDateOld": "30/04/19 2:52 PM",
      "commitNameOld": "4877f0aa518832c37a06e6d3bd2c9552fc3141dc",
      "commitAuthorOld": "Sahil Takiar",
      "daysBetweenCommits": 149.9,
      "commitsBetweenForRepo": 1211,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void seek(long pos) throws IOException {\n     if (pos \u003c 0) {\n       throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n     }\n     checkStream();\n     /*\n      * If data of target pos in the underlying stream has already been read\n      * and decrypted in outBuffer, we just need to re-position outBuffer.\n      */\n     if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n       int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n       if (forward \u003e 0) {\n         outBuffer.position(outBuffer.position() + forward);\n       }\n     } else {\n       if (!(in instanceof Seekable)) {\n-        throw new UnsupportedOperationException(\"This stream does not \" +\n-                \"support seek.\");\n+        throw new UnsupportedOperationException(in.getClass().getCanonicalName()\n+            + \" does not support seek.\");\n       }\n       ((Seekable) in).seek(pos);\n       resetStreamOffset(pos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if (pos \u003c 0) {\n      throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n    }\n    checkStream();\n    /*\n     * If data of target pos in the underlying stream has already been read\n     * and decrypted in outBuffer, we just need to re-position outBuffer.\n     */\n    if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n      int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n      if (forward \u003e 0) {\n        outBuffer.position(outBuffer.position() + forward);\n      }\n    } else {\n      if (!(in instanceof Seekable)) {\n        throw new UnsupportedOperationException(in.getClass().getCanonicalName()\n            + \" does not support seek.\");\n      }\n      ((Seekable) in).seek(pos);\n      resetStreamOffset(pos);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "4877f0aa518832c37a06e6d3bd2c9552fc3141dc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3246: pRead equivalent for direct read path (#597)\n\nHDFS-3246: pRead equivalent for direct read path\r\n\r\nContributed by Sahil Takiar",
      "commitDate": "30/04/19 2:52 PM",
      "commitName": "4877f0aa518832c37a06e6d3bd2c9552fc3141dc",
      "commitAuthor": "Sahil Takiar",
      "commitDateOld": "06/03/19 3:04 PM",
      "commitNameOld": "618e009ac0ab14b24c0c19153778173ee3142292",
      "commitAuthorOld": "Sahil Takiar",
      "daysBetweenCommits": 54.95,
      "commitsBetweenForRepo": 370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n   public void seek(long pos) throws IOException {\n     if (pos \u003c 0) {\n       throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n     }\n     checkStream();\n-    try {\n-      /*\n-       * If data of target pos in the underlying stream has already been read \n-       * and decrypted in outBuffer, we just need to re-position outBuffer.\n-       */\n-      if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n-        int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n-        if (forward \u003e 0) {\n-          outBuffer.position(outBuffer.position() + forward);\n-        }\n-      } else {\n-        ((Seekable) in).seek(pos);\n-        resetStreamOffset(pos);\n+    /*\n+     * If data of target pos in the underlying stream has already been read\n+     * and decrypted in outBuffer, we just need to re-position outBuffer.\n+     */\n+    if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n+      int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n+      if (forward \u003e 0) {\n+        outBuffer.position(outBuffer.position() + forward);\n       }\n-    } catch (ClassCastException e) {\n-      throw new UnsupportedOperationException(\"This stream does not support \" +\n-          \"seek.\");\n+    } else {\n+      if (!(in instanceof Seekable)) {\n+        throw new UnsupportedOperationException(\"This stream does not \" +\n+                \"support seek.\");\n+      }\n+      ((Seekable) in).seek(pos);\n+      resetStreamOffset(pos);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if (pos \u003c 0) {\n      throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n    }\n    checkStream();\n    /*\n     * If data of target pos in the underlying stream has already been read\n     * and decrypted in outBuffer, we just need to re-position outBuffer.\n     */\n    if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n      int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n      if (forward \u003e 0) {\n        outBuffer.position(outBuffer.position() + forward);\n      }\n    } else {\n      if (!(in instanceof Seekable)) {\n        throw new UnsupportedOperationException(\"This stream does not \" +\n                \"support seek.\");\n      }\n      ((Seekable) in).seek(pos);\n      resetStreamOffset(pos);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "843ee8d59d8bacbca0d87ccf0790772e39d16138": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12994. Specify PositionedReadable, add contract tests, fix problems. Contributed by Steve Loughran.\n",
      "commitDate": "08/04/16 1:36 PM",
      "commitName": "843ee8d59d8bacbca0d87ccf0790772e39d16138",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "04/03/15 2:38 PM",
      "commitNameOld": "5e9b8144d54f586803212a0bdd8b1c25bdbb1e97",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 400.92,
      "commitsBetweenForRepo": 3062,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   public void seek(long pos) throws IOException {\n-    Preconditions.checkArgument(pos \u003e\u003d 0, \"Cannot seek to negative offset.\");\n+    if (pos \u003c 0) {\n+      throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n+    }\n     checkStream();\n     try {\n       /*\n        * If data of target pos in the underlying stream has already been read \n        * and decrypted in outBuffer, we just need to re-position outBuffer.\n        */\n       if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n         int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n         if (forward \u003e 0) {\n           outBuffer.position(outBuffer.position() + forward);\n         }\n       } else {\n         ((Seekable) in).seek(pos);\n         resetStreamOffset(pos);\n       }\n     } catch (ClassCastException e) {\n       throw new UnsupportedOperationException(\"This stream does not support \" +\n           \"seek.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    if (pos \u003c 0) {\n      throw new EOFException(FSExceptionMessages.NEGATIVE_SEEK);\n    }\n    checkStream();\n    try {\n      /*\n       * If data of target pos in the underlying stream has already been read \n       * and decrypted in outBuffer, we just need to re-position outBuffer.\n       */\n      if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n        int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n        if (forward \u003e 0) {\n          outBuffer.position(outBuffer.position() + forward);\n        }\n      } else {\n        ((Seekable) in).seek(pos);\n        resetStreamOffset(pos);\n      }\n    } catch (ClassCastException e) {\n      throw new UnsupportedOperationException(\"This stream does not support \" +\n          \"seek.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10628. Javadoc and few code style improvement for Crypto input and output streams. (yliu via clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 3:09 PM",
      "commitName": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "23/05/14 6:19 PM",
      "commitNameOld": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthorOld": "Yi Liu",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,22 @@\n   public void seek(long pos) throws IOException {\n     Preconditions.checkArgument(pos \u003e\u003d 0, \"Cannot seek to negative offset.\");\n     checkStream();\n     try {\n-      // If target pos we have already read and decrypt.\n+      /*\n+       * If data of target pos in the underlying stream has already been read \n+       * and decrypted in outBuffer, we just need to re-position outBuffer.\n+       */\n       if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n         int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n         if (forward \u003e 0) {\n           outBuffer.position(outBuffer.position() + forward);\n         }\n       } else {\n         ((Seekable) in).seek(pos);\n         resetStreamOffset(pos);\n       }\n     } catch (ClassCastException e) {\n       throw new UnsupportedOperationException(\"This stream does not support \" +\n           \"seek.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    Preconditions.checkArgument(pos \u003e\u003d 0, \"Cannot seek to negative offset.\");\n    checkStream();\n    try {\n      /*\n       * If data of target pos in the underlying stream has already been read \n       * and decrypted in outBuffer, we just need to re-position outBuffer.\n       */\n      if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n        int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n        if (forward \u003e 0) {\n          outBuffer.position(outBuffer.position() + forward);\n        }\n      } else {\n        ((Seekable) in).seek(pos);\n        resetStreamOffset(pos);\n      }\n    } catch (ClassCastException e) {\n      throw new UnsupportedOperationException(\"This stream does not support \" +\n          \"seek.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java",
      "extendedDetails": {}
    },
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10603. Crypto input and output streams implementing Hadoop stream interfaces. Contributed by Yi Liu and Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1597230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 6:19 PM",
      "commitName": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthor": "Yi Liu",
      "diff": "@@ -0,0 +1,19 @@\n+  public void seek(long pos) throws IOException {\n+    Preconditions.checkArgument(pos \u003e\u003d 0, \"Cannot seek to negative offset.\");\n+    checkStream();\n+    try {\n+      // If target pos we have already read and decrypt.\n+      if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n+        int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n+        if (forward \u003e 0) {\n+          outBuffer.position(outBuffer.position() + forward);\n+        }\n+      } else {\n+        ((Seekable) in).seek(pos);\n+        resetStreamOffset(pos);\n+      }\n+    } catch (ClassCastException e) {\n+      throw new UnsupportedOperationException(\"This stream does not support \" +\n+          \"seek.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void seek(long pos) throws IOException {\n    Preconditions.checkArgument(pos \u003e\u003d 0, \"Cannot seek to negative offset.\");\n    checkStream();\n    try {\n      // If target pos we have already read and decrypt.\n      if (pos \u003c\u003d streamOffset \u0026\u0026 pos \u003e\u003d (streamOffset - outBuffer.remaining())) {\n        int forward \u003d (int) (pos - (streamOffset - outBuffer.remaining()));\n        if (forward \u003e 0) {\n          outBuffer.position(outBuffer.position() + forward);\n        }\n      } else {\n        ((Seekable) in).seek(pos);\n        resetStreamOffset(pos);\n      }\n    } catch (ClassCastException e) {\n      throw new UnsupportedOperationException(\"This stream does not support \" +\n          \"seek.\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoInputStream.java"
    }
  }
}