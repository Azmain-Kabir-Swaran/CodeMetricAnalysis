{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuxServices.java",
  "functionName": "createAuxService",
  "functionId": "createAuxService___service-AuxServiceRecord__conf-Configuration__fromConfiguration-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java",
  "functionStartLine": 256,
  "functionEndLine": 299,
  "numCommitsSeen": 28,
  "timeTaken": 2132,
  "changeHistory": [
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61"
  ],
  "changeHistoryShort": {
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "18/12/18 2:05 PM",
      "commitName": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,44 @@\n+  private AuxiliaryService createAuxService(AuxServiceRecord service,\n+      Configuration conf, boolean fromConfiguration) throws IOException,\n+      ClassNotFoundException {\n+    final String sName \u003d service.getName();\n+    final String className \u003d getClassName(service);\n+    if (className \u003d\u003d null || className.isEmpty()) {\n+      throw new YarnRuntimeException(\"Class name not provided for auxiliary \" +\n+          \"service \" + sName);\n+    }\n+    if (fromConfiguration) {\n+      // aux services from the configuration have an additional configuration\n+      // option specifying a local classpath that will not be localized\n+      final String appLocalClassPath \u003d conf.get(String.format(\n+          YarnConfiguration.NM_AUX_SERVICES_CLASSPATH, sName));\n+      if (appLocalClassPath !\u003d null \u0026\u0026 !appLocalClassPath.isEmpty()) {\n+        return createAuxServiceFromLocalClasspath(service, appLocalClassPath,\n+            conf);\n+      }\n+    }\n+    AuxServiceConfiguration serviceConf \u003d service.getConfiguration();\n+    List\u003cPath\u003e destFiles \u003d new ArrayList\u003c\u003e();\n+    if (serviceConf !\u003d null) {\n+      List\u003cAuxServiceFile\u003e files \u003d serviceConf.getFiles();\n+      if (files !\u003d null) {\n+        for (AuxServiceFile file : files) {\n+          // localize file (if needed) and add it to the list of paths that\n+          // will become the classpath\n+          destFiles.add(maybeDownloadJars(sName, className, file.getSrcFile(),\n+              file.getType(), conf));\n+        }\n+      }\n+    }\n+\n+    if (destFiles.size() \u003e 0) {\n+      // create aux service using a custom localized classpath\n+      LOG.info(\"The aux service:\" + sName\n+          + \" is using the custom classloader with classpath \" + destFiles);\n+      return AuxiliaryServiceWithCustomClassLoader.getInstance(conf,\n+          className, StringUtils.join(File.pathSeparatorChar, destFiles),\n+          getSystemClasses(service, className));\n+    } else {\n+      return createAuxServiceFromConfiguration(service);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AuxiliaryService createAuxService(AuxServiceRecord service,\n      Configuration conf, boolean fromConfiguration) throws IOException,\n      ClassNotFoundException {\n    final String sName \u003d service.getName();\n    final String className \u003d getClassName(service);\n    if (className \u003d\u003d null || className.isEmpty()) {\n      throw new YarnRuntimeException(\"Class name not provided for auxiliary \" +\n          \"service \" + sName);\n    }\n    if (fromConfiguration) {\n      // aux services from the configuration have an additional configuration\n      // option specifying a local classpath that will not be localized\n      final String appLocalClassPath \u003d conf.get(String.format(\n          YarnConfiguration.NM_AUX_SERVICES_CLASSPATH, sName));\n      if (appLocalClassPath !\u003d null \u0026\u0026 !appLocalClassPath.isEmpty()) {\n        return createAuxServiceFromLocalClasspath(service, appLocalClassPath,\n            conf);\n      }\n    }\n    AuxServiceConfiguration serviceConf \u003d service.getConfiguration();\n    List\u003cPath\u003e destFiles \u003d new ArrayList\u003c\u003e();\n    if (serviceConf !\u003d null) {\n      List\u003cAuxServiceFile\u003e files \u003d serviceConf.getFiles();\n      if (files !\u003d null) {\n        for (AuxServiceFile file : files) {\n          // localize file (if needed) and add it to the list of paths that\n          // will become the classpath\n          destFiles.add(maybeDownloadJars(sName, className, file.getSrcFile(),\n              file.getType(), conf));\n        }\n      }\n    }\n\n    if (destFiles.size() \u003e 0) {\n      // create aux service using a custom localized classpath\n      LOG.info(\"The aux service:\" + sName\n          + \" is using the custom classloader with classpath \" + destFiles);\n      return AuxiliaryServiceWithCustomClassLoader.getInstance(conf,\n          className, StringUtils.join(File.pathSeparatorChar, destFiles),\n          getSystemClasses(service, className));\n    } else {\n      return createAuxServiceFromConfiguration(service);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxServices.java"
    }
  }
}