{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcServerFactoryPBImpl.java",
  "functionName": "getServer",
  "functionId": "getServer___protocol-Class__?____instance-Object__addr-InetSocketAddress__conf-Configuration__secretManager-SecretManager__? extends TokenIdentifier____numHandlers-int__portRangeConfig-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java",
  "functionStartLine": 74,
  "functionEndLine": 141,
  "numCommitsSeen": 14,
  "timeTaken": 1566,
  "changeHistory": [
    "8b336632acad10e45d029596c5e3196e1857d891",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "1fac1ac98cf83e90d70004a27454bc2a64157c8c",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "f340d6c894da452d91491f9fbfc0df9327ec083c"
  ],
  "changeHistoryShort": {
    "8b336632acad10e45d029596c5e3196e1857d891": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ybodychange",
    "1fac1ac98cf83e90d70004a27454bc2a64157c8c": "Yexceptionschange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "f340d6c894da452d91491f9fbfc0df9327ec083c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b336632acad10e45d029596c5e3196e1857d891": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6771. Use classloader inside configuration class to make new\nclasses. Contributed by Jongyoul Lee.\n",
      "commitDate": "20/09/17 10:22 PM",
      "commitName": "8b336632acad10e45d029596c5e3196e1857d891",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "16/06/13 8:32 PM",
      "commitNameOld": "f5f8f3bca4eeaedeff8181812452ec363c4db744",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1557.08,
      "commitsBetweenForRepo": 11245,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   public Server getServer(Class\u003c?\u003e protocol, Object instance,\n       InetSocketAddress addr, Configuration conf,\n       SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n       String portRangeConfig) {\n     \n     Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n     if (constructor \u003d\u003d null) {\n       Class\u003c?\u003e pbServiceImplClazz \u003d null;\n       try {\n-        pbServiceImplClazz \u003d localConf\n+        pbServiceImplClazz \u003d conf\n             .getClassByName(getPbServiceImplClassName(protocol));\n       } catch (ClassNotFoundException e) {\n         throw new YarnRuntimeException(\"Failed to load class: [\"\n             + getPbServiceImplClassName(protocol) + \"]\", e);\n       }\n       try {\n         constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n         constructor.setAccessible(true);\n         serviceCache.putIfAbsent(protocol, constructor);\n       } catch (NoSuchMethodException e) {\n         throw new YarnRuntimeException(\"Could not find constructor with params: \"\n             + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n             + Configuration.class, e);\n       }\n     }\n     \n     Object service \u003d null;\n     try {\n       service \u003d constructor.newInstance(instance);\n     } catch (InvocationTargetException e) {\n       throw new YarnRuntimeException(e);\n     } catch (IllegalAccessException e) {\n       throw new YarnRuntimeException(e);\n     } catch (InstantiationException e) {\n       throw new YarnRuntimeException(e);\n     }\n \n     Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n     Method method \u003d protoCache.get(protocol);\n     if (method \u003d\u003d null) {\n       Class\u003c?\u003e protoClazz \u003d null;\n       try {\n-        protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n+        protoClazz \u003d conf.getClassByName(getProtoClassName(protocol));\n       } catch (ClassNotFoundException e) {\n         throw new YarnRuntimeException(\"Failed to load class: [\"\n             + getProtoClassName(protocol) + \"]\", e);\n       }\n       try {\n         method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n             pbProtocol.getInterfaces()[0]);\n         method.setAccessible(true);\n         protoCache.putIfAbsent(protocol, method);\n       } catch (NoSuchMethodException e) {\n         throw new YarnRuntimeException(e);\n       }\n     }\n     \n     try {\n       return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n           (BlockingService)method.invoke(null, service), portRangeConfig);\n     } catch (InvocationTargetException e) {\n       throw new YarnRuntimeException(e);\n     } catch (IllegalAccessException e) {\n       throw new YarnRuntimeException(e);\n     } catch (IOException e) {\n       throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Server getServer(Class\u003c?\u003e protocol, Object instance,\n      InetSocketAddress addr, Configuration conf,\n      SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n      String portRangeConfig) {\n    \n    Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n    if (constructor \u003d\u003d null) {\n      Class\u003c?\u003e pbServiceImplClazz \u003d null;\n      try {\n        pbServiceImplClazz \u003d conf\n            .getClassByName(getPbServiceImplClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnRuntimeException(\"Failed to load class: [\"\n            + getPbServiceImplClassName(protocol) + \"]\", e);\n      }\n      try {\n        constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n        constructor.setAccessible(true);\n        serviceCache.putIfAbsent(protocol, constructor);\n      } catch (NoSuchMethodException e) {\n        throw new YarnRuntimeException(\"Could not find constructor with params: \"\n            + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n            + Configuration.class, e);\n      }\n    }\n    \n    Object service \u003d null;\n    try {\n      service \u003d constructor.newInstance(instance);\n    } catch (InvocationTargetException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnRuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new YarnRuntimeException(e);\n    }\n\n    Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n    Method method \u003d protoCache.get(protocol);\n    if (method \u003d\u003d null) {\n      Class\u003c?\u003e protoClazz \u003d null;\n      try {\n        protoClazz \u003d conf.getClassByName(getProtoClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnRuntimeException(\"Failed to load class: [\"\n            + getProtoClassName(protocol) + \"]\", e);\n      }\n      try {\n        method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n            pbProtocol.getInterfaces()[0]);\n        method.setAccessible(true);\n        protoCache.putIfAbsent(protocol, method);\n      } catch (NoSuchMethodException e) {\n        throw new YarnRuntimeException(e);\n      }\n    }\n    \n    try {\n      return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n          (BlockingService)method.invoke(null, service), portRangeConfig);\n    } catch (InvocationTargetException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/05/13 3:51 PM",
      "commitNameOld": "1fac1ac98cf83e90d70004a27454bc2a64157c8c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.22,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   public Server getServer(Class\u003c?\u003e protocol, Object instance,\n       InetSocketAddress addr, Configuration conf,\n       SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n       String portRangeConfig) {\n     \n     Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n     if (constructor \u003d\u003d null) {\n       Class\u003c?\u003e pbServiceImplClazz \u003d null;\n       try {\n         pbServiceImplClazz \u003d localConf\n             .getClassByName(getPbServiceImplClassName(protocol));\n       } catch (ClassNotFoundException e) {\n-        throw new YarnException(\"Failed to load class: [\"\n+        throw new YarnRuntimeException(\"Failed to load class: [\"\n             + getPbServiceImplClassName(protocol) + \"]\", e);\n       }\n       try {\n         constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n         constructor.setAccessible(true);\n         serviceCache.putIfAbsent(protocol, constructor);\n       } catch (NoSuchMethodException e) {\n-        throw new YarnException(\"Could not find constructor with params: \"\n+        throw new YarnRuntimeException(\"Could not find constructor with params: \"\n             + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n             + Configuration.class, e);\n       }\n     }\n     \n     Object service \u003d null;\n     try {\n       service \u003d constructor.newInstance(instance);\n     } catch (InvocationTargetException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     } catch (IllegalAccessException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     } catch (InstantiationException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     }\n \n     Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n     Method method \u003d protoCache.get(protocol);\n     if (method \u003d\u003d null) {\n       Class\u003c?\u003e protoClazz \u003d null;\n       try {\n         protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n       } catch (ClassNotFoundException e) {\n-        throw new YarnException(\"Failed to load class: [\"\n+        throw new YarnRuntimeException(\"Failed to load class: [\"\n             + getProtoClassName(protocol) + \"]\", e);\n       }\n       try {\n         method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n             pbProtocol.getInterfaces()[0]);\n         method.setAccessible(true);\n         protoCache.putIfAbsent(protocol, method);\n       } catch (NoSuchMethodException e) {\n-        throw new YarnException(e);\n+        throw new YarnRuntimeException(e);\n       }\n     }\n     \n     try {\n       return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n           (BlockingService)method.invoke(null, service), portRangeConfig);\n     } catch (InvocationTargetException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     } catch (IllegalAccessException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     } catch (IOException e) {\n-      throw new YarnException(e);\n+      throw new YarnRuntimeException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Server getServer(Class\u003c?\u003e protocol, Object instance,\n      InetSocketAddress addr, Configuration conf,\n      SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n      String portRangeConfig) {\n    \n    Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n    if (constructor \u003d\u003d null) {\n      Class\u003c?\u003e pbServiceImplClazz \u003d null;\n      try {\n        pbServiceImplClazz \u003d localConf\n            .getClassByName(getPbServiceImplClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnRuntimeException(\"Failed to load class: [\"\n            + getPbServiceImplClassName(protocol) + \"]\", e);\n      }\n      try {\n        constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n        constructor.setAccessible(true);\n        serviceCache.putIfAbsent(protocol, constructor);\n      } catch (NoSuchMethodException e) {\n        throw new YarnRuntimeException(\"Could not find constructor with params: \"\n            + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n            + Configuration.class, e);\n      }\n    }\n    \n    Object service \u003d null;\n    try {\n      service \u003d constructor.newInstance(instance);\n    } catch (InvocationTargetException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnRuntimeException(e);\n    } catch (InstantiationException e) {\n      throw new YarnRuntimeException(e);\n    }\n\n    Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n    Method method \u003d protoCache.get(protocol);\n    if (method \u003d\u003d null) {\n      Class\u003c?\u003e protoClazz \u003d null;\n      try {\n        protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnRuntimeException(\"Failed to load class: [\"\n            + getProtoClassName(protocol) + \"]\", e);\n      }\n      try {\n        method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n            pbProtocol.getInterfaces()[0]);\n        method.setAccessible(true);\n        protoCache.putIfAbsent(protocol, method);\n      } catch (NoSuchMethodException e) {\n        throw new YarnRuntimeException(e);\n      }\n    }\n    \n    try {\n      return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n          (BlockingService)method.invoke(null, service), portRangeConfig);\n    } catch (InvocationTargetException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnRuntimeException(e);\n    } catch (IOException e) {\n      throw new YarnRuntimeException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java",
      "extendedDetails": {}
    },
    "1fac1ac98cf83e90d70004a27454bc2a64157c8c": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-708. Moved RecordFactory classes to hadoop-yarn-api, and put some miscellaneous fixes to the interfaces. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485478 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/05/13 3:51 PM",
      "commitName": "1fac1ac98cf83e90d70004a27454bc2a64157c8c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/09/12 3:24 PM",
      "commitNameOld": "60af999c738dfc921d90bbde303081c9f1c88941",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 260.02,
      "commitsBetweenForRepo": 1463,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,68 @@\n   public Server getServer(Class\u003c?\u003e protocol, Object instance,\n       InetSocketAddress addr, Configuration conf,\n       SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n-      String portRangeConfig)\n-      throws YarnException {\n+      String portRangeConfig) {\n     \n     Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n     if (constructor \u003d\u003d null) {\n       Class\u003c?\u003e pbServiceImplClazz \u003d null;\n       try {\n         pbServiceImplClazz \u003d localConf\n             .getClassByName(getPbServiceImplClassName(protocol));\n       } catch (ClassNotFoundException e) {\n         throw new YarnException(\"Failed to load class: [\"\n             + getPbServiceImplClassName(protocol) + \"]\", e);\n       }\n       try {\n         constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n         constructor.setAccessible(true);\n         serviceCache.putIfAbsent(protocol, constructor);\n       } catch (NoSuchMethodException e) {\n         throw new YarnException(\"Could not find constructor with params: \"\n             + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n             + Configuration.class, e);\n       }\n     }\n     \n     Object service \u003d null;\n     try {\n       service \u003d constructor.newInstance(instance);\n     } catch (InvocationTargetException e) {\n       throw new YarnException(e);\n     } catch (IllegalAccessException e) {\n       throw new YarnException(e);\n     } catch (InstantiationException e) {\n       throw new YarnException(e);\n     }\n \n     Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n     Method method \u003d protoCache.get(protocol);\n     if (method \u003d\u003d null) {\n       Class\u003c?\u003e protoClazz \u003d null;\n       try {\n         protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n       } catch (ClassNotFoundException e) {\n         throw new YarnException(\"Failed to load class: [\"\n             + getProtoClassName(protocol) + \"]\", e);\n       }\n       try {\n         method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n             pbProtocol.getInterfaces()[0]);\n         method.setAccessible(true);\n         protoCache.putIfAbsent(protocol, method);\n       } catch (NoSuchMethodException e) {\n         throw new YarnException(e);\n       }\n     }\n     \n     try {\n       return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n           (BlockingService)method.invoke(null, service), portRangeConfig);\n     } catch (InvocationTargetException e) {\n       throw new YarnException(e);\n     } catch (IllegalAccessException e) {\n       throw new YarnException(e);\n     } catch (IOException e) {\n       throw new YarnException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Server getServer(Class\u003c?\u003e protocol, Object instance,\n      InetSocketAddress addr, Configuration conf,\n      SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n      String portRangeConfig) {\n    \n    Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n    if (constructor \u003d\u003d null) {\n      Class\u003c?\u003e pbServiceImplClazz \u003d null;\n      try {\n        pbServiceImplClazz \u003d localConf\n            .getClassByName(getPbServiceImplClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnException(\"Failed to load class: [\"\n            + getPbServiceImplClassName(protocol) + \"]\", e);\n      }\n      try {\n        constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n        constructor.setAccessible(true);\n        serviceCache.putIfAbsent(protocol, constructor);\n      } catch (NoSuchMethodException e) {\n        throw new YarnException(\"Could not find constructor with params: \"\n            + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n            + Configuration.class, e);\n      }\n    }\n    \n    Object service \u003d null;\n    try {\n      service \u003d constructor.newInstance(instance);\n    } catch (InvocationTargetException e) {\n      throw new YarnException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnException(e);\n    } catch (InstantiationException e) {\n      throw new YarnException(e);\n    }\n\n    Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n    Method method \u003d protoCache.get(protocol);\n    if (method \u003d\u003d null) {\n      Class\u003c?\u003e protoClazz \u003d null;\n      try {\n        protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnException(\"Failed to load class: [\"\n            + getProtoClassName(protocol) + \"]\", e);\n      }\n      try {\n        method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n            pbProtocol.getInterfaces()[0]);\n        method.setAccessible(true);\n        protoCache.putIfAbsent(protocol, method);\n      } catch (NoSuchMethodException e) {\n        throw new YarnException(e);\n      }\n    }\n    \n    try {\n      return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n          (BlockingService)method.invoke(null, service), portRangeConfig);\n    } catch (InvocationTargetException e) {\n      throw new YarnException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnException(e);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java",
      "extendedDetails": {
        "oldValue": "[YarnException]",
        "newValue": "[]"
      }
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Server getServer(Class\u003c?\u003e protocol, Object instance,\n      InetSocketAddress addr, Configuration conf,\n      SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n      String portRangeConfig)\n      throws YarnException {\n    \n    Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n    if (constructor \u003d\u003d null) {\n      Class\u003c?\u003e pbServiceImplClazz \u003d null;\n      try {\n        pbServiceImplClazz \u003d localConf\n            .getClassByName(getPbServiceImplClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnException(\"Failed to load class: [\"\n            + getPbServiceImplClassName(protocol) + \"]\", e);\n      }\n      try {\n        constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n        constructor.setAccessible(true);\n        serviceCache.putIfAbsent(protocol, constructor);\n      } catch (NoSuchMethodException e) {\n        throw new YarnException(\"Could not find constructor with params: \"\n            + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n            + Configuration.class, e);\n      }\n    }\n    \n    Object service \u003d null;\n    try {\n      service \u003d constructor.newInstance(instance);\n    } catch (InvocationTargetException e) {\n      throw new YarnException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnException(e);\n    } catch (InstantiationException e) {\n      throw new YarnException(e);\n    }\n\n    Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n    Method method \u003d protoCache.get(protocol);\n    if (method \u003d\u003d null) {\n      Class\u003c?\u003e protoClazz \u003d null;\n      try {\n        protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnException(\"Failed to load class: [\"\n            + getProtoClassName(protocol) + \"]\", e);\n      }\n      try {\n        method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n            pbProtocol.getInterfaces()[0]);\n        method.setAccessible(true);\n        protoCache.putIfAbsent(protocol, method);\n      } catch (NoSuchMethodException e) {\n        throw new YarnException(e);\n      }\n    }\n    \n    try {\n      return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n          (BlockingService)method.invoke(null, service), portRangeConfig);\n    } catch (InvocationTargetException e) {\n      throw new YarnException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnException(e);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java"
      }
    },
    "f340d6c894da452d91491f9fbfc0df9327ec083c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4079. Allow MR AppMaster to limit ephemeral port range.(bobby via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329694 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/12 6:03 AM",
      "commitName": "f340d6c894da452d91491f9fbfc0df9327ec083c",
      "commitAuthor": "Thomas Graves",
      "diff": "@@ -0,0 +1,69 @@\n+  public Server getServer(Class\u003c?\u003e protocol, Object instance,\n+      InetSocketAddress addr, Configuration conf,\n+      SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n+      String portRangeConfig)\n+      throws YarnException {\n+    \n+    Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n+    if (constructor \u003d\u003d null) {\n+      Class\u003c?\u003e pbServiceImplClazz \u003d null;\n+      try {\n+        pbServiceImplClazz \u003d localConf\n+            .getClassByName(getPbServiceImplClassName(protocol));\n+      } catch (ClassNotFoundException e) {\n+        throw new YarnException(\"Failed to load class: [\"\n+            + getPbServiceImplClassName(protocol) + \"]\", e);\n+      }\n+      try {\n+        constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n+        constructor.setAccessible(true);\n+        serviceCache.putIfAbsent(protocol, constructor);\n+      } catch (NoSuchMethodException e) {\n+        throw new YarnException(\"Could not find constructor with params: \"\n+            + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n+            + Configuration.class, e);\n+      }\n+    }\n+    \n+    Object service \u003d null;\n+    try {\n+      service \u003d constructor.newInstance(instance);\n+    } catch (InvocationTargetException e) {\n+      throw new YarnException(e);\n+    } catch (IllegalAccessException e) {\n+      throw new YarnException(e);\n+    } catch (InstantiationException e) {\n+      throw new YarnException(e);\n+    }\n+\n+    Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n+    Method method \u003d protoCache.get(protocol);\n+    if (method \u003d\u003d null) {\n+      Class\u003c?\u003e protoClazz \u003d null;\n+      try {\n+        protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n+      } catch (ClassNotFoundException e) {\n+        throw new YarnException(\"Failed to load class: [\"\n+            + getProtoClassName(protocol) + \"]\", e);\n+      }\n+      try {\n+        method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n+            pbProtocol.getInterfaces()[0]);\n+        method.setAccessible(true);\n+        protoCache.putIfAbsent(protocol, method);\n+      } catch (NoSuchMethodException e) {\n+        throw new YarnException(e);\n+      }\n+    }\n+    \n+    try {\n+      return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n+          (BlockingService)method.invoke(null, service), portRangeConfig);\n+    } catch (InvocationTargetException e) {\n+      throw new YarnException(e);\n+    } catch (IllegalAccessException e) {\n+      throw new YarnException(e);\n+    } catch (IOException e) {\n+      throw new YarnException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Server getServer(Class\u003c?\u003e protocol, Object instance,\n      InetSocketAddress addr, Configuration conf,\n      SecretManager\u003c? extends TokenIdentifier\u003e secretManager, int numHandlers,\n      String portRangeConfig)\n      throws YarnException {\n    \n    Constructor\u003c?\u003e constructor \u003d serviceCache.get(protocol);\n    if (constructor \u003d\u003d null) {\n      Class\u003c?\u003e pbServiceImplClazz \u003d null;\n      try {\n        pbServiceImplClazz \u003d localConf\n            .getClassByName(getPbServiceImplClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnException(\"Failed to load class: [\"\n            + getPbServiceImplClassName(protocol) + \"]\", e);\n      }\n      try {\n        constructor \u003d pbServiceImplClazz.getConstructor(protocol);\n        constructor.setAccessible(true);\n        serviceCache.putIfAbsent(protocol, constructor);\n      } catch (NoSuchMethodException e) {\n        throw new YarnException(\"Could not find constructor with params: \"\n            + Long.TYPE + \", \" + InetSocketAddress.class + \", \"\n            + Configuration.class, e);\n      }\n    }\n    \n    Object service \u003d null;\n    try {\n      service \u003d constructor.newInstance(instance);\n    } catch (InvocationTargetException e) {\n      throw new YarnException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnException(e);\n    } catch (InstantiationException e) {\n      throw new YarnException(e);\n    }\n\n    Class\u003c?\u003e pbProtocol \u003d service.getClass().getInterfaces()[0];\n    Method method \u003d protoCache.get(protocol);\n    if (method \u003d\u003d null) {\n      Class\u003c?\u003e protoClazz \u003d null;\n      try {\n        protoClazz \u003d localConf.getClassByName(getProtoClassName(protocol));\n      } catch (ClassNotFoundException e) {\n        throw new YarnException(\"Failed to load class: [\"\n            + getProtoClassName(protocol) + \"]\", e);\n      }\n      try {\n        method \u003d protoClazz.getMethod(\"newReflectiveBlockingService\",\n            pbProtocol.getInterfaces()[0]);\n        method.setAccessible(true);\n        protoCache.putIfAbsent(protocol, method);\n      } catch (NoSuchMethodException e) {\n        throw new YarnException(e);\n      }\n    }\n    \n    try {\n      return createServer(pbProtocol, addr, conf, secretManager, numHandlers,\n          (BlockingService)method.invoke(null, service), portRangeConfig);\n    } catch (InvocationTargetException e) {\n      throw new YarnException(e);\n    } catch (IllegalAccessException e) {\n      throw new YarnException(e);\n    } catch (IOException e) {\n      throw new YarnException(e);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/factories/impl/pb/RpcServerFactoryPBImpl.java"
    }
  }
}