{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MutableRollingAverages.java",
  "functionName": "rollOverAvgs",
  "functionId": "rollOverAvgs",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableRollingAverages.java",
  "functionStartLine": 217,
  "functionEndLine": 243,
  "numCommitsSeen": 5,
  "timeTaken": 2125,
  "changeHistory": [
    "8633ef8e10a78883fbd6bf197007dc5191bf4535",
    "b57368b6f893cb27d77fc9425e116f1312f4790f",
    "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1"
  ],
  "changeHistoryShort": {
    "8633ef8e10a78883fbd6bf197007dc5191bf4535": "Ymultichange(Yfilerename,Ybodychange)",
    "b57368b6f893cb27d77fc9425e116f1312f4790f": "Ymodifierchange",
    "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8633ef8e10a78883fbd6bf197007dc5191bf4535": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HADOOP-14503. Make RollingAverages a mutable metric. Contributed by Hanisha Koneru.\n",
      "commitDate": "12/06/17 8:43 PM",
      "commitName": "8633ef8e10a78883fbd6bf197007dc5191bf4535",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HADOOP-14503. Make RollingAverages a mutable metric. Contributed by Hanisha Koneru.\n",
          "commitDate": "12/06/17 8:43 PM",
          "commitName": "8633ef8e10a78883fbd6bf197007dc5191bf4535",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "12/06/17 6:45 PM",
          "commitNameOld": "bec79ca2495abdc347d64628151c90f5ce777046",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   private synchronized void rollOverAvgs() {\n     if (currentSnapshot \u003d\u003d null) {\n       return;\n     }\n \n     for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n       final MutableRate rate \u003d entry.getValue();\n       final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n           entry.getKey(),\n           new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n             @Override\n             public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n-              return new LinkedBlockingDeque\u003cSumAndCount\u003e(numWindows);\n+              return new LinkedBlockingDeque\u003c\u003e(numWindows);\n             }\n           });\n       final SumAndCount sumAndCount \u003d new SumAndCount(\n           rate.lastStat().total(),\n           rate.lastStat().numSamples());\n       /* put newest sum and count to the end */\n       if (!deque.offerLast(sumAndCount)) {\n         deque.pollFirst();\n         deque.offerLast(sumAndCount);\n       }\n     }\n \n     setChanged();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void rollOverAvgs() {\n    if (currentSnapshot \u003d\u003d null) {\n      return;\n    }\n\n    for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n      final MutableRate rate \u003d entry.getValue();\n      final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n          entry.getKey(),\n          new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n            @Override\n            public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n              return new LinkedBlockingDeque\u003c\u003e(numWindows);\n            }\n          });\n      final SumAndCount sumAndCount \u003d new SumAndCount(\n          rate.lastStat().total(),\n          rate.lastStat().numSamples());\n      /* put newest sum and count to the end */\n      if (!deque.offerLast(sumAndCount)) {\n        deque.pollFirst();\n        deque.offerLast(sumAndCount);\n      }\n    }\n\n    setChanged();\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableRollingAverages.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/RollingAverages.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableRollingAverages.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14503. Make RollingAverages a mutable metric. Contributed by Hanisha Koneru.\n",
          "commitDate": "12/06/17 8:43 PM",
          "commitName": "8633ef8e10a78883fbd6bf197007dc5191bf4535",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "12/06/17 6:45 PM",
          "commitNameOld": "bec79ca2495abdc347d64628151c90f5ce777046",
          "commitAuthorOld": "Tsz-Wo Nicholas Sze",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,27 @@\n   private synchronized void rollOverAvgs() {\n     if (currentSnapshot \u003d\u003d null) {\n       return;\n     }\n \n     for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n       final MutableRate rate \u003d entry.getValue();\n       final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n           entry.getKey(),\n           new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n             @Override\n             public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n-              return new LinkedBlockingDeque\u003cSumAndCount\u003e(numWindows);\n+              return new LinkedBlockingDeque\u003c\u003e(numWindows);\n             }\n           });\n       final SumAndCount sumAndCount \u003d new SumAndCount(\n           rate.lastStat().total(),\n           rate.lastStat().numSamples());\n       /* put newest sum and count to the end */\n       if (!deque.offerLast(sumAndCount)) {\n         deque.pollFirst();\n         deque.offerLast(sumAndCount);\n       }\n     }\n \n     setChanged();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void rollOverAvgs() {\n    if (currentSnapshot \u003d\u003d null) {\n      return;\n    }\n\n    for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n      final MutableRate rate \u003d entry.getValue();\n      final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n          entry.getKey(),\n          new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n            @Override\n            public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n              return new LinkedBlockingDeque\u003c\u003e(numWindows);\n            }\n          });\n      final SumAndCount sumAndCount \u003d new SumAndCount(\n          rate.lastStat().total(),\n          rate.lastStat().numSamples());\n      /* put newest sum and count to the end */\n      if (!deque.offerLast(sumAndCount)) {\n        deque.pollFirst();\n        deque.offerLast(sumAndCount);\n      }\n    }\n\n    setChanged();\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/MutableRollingAverages.java",
          "extendedDetails": {}
        }
      ]
    },
    "b57368b6f893cb27d77fc9425e116f1312f4790f": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-11194. Maintain aggregated peer performance metrics on NameNode.\n",
      "commitDate": "24/01/17 4:58 PM",
      "commitName": "b57368b6f893cb27d77fc9425e116f1312f4790f",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/12/16 11:46 PM",
      "commitNameOld": "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 32.72,
      "commitsBetweenForRepo": 151,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n-  private void rollOverAvgs() {\n+  private synchronized void rollOverAvgs() {\n     if (currentSnapshot \u003d\u003d null) {\n       return;\n     }\n \n     for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n       final MutableRate rate \u003d entry.getValue();\n       final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n           entry.getKey(),\n           new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n             @Override\n             public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n               return new LinkedBlockingDeque\u003cSumAndCount\u003e(numWindows);\n             }\n           });\n       final SumAndCount sumAndCount \u003d new SumAndCount(\n           rate.lastStat().total(),\n           rate.lastStat().numSamples());\n       /* put newest sum and count to the end */\n       if (!deque.offerLast(sumAndCount)) {\n         deque.pollFirst();\n         deque.offerLast(sumAndCount);\n       }\n     }\n \n     setChanged();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void rollOverAvgs() {\n    if (currentSnapshot \u003d\u003d null) {\n      return;\n    }\n\n    for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n      final MutableRate rate \u003d entry.getValue();\n      final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n          entry.getKey(),\n          new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n            @Override\n            public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n              return new LinkedBlockingDeque\u003cSumAndCount\u003e(numWindows);\n            }\n          });\n      final SumAndCount sumAndCount \u003d new SumAndCount(\n          rate.lastStat().total(),\n          rate.lastStat().numSamples());\n      /* put newest sum and count to the end */\n      if (!deque.offerLast(sumAndCount)) {\n        deque.pollFirst();\n        deque.offerLast(sumAndCount);\n      }\n    }\n\n    setChanged();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/RollingAverages.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, synchronized]"
      }
    },
    "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10917. Collect peer performance statistics on DataNode. Contributed by Xiaobing Zhou.\n",
      "commitDate": "22/12/16 11:46 PM",
      "commitName": "4e9029653dfa7a803d73c173cb7044f7e0dc1eb1",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,27 @@\n+  private void rollOverAvgs() {\n+    if (currentSnapshot \u003d\u003d null) {\n+      return;\n+    }\n+\n+    for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n+      final MutableRate rate \u003d entry.getValue();\n+      final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n+          entry.getKey(),\n+          new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n+            @Override\n+            public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n+              return new LinkedBlockingDeque\u003cSumAndCount\u003e(numWindows);\n+            }\n+          });\n+      final SumAndCount sumAndCount \u003d new SumAndCount(\n+          rate.lastStat().total(),\n+          rate.lastStat().numSamples());\n+      /* put newest sum and count to the end */\n+      if (!deque.offerLast(sumAndCount)) {\n+        deque.pollFirst();\n+        deque.offerLast(sumAndCount);\n+      }\n+    }\n+\n+    setChanged();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void rollOverAvgs() {\n    if (currentSnapshot \u003d\u003d null) {\n      return;\n    }\n\n    for (Map.Entry\u003cString, MutableRate\u003e entry : currentSnapshot.entrySet()) {\n      final MutableRate rate \u003d entry.getValue();\n      final LinkedBlockingDeque\u003cSumAndCount\u003e deque \u003d averages.computeIfAbsent(\n          entry.getKey(),\n          new Function\u003cString, LinkedBlockingDeque\u003cSumAndCount\u003e\u003e() {\n            @Override\n            public LinkedBlockingDeque\u003cSumAndCount\u003e apply(String k) {\n              return new LinkedBlockingDeque\u003cSumAndCount\u003e(numWindows);\n            }\n          });\n      final SumAndCount sumAndCount \u003d new SumAndCount(\n          rate.lastStat().total(),\n          rate.lastStat().numSamples());\n      /* put newest sum and count to the end */\n      if (!deque.offerLast(sumAndCount)) {\n        deque.pollFirst();\n        deque.offerLast(sumAndCount);\n      }\n    }\n\n    setChanged();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/metrics2/lib/RollingAverages.java"
    }
  }
}