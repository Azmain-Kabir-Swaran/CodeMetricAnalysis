{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AdminService.java",
  "functionName": "checkForDecommissioningNodes",
  "functionId": "checkForDecommissioningNodes___checkForDecommissioningNodesRequest-CheckForDecommissioningNodesRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
  "functionStartLine": 932,
  "functionEndLine": 949,
  "numCommitsSeen": 78,
  "timeTaken": 2721,
  "changeHistory": [
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
    "c63afdbe14df7359841aa4b213252a8a275e8c4b",
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501"
  ],
  "changeHistoryShort": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": "Ybodychange",
    "c63afdbe14df7359841aa4b213252a8a275e8c4b": "Ybodychange",
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6102. RMActiveService context to be updated with new RMContext on failover. Contributed by Rohith Sharma K S.\n",
      "commitDate": "23/07/17 11:09 PM",
      "commitName": "e3153284288d6cfa7a28511dfefe1c8a7d6b4eda",
      "commitAuthor": "Sunil G",
      "commitDateOld": "09/05/17 2:44 PM",
      "commitNameOld": "166be0ee95d5ef976f074342656b289b41a11ccd",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 75.35,
      "commitsBetweenForRepo": 358,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public CheckForDecommissioningNodesResponse checkForDecommissioningNodes(\n       CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest)\n       throws IOException, YarnException {\n     final String operation \u003d \"checkForDecommissioningNodes\";\n     final String msg \u003d \"check for decommissioning nodes.\";\n     UserGroupInformation user \u003d checkAcls(\"checkForDecommissioningNodes\");\n \n     checkRMStatus(user.getShortUserName(), operation, msg);\n \n-    Set\u003cNodeId\u003e decommissioningNodes \u003d rmContext.getNodesListManager()\n+    Set\u003cNodeId\u003e decommissioningNodes \u003d rm.getRMContext().getNodesListManager()\n         .checkForDecommissioningNodes();\n     RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n             \"AdminService\");\n     CheckForDecommissioningNodesResponse response \u003d recordFactory\n         .newRecordInstance(CheckForDecommissioningNodesResponse.class);\n     response.setDecommissioningNodes(decommissioningNodes);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CheckForDecommissioningNodesResponse checkForDecommissioningNodes(\n      CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest)\n      throws IOException, YarnException {\n    final String operation \u003d \"checkForDecommissioningNodes\";\n    final String msg \u003d \"check for decommissioning nodes.\";\n    UserGroupInformation user \u003d checkAcls(\"checkForDecommissioningNodes\");\n\n    checkRMStatus(user.getShortUserName(), operation, msg);\n\n    Set\u003cNodeId\u003e decommissioningNodes \u003d rm.getRMContext().getNodesListManager()\n        .checkForDecommissioningNodes();\n    RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n            \"AdminService\");\n    CheckForDecommissioningNodesResponse response \u003d recordFactory\n        .newRecordInstance(CheckForDecommissioningNodesResponse.class);\n    response.setDecommissioningNodes(decommissioningNodes);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "c63afdbe14df7359841aa4b213252a8a275e8c4b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4883. Make consistent operation name in AdminService. Contributed by Kai Sasaki.\n",
      "commitDate": "20/07/16 4:51 PM",
      "commitName": "c63afdbe14df7359841aa4b213252a8a275e8c4b",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "09/04/16 10:31 AM",
      "commitNameOld": "ff95fd547b3030529983fa4e701ac728c54ab63a",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 102.26,
      "commitsBetweenForRepo": 794,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public CheckForDecommissioningNodesResponse checkForDecommissioningNodes(\n       CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest)\n       throws IOException, YarnException {\n-    String argName \u003d \"checkForDecommissioningNodes\";\n+    final String operation \u003d \"checkForDecommissioningNodes\";\n     final String msg \u003d \"check for decommissioning nodes.\";\n     UserGroupInformation user \u003d checkAcls(\"checkForDecommissioningNodes\");\n \n-    checkRMStatus(user.getShortUserName(), argName, msg);\n+    checkRMStatus(user.getShortUserName(), operation, msg);\n \n     Set\u003cNodeId\u003e decommissioningNodes \u003d rmContext.getNodesListManager()\n         .checkForDecommissioningNodes();\n-    RMAuditLogger.logSuccess(user.getShortUserName(), argName, \"AdminService\");\n+    RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n+            \"AdminService\");\n     CheckForDecommissioningNodesResponse response \u003d recordFactory\n         .newRecordInstance(CheckForDecommissioningNodesResponse.class);\n     response.setDecommissioningNodes(decommissioningNodes);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CheckForDecommissioningNodesResponse checkForDecommissioningNodes(\n      CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest)\n      throws IOException, YarnException {\n    final String operation \u003d \"checkForDecommissioningNodes\";\n    final String msg \u003d \"check for decommissioning nodes.\";\n    UserGroupInformation user \u003d checkAcls(\"checkForDecommissioningNodes\");\n\n    checkRMStatus(user.getShortUserName(), operation, msg);\n\n    Set\u003cNodeId\u003e decommissioningNodes \u003d rmContext.getNodesListManager()\n        .checkForDecommissioningNodes();\n    RMAuditLogger.logSuccess(user.getShortUserName(), operation,\n            \"AdminService\");\n    CheckForDecommissioningNodesResponse response \u003d recordFactory\n        .newRecordInstance(CheckForDecommissioningNodesResponse.class);\n    response.setDecommissioningNodes(decommissioningNodes);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java",
      "extendedDetails": {}
    },
    "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501": {
      "type": "Yintroduced",
      "commitMessage": "New parameter of CLI for decommissioning node gracefully in RMAdmin CLI. Contributed by Devaraj K\n",
      "commitDate": "22/04/15 10:07 AM",
      "commitName": "fad9d7e85b1ba0934ab592daa9d3c9550b2bb501",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,17 @@\n+  public CheckForDecommissioningNodesResponse checkForDecommissioningNodes(\n+      CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest)\n+      throws IOException, YarnException {\n+    String argName \u003d \"checkForDecommissioningNodes\";\n+    final String msg \u003d \"check for decommissioning nodes.\";\n+    UserGroupInformation user \u003d checkAcls(\"checkForDecommissioningNodes\");\n+\n+    checkRMStatus(user.getShortUserName(), argName, msg);\n+\n+    Set\u003cNodeId\u003e decommissioningNodes \u003d rmContext.getNodesListManager()\n+        .checkForDecommissioningNodes();\n+    RMAuditLogger.logSuccess(user.getShortUserName(), argName, \"AdminService\");\n+    CheckForDecommissioningNodesResponse response \u003d recordFactory\n+        .newRecordInstance(CheckForDecommissioningNodesResponse.class);\n+    response.setDecommissioningNodes(decommissioningNodes);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CheckForDecommissioningNodesResponse checkForDecommissioningNodes(\n      CheckForDecommissioningNodesRequest checkForDecommissioningNodesRequest)\n      throws IOException, YarnException {\n    String argName \u003d \"checkForDecommissioningNodes\";\n    final String msg \u003d \"check for decommissioning nodes.\";\n    UserGroupInformation user \u003d checkAcls(\"checkForDecommissioningNodes\");\n\n    checkRMStatus(user.getShortUserName(), argName, msg);\n\n    Set\u003cNodeId\u003e decommissioningNodes \u003d rmContext.getNodesListManager()\n        .checkForDecommissioningNodes();\n    RMAuditLogger.logSuccess(user.getShortUserName(), argName, \"AdminService\");\n    CheckForDecommissioningNodesResponse response \u003d recordFactory\n        .newRecordInstance(CheckForDecommissioningNodesResponse.class);\n    response.setDecommissioningNodes(decommissioningNodes);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/AdminService.java"
    }
  }
}