{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StageAllocatorLowCostAligned.java",
  "functionName": "getDurationIntervalTotalCost",
  "functionId": "getDurationIntervalTotalCost___startTime-long__endTime-long__planLoads-RLESparseResourceAllocation__planModifications-RLESparseResourceAllocation__capacity-Resource__resCalc-ResourceCalculator__step-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
  "functionStartLine": 256,
  "functionEndLine": 306,
  "numCommitsSeen": 11,
  "timeTaken": 4761,
  "changeHistory": [
    "a3a615eeab8c14ccdc548311097e62a916963dc5",
    "156f24ead00436faad5d4aeef327a546392cd265"
  ],
  "changeHistoryShort": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "156f24ead00436faad5d4aeef327a546392cd265": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,51 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n+  protected static double getDurationIntervalTotalCost(long startTime,\n+      long endTime, RLESparseResourceAllocation planLoads,\n       RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+      ResourceCalculator resCalc, long step) throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Compute the current resource load within the interval [startTime,endTime)\n+    // by adding planLoads (existing load) and planModifications (load that\n+    // corresponds to the current job).\n+    RLESparseResourceAllocation currentLoad \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n+            planModifications, RLEOperator.add, startTime, endTime);\n \n-    // Calculate totalCost and maxLoad\n+    // Convert load from RLESparseResourceAllocation to a Map representation\n+    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n+\n+    // Initialize auxiliary variables\n     double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    Long tPrev \u003d -1L;\n+    Resource loadPrev \u003d Resources.none();\n+    double cost \u003d 0.0;\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n+    // that corresponds to the interval [tPrev, t). The cost associated within\n+    // this interval is fixed for each of the time steps, therefore the cost of\n+    // a single step is multiplied by (t - tPrev) / step.\n+    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource load \u003d e.getValue();\n+      if (tPrev !\u003d -1L) {\n+        tPrev \u003d Math.max(tPrev, startTime);\n+        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n+      }\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n-\n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      tPrev \u003d t;\n+      loadPrev \u003d load;\n     }\n \n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n+    // Add the cost associated with the last interval (the for loop does not\n+    // calculate it).\n+    if (loadPrev !\u003d null) {\n \n+      // This takes care of the corner case of a single entry\n+      tPrev \u003d Math.max(tPrev, startTime);\n+      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n+    }\n+\n+    // Return the overall cost\n+    return totalCost;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static double getDurationIntervalTotalCost(long startTime,\n      long endTime, RLESparseResourceAllocation planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) throws PlanningException {\n\n    // Compute the current resource load within the interval [startTime,endTime)\n    // by adding planLoads (existing load) and planModifications (load that\n    // corresponds to the current job).\n    RLESparseResourceAllocation currentLoad \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n            planModifications, RLEOperator.add, startTime, endTime);\n\n    // Convert load from RLESparseResourceAllocation to a Map representation\n    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n\n    // Initialize auxiliary variables\n    double totalCost \u003d 0.0;\n    Long tPrev \u003d -1L;\n    Resource loadPrev \u003d Resources.none();\n    double cost \u003d 0.0;\n\n    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n    // that corresponds to the interval [tPrev, t). The cost associated within\n    // this interval is fixed for each of the time steps, therefore the cost of\n    // a single step is multiplied by (t - tPrev) / step.\n    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource load \u003d e.getValue();\n      if (tPrev !\u003d -1L) {\n        tPrev \u003d Math.max(tPrev, startTime);\n        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n      }\n\n      tPrev \u003d t;\n      loadPrev \u003d load;\n    }\n\n    // Add the cost associated with the last interval (the for loop does not\n    // calculate it).\n    if (loadPrev !\u003d null) {\n\n      // This takes care of the corner case of a single entry\n      tPrev \u003d Math.max(tPrev, startTime);\n      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n    }\n\n    // Return the overall cost\n    return totalCost;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "getDurationInterval",
            "newValue": "getDurationIntervalTotalCost"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,51 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n+  protected static double getDurationIntervalTotalCost(long startTime,\n+      long endTime, RLESparseResourceAllocation planLoads,\n       RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+      ResourceCalculator resCalc, long step) throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Compute the current resource load within the interval [startTime,endTime)\n+    // by adding planLoads (existing load) and planModifications (load that\n+    // corresponds to the current job).\n+    RLESparseResourceAllocation currentLoad \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n+            planModifications, RLEOperator.add, startTime, endTime);\n \n-    // Calculate totalCost and maxLoad\n+    // Convert load from RLESparseResourceAllocation to a Map representation\n+    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n+\n+    // Initialize auxiliary variables\n     double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    Long tPrev \u003d -1L;\n+    Resource loadPrev \u003d Resources.none();\n+    double cost \u003d 0.0;\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n+    // that corresponds to the interval [tPrev, t). The cost associated within\n+    // this interval is fixed for each of the time steps, therefore the cost of\n+    // a single step is multiplied by (t - tPrev) / step.\n+    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource load \u003d e.getValue();\n+      if (tPrev !\u003d -1L) {\n+        tPrev \u003d Math.max(tPrev, startTime);\n+        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n+      }\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n-\n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      tPrev \u003d t;\n+      loadPrev \u003d load;\n     }\n \n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n+    // Add the cost associated with the last interval (the for loop does not\n+    // calculate it).\n+    if (loadPrev !\u003d null) {\n \n+      // This takes care of the corner case of a single entry\n+      tPrev \u003d Math.max(tPrev, startTime);\n+      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n+    }\n+\n+    // Return the overall cost\n+    return totalCost;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static double getDurationIntervalTotalCost(long startTime,\n      long endTime, RLESparseResourceAllocation planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) throws PlanningException {\n\n    // Compute the current resource load within the interval [startTime,endTime)\n    // by adding planLoads (existing load) and planModifications (load that\n    // corresponds to the current job).\n    RLESparseResourceAllocation currentLoad \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n            planModifications, RLEOperator.add, startTime, endTime);\n\n    // Convert load from RLESparseResourceAllocation to a Map representation\n    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n\n    // Initialize auxiliary variables\n    double totalCost \u003d 0.0;\n    Long tPrev \u003d -1L;\n    Resource loadPrev \u003d Resources.none();\n    double cost \u003d 0.0;\n\n    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n    // that corresponds to the interval [tPrev, t). The cost associated within\n    // this interval is fixed for each of the time steps, therefore the cost of\n    // a single step is multiplied by (t - tPrev) / step.\n    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource load \u003d e.getValue();\n      if (tPrev !\u003d -1L) {\n        tPrev \u003d Math.max(tPrev, startTime);\n        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n      }\n\n      tPrev \u003d t;\n      loadPrev \u003d load;\n    }\n\n    // Add the cost associated with the last interval (the for loop does not\n    // calculate it).\n    if (loadPrev !\u003d null) {\n\n      // This takes care of the corner case of a single entry\n      tPrev \u003d Math.max(tPrev, startTime);\n      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n    }\n\n    // Return the overall cost\n    return totalCost;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "[startTime-long, endTime-long, planLoads-Map\u003cLong,Resource\u003e, planModifications-RLESparseResourceAllocation, capacity-Resource, resCalc-ResourceCalculator, step-long]",
            "newValue": "[startTime-long, endTime-long, planLoads-RLESparseResourceAllocation, planModifications-RLESparseResourceAllocation, capacity-Resource, resCalc-ResourceCalculator, step-long]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,51 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n+  protected static double getDurationIntervalTotalCost(long startTime,\n+      long endTime, RLESparseResourceAllocation planLoads,\n       RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+      ResourceCalculator resCalc, long step) throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Compute the current resource load within the interval [startTime,endTime)\n+    // by adding planLoads (existing load) and planModifications (load that\n+    // corresponds to the current job).\n+    RLESparseResourceAllocation currentLoad \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n+            planModifications, RLEOperator.add, startTime, endTime);\n \n-    // Calculate totalCost and maxLoad\n+    // Convert load from RLESparseResourceAllocation to a Map representation\n+    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n+\n+    // Initialize auxiliary variables\n     double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    Long tPrev \u003d -1L;\n+    Resource loadPrev \u003d Resources.none();\n+    double cost \u003d 0.0;\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n+    // that corresponds to the interval [tPrev, t). The cost associated within\n+    // this interval is fixed for each of the time steps, therefore the cost of\n+    // a single step is multiplied by (t - tPrev) / step.\n+    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource load \u003d e.getValue();\n+      if (tPrev !\u003d -1L) {\n+        tPrev \u003d Math.max(tPrev, startTime);\n+        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n+      }\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n-\n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      tPrev \u003d t;\n+      loadPrev \u003d load;\n     }\n \n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n+    // Add the cost associated with the last interval (the for loop does not\n+    // calculate it).\n+    if (loadPrev !\u003d null) {\n \n+      // This takes care of the corner case of a single entry\n+      tPrev \u003d Math.max(tPrev, startTime);\n+      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n+    }\n+\n+    // Return the overall cost\n+    return totalCost;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static double getDurationIntervalTotalCost(long startTime,\n      long endTime, RLESparseResourceAllocation planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) throws PlanningException {\n\n    // Compute the current resource load within the interval [startTime,endTime)\n    // by adding planLoads (existing load) and planModifications (load that\n    // corresponds to the current job).\n    RLESparseResourceAllocation currentLoad \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n            planModifications, RLEOperator.add, startTime, endTime);\n\n    // Convert load from RLESparseResourceAllocation to a Map representation\n    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n\n    // Initialize auxiliary variables\n    double totalCost \u003d 0.0;\n    Long tPrev \u003d -1L;\n    Resource loadPrev \u003d Resources.none();\n    double cost \u003d 0.0;\n\n    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n    // that corresponds to the interval [tPrev, t). The cost associated within\n    // this interval is fixed for each of the time steps, therefore the cost of\n    // a single step is multiplied by (t - tPrev) / step.\n    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource load \u003d e.getValue();\n      if (tPrev !\u003d -1L) {\n        tPrev \u003d Math.max(tPrev, startTime);\n        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n      }\n\n      tPrev \u003d t;\n      loadPrev \u003d load;\n    }\n\n    // Add the cost associated with the last interval (the for loop does not\n    // calculate it).\n    if (loadPrev !\u003d null) {\n\n      // This takes care of the corner case of a single entry\n      tPrev \u003d Math.max(tPrev, startTime);\n      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n    }\n\n    // Return the overall cost\n    return totalCost;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "DurationInterval",
            "newValue": "double"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,51 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n+  protected static double getDurationIntervalTotalCost(long startTime,\n+      long endTime, RLESparseResourceAllocation planLoads,\n       RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+      ResourceCalculator resCalc, long step) throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Compute the current resource load within the interval [startTime,endTime)\n+    // by adding planLoads (existing load) and planModifications (load that\n+    // corresponds to the current job).\n+    RLESparseResourceAllocation currentLoad \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n+            planModifications, RLEOperator.add, startTime, endTime);\n \n-    // Calculate totalCost and maxLoad\n+    // Convert load from RLESparseResourceAllocation to a Map representation\n+    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n+\n+    // Initialize auxiliary variables\n     double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    Long tPrev \u003d -1L;\n+    Resource loadPrev \u003d Resources.none();\n+    double cost \u003d 0.0;\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n+    // that corresponds to the interval [tPrev, t). The cost associated within\n+    // this interval is fixed for each of the time steps, therefore the cost of\n+    // a single step is multiplied by (t - tPrev) / step.\n+    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource load \u003d e.getValue();\n+      if (tPrev !\u003d -1L) {\n+        tPrev \u003d Math.max(tPrev, startTime);\n+        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n+      }\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n-\n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      tPrev \u003d t;\n+      loadPrev \u003d load;\n     }\n \n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n+    // Add the cost associated with the last interval (the for loop does not\n+    // calculate it).\n+    if (loadPrev !\u003d null) {\n \n+      // This takes care of the corner case of a single entry\n+      tPrev \u003d Math.max(tPrev, startTime);\n+      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n+    }\n+\n+    // Return the overall cost\n+    return totalCost;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static double getDurationIntervalTotalCost(long startTime,\n      long endTime, RLESparseResourceAllocation planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) throws PlanningException {\n\n    // Compute the current resource load within the interval [startTime,endTime)\n    // by adding planLoads (existing load) and planModifications (load that\n    // corresponds to the current job).\n    RLESparseResourceAllocation currentLoad \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n            planModifications, RLEOperator.add, startTime, endTime);\n\n    // Convert load from RLESparseResourceAllocation to a Map representation\n    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n\n    // Initialize auxiliary variables\n    double totalCost \u003d 0.0;\n    Long tPrev \u003d -1L;\n    Resource loadPrev \u003d Resources.none();\n    double cost \u003d 0.0;\n\n    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n    // that corresponds to the interval [tPrev, t). The cost associated within\n    // this interval is fixed for each of the time steps, therefore the cost of\n    // a single step is multiplied by (t - tPrev) / step.\n    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource load \u003d e.getValue();\n      if (tPrev !\u003d -1L) {\n        tPrev \u003d Math.max(tPrev, startTime);\n        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n      }\n\n      tPrev \u003d t;\n      loadPrev \u003d load;\n    }\n\n    // Add the cost associated with the last interval (the for loop does not\n    // calculate it).\n    if (loadPrev !\u003d null) {\n\n      // This takes care of the corner case of a single entry\n      tPrev \u003d Math.max(tPrev, startTime);\n      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n    }\n\n    // Return the overall cost\n    return totalCost;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[protected, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,51 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n+  protected static double getDurationIntervalTotalCost(long startTime,\n+      long endTime, RLESparseResourceAllocation planLoads,\n       RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+      ResourceCalculator resCalc, long step) throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Compute the current resource load within the interval [startTime,endTime)\n+    // by adding planLoads (existing load) and planModifications (load that\n+    // corresponds to the current job).\n+    RLESparseResourceAllocation currentLoad \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n+            planModifications, RLEOperator.add, startTime, endTime);\n \n-    // Calculate totalCost and maxLoad\n+    // Convert load from RLESparseResourceAllocation to a Map representation\n+    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n+\n+    // Initialize auxiliary variables\n     double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    Long tPrev \u003d -1L;\n+    Resource loadPrev \u003d Resources.none();\n+    double cost \u003d 0.0;\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n+    // that corresponds to the interval [tPrev, t). The cost associated within\n+    // this interval is fixed for each of the time steps, therefore the cost of\n+    // a single step is multiplied by (t - tPrev) / step.\n+    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource load \u003d e.getValue();\n+      if (tPrev !\u003d -1L) {\n+        tPrev \u003d Math.max(tPrev, startTime);\n+        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n+      }\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n-\n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      tPrev \u003d t;\n+      loadPrev \u003d load;\n     }\n \n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n+    // Add the cost associated with the last interval (the for loop does not\n+    // calculate it).\n+    if (loadPrev !\u003d null) {\n \n+      // This takes care of the corner case of a single entry\n+      tPrev \u003d Math.max(tPrev, startTime);\n+      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n+    }\n+\n+    // Return the overall cost\n+    return totalCost;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static double getDurationIntervalTotalCost(long startTime,\n      long endTime, RLESparseResourceAllocation planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) throws PlanningException {\n\n    // Compute the current resource load within the interval [startTime,endTime)\n    // by adding planLoads (existing load) and planModifications (load that\n    // corresponds to the current job).\n    RLESparseResourceAllocation currentLoad \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n            planModifications, RLEOperator.add, startTime, endTime);\n\n    // Convert load from RLESparseResourceAllocation to a Map representation\n    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n\n    // Initialize auxiliary variables\n    double totalCost \u003d 0.0;\n    Long tPrev \u003d -1L;\n    Resource loadPrev \u003d Resources.none();\n    double cost \u003d 0.0;\n\n    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n    // that corresponds to the interval [tPrev, t). The cost associated within\n    // this interval is fixed for each of the time steps, therefore the cost of\n    // a single step is multiplied by (t - tPrev) / step.\n    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource load \u003d e.getValue();\n      if (tPrev !\u003d -1L) {\n        tPrev \u003d Math.max(tPrev, startTime);\n        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n      }\n\n      tPrev \u003d t;\n      loadPrev \u003d load;\n    }\n\n    // Add the cost associated with the last interval (the for loop does not\n    // calculate it).\n    if (loadPrev !\u003d null) {\n\n      // This takes care of the corner case of a single entry\n      tPrev \u003d Math.max(tPrev, startTime);\n      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n    }\n\n    // Return the overall cost\n    return totalCost;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[PlanningException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
          "commitDate": "01/05/17 4:01 PM",
          "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
          "commitAuthor": "Subru Krishnan",
          "commitDateOld": "05/12/15 9:26 PM",
          "commitNameOld": "742632e346604fd2b263bd42367165638fcf2416",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 512.73,
          "commitsBetweenForRepo": 3348,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,51 @@\n-  protected DurationInterval getDurationInterval(long startTime, long endTime,\n-      Map\u003cLong, Resource\u003e planLoads,\n+  protected static double getDurationIntervalTotalCost(long startTime,\n+      long endTime, RLESparseResourceAllocation planLoads,\n       RLESparseResourceAllocation planModifications, Resource capacity,\n-      ResourceCalculator resCalc, long step) {\n+      ResourceCalculator resCalc, long step) throws PlanningException {\n \n-    // Initialize the dominant loads structure\n-    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+    // Compute the current resource load within the interval [startTime,endTime)\n+    // by adding planLoads (existing load) and planModifications (load that\n+    // corresponds to the current job).\n+    RLESparseResourceAllocation currentLoad \u003d\n+        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n+            planModifications, RLEOperator.add, startTime, endTime);\n \n-    // Calculate totalCost and maxLoad\n+    // Convert load from RLESparseResourceAllocation to a Map representation\n+    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n+\n+    // Initialize auxiliary variables\n     double totalCost \u003d 0.0;\n-    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+    Long tPrev \u003d -1L;\n+    Resource loadPrev \u003d Resources.none();\n+    double cost \u003d 0.0;\n \n-      // Get the load\n-      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n+    // that corresponds to the interval [tPrev, t). The cost associated within\n+    // this interval is fixed for each of the time steps, therefore the cost of\n+    // a single step is multiplied by (t - tPrev) / step.\n+    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n+      Long t \u003d e.getKey();\n+      Resource load \u003d e.getValue();\n+      if (tPrev !\u003d -1L) {\n+        tPrev \u003d Math.max(tPrev, startTime);\n+        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n+      }\n \n-      // Increase the total cost\n-      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n-\n-      // Update the dominant resources\n-      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n-\n+      tPrev \u003d t;\n+      loadPrev \u003d load;\n     }\n \n-    // Return the corresponding durationInterval\n-    return new DurationInterval(startTime, endTime, totalCost,\n-        dominantResources);\n+    // Add the cost associated with the last interval (the for loop does not\n+    // calculate it).\n+    if (loadPrev !\u003d null) {\n \n+      // This takes care of the corner case of a single entry\n+      tPrev \u003d Math.max(tPrev, startTime);\n+      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n+      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n+    }\n+\n+    // Return the overall cost\n+    return totalCost;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected static double getDurationIntervalTotalCost(long startTime,\n      long endTime, RLESparseResourceAllocation planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) throws PlanningException {\n\n    // Compute the current resource load within the interval [startTime,endTime)\n    // by adding planLoads (existing load) and planModifications (load that\n    // corresponds to the current job).\n    RLESparseResourceAllocation currentLoad \u003d\n        RLESparseResourceAllocation.merge(resCalc, capacity, planLoads,\n            planModifications, RLEOperator.add, startTime, endTime);\n\n    // Convert load from RLESparseResourceAllocation to a Map representation\n    NavigableMap\u003cLong, Resource\u003e mapCurrentLoad \u003d currentLoad.getCumulative();\n\n    // Initialize auxiliary variables\n    double totalCost \u003d 0.0;\n    Long tPrev \u003d -1L;\n    Resource loadPrev \u003d Resources.none();\n    double cost \u003d 0.0;\n\n    // Iterate over time points. For each point \u0027t\u0027, accumulate the total cost\n    // that corresponds to the interval [tPrev, t). The cost associated within\n    // this interval is fixed for each of the time steps, therefore the cost of\n    // a single step is multiplied by (t - tPrev) / step.\n    for (Entry\u003cLong, Resource\u003e e : mapCurrentLoad.entrySet()) {\n      Long t \u003d e.getKey();\n      Resource load \u003d e.getValue();\n      if (tPrev !\u003d -1L) {\n        tPrev \u003d Math.max(tPrev, startTime);\n        cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n        totalCost \u003d totalCost + cost * (t - tPrev) / step;\n      }\n\n      tPrev \u003d t;\n      loadPrev \u003d load;\n    }\n\n    // Add the cost associated with the last interval (the for loop does not\n    // calculate it).\n    if (loadPrev !\u003d null) {\n\n      // This takes care of the corner case of a single entry\n      tPrev \u003d Math.max(tPrev, startTime);\n      cost \u003d calcCostOfLoad(loadPrev, capacity, resCalc);\n      totalCost \u003d totalCost + cost * (endTime - tPrev) / step;\n    }\n\n    // Return the overall cost\n    return totalCost;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
          "extendedDetails": {}
        }
      ]
    },
    "156f24ead00436faad5d4aeef327a546392cd265": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
      "commitDate": "25/07/15 7:39 AM",
      "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthor": "ccurino",
      "diff": "@@ -0,0 +1,28 @@\n+  protected DurationInterval getDurationInterval(long startTime, long endTime,\n+      Map\u003cLong, Resource\u003e planLoads,\n+      RLESparseResourceAllocation planModifications, Resource capacity,\n+      ResourceCalculator resCalc, long step) {\n+\n+    // Initialize the dominant loads structure\n+    Resource dominantResources \u003d Resource.newInstance(0, 0);\n+\n+    // Calculate totalCost and maxLoad\n+    double totalCost \u003d 0.0;\n+    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n+\n+      // Get the load\n+      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n+\n+      // Increase the total cost\n+      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n+\n+      // Update the dominant resources\n+      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n+\n+    }\n+\n+    // Return the corresponding durationInterval\n+    return new DurationInterval(startTime, endTime, totalCost,\n+        dominantResources);\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected DurationInterval getDurationInterval(long startTime, long endTime,\n      Map\u003cLong, Resource\u003e planLoads,\n      RLESparseResourceAllocation planModifications, Resource capacity,\n      ResourceCalculator resCalc, long step) {\n\n    // Initialize the dominant loads structure\n    Resource dominantResources \u003d Resource.newInstance(0, 0);\n\n    // Calculate totalCost and maxLoad\n    double totalCost \u003d 0.0;\n    for (long t \u003d startTime; t \u003c endTime; t +\u003d step) {\n\n      // Get the load\n      Resource load \u003d getLoadAtTime(t, planLoads, planModifications);\n\n      // Increase the total cost\n      totalCost +\u003d calcCostOfLoad(load, capacity, resCalc);\n\n      // Update the dominant resources\n      dominantResources \u003d Resources.componentwiseMax(dominantResources, load);\n\n    }\n\n    // Return the corresponding durationInterval\n    return new DurationInterval(startTime, endTime, totalCost,\n        dominantResources);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java"
    }
  }
}