{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMSimulator.java",
  "functionName": "init",
  "functionId": "init___nodeIdStr-String__nodeResource-Resource__dispatchTime-int__heartBeatInterval-int__pRm-ResourceManager__pResourceUtilizationRatio-float",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
  "functionStartLine": 115,
  "functionEndLine": 121,
  "numCommitsSeen": 19,
  "timeTaken": 3589,
  "changeHistory": [
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
    "7af4f34de54f6e667b47374e31fc9328eba869f0",
    "ba8136615ab66c450884614557eddc6509d63b7c",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": "Ybodychange",
    "7af4f34de54f6e667b47374e31fc9328eba869f0": "Ymultichange(Yparameterchange,Ybodychange)",
    "ba8136615ab66c450884614557eddc6509d63b7c": "Ymultichange(Yparameterchange,Ybodychange)",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8175. Add support for Node Labels in SLS. Contributed by Abhishek Modi.\n",
      "commitDate": "31/07/18 9:36 AM",
      "commitName": "9fea5c9ee76bd36f273ae93afef5f3ef3c477a53",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "28/02/18 1:58 AM",
      "commitNameOld": "7af4f34de54f6e667b47374e31fc9328eba869f0",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 153.28,
      "commitsBetweenForRepo": 1701,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,7 @@\n   public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n       int heartBeatInterval, ResourceManager pRm,\n       float pResourceUtilizationRatio)\n       throws IOException, YarnException {\n-    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n-        heartBeatInterval);\n-    // create resource\n-    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n-    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n-        Resources.clone(nodeResource));\n-    this.rm \u003d pRm;\n-    // init data structures\n-    completedContainerList \u003d\n-            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n-    releasedContainerList \u003d\n-            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n-    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n-    amContainerList \u003d\n-            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n-    runningContainers \u003d\n-            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n-    // register NM with RM\n-    RegisterNodeManagerRequest req \u003d\n-            Records.newRecord(RegisterNodeManagerRequest.class);\n-    req.setNodeId(node.getNodeID());\n-    req.setResource(node.getTotalCapability());\n-    req.setHttpPort(80);\n-    RegisterNodeManagerResponse response \u003d this.rm.getResourceTrackerService()\n-            .registerNodeManager(req);\n-    masterKey \u003d response.getNMTokenMasterKey();\n-    this.resourceUtilizationRatio \u003d pResourceUtilizationRatio;\n+    init(nodeIdStr, nodeResource, dispatchTime, heartBeatInterval, pRm,\n+        pResourceUtilizationRatio, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n      int heartBeatInterval, ResourceManager pRm,\n      float pResourceUtilizationRatio)\n      throws IOException, YarnException {\n    init(nodeIdStr, nodeResource, dispatchTime, heartBeatInterval, pRm,\n        pResourceUtilizationRatio, null);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
      "extendedDetails": {}
    },
    "7af4f34de54f6e667b47374e31fc9328eba869f0": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7929. Support to set container execution type in SLS. (Jiandan Yang via Weiwei Yang)\n",
      "commitDate": "28/02/18 1:58 AM",
      "commitName": "7af4f34de54f6e667b47374e31fc9328eba869f0",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7929. Support to set container execution type in SLS. (Jiandan Yang via Weiwei Yang)\n",
          "commitDate": "28/02/18 1:58 AM",
          "commitName": "7af4f34de54f6e667b47374e31fc9328eba869f0",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "25/01/18 3:47 PM",
          "commitNameOld": "ff8378eb1b960c72d18a984c7e5d145b407ca11a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 33.42,
          "commitsBetweenForRepo": 219,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  public void init(String nodeIdStr, Resource nodeResource,\n-          int dispatchTime, int heartBeatInterval, ResourceManager rm)\n-          throws IOException, YarnException {\n+  public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n+      int heartBeatInterval, ResourceManager pRm,\n+      float pResourceUtilizationRatio)\n+      throws IOException, YarnException {\n     super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n-            heartBeatInterval);\n+        heartBeatInterval);\n     // create resource\n     String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n     this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n         Resources.clone(nodeResource));\n-    this.rm \u003d rm;\n+    this.rm \u003d pRm;\n     // init data structures\n     completedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     releasedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n     amContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     runningContainers \u003d\n             new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n     // register NM with RM\n     RegisterNodeManagerRequest req \u003d\n             Records.newRecord(RegisterNodeManagerRequest.class);\n     req.setNodeId(node.getNodeID());\n     req.setResource(node.getTotalCapability());\n     req.setHttpPort(80);\n-    RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n+    RegisterNodeManagerResponse response \u003d this.rm.getResourceTrackerService()\n             .registerNodeManager(req);\n     masterKey \u003d response.getNMTokenMasterKey();\n+    this.resourceUtilizationRatio \u003d pResourceUtilizationRatio;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n      int heartBeatInterval, ResourceManager pRm,\n      float pResourceUtilizationRatio)\n      throws IOException, YarnException {\n    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n        heartBeatInterval);\n    // create resource\n    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n        Resources.clone(nodeResource));\n    this.rm \u003d pRm;\n    // init data structures\n    completedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    releasedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n    amContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    runningContainers \u003d\n            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n    // register NM with RM\n    RegisterNodeManagerRequest req \u003d\n            Records.newRecord(RegisterNodeManagerRequest.class);\n    req.setNodeId(node.getNodeID());\n    req.setResource(node.getTotalCapability());\n    req.setHttpPort(80);\n    RegisterNodeManagerResponse response \u003d this.rm.getResourceTrackerService()\n            .registerNodeManager(req);\n    masterKey \u003d response.getNMTokenMasterKey();\n    this.resourceUtilizationRatio \u003d pResourceUtilizationRatio;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
          "extendedDetails": {
            "oldValue": "[nodeIdStr-String, nodeResource-Resource, dispatchTime-int, heartBeatInterval-int, rm-ResourceManager]",
            "newValue": "[nodeIdStr-String, nodeResource-Resource, dispatchTime-int, heartBeatInterval-int, pRm-ResourceManager, pResourceUtilizationRatio-float]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7929. Support to set container execution type in SLS. (Jiandan Yang via Weiwei Yang)\n",
          "commitDate": "28/02/18 1:58 AM",
          "commitName": "7af4f34de54f6e667b47374e31fc9328eba869f0",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "25/01/18 3:47 PM",
          "commitNameOld": "ff8378eb1b960c72d18a984c7e5d145b407ca11a",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 33.42,
          "commitsBetweenForRepo": 219,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,32 @@\n-  public void init(String nodeIdStr, Resource nodeResource,\n-          int dispatchTime, int heartBeatInterval, ResourceManager rm)\n-          throws IOException, YarnException {\n+  public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n+      int heartBeatInterval, ResourceManager pRm,\n+      float pResourceUtilizationRatio)\n+      throws IOException, YarnException {\n     super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n-            heartBeatInterval);\n+        heartBeatInterval);\n     // create resource\n     String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n     this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n         Resources.clone(nodeResource));\n-    this.rm \u003d rm;\n+    this.rm \u003d pRm;\n     // init data structures\n     completedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     releasedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n     amContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     runningContainers \u003d\n             new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n     // register NM with RM\n     RegisterNodeManagerRequest req \u003d\n             Records.newRecord(RegisterNodeManagerRequest.class);\n     req.setNodeId(node.getNodeID());\n     req.setResource(node.getTotalCapability());\n     req.setHttpPort(80);\n-    RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n+    RegisterNodeManagerResponse response \u003d this.rm.getResourceTrackerService()\n             .registerNodeManager(req);\n     masterKey \u003d response.getNMTokenMasterKey();\n+    this.resourceUtilizationRatio \u003d pResourceUtilizationRatio;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(String nodeIdStr, Resource nodeResource, int dispatchTime,\n      int heartBeatInterval, ResourceManager pRm,\n      float pResourceUtilizationRatio)\n      throws IOException, YarnException {\n    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n        heartBeatInterval);\n    // create resource\n    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n        Resources.clone(nodeResource));\n    this.rm \u003d pRm;\n    // init data structures\n    completedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    releasedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n    amContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    runningContainers \u003d\n            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n    // register NM with RM\n    RegisterNodeManagerRequest req \u003d\n            Records.newRecord(RegisterNodeManagerRequest.class);\n    req.setNodeId(node.getNodeID());\n    req.setResource(node.getTotalCapability());\n    req.setHttpPort(80);\n    RegisterNodeManagerResponse response \u003d this.rm.getResourceTrackerService()\n            .registerNodeManager(req);\n    masterKey \u003d response.getNMTokenMasterKey();\n    this.resourceUtilizationRatio \u003d pResourceUtilizationRatio;\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "ba8136615ab66c450884614557eddc6509d63b7c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7413. Support resource type in SLS (Contributed by Yufei Gu via Daniel Templeton)\n\nChange-Id: Ic0a897c123c5d2f57aae757ca6bcf1dad7b90d2b\n",
      "commitDate": "09/11/17 12:09 PM",
      "commitName": "ba8136615ab66c450884614557eddc6509d63b7c",
      "commitAuthor": "Daniel Templeton",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7413. Support resource type in SLS (Contributed by Yufei Gu via Daniel Templeton)\n\nChange-Id: Ic0a897c123c5d2f57aae757ca6bcf1dad7b90d2b\n",
          "commitDate": "09/11/17 12:09 PM",
          "commitName": "ba8136615ab66c450884614557eddc6509d63b7c",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "19/06/17 9:18 PM",
          "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 142.66,
          "commitsBetweenForRepo": 1172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public void init(String nodeIdStr, int memory, int cores,\n+  public void init(String nodeIdStr, Resource nodeResource,\n           int dispatchTime, int heartBeatInterval, ResourceManager rm)\n           throws IOException, YarnException {\n     super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n             heartBeatInterval);\n     // create resource\n     String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n-    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1], \n-                  BuilderUtils.newResource(memory, cores));\n+    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n+        Resources.clone(nodeResource));\n     this.rm \u003d rm;\n     // init data structures\n     completedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     releasedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n     amContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     runningContainers \u003d\n             new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n     // register NM with RM\n     RegisterNodeManagerRequest req \u003d\n             Records.newRecord(RegisterNodeManagerRequest.class);\n     req.setNodeId(node.getNodeID());\n     req.setResource(node.getTotalCapability());\n     req.setHttpPort(80);\n     RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n             .registerNodeManager(req);\n     masterKey \u003d response.getNMTokenMasterKey();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(String nodeIdStr, Resource nodeResource,\n          int dispatchTime, int heartBeatInterval, ResourceManager rm)\n          throws IOException, YarnException {\n    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n            heartBeatInterval);\n    // create resource\n    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n        Resources.clone(nodeResource));\n    this.rm \u003d rm;\n    // init data structures\n    completedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    releasedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n    amContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    runningContainers \u003d\n            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n    // register NM with RM\n    RegisterNodeManagerRequest req \u003d\n            Records.newRecord(RegisterNodeManagerRequest.class);\n    req.setNodeId(node.getNodeID());\n    req.setResource(node.getTotalCapability());\n    req.setHttpPort(80);\n    RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n            .registerNodeManager(req);\n    masterKey \u003d response.getNMTokenMasterKey();\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
          "extendedDetails": {
            "oldValue": "[nodeIdStr-String, memory-int, cores-int, dispatchTime-int, heartBeatInterval-int, rm-ResourceManager]",
            "newValue": "[nodeIdStr-String, nodeResource-Resource, dispatchTime-int, heartBeatInterval-int, rm-ResourceManager]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7413. Support resource type in SLS (Contributed by Yufei Gu via Daniel Templeton)\n\nChange-Id: Ic0a897c123c5d2f57aae757ca6bcf1dad7b90d2b\n",
          "commitDate": "09/11/17 12:09 PM",
          "commitName": "ba8136615ab66c450884614557eddc6509d63b7c",
          "commitAuthor": "Daniel Templeton",
          "commitDateOld": "19/06/17 9:18 PM",
          "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
          "commitAuthorOld": "Akira Ajisaka",
          "daysBetweenCommits": 142.66,
          "commitsBetweenForRepo": 1172,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public void init(String nodeIdStr, int memory, int cores,\n+  public void init(String nodeIdStr, Resource nodeResource,\n           int dispatchTime, int heartBeatInterval, ResourceManager rm)\n           throws IOException, YarnException {\n     super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n             heartBeatInterval);\n     // create resource\n     String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n-    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1], \n-                  BuilderUtils.newResource(memory, cores));\n+    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n+        Resources.clone(nodeResource));\n     this.rm \u003d rm;\n     // init data structures\n     completedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     releasedContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n     amContainerList \u003d\n             Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n     runningContainers \u003d\n             new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n     // register NM with RM\n     RegisterNodeManagerRequest req \u003d\n             Records.newRecord(RegisterNodeManagerRequest.class);\n     req.setNodeId(node.getNodeID());\n     req.setResource(node.getTotalCapability());\n     req.setHttpPort(80);\n     RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n             .registerNodeManager(req);\n     masterKey \u003d response.getNMTokenMasterKey();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void init(String nodeIdStr, Resource nodeResource,\n          int dispatchTime, int heartBeatInterval, ResourceManager rm)\n          throws IOException, YarnException {\n    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n            heartBeatInterval);\n    // create resource\n    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1],\n        Resources.clone(nodeResource));\n    this.rm \u003d rm;\n    // init data structures\n    completedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    releasedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n    amContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    runningContainers \u003d\n            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n    // register NM with RM\n    RegisterNodeManagerRequest req \u003d\n            Records.newRecord(RegisterNodeManagerRequest.class);\n    req.setNodeId(node.getNodeID());\n    req.setResource(node.getTotalCapability());\n    req.setHttpPort(80);\n    RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n            .registerNodeManager(req);\n    masterKey \u003d response.getNMTokenMasterKey();\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java",
          "extendedDetails": {}
        }
      ]
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,30 @@\n+  public void init(String nodeIdStr, int memory, int cores,\n+          int dispatchTime, int heartBeatInterval, ResourceManager rm)\n+          throws IOException, YarnException {\n+    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n+            heartBeatInterval);\n+    // create resource\n+    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n+    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1], \n+                  BuilderUtils.newResource(memory, cores));\n+    this.rm \u003d rm;\n+    // init data structures\n+    completedContainerList \u003d\n+            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n+    releasedContainerList \u003d\n+            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n+    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n+    amContainerList \u003d\n+            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n+    runningContainers \u003d\n+            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n+    // register NM with RM\n+    RegisterNodeManagerRequest req \u003d\n+            Records.newRecord(RegisterNodeManagerRequest.class);\n+    req.setNodeId(node.getNodeID());\n+    req.setResource(node.getTotalCapability());\n+    req.setHttpPort(80);\n+    RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n+            .registerNodeManager(req);\n+    masterKey \u003d response.getNMTokenMasterKey();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(String nodeIdStr, int memory, int cores,\n          int dispatchTime, int heartBeatInterval, ResourceManager rm)\n          throws IOException, YarnException {\n    super.init(dispatchTime, dispatchTime + 1000000L * heartBeatInterval,\n            heartBeatInterval);\n    // create resource\n    String rackHostName[] \u003d SLSUtils.getRackHostName(nodeIdStr);\n    this.node \u003d NodeInfo.newNodeInfo(rackHostName[0], rackHostName[1], \n                  BuilderUtils.newResource(memory, cores));\n    this.rm \u003d rm;\n    // init data structures\n    completedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    releasedContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    containerQueue \u003d new DelayQueue\u003cContainerSimulator\u003e();\n    amContainerList \u003d\n            Collections.synchronizedList(new ArrayList\u003cContainerId\u003e());\n    runningContainers \u003d\n            new ConcurrentHashMap\u003cContainerId, ContainerSimulator\u003e();\n    // register NM with RM\n    RegisterNodeManagerRequest req \u003d\n            Records.newRecord(RegisterNodeManagerRequest.class);\n    req.setNodeId(node.getNodeID());\n    req.setResource(node.getTotalCapability());\n    req.setHttpPort(80);\n    RegisterNodeManagerResponse response \u003d rm.getResourceTrackerService()\n            .registerNodeManager(req);\n    masterKey \u003d response.getNMTokenMasterKey();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/nodemanager/NMSimulator.java"
    }
  }
}