{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "submitApplication",
  "functionId": "submitApplication___request-SubmitApplicationRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 588,
  "functionEndLine": 714,
  "numCommitsSeen": 156,
  "timeTaken": 14441,
  "changeHistory": [
    "360105482258569e5e31c49d023d2bbdc3ef38cd",
    "3d78b1223d3fdc29d500803cefd2931b54f44928",
    "e7d44e48f708ba41e14d2a9e32a6760a62617485",
    "ed13cf84068ad50a78e66211132c1f08238fb65b",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "69fa81679f59378fd19a2c65db8019393d7c05a2",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e",
    "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1",
    "71c2b159ab9c6c3a48e5b9670dc85ddbf8a380c1",
    "4de17c60528cb29bf7306dbaa720b96063948b17",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2",
    "43876770d91a374563bf3379a5ffab5c2bac2264",
    "6de09af24487e2ff5bc22c7b1a07348c7119de80",
    "ef9f251679d7e87698eecd6a119652900274a172",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "4e5818698778bff9d2b1ba14297d8393e49927c7",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
    "88b82a0f6687ce103817fbb460fd30d870f717a0",
    "ca853445e9a31e05278e9dceea9dbed734103f49",
    "cdfabf5ae289836968b3d296668593b9500b6f26",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "360105482258569e5e31c49d023d2bbdc3ef38cd": "Ybodychange",
    "3d78b1223d3fdc29d500803cefd2931b54f44928": "Ybodychange",
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": "Ybodychange",
    "ed13cf84068ad50a78e66211132c1f08238fb65b": "Ybodychange",
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": "Ybodychange",
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "69fa81679f59378fd19a2c65db8019393d7c05a2": "Ybodychange",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": "Ybodychange",
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": "Ybodychange",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": "Ybodychange",
    "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af": "Yexceptionschange",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": "Ybodychange",
    "71c2b159ab9c6c3a48e5b9670dc85ddbf8a380c1": "Ybodychange",
    "4de17c60528cb29bf7306dbaa720b96063948b17": "Ybodychange",
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": "Ybodychange",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ymultichange(Yexceptionschange,Ybodychange)",
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": "Ybodychange",
    "43876770d91a374563bf3379a5ffab5c2bac2264": "Ybodychange",
    "6de09af24487e2ff5bc22c7b1a07348c7119de80": "Ybodychange",
    "ef9f251679d7e87698eecd6a119652900274a172": "Ybodychange",
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": "Ybodychange",
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": "Ybodychange",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "4e5818698778bff9d2b1ba14297d8393e49927c7": "Ybodychange",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": "Ybodychange",
    "88b82a0f6687ce103817fbb460fd30d870f717a0": "Ybodychange",
    "ca853445e9a31e05278e9dceea9dbed734103f49": "Ybodychange",
    "cdfabf5ae289836968b3d296668593b9500b6f26": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5": "Ybodychange",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "360105482258569e5e31c49d023d2bbdc3ef38cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9954. Configurable max application tags and max tag length. Contributed by Bilwa S T\n",
      "commitDate": "17/04/20 10:34 AM",
      "commitName": "360105482258569e5e31c49d023d2bbdc3ef38cd",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "06/01/20 7:26 AM",
      "commitNameOld": "768ee22e9e73543d2fb193d9b6ec34a247cb0411",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 102.09,
      "commitsBetweenForRepo": 351,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,125 +1,127 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n           submissionContext.getQueue());\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n+    checkTags(submissionContext.getApplicationTags());\n+\n     if (timelineServiceV2Enabled) {\n       // Sanity check for flow run\n       String value \u003d null;\n       try {\n         for (String tag : submissionContext.getApplicationTags()) {\n           if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n               tag.startsWith(\n                   TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n             value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                 + 1);\n             // In order to check the number format\n             Long.valueOf(value);\n           }\n         }\n       } catch (NumberFormatException e) {\n         LOG.warn(\"Invalid to flow run: \" + value +\n             \". Flow run should be a long integer\", e);\n         RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n             e.getMessage(), \"ClientRMService\",\n             \"Exception in submitting application\", applicationId,\n             submissionContext.getQueue());\n         throw RPCUtil.getRemoteException(e);\n       }\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     ByteBuffer tokenConf \u003d\n         submissionContext.getAMContainerSpec().getTokensConf();\n     if (tokenConf !\u003d null) {\n       int maxSize \u003d getConfig()\n           .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n               YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n       LOG.info(\"Using app provided configurations for delegation token renewal,\"\n           + \" total size \u003d \" + tokenConf.capacity());\n       if (tokenConf.capacity() \u003e maxSize) {\n         throw new YarnException(\n             \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                 + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                 + tokenConf.capacity() + \" bytes.\");\n       }\n     }\n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     if (this.contextPreProcessor !\u003d null) {\n       this.contextPreProcessor.preProcess(Server.getRemoteIp().getHostName(),\n           applicationId, submissionContext);\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext,\n           submissionContext.getQueue(),\n           submissionContext.getNodeLabelExpression());\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting \" + applicationId, e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n           submissionContext.getQueue(),\n           submissionContext.getNodeLabelExpression());\n       throw e;\n     }\n \n     return recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    checkTags(submissionContext.getApplicationTags());\n\n    if (timelineServiceV2Enabled) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            // In order to check the number format\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId,\n            submissionContext.getQueue());\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    ByteBuffer tokenConf \u003d\n        submissionContext.getAMContainerSpec().getTokensConf();\n    if (tokenConf !\u003d null) {\n      int maxSize \u003d getConfig()\n          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n          + \" total size \u003d \" + tokenConf.capacity());\n      if (tokenConf.capacity() \u003e maxSize) {\n        throw new YarnException(\n            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                + tokenConf.capacity() + \" bytes.\");\n      }\n    }\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    if (this.contextPreProcessor !\u003d null) {\n      this.contextPreProcessor.preProcess(Server.getRemoteIp().getHostName(),\n          applicationId, submissionContext);\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext,\n          submissionContext.getQueue(),\n          submissionContext.getNodeLabelExpression());\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting \" + applicationId, e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue(),\n          submissionContext.getNodeLabelExpression());\n      throw e;\n    }\n\n    return recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "3d78b1223d3fdc29d500803cefd2931b54f44928": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9762. Add submission context label to audit logs. Contributed by Manoj Kumar\n",
      "commitDate": "23/09/19 1:12 PM",
      "commitName": "3d78b1223d3fdc29d500803cefd2931b54f44928",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "06/09/19 10:17 AM",
      "commitNameOld": "e7d44e48f708ba41e14d2a9e32a6760a62617485",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 17.12,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,123 +1,125 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n           submissionContext.getQueue());\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     if (timelineServiceV2Enabled) {\n       // Sanity check for flow run\n       String value \u003d null;\n       try {\n         for (String tag : submissionContext.getApplicationTags()) {\n           if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n               tag.startsWith(\n                   TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n             value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                 + 1);\n             // In order to check the number format\n             Long.valueOf(value);\n           }\n         }\n       } catch (NumberFormatException e) {\n         LOG.warn(\"Invalid to flow run: \" + value +\n             \". Flow run should be a long integer\", e);\n         RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n             e.getMessage(), \"ClientRMService\",\n             \"Exception in submitting application\", applicationId,\n             submissionContext.getQueue());\n         throw RPCUtil.getRemoteException(e);\n       }\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     ByteBuffer tokenConf \u003d\n         submissionContext.getAMContainerSpec().getTokensConf();\n     if (tokenConf !\u003d null) {\n       int maxSize \u003d getConfig()\n           .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n               YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n       LOG.info(\"Using app provided configurations for delegation token renewal,\"\n           + \" total size \u003d \" + tokenConf.capacity());\n       if (tokenConf.capacity() \u003e maxSize) {\n         throw new YarnException(\n             \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                 + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                 + tokenConf.capacity() + \" bytes.\");\n       }\n     }\n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     if (this.contextPreProcessor !\u003d null) {\n       this.contextPreProcessor.preProcess(Server.getRemoteIp().getHostName(),\n           applicationId, submissionContext);\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext,\n-          submissionContext.getQueue());\n+          submissionContext.getQueue(),\n+          submissionContext.getNodeLabelExpression());\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting \" + applicationId, e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n-          submissionContext.getQueue());\n+          submissionContext.getQueue(),\n+          submissionContext.getNodeLabelExpression());\n       throw e;\n     }\n \n     return recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (timelineServiceV2Enabled) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            // In order to check the number format\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId,\n            submissionContext.getQueue());\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    ByteBuffer tokenConf \u003d\n        submissionContext.getAMContainerSpec().getTokensConf();\n    if (tokenConf !\u003d null) {\n      int maxSize \u003d getConfig()\n          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n          + \" total size \u003d \" + tokenConf.capacity());\n      if (tokenConf.capacity() \u003e maxSize) {\n        throw new YarnException(\n            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                + tokenConf.capacity() + \" bytes.\");\n      }\n    }\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    if (this.contextPreProcessor !\u003d null) {\n      this.contextPreProcessor.preProcess(Server.getRemoteIp().getHostName(),\n          applicationId, submissionContext);\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext,\n          submissionContext.getQueue(),\n          submissionContext.getNodeLabelExpression());\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting \" + applicationId, e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue(),\n          submissionContext.getNodeLabelExpression());\n      throw e;\n    }\n\n    return recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e7d44e48f708ba41e14d2a9e32a6760a62617485": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9761. Allow overriding application submissions based on server side configs. Contributed by Pralabh Kumar\n",
      "commitDate": "06/09/19 10:17 AM",
      "commitName": "e7d44e48f708ba41e14d2a9e32a6760a62617485",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "15/08/19 8:15 AM",
      "commitNameOld": "1845a83cec6563482523d8c34b38c4e36c0aa9df",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 22.08,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,123 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n           submissionContext.getQueue());\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     if (timelineServiceV2Enabled) {\n       // Sanity check for flow run\n       String value \u003d null;\n       try {\n         for (String tag : submissionContext.getApplicationTags()) {\n           if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n               tag.startsWith(\n                   TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n             value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                 + 1);\n             // In order to check the number format\n             Long.valueOf(value);\n           }\n         }\n       } catch (NumberFormatException e) {\n         LOG.warn(\"Invalid to flow run: \" + value +\n             \". Flow run should be a long integer\", e);\n         RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n             e.getMessage(), \"ClientRMService\",\n             \"Exception in submitting application\", applicationId,\n             submissionContext.getQueue());\n         throw RPCUtil.getRemoteException(e);\n       }\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     ByteBuffer tokenConf \u003d\n         submissionContext.getAMContainerSpec().getTokensConf();\n     if (tokenConf !\u003d null) {\n       int maxSize \u003d getConfig()\n           .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n               YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n       LOG.info(\"Using app provided configurations for delegation token renewal,\"\n           + \" total size \u003d \" + tokenConf.capacity());\n       if (tokenConf.capacity() \u003e maxSize) {\n         throw new YarnException(\n             \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                 + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                 + tokenConf.capacity() + \" bytes.\");\n       }\n     }\n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n+    if (this.contextPreProcessor !\u003d null) {\n+      this.contextPreProcessor.preProcess(Server.getRemoteIp().getHostName(),\n+          applicationId, submissionContext);\n+    }\n+\n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext,\n           submissionContext.getQueue());\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting \" + applicationId, e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n           submissionContext.getQueue());\n       throw e;\n     }\n \n     return recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (timelineServiceV2Enabled) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            // In order to check the number format\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId,\n            submissionContext.getQueue());\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    ByteBuffer tokenConf \u003d\n        submissionContext.getAMContainerSpec().getTokensConf();\n    if (tokenConf !\u003d null) {\n      int maxSize \u003d getConfig()\n          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n          + \" total size \u003d \" + tokenConf.capacity());\n      if (tokenConf.capacity() \u003e maxSize) {\n        throw new YarnException(\n            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                + tokenConf.capacity() + \" bytes.\");\n      }\n    }\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    if (this.contextPreProcessor !\u003d null) {\n      this.contextPreProcessor.preProcess(Server.getRemoteIp().getHostName(),\n          applicationId, submissionContext);\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext,\n          submissionContext.getQueue());\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting \" + applicationId, e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw e;\n    }\n\n    return recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "ed13cf84068ad50a78e66211132c1f08238fb65b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9317. Avoid repeated YarnConfiguration#timelineServiceV2Enabled check. Contributed by Prabhu Joseph\n",
      "commitDate": "22/02/19 7:31 AM",
      "commitName": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "01/11/18 2:22 PM",
      "commitNameOld": "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 112.76,
      "commitsBetweenForRepo": 767,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,118 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n           submissionContext.getQueue());\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n-    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n+    if (timelineServiceV2Enabled) {\n       // Sanity check for flow run\n       String value \u003d null;\n       try {\n         for (String tag : submissionContext.getApplicationTags()) {\n           if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n               tag.startsWith(\n                   TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n             value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                 + 1);\n             // In order to check the number format\n             Long.valueOf(value);\n           }\n         }\n       } catch (NumberFormatException e) {\n         LOG.warn(\"Invalid to flow run: \" + value +\n             \". Flow run should be a long integer\", e);\n         RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n             e.getMessage(), \"ClientRMService\",\n             \"Exception in submitting application\", applicationId,\n             submissionContext.getQueue());\n         throw RPCUtil.getRemoteException(e);\n       }\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     ByteBuffer tokenConf \u003d\n         submissionContext.getAMContainerSpec().getTokensConf();\n     if (tokenConf !\u003d null) {\n       int maxSize \u003d getConfig()\n           .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n               YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n       LOG.info(\"Using app provided configurations for delegation token renewal,\"\n           + \" total size \u003d \" + tokenConf.capacity());\n       if (tokenConf.capacity() \u003e maxSize) {\n         throw new YarnException(\n             \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                 + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                 + tokenConf.capacity() + \" bytes.\");\n       }\n     }\n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext,\n           submissionContext.getQueue());\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting \" + applicationId, e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext,\n           submissionContext.getQueue());\n       throw e;\n     }\n \n     return recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (timelineServiceV2Enabled) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            // In order to check the number format\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId,\n            submissionContext.getQueue());\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    ByteBuffer tokenConf \u003d\n        submissionContext.getAMContainerSpec().getTokensConf();\n    if (tokenConf !\u003d null) {\n      int maxSize \u003d getConfig()\n          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n          + \" total size \u003d \" + tokenConf.capacity());\n      if (tokenConf.capacity() \u003e maxSize) {\n        throw new YarnException(\n            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                + tokenConf.capacity() + \" bytes.\");\n      }\n    }\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext,\n          submissionContext.getQueue());\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting \" + applicationId, e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw e;\n    }\n\n    return recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "2ab611d48b7669b31bd2c9b918f47251da77d0f6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7225. Add queue and partition info to RM audit log. Contributed by Eric Payne\n",
      "commitDate": "01/11/18 2:22 PM",
      "commitName": "2ab611d48b7669b31bd2c9b918f47251da77d0f6",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "08/10/18 9:40 AM",
      "commitNameOld": "7c13872cbbb6f1b0b1c2dde894885b41186b3797",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 24.2,
      "commitsBetweenForRepo": 272,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,114 +1,118 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n-          \"Exception in submitting application\", applicationId, callerContext);\n+          \"Exception in submitting application\", applicationId, callerContext,\n+          submissionContext.getQueue());\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       // Sanity check for flow run\n       String value \u003d null;\n       try {\n         for (String tag : submissionContext.getApplicationTags()) {\n           if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n               tag.startsWith(\n                   TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n             value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                 + 1);\n             // In order to check the number format\n             Long.valueOf(value);\n           }\n         }\n       } catch (NumberFormatException e) {\n         LOG.warn(\"Invalid to flow run: \" + value +\n             \". Flow run should be a long integer\", e);\n         RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n             e.getMessage(), \"ClientRMService\",\n-            \"Exception in submitting application\", applicationId);\n+            \"Exception in submitting application\", applicationId,\n+            submissionContext.getQueue());\n         throw RPCUtil.getRemoteException(e);\n       }\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     ByteBuffer tokenConf \u003d\n         submissionContext.getAMContainerSpec().getTokensConf();\n     if (tokenConf !\u003d null) {\n       int maxSize \u003d getConfig()\n           .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n               YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n       LOG.info(\"Using app provided configurations for delegation token renewal,\"\n           + \" total size \u003d \" + tokenConf.capacity());\n       if (tokenConf.capacity() \u003e maxSize) {\n         throw new YarnException(\n             \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                 + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                 + tokenConf.capacity() + \" bytes.\");\n       }\n     }\n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n-          \"ClientRMService\", applicationId, callerContext);\n+          \"ClientRMService\", applicationId, callerContext,\n+          submissionContext.getQueue());\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting \" + applicationId, e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n-          \"Exception in submitting application\", applicationId, callerContext);\n+          \"Exception in submitting application\", applicationId, callerContext,\n+          submissionContext.getQueue());\n       throw e;\n     }\n \n     return recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            // In order to check the number format\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId,\n            submissionContext.getQueue());\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    ByteBuffer tokenConf \u003d\n        submissionContext.getAMContainerSpec().getTokensConf();\n    if (tokenConf !\u003d null) {\n      int maxSize \u003d getConfig()\n          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n          + \" total size \u003d \" + tokenConf.capacity());\n      if (tokenConf.capacity() \u003e maxSize) {\n        throw new YarnException(\n            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                + tokenConf.capacity() + \" bytes.\");\n      }\n    }\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext,\n          submissionContext.getQueue());\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting \" + applicationId, e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext,\n          submissionContext.getQueue());\n      throw e;\n    }\n\n    return recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,114 +1,114 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       // Sanity check for flow run\n       String value \u003d null;\n       try {\n         for (String tag : submissionContext.getApplicationTags()) {\n           if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n               tag.startsWith(\n                   TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n             value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                 + 1);\n+            // In order to check the number format\n             Long.valueOf(value);\n           }\n         }\n       } catch (NumberFormatException e) {\n         LOG.warn(\"Invalid to flow run: \" + value +\n             \". Flow run should be a long integer\", e);\n         RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n             e.getMessage(), \"ClientRMService\",\n             \"Exception in submitting application\", applicationId);\n         throw RPCUtil.getRemoteException(e);\n       }\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     ByteBuffer tokenConf \u003d\n         submissionContext.getAMContainerSpec().getTokensConf();\n     if (tokenConf !\u003d null) {\n       int maxSize \u003d getConfig()\n           .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n               YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n       LOG.info(\"Using app provided configurations for delegation token renewal,\"\n           + \" total size \u003d \" + tokenConf.capacity());\n       if (tokenConf.capacity() \u003e maxSize) {\n         throw new YarnException(\n             \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                 + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                 + tokenConf.capacity() + \" bytes.\");\n       }\n     }\n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting \" + applicationId, e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw e;\n     }\n \n-    SubmitApplicationResponse response \u003d recordFactory\n+    return recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n-    return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            // In order to check the number format\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId);\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    ByteBuffer tokenConf \u003d\n        submissionContext.getAMContainerSpec().getTokensConf();\n    if (tokenConf !\u003d null) {\n      int maxSize \u003d getConfig()\n          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n          + \" total size \u003d \" + tokenConf.capacity());\n      if (tokenConf.capacity() \u003e maxSize) {\n        throw new YarnException(\n            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                + tokenConf.capacity() + \" bytes.\");\n      }\n    }\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting \" + applicationId, e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw e;\n    }\n\n    return recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "69fa81679f59378fd19a2c65db8019393d7c05a2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5910. Support for multi-cluster delegation tokens. Contributed by Jian He\n",
      "commitDate": "23/01/17 9:12 AM",
      "commitName": "69fa81679f59378fd19a2c65db8019393d7c05a2",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "11/01/17 2:34 PM",
      "commitNameOld": "7979939428ad5df213846e11bc1489bdf94ed9f8",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 11.78,
      "commitsBetweenForRepo": 60,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,100 +1,114 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n       // Sanity check for flow run\n       String value \u003d null;\n       try {\n         for (String tag : submissionContext.getApplicationTags()) {\n           if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n               tag.startsWith(\n                   TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n             value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                 + 1);\n             Long.valueOf(value);\n           }\n         }\n       } catch (NumberFormatException e) {\n         LOG.warn(\"Invalid to flow run: \" + value +\n             \". Flow run should be a long integer\", e);\n         RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n             e.getMessage(), \"ClientRMService\",\n             \"Exception in submitting application\", applicationId);\n         throw RPCUtil.getRemoteException(e);\n       }\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n+    ByteBuffer tokenConf \u003d\n+        submissionContext.getAMContainerSpec().getTokensConf();\n+    if (tokenConf !\u003d null) {\n+      int maxSize \u003d getConfig()\n+          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n+              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n+      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n+          + \" total size \u003d \" + tokenConf.capacity());\n+      if (tokenConf.capacity() \u003e maxSize) {\n+        throw new YarnException(\n+            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n+                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n+                + tokenConf.capacity() + \" bytes.\");\n+      }\n+    }\n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext);\n     } catch (YarnException e) {\n-      LOG.info(\"Exception in submitting application with id \" +\n-          applicationId.getId(), e);\n+      LOG.info(\"Exception in submitting \" + applicationId, e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId);\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    ByteBuffer tokenConf \u003d\n        submissionContext.getAMContainerSpec().getTokensConf();\n    if (tokenConf !\u003d null) {\n      int maxSize \u003d getConfig()\n          .getInt(YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE,\n              YarnConfiguration.DEFAULT_RM_DELEGATION_TOKEN_MAX_CONF_SIZE_BYTES);\n      LOG.info(\"Using app provided configurations for delegation token renewal,\"\n          + \" total size \u003d \" + tokenConf.capacity());\n      if (tokenConf.capacity() \u003e maxSize) {\n        throw new YarnException(\n            \"Exceed \" + YarnConfiguration.RM_DELEGATION_TOKEN_MAX_CONF_SIZE\n                + \" \u003d \" + maxSize + \" bytes, current conf size \u003d \"\n                + tokenConf.capacity() + \" bytes.\");\n      }\n    }\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting \" + applicationId, e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4356. Ensure the timeline service v.2 is disabled cleanly and has no\nimpact when it\u0027s turned off. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,100 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n-    // Sanity check for flow run\n-    String value \u003d null;\n-    try {\n-      for (String tag : submissionContext.getApplicationTags()) {\n-        if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n-            tag.startsWith(\n-                TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n-          value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length() + 1);\n-          Long.valueOf(value);\n+    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n+      // Sanity check for flow run\n+      String value \u003d null;\n+      try {\n+        for (String tag : submissionContext.getApplicationTags()) {\n+          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n+              tag.startsWith(\n+                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n+            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n+                + 1);\n+            Long.valueOf(value);\n+          }\n         }\n+      } catch (NumberFormatException e) {\n+        LOG.warn(\"Invalid to flow run: \" + value +\n+            \". Flow run should be a long integer\", e);\n+        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n+            e.getMessage(), \"ClientRMService\",\n+            \"Exception in submitting application\", applicationId);\n+        throw RPCUtil.getRemoteException(e);\n       }\n-    } catch (NumberFormatException e) {\n-      LOG.warn(\"Invalid to flow run: \" + value +\n-          \". Flow run should be a long integer\", e);\n-      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n-          e.getMessage(), \"ClientRMService\",\n-          \"Exception in submitting application\", applicationId);\n-      throw RPCUtil.getRemoteException(e);\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    if (YarnConfiguration.timelineServiceV2Enabled(getConfig())) {\n      // Sanity check for flow run\n      String value \u003d null;\n      try {\n        for (String tag : submissionContext.getApplicationTags()) {\n          if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n              tag.startsWith(\n                  TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n            value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length()\n                + 1);\n            Long.valueOf(value);\n          }\n        }\n      } catch (NumberFormatException e) {\n        LOG.warn(\"Invalid to flow run: \" + value +\n            \". Flow run should be a long integer\", e);\n        RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n            e.getMessage(), \"ClientRMService\",\n            \"Exception in submitting application\", applicationId);\n        throw RPCUtil.getRemoteException(e);\n      }\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "47f35a30bb4d99349593e9d6e1c9e76e71341c40": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3391. Clearly define flow ID/ flow run / flow version in API and storage. Contributed by Zhijie Shen\n\n(cherry picked from commit 68c6232f8423e55b4d152ef3d1d66aeb2d6a555e)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "47f35a30bb4d99349593e9d6e1c9e76e71341c40",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/07/16 10:36 AM",
      "commitNameOld": "04f6ebb66a4ffc04a635ab9c0234080f290b39f2",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 3.92,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,97 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n+    // Sanity check for flow run\n+    String value \u003d null;\n+    try {\n+      for (String tag : submissionContext.getApplicationTags()) {\n+        if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n+            tag.startsWith(\n+                TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n+          value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length() + 1);\n+          Long.valueOf(value);\n+        }\n+      }\n+    } catch (NumberFormatException e) {\n+      LOG.warn(\"Invalid to flow run: \" + value +\n+          \". Flow run should be a long integer\", e);\n+      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n+          e.getMessage(), \"ClientRMService\",\n+          \"Exception in submitting application\", applicationId);\n+      throw RPCUtil.getRemoteException(e);\n+    }\n+\n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n             .getReservationID();\n \n     checkReservationACLs(submissionContext.getQueue(), AuditConstants\n             .SUBMIT_RESERVATION_REQUEST, reservationId);\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Sanity check for flow run\n    String value \u003d null;\n    try {\n      for (String tag : submissionContext.getApplicationTags()) {\n        if (tag.startsWith(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX + \":\") ||\n            tag.startsWith(\n                TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.toLowerCase() + \":\")) {\n          value \u003d tag.substring(TimelineUtils.FLOW_RUN_ID_TAG_PREFIX.length() + 1);\n          Long.valueOf(value);\n        }\n      }\n    } catch (NumberFormatException e) {\n      LOG.warn(\"Invalid to flow run: \" + value +\n          \". Flow run should be a long integer\", e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
      "commitDate": "11/02/16 10:47 AM",
      "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/02/16 6:17 PM",
      "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.69,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,77 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n+    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n+            .getReservationID();\n+\n+    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n+            .SUBMIT_RESERVATION_REQUEST, reservationId);\n+\n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    ReservationId reservationId \u003d request.getApplicationSubmissionContext()\n            .getReservationID();\n\n    checkReservationACLs(submissionContext.getQueue(), AuditConstants\n            .SUBMIT_RESERVATION_REQUEST, reservationId);\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-4522. Queue acl can be checked at app submission. (Jian He via wangda)\n",
      "commitDate": "30/12/15 3:30 PM",
      "commitName": "8310b2e9ff3d6804bad703c4c15458b0dfeeb4af",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "18/12/15 2:13 PM",
      "commitNameOld": "85c24660481f33684a42a7f6d665d3117577c780",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 12.05,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,71 @@\n   public SubmitApplicationResponse submitApplication(\n-      SubmitApplicationRequest request) throws YarnException {\n+      SubmitApplicationRequest request) throws YarnException, IOException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId, callerContext);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId, callerContext);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException, IOException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldValue": "[YarnException]",
        "newValue": "[YarnException, IOException]"
      }
    },
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4349. Support CallerContext in YARN. Contributed by Wangda Tan\n",
      "commitDate": "23/11/15 5:19 PM",
      "commitName": "8676a118a12165ae5a8b80a2a4596c133471ebc1",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/10/15 6:51 AM",
      "commitNameOld": "2798723a5443d04455b9d79c48d61f435ab52267",
      "commitAuthorOld": "Anubhav Dhoot",
      "daysBetweenCommits": 32.48,
      "commitsBetweenForRepo": 259,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,71 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n+    CallerContext callerContext \u003d CallerContext.getCurrent();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n-          \"Exception in submitting application\", applicationId);\n+          \"Exception in submitting application\", applicationId, callerContext);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Check whether app has already been put into rmContext,\n     // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       LOG.info(\"This is an earlier submitted application: \" + applicationId);\n       return SubmitApplicationResponse.newInstance();\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n-          \"ClientRMService\", applicationId);\n+          \"ClientRMService\", applicationId, callerContext);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n-          \"Exception in submitting application\", applicationId);\n+          \"Exception in submitting application\", applicationId, callerContext);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    CallerContext callerContext \u003d CallerContext.getCurrent();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId, callerContext);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId, callerContext);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "71c2b159ab9c6c3a48e5b9670dc85ddbf8a380c1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1521. Mark Idempotent/AtMostOnce annotations to the APIs in ApplicationClientProtcol, ResourceManagerAdministrationProtocol and ResourceTrackerProtocol so that they work in HA scenario. Contributed by Xuan Gong\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581678 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/14 8:43 PM",
      "commitName": "71c2b159ab9c6c3a48e5b9670dc85ddbf8a380c1",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/03/14 12:42 AM",
      "commitNameOld": "6af044bb75fe3ddf184841483cce5e222ad1853a",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 12.83,
      "commitsBetweenForRepo": 106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,70 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n-    // Though duplication will checked again when app is put into rmContext,\n-    // but it is good to fail the invalid submission as early as possible.\n+    // Check whether app has already been put into rmContext,\n+    // If it is, simply return the response\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n-      String message \u003d \"Application with id \" + applicationId +\n-          \" is already present! Cannot add a duplicate!\";\n-      LOG.warn(message);\n-      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n-          message, \"ClientRMService\", \"Exception in submitting application\",\n-          applicationId);\n-      throw RPCUtil.getRemoteException(message);\n+      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n+      return SubmitApplicationResponse.newInstance();\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Check whether app has already been put into rmContext,\n    // If it is, simply return the response\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      LOG.info(\"This is an earlier submitted application: \" + applicationId);\n      return SubmitApplicationResponse.newInstance();\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "4de17c60528cb29bf7306dbaa720b96063948b17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1812. Fixed ResourceManager to synchrously renew tokens after recovery and thus recover app itself synchronously and avoid races with resyncing NodeManagers. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1576843 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/03/14 11:25 AM",
      "commitName": "4de17c60528cb29bf7306dbaa720b96063948b17",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/03/14 10:58 AM",
      "commitNameOld": "7da07461ffadb462567c81ad155d3d1473ad89d7",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.02,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Though duplication will checked again when app is put into rmContext,\n     // but it is good to fail the invalid submission as early as possible.\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       String message \u003d \"Application with id \" + applicationId +\n           \" is already present! Cannot add a duplicate!\";\n       LOG.warn(message);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           message, \"ClientRMService\", \"Exception in submitting application\",\n           applicationId);\n       throw RPCUtil.getRemoteException(message);\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n-          System.currentTimeMillis(), user, false, null);\n+          System.currentTimeMillis(), user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Though duplication will checked again when app is put into rmContext,\n    // but it is good to fail the invalid submission as early as possible.\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      String message \u003d \"Application with id \" + applicationId +\n          \" is already present! Cannot add a duplicate!\";\n      LOG.warn(message);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          message, \"ClientRMService\", \"Exception in submitting application\",\n          applicationId);\n      throw RPCUtil.getRemoteException(message);\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "512475e56f0a27bf3c3ff596184f96993bb4bef4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-674. Fixed ResourceManager to renew DelegationTokens on submission asynchronously to work around potential slowness in state-store. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543312 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:20 PM",
      "commitName": "512475e56f0a27bf3c3ff596184f96993bb4bef4",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/11/13 1:49 PM",
      "commitNameOld": "72c6d6255a86225ae1771fcc15e46aff7a4cc384",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 7.31,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,75 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Though duplication will checked again when app is put into rmContext,\n     // but it is good to fail the invalid submission as early as possible.\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       String message \u003d \"Application with id \" + applicationId +\n           \" is already present! Cannot add a duplicate!\";\n       LOG.warn(message);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           message, \"ClientRMService\", \"Exception in submitting application\",\n           applicationId);\n       throw RPCUtil.getRemoteException(message);\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n-          System.currentTimeMillis(), false, user);\n+          System.currentTimeMillis(), user, false, null);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Though duplication will checked again when app is put into rmContext,\n    // but it is good to fail the invalid submission as early as possible.\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      String message \u003d \"Application with id \" + applicationId +\n          \" is already present! Cannot add a duplicate!\";\n      LOG.warn(message);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          message, \"ClientRMService\", \"Exception in submitting application\",\n          applicationId);\n      throw RPCUtil.getRemoteException(message);\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), user, false, null);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/13 9:05 PM",
          "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 5:34 PM",
          "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,75 @@\n   public SubmitApplicationResponse submitApplication(\n-      SubmitApplicationRequest request) throws YarnRemoteException {\n+      SubmitApplicationRequest request) throws YarnException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Though duplication will checked again when app is put into rmContext,\n     // but it is good to fail the invalid submission as early as possible.\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       String message \u003d \"Application with id \" + applicationId +\n           \" is already present! Cannot add a duplicate!\";\n       LOG.warn(message);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           message, \"ClientRMService\", \"Exception in submitting application\",\n           applicationId);\n       throw RPCUtil.getRemoteException(message);\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), false, user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n-    } catch (YarnRemoteException e) {\n+    } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Though duplication will checked again when app is put into rmContext,\n    // but it is good to fail the invalid submission as early as possible.\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      String message \u003d \"Application with id \" + applicationId +\n          \" is already present! Cannot add a duplicate!\";\n      LOG.warn(message);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          message, \"ClientRMService\", \"Exception in submitting application\",\n          applicationId);\n      throw RPCUtil.getRemoteException(message);\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), false, user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException]",
            "newValue": "[YarnException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/13 9:05 PM",
          "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/06/13 5:34 PM",
          "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,75 @@\n   public SubmitApplicationResponse submitApplication(\n-      SubmitApplicationRequest request) throws YarnRemoteException {\n+      SubmitApplicationRequest request) throws YarnException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Though duplication will checked again when app is put into rmContext,\n     // but it is good to fail the invalid submission as early as possible.\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       String message \u003d \"Application with id \" + applicationId +\n           \" is already present! Cannot add a duplicate!\";\n       LOG.warn(message);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           message, \"ClientRMService\", \"Exception in submitting application\",\n           applicationId);\n       throw RPCUtil.getRemoteException(message);\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), false, user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n-    } catch (YarnRemoteException e) {\n+    } catch (YarnException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Though duplication will checked again when app is put into rmContext,\n    // but it is good to fail the invalid submission as early as possible.\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      String message \u003d \"Application with id \" + applicationId +\n          \" is already present! Cannot add a duplicate!\";\n      LOG.warn(message);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          message, \"ClientRMService\", \"Exception in submitting application\",\n          applicationId);\n      throw RPCUtil.getRemoteException(message);\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), false, user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "259edf8dca44de54033e96f7eb65a83aaa6096f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-571. Remove user from ContainerLaunchContext. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485928 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/13 8:22 PM",
      "commitName": "259edf8dca44de54033e96f7eb65a83aaa6096f2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/05/13 11:02 AM",
      "commitNameOld": "43876770d91a374563bf3379a5ffab5c2bac2264",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.39,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,75 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-      submissionContext.getAMContainerSpec().setUser(user);\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Though duplication will checked again when app is put into rmContext,\n     // but it is good to fail the invalid submission as early as possible.\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       String message \u003d \"Application with id \" + applicationId +\n           \" is already present! Cannot add a duplicate!\";\n       LOG.warn(message);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           message, \"ClientRMService\", \"Exception in submitting application\",\n           applicationId);\n       throw RPCUtil.getRemoteException(message);\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n     if (submissionContext.getApplicationType() \u003d\u003d null) {\n       submissionContext\n         .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n     } else {\n       if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n         submissionContext.setApplicationType(submissionContext\n           .getApplicationType().substring(0,\n             YarnConfiguration.APPLICATION_TYPE_LENGTH));\n       }\n     }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n-          System.currentTimeMillis(), false);\n+          System.currentTimeMillis(), false, user);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (YarnRemoteException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Though duplication will checked again when app is put into rmContext,\n    // but it is good to fail the invalid submission as early as possible.\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      String message \u003d \"Application with id \" + applicationId +\n          \" is already present! Cannot add a duplicate!\";\n      LOG.warn(message);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          message, \"ClientRMService\", \"Exception in submitting application\",\n          applicationId);\n      throw RPCUtil.getRemoteException(message);\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), false, user);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnRemoteException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "43876770d91a374563bf3379a5ffab5c2bac2264": {
      "type": "Ybodychange",
      "commitMessage": "YARN-563. Add the concept of an application-type for each application. Contributed by Mayank Bansal.\nMAPREDUCE-5246. Specify application-type at the time of job submission after YARN-563. Contributed by Mayank Bansal.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1485790 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/13 11:02 AM",
      "commitName": "43876770d91a374563bf3379a5ffab5c2bac2264",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/05/13 6:12 PM",
      "commitNameOld": "c0fa9d2231967c8a62ae44019ca1bd335db115b5",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 19.7,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,76 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n \n     // ApplicationSubmissionContext needs to be validated for safety - only\n     // those fields that are independent of the RM\u0027s configuration will be\n     // checked here, those that are dependent on RM configuration are validated\n     // in RMAppManager.\n \n     String user \u003d null;\n     try {\n       // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       submissionContext.getAMContainerSpec().setUser(user);\n     } catch (IOException ie) {\n       LOG.warn(\"Unable to get the current user.\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     // Though duplication will checked again when app is put into rmContext,\n     // but it is good to fail the invalid submission as early as possible.\n     if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n       String message \u003d \"Application with id \" + applicationId +\n           \" is already present! Cannot add a duplicate!\";\n       LOG.warn(message);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           message, \"ClientRMService\", \"Exception in submitting application\",\n           applicationId);\n       throw RPCUtil.getRemoteException(message);\n     }\n \n     if (submissionContext.getQueue() \u003d\u003d null) {\n       submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n     }\n     if (submissionContext.getApplicationName() \u003d\u003d null) {\n       submissionContext.setApplicationName(\n           YarnConfiguration.DEFAULT_APPLICATION_NAME);\n     }\n+    if (submissionContext.getApplicationType() \u003d\u003d null) {\n+      submissionContext\n+        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n+    } else {\n+      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n+        submissionContext.setApplicationType(submissionContext\n+          .getApplicationType().substring(0,\n+            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n+      }\n+    }\n \n     try {\n       // call RMAppManager to submit application directly\n       rmAppManager.submitApplication(submissionContext,\n           System.currentTimeMillis(), false);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (YarnRemoteException e) {\n       LOG.info(\"Exception in submitting application with id \" +\n           applicationId.getId(), e);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      submissionContext.getAMContainerSpec().setUser(user);\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Though duplication will checked again when app is put into rmContext,\n    // but it is good to fail the invalid submission as early as possible.\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      String message \u003d \"Application with id \" + applicationId +\n          \" is already present! Cannot add a duplicate!\";\n      LOG.warn(message);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          message, \"ClientRMService\", \"Exception in submitting application\",\n          applicationId);\n      throw RPCUtil.getRemoteException(message);\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n    if (submissionContext.getApplicationType() \u003d\u003d null) {\n      submissionContext\n        .setApplicationType(YarnConfiguration.DEFAULT_APPLICATION_TYPE);\n    } else {\n      if (submissionContext.getApplicationType().length() \u003e YarnConfiguration.APPLICATION_TYPE_LENGTH) {\n        submissionContext.setApplicationType(submissionContext\n          .getApplicationType().substring(0,\n            YarnConfiguration.APPLICATION_TYPE_LENGTH));\n      }\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), false);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnRemoteException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "6de09af24487e2ff5bc22c7b1a07348c7119de80": {
      "type": "Ybodychange",
      "commitMessage": "YARN-599. Refactoring submitApplication in ClientRMService and RMAppManager to separate out various validation checks depending on whether they rely on RM configuration or not. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477478 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 10:44 PM",
      "commitName": "6de09af24487e2ff5bc22c7b1a07348c7119de80",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/04/13 1:19 PM",
      "commitNameOld": "ef9f251679d7e87698eecd6a119652900274a172",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 12.39,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,66 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n-    String user \u003d submissionContext.getAMContainerSpec().getUser();\n+\n+    // ApplicationSubmissionContext needs to be validated for safety - only\n+    // those fields that are independent of the RM\u0027s configuration will be\n+    // checked here, those that are dependent on RM configuration are validated\n+    // in RMAppManager.\n+\n+    String user \u003d null;\n     try {\n+      // Safety\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n-        throw new IOException(\"Application with id \" + applicationId\n-            + \" is already present! Cannot add a duplicate!\");\n-      }\n-\n-      // Safety \n       submissionContext.getAMContainerSpec().setUser(user);\n+    } catch (IOException ie) {\n+      LOG.warn(\"Unable to get the current user.\", ie);\n+      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n+          ie.getMessage(), \"ClientRMService\",\n+          \"Exception in submitting application\", applicationId);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n \n-      // Check whether AM resource requirements are within required limits\n-      if (!submissionContext.getUnmanagedAM()) {\n-        ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n-            RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n-            submissionContext.getResource(), 1);\n-        try {\n-          SchedulerUtils.validateResourceRequest(amReq,\n-              scheduler.getMaximumResourceCapability());\n-        } catch (InvalidResourceRequestException e) {\n-          LOG.warn(\"RM app submission failed in validating AM resource request\"\n-              + \" for application \" + applicationId, e);\n-          throw RPCUtil.getRemoteException(e);\n-        }\n-      }\n+    // Though duplication will checked again when app is put into rmContext,\n+    // but it is good to fail the invalid submission as early as possible.\n+    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n+      String message \u003d \"Application with id \" + applicationId +\n+          \" is already present! Cannot add a duplicate!\";\n+      LOG.warn(message);\n+      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n+          message, \"ClientRMService\", \"Exception in submitting application\",\n+          applicationId);\n+      throw RPCUtil.getRemoteException(message);\n+    }\n \n-      // This needs to be synchronous as the client can query \n-      // immediately following the submission to get the application status.\n-      // So call handle directly and do not send an event.\n-      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n-          .currentTimeMillis()));\n+    if (submissionContext.getQueue() \u003d\u003d null) {\n+      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n+    }\n+    if (submissionContext.getApplicationName() \u003d\u003d null) {\n+      submissionContext.setApplicationName(\n+          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n+    }\n+\n+    try {\n+      // call RMAppManager to submit application directly\n+      rmAppManager.submitApplication(submissionContext,\n+          System.currentTimeMillis(), false);\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n-    } catch (IOException ie) {\n-      LOG.info(\"Exception in submitting application\", ie);\n-      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n-          ie.getMessage(), \"ClientRMService\",\n+    } catch (YarnRemoteException e) {\n+      LOG.info(\"Exception in submitting application with id \" +\n+          applicationId.getId(), e);\n+      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n+          e.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n-      throw RPCUtil.getRemoteException(ie);\n+      throw e;\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n\n    // ApplicationSubmissionContext needs to be validated for safety - only\n    // those fields that are independent of the RM\u0027s configuration will be\n    // checked here, those that are dependent on RM configuration are validated\n    // in RMAppManager.\n\n    String user \u003d null;\n    try {\n      // Safety\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      submissionContext.getAMContainerSpec().setUser(user);\n    } catch (IOException ie) {\n      LOG.warn(\"Unable to get the current user.\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    // Though duplication will checked again when app is put into rmContext,\n    // but it is good to fail the invalid submission as early as possible.\n    if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n      String message \u003d \"Application with id \" + applicationId +\n          \" is already present! Cannot add a duplicate!\";\n      LOG.warn(message);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          message, \"ClientRMService\", \"Exception in submitting application\",\n          applicationId);\n      throw RPCUtil.getRemoteException(message);\n    }\n\n    if (submissionContext.getQueue() \u003d\u003d null) {\n      submissionContext.setQueue(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    }\n    if (submissionContext.getApplicationName() \u003d\u003d null) {\n      submissionContext.setApplicationName(\n          YarnConfiguration.DEFAULT_APPLICATION_NAME);\n    }\n\n    try {\n      // call RMAppManager to submit application directly\n      rmAppManager.submitApplication(submissionContext,\n          System.currentTimeMillis(), false);\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (YarnRemoteException e) {\n      LOG.info(\"Exception in submitting application with id \" +\n          applicationId.getId(), e);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw e;\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "ef9f251679d7e87698eecd6a119652900274a172": {
      "type": "Ybodychange",
      "commitMessage": "YARN-514.Delayed store operations should not result in RM unavailability for app submission (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/13 1:19 PM",
      "commitName": "ef9f251679d7e87698eecd6a119652900274a172",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "11/04/13 12:28 PM",
      "commitNameOld": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 6.04,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,53 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     String user \u003d submissionContext.getAMContainerSpec().getUser();\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n \n       // Safety \n       submissionContext.getAMContainerSpec().setUser(user);\n \n       // Check whether AM resource requirements are within required limits\n       if (!submissionContext.getUnmanagedAM()) {\n         ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n             RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n             submissionContext.getResource(), 1);\n         try {\n           SchedulerUtils.validateResourceRequest(amReq,\n               scheduler.getMaximumResourceCapability());\n         } catch (InvalidResourceRequestException e) {\n           LOG.warn(\"RM app submission failed in validating AM resource request\"\n               + \" for application \" + applicationId, e);\n           throw RPCUtil.getRemoteException(e);\n         }\n       }\n \n       // This needs to be synchronous as the client can query \n       // immediately following the submission to get the application status.\n       // So call handle directly and do not send an event.\n       rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n           .currentTimeMillis()));\n-      \n-      // If recovery is enabled then store the application information in a \n-      // blocking call so make sure that RM has stored the information needed \n-      // to restart the AM after RM restart without further client communication\n-      RMStateStore stateStore \u003d rmContext.getStateStore();\n-      LOG.info(\"Storing Application with id \" + applicationId);\n-      try {\n-        stateStore.storeApplication(rmContext.getRMApps().get(applicationId));\n-      } catch (Exception e) {\n-        // For HA this exception needs to be handled by giving up \n-        // master status if we got fenced\n-        LOG.error(\"Failed to store application:\" + applicationId, e);\n-        ExitUtil.terminate(1, e);\n-      }\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getAMContainerSpec().getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n\n      // Safety \n      submissionContext.getAMContainerSpec().setUser(user);\n\n      // Check whether AM resource requirements are within required limits\n      if (!submissionContext.getUnmanagedAM()) {\n        ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n            RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n            submissionContext.getResource(), 1);\n        try {\n          SchedulerUtils.validateResourceRequest(amReq,\n              scheduler.getMaximumResourceCapability());\n        } catch (InvalidResourceRequestException e) {\n          LOG.warn(\"RM app submission failed in validating AM resource request\"\n              + \" for application \" + applicationId, e);\n          throw RPCUtil.getRemoteException(e);\n        }\n      }\n\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n          .currentTimeMillis()));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-486. Changed NM\u0027s startContainer API to accept Container record given by RM as a direct parameter instead of as part of the ContainerLaunchContext record. Contributed by Xuan Gong.\nMAPREDUCE-5139. Update MR AM to use the modified startContainer API after YARN-486. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1467063 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/13 12:28 PM",
      "commitName": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/04/13 10:45 AM",
      "commitNameOld": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 6.07,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n-    String user \u003d submissionContext.getUser();\n+    String user \u003d submissionContext.getAMContainerSpec().getUser();\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n \n       // Safety \n-      submissionContext.setUser(user);\n+      submissionContext.getAMContainerSpec().setUser(user);\n \n       // Check whether AM resource requirements are within required limits\n       if (!submissionContext.getUnmanagedAM()) {\n         ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n             RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n-            submissionContext.getAMContainerSpec().getResource(), 1);\n+            submissionContext.getResource(), 1);\n         try {\n           SchedulerUtils.validateResourceRequest(amReq,\n               scheduler.getMaximumResourceCapability());\n         } catch (InvalidResourceRequestException e) {\n           LOG.warn(\"RM app submission failed in validating AM resource request\"\n               + \" for application \" + applicationId, e);\n           throw RPCUtil.getRemoteException(e);\n         }\n       }\n \n       // This needs to be synchronous as the client can query \n       // immediately following the submission to get the application status.\n       // So call handle directly and do not send an event.\n       rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n           .currentTimeMillis()));\n       \n       // If recovery is enabled then store the application information in a \n       // blocking call so make sure that RM has stored the information needed \n       // to restart the AM after RM restart without further client communication\n       RMStateStore stateStore \u003d rmContext.getStateStore();\n       LOG.info(\"Storing Application with id \" + applicationId);\n       try {\n         stateStore.storeApplication(rmContext.getRMApps().get(applicationId));\n       } catch (Exception e) {\n         // For HA this exception needs to be handled by giving up \n         // master status if we got fenced\n         LOG.error(\"Failed to store application:\" + applicationId, e);\n         ExitUtil.terminate(1, e);\n       }\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getAMContainerSpec().getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n\n      // Safety \n      submissionContext.getAMContainerSpec().setUser(user);\n\n      // Check whether AM resource requirements are within required limits\n      if (!submissionContext.getUnmanagedAM()) {\n        ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n            RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n            submissionContext.getResource(), 1);\n        try {\n          SchedulerUtils.validateResourceRequest(amReq,\n              scheduler.getMaximumResourceCapability());\n        } catch (InvalidResourceRequestException e) {\n          LOG.warn(\"RM app submission failed in validating AM resource request\"\n              + \" for application \" + applicationId, e);\n          throw RPCUtil.getRemoteException(e);\n        }\n      }\n\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n          .currentTimeMillis()));\n      \n      // If recovery is enabled then store the application information in a \n      // blocking call so make sure that RM has stored the information needed \n      // to restart the AM after RM restart without further client communication\n      RMStateStore stateStore \u003d rmContext.getStateStore();\n      LOG.info(\"Storing Application with id \" + applicationId);\n      try {\n        stateStore.storeApplication(rmContext.getRMApps().get(applicationId));\n      } catch (Exception e) {\n        // For HA this exception needs to be handled by giving up \n        // master status if we got fenced\n        LOG.error(\"Failed to store application:\" + applicationId, e);\n        ExitUtil.terminate(1, e);\n      }\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "bc6777dd5bdcbaef09897b506bc6511ae456033d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-193. Scheduler.normalizeRequest does not account for allocation requests that exceed maximumAllocation limits (Zhijie Shen via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1465067 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/04/13 10:45 AM",
      "commitName": "bc6777dd5bdcbaef09897b506bc6511ae456033d",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "28/02/13 5:28 PM",
      "commitNameOld": "5d6eca08bd778fd971b29d3553d32cfc0dbe8d4e",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 35.68,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,67 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     String user \u003d submissionContext.getUser();\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n \n       // Safety \n       submissionContext.setUser(user);\n \n+      // Check whether AM resource requirements are within required limits\n+      if (!submissionContext.getUnmanagedAM()) {\n+        ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n+            RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n+            submissionContext.getAMContainerSpec().getResource(), 1);\n+        try {\n+          SchedulerUtils.validateResourceRequest(amReq,\n+              scheduler.getMaximumResourceCapability());\n+        } catch (InvalidResourceRequestException e) {\n+          LOG.warn(\"RM app submission failed in validating AM resource request\"\n+              + \" for application \" + applicationId, e);\n+          throw RPCUtil.getRemoteException(e);\n+        }\n+      }\n+\n       // This needs to be synchronous as the client can query \n       // immediately following the submission to get the application status.\n       // So call handle directly and do not send an event.\n       rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n           .currentTimeMillis()));\n       \n       // If recovery is enabled then store the application information in a \n       // blocking call so make sure that RM has stored the information needed \n       // to restart the AM after RM restart without further client communication\n       RMStateStore stateStore \u003d rmContext.getStateStore();\n       LOG.info(\"Storing Application with id \" + applicationId);\n       try {\n         stateStore.storeApplication(rmContext.getRMApps().get(applicationId));\n       } catch (Exception e) {\n         // For HA this exception needs to be handled by giving up \n         // master status if we got fenced\n         LOG.error(\"Failed to store application:\" + applicationId, e);\n         ExitUtil.terminate(1, e);\n       }\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n\n      // Safety \n      submissionContext.setUser(user);\n\n      // Check whether AM resource requirements are within required limits\n      if (!submissionContext.getUnmanagedAM()) {\n        ResourceRequest amReq \u003d BuilderUtils.newResourceRequest(\n            RMAppAttemptImpl.AM_CONTAINER_PRIORITY, ResourceRequest.ANY,\n            submissionContext.getAMContainerSpec().getResource(), 1);\n        try {\n          SchedulerUtils.validateResourceRequest(amReq,\n              scheduler.getMaximumResourceCapability());\n        } catch (InvalidResourceRequestException e) {\n          LOG.warn(\"RM app submission failed in validating AM resource request\"\n              + \" for application \" + applicationId, e);\n          throw RPCUtil.getRemoteException(e);\n        }\n      }\n\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n          .currentTimeMillis()));\n      \n      // If recovery is enabled then store the application information in a \n      // blocking call so make sure that RM has stored the information needed \n      // to restart the AM after RM restart without further client communication\n      RMStateStore stateStore \u003d rmContext.getStateStore();\n      LOG.info(\"Storing Application with id \" + applicationId);\n      try {\n        stateStore.storeApplication(rmContext.getRMApps().get(applicationId));\n      } catch (Exception e) {\n        // For HA this exception needs to be handled by giving up \n        // master status if we got fenced\n        LOG.error(\"Failed to store application:\" + applicationId, e);\n        ExitUtil.terminate(1, e);\n      }\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": {
      "type": "Ybodychange",
      "commitMessage": "YARN-230. RM Restart phase 1 - includes support for saving/restarting all applications on an RM bounce. Contributed by Bikas Saha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423758 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 8:21 PM",
      "commitName": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 132.96,
      "commitsBetweenForRepo": 740,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,52 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     String user \u003d submissionContext.getUser();\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n \n       // Safety \n       submissionContext.setUser(user);\n \n       // This needs to be synchronous as the client can query \n       // immediately following the submission to get the application status.\n       // So call handle directly and do not send an event.\n       rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n           .currentTimeMillis()));\n+      \n+      // If recovery is enabled then store the application information in a \n+      // blocking call so make sure that RM has stored the information needed \n+      // to restart the AM after RM restart without further client communication\n+      RMStateStore stateStore \u003d rmContext.getStateStore();\n+      LOG.info(\"Storing Application with id \" + applicationId);\n+      try {\n+        stateStore.storeApplication(rmContext.getRMApps().get(applicationId));\n+      } catch (Exception e) {\n+        // For HA this exception needs to be handled by giving up \n+        // master status if we got fenced\n+        LOG.error(\"Failed to store application:\" + applicationId, e);\n+        ExitUtil.terminate(1, e);\n+      }\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n\n      // Safety \n      submissionContext.setUser(user);\n\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n          .currentTimeMillis()));\n      \n      // If recovery is enabled then store the application information in a \n      // blocking call so make sure that RM has stored the information needed \n      // to restart the AM after RM restart without further client communication\n      RMStateStore stateStore \u003d rmContext.getStateStore();\n      LOG.info(\"Storing Application with id \" + applicationId);\n      try {\n        stateStore.storeApplication(rmContext.getRMApps().get(applicationId));\n      } catch (Exception e) {\n        // For HA this exception needs to be handled by giving up \n        // master status if we got fenced\n        LOG.error(\"Failed to store application:\" + applicationId, e);\n        ExitUtil.terminate(1, e);\n      }\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n\n      // Safety \n      submissionContext.setUser(user);\n\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n          .currentTimeMillis()));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "4e5818698778bff9d2b1ba14297d8393e49927c7": {
      "type": "Ybodychange",
      "commitMessage": "Removed some logs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304099 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/12 3:20 PM",
      "commitName": "4e5818698778bff9d2b1ba14297d8393e49927c7",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "09/03/12 10:53 AM",
      "commitNameOld": "ad3d3f54d5f9d2b3648da43481c72bc3f6748ace",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 13.14,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     String user \u003d submissionContext.getUser();\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n \n       // Safety \n       submissionContext.setUser(user);\n \n       // This needs to be synchronous as the client can query \n       // immediately following the submission to get the application status.\n       // So call handle directly and do not send an event.\n       rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n           .currentTimeMillis()));\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n-          \" submitted by user \" + user + \" with \" + submissionContext);\n+          \" submitted by user \" + user);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n\n      // Safety \n      submissionContext.setUser(user);\n\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n          .currentTimeMillis()));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/11 10:21 PM",
      "commitName": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "05/10/11 4:43 AM",
      "commitNameOld": "66137cf17cb4abccd6065819d97edc63c6510477",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 13.73,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,38 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d submissionContext.getApplicationId();\n     String user \u003d submissionContext.getUser();\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n       \n       // Safety \n       submissionContext.setUser(user);\n-      \n+\n       // This needs to be synchronous as the client can query \n       // immediately following the submission to get the application status.\n       // So call handle directly and do not send an event.\n-      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext));\n+      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n+          .currentTimeMillis()));\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user + \" with \" + submissionContext);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n      \n      // Safety \n      submissionContext.setUser(user);\n\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext, System\n          .currentTimeMillis()));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user + \" with \" + submissionContext);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "88b82a0f6687ce103817fbb460fd30d870f717a0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2899. Replace major parts of ApplicationSubmissionContext with a ContainerLaunchContext (Arun Murthy via mahadev)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170459 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/11 12:26 AM",
      "commitName": "88b82a0f6687ce103817fbb460fd30d870f717a0",
      "commitAuthor": "Mahadev Konar",
      "commitDateOld": "08/09/11 7:19 PM",
      "commitNameOld": "ca853445e9a31e05278e9dceea9dbed734103f49",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 5.21,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,37 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n-    ApplicationId applicationId \u003d null;\n-    String user \u003d null;\n+    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n+    String user \u003d submissionContext.getUser();\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-      applicationId \u003d submissionContext.getApplicationId();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n+      \n+      // Safety \n+      submissionContext.setUser(user);\n+      \n       // This needs to be synchronous as the client can query \n       // immediately following the submission to get the application status.\n       // So call handle directly and do not send an event.\n       rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext));\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user + \" with \" + submissionContext);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d submissionContext.getApplicationId();\n    String user \u003d submissionContext.getUser();\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n      \n      // Safety \n      submissionContext.setUser(user);\n      \n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user + \" with \" + submissionContext);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "ca853445e9a31e05278e9dceea9dbed734103f49": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2953. Fix a race condition on submission which caused client to incorrectly assume application was gone by making submission synchronous for RMAppManager. Contributed by Thomas Graves.  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 7:19 PM",
      "commitName": "ca853445e9a31e05278e9dceea9dbed734103f49",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     ApplicationId applicationId \u003d null;\n     String user \u003d null;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n       applicationId \u003d submissionContext.getApplicationId();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppManagerSubmitEvent(submissionContext));\n+      // This needs to be synchronous as the client can query \n+      // immediately following the submission to get the application status.\n+      // So call handle directly and do not send an event.\n+      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext));\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user + \" with \" + submissionContext);\n       RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n           \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n           ie.getMessage(), \"ClientRMService\",\n           \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d null;\n    String user \u003d null;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      applicationId \u003d submissionContext.getApplicationId();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n      // This needs to be synchronous as the client can query \n      // immediately following the submission to get the application status.\n      // So call handle directly and do not send an event.\n      rmAppManager.handle(new RMAppManagerSubmitEvent(submissionContext));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user + \" with \" + submissionContext);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cdfabf5ae289836968b3d296668593b9500b6f26": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2655. Add audit logs to ResourceManager and NodeManager. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165949 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 6:24 PM",
      "commitName": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 13.05,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n+    ApplicationId applicationId \u003d null;\n+    String user \u003d null;\n     try {\n-      String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-      ApplicationId applicationId \u003d submissionContext.getApplicationId();\n+      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n+      applicationId \u003d submissionContext.getApplicationId();\n       if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppManagerSubmitEvent(submissionContext));\n \n       LOG.info(\"Application with id \" + applicationId.getId() + \n           \" submitted by user \" + user + \" with \" + submissionContext);\n+      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n+          \"ClientRMService\", applicationId);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n+      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n+          ie.getMessage(), \"ClientRMService\",\n+          \"Exception in submitting application\", applicationId);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    ApplicationId applicationId \u003d null;\n    String user \u003d null;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      applicationId \u003d submissionContext.getApplicationId();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppManagerSubmitEvent(submissionContext));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user + \" with \" + submissionContext);\n      RMAuditLogger.logSuccess(user, AuditConstants.SUBMIT_APP_REQUEST,\n          \"ClientRMService\", applicationId);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      RMAuditLogger.logFailure(user, AuditConstants.SUBMIT_APP_REQUEST, \n          ie.getMessage(), \"ClientRMService\",\n          \"Exception in submitting application\", applicationId);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    try {\n      String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      ApplicationId applicationId \u003d submissionContext.getApplicationId();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppManagerSubmitEvent(submissionContext));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user + \" with \" + submissionContext);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
      }
    },
    "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2649. Handling of finished applications in RM. Contributed by Thomas Graves.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160521 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 6:32 PM",
      "commitName": "8af5c4b24aae932ecc8f09e72fdc7dc8307b6cc5",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "18/08/11 4:07 AM",
      "commitNameOld": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.6,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,25 @@\n   public SubmitApplicationResponse submitApplication(\n       SubmitApplicationRequest request) throws YarnRemoteException {\n     ApplicationSubmissionContext submissionContext \u003d request\n         .getApplicationSubmissionContext();\n     try {\n-\n-      ApplicationId applicationId \u003d submissionContext.getApplicationId();\n-      String clientTokenStr \u003d null;\n       String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n-      if (UserGroupInformation.isSecurityEnabled()) {\n-        Token\u003cApplicationTokenIdentifier\u003e clientToken \u003d new Token\u003cApplicationTokenIdentifier\u003e(\n-            new ApplicationTokenIdentifier(applicationId),\n-            this.clientToAMSecretManager);\n-        clientTokenStr \u003d clientToken.encodeToUrlString();\n-        LOG.debug(\"Sending client token as \" + clientTokenStr);\n-      }\n-\n-      submissionContext.setQueue(submissionContext.getQueue() \u003d\u003d null\n-          ? \"default\" : submissionContext.getQueue());\n-      submissionContext.setApplicationName(submissionContext\n-          .getApplicationName() \u003d\u003d null ? \"N/A\" : submissionContext\n-          .getApplicationName());\n-\n-      ApplicationStore appStore \u003d rmContext.getApplicationsStore()\n-          .createApplicationStore(submissionContext.getApplicationId(),\n-              submissionContext);\n-      RMApp application \u003d new RMAppImpl(applicationId, rmContext,\n-          getConfig(), submissionContext.getApplicationName(), user,\n-          submissionContext.getQueue(), submissionContext, clientTokenStr,\n-          appStore, this.amLivelinessMonitor, this.scheduler,\n-          this.masterService);\n-      if (rmContext.getRMApps().putIfAbsent(applicationId, application) !\u003d null) {\n+      ApplicationId applicationId \u003d submissionContext.getApplicationId();\n+      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n         throw new IOException(\"Application with id \" + applicationId\n             + \" is already present! Cannot add a duplicate!\");\n       }\n-\n       this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppEvent(applicationId, RMAppEventType.START));\n+          new RMAppManagerSubmitEvent(submissionContext));\n \n-      LOG.info(\"Application with id \" + applicationId.getId()\n-          + \" submitted by user \" + user + \" with \" + submissionContext);\n+      LOG.info(\"Application with id \" + applicationId.getId() + \n+          \" submitted by user \" + user + \" with \" + submissionContext);\n     } catch (IOException ie) {\n       LOG.info(\"Exception in submitting application\", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n \n     SubmitApplicationResponse response \u003d recordFactory\n         .newRecordInstance(SubmitApplicationResponse.class);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    try {\n      String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      ApplicationId applicationId \u003d submissionContext.getApplicationId();\n      if (rmContext.getRMApps().get(applicationId) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppManagerSubmitEvent(submissionContext));\n\n      LOG.info(\"Application with id \" + applicationId.getId() + \n          \" submitted by user \" + user + \" with \" + submissionContext);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,50 @@\n+  public SubmitApplicationResponse submitApplication(\n+      SubmitApplicationRequest request) throws YarnRemoteException {\n+    ApplicationSubmissionContext submissionContext \u003d request\n+        .getApplicationSubmissionContext();\n+    try {\n+\n+      ApplicationId applicationId \u003d submissionContext.getApplicationId();\n+      String clientTokenStr \u003d null;\n+      String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        Token\u003cApplicationTokenIdentifier\u003e clientToken \u003d new Token\u003cApplicationTokenIdentifier\u003e(\n+            new ApplicationTokenIdentifier(applicationId),\n+            this.clientToAMSecretManager);\n+        clientTokenStr \u003d clientToken.encodeToUrlString();\n+        LOG.debug(\"Sending client token as \" + clientTokenStr);\n+      }\n+\n+      submissionContext.setQueue(submissionContext.getQueue() \u003d\u003d null\n+          ? \"default\" : submissionContext.getQueue());\n+      submissionContext.setApplicationName(submissionContext\n+          .getApplicationName() \u003d\u003d null ? \"N/A\" : submissionContext\n+          .getApplicationName());\n+\n+      ApplicationStore appStore \u003d rmContext.getApplicationsStore()\n+          .createApplicationStore(submissionContext.getApplicationId(),\n+              submissionContext);\n+      RMApp application \u003d new RMAppImpl(applicationId, rmContext,\n+          getConfig(), submissionContext.getApplicationName(), user,\n+          submissionContext.getQueue(), submissionContext, clientTokenStr,\n+          appStore, this.amLivelinessMonitor, this.scheduler,\n+          this.masterService);\n+      if (rmContext.getRMApps().putIfAbsent(applicationId, application) !\u003d null) {\n+        throw new IOException(\"Application with id \" + applicationId\n+            + \" is already present! Cannot add a duplicate!\");\n+      }\n+\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppEvent(applicationId, RMAppEventType.START));\n+\n+      LOG.info(\"Application with id \" + applicationId.getId()\n+          + \" submitted by user \" + user + \" with \" + submissionContext);\n+    } catch (IOException ie) {\n+      LOG.info(\"Exception in submitting application\", ie);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+\n+    SubmitApplicationResponse response \u003d recordFactory\n+        .newRecordInstance(SubmitApplicationResponse.class);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public SubmitApplicationResponse submitApplication(\n      SubmitApplicationRequest request) throws YarnRemoteException {\n    ApplicationSubmissionContext submissionContext \u003d request\n        .getApplicationSubmissionContext();\n    try {\n\n      ApplicationId applicationId \u003d submissionContext.getApplicationId();\n      String clientTokenStr \u003d null;\n      String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n      if (UserGroupInformation.isSecurityEnabled()) {\n        Token\u003cApplicationTokenIdentifier\u003e clientToken \u003d new Token\u003cApplicationTokenIdentifier\u003e(\n            new ApplicationTokenIdentifier(applicationId),\n            this.clientToAMSecretManager);\n        clientTokenStr \u003d clientToken.encodeToUrlString();\n        LOG.debug(\"Sending client token as \" + clientTokenStr);\n      }\n\n      submissionContext.setQueue(submissionContext.getQueue() \u003d\u003d null\n          ? \"default\" : submissionContext.getQueue());\n      submissionContext.setApplicationName(submissionContext\n          .getApplicationName() \u003d\u003d null ? \"N/A\" : submissionContext\n          .getApplicationName());\n\n      ApplicationStore appStore \u003d rmContext.getApplicationsStore()\n          .createApplicationStore(submissionContext.getApplicationId(),\n              submissionContext);\n      RMApp application \u003d new RMAppImpl(applicationId, rmContext,\n          getConfig(), submissionContext.getApplicationName(), user,\n          submissionContext.getQueue(), submissionContext, clientTokenStr,\n          appStore, this.amLivelinessMonitor, this.scheduler,\n          this.masterService);\n      if (rmContext.getRMApps().putIfAbsent(applicationId, application) !\u003d null) {\n        throw new IOException(\"Application with id \" + applicationId\n            + \" is already present! Cannot add a duplicate!\");\n      }\n\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppEvent(applicationId, RMAppEventType.START));\n\n      LOG.info(\"Application with id \" + applicationId.getId()\n          + \" submitted by user \" + user + \" with \" + submissionContext);\n    } catch (IOException ie) {\n      LOG.info(\"Exception in submitting application\", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n\n    SubmitApplicationResponse response \u003d recordFactory\n        .newRecordInstance(SubmitApplicationResponse.class);\n    return response;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}