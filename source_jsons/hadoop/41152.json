{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueManager.java",
  "functionName": "createQueue",
  "functionId": "createQueue___name-String__queueType-FSQueueType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
  "functionStartLine": 266,
  "functionEndLine": 278,
  "numCommitsSeen": 78,
  "timeTaken": 3981,
  "changeHistory": [
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
    "2bc097cd14692e6ceb06bff959f28531534eb307",
    "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7",
    "0f34e6f3873aee0f4932740ca790c6dd2a13b5d9",
    "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21"
  ],
  "changeHistoryShort": {
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": "Ymultichange(Ymodifierchange,Ybodychange)",
    "2bc097cd14692e6ceb06bff959f28531534eb307": "Ybodychange",
    "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7": "Ybodychange",
    "0f34e6f3873aee0f4932740ca790c6dd2a13b5d9": "Ybodychange",
    "cfc97a4e88dcebb3e1098e8915e57aaff072414d": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": "Ybodychange",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": "Yintroduced"
  },
  "changeHistoryDetails": {
    "20f0eb871c57cc4c5a6d19aae0e3745b6175509b": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-4702. FairScheduler: Allow setting maxResources for ad hoc queues. (Daniel Templeton via kasha)\n",
      "commitDate": "17/08/16 5:40 PM",
      "commitName": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
      "commitAuthor": "Karthik Kambatla",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-4702. FairScheduler: Allow setting maxResources for ad hoc queues. (Daniel Templeton via kasha)\n",
          "commitDate": "17/08/16 5:40 PM",
          "commitName": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "15/07/16 2:38 PM",
          "commitNameOld": "f5f1c81e7dcae0272e71ef4e6bedfc00b8c677d6",
          "commitAuthorOld": "Ray Chiang",
          "daysBetweenCommits": 33.13,
          "commitsBetweenForRepo": 222,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,13 @@\n-  private FSQueue createQueue(String name, FSQueueType queueType) {\n-    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n-    newQueueNames.add(name);\n-    int sepIndex \u003d name.length();\n-    FSParentQueue parent \u003d null;\n+  FSQueue createQueue(String name, FSQueueType queueType) {\n+    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003c\u003e();\n+    FSParentQueue parent \u003d buildNewQueueList(name, newQueueNames);\n+    FSQueue queue \u003d null;\n \n-    // Move up the queue tree until we reach one that exists.\n-    while (sepIndex !\u003d -1) {\n-      int prevSepIndex \u003d sepIndex;\n-      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n-      String node \u003d name.substring(sepIndex+1, prevSepIndex);\n-      if (!isQueueNameValid(node)) {\n-        throw new InvalidQueueNameException(\"Illegal node name at offset \" +\n-            (sepIndex+1) + \" for queue name \" + name);\n-      }\n-      FSQueue queue;\n-      String curName \u003d null;\n-      curName \u003d name.substring(0, sepIndex);\n-      queue \u003d queues.get(curName);\n-\n-      if (queue \u003d\u003d null) {\n-        newQueueNames.add(curName);\n-      } else {\n-        if (queue instanceof FSParentQueue) {\n-          parent \u003d (FSParentQueue)queue;\n-          break;\n-        } else {\n-          return null;\n-        }\n-      }\n-    }\n-    \n-    // At this point, parent refers to the deepest existing parent of the\n-    // queue to create.\n-    // Now that we know everything worked out, make all the queues\n-    // and add them to the map.\n-    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n-    FSLeafQueue leafQueue \u003d null;\n-    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n-      String queueName \u003d newQueueNames.get(i);\n-      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n-        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n-        try {\n-          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n-        } catch (AllocationConfigurationException ex) {\n-          LOG.warn(\"Failed to set default scheduling policy \"\n-              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n-        }\n-        parent.addChildQueue(leafQueue);\n-        queues.put(leafQueue.getName(), leafQueue);\n-        leafQueues.add(leafQueue);\n-        leafQueue.updatePreemptionVariables();\n-        return leafQueue;\n-      } else {\n-        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n-        try {\n-          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n-        } catch (AllocationConfigurationException ex) {\n-          LOG.warn(\"Failed to set default scheduling policy \"\n-              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n-        }\n-        parent.addChildQueue(newParent);\n-        queues.put(newParent.getName(), newParent);\n-        newParent.updatePreemptionVariables();\n-        parent \u003d newParent;\n-      }\n+    if (parent !\u003d null) {\n+      // Now that we know everything worked out, make all the queues\n+      // and add them to the map.\n+      queue \u003d createNewQueues(queueType, parent, newQueueNames);\n     }\n \n-    return parent;\n+    return queue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003c\u003e();\n    FSParentQueue parent \u003d buildNewQueueList(name, newQueueNames);\n    FSQueue queue \u003d null;\n\n    if (parent !\u003d null) {\n      // Now that we know everything worked out, make all the queues\n      // and add them to the map.\n      queue \u003d createNewQueues(queueType, parent, newQueueNames);\n    }\n\n    return queue;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4702. FairScheduler: Allow setting maxResources for ad hoc queues. (Daniel Templeton via kasha)\n",
          "commitDate": "17/08/16 5:40 PM",
          "commitName": "20f0eb871c57cc4c5a6d19aae0e3745b6175509b",
          "commitAuthor": "Karthik Kambatla",
          "commitDateOld": "15/07/16 2:38 PM",
          "commitNameOld": "f5f1c81e7dcae0272e71ef4e6bedfc00b8c677d6",
          "commitAuthorOld": "Ray Chiang",
          "daysBetweenCommits": 33.13,
          "commitsBetweenForRepo": 222,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,70 +1,13 @@\n-  private FSQueue createQueue(String name, FSQueueType queueType) {\n-    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n-    newQueueNames.add(name);\n-    int sepIndex \u003d name.length();\n-    FSParentQueue parent \u003d null;\n+  FSQueue createQueue(String name, FSQueueType queueType) {\n+    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003c\u003e();\n+    FSParentQueue parent \u003d buildNewQueueList(name, newQueueNames);\n+    FSQueue queue \u003d null;\n \n-    // Move up the queue tree until we reach one that exists.\n-    while (sepIndex !\u003d -1) {\n-      int prevSepIndex \u003d sepIndex;\n-      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n-      String node \u003d name.substring(sepIndex+1, prevSepIndex);\n-      if (!isQueueNameValid(node)) {\n-        throw new InvalidQueueNameException(\"Illegal node name at offset \" +\n-            (sepIndex+1) + \" for queue name \" + name);\n-      }\n-      FSQueue queue;\n-      String curName \u003d null;\n-      curName \u003d name.substring(0, sepIndex);\n-      queue \u003d queues.get(curName);\n-\n-      if (queue \u003d\u003d null) {\n-        newQueueNames.add(curName);\n-      } else {\n-        if (queue instanceof FSParentQueue) {\n-          parent \u003d (FSParentQueue)queue;\n-          break;\n-        } else {\n-          return null;\n-        }\n-      }\n-    }\n-    \n-    // At this point, parent refers to the deepest existing parent of the\n-    // queue to create.\n-    // Now that we know everything worked out, make all the queues\n-    // and add them to the map.\n-    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n-    FSLeafQueue leafQueue \u003d null;\n-    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n-      String queueName \u003d newQueueNames.get(i);\n-      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n-        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n-        try {\n-          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n-        } catch (AllocationConfigurationException ex) {\n-          LOG.warn(\"Failed to set default scheduling policy \"\n-              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n-        }\n-        parent.addChildQueue(leafQueue);\n-        queues.put(leafQueue.getName(), leafQueue);\n-        leafQueues.add(leafQueue);\n-        leafQueue.updatePreemptionVariables();\n-        return leafQueue;\n-      } else {\n-        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n-        try {\n-          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n-        } catch (AllocationConfigurationException ex) {\n-          LOG.warn(\"Failed to set default scheduling policy \"\n-              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n-        }\n-        parent.addChildQueue(newParent);\n-        queues.put(newParent.getName(), newParent);\n-        newParent.updatePreemptionVariables();\n-        parent \u003d newParent;\n-      }\n+    if (parent !\u003d null) {\n+      // Now that we know everything worked out, make all the queues\n+      // and add them to the map.\n+      queue \u003d createNewQueues(queueType, parent, newQueueNames);\n     }\n \n-    return parent;\n+    return queue;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003c\u003e();\n    FSParentQueue parent \u003d buildNewQueueList(name, newQueueNames);\n    FSQueue queue \u003d null;\n\n    if (parent !\u003d null) {\n      // Now that we know everything worked out, make all the queues\n      // and add them to the map.\n      queue \u003d createNewQueues(queueType, parent, newQueueNames);\n    }\n\n    return queue;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "2bc097cd14692e6ceb06bff959f28531534eb307": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3241. FairScheduler handles invalid queue names inconsistently. (Zhihai Xu via kasha)\n",
      "commitDate": "23/03/15 1:22 PM",
      "commitName": "2bc097cd14692e6ceb06bff959f28531534eb307",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "05/01/15 3:12 PM",
      "commitNameOld": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 76.88,
      "commitsBetweenForRepo": 674,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,70 @@\n   private FSQueue createQueue(String name, FSQueueType queueType) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n+      int prevSepIndex \u003d sepIndex;\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+      String node \u003d name.substring(sepIndex+1, prevSepIndex);\n+      if (!isQueueNameValid(node)) {\n+        throw new InvalidQueueNameException(\"Illegal node name at offset \" +\n+            (sepIndex+1) + \" for queue name \" + name);\n+      }\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n     AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n       if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n         leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n         try {\n           leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n         }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n         leafQueue.updatePreemptionVariables();\n         return leafQueue;\n       } else {\n         FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n         try {\n           newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n         }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n         newParent.updatePreemptionVariables();\n         parent \u003d newParent;\n       }\n     }\n \n     return parent;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      int prevSepIndex \u003d sepIndex;\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      String node \u003d name.substring(sepIndex+1, prevSepIndex);\n      if (!isQueueNameValid(node)) {\n        throw new InvalidQueueNameException(\"Illegal node name at offset \" +\n            (sepIndex+1) + \" for queue name \" + name);\n      }\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n        leafQueue.updatePreemptionVariables();\n        return leafQueue;\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        newParent.updatePreemptionVariables();\n        parent \u003d newParent;\n      }\n    }\n\n    return parent;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {}
    },
    "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2394. FairScheduler: Configure fairSharePreemptionThreshold per queue. (Wei Yan via kasha)\n",
      "commitDate": "03/09/14 10:27 AM",
      "commitName": "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "30/08/14 1:17 AM",
      "commitNameOld": "0f34e6f3873aee0f4932740ca790c6dd2a13b5d9",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 4.38,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   private FSQueue createQueue(String name, FSQueueType queueType) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n     AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n       if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n         leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n         try {\n           leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n         }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n-        setPreemptionTimeout(leafQueue, parent, queueConf);\n+        leafQueue.updatePreemptionVariables();\n         return leafQueue;\n       } else {\n         FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n         try {\n           newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n         }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n-        setPreemptionTimeout(newParent, parent, queueConf);\n+        newParent.updatePreemptionVariables();\n         parent \u003d newParent;\n       }\n     }\n \n     return parent;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n        leafQueue.updatePreemptionVariables();\n        return leafQueue;\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        newParent.updatePreemptionVariables();\n        parent \u003d newParent;\n      }\n    }\n\n    return parent;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {}
    },
    "0f34e6f3873aee0f4932740ca790c6dd2a13b5d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2395. FairScheduler: Preemption timeout should be configurable per queue. (Wei Yan via kasha)\n",
      "commitDate": "30/08/14 1:17 AM",
      "commitName": "0f34e6f3873aee0f4932740ca790c6dd2a13b5d9",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "22/08/14 8:44 AM",
      "commitNameOld": "0097b15e2150f95745f64179a0ef4644e96128f5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.69,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,64 @@\n   private FSQueue createQueue(String name, FSQueueType queueType) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n     AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n       if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n         leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n         try {\n           leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n         }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n+        setPreemptionTimeout(leafQueue, parent, queueConf);\n         return leafQueue;\n       } else {\n         FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n         try {\n           newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n         }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n+        setPreemptionTimeout(newParent, parent, queueConf);\n         parent \u003d newParent;\n       }\n     }\n \n     return parent;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n        setPreemptionTimeout(leafQueue, parent, queueConf);\n        return leafQueue;\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        setPreemptionTimeout(newParent, parent, queueConf);\n        parent \u003d newParent;\n      }\n    }\n\n    return parent;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {}
    },
    "cfc97a4e88dcebb3e1098e8915e57aaff072414d": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/14 12:21 AM",
      "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
      "commitAuthor": "Sanford Ryza",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/05/14 12:21 AM",
          "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "14/01/14 2:33 PM",
          "commitNameOld": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 113.37,
          "commitsBetweenForRepo": 860,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-  private FSLeafQueue createLeafQueue(String name) {\n+  private FSQueue createQueue(String name, FSQueueType queueType) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n     AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n-      if (i \u003d\u003d 0) {\n-        // First name added was the leaf queue\n+      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n         leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n         try {\n           leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n         }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n+        return leafQueue;\n       } else {\n         FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n         try {\n           newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n         }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n         parent \u003d newParent;\n       }\n     }\n     \n-    return leafQueue;\n+    return parent;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n        return leafQueue;\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        parent \u003d newParent;\n      }\n    }\n    \n    return parent;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {
            "oldValue": "createLeafQueue",
            "newValue": "createQueue"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/05/14 12:21 AM",
          "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "14/01/14 2:33 PM",
          "commitNameOld": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 113.37,
          "commitsBetweenForRepo": 860,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-  private FSLeafQueue createLeafQueue(String name) {\n+  private FSQueue createQueue(String name, FSQueueType queueType) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n     AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n-      if (i \u003d\u003d 0) {\n-        // First name added was the leaf queue\n+      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n         leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n         try {\n           leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n         }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n+        return leafQueue;\n       } else {\n         FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n         try {\n           newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n         }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n         parent \u003d newParent;\n       }\n     }\n     \n-    return leafQueue;\n+    return parent;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n        return leafQueue;\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        parent \u003d newParent;\n      }\n    }\n    \n    return parent;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {
            "oldValue": "[name-String]",
            "newValue": "[name-String, queueType-FSQueueType]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/05/14 12:21 AM",
          "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "14/01/14 2:33 PM",
          "commitNameOld": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 113.37,
          "commitsBetweenForRepo": 860,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-  private FSLeafQueue createLeafQueue(String name) {\n+  private FSQueue createQueue(String name, FSQueueType queueType) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n     AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n-      if (i \u003d\u003d 0) {\n-        // First name added was the leaf queue\n+      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n         leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n         try {\n           leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n         }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n+        return leafQueue;\n       } else {\n         FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n         try {\n           newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n         }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n         parent \u003d newParent;\n       }\n     }\n     \n-    return leafQueue;\n+    return parent;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n        return leafQueue;\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        parent \u003d newParent;\n      }\n    }\n    \n    return parent;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {
            "oldValue": "FSLeafQueue",
            "newValue": "FSQueue"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1864. Fair Scheduler Dynamic Hierarchical User Queues (Ashwin Shankar via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1593190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "08/05/14 12:21 AM",
          "commitName": "cfc97a4e88dcebb3e1098e8915e57aaff072414d",
          "commitAuthor": "Sanford Ryza",
          "commitDateOld": "14/01/14 2:33 PM",
          "commitNameOld": "f4fd050dee83ecbff0a92b28c3a51ae353f95c24",
          "commitAuthorOld": "Sanford Ryza",
          "daysBetweenCommits": 113.37,
          "commitsBetweenForRepo": 860,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,62 +1,62 @@\n-  private FSLeafQueue createLeafQueue(String name) {\n+  private FSQueue createQueue(String name, FSQueueType queueType) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n     AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n-      if (i \u003d\u003d 0) {\n-        // First name added was the leaf queue\n+      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n         leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n         try {\n           leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n         }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n+        return leafQueue;\n       } else {\n         FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n         try {\n           newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n         } catch (AllocationConfigurationException ex) {\n           LOG.warn(\"Failed to set default scheduling policy \"\n               + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n         }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n         parent \u003d newParent;\n       }\n     }\n     \n-    return leafQueue;\n+    return parent;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private FSQueue createQueue(String name, FSQueueType queueType) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0 \u0026\u0026 queueType !\u003d FSQueueType.PARENT) {\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n        return leafQueue;\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        parent \u003d newParent;\n      }\n    }\n    \n    return parent;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1403. Separate out configuration loading from QueueManager in the Fair Scheduler (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1548006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/13 7:26 PM",
      "commitName": "6d5f8ebed60e59d772e0dcee0b069f8db95f6ccc",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "29/11/13 11:02 AM",
      "commitNameOld": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 5.35,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,62 @@\n   private FSLeafQueue createLeafQueue(String name) {\n     List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n     newQueueNames.add(name);\n     int sepIndex \u003d name.length();\n     FSParentQueue parent \u003d null;\n \n     // Move up the queue tree until we reach one that exists.\n     while (sepIndex !\u003d -1) {\n       sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n       FSQueue queue;\n       String curName \u003d null;\n       curName \u003d name.substring(0, sepIndex);\n       queue \u003d queues.get(curName);\n \n       if (queue \u003d\u003d null) {\n         newQueueNames.add(curName);\n       } else {\n         if (queue instanceof FSParentQueue) {\n           parent \u003d (FSParentQueue)queue;\n           break;\n         } else {\n           return null;\n         }\n       }\n     }\n     \n     // At this point, parent refers to the deepest existing parent of the\n     // queue to create.\n     // Now that we know everything worked out, make all the queues\n     // and add them to the map.\n+    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n     FSLeafQueue leafQueue \u003d null;\n     for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n       String queueName \u003d newQueueNames.get(i);\n       if (i \u003d\u003d 0) {\n         // First name added was the leaf queue\n-        leafQueue \u003d new FSLeafQueue(name, this, scheduler, parent);\n+        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n+        try {\n+          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n+        } catch (AllocationConfigurationException ex) {\n+          LOG.warn(\"Failed to set default scheduling policy \"\n+              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n+        }\n         parent.addChildQueue(leafQueue);\n         queues.put(leafQueue.getName(), leafQueue);\n         leafQueues.add(leafQueue);\n       } else {\n-        FSParentQueue newParent \u003d new FSParentQueue(queueName, this, scheduler, parent);\n+        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n+        try {\n+          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n+        } catch (AllocationConfigurationException ex) {\n+          LOG.warn(\"Failed to set default scheduling policy \"\n+              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n+        }\n         parent.addChildQueue(newParent);\n         queues.put(newParent.getName(), newParent);\n         parent \u003d newParent;\n       }\n     }\n     \n     return leafQueue;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private FSLeafQueue createLeafQueue(String name) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    AllocationConfiguration queueConf \u003d scheduler.getAllocationConfiguration();\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0) {\n        // First name added was the leaf queue\n        leafQueue \u003d new FSLeafQueue(name, scheduler, parent);\n        try {\n          leafQueue.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new leaf queue.\", ex);\n        }\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, scheduler, parent);\n        try {\n          newParent.setPolicy(queueConf.getDefaultSchedulingPolicy());\n        } catch (AllocationConfigurationException ex) {\n          LOG.warn(\"Failed to set default scheduling policy \"\n              + queueConf.getDefaultSchedulingPolicy() + \" on new parent queue.\", ex);\n        }\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        parent \u003d newParent;\n      }\n    }\n    \n    return leafQueue;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java",
      "extendedDetails": {}
    },
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": {
      "type": "Yintroduced",
      "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/12 4:03 AM",
      "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthor": "Thomas White",
      "diff": "@@ -0,0 +1,49 @@\n+  private FSLeafQueue createLeafQueue(String name) {\n+    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n+    newQueueNames.add(name);\n+    int sepIndex \u003d name.length();\n+    FSParentQueue parent \u003d null;\n+\n+    // Move up the queue tree until we reach one that exists.\n+    while (sepIndex !\u003d -1) {\n+      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n+      FSQueue queue;\n+      String curName \u003d null;\n+      curName \u003d name.substring(0, sepIndex);\n+      queue \u003d queues.get(curName);\n+\n+      if (queue \u003d\u003d null) {\n+        newQueueNames.add(curName);\n+      } else {\n+        if (queue instanceof FSParentQueue) {\n+          parent \u003d (FSParentQueue)queue;\n+          break;\n+        } else {\n+          return null;\n+        }\n+      }\n+    }\n+    \n+    // At this point, parent refers to the deepest existing parent of the\n+    // queue to create.\n+    // Now that we know everything worked out, make all the queues\n+    // and add them to the map.\n+    FSLeafQueue leafQueue \u003d null;\n+    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n+      String queueName \u003d newQueueNames.get(i);\n+      if (i \u003d\u003d 0) {\n+        // First name added was the leaf queue\n+        leafQueue \u003d new FSLeafQueue(name, this, scheduler, parent);\n+        parent.addChildQueue(leafQueue);\n+        queues.put(leafQueue.getName(), leafQueue);\n+        leafQueues.add(leafQueue);\n+      } else {\n+        FSParentQueue newParent \u003d new FSParentQueue(queueName, this, scheduler, parent);\n+        parent.addChildQueue(newParent);\n+        queues.put(newParent.getName(), newParent);\n+        parent \u003d newParent;\n+      }\n+    }\n+    \n+    return leafQueue;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private FSLeafQueue createLeafQueue(String name) {\n    List\u003cString\u003e newQueueNames \u003d new ArrayList\u003cString\u003e();\n    newQueueNames.add(name);\n    int sepIndex \u003d name.length();\n    FSParentQueue parent \u003d null;\n\n    // Move up the queue tree until we reach one that exists.\n    while (sepIndex !\u003d -1) {\n      sepIndex \u003d name.lastIndexOf(\u0027.\u0027, sepIndex-1);\n      FSQueue queue;\n      String curName \u003d null;\n      curName \u003d name.substring(0, sepIndex);\n      queue \u003d queues.get(curName);\n\n      if (queue \u003d\u003d null) {\n        newQueueNames.add(curName);\n      } else {\n        if (queue instanceof FSParentQueue) {\n          parent \u003d (FSParentQueue)queue;\n          break;\n        } else {\n          return null;\n        }\n      }\n    }\n    \n    // At this point, parent refers to the deepest existing parent of the\n    // queue to create.\n    // Now that we know everything worked out, make all the queues\n    // and add them to the map.\n    FSLeafQueue leafQueue \u003d null;\n    for (int i \u003d newQueueNames.size()-1; i \u003e\u003d 0; i--) {\n      String queueName \u003d newQueueNames.get(i);\n      if (i \u003d\u003d 0) {\n        // First name added was the leaf queue\n        leafQueue \u003d new FSLeafQueue(name, this, scheduler, parent);\n        parent.addChildQueue(leafQueue);\n        queues.put(leafQueue.getName(), leafQueue);\n        leafQueues.add(leafQueue);\n      } else {\n        FSParentQueue newParent \u003d new FSParentQueue(queueName, this, scheduler, parent);\n        parent.addChildQueue(newParent);\n        queues.put(newParent.getName(), newParent);\n        parent \u003d newParent;\n      }\n    }\n    \n    return leafQueue;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/QueueManager.java"
    }
  }
}