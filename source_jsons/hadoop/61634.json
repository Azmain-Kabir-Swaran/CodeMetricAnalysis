{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "multiplyAndNormalize",
  "functionId": "multiplyAndNormalize___r-Resource__by-double__stepFactor-Resource__roundUp-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 534,
  "functionEndLine": 559,
  "numCommitsSeen": 37,
  "timeTaken": 4442,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "39240b61a163b127eec385decd30ffd96e694c28",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "58da54640e37571f82eb340f32641d58160e92b2",
    "239c1824a07fede71dd751ed2c1f40036b22170e",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "39240b61a163b127eec385decd30ffd96e694c28": "Ybodychange",
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "58da54640e37571f82eb340f32641d58160e92b2": "Ybodychange",
    "239c1824a07fede71dd751ed2c1f40036b22170e": "Ybodychange",
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n     Resource ret \u003d Resource.newInstance(r);\n-    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n       ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n       long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n       long value;\n       if (stepFactorValue !\u003d 0) {\n         value \u003d roundUp\n             ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n             : roundDown((long) (rValue * by), stepFactorValue);\n       } else {\n         value \u003d roundUp\n             ? (long) Math.ceil((float) (rValue * by))\n             : (long) (rValue * by);\n       }\n       tmp.setValue(value);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n      long value;\n      if (stepFactorValue !\u003d 0) {\n        value \u003d roundUp\n            ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n            : roundDown((long) (rValue * by), stepFactorValue);\n      } else {\n        value \u003d roundUp\n            ? (long) Math.ceil((float) (rValue * by))\n            : (long) (rValue * by);\n      }\n      tmp.setValue(value);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "12a095a496dd59066d73a7a6c24129b5b6a9d650": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7159. Normalize unit of resource objects in RM to avoid unit conversion in critical path. Contributed by Manikandan R.\n",
      "commitDate": "02/08/18 9:59 AM",
      "commitName": "12a095a496dd59066d73a7a6c24129b5b6a9d650",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/05/18 9:06 AM",
      "commitNameOld": "8d5509c68156faaa6641f4e747fc9ff80adccf88",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 69.04,
      "commitsBetweenForRepo": 466,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,26 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n     Resource ret \u003d Resource.newInstance(r);\n     int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n       ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n-      long stepFactorValue \u003d UnitsConversionUtil.convert(\n-          stepFactorResourceInformation.getUnits(),\n-          rResourceInformation.getUnits(),\n-          stepFactorResourceInformation.getValue());\n+      long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n       long value;\n       if (stepFactorValue !\u003d 0) {\n         value \u003d roundUp\n             ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n             : roundDown((long) (rValue * by), stepFactorValue);\n       } else {\n         value \u003d roundUp\n             ? (long) Math.ceil((float) (rValue * by))\n             : (long) (rValue * by);\n       }\n       tmp.setValue(value);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d stepFactorResourceInformation.getValue();\n      long value;\n      if (stepFactorValue !\u003d 0) {\n        value \u003d roundUp\n            ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n            : roundDown((long) (rValue * by), stepFactorValue);\n      } else {\n        value \u003d roundUp\n            ? (long) Math.ceil((float) (rValue * by))\n            : (long) (rValue * by);\n      }\n      tmp.setValue(value);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n     Resource ret \u003d Resource.newInstance(r);\n-    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n       ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n       long stepFactorValue \u003d UnitsConversionUtil.convert(\n           stepFactorResourceInformation.getUnits(),\n           rResourceInformation.getUnits(),\n           stepFactorResourceInformation.getValue());\n       long value;\n       if (stepFactorValue !\u003d 0) {\n         value \u003d roundUp\n             ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n             : roundDown((long) (rValue * by), stepFactorValue);\n       } else {\n         value \u003d roundUp\n             ? (long) Math.ceil((float) (rValue * by))\n             : (long) (rValue * by);\n       }\n       tmp.setValue(value);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d UnitsConversionUtil.convert(\n          stepFactorResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          stepFactorResourceInformation.getValue());\n      long value;\n      if (stepFactorValue !\u003d 0) {\n        value \u003d roundUp\n            ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n            : roundDown((long) (rValue * by), stepFactorValue);\n      } else {\n        value \u003d roundUp\n            ? (long) Math.ceil((float) (rValue * by))\n            : (long) (rValue * by);\n      }\n      tmp.setValue(value);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "39240b61a163b127eec385decd30ffd96e694c28": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7043. Cleanup ResourceProfileManager. (wangda)\n\nChange-Id: I463356f37bf1f6a3f1fc3c594c79916e8c0ab913\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "b1fe3a222e7673fd84a878622969f958022061e9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n     Resource ret \u003d Resource.newInstance(r);\n     int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n     for (int i \u003d 0; i \u003c maxLength; i++) {\n       ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n       ResourceInformation stepFactorResourceInformation \u003d stepFactor\n           .getResourceInformation(i);\n       ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n       long rValue \u003d rResourceInformation.getValue();\n       long stepFactorValue \u003d UnitsConversionUtil.convert(\n           stepFactorResourceInformation.getUnits(),\n           rResourceInformation.getUnits(),\n           stepFactorResourceInformation.getValue());\n       long value;\n       if (stepFactorValue !\u003d 0) {\n         value \u003d roundUp\n-            ? roundUp((long) Math.ceil(rValue * by), stepFactorValue)\n+            ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n             : roundDown((long) (rValue * by), stepFactorValue);\n       } else {\n-        value \u003d roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n+        value \u003d roundUp\n+            ? (long) Math.ceil((float) (rValue * by))\n+            : (long) (rValue * by);\n       }\n       tmp.setValue(value);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d UnitsConversionUtil.convert(\n          stepFactorResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          stepFactorResourceInformation.getValue());\n      long value;\n      if (stepFactorValue !\u003d 0) {\n        value \u003d roundUp\n            ? roundUp((long) Math.ceil((float) (rValue * by)), stepFactorValue)\n            : roundDown((long) (rValue * by), stepFactorValue);\n      } else {\n        value \u003d roundUp\n            ? (long) Math.ceil((float) (rValue * by))\n            : (long) (rValue * by);\n      }\n      tmp.setValue(value);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "2b51b262aba0191b80dc93799574c0b959cb4f4e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6892. [YARN-3926] Improve API implementation in Resources and DominantResourceCalculator class. Contributed by Sunil G.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "2b51b262aba0191b80dc93799574c0b959cb4f4e",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,27 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n     Resource ret \u003d Resource.newInstance(r);\n-    for (String resource : resourceNames) {\n-      try {\n-        ResourceInformation rResourceInformation \u003d r\n-            .getResourceInformation(resource);\n-        ResourceInformation stepFactorResourceInformation \u003d stepFactor\n-            .getResourceInformation(resource);\n-        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n+    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+    for (int i \u003d 0; i \u003c maxLength; i++) {\n+      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n+      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n+          .getResourceInformation(i);\n+      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n \n-        long rValue \u003d rResourceInformation.getValue();\n-        long stepFactorValue \u003d UnitsConversionUtil.convert(\n-            stepFactorResourceInformation.getUnits(),\n-            rResourceInformation.getUnits(),\n-            stepFactorResourceInformation.getValue());\n-        long value;\n-        if (stepFactorValue !\u003d 0) {\n-          value \u003d roundUp\n-              ? roundUp((long) Math.ceil(rValue * by), stepFactorValue)\n-              : roundDown((long) (rValue * by), stepFactorValue);\n-        } else {\n-          value \u003d roundUp\n-              ? (long) Math.ceil(rValue * by)\n-              : (long) (rValue * by);\n-        }\n-        tmp.setValue(value);\n-      } catch (ResourceNotFoundException ye) {\n-        throw new IllegalArgumentException(\n-            \"Error getting resource information for \" + resource, ye);\n+      long rValue \u003d rResourceInformation.getValue();\n+      long stepFactorValue \u003d UnitsConversionUtil.convert(\n+          stepFactorResourceInformation.getUnits(),\n+          rResourceInformation.getUnits(),\n+          stepFactorResourceInformation.getValue());\n+      long value;\n+      if (stepFactorValue !\u003d 0) {\n+        value \u003d roundUp\n+            ? roundUp((long) Math.ceil(rValue * by), stepFactorValue)\n+            : roundDown((long) (rValue * by), stepFactorValue);\n+      } else {\n+        value \u003d roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n       }\n+      tmp.setValue(value);\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resource.newInstance(r);\n    int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n    for (int i \u003d 0; i \u003c maxLength; i++) {\n      ResourceInformation rResourceInformation \u003d r.getResourceInformation(i);\n      ResourceInformation stepFactorResourceInformation \u003d stepFactor\n          .getResourceInformation(i);\n      ResourceInformation tmp \u003d ret.getResourceInformation(i);\n\n      long rValue \u003d rResourceInformation.getValue();\n      long stepFactorValue \u003d UnitsConversionUtil.convert(\n          stepFactorResourceInformation.getUnits(),\n          rResourceInformation.getUnits(),\n          stepFactorResourceInformation.getValue());\n      long value;\n      if (stepFactorValue !\u003d 0) {\n        value \u003d roundUp\n            ? roundUp((long) Math.ceil(rValue * by), stepFactorValue)\n            : roundDown((long) (rValue * by), stepFactorValue);\n      } else {\n        value \u003d roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n      }\n      tmp.setValue(value);\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ca2808d8bbe49766029e5dba88ff863f6c993287",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n     Resource ret \u003d Resource.newInstance(r);\n     for (String resource : resourceNames) {\n       try {\n-        ResourceInformation rResourceInformation \u003d\n-            r.getResourceInformation(resource);\n-        ResourceInformation stepFactorResourceInformation \u003d\n-            stepFactor.getResourceInformation(resource);\n+        ResourceInformation rResourceInformation \u003d r\n+            .getResourceInformation(resource);\n+        ResourceInformation stepFactorResourceInformation \u003d stepFactor\n+            .getResourceInformation(resource);\n         ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n \n-        Long rValue \u003d rResourceInformation.getValue();\n-        Long stepFactorValue \u003d UnitsConversionUtil\n-            .convert(stepFactorResourceInformation.getUnits(),\n-                rResourceInformation.getUnits(),\n-                stepFactorResourceInformation.getValue());\n-        Long value;\n+        long rValue \u003d rResourceInformation.getValue();\n+        long stepFactorValue \u003d UnitsConversionUtil.convert(\n+            stepFactorResourceInformation.getUnits(),\n+            rResourceInformation.getUnits(),\n+            stepFactorResourceInformation.getValue());\n+        long value;\n         if (stepFactorValue !\u003d 0) {\n-          value \u003d roundUp ?\n-              roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n-              roundDown((long) (rValue * by), stepFactorValue);\n+          value \u003d roundUp\n+              ? roundUp((long) Math.ceil(rValue * by), stepFactorValue)\n+              : roundDown((long) (rValue * by), stepFactorValue);\n         } else {\n-          value \u003d\n-              roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n+          value \u003d roundUp\n+              ? (long) Math.ceil(rValue * by)\n+              : (long) (rValue * by);\n         }\n         tmp.setValue(value);\n-      } catch (YarnException ye) {\n+      } catch (ResourceNotFoundException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resource.newInstance(r);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d r\n            .getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d stepFactor\n            .getResourceInformation(resource);\n        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n\n        long rValue \u003d rResourceInformation.getValue();\n        long stepFactorValue \u003d UnitsConversionUtil.convert(\n            stepFactorResourceInformation.getUnits(),\n            rResourceInformation.getUnits(),\n            stepFactorResourceInformation.getValue());\n        long value;\n        if (stepFactorValue !\u003d 0) {\n          value \u003d roundUp\n              ? roundUp((long) Math.ceil(rValue * by), stepFactorValue)\n              : roundDown((long) (rValue * by), stepFactorValue);\n        } else {\n          value \u003d roundUp\n              ? (long) Math.ceil(rValue * by)\n              : (long) (rValue * by);\n        }\n        tmp.setValue(value);\n      } catch (ResourceNotFoundException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "58da54640e37571f82eb340f32641d58160e92b2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6445. [YARN-3926] Performance improvements in resource profile branch with respect to SLS. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "58da54640e37571f82eb340f32641d58160e92b2",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,33 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n-    Resource ret \u003d Resources.createResource(0, 0);\n+    Resource ret \u003d Resource.newInstance(r);\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation rResourceInformation \u003d\n             r.getResourceInformation(resource);\n         ResourceInformation stepFactorResourceInformation \u003d\n             stepFactor.getResourceInformation(resource);\n-        ResourceInformation tmp \u003d\n-            ResourceInformation.newInstance(rResourceInformation);\n+        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n \n         Long rValue \u003d rResourceInformation.getValue();\n         Long stepFactorValue \u003d UnitsConversionUtil\n             .convert(stepFactorResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 stepFactorResourceInformation.getValue());\n         Long value;\n         if (stepFactorValue !\u003d 0) {\n           value \u003d roundUp ?\n               roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n               roundDown((long) (rValue * by), stepFactorValue);\n         } else {\n           value \u003d\n               roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n         }\n         tmp.setValue(value);\n-        ret.setResourceInformation(resource, tmp);\n       } catch (YarnException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resource.newInstance(r);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d ret.getResourceInformation(resource);\n\n        Long rValue \u003d rResourceInformation.getValue();\n        Long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n        Long value;\n        if (stepFactorValue !\u003d 0) {\n          value \u003d roundUp ?\n              roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n              roundDown((long) (rValue * by), stepFactorValue);\n        } else {\n          value \u003d\n              roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n        }\n        tmp.setValue(value);\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "239c1824a07fede71dd751ed2c1f40036b22170e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5586. Update the Resources class to consider all resource types. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "239c1824a07fede71dd751ed2c1f40036b22170e",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,35 @@\n   private Resource multiplyAndNormalize(Resource r, double by,\n       Resource stepFactor, boolean roundUp) {\n     Resource ret \u003d Resources.createResource(0, 0);\n     for (String resource : resourceNames) {\n       try {\n         ResourceInformation rResourceInformation \u003d\n             r.getResourceInformation(resource);\n         ResourceInformation stepFactorResourceInformation \u003d\n             stepFactor.getResourceInformation(resource);\n         ResourceInformation tmp \u003d\n             ResourceInformation.newInstance(rResourceInformation);\n \n         Long rValue \u003d rResourceInformation.getValue();\n         Long stepFactorValue \u003d UnitsConversionUtil\n             .convert(stepFactorResourceInformation.getUnits(),\n                 rResourceInformation.getUnits(),\n                 stepFactorResourceInformation.getValue());\n-\n-        Long value \u003d\n-            roundUp ? roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n-                roundDown((long) (rValue * by), stepFactorValue);\n+        Long value;\n+        if (stepFactorValue !\u003d 0) {\n+          value \u003d roundUp ?\n+              roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n+              roundDown((long) (rValue * by), stepFactorValue);\n+        } else {\n+          value \u003d\n+              roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n+        }\n         tmp.setValue(value);\n         ret.setResourceInformation(resource, tmp);\n       } catch (YarnException ye) {\n         throw new IllegalArgumentException(\n             \"Error getting resource information for \" + resource, ye);\n       }\n     }\n     return ret;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resources.createResource(0, 0);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d\n            ResourceInformation.newInstance(rResourceInformation);\n\n        Long rValue \u003d rResourceInformation.getValue();\n        Long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n        Long value;\n        if (stepFactorValue !\u003d 0) {\n          value \u003d roundUp ?\n              roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n              roundDown((long) (rValue * by), stepFactorValue);\n        } else {\n          value \u003d\n              roundUp ? (long) Math.ceil(rValue * by) : (long) (rValue * by);\n        }\n        tmp.setValue(value);\n        ret.setResourceInformation(resource, tmp);\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "32c91223f1bd06561ea4ce2d1944e8d9a847f18c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4172. Extend DominantResourceCalculator to account for all resources. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "32c91223f1bd06561ea4ce2d1944e8d9a847f18c",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,30 @@\n+  private Resource multiplyAndNormalize(Resource r, double by,\n+      Resource stepFactor, boolean roundUp) {\n+    Resource ret \u003d Resources.createResource(0, 0);\n+    for (String resource : resourceNames) {\n+      try {\n+        ResourceInformation rResourceInformation \u003d\n+            r.getResourceInformation(resource);\n+        ResourceInformation stepFactorResourceInformation \u003d\n+            stepFactor.getResourceInformation(resource);\n+        ResourceInformation tmp \u003d\n+            ResourceInformation.newInstance(rResourceInformation);\n+\n+        Long rValue \u003d rResourceInformation.getValue();\n+        Long stepFactorValue \u003d UnitsConversionUtil\n+            .convert(stepFactorResourceInformation.getUnits(),\n+                rResourceInformation.getUnits(),\n+                stepFactorResourceInformation.getValue());\n+\n+        Long value \u003d\n+            roundUp ? roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n+                roundDown((long) (rValue * by), stepFactorValue);\n+        tmp.setValue(value);\n+        ret.setResourceInformation(resource, tmp);\n+      } catch (YarnException ye) {\n+        throw new IllegalArgumentException(\n+            \"Error getting resource information for \" + resource, ye);\n+      }\n+    }\n+    return ret;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Resource multiplyAndNormalize(Resource r, double by,\n      Resource stepFactor, boolean roundUp) {\n    Resource ret \u003d Resources.createResource(0, 0);\n    for (String resource : resourceNames) {\n      try {\n        ResourceInformation rResourceInformation \u003d\n            r.getResourceInformation(resource);\n        ResourceInformation stepFactorResourceInformation \u003d\n            stepFactor.getResourceInformation(resource);\n        ResourceInformation tmp \u003d\n            ResourceInformation.newInstance(rResourceInformation);\n\n        Long rValue \u003d rResourceInformation.getValue();\n        Long stepFactorValue \u003d UnitsConversionUtil\n            .convert(stepFactorResourceInformation.getUnits(),\n                rResourceInformation.getUnits(),\n                stepFactorResourceInformation.getValue());\n\n        Long value \u003d\n            roundUp ? roundUp((long) Math.ceil(rValue * by), stepFactorValue) :\n                roundDown((long) (rValue * by), stepFactorValue);\n        tmp.setValue(value);\n        ret.setResourceInformation(resource, tmp);\n      } catch (YarnException ye) {\n        throw new IllegalArgumentException(\n            \"Error getting resource information for \" + resource, ye);\n      }\n    }\n    return ret;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}