{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "computeInvalidateWork",
  "functionId": "computeInvalidateWork___nodesToProcess-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 1927,
  "functionEndLine": 1944,
  "numCommitsSeen": 507,
  "timeTaken": 18830,
  "changeHistory": [
    "151c5deaf15f7c13efba9b9141089804196fae92",
    "9a0fcae5bc9e481201e101c3c98e23b6e827774e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "513f17d115564e49124bb744cecf36d16a144ffc",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "cc875f0124d1951a4aab0565442242dac3dd35c8",
    "7fac946ac983e31613fd62836c8ac9c4a579210a",
    "710e5a960e8af1d4c73e386041096aacfee8b828",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "151c5deaf15f7c13efba9b9141089804196fae92": "Ybodychange",
    "9a0fcae5bc9e481201e101c3c98e23b6e827774e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "513f17d115564e49124bb744cecf36d16a144ffc": "Ybodychange",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "cc875f0124d1951a4aab0565442242dac3dd35c8": "Ybodychange",
    "7fac946ac983e31613fd62836c8ac9c4a579210a": "Ymodifierchange",
    "710e5a960e8af1d4c73e386041096aacfee8b828": "Ybodychange",
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": "Ymultichange(Yfilerename,Ymodifierchange)",
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": "Ymultichange(Yfilerename,Ymodifierchange)",
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": "Ymultichange(Yfilerename,Ymodifierchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "151c5deaf15f7c13efba9b9141089804196fae92": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6511. BlockManager#computeInvalidateWork() could do nothing. Contributed by Juan Yu.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607735 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 1:10 PM",
      "commitName": "151c5deaf15f7c13efba9b9141089804196fae92",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "03/07/14 1:02 PM",
      "commitNameOld": "f881f0e92317d6badb71f80fd9ea7649644e9419",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,18 @@\n   int computeInvalidateWork(int nodesToProcess) {\n     final List\u003cDatanodeInfo\u003e nodes \u003d invalidateBlocks.getDatanodes();\n     Collections.shuffle(nodes);\n \n     nodesToProcess \u003d Math.min(nodes.size(), nodesToProcess);\n \n     int blockCnt \u003d 0;\n-    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n-      blockCnt +\u003d invalidateWorkForOneNode(nodes.get(nodeCnt));\n+    for (DatanodeInfo dnInfo : nodes) {\n+      int blocks \u003d invalidateWorkForOneNode(dnInfo);\n+      if (blocks \u003e 0) {\n+        blockCnt +\u003d blocks;\n+        if (--nodesToProcess \u003d\u003d 0) {\n+          break;\n+        }\n+      }\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    final List\u003cDatanodeInfo\u003e nodes \u003d invalidateBlocks.getDatanodes();\n    Collections.shuffle(nodes);\n\n    nodesToProcess \u003d Math.min(nodes.size(), nodesToProcess);\n\n    int blockCnt \u003d 0;\n    for (DatanodeInfo dnInfo : nodes) {\n      int blocks \u003d invalidateWorkForOneNode(dnInfo);\n      if (blocks \u003e 0) {\n        blockCnt +\u003d blocks;\n        if (--nodesToProcess \u003d\u003d 0) {\n          break;\n        }\n      }\n    }\n    return blockCnt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "9a0fcae5bc9e481201e101c3c98e23b6e827774e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6362. InvalidateBlocks is inconsistent in usage of DatanodeUuid and StorageID. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595056 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/05/14 2:30 PM",
      "commitName": "9a0fcae5bc9e481201e101c3c98e23b6e827774e",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "13/05/14 11:22 AM",
      "commitNameOld": "8e5b5165c14486af6d5d73e7b4e591d4787ad8f2",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.13,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,12 @@\n   int computeInvalidateWork(int nodesToProcess) {\n-    final List\u003cString\u003e nodes \u003d invalidateBlocks.getStorageIDs();\n+    final List\u003cDatanodeInfo\u003e nodes \u003d invalidateBlocks.getDatanodes();\n     Collections.shuffle(nodes);\n \n     nodesToProcess \u003d Math.min(nodes.size(), nodesToProcess);\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(nodes.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    final List\u003cDatanodeInfo\u003e nodes \u003d invalidateBlocks.getDatanodes();\n    Collections.shuffle(nodes);\n\n    nodesToProcess \u003d Math.min(nodes.size(), nodesToProcess);\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(nodes.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    final List\u003cString\u003e nodes \u003d invalidateBlocks.getStorageIDs();\n    Collections.shuffle(nodes);\n\n    nodesToProcess \u003d Math.min(nodes.size(), nodesToProcess);\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(nodes.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "513f17d115564e49124bb744cecf36d16a144ffc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2273.  Refactor BlockManager.recentInvalidateSets to a new class.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1160475 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/08/11 3:28 PM",
      "commitName": "513f17d115564e49124bb744cecf36d16a144ffc",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "19/08/11 10:36 AM",
      "commitNameOld": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,12 @@\n   int computeInvalidateWork(int nodesToProcess) {\n-    int numOfNodes;\n-    ArrayList\u003cString\u003e keyArray;\n+    final List\u003cString\u003e nodes \u003d invalidateBlocks.getStorageIDs();\n+    Collections.shuffle(nodes);\n \n-    synchronized(recentInvalidateSets) {\n-      numOfNodes \u003d recentInvalidateSets.size();\n-      // get an array of the keys\n-      keyArray \u003d new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n-    }\n-\n-    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n-\n-    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n-    // and put them at [0, nodesToProcess)\n-    int remainingNodes \u003d numOfNodes - nodesToProcess;\n-    if (nodesToProcess \u003c remainingNodes) {\n-      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n-        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n-        Collections.swap(keyArray, keyIndex, i); // swap to front\n-      }\n-    } else {\n-      for(int i\u003d0; i\u003cremainingNodes; i++) {\n-        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n-        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n-      }\n-    }\n+    nodesToProcess \u003d Math.min(nodes.size(), nodesToProcess);\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n-      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n+      blockCnt +\u003d invalidateWorkForOneNode(nodes.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    final List\u003cString\u003e nodes \u003d invalidateBlocks.getStorageIDs();\n    Collections.shuffle(nodes);\n\n    nodesToProcess \u003d Math.min(nodes.size(), nodesToProcess);\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(nodes.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes;\n    ArrayList\u003cString\u003e keyArray;\n\n    synchronized(recentInvalidateSets) {\n      numOfNodes \u003d recentInvalidateSets.size();\n      // get an array of the keys\n      keyArray \u003d new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n    }\n\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
      }
    },
    "cc875f0124d1951a4aab0565442242dac3dd35c8": {
      "type": "Ybodychange",
      "commitMessage": "DFS-1257. Fix a race condition on BlockManager.recentInvalidateSets.  Contributed by Eric Payne\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1158933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/11 3:00 PM",
      "commitName": "cc875f0124d1951a4aab0565442242dac3dd35c8",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/08/11 7:34 AM",
      "commitNameOld": "b0944651681337e81b41250f43bd1e8eebc78125",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n   int computeInvalidateWork(int nodesToProcess) {\n-    int numOfNodes \u003d recentInvalidateSets.size();\n-    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n+    int numOfNodes;\n+    ArrayList\u003cString\u003e keyArray;\n \n-    // TODO should using recentInvalidateSets be synchronized?\n-    // get an array of the keys\n-    ArrayList\u003cString\u003e keyArray \u003d\n-      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n+    synchronized(recentInvalidateSets) {\n+      numOfNodes \u003d recentInvalidateSets.size();\n+      // get an array of the keys\n+      keyArray \u003d new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n+    }\n+\n+    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes;\n    ArrayList\u003cString\u003e keyArray;\n\n    synchronized(recentInvalidateSets) {\n      numOfNodes \u003d recentInvalidateSets.size();\n      // get an array of the keys\n      keyArray \u003d new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n    }\n\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "7fac946ac983e31613fd62836c8ac9c4a579210a": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-2108. Move datanode heartbeat handling from namenode package to blockmanagement package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1154042 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/11 3:55 PM",
      "commitName": "7fac946ac983e31613fd62836c8ac9c4a579210a",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/08/11 6:57 AM",
      "commitNameOld": "d68e38b78d9687987c4de2046ce9aa0016685e98",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 3.37,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n-  public int computeInvalidateWork(int nodesToProcess) {\n+  int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[]"
      }
    },
    "710e5a960e8af1d4c73e386041096aacfee8b828": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2161. Move createNamenode(..), createClientDatanodeProtocolProxy(..) and Random object creation to DFSUtil; move DFSClient.stringifyToken(..) to DelegationTokenIdentifier.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1148348 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/11 7:23 AM",
      "commitName": "710e5a960e8af1d4c73e386041096aacfee8b828",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/07/11 5:26 PM",
      "commitNameOld": "c3f6575ca44e8ad803d0b46991472465b595cdeb",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n-        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n+        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n-        int keyIndex \u003d r.nextInt(numOfNodes-i);\n+        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d DFSUtil.getRandom().nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "09b6f98de431628c80bc8a6faf0070eeaf72ff2a": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 6:31 PM",
      "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  int computeInvalidateWork(int nodesToProcess) {\n+  public int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2107. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140939 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 6:31 PM",
          "commitName": "09b6f98de431628c80bc8a6faf0070eeaf72ff2a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 5:26 PM",
          "commitNameOld": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  int computeInvalidateWork(int nodesToProcess) {\n+  public int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 5:26 PM",
      "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public int computeInvalidateWork(int nodesToProcess) {\n+  int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert 1140913 and 1140909 for HDFS-2107.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140920 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 5:26 PM",
          "commitName": "97b6ca4dd7d1233e8f8c90b1c01e47228c044e13",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 4:57 PM",
          "commitNameOld": "d58e3efe9269efe00c309ed0e9726d2f94bcd03a",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public int computeInvalidateWork(int nodesToProcess) {\n+  int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        }
      ]
    },
    "1bcfe45e47775b98cce5541f328c4fd46e5eb13d": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/06/11 4:43 PM",
      "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  int computeInvalidateWork(int nodesToProcess) {\n+  public int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java",
            "newPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2106. Move block management code from o.a.h.h.s.namenode to a new package o.a.h.h.s.blockmanagement.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1140909 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/06/11 4:43 PM",
          "commitName": "1bcfe45e47775b98cce5541f328c4fd46e5eb13d",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "28/06/11 9:21 AM",
          "commitNameOld": "1834fb99f516b2f2cd5e0ab1f89d407f98a7237a",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  int computeInvalidateWork(int nodesToProcess) {\n+  public int computeInvalidateWork(int nodesToProcess) {\n     int numOfNodes \u003d recentInvalidateSets.size();\n     nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n \n     // TODO should using recentInvalidateSets be synchronized?\n     // get an array of the keys\n     ArrayList\u003cString\u003e keyArray \u003d\n       new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n \n     // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n     // and put them at [0, nodesToProcess)\n     int remainingNodes \u003d numOfNodes - nodesToProcess;\n     if (nodesToProcess \u003c remainingNodes) {\n       for(int i\u003d0; i\u003cnodesToProcess; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n         Collections.swap(keyArray, keyIndex, i); // swap to front\n       }\n     } else {\n       for(int i\u003d0; i\u003cremainingNodes; i++) {\n         int keyIndex \u003d r.nextInt(numOfNodes-i);\n         Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n       }\n     }\n \n     int blockCnt \u003d 0;\n     for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n       blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n     }\n     return blockCnt;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
          "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,30 @@\n+  int computeInvalidateWork(int nodesToProcess) {\n+    int numOfNodes \u003d recentInvalidateSets.size();\n+    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n+\n+    // TODO should using recentInvalidateSets be synchronized?\n+    // get an array of the keys\n+    ArrayList\u003cString\u003e keyArray \u003d\n+      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n+\n+    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n+    // and put them at [0, nodesToProcess)\n+    int remainingNodes \u003d numOfNodes - nodesToProcess;\n+    if (nodesToProcess \u003c remainingNodes) {\n+      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n+        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n+        Collections.swap(keyArray, keyIndex, i); // swap to front\n+      }\n+    } else {\n+      for(int i\u003d0; i\u003cremainingNodes; i++) {\n+        int keyIndex \u003d r.nextInt(numOfNodes-i);\n+        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n+      }\n+    }\n+\n+    int blockCnt \u003d 0;\n+    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n+      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n+    }\n+    return blockCnt;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int computeInvalidateWork(int nodesToProcess) {\n    int numOfNodes \u003d recentInvalidateSets.size();\n    nodesToProcess \u003d Math.min(numOfNodes, nodesToProcess);\n\n    // TODO should using recentInvalidateSets be synchronized?\n    // get an array of the keys\n    ArrayList\u003cString\u003e keyArray \u003d\n      new ArrayList\u003cString\u003e(recentInvalidateSets.keySet());\n\n    // randomly pick up \u003ci\u003enodesToProcess\u003c/i\u003e nodes\n    // and put them at [0, nodesToProcess)\n    int remainingNodes \u003d numOfNodes - nodesToProcess;\n    if (nodesToProcess \u003c remainingNodes) {\n      for(int i\u003d0; i\u003cnodesToProcess; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i)+i;\n        Collections.swap(keyArray, keyIndex, i); // swap to front\n      }\n    } else {\n      for(int i\u003d0; i\u003cremainingNodes; i++) {\n        int keyIndex \u003d r.nextInt(numOfNodes-i);\n        Collections.swap(keyArray, keyIndex, numOfNodes-i-1); // swap to end\n      }\n    }\n\n    int blockCnt \u003d 0;\n    for(int nodeCnt \u003d 0; nodeCnt \u003c nodesToProcess; nodeCnt++ ) {\n      blockCnt +\u003d invalidateWorkForOneNode(keyArray.get(nodeCnt));\n    }\n    return blockCnt;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/BlockManager.java"
    }
  }
}