{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "getAuthParameters",
  "functionId": "getAuthParameters___op-HttpOpParam.Op(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 586,
  "functionEndLine": 612,
  "numCommitsSeen": 179,
  "timeTaken": 5051,
  "changeHistory": [
    "d78854b928bb877f26b11b5b212a100a79941f35",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
    "140076fb5777f5db53c005b117f32aa3056405ca",
    "94a22114b9f5ebc59dd83e4d164472bb710fee53",
    "8a4f03cb7028c86578663b8d1f1a4171c59c1e52",
    "97c466831206e8ff4cd3fd8048ca0fd2d556a71d",
    "97ccd64401569a8cdabc40c5897e34a03ce4bb22"
  ],
  "changeHistoryShort": {
    "d78854b928bb877f26b11b5b212a100a79941f35": "Ymultichange(Ymodifierchange,Ybodychange)",
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": "Yfilerename",
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": "Ybodychange",
    "140076fb5777f5db53c005b117f32aa3056405ca": "Ybodychange",
    "94a22114b9f5ebc59dd83e4d164472bb710fee53": "Ybodychange",
    "8a4f03cb7028c86578663b8d1f1a4171c59c1e52": "Ybodychange",
    "97c466831206e8ff4cd3fd8048ca0fd2d556a71d": "Ybodychange",
    "97ccd64401569a8cdabc40c5897e34a03ce4bb22": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d78854b928bb877f26b11b5b212a100a79941f35": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-14434.  Ignore user.name query parameter in secure WebHDFS.\n             Contributed by KWON BYUNGCHANG\n",
      "commitDate": "28/05/19 2:31 PM",
      "commitName": "d78854b928bb877f26b11b5b212a100a79941f35",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-14434.  Ignore user.name query parameter in secure WebHDFS.\n             Contributed by KWON BYUNGCHANG\n",
          "commitDate": "28/05/19 2:31 PM",
          "commitName": "d78854b928bb877f26b11b5b212a100a79941f35",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/05/19 10:20 AM",
          "commitNameOld": "3e5e5b028ad7e199d08e524fe7cddeee5db51a6d",
          "commitAuthorOld": "Srinivasu Majeti",
          "daysBetweenCommits": 11.17,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,27 @@\n-  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n+  private synchronized Param\u003c?, ?\u003e[] getAuthParameters(final HttpOpParam.Op op)\n+      throws IOException {\n     List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();\n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n     Token\u003c?\u003e token \u003d null;\n     if (!op.getRequireAuth()) {\n       token \u003d getDelegationToken();\n     }\n     if (token !\u003d null) {\n       authParams.add(new DelegationParam(token.encodeToUrlString()));\n     } else {\n       UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n-      authParams.add(new UserParam(userUgi.getShortUserName()));\n+      UserParam userParam \u003d new UserParam((userUgi.getShortUserName()));\n+\n+      //in insecure, use user.name parameter, in secure, use spnego auth\n+      if(isInsecureCluster) {\n+        authParams.add(userParam);\n+      }\n     }\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Param\u003c?, ?\u003e[] getAuthParameters(final HttpOpParam.Op op)\n      throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();\n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    Token\u003c?\u003e token \u003d null;\n    if (!op.getRequireAuth()) {\n      token \u003d getDelegationToken();\n    }\n    if (token !\u003d null) {\n      authParams.add(new DelegationParam(token.encodeToUrlString()));\n    } else {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      UserParam userParam \u003d new UserParam((userUgi.getShortUserName()));\n\n      //in insecure, use user.name parameter, in secure, use spnego auth\n      if(isInsecureCluster) {\n        authParams.add(userParam);\n      }\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14434.  Ignore user.name query parameter in secure WebHDFS.\n             Contributed by KWON BYUNGCHANG\n",
          "commitDate": "28/05/19 2:31 PM",
          "commitName": "d78854b928bb877f26b11b5b212a100a79941f35",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "17/05/19 10:20 AM",
          "commitNameOld": "3e5e5b028ad7e199d08e524fe7cddeee5db51a6d",
          "commitAuthorOld": "Srinivasu Majeti",
          "daysBetweenCommits": 11.17,
          "commitsBetweenForRepo": 58,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,27 @@\n-  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n+  private synchronized Param\u003c?, ?\u003e[] getAuthParameters(final HttpOpParam.Op op)\n+      throws IOException {\n     List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();\n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n     Token\u003c?\u003e token \u003d null;\n     if (!op.getRequireAuth()) {\n       token \u003d getDelegationToken();\n     }\n     if (token !\u003d null) {\n       authParams.add(new DelegationParam(token.encodeToUrlString()));\n     } else {\n       UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n-      authParams.add(new UserParam(userUgi.getShortUserName()));\n+      UserParam userParam \u003d new UserParam((userUgi.getShortUserName()));\n+\n+      //in insecure, use user.name parameter, in secure, use spnego auth\n+      if(isInsecureCluster) {\n+        authParams.add(userParam);\n+      }\n     }\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized Param\u003c?, ?\u003e[] getAuthParameters(final HttpOpParam.Op op)\n      throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();\n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    Token\u003c?\u003e token \u003d null;\n    if (!op.getRequireAuth()) {\n      token \u003d getDelegationToken();\n    }\n    if (token !\u003d null) {\n      authParams.add(new DelegationParam(token.encodeToUrlString()));\n    } else {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      UserParam userParam \u003d new UserParam((userUgi.getShortUserName()));\n\n      //in insecure, use user.name parameter, in secure, use spnego auth\n      if(isInsecureCluster) {\n        authParams.add(userParam);\n      }\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "bcf89ddc7d52e04725caf104f5958e33d9f51b35": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8052. Move WebHdfsFileSystem into hadoop-hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "23/04/15 5:33 PM",
      "commitName": "bcf89ddc7d52e04725caf104f5958e33d9f51b35",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "23/04/15 4:40 PM",
      "commitNameOld": "0b3f8957a87ada1a275c9904b211fdbdcefafb02",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n-    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n+    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();\n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n     Token\u003c?\u003e token \u003d null;\n     if (!op.getRequireAuth()) {\n       token \u003d getDelegationToken();\n     }\n     if (token !\u003d null) {\n       authParams.add(new DelegationParam(token.encodeToUrlString()));\n     } else {\n       UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n       authParams.add(new UserParam(userUgi.getShortUserName()));\n     }\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();\n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    Token\u003c?\u003e token \u003d null;\n    if (!op.getRequireAuth()) {\n      token \u003d getDelegationToken();\n    }\n    if (token !\u003d null) {\n      authParams.add(new DelegationParam(token.encodeToUrlString()));\n    } else {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      authParams.add(new UserParam(userUgi.getShortUserName()));\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
      }
    },
    "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6222. Remove background token renewer from webhdfs. Contributed by Rushabh Shah and Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604300 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/06/14 4:58 PM",
      "commitName": "0c5128969522cf754010c32cdcbfcfa5ebe5b3b0",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "19/06/14 4:06 PM",
      "commitNameOld": "46dc32e12568c5e254a3a2f2664095dc9de8bd55",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n     List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n     Token\u003c?\u003e token \u003d null;\n-    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 !op.getRequireAuth()) {\n+    if (!op.getRequireAuth()) {\n       token \u003d getDelegationToken();\n     }\n     if (token !\u003d null) {\n       authParams.add(new DelegationParam(token.encodeToUrlString()));\n     } else {\n       UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n       authParams.add(new UserParam(userUgi.getShortUserName()));\n     }\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    Token\u003c?\u003e token \u003d null;\n    if (!op.getRequireAuth()) {\n      token \u003d getDelegationToken();\n    }\n    if (token !\u003d null) {\n      authParams.add(new DelegationParam(token.encodeToUrlString()));\n    } else {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      authParams.add(new UserParam(userUgi.getShortUserName()));\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "140076fb5777f5db53c005b117f32aa3056405ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4577. Webhdfs operations should declare if authentication is required. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454517 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/13 12:01 PM",
      "commitName": "140076fb5777f5db53c005b117f32aa3056405ca",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "08/03/13 8:56 AM",
      "commitNameOld": "94a22114b9f5ebc59dd83e4d164472bb710fee53",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n   Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n     List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n     Token\u003c?\u003e token \u003d null;\n-    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n-        op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n-        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN \u0026\u0026\n-        op !\u003d PutOpParam.Op.CANCELDELEGATIONTOKEN) {\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 !op.getRequireAuth()) {\n       token \u003d getDelegationToken();\n     }\n     if (token !\u003d null) {\n       authParams.add(new DelegationParam(token.encodeToUrlString()));\n     } else {\n       UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n       authParams.add(new UserParam(userUgi.getShortUserName()));\n     }\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    Token\u003c?\u003e token \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026 !op.getRequireAuth()) {\n      token \u003d getDelegationToken();\n    }\n    if (token !\u003d null) {\n      authParams.add(new DelegationParam(token.encodeToUrlString()));\n    } else {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      authParams.add(new UserParam(userUgi.getShortUserName()));\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "94a22114b9f5ebc59dd83e4d164472bb710fee53": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4567. Webhdfs does not need a token for token operations. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454460 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/13 8:56 AM",
      "commitName": "94a22114b9f5ebc59dd83e4d164472bb710fee53",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "07/03/13 11:58 AM",
      "commitNameOld": "8a4f03cb7028c86578663b8d1f1a4171c59c1e52",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,24 @@\n   Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n     List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n-    boolean hasToken \u003d false;\n+    Token\u003c?\u003e token \u003d null;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n         op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN \u0026\u0026\n         op !\u003d PutOpParam.Op.CANCELDELEGATIONTOKEN) {\n-      synchronized (this) {\n-        hasToken \u003d (delegationToken !\u003d null);\n-        if (hasToken) {\n-          final String encoded \u003d delegationToken.encodeToUrlString();\n-          authParams.add(new DelegationParam(encoded));\n-        } // else we are talking to an insecure cluster\n-      }\n+      token \u003d getDelegationToken();\n     }\n-    if (!hasToken) {\n+    if (token !\u003d null) {\n+      authParams.add(new DelegationParam(token.encodeToUrlString()));\n+    } else {\n       UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n       authParams.add(new UserParam(userUgi.getShortUserName()));\n     }\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    Token\u003c?\u003e token \u003d null;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN \u0026\u0026\n        op !\u003d PutOpParam.Op.CANCELDELEGATIONTOKEN) {\n      token \u003d getDelegationToken();\n    }\n    if (token !\u003d null) {\n      authParams.add(new DelegationParam(token.encodeToUrlString()));\n    } else {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      authParams.add(new UserParam(userUgi.getShortUserName()));\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "8a4f03cb7028c86578663b8d1f1a4171c59c1e52": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4566. Webdhfs token cancelation should use authentication (daryn)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/13 11:58 AM",
      "commitName": "8a4f03cb7028c86578663b8d1f1a4171c59c1e52",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "07/03/13 8:56 AM",
      "commitNameOld": "97c466831206e8ff4cd3fd8048ca0fd2d556a71d",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,28 @@\n   Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n     List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n     boolean hasToken \u003d false;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n-        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN) {\n+        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN \u0026\u0026\n+        op !\u003d PutOpParam.Op.CANCELDELEGATIONTOKEN) {\n       synchronized (this) {\n         hasToken \u003d (delegationToken !\u003d null);\n         if (hasToken) {\n           final String encoded \u003d delegationToken.encodeToUrlString();\n           authParams.add(new DelegationParam(encoded));\n         } // else we are talking to an insecure cluster\n       }\n     }\n     if (!hasToken) {\n       UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n       authParams.add(new UserParam(userUgi.getShortUserName()));\n     }\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    boolean hasToken \u003d false;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN \u0026\u0026\n        op !\u003d PutOpParam.Op.CANCELDELEGATIONTOKEN) {\n      synchronized (this) {\n        hasToken \u003d (delegationToken !\u003d null);\n        if (hasToken) {\n          final String encoded \u003d delegationToken.encodeToUrlString();\n          authParams.add(new DelegationParam(encoded));\n        } // else we are talking to an insecure cluster\n      }\n    }\n    if (!hasToken) {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      authParams.add(new UserParam(userUgi.getShortUserName()));\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "97c466831206e8ff4cd3fd8048ca0fd2d556a71d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4560. Webhdfs cannot use tokens obtained by another user (daryn)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/03/13 8:56 AM",
      "commitName": "97c466831206e8ff4cd3fd8048ca0fd2d556a71d",
      "commitAuthor": "Daryn Sharp",
      "commitDateOld": "05/03/13 12:17 PM",
      "commitNameOld": "97ccd64401569a8cdabc40c5897e34a03ce4bb22",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n     List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n     // Skip adding delegation token for token operations because these\n     // operations require authentication.\n     boolean hasToken \u003d false;\n     if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n         op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n         op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN) {\n       synchronized (this) {\n         hasToken \u003d (delegationToken !\u003d null);\n         if (hasToken) {\n           final String encoded \u003d delegationToken.encodeToUrlString();\n           authParams.add(new DelegationParam(encoded));\n         } // else we are talking to an insecure cluster\n       }\n     }\n-    UserGroupInformation userUgi \u003d ugi;\n     if (!hasToken) {\n+      UserGroupInformation userUgi \u003d ugi;\n       UserGroupInformation realUgi \u003d userUgi.getRealUser();\n       if (realUgi !\u003d null) { // proxy user\n         authParams.add(new DoAsParam(userUgi.getShortUserName()));\n         userUgi \u003d realUgi;\n       }\n+      authParams.add(new UserParam(userUgi.getShortUserName()));\n     }\n-    authParams.add(new UserParam(userUgi.getShortUserName()));\n     return authParams.toArray(new Param\u003c?,?\u003e[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    boolean hasToken \u003d false;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN) {\n      synchronized (this) {\n        hasToken \u003d (delegationToken !\u003d null);\n        if (hasToken) {\n          final String encoded \u003d delegationToken.encodeToUrlString();\n          authParams.add(new DelegationParam(encoded));\n        } // else we are talking to an insecure cluster\n      }\n    }\n    if (!hasToken) {\n      UserGroupInformation userUgi \u003d ugi;\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n      authParams.add(new UserParam(userUgi.getShortUserName()));\n    }\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "97ccd64401569a8cdabc40c5897e34a03ce4bb22": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4542. Webhdfs doesn\u0027t support secure proxy users. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1452978 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/13 12:17 PM",
      "commitName": "97ccd64401569a8cdabc40c5897e34a03ce4bb22",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,27 @@\n+  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n+    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n+    // Skip adding delegation token for token operations because these\n+    // operations require authentication.\n+    boolean hasToken \u003d false;\n+    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n+        op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n+        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN) {\n+      synchronized (this) {\n+        hasToken \u003d (delegationToken !\u003d null);\n+        if (hasToken) {\n+          final String encoded \u003d delegationToken.encodeToUrlString();\n+          authParams.add(new DelegationParam(encoded));\n+        } // else we are talking to an insecure cluster\n+      }\n+    }\n+    UserGroupInformation userUgi \u003d ugi;\n+    if (!hasToken) {\n+      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n+      if (realUgi !\u003d null) { // proxy user\n+        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n+        userUgi \u003d realUgi;\n+      }\n+    }\n+    authParams.add(new UserParam(userUgi.getShortUserName()));\n+    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Param\u003c?,?\u003e[] getAuthParameters(final HttpOpParam.Op op) throws IOException {\n    List\u003cParam\u003c?,?\u003e\u003e authParams \u003d Lists.newArrayList();    \n    // Skip adding delegation token for token operations because these\n    // operations require authentication.\n    boolean hasToken \u003d false;\n    if (UserGroupInformation.isSecurityEnabled() \u0026\u0026\n        op !\u003d GetOpParam.Op.GETDELEGATIONTOKEN \u0026\u0026\n        op !\u003d PutOpParam.Op.RENEWDELEGATIONTOKEN) {\n      synchronized (this) {\n        hasToken \u003d (delegationToken !\u003d null);\n        if (hasToken) {\n          final String encoded \u003d delegationToken.encodeToUrlString();\n          authParams.add(new DelegationParam(encoded));\n        } // else we are talking to an insecure cluster\n      }\n    }\n    UserGroupInformation userUgi \u003d ugi;\n    if (!hasToken) {\n      UserGroupInformation realUgi \u003d userUgi.getRealUser();\n      if (realUgi !\u003d null) { // proxy user\n        authParams.add(new DoAsParam(userUgi.getShortUserName()));\n        userUgi \u003d realUgi;\n      }\n    }\n    authParams.add(new UserParam(userUgi.getShortUserName()));\n    return authParams.toArray(new Param\u003c?,?\u003e[0]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}