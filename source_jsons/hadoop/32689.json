{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeStatusUpdaterImpl.java",
  "functionName": "getLogAggregationReportsForApps",
  "functionId": "getLogAggregationReportsForApps___lastestLogAggregationStatus-ConcurrentLinkedQueue__LogAggregationReport__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
  "functionStartLine": 863,
  "functionEndLine": 872,
  "numCommitsSeen": 117,
  "timeTaken": 2582,
  "changeHistory": [
    "15ccd967ee3e7046a50522089f67ba01f36ec76a",
    "92431c961741747b5d6442f4025016d48d9a6863"
  ],
  "changeHistoryShort": {
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": "Ymultichange(Yreturntypechange,Ybodychange)",
    "92431c961741747b5d6442f4025016d48d9a6863": "Yintroduced"
  },
  "changeHistoryDetails": {
    "15ccd967ee3e7046a50522089f67ba01f36ec76a": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
      "commitDate": "14/05/15 10:58 AM",
      "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
          "commitDate": "14/05/15 10:58 AM",
          "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
          "commitAuthor": "Junping Du",
          "commitDateOld": "12/05/15 9:50 AM",
          "commitNameOld": "5c2f05cd9bad9bf9beb0f4ca18f4ae1bc3e84499",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,10 @@\n-      getLogAggregationReportsForApps(\n-          ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n-    Map\u003cApplicationId, LogAggregationReport\u003e latestLogAggregationReports \u003d\n-        new HashMap\u003cApplicationId, LogAggregationReport\u003e();\n+  private List\u003cLogAggregationReport\u003e getLogAggregationReportsForApps(\n+      ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n     LogAggregationReport status;\n     while ((status \u003d lastestLogAggregationStatus.poll()) !\u003d null) {\n       this.logAggregationReportForAppsTempList.add(status);\n     }\n-    for (LogAggregationReport logAggregationReport\n-        : this.logAggregationReportForAppsTempList) {\n-      LogAggregationReport report \u003d null;\n-      if (latestLogAggregationReports.containsKey(logAggregationReport\n-        .getApplicationId())) {\n-        report \u003d\n-            latestLogAggregationReports.get(logAggregationReport\n-              .getApplicationId());\n-        report.setLogAggregationStatus(logAggregationReport\n-          .getLogAggregationStatus());\n-        String message \u003d report.getDiagnosticMessage();\n-        if (logAggregationReport.getDiagnosticMessage() !\u003d null\n-            \u0026\u0026 !logAggregationReport.getDiagnosticMessage().isEmpty()) {\n-          if (message !\u003d null) {\n-            message +\u003d logAggregationReport.getDiagnosticMessage();\n-          } else {\n-            message \u003d logAggregationReport.getDiagnosticMessage();\n-          }\n-          report.setDiagnosticMessage(message);\n-        }\n-      } else {\n-        report \u003d Records.newRecord(LogAggregationReport.class);\n-        report.setApplicationId(logAggregationReport.getApplicationId());\n-        report.setNodeId(this.nodeId);\n-        report.setLogAggregationStatus(logAggregationReport\n-          .getLogAggregationStatus());\n-        report\n-          .setDiagnosticMessage(logAggregationReport.getDiagnosticMessage());\n-      }\n-      latestLogAggregationReports.put(logAggregationReport.getApplicationId(),\n-        report);\n-    }\n-    return latestLogAggregationReports;\n+    List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003cLogAggregationReport\u003e();\n+    reports.addAll(logAggregationReportForAppsTempList);\n+    return reports;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cLogAggregationReport\u003e getLogAggregationReportsForApps(\n      ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n    LogAggregationReport status;\n    while ((status \u003d lastestLogAggregationStatus.poll()) !\u003d null) {\n      this.logAggregationReportForAppsTempList.add(status);\n    }\n    List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003cLogAggregationReport\u003e();\n    reports.addAll(logAggregationReportForAppsTempList);\n    return reports;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "Map\u003cApplicationId,LogAggregationReport\u003e",
            "newValue": "List\u003cLogAggregationReport\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3505. Node\u0027s Log Aggregation Report with SUCCEED should not cached in RMApps. Contributed by Xuan Gong.\n",
          "commitDate": "14/05/15 10:58 AM",
          "commitName": "15ccd967ee3e7046a50522089f67ba01f36ec76a",
          "commitAuthor": "Junping Du",
          "commitDateOld": "12/05/15 9:50 AM",
          "commitNameOld": "5c2f05cd9bad9bf9beb0f4ca18f4ae1bc3e84499",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 2.05,
          "commitsBetweenForRepo": 27,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,10 @@\n-      getLogAggregationReportsForApps(\n-          ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n-    Map\u003cApplicationId, LogAggregationReport\u003e latestLogAggregationReports \u003d\n-        new HashMap\u003cApplicationId, LogAggregationReport\u003e();\n+  private List\u003cLogAggregationReport\u003e getLogAggregationReportsForApps(\n+      ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n     LogAggregationReport status;\n     while ((status \u003d lastestLogAggregationStatus.poll()) !\u003d null) {\n       this.logAggregationReportForAppsTempList.add(status);\n     }\n-    for (LogAggregationReport logAggregationReport\n-        : this.logAggregationReportForAppsTempList) {\n-      LogAggregationReport report \u003d null;\n-      if (latestLogAggregationReports.containsKey(logAggregationReport\n-        .getApplicationId())) {\n-        report \u003d\n-            latestLogAggregationReports.get(logAggregationReport\n-              .getApplicationId());\n-        report.setLogAggregationStatus(logAggregationReport\n-          .getLogAggregationStatus());\n-        String message \u003d report.getDiagnosticMessage();\n-        if (logAggregationReport.getDiagnosticMessage() !\u003d null\n-            \u0026\u0026 !logAggregationReport.getDiagnosticMessage().isEmpty()) {\n-          if (message !\u003d null) {\n-            message +\u003d logAggregationReport.getDiagnosticMessage();\n-          } else {\n-            message \u003d logAggregationReport.getDiagnosticMessage();\n-          }\n-          report.setDiagnosticMessage(message);\n-        }\n-      } else {\n-        report \u003d Records.newRecord(LogAggregationReport.class);\n-        report.setApplicationId(logAggregationReport.getApplicationId());\n-        report.setNodeId(this.nodeId);\n-        report.setLogAggregationStatus(logAggregationReport\n-          .getLogAggregationStatus());\n-        report\n-          .setDiagnosticMessage(logAggregationReport.getDiagnosticMessage());\n-      }\n-      latestLogAggregationReports.put(logAggregationReport.getApplicationId(),\n-        report);\n-    }\n-    return latestLogAggregationReports;\n+    List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003cLogAggregationReport\u003e();\n+    reports.addAll(logAggregationReportForAppsTempList);\n+    return reports;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private List\u003cLogAggregationReport\u003e getLogAggregationReportsForApps(\n      ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n    LogAggregationReport status;\n    while ((status \u003d lastestLogAggregationStatus.poll()) !\u003d null) {\n      this.logAggregationReportForAppsTempList.add(status);\n    }\n    List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003cLogAggregationReport\u003e();\n    reports.addAll(logAggregationReportForAppsTempList);\n    return reports;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "92431c961741747b5d6442f4025016d48d9a6863": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.\n",
      "commitDate": "10/04/15 8:56 AM",
      "commitName": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,42 @@\n+      getLogAggregationReportsForApps(\n+          ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n+    Map\u003cApplicationId, LogAggregationReport\u003e latestLogAggregationReports \u003d\n+        new HashMap\u003cApplicationId, LogAggregationReport\u003e();\n+    LogAggregationReport status;\n+    while ((status \u003d lastestLogAggregationStatus.poll()) !\u003d null) {\n+      this.logAggregationReportForAppsTempList.add(status);\n+    }\n+    for (LogAggregationReport logAggregationReport\n+        : this.logAggregationReportForAppsTempList) {\n+      LogAggregationReport report \u003d null;\n+      if (latestLogAggregationReports.containsKey(logAggregationReport\n+        .getApplicationId())) {\n+        report \u003d\n+            latestLogAggregationReports.get(logAggregationReport\n+              .getApplicationId());\n+        report.setLogAggregationStatus(logAggregationReport\n+          .getLogAggregationStatus());\n+        String message \u003d report.getDiagnosticMessage();\n+        if (logAggregationReport.getDiagnosticMessage() !\u003d null\n+            \u0026\u0026 !logAggregationReport.getDiagnosticMessage().isEmpty()) {\n+          if (message !\u003d null) {\n+            message +\u003d logAggregationReport.getDiagnosticMessage();\n+          } else {\n+            message \u003d logAggregationReport.getDiagnosticMessage();\n+          }\n+          report.setDiagnosticMessage(message);\n+        }\n+      } else {\n+        report \u003d Records.newRecord(LogAggregationReport.class);\n+        report.setApplicationId(logAggregationReport.getApplicationId());\n+        report.setNodeId(this.nodeId);\n+        report.setLogAggregationStatus(logAggregationReport\n+          .getLogAggregationStatus());\n+        report\n+          .setDiagnosticMessage(logAggregationReport.getDiagnosticMessage());\n+      }\n+      latestLogAggregationReports.put(logAggregationReport.getApplicationId(),\n+        report);\n+    }\n+    return latestLogAggregationReports;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      getLogAggregationReportsForApps(\n          ConcurrentLinkedQueue\u003cLogAggregationReport\u003e lastestLogAggregationStatus) {\n    Map\u003cApplicationId, LogAggregationReport\u003e latestLogAggregationReports \u003d\n        new HashMap\u003cApplicationId, LogAggregationReport\u003e();\n    LogAggregationReport status;\n    while ((status \u003d lastestLogAggregationStatus.poll()) !\u003d null) {\n      this.logAggregationReportForAppsTempList.add(status);\n    }\n    for (LogAggregationReport logAggregationReport\n        : this.logAggregationReportForAppsTempList) {\n      LogAggregationReport report \u003d null;\n      if (latestLogAggregationReports.containsKey(logAggregationReport\n        .getApplicationId())) {\n        report \u003d\n            latestLogAggregationReports.get(logAggregationReport\n              .getApplicationId());\n        report.setLogAggregationStatus(logAggregationReport\n          .getLogAggregationStatus());\n        String message \u003d report.getDiagnosticMessage();\n        if (logAggregationReport.getDiagnosticMessage() !\u003d null\n            \u0026\u0026 !logAggregationReport.getDiagnosticMessage().isEmpty()) {\n          if (message !\u003d null) {\n            message +\u003d logAggregationReport.getDiagnosticMessage();\n          } else {\n            message \u003d logAggregationReport.getDiagnosticMessage();\n          }\n          report.setDiagnosticMessage(message);\n        }\n      } else {\n        report \u003d Records.newRecord(LogAggregationReport.class);\n        report.setApplicationId(logAggregationReport.getApplicationId());\n        report.setNodeId(this.nodeId);\n        report.setLogAggregationStatus(logAggregationReport\n          .getLogAggregationStatus());\n        report\n          .setDiagnosticMessage(logAggregationReport.getDiagnosticMessage());\n      }\n      latestLogAggregationReports.put(logAggregationReport.getApplicationId(),\n        report);\n    }\n    return latestLogAggregationReports;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
    }
  }
}