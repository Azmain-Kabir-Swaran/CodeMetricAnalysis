{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskHeartbeatHandler.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java",
  "functionStartLine": 103,
  "functionEndLine": 124,
  "numCommitsSeen": 15,
  "timeTaken": 3183,
  "changeHistory": [
    "13a21f66078c91df97088b01f49a5919895f7110",
    "82f029f7b50679ea477a3a898e4ee400fa394adf",
    "537095d13cd38212ed162e0a360bdd9a8bd83498",
    "0928502029ef141759008997335ea2cd836a7154"
  ],
  "changeHistoryShort": {
    "13a21f66078c91df97088b01f49a5919895f7110": "Ybodychange",
    "82f029f7b50679ea477a3a898e4ee400fa394adf": "Ybodychange",
    "537095d13cd38212ed162e0a360bdd9a8bd83498": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13a21f66078c91df97088b01f49a5919895f7110": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6190. If a task stucks before its first heartbeat, it never timeouts and the MR job becomes stuck. Contributed by Zhaohui Xin.\n",
      "commitDate": "28/11/18 12:57 AM",
      "commitName": "13a21f66078c91df97088b01f49a5919895f7110",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "16/02/18 6:15 AM",
      "commitNameOld": "82f029f7b50679ea477a3a898e4ee400fa394adf",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 284.78,
      "commitsBetweenForRepo": 2828,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     taskTimeOut \u003d conf.getLong(\n         MRJobConfig.TASK_TIMEOUT, MRJobConfig.DEFAULT_TASK_TIMEOUT_MILLIS);\n     unregisterTimeOut \u003d conf.getLong(MRJobConfig.TASK_EXIT_TIMEOUT,\n         MRJobConfig.TASK_EXIT_TIMEOUT_DEFAULT);\n+    taskStuckTimeOut \u003d conf.getLong(MRJobConfig.TASK_STUCK_TIMEOUT_MS,\n+        MRJobConfig.DEFAULT_TASK_STUCK_TIMEOUT_MS);\n \n     // enforce task timeout is at least twice as long as task report interval\n     long taskProgressReportIntervalMillis \u003d MRJobConfUtil.\n         getTaskProgressReportInterval(conf);\n     long minimumTaskTimeoutAllowed \u003d taskProgressReportIntervalMillis * 2;\n     if(taskTimeOut \u003c minimumTaskTimeoutAllowed) {\n       taskTimeOut \u003d minimumTaskTimeoutAllowed;\n       LOG.info(\"Task timeout must be as least twice as long as the task \" +\n           \"status report interval. Setting task timeout to \" + taskTimeOut);\n     }\n \n     taskTimeOutCheckInterval \u003d\n         conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    taskTimeOut \u003d conf.getLong(\n        MRJobConfig.TASK_TIMEOUT, MRJobConfig.DEFAULT_TASK_TIMEOUT_MILLIS);\n    unregisterTimeOut \u003d conf.getLong(MRJobConfig.TASK_EXIT_TIMEOUT,\n        MRJobConfig.TASK_EXIT_TIMEOUT_DEFAULT);\n    taskStuckTimeOut \u003d conf.getLong(MRJobConfig.TASK_STUCK_TIMEOUT_MS,\n        MRJobConfig.DEFAULT_TASK_STUCK_TIMEOUT_MS);\n\n    // enforce task timeout is at least twice as long as task report interval\n    long taskProgressReportIntervalMillis \u003d MRJobConfUtil.\n        getTaskProgressReportInterval(conf);\n    long minimumTaskTimeoutAllowed \u003d taskProgressReportIntervalMillis * 2;\n    if(taskTimeOut \u003c minimumTaskTimeoutAllowed) {\n      taskTimeOut \u003d minimumTaskTimeoutAllowed;\n      LOG.info(\"Task timeout must be as least twice as long as the task \" +\n          \"status report interval. Setting task timeout to \" + taskTimeOut);\n    }\n\n    taskTimeOutCheckInterval \u003d\n        conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java",
      "extendedDetails": {}
    },
    "82f029f7b50679ea477a3a898e4ee400fa394adf": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7053: Timed out tasks can fail to produce thread dump. Contributed by Jason Lowe.\n",
      "commitDate": "16/02/18 6:15 AM",
      "commitName": "82f029f7b50679ea477a3a898e4ee400fa394adf",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "02/10/17 8:14 PM",
      "commitNameOld": "453d48bdfbb67ed3e66c33c4aef239c3d7bdd3bc",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 136.46,
      "commitsBetweenForRepo": 932,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n     taskTimeOut \u003d conf.getLong(\n         MRJobConfig.TASK_TIMEOUT, MRJobConfig.DEFAULT_TASK_TIMEOUT_MILLIS);\n+    unregisterTimeOut \u003d conf.getLong(MRJobConfig.TASK_EXIT_TIMEOUT,\n+        MRJobConfig.TASK_EXIT_TIMEOUT_DEFAULT);\n \n     // enforce task timeout is at least twice as long as task report interval\n     long taskProgressReportIntervalMillis \u003d MRJobConfUtil.\n         getTaskProgressReportInterval(conf);\n     long minimumTaskTimeoutAllowed \u003d taskProgressReportIntervalMillis * 2;\n     if(taskTimeOut \u003c minimumTaskTimeoutAllowed) {\n       taskTimeOut \u003d minimumTaskTimeoutAllowed;\n       LOG.info(\"Task timeout must be as least twice as long as the task \" +\n           \"status report interval. Setting task timeout to \" + taskTimeOut);\n     }\n \n     taskTimeOutCheckInterval \u003d\n         conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    taskTimeOut \u003d conf.getLong(\n        MRJobConfig.TASK_TIMEOUT, MRJobConfig.DEFAULT_TASK_TIMEOUT_MILLIS);\n    unregisterTimeOut \u003d conf.getLong(MRJobConfig.TASK_EXIT_TIMEOUT,\n        MRJobConfig.TASK_EXIT_TIMEOUT_DEFAULT);\n\n    // enforce task timeout is at least twice as long as task report interval\n    long taskProgressReportIntervalMillis \u003d MRJobConfUtil.\n        getTaskProgressReportInterval(conf);\n    long minimumTaskTimeoutAllowed \u003d taskProgressReportIntervalMillis * 2;\n    if(taskTimeOut \u003c minimumTaskTimeoutAllowed) {\n      taskTimeOut \u003d minimumTaskTimeoutAllowed;\n      LOG.info(\"Task timeout must be as least twice as long as the task \" +\n          \"status report interval. Setting task timeout to \" + taskTimeOut);\n    }\n\n    taskTimeOutCheckInterval \u003d\n        conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java",
      "extendedDetails": {}
    },
    "537095d13cd38212ed162e0a360bdd9a8bd83498": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6740. Enforce mapreduce.task.timeout to be at least mapreduce.task.progress-report.interval. (Haibo Chen via kasha)\n",
      "commitDate": "21/09/16 6:30 PM",
      "commitName": "537095d13cd38212ed162e0a360bdd9a8bd83498",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1192.79,
      "commitsBetweenForRepo": 8897,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,18 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     super.serviceInit(conf);\n-    taskTimeOut \u003d conf.getInt(MRJobConfig.TASK_TIMEOUT, 5 * 60 * 1000);\n+    taskTimeOut \u003d conf.getLong(\n+        MRJobConfig.TASK_TIMEOUT, MRJobConfig.DEFAULT_TASK_TIMEOUT_MILLIS);\n+\n+    // enforce task timeout is at least twice as long as task report interval\n+    long taskProgressReportIntervalMillis \u003d MRJobConfUtil.\n+        getTaskProgressReportInterval(conf);\n+    long minimumTaskTimeoutAllowed \u003d taskProgressReportIntervalMillis * 2;\n+    if(taskTimeOut \u003c minimumTaskTimeoutAllowed) {\n+      taskTimeOut \u003d minimumTaskTimeoutAllowed;\n+      LOG.info(\"Task timeout must be as least twice as long as the task \" +\n+          \"status report interval. Setting task timeout to \" + taskTimeOut);\n+    }\n+\n     taskTimeOutCheckInterval \u003d\n         conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    taskTimeOut \u003d conf.getLong(\n        MRJobConfig.TASK_TIMEOUT, MRJobConfig.DEFAULT_TASK_TIMEOUT_MILLIS);\n\n    // enforce task timeout is at least twice as long as task report interval\n    long taskProgressReportIntervalMillis \u003d MRJobConfUtil.\n        getTaskProgressReportInterval(conf);\n    long minimumTaskTimeoutAllowed \u003d taskProgressReportIntervalMillis * 2;\n    if(taskTimeOut \u003c minimumTaskTimeoutAllowed) {\n      taskTimeOut \u003d minimumTaskTimeoutAllowed;\n      LOG.info(\"Task timeout must be as least twice as long as the task \" +\n          \"status report interval. Setting task timeout to \" + taskTimeOut);\n    }\n\n    taskTimeOutCheckInterval \u003d\n        conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Yintroduced",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,6 @@\n+  protected void serviceInit(Configuration conf) throws Exception {\n+    super.serviceInit(conf);\n+    taskTimeOut \u003d conf.getInt(MRJobConfig.TASK_TIMEOUT, 5 * 60 * 1000);\n+    taskTimeOutCheckInterval \u003d\n+        conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    super.serviceInit(conf);\n    taskTimeOut \u003d conf.getInt(MRJobConfig.TASK_TIMEOUT, 5 * 60 * 1000);\n    taskTimeOutCheckInterval \u003d\n        conf.getInt(MRJobConfig.TASK_TIMEOUT_CHECK_INTERVAL_MS, 30 * 1000);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/TaskHeartbeatHandler.java"
    }
  }
}