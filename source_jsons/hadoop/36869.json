{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "validateAndGetSchedulerConfiguration",
  "functionId": "validateAndGetSchedulerConfiguration___mutationInfo-SchedConfUpdateInfo__hsr-HttpServletRequest(annotations-@Context)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 2628,
  "functionEndLine": 2676,
  "numCommitsSeen": 106,
  "timeTaken": 1900,
  "changeHistory": [
    "6526f95bd281fc011f8776d21ff933087c5924de",
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960"
  ],
  "changeHistoryShort": {
    "6526f95bd281fc011f8776d21ff933087c5924de": "Ybodychange",
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6526f95bd281fc011f8776d21ff933087c5924de": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10139. ValidateAndGetSchedulerConfiguration API fails when cluster max allocation \u003e default 8GB. Contributed by Prabhu Joseph.\n",
      "commitDate": "18/02/20 9:47 PM",
      "commitName": "6526f95bd281fc011f8776d21ff933087c5924de",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 9:46 AM",
      "commitNameOld": "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 21.5,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,49 @@\n   public synchronized Response validateAndGetSchedulerConfiguration(\n           SchedConfUpdateInfo mutationInfo,\n           @Context HttpServletRequest hsr) throws AuthorizationException {\n     // Only admin user is allowed to read scheduler conf,\n     // in order to avoid leaking sensitive info, such as ACLs\n     UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n     initForWritableEndpoints(callerUGI, true);\n     ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n     if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n             scheduler).isConfigurationMutable()) {\n       try {\n         MutableConfigurationProvider mutableConfigurationProvider \u003d\n                 ((MutableConfScheduler) scheduler).getMutableConfProvider();\n         Configuration schedulerConf \u003d mutableConfigurationProvider\n                 .getConfiguration();\n-        Configuration newConfig \u003d mutableConfigurationProvider\n+        Configuration newSchedulerConf \u003d mutableConfigurationProvider\n                 .applyChanges(schedulerConf, mutationInfo);\n         Configuration yarnConf \u003d ((CapacityScheduler) scheduler).getConf();\n+\n+        Configuration newConfig \u003d new Configuration(yarnConf);\n+        Iterator\u003cMap.Entry\u003cString, String\u003e\u003e iter \u003d newSchedulerConf.iterator();\n+        Entry\u003cString, String\u003e e \u003d null;\n+        while (iter.hasNext()) {\n+          e \u003d iter.next();\n+          newConfig.set(e.getKey(), e.getValue());\n+        }\n         CapacitySchedulerConfigValidator.validateCSConfiguration(yarnConf,\n                 newConfig, rm.getRMContext());\n \n         return Response.status(Status.OK)\n-                .entity(new ConfInfo(newConfig))\n+                .entity(new ConfInfo(newSchedulerConf))\n                 .build();\n       } catch (Exception e) {\n         String errorMsg \u003d \"CapacityScheduler configuration validation failed:\"\n                   + e.toString();\n         LOG.warn(errorMsg);\n         return Response.status(Status.BAD_REQUEST)\n                   .entity(errorMsg)\n                   .build();\n       }\n     } else {\n       String errorMsg \u003d \"Configuration change validation only supported by \" +\n               \"MutableConfScheduler.\";\n       LOG.warn(errorMsg);\n       return Response.status(Status.BAD_REQUEST)\n               .entity(errorMsg)\n               .build();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Response validateAndGetSchedulerConfiguration(\n          SchedConfUpdateInfo mutationInfo,\n          @Context HttpServletRequest hsr) throws AuthorizationException {\n    // Only admin user is allowed to read scheduler conf,\n    // in order to avoid leaking sensitive info, such as ACLs\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n            scheduler).isConfigurationMutable()) {\n      try {\n        MutableConfigurationProvider mutableConfigurationProvider \u003d\n                ((MutableConfScheduler) scheduler).getMutableConfProvider();\n        Configuration schedulerConf \u003d mutableConfigurationProvider\n                .getConfiguration();\n        Configuration newSchedulerConf \u003d mutableConfigurationProvider\n                .applyChanges(schedulerConf, mutationInfo);\n        Configuration yarnConf \u003d ((CapacityScheduler) scheduler).getConf();\n\n        Configuration newConfig \u003d new Configuration(yarnConf);\n        Iterator\u003cMap.Entry\u003cString, String\u003e\u003e iter \u003d newSchedulerConf.iterator();\n        Entry\u003cString, String\u003e e \u003d null;\n        while (iter.hasNext()) {\n          e \u003d iter.next();\n          newConfig.set(e.getKey(), e.getValue());\n        }\n        CapacitySchedulerConfigValidator.validateCSConfiguration(yarnConf,\n                newConfig, rm.getRMContext());\n\n        return Response.status(Status.OK)\n                .entity(new ConfInfo(newSchedulerConf))\n                .build();\n      } catch (Exception e) {\n        String errorMsg \u003d \"CapacityScheduler configuration validation failed:\"\n                  + e.toString();\n        LOG.warn(errorMsg);\n        return Response.status(Status.BAD_REQUEST)\n                  .entity(errorMsg)\n                  .build();\n      }\n    } else {\n      String errorMsg \u003d \"Configuration change validation only supported by \" +\n              \"MutableConfScheduler.\";\n      LOG.warn(errorMsg);\n      return Response.status(Status.BAD_REQUEST)\n              .entity(errorMsg)\n              .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": {
      "type": "Yintroduced",
      "commitMessage": "YARN-10022. RM Rest API to validate the CapacityScheduler Configuration change\n\nContributed by Kinga Marton.\n",
      "commitDate": "28/01/20 9:46 AM",
      "commitName": "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
      "commitAuthor": "Prabhu Joseph",
      "diff": "@@ -0,0 +1,41 @@\n+  public synchronized Response validateAndGetSchedulerConfiguration(\n+          SchedConfUpdateInfo mutationInfo,\n+          @Context HttpServletRequest hsr) throws AuthorizationException {\n+    // Only admin user is allowed to read scheduler conf,\n+    // in order to avoid leaking sensitive info, such as ACLs\n+    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n+    initForWritableEndpoints(callerUGI, true);\n+    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n+    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n+            scheduler).isConfigurationMutable()) {\n+      try {\n+        MutableConfigurationProvider mutableConfigurationProvider \u003d\n+                ((MutableConfScheduler) scheduler).getMutableConfProvider();\n+        Configuration schedulerConf \u003d mutableConfigurationProvider\n+                .getConfiguration();\n+        Configuration newConfig \u003d mutableConfigurationProvider\n+                .applyChanges(schedulerConf, mutationInfo);\n+        Configuration yarnConf \u003d ((CapacityScheduler) scheduler).getConf();\n+        CapacitySchedulerConfigValidator.validateCSConfiguration(yarnConf,\n+                newConfig, rm.getRMContext());\n+\n+        return Response.status(Status.OK)\n+                .entity(new ConfInfo(newConfig))\n+                .build();\n+      } catch (Exception e) {\n+        String errorMsg \u003d \"CapacityScheduler configuration validation failed:\"\n+                  + e.toString();\n+        LOG.warn(errorMsg);\n+        return Response.status(Status.BAD_REQUEST)\n+                  .entity(errorMsg)\n+                  .build();\n+      }\n+    } else {\n+      String errorMsg \u003d \"Configuration change validation only supported by \" +\n+              \"MutableConfScheduler.\";\n+      LOG.warn(errorMsg);\n+      return Response.status(Status.BAD_REQUEST)\n+              .entity(errorMsg)\n+              .build();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Response validateAndGetSchedulerConfiguration(\n          SchedConfUpdateInfo mutationInfo,\n          @Context HttpServletRequest hsr) throws AuthorizationException {\n    // Only admin user is allowed to read scheduler conf,\n    // in order to avoid leaking sensitive info, such as ACLs\n    UserGroupInformation callerUGI \u003d getCallerUserGroupInformation(hsr, true);\n    initForWritableEndpoints(callerUGI, true);\n    ResourceScheduler scheduler \u003d rm.getResourceScheduler();\n    if (scheduler instanceof MutableConfScheduler \u0026\u0026 ((MutableConfScheduler)\n            scheduler).isConfigurationMutable()) {\n      try {\n        MutableConfigurationProvider mutableConfigurationProvider \u003d\n                ((MutableConfScheduler) scheduler).getMutableConfProvider();\n        Configuration schedulerConf \u003d mutableConfigurationProvider\n                .getConfiguration();\n        Configuration newConfig \u003d mutableConfigurationProvider\n                .applyChanges(schedulerConf, mutationInfo);\n        Configuration yarnConf \u003d ((CapacityScheduler) scheduler).getConf();\n        CapacitySchedulerConfigValidator.validateCSConfiguration(yarnConf,\n                newConfig, rm.getRMContext());\n\n        return Response.status(Status.OK)\n                .entity(new ConfInfo(newConfig))\n                .build();\n      } catch (Exception e) {\n        String errorMsg \u003d \"CapacityScheduler configuration validation failed:\"\n                  + e.toString();\n        LOG.warn(errorMsg);\n        return Response.status(Status.BAD_REQUEST)\n                  .entity(errorMsg)\n                  .build();\n      }\n    } else {\n      String errorMsg \u003d \"Configuration change validation only supported by \" +\n              \"MutableConfScheduler.\";\n      LOG.warn(errorMsg);\n      return Response.status(Status.BAD_REQUEST)\n              .entity(errorMsg)\n              .build();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}