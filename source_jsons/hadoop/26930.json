{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CosNativeFileSystemStore.java",
  "functionName": "initCOSClient",
  "functionId": "initCOSClient___uri-URI__conf-Configuration",
  "sourceFilePath": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java",
  "functionStartLine": 93,
  "functionEndLine": 137,
  "numCommitsSeen": 3,
  "timeTaken": 1535,
  "changeHistory": [
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2"
  ],
  "changeHistoryShort": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": "Ymultichange(Yparameterchange,Ybodychange)",
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "82ff7bc9abc8f3ad549db898953d98ef142ab02d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
      "commitDate": "20/04/20 3:14 AM",
      "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
      "commitAuthor": "Sammi Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
          "commitDate": "20/04/20 3:14 AM",
          "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/09/19 1:53 AM",
          "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 206.06,
          "commitsBetweenForRepo": 773,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  private void initCOSClient(Configuration conf) throws IOException {\n-    COSCredentialProviderList credentialProviderList \u003d\n-        CosNUtils.createCosCredentialsProviderSet(conf);\n+  private void initCOSClient(URI uri, Configuration conf) throws IOException {\n+    COSCredentialsProviderList credentialProviderList \u003d\n+        CosNUtils.createCosCredentialsProviderSet(uri, conf);\n     String region \u003d conf.get(CosNConfigKeys.COSN_REGION_KEY);\n     String endpointSuffix \u003d conf.get(\n         CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n     if (null \u003d\u003d region \u0026\u0026 null \u003d\u003d endpointSuffix) {\n       String exceptionMsg \u003d String.format(\"config %s and %s at least one\",\n           CosNConfigKeys.COSN_REGION_KEY,\n           CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n       throw new IOException(exceptionMsg);\n     }\n \n     COSCredentials cosCred;\n     cosCred \u003d new BasicCOSCredentials(\n         credentialProviderList.getCredentials().getCOSAccessKeyId(),\n         credentialProviderList.getCredentials().getCOSSecretKey());\n \n     boolean useHttps \u003d conf.getBoolean(CosNConfigKeys.COSN_USE_HTTPS_KEY,\n         CosNConfigKeys.DEFAULT_USE_HTTPS);\n \n     ClientConfig config;\n     if (null \u003d\u003d region) {\n       config \u003d new ClientConfig(new Region(\"\"));\n-      config.setEndPointSuffix(endpointSuffix);\n+      config.setEndpointBuilder(new SuffixEndpointBuilder(endpointSuffix));\n     } else {\n       config \u003d new ClientConfig(new Region(region));\n     }\n     if (useHttps) {\n       config.setHttpProtocol(HttpProtocol.https);\n     }\n \n     config.setUserAgent(conf.get(CosNConfigKeys.USER_AGENT,\n         CosNConfigKeys.DEFAULT_USER_AGENT) + \" For \" + \" Hadoop \"\n         + VersionInfo.getVersion());\n \n     this.maxRetryTimes \u003d conf.getInt(CosNConfigKeys.COSN_MAX_RETRIES_KEY,\n         CosNConfigKeys.DEFAULT_MAX_RETRIES);\n \n     config.setMaxConnectionsCount(\n         conf.getInt(CosNConfigKeys.MAX_CONNECTION_NUM,\n             CosNConfigKeys.DEFAULT_MAX_CONNECTION_NUM));\n \n     this.cosClient \u003d new COSClient(cosCred, config);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initCOSClient(URI uri, Configuration conf) throws IOException {\n    COSCredentialsProviderList credentialProviderList \u003d\n        CosNUtils.createCosCredentialsProviderSet(uri, conf);\n    String region \u003d conf.get(CosNConfigKeys.COSN_REGION_KEY);\n    String endpointSuffix \u003d conf.get(\n        CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n    if (null \u003d\u003d region \u0026\u0026 null \u003d\u003d endpointSuffix) {\n      String exceptionMsg \u003d String.format(\"config %s and %s at least one\",\n          CosNConfigKeys.COSN_REGION_KEY,\n          CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n      throw new IOException(exceptionMsg);\n    }\n\n    COSCredentials cosCred;\n    cosCred \u003d new BasicCOSCredentials(\n        credentialProviderList.getCredentials().getCOSAccessKeyId(),\n        credentialProviderList.getCredentials().getCOSSecretKey());\n\n    boolean useHttps \u003d conf.getBoolean(CosNConfigKeys.COSN_USE_HTTPS_KEY,\n        CosNConfigKeys.DEFAULT_USE_HTTPS);\n\n    ClientConfig config;\n    if (null \u003d\u003d region) {\n      config \u003d new ClientConfig(new Region(\"\"));\n      config.setEndpointBuilder(new SuffixEndpointBuilder(endpointSuffix));\n    } else {\n      config \u003d new ClientConfig(new Region(region));\n    }\n    if (useHttps) {\n      config.setHttpProtocol(HttpProtocol.https);\n    }\n\n    config.setUserAgent(conf.get(CosNConfigKeys.USER_AGENT,\n        CosNConfigKeys.DEFAULT_USER_AGENT) + \" For \" + \" Hadoop \"\n        + VersionInfo.getVersion());\n\n    this.maxRetryTimes \u003d conf.getInt(CosNConfigKeys.COSN_MAX_RETRIES_KEY,\n        CosNConfigKeys.DEFAULT_MAX_RETRIES);\n\n    config.setMaxConnectionsCount(\n        conf.getInt(CosNConfigKeys.MAX_CONNECTION_NUM,\n            CosNConfigKeys.DEFAULT_MAX_CONNECTION_NUM));\n\n    this.cosClient \u003d new COSClient(cosCred, config);\n  }",
          "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[uri-URI, conf-Configuration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16959. Resolve hadoop-cos dependency conflict. Contributed by Yang Yu.\n",
          "commitDate": "20/04/20 3:14 AM",
          "commitName": "82ff7bc9abc8f3ad549db898953d98ef142ab02d",
          "commitAuthor": "Sammi Chen",
          "commitDateOld": "27/09/19 1:53 AM",
          "commitNameOld": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
          "commitAuthorOld": "Sammi Chen",
          "daysBetweenCommits": 206.06,
          "commitsBetweenForRepo": 773,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,45 @@\n-  private void initCOSClient(Configuration conf) throws IOException {\n-    COSCredentialProviderList credentialProviderList \u003d\n-        CosNUtils.createCosCredentialsProviderSet(conf);\n+  private void initCOSClient(URI uri, Configuration conf) throws IOException {\n+    COSCredentialsProviderList credentialProviderList \u003d\n+        CosNUtils.createCosCredentialsProviderSet(uri, conf);\n     String region \u003d conf.get(CosNConfigKeys.COSN_REGION_KEY);\n     String endpointSuffix \u003d conf.get(\n         CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n     if (null \u003d\u003d region \u0026\u0026 null \u003d\u003d endpointSuffix) {\n       String exceptionMsg \u003d String.format(\"config %s and %s at least one\",\n           CosNConfigKeys.COSN_REGION_KEY,\n           CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n       throw new IOException(exceptionMsg);\n     }\n \n     COSCredentials cosCred;\n     cosCred \u003d new BasicCOSCredentials(\n         credentialProviderList.getCredentials().getCOSAccessKeyId(),\n         credentialProviderList.getCredentials().getCOSSecretKey());\n \n     boolean useHttps \u003d conf.getBoolean(CosNConfigKeys.COSN_USE_HTTPS_KEY,\n         CosNConfigKeys.DEFAULT_USE_HTTPS);\n \n     ClientConfig config;\n     if (null \u003d\u003d region) {\n       config \u003d new ClientConfig(new Region(\"\"));\n-      config.setEndPointSuffix(endpointSuffix);\n+      config.setEndpointBuilder(new SuffixEndpointBuilder(endpointSuffix));\n     } else {\n       config \u003d new ClientConfig(new Region(region));\n     }\n     if (useHttps) {\n       config.setHttpProtocol(HttpProtocol.https);\n     }\n \n     config.setUserAgent(conf.get(CosNConfigKeys.USER_AGENT,\n         CosNConfigKeys.DEFAULT_USER_AGENT) + \" For \" + \" Hadoop \"\n         + VersionInfo.getVersion());\n \n     this.maxRetryTimes \u003d conf.getInt(CosNConfigKeys.COSN_MAX_RETRIES_KEY,\n         CosNConfigKeys.DEFAULT_MAX_RETRIES);\n \n     config.setMaxConnectionsCount(\n         conf.getInt(CosNConfigKeys.MAX_CONNECTION_NUM,\n             CosNConfigKeys.DEFAULT_MAX_CONNECTION_NUM));\n \n     this.cosClient \u003d new COSClient(cosCred, config);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initCOSClient(URI uri, Configuration conf) throws IOException {\n    COSCredentialsProviderList credentialProviderList \u003d\n        CosNUtils.createCosCredentialsProviderSet(uri, conf);\n    String region \u003d conf.get(CosNConfigKeys.COSN_REGION_KEY);\n    String endpointSuffix \u003d conf.get(\n        CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n    if (null \u003d\u003d region \u0026\u0026 null \u003d\u003d endpointSuffix) {\n      String exceptionMsg \u003d String.format(\"config %s and %s at least one\",\n          CosNConfigKeys.COSN_REGION_KEY,\n          CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n      throw new IOException(exceptionMsg);\n    }\n\n    COSCredentials cosCred;\n    cosCred \u003d new BasicCOSCredentials(\n        credentialProviderList.getCredentials().getCOSAccessKeyId(),\n        credentialProviderList.getCredentials().getCOSSecretKey());\n\n    boolean useHttps \u003d conf.getBoolean(CosNConfigKeys.COSN_USE_HTTPS_KEY,\n        CosNConfigKeys.DEFAULT_USE_HTTPS);\n\n    ClientConfig config;\n    if (null \u003d\u003d region) {\n      config \u003d new ClientConfig(new Region(\"\"));\n      config.setEndpointBuilder(new SuffixEndpointBuilder(endpointSuffix));\n    } else {\n      config \u003d new ClientConfig(new Region(region));\n    }\n    if (useHttps) {\n      config.setHttpProtocol(HttpProtocol.https);\n    }\n\n    config.setUserAgent(conf.get(CosNConfigKeys.USER_AGENT,\n        CosNConfigKeys.DEFAULT_USER_AGENT) + \" For \" + \" Hadoop \"\n        + VersionInfo.getVersion());\n\n    this.maxRetryTimes \u003d conf.getInt(CosNConfigKeys.COSN_MAX_RETRIES_KEY,\n        CosNConfigKeys.DEFAULT_MAX_RETRIES);\n\n    config.setMaxConnectionsCount(\n        conf.getInt(CosNConfigKeys.MAX_CONNECTION_NUM,\n            CosNConfigKeys.DEFAULT_MAX_CONNECTION_NUM));\n\n    this.cosClient \u003d new COSClient(cosCred, config);\n  }",
          "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "8a9ede5cff816b66afc37e7c9d2b33aee48795d2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15616. Incorporate Tencent Cloud COS File System Implementation. Contributed by Yang Yu.\n",
      "commitDate": "27/09/19 1:53 AM",
      "commitName": "8a9ede5cff816b66afc37e7c9d2b33aee48795d2",
      "commitAuthor": "Sammi Chen",
      "diff": "@@ -0,0 +1,45 @@\n+  private void initCOSClient(Configuration conf) throws IOException {\n+    COSCredentialProviderList credentialProviderList \u003d\n+        CosNUtils.createCosCredentialsProviderSet(conf);\n+    String region \u003d conf.get(CosNConfigKeys.COSN_REGION_KEY);\n+    String endpointSuffix \u003d conf.get(\n+        CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n+    if (null \u003d\u003d region \u0026\u0026 null \u003d\u003d endpointSuffix) {\n+      String exceptionMsg \u003d String.format(\"config %s and %s at least one\",\n+          CosNConfigKeys.COSN_REGION_KEY,\n+          CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n+      throw new IOException(exceptionMsg);\n+    }\n+\n+    COSCredentials cosCred;\n+    cosCred \u003d new BasicCOSCredentials(\n+        credentialProviderList.getCredentials().getCOSAccessKeyId(),\n+        credentialProviderList.getCredentials().getCOSSecretKey());\n+\n+    boolean useHttps \u003d conf.getBoolean(CosNConfigKeys.COSN_USE_HTTPS_KEY,\n+        CosNConfigKeys.DEFAULT_USE_HTTPS);\n+\n+    ClientConfig config;\n+    if (null \u003d\u003d region) {\n+      config \u003d new ClientConfig(new Region(\"\"));\n+      config.setEndPointSuffix(endpointSuffix);\n+    } else {\n+      config \u003d new ClientConfig(new Region(region));\n+    }\n+    if (useHttps) {\n+      config.setHttpProtocol(HttpProtocol.https);\n+    }\n+\n+    config.setUserAgent(conf.get(CosNConfigKeys.USER_AGENT,\n+        CosNConfigKeys.DEFAULT_USER_AGENT) + \" For \" + \" Hadoop \"\n+        + VersionInfo.getVersion());\n+\n+    this.maxRetryTimes \u003d conf.getInt(CosNConfigKeys.COSN_MAX_RETRIES_KEY,\n+        CosNConfigKeys.DEFAULT_MAX_RETRIES);\n+\n+    config.setMaxConnectionsCount(\n+        conf.getInt(CosNConfigKeys.MAX_CONNECTION_NUM,\n+            CosNConfigKeys.DEFAULT_MAX_CONNECTION_NUM));\n+\n+    this.cosClient \u003d new COSClient(cosCred, config);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initCOSClient(Configuration conf) throws IOException {\n    COSCredentialProviderList credentialProviderList \u003d\n        CosNUtils.createCosCredentialsProviderSet(conf);\n    String region \u003d conf.get(CosNConfigKeys.COSN_REGION_KEY);\n    String endpointSuffix \u003d conf.get(\n        CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n    if (null \u003d\u003d region \u0026\u0026 null \u003d\u003d endpointSuffix) {\n      String exceptionMsg \u003d String.format(\"config %s and %s at least one\",\n          CosNConfigKeys.COSN_REGION_KEY,\n          CosNConfigKeys.COSN_ENDPOINT_SUFFIX_KEY);\n      throw new IOException(exceptionMsg);\n    }\n\n    COSCredentials cosCred;\n    cosCred \u003d new BasicCOSCredentials(\n        credentialProviderList.getCredentials().getCOSAccessKeyId(),\n        credentialProviderList.getCredentials().getCOSSecretKey());\n\n    boolean useHttps \u003d conf.getBoolean(CosNConfigKeys.COSN_USE_HTTPS_KEY,\n        CosNConfigKeys.DEFAULT_USE_HTTPS);\n\n    ClientConfig config;\n    if (null \u003d\u003d region) {\n      config \u003d new ClientConfig(new Region(\"\"));\n      config.setEndPointSuffix(endpointSuffix);\n    } else {\n      config \u003d new ClientConfig(new Region(region));\n    }\n    if (useHttps) {\n      config.setHttpProtocol(HttpProtocol.https);\n    }\n\n    config.setUserAgent(conf.get(CosNConfigKeys.USER_AGENT,\n        CosNConfigKeys.DEFAULT_USER_AGENT) + \" For \" + \" Hadoop \"\n        + VersionInfo.getVersion());\n\n    this.maxRetryTimes \u003d conf.getInt(CosNConfigKeys.COSN_MAX_RETRIES_KEY,\n        CosNConfigKeys.DEFAULT_MAX_RETRIES);\n\n    config.setMaxConnectionsCount(\n        conf.getInt(CosNConfigKeys.MAX_CONNECTION_NUM,\n            CosNConfigKeys.DEFAULT_MAX_CONNECTION_NUM));\n\n    this.cosClient \u003d new COSClient(cosCred, config);\n  }",
      "path": "hadoop-cloud-storage-project/hadoop-cos/src/main/java/org/apache/hadoop/fs/cosn/CosNativeFileSystemStore.java"
    }
  }
}