{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DeviceResourceHandlerImpl.java",
  "functionName": "getDeviceType",
  "functionId": "getDeviceType___device-Device",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java",
  "functionStartLine": 275,
  "functionEndLine": 303,
  "numCommitsSeen": 6,
  "timeTaken": 1745,
  "changeHistory": [
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0"
  ],
  "changeHistoryShort": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "25/02/19 6:05 PM",
      "commitNameOld": "c6ea28c480940d1f95cabe3af452dce197c6669d",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 20.66,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,29 @@\n   public DeviceType getDeviceType(Device device) {\n     String devName \u003d device.getDevPath();\n     if (devName.isEmpty()) {\n       LOG.warn(\"Empty device path provided, try to get device type from \" +\n           \"major:minor device number\");\n       int major \u003d device.getMajorNumber();\n       int minor \u003d device.getMinorNumber();\n       if (major \u003d\u003d -1 \u0026\u0026 minor \u003d\u003d -1) {\n         LOG.warn(\"Non device number provided, cannot decide the device type\");\n         return null;\n       }\n       // Get type from the device numbers\n       return getDeviceTypeFromDeviceNumber(device.getMajorNumber(),\n           device.getMinorNumber());\n     }\n     DeviceType deviceType;\n     try {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Try to get device type from device path: \" + devName);\n-      }\n+      LOG.debug(\"Try to get device type from device path: {}\", devName);\n       String output \u003d shellWrapper.getDeviceFileType(devName);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"stat output:\" + output);\n-      }\n+      LOG.debug(\"stat output:{}\", output);\n       deviceType \u003d output.startsWith(\"c\") ? DeviceType.CHAR : DeviceType.BLOCK;\n     } catch (IOException e) {\n       String msg \u003d\n           \"Failed to get device type from stat \" + devName;\n       LOG.warn(msg);\n       return null;\n     }\n     return deviceType;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DeviceType getDeviceType(Device device) {\n    String devName \u003d device.getDevPath();\n    if (devName.isEmpty()) {\n      LOG.warn(\"Empty device path provided, try to get device type from \" +\n          \"major:minor device number\");\n      int major \u003d device.getMajorNumber();\n      int minor \u003d device.getMinorNumber();\n      if (major \u003d\u003d -1 \u0026\u0026 minor \u003d\u003d -1) {\n        LOG.warn(\"Non device number provided, cannot decide the device type\");\n        return null;\n      }\n      // Get type from the device numbers\n      return getDeviceTypeFromDeviceNumber(device.getMajorNumber(),\n          device.getMinorNumber());\n    }\n    DeviceType deviceType;\n    try {\n      LOG.debug(\"Try to get device type from device path: {}\", devName);\n      String output \u003d shellWrapper.getDeviceFileType(devName);\n      LOG.debug(\"stat output:{}\", output);\n      deviceType \u003d output.startsWith(\"c\") ? DeviceType.CHAR : DeviceType.BLOCK;\n    } catch (IOException e) {\n      String msg \u003d\n          \"Failed to get device type from stat \" + devName;\n      LOG.warn(msg);\n      return null;\n    }\n    return deviceType;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java",
      "extendedDetails": {}
    },
    "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9060. [YARN-8851] Phase 1 - Support device isolation and use the Nvidia GPU plugin as an example. Contributed by Zhankun Tang.\n",
      "commitDate": "18/02/19 2:28 AM",
      "commitName": "db4d1a1e2fd5931df9a866c97c581bdbc280f6e0",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,33 @@\n+  public DeviceType getDeviceType(Device device) {\n+    String devName \u003d device.getDevPath();\n+    if (devName.isEmpty()) {\n+      LOG.warn(\"Empty device path provided, try to get device type from \" +\n+          \"major:minor device number\");\n+      int major \u003d device.getMajorNumber();\n+      int minor \u003d device.getMinorNumber();\n+      if (major \u003d\u003d -1 \u0026\u0026 minor \u003d\u003d -1) {\n+        LOG.warn(\"Non device number provided, cannot decide the device type\");\n+        return null;\n+      }\n+      // Get type from the device numbers\n+      return getDeviceTypeFromDeviceNumber(device.getMajorNumber(),\n+          device.getMinorNumber());\n+    }\n+    DeviceType deviceType;\n+    try {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Try to get device type from device path: \" + devName);\n+      }\n+      String output \u003d shellWrapper.getDeviceFileType(devName);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"stat output:\" + output);\n+      }\n+      deviceType \u003d output.startsWith(\"c\") ? DeviceType.CHAR : DeviceType.BLOCK;\n+    } catch (IOException e) {\n+      String msg \u003d\n+          \"Failed to get device type from stat \" + devName;\n+      LOG.warn(msg);\n+      return null;\n+    }\n+    return deviceType;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DeviceType getDeviceType(Device device) {\n    String devName \u003d device.getDevPath();\n    if (devName.isEmpty()) {\n      LOG.warn(\"Empty device path provided, try to get device type from \" +\n          \"major:minor device number\");\n      int major \u003d device.getMajorNumber();\n      int minor \u003d device.getMinorNumber();\n      if (major \u003d\u003d -1 \u0026\u0026 minor \u003d\u003d -1) {\n        LOG.warn(\"Non device number provided, cannot decide the device type\");\n        return null;\n      }\n      // Get type from the device numbers\n      return getDeviceTypeFromDeviceNumber(device.getMajorNumber(),\n          device.getMinorNumber());\n    }\n    DeviceType deviceType;\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Try to get device type from device path: \" + devName);\n      }\n      String output \u003d shellWrapper.getDeviceFileType(devName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"stat output:\" + output);\n      }\n      deviceType \u003d output.startsWith(\"c\") ? DeviceType.CHAR : DeviceType.BLOCK;\n    } catch (IOException e) {\n      String msg \u003d\n          \"Failed to get device type from stat \" + devName;\n      LOG.warn(msg);\n      return null;\n    }\n    return deviceType;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/deviceframework/DeviceResourceHandlerImpl.java"
    }
  }
}