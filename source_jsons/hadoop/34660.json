{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "cleanUpApplicationsOnNMShutDown",
  "functionId": "cleanUpApplicationsOnNMShutDown",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 719,
  "functionEndLine": 761,
  "numCommitsSeen": 175,
  "timeTaken": 4692,
  "changeHistory": [
    "088156de43abb07bec590a3fcd1a5af2feb02cd2",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f",
    "44f7ee7192d150b43a3012f06cec67be5b64edd0",
    "d3841bd4997a77855ab2abd9cc294eae7d795a5b"
  ],
  "changeHistoryShort": {
    "088156de43abb07bec590a3fcd1a5af2feb02cd2": "Ybodychange",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": "Ybodychange",
    "44f7ee7192d150b43a3012f06cec67be5b64edd0": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "d3841bd4997a77855ab2abd9cc294eae7d795a5b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "088156de43abb07bec590a3fcd1a5af2feb02cd2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2331. Distinguish shutdown during supervision vs. shutdown for\nrolling upgrade. Contributed by Jason Lowe\n",
      "commitDate": "08/05/15 3:10 PM",
      "commitName": "088156de43abb07bec590a3fcd1a5af2feb02cd2",
      "commitAuthor": "Xuan",
      "commitDateOld": "08/05/15 9:11 AM",
      "commitNameOld": "bcf2890502fbd11dd394048fe30d67c92aeec4fa",
      "commitAuthorOld": "Robert (Bobby) Evans",
      "daysBetweenCommits": 0.25,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,44 @@\n   public void cleanUpApplicationsOnNMShutDown() {\n     Map\u003cApplicationId, Application\u003e applications \u003d\n         this.context.getApplications();\n     if (applications.isEmpty()) {\n       return;\n     }\n     LOG.info(\"Applications still running : \" + applications.keySet());\n \n     if (this.context.getNMStateStore().canRecover()\n         \u0026\u0026 !this.context.getDecommissioned()) {\n-      // do not cleanup apps as they can be recovered on restart\n-      return;\n+      if (getConfig().getBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED,\n+          YarnConfiguration.DEFAULT_NM_RECOVERY_SUPERVISED)) {\n+        // do not cleanup apps as they can be recovered on restart\n+        return;\n+      }\n     }\n \n     List\u003cApplicationId\u003e appIds \u003d\n         new ArrayList\u003cApplicationId\u003e(applications.keySet());\n     this.handle(\n         new CMgrCompletedAppsEvent(appIds,\n             CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n \n     LOG.info(\"Waiting for Applications to be Finished\");\n \n     long waitStartTime \u003d System.currentTimeMillis();\n     while (!applications.isEmpty()\n         \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException ex) {\n         LOG.warn(\n           \"Interrupted while sleeping on applications finish on shutdown\", ex);\n       }\n     }\n \n     // All applications Finished\n     if (applications.isEmpty()) {\n       LOG.info(\"All applications in FINISHED state\");\n     } else {\n       LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n           applications.keySet());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void cleanUpApplicationsOnNMShutDown() {\n    Map\u003cApplicationId, Application\u003e applications \u003d\n        this.context.getApplications();\n    if (applications.isEmpty()) {\n      return;\n    }\n    LOG.info(\"Applications still running : \" + applications.keySet());\n\n    if (this.context.getNMStateStore().canRecover()\n        \u0026\u0026 !this.context.getDecommissioned()) {\n      if (getConfig().getBoolean(YarnConfiguration.NM_RECOVERY_SUPERVISED,\n          YarnConfiguration.DEFAULT_NM_RECOVERY_SUPERVISED)) {\n        // do not cleanup apps as they can be recovered on restart\n        return;\n      }\n    }\n\n    List\u003cApplicationId\u003e appIds \u003d\n        new ArrayList\u003cApplicationId\u003e(applications.keySet());\n    this.handle(\n        new CMgrCompletedAppsEvent(appIds,\n            CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n\n    LOG.info(\"Waiting for Applications to be Finished\");\n\n    long waitStartTime \u003d System.currentTimeMillis();\n    while (!applications.isEmpty()\n        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        LOG.warn(\n          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n      }\n    }\n\n    // All applications Finished\n    if (applications.isEmpty()) {\n      LOG.info(\"All applications in FINISHED state\");\n    } else {\n      LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n          applications.keySet());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1354. Recover applications upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615550 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 6:25 AM",
      "commitName": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/08/14 4:44 PM",
      "commitNameOld": "a41c314373bf92669e35ddfcbec1114826c437e7",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.57,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,41 @@\n   public void cleanUpApplicationsOnNMShutDown() {\n     Map\u003cApplicationId, Application\u003e applications \u003d\n         this.context.getApplications();\n     if (applications.isEmpty()) {\n       return;\n     }\n     LOG.info(\"Applications still running : \" + applications.keySet());\n \n+    if (this.context.getNMStateStore().canRecover()\n+        \u0026\u0026 !this.context.getDecommissioned()) {\n+      // do not cleanup apps as they can be recovered on restart\n+      return;\n+    }\n+\n     List\u003cApplicationId\u003e appIds \u003d\n         new ArrayList\u003cApplicationId\u003e(applications.keySet());\n     this.handle(\n         new CMgrCompletedAppsEvent(appIds,\n             CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n \n     LOG.info(\"Waiting for Applications to be Finished\");\n \n     long waitStartTime \u003d System.currentTimeMillis();\n     while (!applications.isEmpty()\n         \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n       try {\n         Thread.sleep(1000);\n       } catch (InterruptedException ex) {\n         LOG.warn(\n           \"Interrupted while sleeping on applications finish on shutdown\", ex);\n       }\n     }\n \n     // All applications Finished\n     if (applications.isEmpty()) {\n       LOG.info(\"All applications in FINISHED state\");\n     } else {\n       LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n           applications.keySet());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void cleanUpApplicationsOnNMShutDown() {\n    Map\u003cApplicationId, Application\u003e applications \u003d\n        this.context.getApplications();\n    if (applications.isEmpty()) {\n      return;\n    }\n    LOG.info(\"Applications still running : \" + applications.keySet());\n\n    if (this.context.getNMStateStore().canRecover()\n        \u0026\u0026 !this.context.getDecommissioned()) {\n      // do not cleanup apps as they can be recovered on restart\n      return;\n    }\n\n    List\u003cApplicationId\u003e appIds \u003d\n        new ArrayList\u003cApplicationId\u003e(applications.keySet());\n    this.handle(\n        new CMgrCompletedAppsEvent(appIds,\n            CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n\n    LOG.info(\"Waiting for Applications to be Finished\");\n\n    long waitStartTime \u003d System.currentTimeMillis();\n    while (!applications.isEmpty()\n        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        LOG.warn(\n          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n      }\n    }\n\n    // All applications Finished\n    if (applications.isEmpty()) {\n      LOG.info(\"All applications in FINISHED state\");\n    } else {\n      LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n          applications.keySet());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "44f7ee7192d150b43a3012f06cec67be5b64edd0": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1278. Fixed NodeManager to not delete local resources for apps on resync command from RM - a bug caused by YARN-1149. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 11:32 AM",
      "commitName": "44f7ee7192d150b43a3012f06cec67be5b64edd0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1278. Fixed NodeManager to not delete local resources for apps on resync command from RM - a bug caused by YARN-1149. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529657 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/10/13 11:32 AM",
          "commitName": "44f7ee7192d150b43a3012f06cec67be5b64edd0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/10/13 5:43 PM",
          "commitNameOld": "d3841bd4997a77855ab2abd9cc294eae7d795a5b",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 2.74,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,35 @@\n-  public void cleanUpApplications(NodeManagerEventType eventType) {\n+  public void cleanUpApplicationsOnNMShutDown() {\n     Map\u003cApplicationId, Application\u003e applications \u003d\n         this.context.getApplications();\n     if (applications.isEmpty()) {\n       return;\n     }\n     LOG.info(\"Applications still running : \" + applications.keySet());\n \n     List\u003cApplicationId\u003e appIds \u003d\n         new ArrayList\u003cApplicationId\u003e(applications.keySet());\n     this.handle(\n         new CMgrCompletedAppsEvent(appIds,\n             CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n \n     LOG.info(\"Waiting for Applications to be Finished\");\n \n-    switch (eventType) {\n-      case SHUTDOWN:\n-        long waitStartTime \u003d System.currentTimeMillis();\n-        while (!applications.isEmpty()\n-            \u0026\u0026 System.currentTimeMillis() - waitStartTime\n-                \u003c waitForContainersOnShutdownMillis) {\n-          try {\n-            Thread.sleep(1000);\n-          } catch (InterruptedException ex) {\n-            LOG.warn(\"Interrupted while sleeping on applications finish on shutdown\",\n-              ex);\n-          }\n-        }\n-        break;\n-      case RESYNC:\n-        while (!applications.isEmpty()) {\n-          try {\n-            Thread.sleep(1000);\n-          } catch (InterruptedException ex) {\n-            LOG.warn(\"Interrupted while sleeping on applications finish on resync\",\n-              ex);\n-          }\n-        }\n-        break;\n-      default:\n-        throw new YarnRuntimeException(\"Get an unknown NodeManagerEventType: \"\n-            + eventType);\n+    long waitStartTime \u003d System.currentTimeMillis();\n+    while (!applications.isEmpty()\n+        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n+      try {\n+        Thread.sleep(1000);\n+      } catch (InterruptedException ex) {\n+        LOG.warn(\n+          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n+      }\n     }\n \n     // All applications Finished\n     if (applications.isEmpty()) {\n       LOG.info(\"All applications in FINISHED state\");\n     } else {\n       LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n           applications.keySet());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cleanUpApplicationsOnNMShutDown() {\n    Map\u003cApplicationId, Application\u003e applications \u003d\n        this.context.getApplications();\n    if (applications.isEmpty()) {\n      return;\n    }\n    LOG.info(\"Applications still running : \" + applications.keySet());\n\n    List\u003cApplicationId\u003e appIds \u003d\n        new ArrayList\u003cApplicationId\u003e(applications.keySet());\n    this.handle(\n        new CMgrCompletedAppsEvent(appIds,\n            CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n\n    LOG.info(\"Waiting for Applications to be Finished\");\n\n    long waitStartTime \u003d System.currentTimeMillis();\n    while (!applications.isEmpty()\n        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        LOG.warn(\n          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n      }\n    }\n\n    // All applications Finished\n    if (applications.isEmpty()) {\n      LOG.info(\"All applications in FINISHED state\");\n    } else {\n      LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n          applications.keySet());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "cleanUpApplications",
            "newValue": "cleanUpApplicationsOnNMShutDown"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1278. Fixed NodeManager to not delete local resources for apps on resync command from RM - a bug caused by YARN-1149. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529657 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/10/13 11:32 AM",
          "commitName": "44f7ee7192d150b43a3012f06cec67be5b64edd0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/10/13 5:43 PM",
          "commitNameOld": "d3841bd4997a77855ab2abd9cc294eae7d795a5b",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 2.74,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,35 @@\n-  public void cleanUpApplications(NodeManagerEventType eventType) {\n+  public void cleanUpApplicationsOnNMShutDown() {\n     Map\u003cApplicationId, Application\u003e applications \u003d\n         this.context.getApplications();\n     if (applications.isEmpty()) {\n       return;\n     }\n     LOG.info(\"Applications still running : \" + applications.keySet());\n \n     List\u003cApplicationId\u003e appIds \u003d\n         new ArrayList\u003cApplicationId\u003e(applications.keySet());\n     this.handle(\n         new CMgrCompletedAppsEvent(appIds,\n             CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n \n     LOG.info(\"Waiting for Applications to be Finished\");\n \n-    switch (eventType) {\n-      case SHUTDOWN:\n-        long waitStartTime \u003d System.currentTimeMillis();\n-        while (!applications.isEmpty()\n-            \u0026\u0026 System.currentTimeMillis() - waitStartTime\n-                \u003c waitForContainersOnShutdownMillis) {\n-          try {\n-            Thread.sleep(1000);\n-          } catch (InterruptedException ex) {\n-            LOG.warn(\"Interrupted while sleeping on applications finish on shutdown\",\n-              ex);\n-          }\n-        }\n-        break;\n-      case RESYNC:\n-        while (!applications.isEmpty()) {\n-          try {\n-            Thread.sleep(1000);\n-          } catch (InterruptedException ex) {\n-            LOG.warn(\"Interrupted while sleeping on applications finish on resync\",\n-              ex);\n-          }\n-        }\n-        break;\n-      default:\n-        throw new YarnRuntimeException(\"Get an unknown NodeManagerEventType: \"\n-            + eventType);\n+    long waitStartTime \u003d System.currentTimeMillis();\n+    while (!applications.isEmpty()\n+        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n+      try {\n+        Thread.sleep(1000);\n+      } catch (InterruptedException ex) {\n+        LOG.warn(\n+          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n+      }\n     }\n \n     // All applications Finished\n     if (applications.isEmpty()) {\n       LOG.info(\"All applications in FINISHED state\");\n     } else {\n       LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n           applications.keySet());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cleanUpApplicationsOnNMShutDown() {\n    Map\u003cApplicationId, Application\u003e applications \u003d\n        this.context.getApplications();\n    if (applications.isEmpty()) {\n      return;\n    }\n    LOG.info(\"Applications still running : \" + applications.keySet());\n\n    List\u003cApplicationId\u003e appIds \u003d\n        new ArrayList\u003cApplicationId\u003e(applications.keySet());\n    this.handle(\n        new CMgrCompletedAppsEvent(appIds,\n            CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n\n    LOG.info(\"Waiting for Applications to be Finished\");\n\n    long waitStartTime \u003d System.currentTimeMillis();\n    while (!applications.isEmpty()\n        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        LOG.warn(\n          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n      }\n    }\n\n    // All applications Finished\n    if (applications.isEmpty()) {\n      LOG.info(\"All applications in FINISHED state\");\n    } else {\n      LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n          applications.keySet());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[eventType-NodeManagerEventType]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1278. Fixed NodeManager to not delete local resources for apps on resync command from RM - a bug caused by YARN-1149. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529657 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "06/10/13 11:32 AM",
          "commitName": "44f7ee7192d150b43a3012f06cec67be5b64edd0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "03/10/13 5:43 PM",
          "commitNameOld": "d3841bd4997a77855ab2abd9cc294eae7d795a5b",
          "commitAuthorOld": "Hitesh Shah",
          "daysBetweenCommits": 2.74,
          "commitsBetweenForRepo": 23,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,35 @@\n-  public void cleanUpApplications(NodeManagerEventType eventType) {\n+  public void cleanUpApplicationsOnNMShutDown() {\n     Map\u003cApplicationId, Application\u003e applications \u003d\n         this.context.getApplications();\n     if (applications.isEmpty()) {\n       return;\n     }\n     LOG.info(\"Applications still running : \" + applications.keySet());\n \n     List\u003cApplicationId\u003e appIds \u003d\n         new ArrayList\u003cApplicationId\u003e(applications.keySet());\n     this.handle(\n         new CMgrCompletedAppsEvent(appIds,\n             CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n \n     LOG.info(\"Waiting for Applications to be Finished\");\n \n-    switch (eventType) {\n-      case SHUTDOWN:\n-        long waitStartTime \u003d System.currentTimeMillis();\n-        while (!applications.isEmpty()\n-            \u0026\u0026 System.currentTimeMillis() - waitStartTime\n-                \u003c waitForContainersOnShutdownMillis) {\n-          try {\n-            Thread.sleep(1000);\n-          } catch (InterruptedException ex) {\n-            LOG.warn(\"Interrupted while sleeping on applications finish on shutdown\",\n-              ex);\n-          }\n-        }\n-        break;\n-      case RESYNC:\n-        while (!applications.isEmpty()) {\n-          try {\n-            Thread.sleep(1000);\n-          } catch (InterruptedException ex) {\n-            LOG.warn(\"Interrupted while sleeping on applications finish on resync\",\n-              ex);\n-          }\n-        }\n-        break;\n-      default:\n-        throw new YarnRuntimeException(\"Get an unknown NodeManagerEventType: \"\n-            + eventType);\n+    long waitStartTime \u003d System.currentTimeMillis();\n+    while (!applications.isEmpty()\n+        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n+      try {\n+        Thread.sleep(1000);\n+      } catch (InterruptedException ex) {\n+        LOG.warn(\n+          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n+      }\n     }\n \n     // All applications Finished\n     if (applications.isEmpty()) {\n       LOG.info(\"All applications in FINISHED state\");\n     } else {\n       LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n           applications.keySet());\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void cleanUpApplicationsOnNMShutDown() {\n    Map\u003cApplicationId, Application\u003e applications \u003d\n        this.context.getApplications();\n    if (applications.isEmpty()) {\n      return;\n    }\n    LOG.info(\"Applications still running : \" + applications.keySet());\n\n    List\u003cApplicationId\u003e appIds \u003d\n        new ArrayList\u003cApplicationId\u003e(applications.keySet());\n    this.handle(\n        new CMgrCompletedAppsEvent(appIds,\n            CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n\n    LOG.info(\"Waiting for Applications to be Finished\");\n\n    long waitStartTime \u003d System.currentTimeMillis();\n    while (!applications.isEmpty()\n        \u0026\u0026 System.currentTimeMillis() - waitStartTime \u003c waitForContainersOnShutdownMillis) {\n      try {\n        Thread.sleep(1000);\n      } catch (InterruptedException ex) {\n        LOG.warn(\n          \"Interrupted while sleeping on applications finish on shutdown\", ex);\n      }\n    }\n\n    // All applications Finished\n    if (applications.isEmpty()) {\n      LOG.info(\"All applications in FINISHED state\");\n    } else {\n      LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n          applications.keySet());\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "d3841bd4997a77855ab2abd9cc294eae7d795a5b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1149. NM throws InvalidStateTransitonException: Invalid event: APPLICATION_LOG_HANDLING_FINISHED at RUNNING. Contributed by Xuan Gong.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 5:43 PM",
      "commitName": "d3841bd4997a77855ab2abd9cc294eae7d795a5b",
      "commitAuthor": "Hitesh Shah",
      "diff": "@@ -0,0 +1,53 @@\n+  public void cleanUpApplications(NodeManagerEventType eventType) {\n+    Map\u003cApplicationId, Application\u003e applications \u003d\n+        this.context.getApplications();\n+    if (applications.isEmpty()) {\n+      return;\n+    }\n+    LOG.info(\"Applications still running : \" + applications.keySet());\n+\n+    List\u003cApplicationId\u003e appIds \u003d\n+        new ArrayList\u003cApplicationId\u003e(applications.keySet());\n+    this.handle(\n+        new CMgrCompletedAppsEvent(appIds,\n+            CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n+\n+    LOG.info(\"Waiting for Applications to be Finished\");\n+\n+    switch (eventType) {\n+      case SHUTDOWN:\n+        long waitStartTime \u003d System.currentTimeMillis();\n+        while (!applications.isEmpty()\n+            \u0026\u0026 System.currentTimeMillis() - waitStartTime\n+                \u003c waitForContainersOnShutdownMillis) {\n+          try {\n+            Thread.sleep(1000);\n+          } catch (InterruptedException ex) {\n+            LOG.warn(\"Interrupted while sleeping on applications finish on shutdown\",\n+              ex);\n+          }\n+        }\n+        break;\n+      case RESYNC:\n+        while (!applications.isEmpty()) {\n+          try {\n+            Thread.sleep(1000);\n+          } catch (InterruptedException ex) {\n+            LOG.warn(\"Interrupted while sleeping on applications finish on resync\",\n+              ex);\n+          }\n+        }\n+        break;\n+      default:\n+        throw new YarnRuntimeException(\"Get an unknown NodeManagerEventType: \"\n+            + eventType);\n+    }\n+\n+    // All applications Finished\n+    if (applications.isEmpty()) {\n+      LOG.info(\"All applications in FINISHED state\");\n+    } else {\n+      LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n+          applications.keySet());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void cleanUpApplications(NodeManagerEventType eventType) {\n    Map\u003cApplicationId, Application\u003e applications \u003d\n        this.context.getApplications();\n    if (applications.isEmpty()) {\n      return;\n    }\n    LOG.info(\"Applications still running : \" + applications.keySet());\n\n    List\u003cApplicationId\u003e appIds \u003d\n        new ArrayList\u003cApplicationId\u003e(applications.keySet());\n    this.handle(\n        new CMgrCompletedAppsEvent(appIds,\n            CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN));\n\n    LOG.info(\"Waiting for Applications to be Finished\");\n\n    switch (eventType) {\n      case SHUTDOWN:\n        long waitStartTime \u003d System.currentTimeMillis();\n        while (!applications.isEmpty()\n            \u0026\u0026 System.currentTimeMillis() - waitStartTime\n                \u003c waitForContainersOnShutdownMillis) {\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ex) {\n            LOG.warn(\"Interrupted while sleeping on applications finish on shutdown\",\n              ex);\n          }\n        }\n        break;\n      case RESYNC:\n        while (!applications.isEmpty()) {\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ex) {\n            LOG.warn(\"Interrupted while sleeping on applications finish on resync\",\n              ex);\n          }\n        }\n        break;\n      default:\n        throw new YarnRuntimeException(\"Get an unknown NodeManagerEventType: \"\n            + eventType);\n    }\n\n    // All applications Finished\n    if (applications.isEmpty()) {\n      LOG.info(\"All applications in FINISHED state\");\n    } else {\n      LOG.info(\"Done waiting for Applications to be Finished. Still alive: \" +\n          applications.keySet());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}