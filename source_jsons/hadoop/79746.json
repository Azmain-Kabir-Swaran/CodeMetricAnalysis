{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TrashPolicyDefault.java",
  "functionName": "deleteCheckpoint",
  "functionId": "deleteCheckpoint___trashRoot-Path__deleteImmediately-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
  "functionStartLine": 353,
  "functionEndLine": 389,
  "numCommitsSeen": 56,
  "timeTaken": 2423,
  "changeHistory": [
    "686c0141eff0886c285b8e52fddade43c1ce4570",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf"
  ],
  "changeHistoryShort": {
    "686c0141eff0886c285b8e52fddade43c1ce4570": "Ymultichange(Yparameterchange,Ybodychange)",
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "686c0141eff0886c285b8e52fddade43c1ce4570": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-16140. hadoop fs expunge to add -immediate option to purge trash immediately.\n\nContributed by Stephen O\u0027Donnell.\n\nSigned-off-by: Steve Loughran \u003cstevel@apache.org\u003e\n",
      "commitDate": "05/03/19 6:09 AM",
      "commitName": "686c0141eff0886c285b8e52fddade43c1ce4570",
      "commitAuthor": "Stephen O\u0027Donnell",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-16140. hadoop fs expunge to add -immediate option to purge trash immediately.\n\nContributed by Stephen O\u0027Donnell.\n\nSigned-off-by: Steve Loughran \u003cstevel@apache.org\u003e\n",
          "commitDate": "05/03/19 6:09 AM",
          "commitName": "686c0141eff0886c285b8e52fddade43c1ce4570",
          "commitAuthor": "Stephen O\u0027Donnell",
          "commitDateOld": "19/09/18 9:01 PM",
          "commitNameOld": "7ad27e97f05b13b33fdcef9cb63ace9c1728bfb5",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 166.42,
          "commitsBetweenForRepo": 1257,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n-  private void deleteCheckpoint(Path trashRoot) throws IOException {\n+  private void deleteCheckpoint(Path trashRoot, boolean deleteImmediately)\n+      throws IOException {\n     LOG.info(\"TrashPolicyDefault#deleteCheckpoint for trashRoot: \" + trashRoot);\n \n     FileStatus[] dirs \u003d null;\n     try {\n       dirs \u003d fs.listStatus(trashRoot); // scan trash sub-directories\n     } catch (FileNotFoundException fnfe) {\n       return;\n     }\n \n     long now \u003d Time.now();\n     for (int i \u003d 0; i \u003c dirs.length; i++) {\n       Path path \u003d dirs[i].getPath();\n       String dir \u003d path.toUri().getPath();\n       String name \u003d path.getName();\n       if (name.equals(CURRENT.getName())) {         // skip current\n         continue;\n       }\n \n       long time;\n       try {\n         time \u003d getTimeFromCheckpoint(name);\n       } catch (ParseException e) {\n         LOG.warn(\"Unexpected item in trash: \"+dir+\". Ignoring.\");\n         continue;\n       }\n \n-      if ((now - deletionInterval) \u003e time) {\n+      if (((now - deletionInterval) \u003e time) || deleteImmediately) {\n         if (fs.delete(path, true)) {\n           LOG.info(\"Deleted trash checkpoint: \"+dir);\n         } else {\n           LOG.warn(\"Couldn\u0027t delete checkpoint: \" + dir + \" Ignoring.\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void deleteCheckpoint(Path trashRoot, boolean deleteImmediately)\n      throws IOException {\n    LOG.info(\"TrashPolicyDefault#deleteCheckpoint for trashRoot: \" + trashRoot);\n\n    FileStatus[] dirs \u003d null;\n    try {\n      dirs \u003d fs.listStatus(trashRoot); // scan trash sub-directories\n    } catch (FileNotFoundException fnfe) {\n      return;\n    }\n\n    long now \u003d Time.now();\n    for (int i \u003d 0; i \u003c dirs.length; i++) {\n      Path path \u003d dirs[i].getPath();\n      String dir \u003d path.toUri().getPath();\n      String name \u003d path.getName();\n      if (name.equals(CURRENT.getName())) {         // skip current\n        continue;\n      }\n\n      long time;\n      try {\n        time \u003d getTimeFromCheckpoint(name);\n      } catch (ParseException e) {\n        LOG.warn(\"Unexpected item in trash: \"+dir+\". Ignoring.\");\n        continue;\n      }\n\n      if (((now - deletionInterval) \u003e time) || deleteImmediately) {\n        if (fs.delete(path, true)) {\n          LOG.info(\"Deleted trash checkpoint: \"+dir);\n        } else {\n          LOG.warn(\"Couldn\u0027t delete checkpoint: \" + dir + \" Ignoring.\");\n        }\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
          "extendedDetails": {
            "oldValue": "[trashRoot-Path]",
            "newValue": "[trashRoot-Path, deleteImmediately-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-16140. hadoop fs expunge to add -immediate option to purge trash immediately.\n\nContributed by Stephen O\u0027Donnell.\n\nSigned-off-by: Steve Loughran \u003cstevel@apache.org\u003e\n",
          "commitDate": "05/03/19 6:09 AM",
          "commitName": "686c0141eff0886c285b8e52fddade43c1ce4570",
          "commitAuthor": "Stephen O\u0027Donnell",
          "commitDateOld": "19/09/18 9:01 PM",
          "commitNameOld": "7ad27e97f05b13b33fdcef9cb63ace9c1728bfb5",
          "commitAuthorOld": "Vinayakumar B",
          "daysBetweenCommits": 166.42,
          "commitsBetweenForRepo": 1257,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n-  private void deleteCheckpoint(Path trashRoot) throws IOException {\n+  private void deleteCheckpoint(Path trashRoot, boolean deleteImmediately)\n+      throws IOException {\n     LOG.info(\"TrashPolicyDefault#deleteCheckpoint for trashRoot: \" + trashRoot);\n \n     FileStatus[] dirs \u003d null;\n     try {\n       dirs \u003d fs.listStatus(trashRoot); // scan trash sub-directories\n     } catch (FileNotFoundException fnfe) {\n       return;\n     }\n \n     long now \u003d Time.now();\n     for (int i \u003d 0; i \u003c dirs.length; i++) {\n       Path path \u003d dirs[i].getPath();\n       String dir \u003d path.toUri().getPath();\n       String name \u003d path.getName();\n       if (name.equals(CURRENT.getName())) {         // skip current\n         continue;\n       }\n \n       long time;\n       try {\n         time \u003d getTimeFromCheckpoint(name);\n       } catch (ParseException e) {\n         LOG.warn(\"Unexpected item in trash: \"+dir+\". Ignoring.\");\n         continue;\n       }\n \n-      if ((now - deletionInterval) \u003e time) {\n+      if (((now - deletionInterval) \u003e time) || deleteImmediately) {\n         if (fs.delete(path, true)) {\n           LOG.info(\"Deleted trash checkpoint: \"+dir);\n         } else {\n           LOG.warn(\"Couldn\u0027t delete checkpoint: \" + dir + \" Ignoring.\");\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void deleteCheckpoint(Path trashRoot, boolean deleteImmediately)\n      throws IOException {\n    LOG.info(\"TrashPolicyDefault#deleteCheckpoint for trashRoot: \" + trashRoot);\n\n    FileStatus[] dirs \u003d null;\n    try {\n      dirs \u003d fs.listStatus(trashRoot); // scan trash sub-directories\n    } catch (FileNotFoundException fnfe) {\n      return;\n    }\n\n    long now \u003d Time.now();\n    for (int i \u003d 0; i \u003c dirs.length; i++) {\n      Path path \u003d dirs[i].getPath();\n      String dir \u003d path.toUri().getPath();\n      String name \u003d path.getName();\n      if (name.equals(CURRENT.getName())) {         // skip current\n        continue;\n      }\n\n      long time;\n      try {\n        time \u003d getTimeFromCheckpoint(name);\n      } catch (ParseException e) {\n        LOG.warn(\"Unexpected item in trash: \"+dir+\". Ignoring.\");\n        continue;\n      }\n\n      if (((now - deletionInterval) \u003e time) || deleteImmediately) {\n        if (fs.delete(path, true)) {\n          LOG.info(\"Deleted trash checkpoint: \"+dir);\n        } else {\n          LOG.warn(\"Couldn\u0027t delete checkpoint: \" + dir + \" Ignoring.\");\n        }\n      }\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java",
          "extendedDetails": {}
        }
      ]
    },
    "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8831. Trash Support for deletion in HDFS encryption zone. Contributed by Xiaoyu Yao.\n",
      "commitDate": "04/12/15 10:39 AM",
      "commitName": "cbc7b6bf97a80c39d4bbb3005e42dacae6726baf",
      "commitAuthor": "Xiaoyu Yao",
      "diff": "@@ -0,0 +1,36 @@\n+  private void deleteCheckpoint(Path trashRoot) throws IOException {\n+    LOG.info(\"TrashPolicyDefault#deleteCheckpoint for trashRoot: \" + trashRoot);\n+\n+    FileStatus[] dirs \u003d null;\n+    try {\n+      dirs \u003d fs.listStatus(trashRoot); // scan trash sub-directories\n+    } catch (FileNotFoundException fnfe) {\n+      return;\n+    }\n+\n+    long now \u003d Time.now();\n+    for (int i \u003d 0; i \u003c dirs.length; i++) {\n+      Path path \u003d dirs[i].getPath();\n+      String dir \u003d path.toUri().getPath();\n+      String name \u003d path.getName();\n+      if (name.equals(CURRENT.getName())) {         // skip current\n+        continue;\n+      }\n+\n+      long time;\n+      try {\n+        time \u003d getTimeFromCheckpoint(name);\n+      } catch (ParseException e) {\n+        LOG.warn(\"Unexpected item in trash: \"+dir+\". Ignoring.\");\n+        continue;\n+      }\n+\n+      if ((now - deletionInterval) \u003e time) {\n+        if (fs.delete(path, true)) {\n+          LOG.info(\"Deleted trash checkpoint: \"+dir);\n+        } else {\n+          LOG.warn(\"Couldn\u0027t delete checkpoint: \" + dir + \" Ignoring.\");\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void deleteCheckpoint(Path trashRoot) throws IOException {\n    LOG.info(\"TrashPolicyDefault#deleteCheckpoint for trashRoot: \" + trashRoot);\n\n    FileStatus[] dirs \u003d null;\n    try {\n      dirs \u003d fs.listStatus(trashRoot); // scan trash sub-directories\n    } catch (FileNotFoundException fnfe) {\n      return;\n    }\n\n    long now \u003d Time.now();\n    for (int i \u003d 0; i \u003c dirs.length; i++) {\n      Path path \u003d dirs[i].getPath();\n      String dir \u003d path.toUri().getPath();\n      String name \u003d path.getName();\n      if (name.equals(CURRENT.getName())) {         // skip current\n        continue;\n      }\n\n      long time;\n      try {\n        time \u003d getTimeFromCheckpoint(name);\n      } catch (ParseException e) {\n        LOG.warn(\"Unexpected item in trash: \"+dir+\". Ignoring.\");\n        continue;\n      }\n\n      if ((now - deletionInterval) \u003e time) {\n        if (fs.delete(path, true)) {\n          LOG.info(\"Deleted trash checkpoint: \"+dir);\n        } else {\n          LOG.warn(\"Couldn\u0027t delete checkpoint: \" + dir + \" Ignoring.\");\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/TrashPolicyDefault.java"
    }
  }
}