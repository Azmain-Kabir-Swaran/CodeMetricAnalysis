{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskAttemptImpl.java",
  "functionName": "updateMillisCounters",
  "functionId": "updateMillisCounters___jce-JobCounterUpdateEvent__taskAttempt-TaskAttemptImpl",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
  "functionStartLine": 1608,
  "functionEndLine": 1642,
  "numCommitsSeen": 108,
  "timeTaken": 2432,
  "changeHistory": [
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "3be1ab485f557c8a3c6a5066453f24d8d61f30be",
    "2a20fe8370c83c7472632871a396811b1e4d4463"
  ],
  "changeHistoryShort": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "3be1ab485f557c8a3c6a5066453f24d8d61f30be": "Ybodychange",
    "2a20fe8370c83c7472632871a396811b1e4d4463": "Yintroduced"
  },
  "changeHistoryDetails": {
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "14/04/16 11:00 AM",
      "commitNameOld": "8b2880c0b62102fc5c8b6962752f72cb2c416a01",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 44.91,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private static void updateMillisCounters(JobCounterUpdateEvent jce,\n       TaskAttemptImpl taskAttempt) {\n     // if container/resource if not allocated, do not update\n     if (null \u003d\u003d taskAttempt.container ||\n         null \u003d\u003d taskAttempt.container.getResource()) {\n       return;\n     }\n     long duration \u003d (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());\n     Resource allocatedResource \u003d taskAttempt.container.getResource();\n-    int mbAllocated \u003d allocatedResource.getMemory();\n+    int mbAllocated \u003d (int) allocatedResource.getMemorySize();\n     int vcoresAllocated \u003d allocatedResource.getVirtualCores();\n     int minSlotMemSize \u003d taskAttempt.conf.getInt(\n         YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n         YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n     int simSlotsAllocated \u003d minSlotMemSize \u003d\u003d 0 ? 0 :\n         (int) Math.ceil((float) mbAllocated / minSlotMemSize);\n \n     TaskType taskType \u003d taskAttempt.getID().getTaskId().getTaskType();\n     if (taskType \u003d\u003d TaskType.MAP) {\n       jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS,\n           simSlotsAllocated * duration);\n       jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbAllocated);\n       jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS,\n           duration * vcoresAllocated);\n       jce.addCounterUpdate(JobCounter.MILLIS_MAPS, duration);\n     } else {\n       jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES,\n           simSlotsAllocated * duration);\n       jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES,\n           duration * mbAllocated);\n       jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES,\n           duration * vcoresAllocated);\n       jce.addCounterUpdate(JobCounter.MILLIS_REDUCES, duration);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateMillisCounters(JobCounterUpdateEvent jce,\n      TaskAttemptImpl taskAttempt) {\n    // if container/resource if not allocated, do not update\n    if (null \u003d\u003d taskAttempt.container ||\n        null \u003d\u003d taskAttempt.container.getResource()) {\n      return;\n    }\n    long duration \u003d (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());\n    Resource allocatedResource \u003d taskAttempt.container.getResource();\n    int mbAllocated \u003d (int) allocatedResource.getMemorySize();\n    int vcoresAllocated \u003d allocatedResource.getVirtualCores();\n    int minSlotMemSize \u003d taskAttempt.conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int simSlotsAllocated \u003d minSlotMemSize \u003d\u003d 0 ? 0 :\n        (int) Math.ceil((float) mbAllocated / minSlotMemSize);\n\n    TaskType taskType \u003d taskAttempt.getID().getTaskId().getTaskType();\n    if (taskType \u003d\u003d TaskType.MAP) {\n      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS,\n          simSlotsAllocated * duration);\n      jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbAllocated);\n      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS,\n          duration * vcoresAllocated);\n      jce.addCounterUpdate(JobCounter.MILLIS_MAPS, duration);\n    } else {\n      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES,\n          simSlotsAllocated * duration);\n      jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES,\n          duration * mbAllocated);\n      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES,\n          duration * vcoresAllocated);\n      jce.addCounterUpdate(JobCounter.MILLIS_REDUCES, duration);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "3be1ab485f557c8a3c6a5066453f24d8d61f30be": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6647. MR usage counters use the resources requested instead of the resources allocated (haibochen via rkanter)\n",
      "commitDate": "06/04/16 5:15 PM",
      "commitName": "3be1ab485f557c8a3c6a5066453f24d8d61f30be",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "28/12/15 11:03 AM",
      "commitNameOld": "32b3dc11eba8f2d8f22ca502bf30d6aa8839460e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 100.22,
      "commitsBetweenForRepo": 641,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,35 @@\n   private static void updateMillisCounters(JobCounterUpdateEvent jce,\n       TaskAttemptImpl taskAttempt) {\n-    TaskType taskType \u003d taskAttempt.getID().getTaskId().getTaskType();\n+    // if container/resource if not allocated, do not update\n+    if (null \u003d\u003d taskAttempt.container ||\n+        null \u003d\u003d taskAttempt.container.getResource()) {\n+      return;\n+    }\n     long duration \u003d (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());\n-    int mbRequired \u003d\n-        taskAttempt.getMemoryRequired(taskAttempt.conf, taskType);\n-    int vcoresRequired \u003d taskAttempt.getCpuRequired(taskAttempt.conf, taskType);\n-\n+    Resource allocatedResource \u003d taskAttempt.container.getResource();\n+    int mbAllocated \u003d allocatedResource.getMemory();\n+    int vcoresAllocated \u003d allocatedResource.getVirtualCores();\n     int minSlotMemSize \u003d taskAttempt.conf.getInt(\n-      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n-      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n+        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n+    int simSlotsAllocated \u003d minSlotMemSize \u003d\u003d 0 ? 0 :\n+        (int) Math.ceil((float) mbAllocated / minSlotMemSize);\n \n-    int simSlotsRequired \u003d\n-        minSlotMemSize \u003d\u003d 0 ? 0 : (int) Math.ceil((float) mbRequired\n-            / minSlotMemSize);\n-\n+    TaskType taskType \u003d taskAttempt.getID().getTaskId().getTaskType();\n     if (taskType \u003d\u003d TaskType.MAP) {\n-      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS, simSlotsRequired * duration);\n-      jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbRequired);\n-      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS, duration * vcoresRequired);\n+      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS,\n+          simSlotsAllocated * duration);\n+      jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbAllocated);\n+      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS,\n+          duration * vcoresAllocated);\n       jce.addCounterUpdate(JobCounter.MILLIS_MAPS, duration);\n     } else {\n-      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES, simSlotsRequired * duration);\n-      jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES, duration * mbRequired);\n-      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES, duration * vcoresRequired);\n+      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES,\n+          simSlotsAllocated * duration);\n+      jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES,\n+          duration * mbAllocated);\n+      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES,\n+          duration * vcoresAllocated);\n       jce.addCounterUpdate(JobCounter.MILLIS_REDUCES, duration);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateMillisCounters(JobCounterUpdateEvent jce,\n      TaskAttemptImpl taskAttempt) {\n    // if container/resource if not allocated, do not update\n    if (null \u003d\u003d taskAttempt.container ||\n        null \u003d\u003d taskAttempt.container.getResource()) {\n      return;\n    }\n    long duration \u003d (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());\n    Resource allocatedResource \u003d taskAttempt.container.getResource();\n    int mbAllocated \u003d allocatedResource.getMemory();\n    int vcoresAllocated \u003d allocatedResource.getVirtualCores();\n    int minSlotMemSize \u003d taskAttempt.conf.getInt(\n        YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n        YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n    int simSlotsAllocated \u003d minSlotMemSize \u003d\u003d 0 ? 0 :\n        (int) Math.ceil((float) mbAllocated / minSlotMemSize);\n\n    TaskType taskType \u003d taskAttempt.getID().getTaskId().getTaskType();\n    if (taskType \u003d\u003d TaskType.MAP) {\n      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS,\n          simSlotsAllocated * duration);\n      jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbAllocated);\n      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS,\n          duration * vcoresAllocated);\n      jce.addCounterUpdate(JobCounter.MILLIS_MAPS, duration);\n    } else {\n      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES,\n          simSlotsAllocated * duration);\n      jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES,\n          duration * mbAllocated);\n      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES,\n          duration * vcoresAllocated);\n      jce.addCounterUpdate(JobCounter.MILLIS_REDUCES, duration);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "2a20fe8370c83c7472632871a396811b1e4d4463": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5464. Add analogs of the SLOTS_MILLIS counters that jive with the YARN resource model (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1562216 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/01/14 12:15 PM",
      "commitName": "2a20fe8370c83c7472632871a396811b1e4d4463",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,28 @@\n+  private static void updateMillisCounters(JobCounterUpdateEvent jce,\n+      TaskAttemptImpl taskAttempt) {\n+    TaskType taskType \u003d taskAttempt.getID().getTaskId().getTaskType();\n+    long duration \u003d (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());\n+    int mbRequired \u003d\n+        taskAttempt.getMemoryRequired(taskAttempt.conf, taskType);\n+    int vcoresRequired \u003d taskAttempt.getCpuRequired(taskAttempt.conf, taskType);\n+\n+    int minSlotMemSize \u003d taskAttempt.conf.getInt(\n+      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n+      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n+\n+    int simSlotsRequired \u003d\n+        minSlotMemSize \u003d\u003d 0 ? 0 : (int) Math.ceil((float) mbRequired\n+            / minSlotMemSize);\n+\n+    if (taskType \u003d\u003d TaskType.MAP) {\n+      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS, simSlotsRequired * duration);\n+      jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbRequired);\n+      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS, duration * vcoresRequired);\n+      jce.addCounterUpdate(JobCounter.MILLIS_MAPS, duration);\n+    } else {\n+      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES, simSlotsRequired * duration);\n+      jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES, duration * mbRequired);\n+      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES, duration * vcoresRequired);\n+      jce.addCounterUpdate(JobCounter.MILLIS_REDUCES, duration);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void updateMillisCounters(JobCounterUpdateEvent jce,\n      TaskAttemptImpl taskAttempt) {\n    TaskType taskType \u003d taskAttempt.getID().getTaskId().getTaskType();\n    long duration \u003d (taskAttempt.getFinishTime() - taskAttempt.getLaunchTime());\n    int mbRequired \u003d\n        taskAttempt.getMemoryRequired(taskAttempt.conf, taskType);\n    int vcoresRequired \u003d taskAttempt.getCpuRequired(taskAttempt.conf, taskType);\n\n    int minSlotMemSize \u003d taskAttempt.conf.getInt(\n      YarnConfiguration.RM_SCHEDULER_MINIMUM_ALLOCATION_MB,\n      YarnConfiguration.DEFAULT_RM_SCHEDULER_MINIMUM_ALLOCATION_MB);\n\n    int simSlotsRequired \u003d\n        minSlotMemSize \u003d\u003d 0 ? 0 : (int) Math.ceil((float) mbRequired\n            / minSlotMemSize);\n\n    if (taskType \u003d\u003d TaskType.MAP) {\n      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_MAPS, simSlotsRequired * duration);\n      jce.addCounterUpdate(JobCounter.MB_MILLIS_MAPS, duration * mbRequired);\n      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_MAPS, duration * vcoresRequired);\n      jce.addCounterUpdate(JobCounter.MILLIS_MAPS, duration);\n    } else {\n      jce.addCounterUpdate(JobCounter.SLOTS_MILLIS_REDUCES, simSlotsRequired * duration);\n      jce.addCounterUpdate(JobCounter.MB_MILLIS_REDUCES, duration * mbRequired);\n      jce.addCounterUpdate(JobCounter.VCORES_MILLIS_REDUCES, duration * vcoresRequired);\n      jce.addCounterUpdate(JobCounter.MILLIS_REDUCES, duration);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java"
    }
  }
}