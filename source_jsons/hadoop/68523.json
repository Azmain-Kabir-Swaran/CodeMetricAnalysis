{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Utils.java",
  "functionName": "fromBinaryString",
  "functionId": "fromBinaryString___din-DataInput(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/record/Utils.java",
  "functionStartLine": 360,
  "functionEndLine": 401,
  "numCommitsSeen": 9,
  "timeTaken": 1025,
  "changeHistory": [
    "8ca32df08e5021d144ebfa8b85da7879143c01ae",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "8ca32df08e5021d144ebfa8b85da7879143c01ae": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8ca32df08e5021d144ebfa8b85da7879143c01ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-10474. Move o.a.h.record to hadoop-streaming. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1585886 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/04/14 9:02 PM",
      "commitName": "8ca32df08e5021d144ebfa8b85da7879143c01ae",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "08/04/14 3:11 PM",
      "commitNameOld": "6c2a0ce30b8bc54998ec40551bc14f478a353e10",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static String fromBinaryString(final DataInput din) throws IOException {\n    final int utf8Len \u003d readVInt(din);\n    final byte[] bytes \u003d new byte[utf8Len];\n    din.readFully(bytes);\n    int len \u003d 0;\n    // For the most commmon case, i.e. ascii, numChars \u003d utf8Len\n    StringBuilder sb \u003d new StringBuilder(utf8Len);\n    while(len \u003c utf8Len) {\n      int cpt \u003d 0;\n      final int b1 \u003d bytes[len++] \u0026 0xFF;\n      if (b1 \u003c\u003d 0x7F) {\n        cpt \u003d b1;\n      } else if ((b1 \u0026 B11111) \u003d\u003d B11110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        int b4 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b4);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3, b4);\n      } else if ((b1 \u0026 B1111) \u003d\u003d B1110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3);\n      } else if ((b1 \u0026 B111) \u003d\u003d B110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        cpt \u003d utf8ToCodePoint(b1, b2);\n      } else {\n        throw new IOException(\"Invalid UTF-8 byte \"+Integer.toHexString(b1)+\n                              \" at offset \"+(len-1)+\" in length of \"+utf8Len);\n      }\n      if (!isValidCodePoint(cpt)) {\n        throw new IOException(\"Illegal Unicode Codepoint \"+\n                              Integer.toHexString(cpt)+\" in stream.\");\n      }\n      sb.appendCodePoint(cpt);\n    }\n    return sb.toString();\n  }",
      "path": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/record/Utils.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/record/Utils.java",
        "newPath": "hadoop-tools/hadoop-streaming/src/main/java/org/apache/hadoop/record/Utils.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static String fromBinaryString(final DataInput din) throws IOException {\n    final int utf8Len \u003d readVInt(din);\n    final byte[] bytes \u003d new byte[utf8Len];\n    din.readFully(bytes);\n    int len \u003d 0;\n    // For the most commmon case, i.e. ascii, numChars \u003d utf8Len\n    StringBuilder sb \u003d new StringBuilder(utf8Len);\n    while(len \u003c utf8Len) {\n      int cpt \u003d 0;\n      final int b1 \u003d bytes[len++] \u0026 0xFF;\n      if (b1 \u003c\u003d 0x7F) {\n        cpt \u003d b1;\n      } else if ((b1 \u0026 B11111) \u003d\u003d B11110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        int b4 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b4);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3, b4);\n      } else if ((b1 \u0026 B1111) \u003d\u003d B1110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3);\n      } else if ((b1 \u0026 B111) \u003d\u003d B110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        cpt \u003d utf8ToCodePoint(b1, b2);\n      } else {\n        throw new IOException(\"Invalid UTF-8 byte \"+Integer.toHexString(b1)+\n                              \" at offset \"+(len-1)+\" in length of \"+utf8Len);\n      }\n      if (!isValidCodePoint(cpt)) {\n        throw new IOException(\"Illegal Unicode Codepoint \"+\n                              Integer.toHexString(cpt)+\" in stream.\");\n      }\n      sb.appendCodePoint(cpt);\n    }\n    return sb.toString();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/record/Utils.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/record/Utils.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/record/Utils.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static String fromBinaryString(final DataInput din) throws IOException {\n    final int utf8Len \u003d readVInt(din);\n    final byte[] bytes \u003d new byte[utf8Len];\n    din.readFully(bytes);\n    int len \u003d 0;\n    // For the most commmon case, i.e. ascii, numChars \u003d utf8Len\n    StringBuilder sb \u003d new StringBuilder(utf8Len);\n    while(len \u003c utf8Len) {\n      int cpt \u003d 0;\n      final int b1 \u003d bytes[len++] \u0026 0xFF;\n      if (b1 \u003c\u003d 0x7F) {\n        cpt \u003d b1;\n      } else if ((b1 \u0026 B11111) \u003d\u003d B11110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        int b4 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b4);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3, b4);\n      } else if ((b1 \u0026 B1111) \u003d\u003d B1110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3);\n      } else if ((b1 \u0026 B111) \u003d\u003d B110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        cpt \u003d utf8ToCodePoint(b1, b2);\n      } else {\n        throw new IOException(\"Invalid UTF-8 byte \"+Integer.toHexString(b1)+\n                              \" at offset \"+(len-1)+\" in length of \"+utf8Len);\n      }\n      if (!isValidCodePoint(cpt)) {\n        throw new IOException(\"Illegal Unicode Codepoint \"+\n                              Integer.toHexString(cpt)+\" in stream.\");\n      }\n      sb.appendCodePoint(cpt);\n    }\n    return sb.toString();\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/record/Utils.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/record/Utils.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/record/Utils.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  static String fromBinaryString(final DataInput din) throws IOException {\n    final int utf8Len \u003d readVInt(din);\n    final byte[] bytes \u003d new byte[utf8Len];\n    din.readFully(bytes);\n    int len \u003d 0;\n    // For the most commmon case, i.e. ascii, numChars \u003d utf8Len\n    StringBuilder sb \u003d new StringBuilder(utf8Len);\n    while(len \u003c utf8Len) {\n      int cpt \u003d 0;\n      final int b1 \u003d bytes[len++] \u0026 0xFF;\n      if (b1 \u003c\u003d 0x7F) {\n        cpt \u003d b1;\n      } else if ((b1 \u0026 B11111) \u003d\u003d B11110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        int b4 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b4);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3, b4);\n      } else if ((b1 \u0026 B1111) \u003d\u003d B1110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3);\n      } else if ((b1 \u0026 B111) \u003d\u003d B110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        cpt \u003d utf8ToCodePoint(b1, b2);\n      } else {\n        throw new IOException(\"Invalid UTF-8 byte \"+Integer.toHexString(b1)+\n                              \" at offset \"+(len-1)+\" in length of \"+utf8Len);\n      }\n      if (!isValidCodePoint(cpt)) {\n        throw new IOException(\"Illegal Unicode Codepoint \"+\n                              Integer.toHexString(cpt)+\" in stream.\");\n      }\n      sb.appendCodePoint(cpt);\n    }\n    return sb.toString();\n  }",
      "path": "common/src/java/org/apache/hadoop/record/Utils.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/record/Utils.java",
        "newPath": "common/src/java/org/apache/hadoop/record/Utils.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,42 @@\n+  static String fromBinaryString(final DataInput din) throws IOException {\n+    final int utf8Len \u003d readVInt(din);\n+    final byte[] bytes \u003d new byte[utf8Len];\n+    din.readFully(bytes);\n+    int len \u003d 0;\n+    // For the most commmon case, i.e. ascii, numChars \u003d utf8Len\n+    StringBuilder sb \u003d new StringBuilder(utf8Len);\n+    while(len \u003c utf8Len) {\n+      int cpt \u003d 0;\n+      final int b1 \u003d bytes[len++] \u0026 0xFF;\n+      if (b1 \u003c\u003d 0x7F) {\n+        cpt \u003d b1;\n+      } else if ((b1 \u0026 B11111) \u003d\u003d B11110) {\n+        int b2 \u003d bytes[len++] \u0026 0xFF;\n+        checkB10(b2);\n+        int b3 \u003d bytes[len++] \u0026 0xFF;\n+        checkB10(b3);\n+        int b4 \u003d bytes[len++] \u0026 0xFF;\n+        checkB10(b4);\n+        cpt \u003d utf8ToCodePoint(b1, b2, b3, b4);\n+      } else if ((b1 \u0026 B1111) \u003d\u003d B1110) {\n+        int b2 \u003d bytes[len++] \u0026 0xFF;\n+        checkB10(b2);\n+        int b3 \u003d bytes[len++] \u0026 0xFF;\n+        checkB10(b3);\n+        cpt \u003d utf8ToCodePoint(b1, b2, b3);\n+      } else if ((b1 \u0026 B111) \u003d\u003d B110) {\n+        int b2 \u003d bytes[len++] \u0026 0xFF;\n+        checkB10(b2);\n+        cpt \u003d utf8ToCodePoint(b1, b2);\n+      } else {\n+        throw new IOException(\"Invalid UTF-8 byte \"+Integer.toHexString(b1)+\n+                              \" at offset \"+(len-1)+\" in length of \"+utf8Len);\n+      }\n+      if (!isValidCodePoint(cpt)) {\n+        throw new IOException(\"Illegal Unicode Codepoint \"+\n+                              Integer.toHexString(cpt)+\" in stream.\");\n+      }\n+      sb.appendCodePoint(cpt);\n+    }\n+    return sb.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static String fromBinaryString(final DataInput din) throws IOException {\n    final int utf8Len \u003d readVInt(din);\n    final byte[] bytes \u003d new byte[utf8Len];\n    din.readFully(bytes);\n    int len \u003d 0;\n    // For the most commmon case, i.e. ascii, numChars \u003d utf8Len\n    StringBuilder sb \u003d new StringBuilder(utf8Len);\n    while(len \u003c utf8Len) {\n      int cpt \u003d 0;\n      final int b1 \u003d bytes[len++] \u0026 0xFF;\n      if (b1 \u003c\u003d 0x7F) {\n        cpt \u003d b1;\n      } else if ((b1 \u0026 B11111) \u003d\u003d B11110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        int b4 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b4);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3, b4);\n      } else if ((b1 \u0026 B1111) \u003d\u003d B1110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        int b3 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b3);\n        cpt \u003d utf8ToCodePoint(b1, b2, b3);\n      } else if ((b1 \u0026 B111) \u003d\u003d B110) {\n        int b2 \u003d bytes[len++] \u0026 0xFF;\n        checkB10(b2);\n        cpt \u003d utf8ToCodePoint(b1, b2);\n      } else {\n        throw new IOException(\"Invalid UTF-8 byte \"+Integer.toHexString(b1)+\n                              \" at offset \"+(len-1)+\" in length of \"+utf8Len);\n      }\n      if (!isValidCodePoint(cpt)) {\n        throw new IOException(\"Illegal Unicode Codepoint \"+\n                              Integer.toHexString(cpt)+\" in stream.\");\n      }\n      sb.appendCodePoint(cpt);\n    }\n    return sb.toString();\n  }",
      "path": "src/java/org/apache/hadoop/record/Utils.java"
    }
  }
}