{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FairScheduler.java",
  "functionName": "assignPreemptedContainers",
  "functionId": "assignPreemptedContainers___node-FSSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
  "functionStartLine": 1089,
  "functionEndLine": 1104,
  "numCommitsSeen": 226,
  "timeTaken": 2876,
  "changeHistory": [
    "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
    "c3375175d616e0380560f89d491b6b9753a8f3e1"
  ],
  "changeHistoryShort": {
    "45535f8afae4e5bf4f60597fc29ba94b4e7743f3": "Ymultichange(Yreturntypechange,Ybodychange)",
    "c3375175d616e0380560f89d491b6b9753a8f3e1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "45535f8afae4e5bf4f60597fc29ba94b4e7743f3": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6895. [FairScheduler] Preemption reservation may cause regular reservation leaks. (Miklos Szegedi via Yufei Gu)\n",
      "commitDate": "02/08/17 9:25 AM",
      "commitName": "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
      "commitAuthor": "Yufei Gu",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6895. [FairScheduler] Preemption reservation may cause regular reservation leaks. (Miklos Szegedi via Yufei Gu)\n",
          "commitDate": "02/08/17 9:25 AM",
          "commitName": "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "09/07/17 4:09 PM",
          "commitNameOld": "3de47ab5ea5cb75805a03010dc72e11b0cf6c173",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 23.72,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,16 @@\n-  static boolean assignPreemptedContainers(FSSchedulerNode node) {\n-    boolean assignedAny \u003d false;\n+  static void assignPreemptedContainers(FSSchedulerNode node) {\n     for (Entry\u003cFSAppAttempt, Resource\u003e entry :\n         node.getPreemptionList().entrySet()) {\n       FSAppAttempt app \u003d entry.getKey();\n       Resource preemptionPending \u003d Resources.clone(entry.getValue());\n       while (!app.isStopped() \u0026\u0026 !Resources.isNone(preemptionPending)) {\n         Resource assigned \u003d app.assignContainer(node);\n-        if (Resources.isNone(assigned)) {\n+        if (Resources.isNone(assigned) ||\n+            assigned.equals(FairScheduler.CONTAINER_RESERVED)) {\n           // Fail to assign, let\u0027s not try further\n           break;\n         }\n-        assignedAny \u003d true;\n         Resources.subtractFromNonNegative(preemptionPending, assigned);\n       }\n     }\n-    return assignedAny;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void assignPreemptedContainers(FSSchedulerNode node) {\n    for (Entry\u003cFSAppAttempt, Resource\u003e entry :\n        node.getPreemptionList().entrySet()) {\n      FSAppAttempt app \u003d entry.getKey();\n      Resource preemptionPending \u003d Resources.clone(entry.getValue());\n      while (!app.isStopped() \u0026\u0026 !Resources.isNone(preemptionPending)) {\n        Resource assigned \u003d app.assignContainer(node);\n        if (Resources.isNone(assigned) ||\n            assigned.equals(FairScheduler.CONTAINER_RESERVED)) {\n          // Fail to assign, let\u0027s not try further\n          break;\n        }\n        Resources.subtractFromNonNegative(preemptionPending, assigned);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {
            "oldValue": "boolean",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6895. [FairScheduler] Preemption reservation may cause regular reservation leaks. (Miklos Szegedi via Yufei Gu)\n",
          "commitDate": "02/08/17 9:25 AM",
          "commitName": "45535f8afae4e5bf4f60597fc29ba94b4e7743f3",
          "commitAuthor": "Yufei Gu",
          "commitDateOld": "09/07/17 4:09 PM",
          "commitNameOld": "3de47ab5ea5cb75805a03010dc72e11b0cf6c173",
          "commitAuthorOld": "Yufei Gu",
          "daysBetweenCommits": 23.72,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,16 @@\n-  static boolean assignPreemptedContainers(FSSchedulerNode node) {\n-    boolean assignedAny \u003d false;\n+  static void assignPreemptedContainers(FSSchedulerNode node) {\n     for (Entry\u003cFSAppAttempt, Resource\u003e entry :\n         node.getPreemptionList().entrySet()) {\n       FSAppAttempt app \u003d entry.getKey();\n       Resource preemptionPending \u003d Resources.clone(entry.getValue());\n       while (!app.isStopped() \u0026\u0026 !Resources.isNone(preemptionPending)) {\n         Resource assigned \u003d app.assignContainer(node);\n-        if (Resources.isNone(assigned)) {\n+        if (Resources.isNone(assigned) ||\n+            assigned.equals(FairScheduler.CONTAINER_RESERVED)) {\n           // Fail to assign, let\u0027s not try further\n           break;\n         }\n-        assignedAny \u003d true;\n         Resources.subtractFromNonNegative(preemptionPending, assigned);\n       }\n     }\n-    return assignedAny;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void assignPreemptedContainers(FSSchedulerNode node) {\n    for (Entry\u003cFSAppAttempt, Resource\u003e entry :\n        node.getPreemptionList().entrySet()) {\n      FSAppAttempt app \u003d entry.getKey();\n      Resource preemptionPending \u003d Resources.clone(entry.getValue());\n      while (!app.isStopped() \u0026\u0026 !Resources.isNone(preemptionPending)) {\n        Resource assigned \u003d app.assignContainer(node);\n        if (Resources.isNone(assigned) ||\n            assigned.equals(FairScheduler.CONTAINER_RESERVED)) {\n          // Fail to assign, let\u0027s not try further\n          break;\n        }\n        Resources.subtractFromNonNegative(preemptionPending, assigned);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "c3375175d616e0380560f89d491b6b9753a8f3e1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6432. FairScheduler: Reserve preempted resources for corresponding applications. (Miklos Szegedi via kasha)\n",
      "commitDate": "12/04/17 2:21 PM",
      "commitName": "c3375175d616e0380560f89d491b6b9753a8f3e1",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,18 @@\n+  static boolean assignPreemptedContainers(FSSchedulerNode node) {\n+    boolean assignedAny \u003d false;\n+    for (Entry\u003cFSAppAttempt, Resource\u003e entry :\n+        node.getPreemptionList().entrySet()) {\n+      FSAppAttempt app \u003d entry.getKey();\n+      Resource preemptionPending \u003d Resources.clone(entry.getValue());\n+      while (!app.isStopped() \u0026\u0026 !Resources.isNone(preemptionPending)) {\n+        Resource assigned \u003d app.assignContainer(node);\n+        if (Resources.isNone(assigned)) {\n+          // Fail to assign, let\u0027s not try further\n+          break;\n+        }\n+        assignedAny \u003d true;\n+        Resources.subtractFromNonNegative(preemptionPending, assigned);\n+      }\n+    }\n+    return assignedAny;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static boolean assignPreemptedContainers(FSSchedulerNode node) {\n    boolean assignedAny \u003d false;\n    for (Entry\u003cFSAppAttempt, Resource\u003e entry :\n        node.getPreemptionList().entrySet()) {\n      FSAppAttempt app \u003d entry.getKey();\n      Resource preemptionPending \u003d Resources.clone(entry.getValue());\n      while (!app.isStopped() \u0026\u0026 !Resources.isNone(preemptionPending)) {\n        Resource assigned \u003d app.assignContainer(node);\n        if (Resources.isNone(assigned)) {\n          // Fail to assign, let\u0027s not try further\n          break;\n        }\n        assignedAny \u003d true;\n        Resources.subtractFromNonNegative(preemptionPending, assigned);\n      }\n    }\n    return assignedAny;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FairScheduler.java"
    }
  }
}