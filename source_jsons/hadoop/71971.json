{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KerberosAuthenticator.java",
  "functionName": "authenticate",
  "functionId": "authenticate___url-URL__token-AuthenticatedURL.Token",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
  "functionStartLine": 181,
  "functionEndLine": 223,
  "numCommitsSeen": 26,
  "timeTaken": 2568,
  "changeHistory": [
    "b0d3c877e30312820124cac2eff737fddac9e484",
    "1f20f432d2472f92797ea01711ca4cc97e7b2b23",
    "332269de065d0f40eb54ee5e53b765217c24081e",
    "c3793102121767c46091805eae65ef3919a5f368",
    "875256834b892b574499d5fe68f95a9aed244f7d",
    "3cae2ba63fe6f0765d860677a9bd9f1ea158c1c3",
    "c02629f585683889f70012a1b2b186d12c6637c5",
    "ec43a33e2c9a6ab4b4ca313f8350f7f1c1d66647",
    "a33ae4020d8676e957ee11b239a0876bdc7cc8c9",
    "5383694df9665cb8eecd1765ab79a7147d9269b0",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af"
  ],
  "changeHistoryShort": {
    "b0d3c877e30312820124cac2eff737fddac9e484": "Ybodychange",
    "1f20f432d2472f92797ea01711ca4cc97e7b2b23": "Ybodychange",
    "332269de065d0f40eb54ee5e53b765217c24081e": "Ybodychange",
    "c3793102121767c46091805eae65ef3919a5f368": "Ybodychange",
    "875256834b892b574499d5fe68f95a9aed244f7d": "Ybodychange",
    "3cae2ba63fe6f0765d860677a9bd9f1ea158c1c3": "Ybodychange",
    "c02629f585683889f70012a1b2b186d12c6637c5": "Ybodychange",
    "ec43a33e2c9a6ab4b4ca313f8350f7f1c1d66647": "Ybodychange",
    "a33ae4020d8676e957ee11b239a0876bdc7cc8c9": "Ybodychange",
    "5383694df9665cb8eecd1765ab79a7147d9269b0": "Ybodychange",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b0d3c877e30312820124cac2eff737fddac9e484": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12897. KerberosAuthenticator.authenticate to include URL on IO failures. Contributed by Ajay Kumar.\n",
      "commitDate": "20/02/18 6:18 PM",
      "commitName": "b0d3c877e30312820124cac2eff737fddac9e484",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "14/02/18 10:25 AM",
      "commitNameOld": "1f20f432d2472f92797ea01711ca4cc97e7b2b23",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 6.33,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,43 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n-    throws IOException, AuthenticationException {\n+      throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n-      HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n-      conn.setRequestMethod(AUTH_HTTP_METHOD);\n-      conn.connect();\n-      \n-      boolean needFallback \u003d false;\n-      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n-        LOG.debug(\"JDK performed authentication on our behalf.\");\n-        // If the JDK already did the SPNEGO back-and-forth for\n-        // us, just pull out the token.\n-        AuthenticatedURL.extractToken(conn, token);\n-        if (isTokenKerberos(token)) {\n-          return;\n+      try {\n+        HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n+        conn.setRequestMethod(AUTH_HTTP_METHOD);\n+        conn.connect();\n+\n+        boolean needFallback \u003d false;\n+        if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n+          LOG.debug(\"JDK performed authentication on our behalf.\");\n+          // If the JDK already did the SPNEGO back-and-forth for\n+          // us, just pull out the token.\n+          AuthenticatedURL.extractToken(conn, token);\n+          if (isTokenKerberos(token)) {\n+            return;\n+          }\n+          needFallback \u003d true;\n         }\n-        needFallback \u003d true;\n-      }\n-      if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n-        LOG.debug(\"Performing our own SPNEGO sequence.\");\n-        doSpnegoSequence(token);\n-      } else {\n-        LOG.debug(\"Using fallback authenticator sequence.\");\n-        Authenticator auth \u003d getFallBackAuthenticator();\n-        // Make sure that the fall back authenticator have the same\n-        // ConnectionConfigurator, since the method might be overridden.\n-        // Otherwise the fall back authenticator might not have the information\n-        // to make the connection (e.g., SSL certificates)\n-        auth.setConnectionConfigurator(connConfigurator);\n-        auth.authenticate(url, token);\n+        if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n+          LOG.debug(\"Performing our own SPNEGO sequence.\");\n+          doSpnegoSequence(token);\n+        } else {\n+          LOG.debug(\"Using fallback authenticator sequence.\");\n+          Authenticator auth \u003d getFallBackAuthenticator();\n+          // Make sure that the fall back authenticator have the same\n+          // ConnectionConfigurator, since the method might be overridden.\n+          // Otherwise the fall back authenticator might not have the\n+          // information to make the connection (e.g., SSL certificates)\n+          auth.setConnectionConfigurator(connConfigurator);\n+          auth.authenticate(url, token);\n+        }\n+      } catch (IOException ex){\n+        throw wrapExceptionWithMessage(ex,\n+            \"Error while authenticating with endpoint: \" + url);\n+      } catch (AuthenticationException ex){\n+        throw wrapExceptionWithMessage(ex,\n+            \"Error while authenticating with endpoint: \" + url);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n      throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      try {\n        HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n        conn.setRequestMethod(AUTH_HTTP_METHOD);\n        conn.connect();\n\n        boolean needFallback \u003d false;\n        if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n          LOG.debug(\"JDK performed authentication on our behalf.\");\n          // If the JDK already did the SPNEGO back-and-forth for\n          // us, just pull out the token.\n          AuthenticatedURL.extractToken(conn, token);\n          if (isTokenKerberos(token)) {\n            return;\n          }\n          needFallback \u003d true;\n        }\n        if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n          LOG.debug(\"Performing our own SPNEGO sequence.\");\n          doSpnegoSequence(token);\n        } else {\n          LOG.debug(\"Using fallback authenticator sequence.\");\n          Authenticator auth \u003d getFallBackAuthenticator();\n          // Make sure that the fall back authenticator have the same\n          // ConnectionConfigurator, since the method might be overridden.\n          // Otherwise the fall back authenticator might not have the\n          // information to make the connection (e.g., SSL certificates)\n          auth.setConnectionConfigurator(connConfigurator);\n          auth.authenticate(url, token);\n        }\n      } catch (IOException ex){\n        throw wrapExceptionWithMessage(ex,\n            \"Error while authenticating with endpoint: \" + url);\n      } catch (AuthenticationException ex){\n        throw wrapExceptionWithMessage(ex,\n            \"Error while authenticating with endpoint: \" + url);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "1f20f432d2472f92797ea01711ca4cc97e7b2b23": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-12897. KerberosAuthenticator.authenticate to include URL on IO failures. Contributed by Ajay Kumar.\"\n\nThis reverts commit 332269de065d0f40eb54ee5e53b765217c24081e.\n",
      "commitDate": "14/02/18 10:25 AM",
      "commitName": "1f20f432d2472f92797ea01711ca4cc97e7b2b23",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "13/02/18 10:14 AM",
      "commitNameOld": "332269de065d0f40eb54ee5e53b765217c24081e",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 1.01,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,35 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n-      throws IOException, AuthenticationException {\n+    throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n-      try {\n-        HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n-        conn.setRequestMethod(AUTH_HTTP_METHOD);\n-        conn.connect();\n-\n-        boolean needFallback \u003d false;\n-        if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n-          LOG.debug(\"JDK performed authentication on our behalf.\");\n-          // If the JDK already did the SPNEGO back-and-forth for\n-          // us, just pull out the token.\n-          AuthenticatedURL.extractToken(conn, token);\n-          if (isTokenKerberos(token)) {\n-            return;\n-          }\n-          needFallback \u003d true;\n+      HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n+      conn.setRequestMethod(AUTH_HTTP_METHOD);\n+      conn.connect();\n+      \n+      boolean needFallback \u003d false;\n+      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n+        LOG.debug(\"JDK performed authentication on our behalf.\");\n+        // If the JDK already did the SPNEGO back-and-forth for\n+        // us, just pull out the token.\n+        AuthenticatedURL.extractToken(conn, token);\n+        if (isTokenKerberos(token)) {\n+          return;\n         }\n-        if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n-          LOG.debug(\"Performing our own SPNEGO sequence.\");\n-          doSpnegoSequence(token);\n-        } else {\n-          LOG.debug(\"Using fallback authenticator sequence.\");\n-          Authenticator auth \u003d getFallBackAuthenticator();\n-          // Make sure that the fall back authenticator have the same\n-          // ConnectionConfigurator, since the method might be overridden.\n-          // Otherwise the fall back authenticator might not have the\n-          // information to make the connection (e.g., SSL certificates)\n-          auth.setConnectionConfigurator(connConfigurator);\n-          auth.authenticate(url, token);\n-        }\n-      } catch (IOException ex){\n-        throw wrapExceptionWithMessage(ex,\n-            \"Error while authenticating with endpoint: \" + url);\n-      } catch (AuthenticationException ex){\n-        throw wrapExceptionWithMessage(ex,\n-            \"Error while authenticating with endpoint: \" + url);\n+        needFallback \u003d true;\n+      }\n+      if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n+        LOG.debug(\"Performing our own SPNEGO sequence.\");\n+        doSpnegoSequence(token);\n+      } else {\n+        LOG.debug(\"Using fallback authenticator sequence.\");\n+        Authenticator auth \u003d getFallBackAuthenticator();\n+        // Make sure that the fall back authenticator have the same\n+        // ConnectionConfigurator, since the method might be overridden.\n+        // Otherwise the fall back authenticator might not have the information\n+        // to make the connection (e.g., SSL certificates)\n+        auth.setConnectionConfigurator(connConfigurator);\n+        auth.authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      \n      boolean needFallback \u003d false;\n      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n        LOG.debug(\"JDK performed authentication on our behalf.\");\n        // If the JDK already did the SPNEGO back-and-forth for\n        // us, just pull out the token.\n        AuthenticatedURL.extractToken(conn, token);\n        if (isTokenKerberos(token)) {\n          return;\n        }\n        needFallback \u003d true;\n      }\n      if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n        LOG.debug(\"Performing our own SPNEGO sequence.\");\n        doSpnegoSequence(token);\n      } else {\n        LOG.debug(\"Using fallback authenticator sequence.\");\n        Authenticator auth \u003d getFallBackAuthenticator();\n        // Make sure that the fall back authenticator have the same\n        // ConnectionConfigurator, since the method might be overridden.\n        // Otherwise the fall back authenticator might not have the information\n        // to make the connection (e.g., SSL certificates)\n        auth.setConnectionConfigurator(connConfigurator);\n        auth.authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "332269de065d0f40eb54ee5e53b765217c24081e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12897. KerberosAuthenticator.authenticate to include URL on IO failures. Contributed by Ajay Kumar.\n",
      "commitDate": "13/02/18 10:14 AM",
      "commitName": "332269de065d0f40eb54ee5e53b765217c24081e",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/08/17 2:50 PM",
      "commitNameOld": "c3793102121767c46091805eae65ef3919a5f368",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 174.85,
      "commitsBetweenForRepo": 1310,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,43 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n-    throws IOException, AuthenticationException {\n+      throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n-      HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n-      conn.setRequestMethod(AUTH_HTTP_METHOD);\n-      conn.connect();\n-      \n-      boolean needFallback \u003d false;\n-      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n-        LOG.debug(\"JDK performed authentication on our behalf.\");\n-        // If the JDK already did the SPNEGO back-and-forth for\n-        // us, just pull out the token.\n-        AuthenticatedURL.extractToken(conn, token);\n-        if (isTokenKerberos(token)) {\n-          return;\n+      try {\n+        HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n+        conn.setRequestMethod(AUTH_HTTP_METHOD);\n+        conn.connect();\n+\n+        boolean needFallback \u003d false;\n+        if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n+          LOG.debug(\"JDK performed authentication on our behalf.\");\n+          // If the JDK already did the SPNEGO back-and-forth for\n+          // us, just pull out the token.\n+          AuthenticatedURL.extractToken(conn, token);\n+          if (isTokenKerberos(token)) {\n+            return;\n+          }\n+          needFallback \u003d true;\n         }\n-        needFallback \u003d true;\n-      }\n-      if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n-        LOG.debug(\"Performing our own SPNEGO sequence.\");\n-        doSpnegoSequence(token);\n-      } else {\n-        LOG.debug(\"Using fallback authenticator sequence.\");\n-        Authenticator auth \u003d getFallBackAuthenticator();\n-        // Make sure that the fall back authenticator have the same\n-        // ConnectionConfigurator, since the method might be overridden.\n-        // Otherwise the fall back authenticator might not have the information\n-        // to make the connection (e.g., SSL certificates)\n-        auth.setConnectionConfigurator(connConfigurator);\n-        auth.authenticate(url, token);\n+        if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n+          LOG.debug(\"Performing our own SPNEGO sequence.\");\n+          doSpnegoSequence(token);\n+        } else {\n+          LOG.debug(\"Using fallback authenticator sequence.\");\n+          Authenticator auth \u003d getFallBackAuthenticator();\n+          // Make sure that the fall back authenticator have the same\n+          // ConnectionConfigurator, since the method might be overridden.\n+          // Otherwise the fall back authenticator might not have the\n+          // information to make the connection (e.g., SSL certificates)\n+          auth.setConnectionConfigurator(connConfigurator);\n+          auth.authenticate(url, token);\n+        }\n+      } catch (IOException ex){\n+        throw wrapExceptionWithMessage(ex,\n+            \"Error while authenticating with endpoint: \" + url);\n+      } catch (AuthenticationException ex){\n+        throw wrapExceptionWithMessage(ex,\n+            \"Error while authenticating with endpoint: \" + url);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n      throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      try {\n        HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n        conn.setRequestMethod(AUTH_HTTP_METHOD);\n        conn.connect();\n\n        boolean needFallback \u003d false;\n        if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n          LOG.debug(\"JDK performed authentication on our behalf.\");\n          // If the JDK already did the SPNEGO back-and-forth for\n          // us, just pull out the token.\n          AuthenticatedURL.extractToken(conn, token);\n          if (isTokenKerberos(token)) {\n            return;\n          }\n          needFallback \u003d true;\n        }\n        if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n          LOG.debug(\"Performing our own SPNEGO sequence.\");\n          doSpnegoSequence(token);\n        } else {\n          LOG.debug(\"Using fallback authenticator sequence.\");\n          Authenticator auth \u003d getFallBackAuthenticator();\n          // Make sure that the fall back authenticator have the same\n          // ConnectionConfigurator, since the method might be overridden.\n          // Otherwise the fall back authenticator might not have the\n          // information to make the connection (e.g., SSL certificates)\n          auth.setConnectionConfigurator(connConfigurator);\n          auth.authenticate(url, token);\n        }\n      } catch (IOException ex){\n        throw wrapExceptionWithMessage(ex,\n            \"Error while authenticating with endpoint: \" + url);\n      } catch (AuthenticationException ex){\n        throw wrapExceptionWithMessage(ex,\n            \"Error while authenticating with endpoint: \" + url);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "c3793102121767c46091805eae65ef3919a5f368": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14687. AuthenticatedURL will reuse bad/expired session cookies. Contributed by Daryn Sharp\n",
      "commitDate": "22/08/17 2:50 PM",
      "commitName": "c3793102121767c46091805eae65ef3919a5f368",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "21/06/17 9:03 AM",
      "commitNameOld": "e806c6e0ce6026d53227b51d58ec6d5458164571",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 62.24,
      "commitsBetweenForRepo": 389,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,35 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n     throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n-      conn \u003d (HttpURLConnection) url.openConnection();\n-      if (connConfigurator !\u003d null) {\n-        conn \u003d connConfigurator.configure(conn);\n-      }\n+      HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n       conn.setRequestMethod(AUTH_HTTP_METHOD);\n       conn.connect();\n       \n       boolean needFallback \u003d false;\n       if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n         LOG.debug(\"JDK performed authentication on our behalf.\");\n         // If the JDK already did the SPNEGO back-and-forth for\n         // us, just pull out the token.\n         AuthenticatedURL.extractToken(conn, token);\n         if (isTokenKerberos(token)) {\n           return;\n         }\n         needFallback \u003d true;\n       }\n-      if (!needFallback \u0026\u0026 isNegotiate()) {\n+      if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n         LOG.debug(\"Performing our own SPNEGO sequence.\");\n         doSpnegoSequence(token);\n       } else {\n         LOG.debug(\"Using fallback authenticator sequence.\");\n         Authenticator auth \u003d getFallBackAuthenticator();\n         // Make sure that the fall back authenticator have the same\n         // ConnectionConfigurator, since the method might be overridden.\n         // Otherwise the fall back authenticator might not have the information\n         // to make the connection (e.g., SSL certificates)\n         auth.setConnectionConfigurator(connConfigurator);\n         auth.authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      HttpURLConnection conn \u003d token.openConnection(url, connConfigurator);\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      \n      boolean needFallback \u003d false;\n      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n        LOG.debug(\"JDK performed authentication on our behalf.\");\n        // If the JDK already did the SPNEGO back-and-forth for\n        // us, just pull out the token.\n        AuthenticatedURL.extractToken(conn, token);\n        if (isTokenKerberos(token)) {\n          return;\n        }\n        needFallback \u003d true;\n      }\n      if (!needFallback \u0026\u0026 isNegotiate(conn)) {\n        LOG.debug(\"Performing our own SPNEGO sequence.\");\n        doSpnegoSequence(token);\n      } else {\n        LOG.debug(\"Using fallback authenticator sequence.\");\n        Authenticator auth \u003d getFallBackAuthenticator();\n        // Make sure that the fall back authenticator have the same\n        // ConnectionConfigurator, since the method might be overridden.\n        // Otherwise the fall back authenticator might not have the information\n        // to make the connection (e.g., SSL certificates)\n        auth.setConnectionConfigurator(connConfigurator);\n        auth.authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "875256834b892b574499d5fe68f95a9aed244f7d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11467. KerberosAuthenticator can connect to a non-secure cluster. (yzhangal via rkanter)\n",
      "commitDate": "13/02/15 2:01 PM",
      "commitName": "875256834b892b574499d5fe68f95a9aed244f7d",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/12/14 3:15 AM",
      "commitNameOld": "f71eb51ab8109c14e8e921751dd5de603bdf2bde",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 66.45,
      "commitsBetweenForRepo": 506,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,38 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n     throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n       conn \u003d (HttpURLConnection) url.openConnection();\n       if (connConfigurator !\u003d null) {\n         conn \u003d connConfigurator.configure(conn);\n       }\n       conn.setRequestMethod(AUTH_HTTP_METHOD);\n       conn.connect();\n       \n+      boolean needFallback \u003d false;\n       if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n         LOG.debug(\"JDK performed authentication on our behalf.\");\n         // If the JDK already did the SPNEGO back-and-forth for\n         // us, just pull out the token.\n         AuthenticatedURL.extractToken(conn, token);\n-        return;\n-      } else if (isNegotiate()) {\n+        if (isTokenKerberos(token)) {\n+          return;\n+        }\n+        needFallback \u003d true;\n+      }\n+      if (!needFallback \u0026\u0026 isNegotiate()) {\n         LOG.debug(\"Performing our own SPNEGO sequence.\");\n         doSpnegoSequence(token);\n       } else {\n         LOG.debug(\"Using fallback authenticator sequence.\");\n         Authenticator auth \u003d getFallBackAuthenticator();\n         // Make sure that the fall back authenticator have the same\n         // ConnectionConfigurator, since the method might be overridden.\n         // Otherwise the fall back authenticator might not have the information\n         // to make the connection (e.g., SSL certificates)\n         auth.setConnectionConfigurator(connConfigurator);\n         auth.authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      if (connConfigurator !\u003d null) {\n        conn \u003d connConfigurator.configure(conn);\n      }\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      \n      boolean needFallback \u003d false;\n      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n        LOG.debug(\"JDK performed authentication on our behalf.\");\n        // If the JDK already did the SPNEGO back-and-forth for\n        // us, just pull out the token.\n        AuthenticatedURL.extractToken(conn, token);\n        if (isTokenKerberos(token)) {\n          return;\n        }\n        needFallback \u003d true;\n      }\n      if (!needFallback \u0026\u0026 isNegotiate()) {\n        LOG.debug(\"Performing our own SPNEGO sequence.\");\n        doSpnegoSequence(token);\n      } else {\n        LOG.debug(\"Using fallback authenticator sequence.\");\n        Authenticator auth \u003d getFallBackAuthenticator();\n        // Make sure that the fall back authenticator have the same\n        // ConnectionConfigurator, since the method might be overridden.\n        // Otherwise the fall back authenticator might not have the information\n        // to make the connection (e.g., SSL certificates)\n        auth.setConnectionConfigurator(connConfigurator);\n        auth.authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "3cae2ba63fe6f0765d860677a9bd9f1ea158c1c3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3987. Support webhdfs over HTTPS. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543962 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/11/13 1:51 PM",
      "commitName": "3cae2ba63fe6f0765d860677a9bd9f1ea158c1c3",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "13/11/13 1:11 PM",
      "commitNameOld": "c02629f585683889f70012a1b2b186d12c6637c5",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,33 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n     throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n       conn \u003d (HttpURLConnection) url.openConnection();\n       if (connConfigurator !\u003d null) {\n         conn \u003d connConfigurator.configure(conn);\n       }\n       conn.setRequestMethod(AUTH_HTTP_METHOD);\n       conn.connect();\n       \n       if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n         LOG.debug(\"JDK performed authentication on our behalf.\");\n         // If the JDK already did the SPNEGO back-and-forth for\n         // us, just pull out the token.\n         AuthenticatedURL.extractToken(conn, token);\n         return;\n       } else if (isNegotiate()) {\n         LOG.debug(\"Performing our own SPNEGO sequence.\");\n         doSpnegoSequence(token);\n       } else {\n         LOG.debug(\"Using fallback authenticator sequence.\");\n-        getFallBackAuthenticator().authenticate(url, token);\n+        Authenticator auth \u003d getFallBackAuthenticator();\n+        // Make sure that the fall back authenticator have the same\n+        // ConnectionConfigurator, since the method might be overridden.\n+        // Otherwise the fall back authenticator might not have the information\n+        // to make the connection (e.g., SSL certificates)\n+        auth.setConnectionConfigurator(connConfigurator);\n+        auth.authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      if (connConfigurator !\u003d null) {\n        conn \u003d connConfigurator.configure(conn);\n      }\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      \n      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n        LOG.debug(\"JDK performed authentication on our behalf.\");\n        // If the JDK already did the SPNEGO back-and-forth for\n        // us, just pull out the token.\n        AuthenticatedURL.extractToken(conn, token);\n        return;\n      } else if (isNegotiate()) {\n        LOG.debug(\"Performing our own SPNEGO sequence.\");\n        doSpnegoSequence(token);\n      } else {\n        LOG.debug(\"Using fallback authenticator sequence.\");\n        Authenticator auth \u003d getFallBackAuthenticator();\n        // Make sure that the fall back authenticator have the same\n        // ConnectionConfigurator, since the method might be overridden.\n        // Otherwise the fall back authenticator might not have the information\n        // to make the connection (e.g., SSL certificates)\n        auth.setConnectionConfigurator(connConfigurator);\n        auth.authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "c02629f585683889f70012a1b2b186d12c6637c5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10078. KerberosAuthenticator always does SPNEGO. (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1541720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/11/13 1:11 PM",
      "commitName": "c02629f585683889f70012a1b2b186d12c6637c5",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/08/13 4:12 PM",
      "commitNameOld": "228742acad6b56c0e4fafe285099fcdfa5b6e47f",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 91.92,
      "commitsBetweenForRepo": 576,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n     throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n       conn \u003d (HttpURLConnection) url.openConnection();\n       if (connConfigurator !\u003d null) {\n         conn \u003d connConfigurator.configure(conn);\n       }\n       conn.setRequestMethod(AUTH_HTTP_METHOD);\n       conn.connect();\n       \n-      if (conn.getRequestProperty(AUTHORIZATION) !\u003d null \u0026\u0026 conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n+      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n         LOG.debug(\"JDK performed authentication on our behalf.\");\n         // If the JDK already did the SPNEGO back-and-forth for\n         // us, just pull out the token.\n         AuthenticatedURL.extractToken(conn, token);\n         return;\n       } else if (isNegotiate()) {\n         LOG.debug(\"Performing our own SPNEGO sequence.\");\n         doSpnegoSequence(token);\n       } else {\n         LOG.debug(\"Using fallback authenticator sequence.\");\n         getFallBackAuthenticator().authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      if (connConfigurator !\u003d null) {\n        conn \u003d connConfigurator.configure(conn);\n      }\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      \n      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n        LOG.debug(\"JDK performed authentication on our behalf.\");\n        // If the JDK already did the SPNEGO back-and-forth for\n        // us, just pull out the token.\n        AuthenticatedURL.extractToken(conn, token);\n        return;\n      } else if (isNegotiate()) {\n        LOG.debug(\"Performing our own SPNEGO sequence.\");\n        doSpnegoSequence(token);\n      } else {\n        LOG.debug(\"Using fallback authenticator sequence.\");\n        getFallBackAuthenticator().authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "ec43a33e2c9a6ab4b4ca313f8350f7f1c1d66647": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8883. Anonymous fallback in KerberosAuthenticator is broken. (rkanter via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1398895 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/12 10:39 AM",
      "commitName": "ec43a33e2c9a6ab4b4ca313f8350f7f1c1d66647",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "10/10/12 11:30 PM",
      "commitNameOld": "bfce95d463b70c82c33b3bc2b15f7ed90eee592f",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 5.46,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n     throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n       conn \u003d (HttpURLConnection) url.openConnection();\n       if (connConfigurator !\u003d null) {\n         conn \u003d connConfigurator.configure(conn);\n       }\n       conn.setRequestMethod(AUTH_HTTP_METHOD);\n       conn.connect();\n       \n-      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n+      if (conn.getRequestProperty(AUTHORIZATION) !\u003d null \u0026\u0026 conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n         LOG.debug(\"JDK performed authentication on our behalf.\");\n         // If the JDK already did the SPNEGO back-and-forth for\n         // us, just pull out the token.\n         AuthenticatedURL.extractToken(conn, token);\n         return;\n       } else if (isNegotiate()) {\n         LOG.debug(\"Performing our own SPNEGO sequence.\");\n         doSpnegoSequence(token);\n       } else {\n         LOG.debug(\"Using fallback authenticator sequence.\");\n         getFallBackAuthenticator().authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      if (connConfigurator !\u003d null) {\n        conn \u003d connConfigurator.configure(conn);\n      }\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      \n      if (conn.getRequestProperty(AUTHORIZATION) !\u003d null \u0026\u0026 conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n        LOG.debug(\"JDK performed authentication on our behalf.\");\n        // If the JDK already did the SPNEGO back-and-forth for\n        // us, just pull out the token.\n        AuthenticatedURL.extractToken(conn, token);\n        return;\n      } else if (isNegotiate()) {\n        LOG.debug(\"Performing our own SPNEGO sequence.\");\n        doSpnegoSequence(token);\n      } else {\n        LOG.debug(\"Using fallback authenticator sequence.\");\n        getFallBackAuthenticator().authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "a33ae4020d8676e957ee11b239a0876bdc7cc8c9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8855. SSL-based image transfer does not work when Kerberos is disabled. Contributed by Todd Lipcon\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 10:03 PM",
      "commitName": "a33ae4020d8676e957ee11b239a0876bdc7cc8c9",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "06/08/12 3:22 PM",
      "commitNameOld": "5383694df9665cb8eecd1765ab79a7147d9269b0",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 51.28,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,27 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n     throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n       conn \u003d (HttpURLConnection) url.openConnection();\n       if (connConfigurator !\u003d null) {\n         conn \u003d connConfigurator.configure(conn);\n       }\n       conn.setRequestMethod(AUTH_HTTP_METHOD);\n       conn.connect();\n-      if (isNegotiate()) {\n+      \n+      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n+        LOG.debug(\"JDK performed authentication on our behalf.\");\n+        // If the JDK already did the SPNEGO back-and-forth for\n+        // us, just pull out the token.\n+        AuthenticatedURL.extractToken(conn, token);\n+        return;\n+      } else if (isNegotiate()) {\n+        LOG.debug(\"Performing our own SPNEGO sequence.\");\n         doSpnegoSequence(token);\n       } else {\n+        LOG.debug(\"Using fallback authenticator sequence.\");\n         getFallBackAuthenticator().authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      if (connConfigurator !\u003d null) {\n        conn \u003d connConfigurator.configure(conn);\n      }\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      \n      if (conn.getResponseCode() \u003d\u003d HttpURLConnection.HTTP_OK) {\n        LOG.debug(\"JDK performed authentication on our behalf.\");\n        // If the JDK already did the SPNEGO back-and-forth for\n        // us, just pull out the token.\n        AuthenticatedURL.extractToken(conn, token);\n        return;\n      } else if (isNegotiate()) {\n        LOG.debug(\"Performing our own SPNEGO sequence.\");\n        doSpnegoSequence(token);\n      } else {\n        LOG.debug(\"Using fallback authenticator sequence.\");\n        getFallBackAuthenticator().authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "5383694df9665cb8eecd1765ab79a7147d9269b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8644. AuthenticatedURL should be able to use SSLFactory. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370045 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/08/12 3:22 PM",
      "commitName": "5383694df9665cb8eecd1765ab79a7147d9269b0",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "03/05/12 10:16 AM",
      "commitNameOld": "e3242b95b35844a0877a83032d3a7e3d5e9bd9c2",
      "commitAuthorOld": "Devaraj Das",
      "daysBetweenCommits": 95.21,
      "commitsBetweenForRepo": 491,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,18 @@\n   public void authenticate(URL url, AuthenticatedURL.Token token)\n     throws IOException, AuthenticationException {\n     if (!token.isSet()) {\n       this.url \u003d url;\n       base64 \u003d new Base64(0);\n       conn \u003d (HttpURLConnection) url.openConnection();\n+      if (connConfigurator !\u003d null) {\n+        conn \u003d connConfigurator.configure(conn);\n+      }\n       conn.setRequestMethod(AUTH_HTTP_METHOD);\n       conn.connect();\n       if (isNegotiate()) {\n         doSpnegoSequence(token);\n       } else {\n         getFallBackAuthenticator().authenticate(url, token);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      if (connConfigurator !\u003d null) {\n        conn \u003d connConfigurator.configure(conn);\n      }\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      if (isNegotiate()) {\n        doSpnegoSequence(token);\n      } else {\n        getFallBackAuthenticator().authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {}
    },
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7579. Rename package names from alfredo to auth.  Contributed by Alejandro Abdelnur\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 3:40 PM",
      "commitName": "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/08/11 2:18 PM",
      "commitNameOld": "4f1a0e36fab1f18e6e2c5fcc72cd9a7634967fcd",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      if (isNegotiate()) {\n        doSpnegoSequence(token);\n      } else {\n        getFallBackAuthenticator().authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/client/KerberosAuthenticator.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/client/KerberosAuthenticator.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      if (isNegotiate()) {\n        doSpnegoSequence(token);\n      } else {\n        getFallBackAuthenticator().authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/client/KerberosAuthenticator.java",
      "extendedDetails": {
        "oldPath": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/client/KerberosAuthenticator.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/client/KerberosAuthenticator.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,15 @@\n+  public void authenticate(URL url, AuthenticatedURL.Token token)\n+    throws IOException, AuthenticationException {\n+    if (!token.isSet()) {\n+      this.url \u003d url;\n+      base64 \u003d new Base64(0);\n+      conn \u003d (HttpURLConnection) url.openConnection();\n+      conn.setRequestMethod(AUTH_HTTP_METHOD);\n+      conn.connect();\n+      if (isNegotiate()) {\n+        doSpnegoSequence(token);\n+      } else {\n+        getFallBackAuthenticator().authenticate(url, token);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void authenticate(URL url, AuthenticatedURL.Token token)\n    throws IOException, AuthenticationException {\n    if (!token.isSet()) {\n      this.url \u003d url;\n      base64 \u003d new Base64(0);\n      conn \u003d (HttpURLConnection) url.openConnection();\n      conn.setRequestMethod(AUTH_HTTP_METHOD);\n      conn.connect();\n      if (isNegotiate()) {\n        doSpnegoSequence(token);\n      } else {\n        getFallBackAuthenticator().authenticate(url, token);\n      }\n    }\n  }",
      "path": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/client/KerberosAuthenticator.java"
    }
  }
}