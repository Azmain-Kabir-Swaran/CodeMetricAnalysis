{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SSLHostnameVerifier.java",
  "functionName": "getCNs",
  "functionId": "getCNs___cert-X509Certificate",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/SSLHostnameVerifier.java",
  "functionStartLine": 521,
  "functionEndLine": 561,
  "numCommitsSeen": 10,
  "timeTaken": 939,
  "changeHistory": [
    "640a72efbee17f6c7056650dae04f8b3f59ddaab",
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925"
  ],
  "changeHistoryShort": {
    "640a72efbee17f6c7056650dae04f8b3f59ddaab": "Ybodychange",
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925": "Yintroduced"
  },
  "changeHistoryDetails": {
    "640a72efbee17f6c7056650dae04f8b3f59ddaab": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10449. Fix the javac warnings in the security package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1582851 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/14 11:15 AM",
      "commitName": "640a72efbee17f6c7056650dae04f8b3f59ddaab",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 580.72,
      "commitsBetweenForRepo": 3631,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n       public static String[] getCNs(X509Certificate cert) {\n-        LinkedList cnList \u003d new LinkedList();\n+        final List\u003cString\u003e cnList \u003d new LinkedList\u003cString\u003e();\n         /*\n           Sebastian Hauer\u0027s original StrictSSLProtocolSocketFactory used\n           getName() and had the following comment:\n \n              Parses a X.500 distinguished name for the value of the\n              \"Common Name\" field.  This is done a bit sloppy right\n              now and should probably be done a bit more according to\n              \u003ccode\u003eRFC 2253\u003c/code\u003e.\n \n            I\u0027ve noticed that toString() seems to do a better job than\n            getName() on these X500Principal objects, so I\u0027m hoping that\n            addresses Sebastian\u0027s concern.\n \n            For example, getName() gives me this:\n            1.2.840.113549.1.9.1\u003d#16166a756c6975736461766965734063756362632e636f6d\n \n            whereas toString() gives me this:\n            EMAILADDRESS\u003djuliusdavies@cucbc.com\n \n            Looks like toString() even works with non-ascii domain names!\n            I tested it with \"\u0026#x82b1;\u0026#x5b50;.co.jp\" and it worked fine.\n           */\n         String subjectPrincipal \u003d cert.getSubjectX500Principal().toString();\n         StringTokenizer st \u003d new StringTokenizer(subjectPrincipal, \",\");\n         while (st.hasMoreTokens()) {\n             String tok \u003d st.nextToken();\n             int x \u003d tok.indexOf(\"CN\u003d\");\n             if (x \u003e\u003d 0) {\n                 cnList.add(tok.substring(x + 3));\n             }\n         }\n         if (!cnList.isEmpty()) {\n             String[] cns \u003d new String[cnList.size()];\n             cnList.toArray(cns);\n             return cns;\n         } else {\n             return null;\n         }\n       }\n\\ No newline at end of file\n",
      "actualSource": "      public static String[] getCNs(X509Certificate cert) {\n        final List\u003cString\u003e cnList \u003d new LinkedList\u003cString\u003e();\n        /*\n          Sebastian Hauer\u0027s original StrictSSLProtocolSocketFactory used\n          getName() and had the following comment:\n\n             Parses a X.500 distinguished name for the value of the\n             \"Common Name\" field.  This is done a bit sloppy right\n             now and should probably be done a bit more according to\n             \u003ccode\u003eRFC 2253\u003c/code\u003e.\n\n           I\u0027ve noticed that toString() seems to do a better job than\n           getName() on these X500Principal objects, so I\u0027m hoping that\n           addresses Sebastian\u0027s concern.\n\n           For example, getName() gives me this:\n           1.2.840.113549.1.9.1\u003d#16166a756c6975736461766965734063756362632e636f6d\n\n           whereas toString() gives me this:\n           EMAILADDRESS\u003djuliusdavies@cucbc.com\n\n           Looks like toString() even works with non-ascii domain names!\n           I tested it with \"\u0026#x82b1;\u0026#x5b50;.co.jp\" and it worked fine.\n          */\n        String subjectPrincipal \u003d cert.getSubjectX500Principal().toString();\n        StringTokenizer st \u003d new StringTokenizer(subjectPrincipal, \",\");\n        while (st.hasMoreTokens()) {\n            String tok \u003d st.nextToken();\n            int x \u003d tok.indexOf(\"CN\u003d\");\n            if (x \u003e\u003d 0) {\n                cnList.add(tok.substring(x + 3));\n            }\n        }\n        if (!cnList.isEmpty()) {\n            String[] cns \u003d new String[cnList.size()];\n            cnList.toArray(cns);\n            return cns;\n        } else {\n            return null;\n        }\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/SSLHostnameVerifier.java",
      "extendedDetails": {}
    },
    "9d16c9354b0c05edb30d23003dcdec4cc44ed925": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4417. add support for encrypted shuffle (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/12 6:23 AM",
      "commitName": "9d16c9354b0c05edb30d23003dcdec4cc44ed925",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,41 @@\n+      public static String[] getCNs(X509Certificate cert) {\n+        LinkedList cnList \u003d new LinkedList();\n+        /*\n+          Sebastian Hauer\u0027s original StrictSSLProtocolSocketFactory used\n+          getName() and had the following comment:\n+\n+             Parses a X.500 distinguished name for the value of the\n+             \"Common Name\" field.  This is done a bit sloppy right\n+             now and should probably be done a bit more according to\n+             \u003ccode\u003eRFC 2253\u003c/code\u003e.\n+\n+           I\u0027ve noticed that toString() seems to do a better job than\n+           getName() on these X500Principal objects, so I\u0027m hoping that\n+           addresses Sebastian\u0027s concern.\n+\n+           For example, getName() gives me this:\n+           1.2.840.113549.1.9.1\u003d#16166a756c6975736461766965734063756362632e636f6d\n+\n+           whereas toString() gives me this:\n+           EMAILADDRESS\u003djuliusdavies@cucbc.com\n+\n+           Looks like toString() even works with non-ascii domain names!\n+           I tested it with \"\u0026#x82b1;\u0026#x5b50;.co.jp\" and it worked fine.\n+          */\n+        String subjectPrincipal \u003d cert.getSubjectX500Principal().toString();\n+        StringTokenizer st \u003d new StringTokenizer(subjectPrincipal, \",\");\n+        while (st.hasMoreTokens()) {\n+            String tok \u003d st.nextToken();\n+            int x \u003d tok.indexOf(\"CN\u003d\");\n+            if (x \u003e\u003d 0) {\n+                cnList.add(tok.substring(x + 3));\n+            }\n+        }\n+        if (!cnList.isEmpty()) {\n+            String[] cns \u003d new String[cnList.size()];\n+            cnList.toArray(cns);\n+            return cns;\n+        } else {\n+            return null;\n+        }\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public static String[] getCNs(X509Certificate cert) {\n        LinkedList cnList \u003d new LinkedList();\n        /*\n          Sebastian Hauer\u0027s original StrictSSLProtocolSocketFactory used\n          getName() and had the following comment:\n\n             Parses a X.500 distinguished name for the value of the\n             \"Common Name\" field.  This is done a bit sloppy right\n             now and should probably be done a bit more according to\n             \u003ccode\u003eRFC 2253\u003c/code\u003e.\n\n           I\u0027ve noticed that toString() seems to do a better job than\n           getName() on these X500Principal objects, so I\u0027m hoping that\n           addresses Sebastian\u0027s concern.\n\n           For example, getName() gives me this:\n           1.2.840.113549.1.9.1\u003d#16166a756c6975736461766965734063756362632e636f6d\n\n           whereas toString() gives me this:\n           EMAILADDRESS\u003djuliusdavies@cucbc.com\n\n           Looks like toString() even works with non-ascii domain names!\n           I tested it with \"\u0026#x82b1;\u0026#x5b50;.co.jp\" and it worked fine.\n          */\n        String subjectPrincipal \u003d cert.getSubjectX500Principal().toString();\n        StringTokenizer st \u003d new StringTokenizer(subjectPrincipal, \",\");\n        while (st.hasMoreTokens()) {\n            String tok \u003d st.nextToken();\n            int x \u003d tok.indexOf(\"CN\u003d\");\n            if (x \u003e\u003d 0) {\n                cnList.add(tok.substring(x + 3));\n            }\n        }\n        if (!cnList.isEmpty()) {\n            String[] cns \u003d new String[cnList.size()];\n            cnList.toArray(cns);\n            return cns;\n        } else {\n            return null;\n        }\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/ssl/SSLHostnameVerifier.java"
    }
  }
}