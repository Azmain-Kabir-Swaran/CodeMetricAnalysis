{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TaskAttemptImpl.java",
  "functionName": "computeRackAndLocality",
  "functionId": "computeRackAndLocality",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
  "functionStartLine": 1589,
  "functionEndLine": 1606,
  "numCommitsSeen": 108,
  "timeTaken": 2595,
  "changeHistory": [
    "cb78a65a152a4f576a3255df3676c3b788c84eb5",
    "6a1c41111edcdc58c846fc50e53554fbba230171"
  ],
  "changeHistoryShort": {
    "cb78a65a152a4f576a3255df3676c3b788c84eb5": "Ybodychange",
    "6a1c41111edcdc58c846fc50e53554fbba230171": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cb78a65a152a4f576a3255df3676c3b788c84eb5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5152. Make MR App to simply pass through the container from RM instead of extracting and populating information itself to start any container. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469544 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 1:13 PM",
      "commitName": "cb78a65a152a4f576a3255df3676c3b788c84eb5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "11/04/13 12:28 PM",
      "commitNameOld": "e4c55e17fea55e2fcbef182bb2b0c4b22686f38c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private void computeRackAndLocality() {\n+    NodeId containerNodeId \u003d container.getNodeId();\n     nodeRackName \u003d RackResolver.resolve(\n         containerNodeId.getHost()).getNetworkLocation();\n \n     locality \u003d Locality.OFF_SWITCH;\n     if (dataLocalHosts.size() \u003e 0) {\n       String cHost \u003d resolveHost(containerNodeId.getHost());\n       if (dataLocalHosts.contains(cHost)) {\n         locality \u003d Locality.NODE_LOCAL;\n       }\n     }\n     if (locality \u003d\u003d Locality.OFF_SWITCH) {\n       if (dataLocalRacks.contains(nodeRackName)) {\n         locality \u003d Locality.RACK_LOCAL;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeRackAndLocality() {\n    NodeId containerNodeId \u003d container.getNodeId();\n    nodeRackName \u003d RackResolver.resolve(\n        containerNodeId.getHost()).getNetworkLocation();\n\n    locality \u003d Locality.OFF_SWITCH;\n    if (dataLocalHosts.size() \u003e 0) {\n      String cHost \u003d resolveHost(containerNodeId.getHost());\n      if (dataLocalHosts.contains(cHost)) {\n        locality \u003d Locality.NODE_LOCAL;\n      }\n    }\n    if (locality \u003d\u003d Locality.OFF_SWITCH) {\n      if (dataLocalRacks.contains(nodeRackName)) {\n        locality \u003d Locality.RACK_LOCAL;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java",
      "extendedDetails": {}
    },
    "6a1c41111edcdc58c846fc50e53554fbba230171": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5079. Changes job recovery to restore state directly from job history, instaed of simulating state machine events. Contributed by Jason Lowe and Robert Parker.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1466767 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/13 9:52 PM",
      "commitName": "6a1c41111edcdc58c846fc50e53554fbba230171",
      "commitAuthor": "Siddharth Seth",
      "diff": "@@ -0,0 +1,17 @@\n+  private void computeRackAndLocality() {\n+    nodeRackName \u003d RackResolver.resolve(\n+        containerNodeId.getHost()).getNetworkLocation();\n+\n+    locality \u003d Locality.OFF_SWITCH;\n+    if (dataLocalHosts.size() \u003e 0) {\n+      String cHost \u003d resolveHost(containerNodeId.getHost());\n+      if (dataLocalHosts.contains(cHost)) {\n+        locality \u003d Locality.NODE_LOCAL;\n+      }\n+    }\n+    if (locality \u003d\u003d Locality.OFF_SWITCH) {\n+      if (dataLocalRacks.contains(nodeRackName)) {\n+        locality \u003d Locality.RACK_LOCAL;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void computeRackAndLocality() {\n    nodeRackName \u003d RackResolver.resolve(\n        containerNodeId.getHost()).getNetworkLocation();\n\n    locality \u003d Locality.OFF_SWITCH;\n    if (dataLocalHosts.size() \u003e 0) {\n      String cHost \u003d resolveHost(containerNodeId.getHost());\n      if (dataLocalHosts.contains(cHost)) {\n        locality \u003d Locality.NODE_LOCAL;\n      }\n    }\n    if (locality \u003d\u003d Locality.OFF_SWITCH) {\n      if (dataLocalRacks.contains(nodeRackName)) {\n        locality \u003d Locality.RACK_LOCAL;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/TaskAttemptImpl.java"
    }
  }
}