{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockUnderConstructionFeature.java",
  "functionName": "addReplicaIfNotPresent",
  "functionId": "addReplicaIfNotPresent___storage-DatanodeStorageInfo__reportedBlock-Block__rState-ReplicaState",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
  "functionStartLine": 286,
  "functionEndLine": 317,
  "numCommitsSeen": 73,
  "timeTaken": 6071,
  "changeHistory": [
    "5644137adad30c84e40d2c4719627b3aabc73628",
    "164cbe643988f878f0f4100a4de51783e5b6738e",
    "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
    "e535e0f05b5fbd087c93238deb888cc985254b4c",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
    "9d382a41743831fbcfecd302ead02095f36b7f59"
  ],
  "changeHistoryShort": {
    "5644137adad30c84e40d2c4719627b3aabc73628": "Ybodychange",
    "164cbe643988f878f0f4100a4de51783e5b6738e": "Ymultichange(Yfilerename,Ymodifierchange)",
    "bdd79388f39f4f35af7decd5703eff587b0ddfb7": "Ymultichange(Yparameterchange,Ybodychange)",
    "e535e0f05b5fbd087c93238deb888cc985254b4c": "Ymultichange(Yfilerename,Ybodychange)",
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": "Yfilerename",
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": "Yfilerename",
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": "Yfilerename",
    "9d382a41743831fbcfecd302ead02095f36b7f59": "Ybodychange"
  },
  "changeHistoryDetails": {
    "5644137adad30c84e40d2c4719627b3aabc73628": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9941. Do not log StandbyException on NN, other minor logging fixes. Contributed by Arpit Agarwal.\n",
      "commitDate": "14/03/16 9:54 AM",
      "commitName": "5644137adad30c84e40d2c4719627b3aabc73628",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "10/02/16 9:24 PM",
      "commitNameOld": "19adb2bc641999b83e25ff0e107ba8c6edbad399",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 32.48,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n       Block reportedBlock, ReplicaState rState) {\n-    if (replicas \u003d\u003d null) {\n+    if (replicas.length \u003d\u003d 0) {\n       replicas \u003d new ReplicaUnderConstruction[1];\n       replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n           rState);\n     } else {\n       for (int i \u003d 0; i \u003c replicas.length; i++) {\n         DatanodeStorageInfo expected \u003d\n             replicas[i].getExpectedStorageLocation();\n         if (expected \u003d\u003d storage) {\n           replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n           return;\n         } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n             storage.getDatanodeDescriptor()) {\n           // The Datanode reported that the block is on a different storage\n           // than the one chosen by BlockPlacementPolicy. This can occur as\n           // we allow Datanodes to choose the target storage. Update our\n           // state by removing the stale entry and adding a new one.\n           replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n               rState);\n           return;\n         }\n       }\n       ReplicaUnderConstruction[] newReplicas \u003d\n           new ReplicaUnderConstruction[replicas.length + 1];\n       System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n       newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n           reportedBlock, storage, rState);\n       replicas \u003d newReplicas;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n      Block reportedBlock, ReplicaState rState) {\n    if (replicas.length \u003d\u003d 0) {\n      replicas \u003d new ReplicaUnderConstruction[1];\n      replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n          rState);\n    } else {\n      for (int i \u003d 0; i \u003c replicas.length; i++) {\n        DatanodeStorageInfo expected \u003d\n            replicas[i].getExpectedStorageLocation();\n        if (expected \u003d\u003d storage) {\n          replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n          return;\n        } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n            storage.getDatanodeDescriptor()) {\n          // The Datanode reported that the block is on a different storage\n          // than the one chosen by BlockPlacementPolicy. This can occur as\n          // we allow Datanodes to choose the target storage. Update our\n          // state by removing the stale entry and adding a new one.\n          replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n              rState);\n          return;\n        }\n      }\n      ReplicaUnderConstruction[] newReplicas \u003d\n          new ReplicaUnderConstruction[replicas.length + 1];\n      System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n      newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n          reportedBlock, storage, rState);\n      replicas \u003d newReplicas;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
      "extendedDetails": {}
    },
    "164cbe643988f878f0f4100a4de51783e5b6738e": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/15 1:02 AM",
      "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
      "commitAuthor": "Walter Su",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/15 1:02 AM",
          "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
          "commitAuthor": "Walter Su",
          "commitDateOld": "26/08/15 6:11 PM",
          "commitNameOld": "067ec8c2b14fb0929dc348b763383838e06ff8a5",
          "commitAuthorOld": "Walter Su",
          "daysBetweenCommits": 0.29,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n+  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n       Block reportedBlock, ReplicaState rState) {\n     if (replicas \u003d\u003d null) {\n       replicas \u003d new ReplicaUnderConstruction[1];\n       replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage, rState);\n     } else {\n       for (int i \u003d 0; i \u003c replicas.length; i++) {\n         DatanodeStorageInfo expected \u003d replicas[i].getExpectedStorageLocation();\n         if (expected \u003d\u003d storage) {\n           replicas[i].setBlockId(reportedBlock.getBlockId());\n           replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n           return;\n         } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n             storage.getDatanodeDescriptor()) {\n           // The Datanode reported that the block is on a different storage\n           // than the one chosen by BlockPlacementPolicy. This can occur as\n           // we allow Datanodes to choose the target storage. Update our\n           // state by removing the stale entry and adding a new one.\n           replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n               rState);\n           return;\n         }\n       }\n       ReplicaUnderConstruction[] newReplicas \u003d\n           new ReplicaUnderConstruction[replicas.length + 1];\n       System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n       newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n           reportedBlock, storage, rState);\n       replicas \u003d newReplicas;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n      Block reportedBlock, ReplicaState rState) {\n    if (replicas \u003d\u003d null) {\n      replicas \u003d new ReplicaUnderConstruction[1];\n      replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage, rState);\n    } else {\n      for (int i \u003d 0; i \u003c replicas.length; i++) {\n        DatanodeStorageInfo expected \u003d replicas[i].getExpectedStorageLocation();\n        if (expected \u003d\u003d storage) {\n          replicas[i].setBlockId(reportedBlock.getBlockId());\n          replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n          return;\n        } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n            storage.getDatanodeDescriptor()) {\n          // The Datanode reported that the block is on a different storage\n          // than the one chosen by BlockPlacementPolicy. This can occur as\n          // we allow Datanodes to choose the target storage. Update our\n          // state by removing the stale entry and adding a new one.\n          replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n              rState);\n          return;\n        }\n      }\n      ReplicaUnderConstruction[] newReplicas \u003d\n          new ReplicaUnderConstruction[replicas.length + 1];\n      System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n      newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n          reportedBlock, storage, rState);\n      replicas \u003d newReplicas;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoStripedUnderConstruction.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8909. Erasure coding: update BlockInfoContiguousUC and BlockInfoStripedUC to use BlockUnderConstructionFeature. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/15 1:02 AM",
          "commitName": "164cbe643988f878f0f4100a4de51783e5b6738e",
          "commitAuthor": "Walter Su",
          "commitDateOld": "26/08/15 6:11 PM",
          "commitNameOld": "067ec8c2b14fb0929dc348b763383838e06ff8a5",
          "commitAuthorOld": "Walter Su",
          "daysBetweenCommits": 0.29,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,31 @@\n-  public void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n+  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n       Block reportedBlock, ReplicaState rState) {\n     if (replicas \u003d\u003d null) {\n       replicas \u003d new ReplicaUnderConstruction[1];\n       replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage, rState);\n     } else {\n       for (int i \u003d 0; i \u003c replicas.length; i++) {\n         DatanodeStorageInfo expected \u003d replicas[i].getExpectedStorageLocation();\n         if (expected \u003d\u003d storage) {\n           replicas[i].setBlockId(reportedBlock.getBlockId());\n           replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n           return;\n         } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n             storage.getDatanodeDescriptor()) {\n           // The Datanode reported that the block is on a different storage\n           // than the one chosen by BlockPlacementPolicy. This can occur as\n           // we allow Datanodes to choose the target storage. Update our\n           // state by removing the stale entry and adding a new one.\n           replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n               rState);\n           return;\n         }\n       }\n       ReplicaUnderConstruction[] newReplicas \u003d\n           new ReplicaUnderConstruction[replicas.length + 1];\n       System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n       newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n           reportedBlock, storage, rState);\n       replicas \u003d newReplicas;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n      Block reportedBlock, ReplicaState rState) {\n    if (replicas \u003d\u003d null) {\n      replicas \u003d new ReplicaUnderConstruction[1];\n      replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage, rState);\n    } else {\n      for (int i \u003d 0; i \u003c replicas.length; i++) {\n        DatanodeStorageInfo expected \u003d replicas[i].getExpectedStorageLocation();\n        if (expected \u003d\u003d storage) {\n          replicas[i].setBlockId(reportedBlock.getBlockId());\n          replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n          return;\n        } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n            storage.getDatanodeDescriptor()) {\n          // The Datanode reported that the block is on a different storage\n          // than the one chosen by BlockPlacementPolicy. This can occur as\n          // we allow Datanodes to choose the target storage. Update our\n          // state by removing the stale entry and adding a new one.\n          replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n              rState);\n          return;\n        }\n      }\n      ReplicaUnderConstruction[] newReplicas \u003d\n          new ReplicaUnderConstruction[replicas.length + 1];\n      System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n      newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n          reportedBlock, storage, rState);\n      replicas \u003d newReplicas;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        }
      ]
    },
    "bdd79388f39f4f35af7decd5703eff587b0ddfb7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8928. Improvements for BlockUnderConstructionFeature: ReplicaUnderConstruction as a separate class and replicas as an array. Contributed by Jing Zhao.\n",
      "commitDate": "24/08/15 3:53 PM",
      "commitName": "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8928. Improvements for BlockUnderConstructionFeature: ReplicaUnderConstruction as a separate class and replicas as an array. Contributed by Jing Zhao.\n",
          "commitDate": "24/08/15 3:53 PM",
          "commitName": "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "19/08/15 3:11 PM",
          "commitNameOld": "4e14f7982a6e57bf08deb3b266806c2b779a157d",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.03,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,32 @@\n-  void addReplicaIfNotPresent(DatanodeStorageInfo storage, Block block,\n-      ReplicaState rState) {\n-    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n-    while (it.hasNext()) {\n-      ReplicaUnderConstruction r \u003d it.next();\n-      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n-      if (expectedLocation \u003d\u003d storage) {\n-        // Record the gen stamp from the report\n-        r.setGenerationStamp(block.getGenerationStamp());\n-        return;\n-      } else if (expectedLocation !\u003d null \u0026\u0026\n-                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n-                     storage.getDatanodeDescriptor()) {\n-        // The Datanode reported that the block is on a different storage\n-        // than the one chosen by BlockPlacementPolicy. This can occur as\n-        // we allow Datanodes to choose the target storage. Update our\n-        // state by removing the stale entry and adding a new one.\n-        it.remove();\n-        break;\n+  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n+      Block reportedBlock, ReplicaState rState) {\n+    if (replicas \u003d\u003d null) {\n+      replicas \u003d new ReplicaUnderConstruction[1];\n+      replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n+          rState);\n+    } else {\n+      for (int i \u003d 0; i \u003c replicas.length; i++) {\n+        DatanodeStorageInfo expected \u003d\n+            replicas[i].getExpectedStorageLocation();\n+        if (expected \u003d\u003d storage) {\n+          replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n+          return;\n+        } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n+            storage.getDatanodeDescriptor()) {\n+          // The Datanode reported that the block is on a different storage\n+          // than the one chosen by BlockPlacementPolicy. This can occur as\n+          // we allow Datanodes to choose the target storage. Update our\n+          // state by removing the stale entry and adding a new one.\n+          replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n+              rState);\n+          return;\n+        }\n       }\n+      ReplicaUnderConstruction[] newReplicas \u003d\n+          new ReplicaUnderConstruction[replicas.length + 1];\n+      System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n+      newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n+          reportedBlock, storage, rState);\n+      replicas \u003d newReplicas;\n     }\n-    replicas.add(new ReplicaUnderConstruction(block.getGenerationStamp(), storage, rState));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n      Block reportedBlock, ReplicaState rState) {\n    if (replicas \u003d\u003d null) {\n      replicas \u003d new ReplicaUnderConstruction[1];\n      replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n          rState);\n    } else {\n      for (int i \u003d 0; i \u003c replicas.length; i++) {\n        DatanodeStorageInfo expected \u003d\n            replicas[i].getExpectedStorageLocation();\n        if (expected \u003d\u003d storage) {\n          replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n          return;\n        } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n            storage.getDatanodeDescriptor()) {\n          // The Datanode reported that the block is on a different storage\n          // than the one chosen by BlockPlacementPolicy. This can occur as\n          // we allow Datanodes to choose the target storage. Update our\n          // state by removing the stale entry and adding a new one.\n          replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n              rState);\n          return;\n        }\n      }\n      ReplicaUnderConstruction[] newReplicas \u003d\n          new ReplicaUnderConstruction[replicas.length + 1];\n      System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n      newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n          reportedBlock, storage, rState);\n      replicas \u003d newReplicas;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldValue": "[storage-DatanodeStorageInfo, block-Block, rState-ReplicaState]",
            "newValue": "[storage-DatanodeStorageInfo, reportedBlock-Block, rState-ReplicaState]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8928. Improvements for BlockUnderConstructionFeature: ReplicaUnderConstruction as a separate class and replicas as an array. Contributed by Jing Zhao.\n",
          "commitDate": "24/08/15 3:53 PM",
          "commitName": "bdd79388f39f4f35af7decd5703eff587b0ddfb7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "19/08/15 3:11 PM",
          "commitNameOld": "4e14f7982a6e57bf08deb3b266806c2b779a157d",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 5.03,
          "commitsBetweenForRepo": 24,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,32 @@\n-  void addReplicaIfNotPresent(DatanodeStorageInfo storage, Block block,\n-      ReplicaState rState) {\n-    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n-    while (it.hasNext()) {\n-      ReplicaUnderConstruction r \u003d it.next();\n-      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n-      if (expectedLocation \u003d\u003d storage) {\n-        // Record the gen stamp from the report\n-        r.setGenerationStamp(block.getGenerationStamp());\n-        return;\n-      } else if (expectedLocation !\u003d null \u0026\u0026\n-                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n-                     storage.getDatanodeDescriptor()) {\n-        // The Datanode reported that the block is on a different storage\n-        // than the one chosen by BlockPlacementPolicy. This can occur as\n-        // we allow Datanodes to choose the target storage. Update our\n-        // state by removing the stale entry and adding a new one.\n-        it.remove();\n-        break;\n+  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n+      Block reportedBlock, ReplicaState rState) {\n+    if (replicas \u003d\u003d null) {\n+      replicas \u003d new ReplicaUnderConstruction[1];\n+      replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n+          rState);\n+    } else {\n+      for (int i \u003d 0; i \u003c replicas.length; i++) {\n+        DatanodeStorageInfo expected \u003d\n+            replicas[i].getExpectedStorageLocation();\n+        if (expected \u003d\u003d storage) {\n+          replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n+          return;\n+        } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n+            storage.getDatanodeDescriptor()) {\n+          // The Datanode reported that the block is on a different storage\n+          // than the one chosen by BlockPlacementPolicy. This can occur as\n+          // we allow Datanodes to choose the target storage. Update our\n+          // state by removing the stale entry and adding a new one.\n+          replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n+              rState);\n+          return;\n+        }\n       }\n+      ReplicaUnderConstruction[] newReplicas \u003d\n+          new ReplicaUnderConstruction[replicas.length + 1];\n+      System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n+      newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n+          reportedBlock, storage, rState);\n+      replicas \u003d newReplicas;\n     }\n-    replicas.add(new ReplicaUnderConstruction(block.getGenerationStamp(), storage, rState));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n      Block reportedBlock, ReplicaState rState) {\n    if (replicas \u003d\u003d null) {\n      replicas \u003d new ReplicaUnderConstruction[1];\n      replicas[0] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n          rState);\n    } else {\n      for (int i \u003d 0; i \u003c replicas.length; i++) {\n        DatanodeStorageInfo expected \u003d\n            replicas[i].getExpectedStorageLocation();\n        if (expected \u003d\u003d storage) {\n          replicas[i].setGenerationStamp(reportedBlock.getGenerationStamp());\n          return;\n        } else if (expected !\u003d null \u0026\u0026 expected.getDatanodeDescriptor() \u003d\u003d\n            storage.getDatanodeDescriptor()) {\n          // The Datanode reported that the block is on a different storage\n          // than the one chosen by BlockPlacementPolicy. This can occur as\n          // we allow Datanodes to choose the target storage. Update our\n          // state by removing the stale entry and adding a new one.\n          replicas[i] \u003d new ReplicaUnderConstruction(reportedBlock, storage,\n              rState);\n          return;\n        }\n      }\n      ReplicaUnderConstruction[] newReplicas \u003d\n          new ReplicaUnderConstruction[replicas.length + 1];\n      System.arraycopy(replicas, 0, newReplicas, 0, replicas.length);\n      newReplicas[newReplicas.length - 1] \u003d new ReplicaUnderConstruction(\n          reportedBlock, storage, rState);\n      replicas \u003d newReplicas;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "e535e0f05b5fbd087c93238deb888cc985254b4c": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
      "commitDate": "17/08/15 11:28 AM",
      "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
          "commitDate": "17/08/15 11:28 AM",
          "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/08/15 11:04 AM",
          "commitNameOld": "456e901a4c5c639267ee87b8e5f1319f256d20c2",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,23 @@\n-  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n-                     Block block,\n-                     ReplicaState rState) {\n+  void addReplicaIfNotPresent(DatanodeStorageInfo storage, Block block,\n+      ReplicaState rState) {\n     Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n     while (it.hasNext()) {\n       ReplicaUnderConstruction r \u003d it.next();\n       DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n-      if(expectedLocation \u003d\u003d storage) {\n+      if (expectedLocation \u003d\u003d storage) {\n         // Record the gen stamp from the report\n         r.setGenerationStamp(block.getGenerationStamp());\n         return;\n       } else if (expectedLocation !\u003d null \u0026\u0026\n                  expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                      storage.getDatanodeDescriptor()) {\n-\n         // The Datanode reported that the block is on a different storage\n         // than the one chosen by BlockPlacementPolicy. This can occur as\n         // we allow Datanodes to choose the target storage. Update our\n         // state by removing the stale entry and adding a new one.\n         it.remove();\n         break;\n       }\n     }\n-    replicas.add(new ReplicaUnderConstruction(block, storage, rState));\n+    replicas.add(new ReplicaUnderConstruction(block.getGenerationStamp(), storage, rState));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage, Block block,\n      ReplicaState rState) {\n    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n    while (it.hasNext()) {\n      ReplicaUnderConstruction r \u003d it.next();\n      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n      if (expectedLocation \u003d\u003d storage) {\n        // Record the gen stamp from the report\n        r.setGenerationStamp(block.getGenerationStamp());\n        return;\n      } else if (expectedLocation !\u003d null \u0026\u0026\n                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                     storage.getDatanodeDescriptor()) {\n        // The Datanode reported that the block is on a different storage\n        // than the one chosen by BlockPlacementPolicy. This can occur as\n        // we allow Datanodes to choose the target storage. Update our\n        // state by removing the stale entry and adding a new one.\n        it.remove();\n        break;\n      }\n    }\n    replicas.add(new ReplicaUnderConstruction(block.getGenerationStamp(), storage, rState));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8801. Convert BlockInfoUnderConstruction as a feature. Contributed by Jing Zhao.\n",
          "commitDate": "17/08/15 11:28 AM",
          "commitName": "e535e0f05b5fbd087c93238deb888cc985254b4c",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/08/15 11:04 AM",
          "commitNameOld": "456e901a4c5c639267ee87b8e5f1319f256d20c2",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,23 @@\n-  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n-                     Block block,\n-                     ReplicaState rState) {\n+  void addReplicaIfNotPresent(DatanodeStorageInfo storage, Block block,\n+      ReplicaState rState) {\n     Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n     while (it.hasNext()) {\n       ReplicaUnderConstruction r \u003d it.next();\n       DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n-      if(expectedLocation \u003d\u003d storage) {\n+      if (expectedLocation \u003d\u003d storage) {\n         // Record the gen stamp from the report\n         r.setGenerationStamp(block.getGenerationStamp());\n         return;\n       } else if (expectedLocation !\u003d null \u0026\u0026\n                  expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                      storage.getDatanodeDescriptor()) {\n-\n         // The Datanode reported that the block is on a different storage\n         // than the one chosen by BlockPlacementPolicy. This can occur as\n         // we allow Datanodes to choose the target storage. Update our\n         // state by removing the stale entry and adding a new one.\n         it.remove();\n         break;\n       }\n     }\n-    replicas.add(new ReplicaUnderConstruction(block, storage, rState));\n+    replicas.add(new ReplicaUnderConstruction(block.getGenerationStamp(), storage, rState));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage, Block block,\n      ReplicaState rState) {\n    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n    while (it.hasNext()) {\n      ReplicaUnderConstruction r \u003d it.next();\n      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n      if (expectedLocation \u003d\u003d storage) {\n        // Record the gen stamp from the report\n        r.setGenerationStamp(block.getGenerationStamp());\n        return;\n      } else if (expectedLocation !\u003d null \u0026\u0026\n                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                     storage.getDatanodeDescriptor()) {\n        // The Datanode reported that the block is on a different storage\n        // than the one chosen by BlockPlacementPolicy. This can occur as\n        // we allow Datanodes to choose the target storage. Update our\n        // state by removing the stale entry and adding a new one.\n        it.remove();\n        break;\n      }\n    }\n    replicas.add(new ReplicaUnderConstruction(block.getGenerationStamp(), storage, rState));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockUnderConstructionFeature.java",
          "extendedDetails": {}
        }
      ]
    },
    "f4c523b69ba55b1fd35e8995c3011a9f546ac835": {
      "type": "Yfilerename",
      "commitMessage": "Revert \"HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\"\n\nThis reverts commit c17439c2ddd921b63b1635e6f1cba634b8da8557.\n",
      "commitDate": "06/08/15 10:21 AM",
      "commitName": "f4c523b69ba55b1fd35e8995c3011a9f546ac835",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/08/15 10:21 AM",
      "commitNameOld": "663eba0ab1c73b45f98e46ffc87ad8fd91584046",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n                     Block block,\n                     ReplicaState rState) {\n    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n    while (it.hasNext()) {\n      ReplicaUnderConstruction r \u003d it.next();\n      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n      if(expectedLocation \u003d\u003d storage) {\n        // Record the gen stamp from the report\n        r.setGenerationStamp(block.getGenerationStamp());\n        return;\n      } else if (expectedLocation !\u003d null \u0026\u0026\n                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                     storage.getDatanodeDescriptor()) {\n\n        // The Datanode reported that the block is on a different storage\n        // than the one chosen by BlockPlacementPolicy. This can occur as\n        // we allow Datanodes to choose the target storage. Update our\n        // state by removing the stale entry and adding a new one.\n        it.remove();\n        break;\n      }\n    }\n    replicas.add(new ReplicaUnderConstruction(block, storage, rState));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java"
      }
    },
    "c17439c2ddd921b63b1635e6f1cba634b8da8557": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8499. Refactor BlockInfo class hierarchy with static helper class. Contributed by Zhe Zhang.\n",
      "commitDate": "12/06/15 11:38 AM",
      "commitName": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/15 11:28 AM",
      "commitNameOld": "46b0b4179c1ef1a1510eb04e40b11968a24df485",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n                     Block block,\n                     ReplicaState rState) {\n    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n    while (it.hasNext()) {\n      ReplicaUnderConstruction r \u003d it.next();\n      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n      if(expectedLocation \u003d\u003d storage) {\n        // Record the gen stamp from the report\n        r.setGenerationStamp(block.getGenerationStamp());\n        return;\n      } else if (expectedLocation !\u003d null \u0026\u0026\n                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                     storage.getDatanodeDescriptor()) {\n\n        // The Datanode reported that the block is on a different storage\n        // than the one chosen by BlockPlacementPolicy. This can occur as\n        // we allow Datanodes to choose the target storage. Update our\n        // state by removing the stale entry and adding a new one.\n        it.remove();\n        break;\n      }\n    }\n    replicas.add(new ReplicaUnderConstruction(block, storage, rState));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java"
      }
    },
    "1382ae525c67bf95d8f3a436b547dbc72cfbb177": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-7743. Code cleanup of BlockInfo and rename BlockInfo to BlockInfoContiguous. Contributed by Jing Zhao.\n",
      "commitDate": "08/02/15 11:51 AM",
      "commitName": "1382ae525c67bf95d8f3a436b547dbc72cfbb177",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "07/02/15 10:43 AM",
      "commitNameOld": "ef01768333ec0e59e7d747864183835e756a7bf6",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 1.05,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n                     Block block,\n                     ReplicaState rState) {\n    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n    while (it.hasNext()) {\n      ReplicaUnderConstruction r \u003d it.next();\n      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n      if(expectedLocation \u003d\u003d storage) {\n        // Record the gen stamp from the report\n        r.setGenerationStamp(block.getGenerationStamp());\n        return;\n      } else if (expectedLocation !\u003d null \u0026\u0026\n                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                     storage.getDatanodeDescriptor()) {\n\n        // The Datanode reported that the block is on a different storage\n        // than the one chosen by BlockPlacementPolicy. This can occur as\n        // we allow Datanodes to choose the target storage. Update our\n        // state by removing the stale entry and adding a new one.\n        it.remove();\n        break;\n      }\n    }\n    replicas.add(new ReplicaUnderConstruction(block, storage, rState));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoContiguousUnderConstruction.java"
      }
    },
    "9d382a41743831fbcfecd302ead02095f36b7f59": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5747. Fix NPEs in BlockManager. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557289 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 4:05 PM",
      "commitName": "9d382a41743831fbcfecd302ead02095f36b7f59",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "03/12/13 9:33 AM",
      "commitNameOld": "674d51e62e8337d2f4712326eab99f9c83bb652a",
      "commitAuthorOld": "",
      "daysBetweenCommits": 38.27,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n   void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n                      Block block,\n                      ReplicaState rState) {\n     Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n     while (it.hasNext()) {\n       ReplicaUnderConstruction r \u003d it.next();\n-      if(r.getExpectedStorageLocation() \u003d\u003d storage) {\n+      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n+      if(expectedLocation \u003d\u003d storage) {\n         // Record the gen stamp from the report\n         r.setGenerationStamp(block.getGenerationStamp());\n         return;\n-      } else if (r.getExpectedStorageLocation().getDatanodeDescriptor() \u003d\u003d\n-          storage.getDatanodeDescriptor()) {\n+      } else if (expectedLocation !\u003d null \u0026\u0026\n+                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n+                     storage.getDatanodeDescriptor()) {\n \n         // The Datanode reported that the block is on a different storage\n         // than the one chosen by BlockPlacementPolicy. This can occur as\n         // we allow Datanodes to choose the target storage. Update our\n         // state by removing the stale entry and adding a new one.\n         it.remove();\n         break;\n       }\n     }\n     replicas.add(new ReplicaUnderConstruction(block, storage, rState));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addReplicaIfNotPresent(DatanodeStorageInfo storage,\n                     Block block,\n                     ReplicaState rState) {\n    Iterator\u003cReplicaUnderConstruction\u003e it \u003d replicas.iterator();\n    while (it.hasNext()) {\n      ReplicaUnderConstruction r \u003d it.next();\n      DatanodeStorageInfo expectedLocation \u003d r.getExpectedStorageLocation();\n      if(expectedLocation \u003d\u003d storage) {\n        // Record the gen stamp from the report\n        r.setGenerationStamp(block.getGenerationStamp());\n        return;\n      } else if (expectedLocation !\u003d null \u0026\u0026\n                 expectedLocation.getDatanodeDescriptor() \u003d\u003d\n                     storage.getDatanodeDescriptor()) {\n\n        // The Datanode reported that the block is on a different storage\n        // than the one chosen by BlockPlacementPolicy. This can occur as\n        // we allow Datanodes to choose the target storage. Update our\n        // state by removing the stale entry and adding a new one.\n        it.remove();\n        break;\n      }\n    }\n    replicas.add(new ReplicaUnderConstruction(block, storage, rState));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockInfoUnderConstruction.java",
      "extendedDetails": {}
    }
  }
}