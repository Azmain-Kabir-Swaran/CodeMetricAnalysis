{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HadoopUncaughtExceptionHandler.java",
  "functionName": "uncaughtException",
  "functionId": "uncaughtException___thread-Thread__exception-Throwable",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/HadoopUncaughtExceptionHandler.java",
  "functionStartLine": 84,
  "functionEndLine": 127,
  "numCommitsSeen": 1,
  "timeTaken": 693,
  "changeHistory": [
    "373bb4931fb392e3ca6bfd78992887e5a405e186"
  ],
  "changeHistoryShort": {
    "373bb4931fb392e3ca6bfd78992887e5a405e186": "Yintroduced"
  },
  "changeHistoryDetails": {
    "373bb4931fb392e3ca6bfd78992887e5a405e186": {
      "type": "Yintroduced",
      "commitMessage": "YARN-679. Add an entry point that can start any Yarn service. Contributed by Steve Loughran.\n",
      "commitDate": "28/04/17 10:45 AM",
      "commitName": "373bb4931fb392e3ca6bfd78992887e5a405e186",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,44 @@\n+  public void uncaughtException(Thread thread, Throwable exception) {\n+    if (ShutdownHookManager.get().isShutdownInProgress()) {\n+      LOG.error(\"Thread {} threw an error during shutdown: {}.\",\n+          thread.toString(),\n+          exception,\n+          exception);\n+    } else if (exception instanceof Error) {\n+      try {\n+        LOG.error(\"Thread {} threw an error: {}. Shutting down\",\n+            thread.toString(),\n+            exception,\n+            exception);\n+      } catch (Throwable err) {\n+        // We don\u0027t want to not exit because of an issue with logging\n+      }\n+      if (exception instanceof OutOfMemoryError) {\n+        // After catching an OOM java says it is undefined behavior, so don\u0027t\n+        // even try to clean up or we can get stuck on shutdown.\n+        try {\n+          System.err.println(\"Halting due to Out Of Memory Error...\");\n+        } catch (Throwable err) {\n+          // Again we don\u0027t want to exit because of logging issues.\n+        }\n+        ExitUtil.haltOnOutOfMemory((OutOfMemoryError) exception);\n+      } else {\n+        // error other than OutOfMemory\n+        ExitUtil.ExitException ee \u003d\n+            ServiceLauncher.convertToExitException(exception);\n+        ExitUtil.terminate(ee.status, ee);\n+      }\n+    } else {\n+      // simple exception in a thread. There\u0027s a policy decision here:\n+      // terminate the process vs. keep going after a thread has failed\n+      // base implementation: do nothing but log\n+      LOG.error(\"Thread {} threw an exception: {}\",\n+          thread.toString(),\n+          exception,\n+          exception);\n+      if (delegate !\u003d null) {\n+        delegate.uncaughtException(thread, exception);\n+      }\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void uncaughtException(Thread thread, Throwable exception) {\n    if (ShutdownHookManager.get().isShutdownInProgress()) {\n      LOG.error(\"Thread {} threw an error during shutdown: {}.\",\n          thread.toString(),\n          exception,\n          exception);\n    } else if (exception instanceof Error) {\n      try {\n        LOG.error(\"Thread {} threw an error: {}. Shutting down\",\n            thread.toString(),\n            exception,\n            exception);\n      } catch (Throwable err) {\n        // We don\u0027t want to not exit because of an issue with logging\n      }\n      if (exception instanceof OutOfMemoryError) {\n        // After catching an OOM java says it is undefined behavior, so don\u0027t\n        // even try to clean up or we can get stuck on shutdown.\n        try {\n          System.err.println(\"Halting due to Out Of Memory Error...\");\n        } catch (Throwable err) {\n          // Again we don\u0027t want to exit because of logging issues.\n        }\n        ExitUtil.haltOnOutOfMemory((OutOfMemoryError) exception);\n      } else {\n        // error other than OutOfMemory\n        ExitUtil.ExitException ee \u003d\n            ServiceLauncher.convertToExitException(exception);\n        ExitUtil.terminate(ee.status, ee);\n      }\n    } else {\n      // simple exception in a thread. There\u0027s a policy decision here:\n      // terminate the process vs. keep going after a thread has failed\n      // base implementation: do nothing but log\n      LOG.error(\"Thread {} threw an exception: {}\",\n          thread.toString(),\n          exception,\n          exception);\n      if (delegate !\u003d null) {\n        delegate.uncaughtException(thread, exception);\n      }\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/HadoopUncaughtExceptionHandler.java"
    }
  }
}