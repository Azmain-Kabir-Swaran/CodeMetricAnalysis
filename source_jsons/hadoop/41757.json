{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractYarnScheduler.java",
  "functionName": "handleIncreaseRequests",
  "functionId": "handleIncreaseRequests___applicationAttempt-SchedulerApplicationAttempt__updateContainerRequests-List__UpdateContainerRequest__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
  "functionStartLine": 1344,
  "functionEndLine": 1372,
  "numCommitsSeen": 184,
  "timeTaken": 3511,
  "changeHistory": [
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4"
  ],
  "changeHistoryShort": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Yrename",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Yrename",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "15/02/17 11:16 PM",
      "commitNameOld": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 12.47,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n-  private void handlePromotionRequests(\n+  private void handleIncreaseRequests(\n       SchedulerApplicationAttempt applicationAttempt,\n       List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n     for (UpdateContainerRequest uReq : updateContainerRequests) {\n       RMContainer rmContainer \u003d\n           rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n       // Check if this is a container update\n       // And not in the middle of a Demotion\n       if (rmContainer !\u003d null) {\n         // Check if this is an executionType change request\n         // If so, fix the rr to make it look like a normal rr\n         // with relaxLocality\u003dfalse and numContainers\u003d1\n         SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n             .getSchedulerNode(rmContainer.getContainer().getNodeId());\n \n         // Add only if no outstanding promote requests exist.\n         if (!applicationAttempt.getUpdateContext()\n             .checkAndAddToOutstandingIncreases(\n                 rmContainer, schedulerNode, uReq)) {\n           applicationAttempt.addToUpdateContainerErrors(\n               UpdateContainerError.newInstance(\n               RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n         }\n       } else {\n         LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n             + uReq.getContainerId() + \"]\");\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleIncreaseRequests(\n      SchedulerApplicationAttempt applicationAttempt,\n      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n    for (UpdateContainerRequest uReq : updateContainerRequests) {\n      RMContainer rmContainer \u003d\n          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n      // Check if this is a container update\n      // And not in the middle of a Demotion\n      if (rmContainer !\u003d null) {\n        // Check if this is an executionType change request\n        // If so, fix the rr to make it look like a normal rr\n        // with relaxLocality\u003dfalse and numContainers\u003d1\n        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n\n        // Add only if no outstanding promote requests exist.\n        if (!applicationAttempt.getUpdateContext()\n            .checkAndAddToOutstandingIncreases(\n                rmContainer, schedulerNode, uReq)) {\n          applicationAttempt.addToUpdateContainerErrors(\n              UpdateContainerError.newInstance(\n              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n        }\n      } else {\n        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n            + uReq.getContainerId() + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java",
      "extendedDetails": {
        "oldValue": "handlePromotionRequests",
        "newValue": "handleIncreaseRequests"
      }
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,29 @@\n+  private void handlePromotionRequests(\n+      SchedulerApplicationAttempt applicationAttempt,\n+      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n+    for (UpdateContainerRequest uReq : updateContainerRequests) {\n+      RMContainer rmContainer \u003d\n+          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n+      // Check if this is a container update\n+      // And not in the middle of a Demotion\n+      if (rmContainer !\u003d null) {\n+        // Check if this is an executionType change request\n+        // If so, fix the rr to make it look like a normal rr\n+        // with relaxLocality\u003dfalse and numContainers\u003d1\n+        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n+            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n+\n+        // Add only if no outstanding promote requests exist.\n+        if (!applicationAttempt.getUpdateContext()\n+            .checkAndAddToOutstandingIncreases(\n+                rmContainer, schedulerNode, uReq)) {\n+          applicationAttempt.addToUpdateContainerErrors(\n+              UpdateContainerError.newInstance(\n+              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n+        }\n+      } else {\n+        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n+            + uReq.getContainerId() + \"]\");\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handlePromotionRequests(\n      SchedulerApplicationAttempt applicationAttempt,\n      List\u003cUpdateContainerRequest\u003e updateContainerRequests) {\n    for (UpdateContainerRequest uReq : updateContainerRequests) {\n      RMContainer rmContainer \u003d\n          rmContext.getScheduler().getRMContainer(uReq.getContainerId());\n      // Check if this is a container update\n      // And not in the middle of a Demotion\n      if (rmContainer !\u003d null) {\n        // Check if this is an executionType change request\n        // If so, fix the rr to make it look like a normal rr\n        // with relaxLocality\u003dfalse and numContainers\u003d1\n        SchedulerNode schedulerNode \u003d rmContext.getScheduler()\n            .getSchedulerNode(rmContainer.getContainer().getNodeId());\n\n        // Add only if no outstanding promote requests exist.\n        if (!applicationAttempt.getUpdateContext()\n            .checkAndAddToOutstandingIncreases(\n                rmContainer, schedulerNode, uReq)) {\n          applicationAttempt.addToUpdateContainerErrors(\n              UpdateContainerError.newInstance(\n              RMServerUtils.UPDATE_OUTSTANDING_ERROR, uReq));\n        }\n      } else {\n        LOG.warn(\"Cannot promote non-existent (or completed) Container [\"\n            + uReq.getContainerId() + \"]\");\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/AbstractYarnScheduler.java"
    }
  }
}