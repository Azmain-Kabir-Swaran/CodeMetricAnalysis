{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "assignContainer",
  "functionId": "assignContainer___node-FiCaSchedulerNode__application-FifoAppAttempt__schedulerKey-SchedulerRequestKey__assignableContainers-int__capability-Resource__type-NodeType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 672,
  "functionEndLine": 718,
  "numCommitsSeen": 416,
  "timeTaken": 13572,
  "changeHistory": [
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "424fd9494f144c035fdef8c533be51e2027ad8d9",
    "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
    "a2c42330047bf955a6a585dcddf798920d4c8640",
    "b16c5638b5190c56f9d854d873589cb5c11c8b32",
    "ca8024673178fa1c80224b390dfba932921693d9",
    "fbb55784d93e1a819daf55d936e864d344579cbf",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ymultichange(Yparameterchange,Ybodychange)",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yparameterchange",
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Ybodychange",
    "d0a5e43de73119e57d12f2ec89a9d1a192cde204": "Ybodychange",
    "a2c42330047bf955a6a585dcddf798920d4c8640": "Ybodychange",
    "b16c5638b5190c56f9d854d873589cb5c11c8b32": "Ybodychange",
    "ca8024673178fa1c80224b390dfba932921693d9": "Ybodychange",
    "fbb55784d93e1a819daf55d936e864d344579cbf": "Ybodychange",
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ybodychange",
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": "Ybodychange",
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,47 @@\n   private int assignContainer(FiCaSchedulerNode node, FifoAppAttempt application,\n       SchedulerRequestKey schedulerKey, int assignableContainers,\n-      ResourceRequest request, NodeType type) {\n+      Resource capability, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n         \" assignableContainers\u003d\" + assignableContainers +\n-        \" request\u003d\" + request + \" type\u003d\" + type);\n-    Resource capability \u003d request.getCapability();\n+        \" capability\u003d\" + capability + \" type\u003d\" + type);\n \n     // TODO: A buggy application with this zero would crash the scheduler.\n     int availableContainers \u003d\n         (int) (node.getUnallocatedResource().getMemorySize() /\n                 capability.getMemorySize());\n     int assignedContainers \u003d\n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability,\n             schedulerKey.getPriority(), null,\n             schedulerKey.getAllocationRequestId());\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d application.allocate(type, node, schedulerKey,\n-            request, container);\n+            container);\n \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FifoAppAttempt application,\n      SchedulerRequestKey schedulerKey, int assignableContainers,\n      Resource capability, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n        \" assignableContainers\u003d\" + assignableContainers +\n        \" capability\u003d\" + capability + \" type\u003d\" + type);\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d\n        (int) (node.getUnallocatedResource().getMemorySize() /\n                capability.getMemorySize());\n    int assignedContainers \u003d\n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability,\n            schedulerKey.getPriority(), null,\n            schedulerKey.getAllocationRequestId());\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d application.allocate(type, node, schedulerKey,\n            container);\n\n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[node-FiCaSchedulerNode, application-FifoAppAttempt, schedulerKey-SchedulerRequestKey, assignableContainers-int, request-ResourceRequest, type-NodeType]",
            "newValue": "[node-FiCaSchedulerNode, application-FifoAppAttempt, schedulerKey-SchedulerRequestKey, assignableContainers-int, capability-Resource, type-NodeType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
          "commitDate": "06/01/17 9:59 AM",
          "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.98,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,47 @@\n   private int assignContainer(FiCaSchedulerNode node, FifoAppAttempt application,\n       SchedulerRequestKey schedulerKey, int assignableContainers,\n-      ResourceRequest request, NodeType type) {\n+      Resource capability, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n         \" assignableContainers\u003d\" + assignableContainers +\n-        \" request\u003d\" + request + \" type\u003d\" + type);\n-    Resource capability \u003d request.getCapability();\n+        \" capability\u003d\" + capability + \" type\u003d\" + type);\n \n     // TODO: A buggy application with this zero would crash the scheduler.\n     int availableContainers \u003d\n         (int) (node.getUnallocatedResource().getMemorySize() /\n                 capability.getMemorySize());\n     int assignedContainers \u003d\n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability,\n             schedulerKey.getPriority(), null,\n             schedulerKey.getAllocationRequestId());\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d application.allocate(type, node, schedulerKey,\n-            request, container);\n+            container);\n \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FifoAppAttempt application,\n      SchedulerRequestKey schedulerKey, int assignableContainers,\n      Resource capability, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n        \" assignableContainers\u003d\" + assignableContainers +\n        \" capability\u003d\" + capability + \" type\u003d\" + type);\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d\n        (int) (node.getUnallocatedResource().getMemorySize() /\n                capability.getMemorySize());\n    int assignedContainers \u003d\n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability,\n            schedulerKey.getPriority(), null,\n            schedulerKey.getAllocationRequestId());\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d application.allocate(type, node, schedulerKey,\n            container);\n\n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/10/16 9:17 PM",
      "commitNameOld": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.58,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n+  private int assignContainer(FiCaSchedulerNode node, FifoAppAttempt application,\n       SchedulerRequestKey schedulerKey, int assignableContainers,\n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     // TODO: A buggy application with this zero would crash the scheduler.\n     int availableContainers \u003d\n         (int) (node.getUnallocatedResource().getMemorySize() /\n                 capability.getMemorySize());\n     int assignedContainers \u003d\n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability,\n             schedulerKey.getPriority(), null,\n             schedulerKey.getAllocationRequestId());\n         \n         // Allocate!\n         \n         // Inform the application\n-        RMContainer rmContainer \u003d\n-            application.allocate(type, node, schedulerKey, request, container);\n+        RMContainer rmContainer \u003d application.allocate(type, node, schedulerKey,\n+            request, container);\n         \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FifoAppAttempt application,\n      SchedulerRequestKey schedulerKey, int assignableContainers,\n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d\n        (int) (node.getUnallocatedResource().getMemorySize() /\n                capability.getMemorySize());\n    int assignedContainers \u003d\n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability,\n            schedulerKey.getPriority(), null,\n            schedulerKey.getAllocationRequestId());\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d application.allocate(type, node, schedulerKey,\n            request, container);\n        \n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, schedulerKey-SchedulerRequestKey, assignableContainers-int, request-ResourceRequest, type-NodeType]",
        "newValue": "[node-FiCaSchedulerNode, application-FifoAppAttempt, schedulerKey-SchedulerRequestKey, assignableContainers-int, request-ResourceRequest, type-NodeType]"
      }
    },
    "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4888. Changes in scheduler to identify resource-requests explicitly by allocation-id. (Subru Krishnan via wangda)\n",
      "commitDate": "05/08/16 10:43 AM",
      "commitName": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/16 2:54 PM",
      "commitNameOld": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 9.83,
      "commitsBetweenForRepo": 81,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n       SchedulerRequestKey schedulerKey, int assignableContainers,\n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     // TODO: A buggy application with this zero would crash the scheduler.\n     int availableContainers \u003d\n         (int) (node.getUnallocatedResource().getMemorySize() /\n                 capability.getMemorySize());\n     int assignedContainers \u003d\n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n-        Container container \u003d\n-            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-              .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n+        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n+            node.getRMNode().getHttpAddress(), capability,\n+            schedulerKey.getPriority(), null,\n+            schedulerKey.getAllocationRequestId());\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, schedulerKey, request, container);\n         \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n      SchedulerRequestKey schedulerKey, int assignableContainers,\n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d\n        (int) (node.getUnallocatedResource().getMemorySize() /\n                capability.getMemorySize());\n    int assignedContainers \u003d\n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability,\n            schedulerKey.getPriority(), null,\n            schedulerKey.getAllocationRequestId());\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, schedulerKey, request, container);\n        \n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n-      Priority priority, int assignableContainers, \n+      SchedulerRequestKey schedulerKey, int assignableContainers,\n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n-        \" priority\u003d\" + priority.getPriority() + \n+        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     // TODO: A buggy application with this zero would crash the scheduler.\n     int availableContainers \u003d\n         (int) (node.getUnallocatedResource().getMemorySize() /\n                 capability.getMemorySize());\n     int assignedContainers \u003d\n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-              .getHttpAddress(), capability, priority, null);\n+              .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n-            application.allocate(type, node, priority, request, container);\n+            application.allocate(type, node, schedulerKey, request, container);\n         \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n      SchedulerRequestKey schedulerKey, int assignableContainers,\n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d\n        (int) (node.getUnallocatedResource().getMemorySize() /\n                capability.getMemorySize());\n    int assignedContainers \u003d\n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, schedulerKey, request, container);\n        \n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, assignableContainers-int, request-ResourceRequest, type-NodeType]",
            "newValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, schedulerKey-SchedulerRequestKey, assignableContainers-int, request-ResourceRequest, type-NodeType]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "07/06/16 3:06 PM",
          "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 48.99,
          "commitsBetweenForRepo": 441,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,47 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n-      Priority priority, int assignableContainers, \n+      SchedulerRequestKey schedulerKey, int assignableContainers,\n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n-        \" priority\u003d\" + priority.getPriority() + \n+        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     // TODO: A buggy application with this zero would crash the scheduler.\n     int availableContainers \u003d\n         (int) (node.getUnallocatedResource().getMemorySize() /\n                 capability.getMemorySize());\n     int assignedContainers \u003d\n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-              .getHttpAddress(), capability, priority, null);\n+              .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n-            application.allocate(type, node, priority, request, container);\n+            application.allocate(type, node, schedulerKey, request, container);\n         \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n      SchedulerRequestKey schedulerKey, int assignableContainers,\n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + schedulerKey.getPriority().getPriority() +\n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d\n        (int) (node.getUnallocatedResource().getMemorySize() /\n                capability.getMemorySize());\n    int assignedContainers \u003d\n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, schedulerKey.getPriority(), null);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, schedulerKey, request, container);\n        \n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "05/05/16 12:56 PM",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 23.83,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n-  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n+  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     // TODO: A buggy application with this zero would crash the scheduler.\n-    int availableContainers \u003d node.getUnallocatedResource().getMemory() /\n-        capability.getMemory();\n-    int assignedContainers \u003d \n+    int availableContainers \u003d\n+        (int) (node.getUnallocatedResource().getMemorySize() /\n+                capability.getMemorySize());\n+    int assignedContainers \u003d\n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n               .getHttpAddress(), capability, priority, null);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application,\n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d\n        (int) (node.getUnallocatedResource().getMemorySize() /\n                capability.getMemorySize());\n    int assignedContainers \u003d\n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, priority, null);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "23/02/16 3:30 AM",
      "commitNameOld": "9ed17f181d96b8719a0ef54a129081948781d57e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.25,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,46 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n-    int availableContainers \u003d \n-      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n-                                                                        // application\n-                                                                        // with this\n-                                                                        // zero would\n-                                                                        // crash the\n-                                                                        // scheduler.\n+    // TODO: A buggy application with this zero would crash the scheduler.\n+    int availableContainers \u003d node.getUnallocatedResource().getMemory() /\n+        capability.getMemory();\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n               .getHttpAddress(), capability, priority, null);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n         increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    // TODO: A buggy application with this zero would crash the scheduler.\n    int availableContainers \u003d node.getUnallocatedResource().getMemory() /\n        capability.getMemory();\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, priority, null);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/05/14 12:33 PM",
      "commitNameOld": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 8.32,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,50 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n \n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n               .getHttpAddress(), capability, priority, null);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n-        node.allocateContainer(application.getApplicationId(), \n-            rmContainer);\n+        node.allocateContainer(rmContainer);\n \n         // Update usage for this container\n-        Resources.addTo(usedResource, capability);\n+        increaseUsedResources(rmContainer);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, priority, null);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(rmContainer);\n\n        // Update usage for this container\n        increaseUsedResources(rmContainer);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "d0a5e43de73119e57d12f2ec89a9d1a192cde204": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1417. Modified RM to generate container-tokens not at creation time, but at allocation time so as to prevent RM\nfrom shelling out containers with expired tokens. Contributed by Omkar Vinit Joshi and Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/02/14 2:02 PM",
      "commitName": "d0a5e43de73119e57d12f2ec89a9d1a192cde204",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/01/14 8:03 PM",
      "commitNameOld": "1079c371289cd31478ed4bc123c1c4dd846c76ee",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 12.75,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,51 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n-        Token containerToken \u003d null;\n-\n-        containerToken \u003d\n-            this.rmContext.getContainerTokenSecretManager()\n-              .createContainerToken(containerId, nodeId, application.getUser(),\n-                capability);\n-        if (containerToken \u003d\u003d null) {\n-          return i; // Try again later.\n-        }\n \n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n-              .getHttpAddress(), capability, priority, containerToken);\n+              .getHttpAddress(), capability, priority, null);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, priority, null);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "a2c42330047bf955a6a585dcddf798920d4c8640": {
      "type": "Ybodychange",
      "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 2:43 PM",
      "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/05/13 9:59 PM",
      "commitNameOld": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 2.7,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n-        ContainerToken containerToken \u003d null;\n+        Token containerToken \u003d null;\n \n         containerToken \u003d\n             this.rmContext.getContainerTokenSecretManager()\n               .createContainerToken(containerId, nodeId, application.getUser(),\n                 capability);\n         if (containerToken \u003d\u003d null) {\n           return i; // Try again later.\n         }\n \n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n               .getHttpAddress(), capability, priority, containerToken);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        Token containerToken \u003d null;\n\n        containerToken \u003d\n            this.rmContext.getContainerTokenSecretManager()\n              .createContainerToken(containerId, nodeId, application.getUser(),\n                capability);\n        if (containerToken \u003d\u003d null) {\n          return i; // Try again later.\n        }\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, priority, containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "b16c5638b5190c56f9d854d873589cb5c11c8b32": {
      "type": "Ybodychange",
      "commitMessage": "YARN-719. Move RMIdentifier from Container to ContainerTokenIdentifier. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487741 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/13 9:59 PM",
      "commitName": "b16c5638b5190c56f9d854d873589cb5c11c8b32",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "16/05/13 11:36 PM",
      "commitNameOld": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.93,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n         ContainerToken containerToken \u003d null;\n \n         containerToken \u003d\n             this.rmContext.getContainerTokenSecretManager()\n-                .createContainerToken(containerId, nodeId,\n-                    application.getUser(), capability);\n+              .createContainerToken(containerId, nodeId, application.getUser(),\n+                capability);\n         if (containerToken \u003d\u003d null) {\n           return i; // Try again later.\n         }\n \n         // Create the container\n-        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n-            node.getRMNode().getHttpAddress(), capability, priority,\n-            containerToken, ResourceManager.clusterTimeStamp);\n+        Container container \u003d\n+            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n+              .getHttpAddress(), capability, priority, containerToken);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        containerToken \u003d\n            this.rmContext.getContainerTokenSecretManager()\n              .createContainerToken(containerId, nodeId, application.getUser(),\n                capability);\n        if (containerToken \u003d\u003d null) {\n          return i; // Try again later.\n        }\n\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(containerId, nodeId, node.getRMNode()\n              .getHttpAddress(), capability, priority, containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "ca8024673178fa1c80224b390dfba932921693d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-617. Made ContainerTokens to be used for validation at NodeManager also in unsecure mode to prevent AMs from faking resource requirements in unsecure mode. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1483667 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/13 11:36 PM",
      "commitName": "ca8024673178fa1c80224b390dfba932921693d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/04/13 8:50 PM",
      "commitNameOld": "fbb55784d93e1a819daf55d936e864d344579cbf",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 21.12,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,60 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n         ContainerToken containerToken \u003d null;\n \n-        // If security is enabled, send the container-tokens too.\n-        if (UserGroupInformation.isSecurityEnabled()) {\n-          containerToken \u003d\n-              this.rmContext.getContainerTokenSecretManager()\n+        containerToken \u003d\n+            this.rmContext.getContainerTokenSecretManager()\n                 .createContainerToken(containerId, nodeId,\n-                  application.getUser(), capability);\n-          if (containerToken \u003d\u003d null) {\n-            return i; // Try again later.\n-          }\n+                    application.getUser(), capability);\n+        if (containerToken \u003d\u003d null) {\n+          return i; // Try again later.\n         }\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability, priority,\n             containerToken, ResourceManager.clusterTimeStamp);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        containerToken \u003d\n            this.rmContext.getContainerTokenSecretManager()\n                .createContainerToken(containerId, nodeId,\n                    application.getUser(), capability);\n        if (containerToken \u003d\u003d null) {\n          return i; // Try again later.\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken, ResourceManager.clusterTimeStamp);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "fbb55784d93e1a819daf55d936e864d344579cbf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-562. Modified NM to reject any containers allocated by a previous ResourceManager. Contributed by Jian He.\nMAPREDUCE-5167. Update MR App after YARN-562 to use the new builder API for the container. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1476034 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 8:50 PM",
      "commitName": "fbb55784d93e1a819daf55d936e864d344579cbf",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/04/13 5:12 AM",
      "commitNameOld": "c2592021f36b9dd97b4c9faf7a7a66e021a49694",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 13.65,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n         ContainerToken containerToken \u003d null;\n \n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n           containerToken \u003d\n               this.rmContext.getContainerTokenSecretManager()\n                 .createContainerToken(containerId, nodeId,\n                   application.getUser(), capability);\n           if (containerToken \u003d\u003d null) {\n             return i; // Try again later.\n           }\n         }\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability, priority,\n-            containerToken);\n+            containerToken, ResourceManager.clusterTimeStamp);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          containerToken \u003d\n              this.rmContext.getContainerTokenSecretManager()\n                .createContainerToken(containerId, nodeId,\n                  application.getUser(), capability);\n          if (containerToken \u003d\u003d null) {\n            return i; // Try again later.\n          }\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken, ResourceManager.clusterTimeStamp);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "40062e1aaa09628c6f45d20298fd66d799fd1f3f": {
      "type": "Ybodychange",
      "commitMessage": "Fix NodeManager to verify the application\u0027s user-name.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1390825 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/12 8:43 PM",
      "commitName": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/12 7:18 PM",
      "commitNameOld": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 33.06,
      "commitsBetweenForRepo": 173,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,63 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n         ContainerToken containerToken \u003d null;\n \n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n           containerToken \u003d\n               this.rmContext.getContainerTokenSecretManager()\n-                .createContainerToken(containerId, nodeId, capability);\n+                .createContainerToken(containerId, nodeId,\n+                  application.getUser(), capability);\n           if (containerToken \u003d\u003d null) {\n             return i; // Try again later.\n           }\n         }\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability, priority,\n             containerToken);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          containerToken \u003d\n              this.rmContext.getContainerTokenSecretManager()\n                .createContainerToken(containerId, nodeId,\n                  application.getUser(), capability);\n          if (containerToken \u003d\u003d null) {\n            return i; // Try again later.\n          }\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.87,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n         ContainerToken containerToken \u003d null;\n \n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n           containerToken \u003d\n-              containerTokenSecretManager.createContainerToken(containerId,\n-                nodeId, capability);\n+              this.rmContext.getContainerTokenSecretManager()\n+                .createContainerToken(containerId, nodeId, capability);\n           if (containerToken \u003d\u003d null) {\n             return i; // Try again later.\n           }\n         }\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability, priority,\n             containerToken);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          containerToken \u003d\n              this.rmContext.getContainerTokenSecretManager()\n                .createContainerToken(containerId, nodeId, capability);\n          if (containerToken \u003d\u003d null) {\n            return i; // Try again later.\n          }\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          containerToken \u003d\n              containerTokenSecretManager.createContainerToken(containerId,\n                nodeId, capability);\n          if (containerToken \u003d\u003d null) {\n            return i; // Try again later.\n          }\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "13/07/12 1:53 PM",
      "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 3.2,
      "commitsBetweenForRepo": 28,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n-  private int assignContainer(SchedulerNode node, SchedulerApp application, \n+  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n         ContainerToken containerToken \u003d null;\n \n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n           containerToken \u003d\n               containerTokenSecretManager.createContainerToken(containerId,\n                 nodeId, capability);\n           if (containerToken \u003d\u003d null) {\n             return i; // Try again later.\n           }\n         }\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability, priority,\n             containerToken);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n \n         // Update usage for this container\n         Resources.addTo(usedResource, capability);\n       }\n \n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(FiCaSchedulerNode node, FiCaSchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          containerToken \u003d\n              containerTokenSecretManager.createContainerToken(containerId,\n                nodeId, capability);\n          if (containerToken \u003d\u003d null) {\n            return i; // Try again later.\n          }\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldValue": "[node-SchedulerNode, application-SchedulerApp, priority-Priority, assignableContainers-int, request-ResourceRequest, type-NodeType]",
        "newValue": "[node-FiCaSchedulerNode, application-FiCaSchedulerApp, priority-Priority, assignableContainers-int, request-ResourceRequest, type-NodeType]"
      }
    },
    "3bfb26ad3b5ac46f992a632541c97ca2bc897638": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3940. ContainerTokens should have an expiry interval. Contributed by Siddharth Seth and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359910 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 2:26 PM",
      "commitName": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/05/12 12:15 PM",
      "commitNameOld": "d74bec2f883b562d377cc564ca86473c498a618a",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 50.09,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   private int assignContainer(SchedulerNode node, SchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n \n         NodeId nodeId \u003d node.getRMNode().getNodeID();\n         ContainerId containerId \u003d BuilderUtils.newContainerId(application\n             .getApplicationAttemptId(), application.getNewContainerId());\n         ContainerToken containerToken \u003d null;\n \n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n-          ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n-              containerId, nodeId.toString(), capability);\n-          containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n-              .wrap(containerTokenSecretManager\n-                  .createPassword(tokenIdentifier)), tokenIdentifier);\n+          containerToken \u003d\n+              containerTokenSecretManager.createContainerToken(containerId,\n+                nodeId, capability);\n+          if (containerToken \u003d\u003d null) {\n+            return i; // Try again later.\n+          }\n         }\n \n         // Create the container\n         Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n             node.getRMNode().getHttpAddress(), capability, priority,\n             containerToken);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n+\n+        // Update usage for this container\n+        Resources.addTo(usedResource, capability);\n       }\n-      \n-      // Update total usage\n-      Resources.addTo(usedResource,\n-          Resources.multiply(capability, assignedContainers));\n+\n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(SchedulerNode node, SchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          containerToken \u003d\n              containerTokenSecretManager.createContainerToken(containerId,\n                nodeId, capability);\n          if (containerToken \u003d\u003d null) {\n            return i; // Try again later.\n          }\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n\n        // Update usage for this container\n        Resources.addTo(usedResource, capability);\n      }\n\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/10/11 1:37 PM",
      "commitNameOld": "e549ac93694f768f2e26706a54a1b45dea6d2844",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.63,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,61 @@\n   private int assignContainer(SchedulerNode node, SchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n-        // Create the container\n-        Container container \u003d\n-            BuilderUtils.newContainer(recordFactory,\n-                application.getApplicationAttemptId(),\n-                application.getNewContainerId(),\n-                node.getRMNode().getNodeID(),\n-                node.getRMNode().getHttpAddress(), \n-                capability, priority);\n-        \n+\n+        NodeId nodeId \u003d node.getRMNode().getNodeID();\n+        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n+            .getApplicationAttemptId(), application.getNewContainerId());\n+        ContainerToken containerToken \u003d null;\n+\n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n-          ContainerToken containerToken \u003d\n-              recordFactory.newRecordInstance(ContainerToken.class);\n-          NodeId nodeId \u003d container.getNodeId();\n-          ContainerTokenIdentifier tokenidentifier \u003d\n-            new ContainerTokenIdentifier(container.getId(),\n-                nodeId.toString(), container.getResource());\n-          containerToken.setIdentifier(\n-              ByteBuffer.wrap(tokenidentifier.getBytes()));\n-          containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n-          containerToken.setPassword(\n-              ByteBuffer.wrap(containerTokenSecretManager\n-                  .createPassword(tokenidentifier)));\n-          // RPC layer client expects ip:port as service for tokens\n-          InetSocketAddress addr \u003d NetUtils.createSocketAddr(\n-              nodeId.getHost(), nodeId.getPort());\n-          containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n-              + addr.getPort());\n-          container.setContainerToken(containerToken);\n+          ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n+              containerId, nodeId.toString(), capability);\n+          containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n+              .wrap(containerTokenSecretManager\n+                  .createPassword(tokenIdentifier)), tokenIdentifier);\n         }\n+\n+        // Create the container\n+        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n+            node.getRMNode().getHttpAddress(), capability, priority,\n+            containerToken);\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n       }\n       \n       // Update total usage\n       Resources.addTo(usedResource,\n           Resources.multiply(capability, assignedContainers));\n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(SchedulerNode node, SchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n\n        NodeId nodeId \u003d node.getRMNode().getNodeID();\n        ContainerId containerId \u003d BuilderUtils.newContainerId(application\n            .getApplicationAttemptId(), application.getNewContainerId());\n        ContainerToken containerToken \u003d null;\n\n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          ContainerTokenIdentifier tokenIdentifier \u003d new ContainerTokenIdentifier(\n              containerId, nodeId.toString(), capability);\n          containerToken \u003d BuilderUtils.newContainerToken(nodeId, ByteBuffer\n              .wrap(containerTokenSecretManager\n                  .createPassword(tokenIdentifier)), tokenIdentifier);\n        }\n\n        // Create the container\n        Container container \u003d BuilderUtils.newContainer(containerId, nodeId,\n            node.getRMNode().getHttpAddress(), capability, priority,\n            containerToken);\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n      }\n      \n      // Update total usage\n      Resources.addTo(usedResource,\n          Resources.multiply(capability, assignedContainers));\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2792. Replace usage of node ip-addresses with hostnames. Contributed by Vinod K V.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/11 4:21 PM",
      "commitName": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "30/09/11 3:19 PM",
      "commitNameOld": "dcf9d475e0de05a2e1a7fe9239034c0a6d8a9456",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.04,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,72 @@\n   private int assignContainer(SchedulerNode node, SchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(recordFactory,\n                 application.getApplicationAttemptId(),\n                 application.getNewContainerId(),\n                 node.getRMNode().getNodeID(),\n                 node.getRMNode().getHttpAddress(), \n                 capability, priority);\n         \n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n           ContainerToken containerToken \u003d\n               recordFactory.newRecordInstance(ContainerToken.class);\n+          NodeId nodeId \u003d container.getNodeId();\n           ContainerTokenIdentifier tokenidentifier \u003d\n             new ContainerTokenIdentifier(container.getId(),\n-                container.getNodeId().toString(), container.getResource());\n+                nodeId.toString(), container.getResource());\n           containerToken.setIdentifier(\n               ByteBuffer.wrap(tokenidentifier.getBytes()));\n           containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n           containerToken.setPassword(\n               ByteBuffer.wrap(containerTokenSecretManager\n                   .createPassword(tokenidentifier)));\n-          containerToken.setService(container.getNodeId().toString());\n+          // RPC layer client expects ip:port as service for tokens\n+          InetSocketAddress addr \u003d NetUtils.createSocketAddr(\n+              nodeId.getHost(), nodeId.getPort());\n+          containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n+              + addr.getPort());\n           container.setContainerToken(containerToken);\n         }\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n       }\n       \n       // Update total usage\n       Resources.addTo(usedResource,\n           Resources.multiply(capability, assignedContainers));\n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(SchedulerNode node, SchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(recordFactory,\n                application.getApplicationAttemptId(),\n                application.getNewContainerId(),\n                node.getRMNode().getNodeID(),\n                node.getRMNode().getHttpAddress(), \n                capability, priority);\n        \n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          ContainerToken containerToken \u003d\n              recordFactory.newRecordInstance(ContainerToken.class);\n          NodeId nodeId \u003d container.getNodeId();\n          ContainerTokenIdentifier tokenidentifier \u003d\n            new ContainerTokenIdentifier(container.getId(),\n                nodeId.toString(), container.getResource());\n          containerToken.setIdentifier(\n              ByteBuffer.wrap(tokenidentifier.getBytes()));\n          containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n          containerToken.setPassword(\n              ByteBuffer.wrap(containerTokenSecretManager\n                  .createPassword(tokenidentifier)));\n          // RPC layer client expects ip:port as service for tokens\n          InetSocketAddress addr \u003d NetUtils.createSocketAddr(\n              nodeId.getHost(), nodeId.getPort());\n          containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n              + addr.getPort());\n          container.setContainerToken(containerToken);\n        }\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n      }\n      \n      // Update total usage\n      Resources.addTo(usedResource,\n          Resources.multiply(capability, assignedContainers));\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2646. Fixed AMRMProtocol to return containers based on priority. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175859 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/11 6:25 AM",
      "commitName": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/09/11 3:46 PM",
      "commitNameOld": "5183e881097b37b723f07f4d6af06721a326bea1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 11.61,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,67 @@\n   private int assignContainer(SchedulerNode node, SchedulerApp application, \n       Priority priority, int assignableContainers, \n       ResourceRequest request, NodeType type) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" application\u003d\" + application.getApplicationId().getId() + \n         \" priority\u003d\" + priority.getPriority() + \n         \" assignableContainers\u003d\" + assignableContainers +\n         \" request\u003d\" + request + \" type\u003d\" + type);\n     Resource capability \u003d request.getCapability();\n \n     int availableContainers \u003d \n       node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                         // application\n                                                                         // with this\n                                                                         // zero would\n                                                                         // crash the\n                                                                         // scheduler.\n     int assignedContainers \u003d \n       Math.min(assignableContainers, availableContainers);\n \n     if (assignedContainers \u003e 0) {\n       for (int i\u003d0; i \u003c assignedContainers; ++i) {\n         // Create the container\n         Container container \u003d\n             BuilderUtils.newContainer(recordFactory,\n                 application.getApplicationAttemptId(),\n                 application.getNewContainerId(),\n                 node.getRMNode().getNodeID(),\n-                node.getRMNode().getHttpAddress(), capability);\n+                node.getRMNode().getHttpAddress(), \n+                capability, priority);\n         \n         // If security is enabled, send the container-tokens too.\n         if (UserGroupInformation.isSecurityEnabled()) {\n           ContainerToken containerToken \u003d\n               recordFactory.newRecordInstance(ContainerToken.class);\n           ContainerTokenIdentifier tokenidentifier \u003d\n             new ContainerTokenIdentifier(container.getId(),\n                 container.getNodeId().toString(), container.getResource());\n           containerToken.setIdentifier(\n               ByteBuffer.wrap(tokenidentifier.getBytes()));\n           containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n           containerToken.setPassword(\n               ByteBuffer.wrap(containerTokenSecretManager\n                   .createPassword(tokenidentifier)));\n           containerToken.setService(container.getNodeId().toString());\n           container.setContainerToken(containerToken);\n         }\n         \n         // Allocate!\n         \n         // Inform the application\n         RMContainer rmContainer \u003d\n             application.allocate(type, node, priority, request, container);\n         \n         // Inform the node\n         node.allocateContainer(application.getApplicationId(), \n             rmContainer);\n       }\n       \n       // Update total usage\n       Resources.addTo(usedResource,\n           Resources.multiply(capability, assignedContainers));\n     }\n     \n     return assignedContainers;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(SchedulerNode node, SchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(recordFactory,\n                application.getApplicationAttemptId(),\n                application.getNewContainerId(),\n                node.getRMNode().getNodeID(),\n                node.getRMNode().getHttpAddress(), \n                capability, priority);\n        \n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          ContainerToken containerToken \u003d\n              recordFactory.newRecordInstance(ContainerToken.class);\n          ContainerTokenIdentifier tokenidentifier \u003d\n            new ContainerTokenIdentifier(container.getId(),\n                container.getNodeId().toString(), container.getResource());\n          containerToken.setIdentifier(\n              ByteBuffer.wrap(tokenidentifier.getBytes()));\n          containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n          containerToken.setPassword(\n              ByteBuffer.wrap(containerTokenSecretManager\n                  .createPassword(tokenidentifier)));\n          containerToken.setService(container.getNodeId().toString());\n          container.setContainerToken(containerToken);\n        }\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n      }\n      \n      // Update total usage\n      Resources.addTo(usedResource,\n          Resources.multiply(capability, assignedContainers));\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private int assignContainer(SchedulerNode node, SchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(recordFactory,\n                application.getApplicationAttemptId(),\n                application.getNewContainerId(),\n                node.getRMNode().getNodeID(),\n                node.getRMNode().getHttpAddress(), capability);\n        \n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          ContainerToken containerToken \u003d\n              recordFactory.newRecordInstance(ContainerToken.class);\n          ContainerTokenIdentifier tokenidentifier \u003d\n            new ContainerTokenIdentifier(container.getId(),\n                container.getNodeId().toString(), container.getResource());\n          containerToken.setIdentifier(\n              ByteBuffer.wrap(tokenidentifier.getBytes()));\n          containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n          containerToken.setPassword(\n              ByteBuffer.wrap(containerTokenSecretManager\n                  .createPassword(tokenidentifier)));\n          containerToken.setService(container.getNodeId().toString());\n          container.setContainerToken(containerToken);\n        }\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n      }\n      \n      // Update total usage\n      Resources.addTo(usedResource,\n          Resources.multiply(capability, assignedContainers));\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,66 @@\n+  private int assignContainer(SchedulerNode node, SchedulerApp application, \n+      Priority priority, int assignableContainers, \n+      ResourceRequest request, NodeType type) {\n+    LOG.debug(\"assignContainers:\" +\n+        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n+        \" application\u003d\" + application.getApplicationId().getId() + \n+        \" priority\u003d\" + priority.getPriority() + \n+        \" assignableContainers\u003d\" + assignableContainers +\n+        \" request\u003d\" + request + \" type\u003d\" + type);\n+    Resource capability \u003d request.getCapability();\n+\n+    int availableContainers \u003d \n+      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n+                                                                        // application\n+                                                                        // with this\n+                                                                        // zero would\n+                                                                        // crash the\n+                                                                        // scheduler.\n+    int assignedContainers \u003d \n+      Math.min(assignableContainers, availableContainers);\n+\n+    if (assignedContainers \u003e 0) {\n+      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n+        // Create the container\n+        Container container \u003d\n+            BuilderUtils.newContainer(recordFactory,\n+                application.getApplicationAttemptId(),\n+                application.getNewContainerId(),\n+                node.getRMNode().getNodeID(),\n+                node.getRMNode().getHttpAddress(), capability);\n+        \n+        // If security is enabled, send the container-tokens too.\n+        if (UserGroupInformation.isSecurityEnabled()) {\n+          ContainerToken containerToken \u003d\n+              recordFactory.newRecordInstance(ContainerToken.class);\n+          ContainerTokenIdentifier tokenidentifier \u003d\n+            new ContainerTokenIdentifier(container.getId(),\n+                container.getNodeId().toString(), container.getResource());\n+          containerToken.setIdentifier(\n+              ByteBuffer.wrap(tokenidentifier.getBytes()));\n+          containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n+          containerToken.setPassword(\n+              ByteBuffer.wrap(containerTokenSecretManager\n+                  .createPassword(tokenidentifier)));\n+          containerToken.setService(container.getNodeId().toString());\n+          container.setContainerToken(containerToken);\n+        }\n+        \n+        // Allocate!\n+        \n+        // Inform the application\n+        RMContainer rmContainer \u003d\n+            application.allocate(type, node, priority, request, container);\n+        \n+        // Inform the node\n+        node.allocateContainer(application.getApplicationId(), \n+            rmContainer);\n+      }\n+      \n+      // Update total usage\n+      Resources.addTo(usedResource,\n+          Resources.multiply(capability, assignedContainers));\n+    }\n+    \n+    return assignedContainers;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int assignContainer(SchedulerNode node, SchedulerApp application, \n      Priority priority, int assignableContainers, \n      ResourceRequest request, NodeType type) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" application\u003d\" + application.getApplicationId().getId() + \n        \" priority\u003d\" + priority.getPriority() + \n        \" assignableContainers\u003d\" + assignableContainers +\n        \" request\u003d\" + request + \" type\u003d\" + type);\n    Resource capability \u003d request.getCapability();\n\n    int availableContainers \u003d \n      node.getAvailableResource().getMemory() / capability.getMemory(); // TODO: A buggy\n                                                                        // application\n                                                                        // with this\n                                                                        // zero would\n                                                                        // crash the\n                                                                        // scheduler.\n    int assignedContainers \u003d \n      Math.min(assignableContainers, availableContainers);\n\n    if (assignedContainers \u003e 0) {\n      for (int i\u003d0; i \u003c assignedContainers; ++i) {\n        // Create the container\n        Container container \u003d\n            BuilderUtils.newContainer(recordFactory,\n                application.getApplicationAttemptId(),\n                application.getNewContainerId(),\n                node.getRMNode().getNodeID(),\n                node.getRMNode().getHttpAddress(), capability);\n        \n        // If security is enabled, send the container-tokens too.\n        if (UserGroupInformation.isSecurityEnabled()) {\n          ContainerToken containerToken \u003d\n              recordFactory.newRecordInstance(ContainerToken.class);\n          ContainerTokenIdentifier tokenidentifier \u003d\n            new ContainerTokenIdentifier(container.getId(),\n                container.getNodeId().toString(), container.getResource());\n          containerToken.setIdentifier(\n              ByteBuffer.wrap(tokenidentifier.getBytes()));\n          containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n          containerToken.setPassword(\n              ByteBuffer.wrap(containerTokenSecretManager\n                  .createPassword(tokenidentifier)));\n          containerToken.setService(container.getNodeId().toString());\n          container.setContainerToken(containerToken);\n        }\n        \n        // Allocate!\n        \n        // Inform the application\n        RMContainer rmContainer \u003d\n            application.allocate(type, node, priority, request, container);\n        \n        // Inform the node\n        node.allocateContainer(application.getApplicationId(), \n            rmContainer);\n      }\n      \n      // Update total usage\n      Resources.addTo(usedResource,\n          Resources.multiply(capability, assignedContainers));\n    }\n    \n    return assignedContainers;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
    }
  }
}