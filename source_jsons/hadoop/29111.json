{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegisterNodeManagerRequestPBImpl.java",
  "functionName": "addLogAggregationStatusForAppsToProto",
  "functionId": "addLogAggregationStatusForAppsToProto",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/protocolrecords/impl/pb/RegisterNodeManagerRequestPBImpl.java",
  "functionStartLine": 126,
  "functionEndLine": 158,
  "numCommitsSeen": 15,
  "timeTaken": 1094,
  "changeHistory": [
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2"
  ],
  "changeHistoryShort": {
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7952. RM should be able to recover log aggregation status after restart/fail-over. (Xuan Gong via wangda)\n\nChange-Id: I725c9afe64831eda0aa6b0bebdbc79d2dd165707\n",
      "commitDate": "15/03/18 1:26 PM",
      "commitName": "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,33 @@\n+  private void addLogAggregationStatusForAppsToProto() {\n+    maybeInitBuilder();\n+    builder.clearLogAggregationReportsForApps();\n+    if (this.logAggregationReportsForApps \u003d\u003d null) {\n+      return;\n+    }\n+    Iterable\u003cLogAggregationReportProto\u003e it \u003d\n+        new Iterable\u003cLogAggregationReportProto\u003e() {\n+          @Override\n+          public Iterator\u003cLogAggregationReportProto\u003e iterator() {\n+            return new Iterator\u003cLogAggregationReportProto\u003e() {\n+              private Iterator\u003cLogAggregationReport\u003e iter \u003d\n+                  logAggregationReportsForApps.iterator();\n+\n+              @Override\n+              public boolean hasNext() {\n+                return iter.hasNext();\n+              }\n+\n+              @Override\n+              public LogAggregationReportProto next() {\n+                return convertToProtoFormat(iter.next());\n+              }\n+\n+              @Override\n+              public void remove() {\n+                throw new UnsupportedOperationException();\n+              }\n+            };\n+          }\n+        };\n+    builder.addAllLogAggregationReportsForApps(it);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addLogAggregationStatusForAppsToProto() {\n    maybeInitBuilder();\n    builder.clearLogAggregationReportsForApps();\n    if (this.logAggregationReportsForApps \u003d\u003d null) {\n      return;\n    }\n    Iterable\u003cLogAggregationReportProto\u003e it \u003d\n        new Iterable\u003cLogAggregationReportProto\u003e() {\n          @Override\n          public Iterator\u003cLogAggregationReportProto\u003e iterator() {\n            return new Iterator\u003cLogAggregationReportProto\u003e() {\n              private Iterator\u003cLogAggregationReport\u003e iter \u003d\n                  logAggregationReportsForApps.iterator();\n\n              @Override\n              public boolean hasNext() {\n                return iter.hasNext();\n              }\n\n              @Override\n              public LogAggregationReportProto next() {\n                return convertToProtoFormat(iter.next());\n              }\n\n              @Override\n              public void remove() {\n                throw new UnsupportedOperationException();\n              }\n            };\n          }\n        };\n    builder.addAllLogAggregationReportsForApps(it);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/api/protocolrecords/impl/pb/RegisterNodeManagerRequestPBImpl.java"
    }
  }
}