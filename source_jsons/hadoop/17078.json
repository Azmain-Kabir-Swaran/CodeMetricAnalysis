{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RBFMetrics.java",
  "functionName": "getRouters",
  "functionId": "getRouters",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java",
  "functionStartLine": 311,
  "functionEndLine": 350,
  "numCommitsSeen": 21,
  "timeTaken": 2953,
  "changeHistory": [
    "18d74fe41c0982dc1540367805b0c3d0d4fc29d3",
    "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
    "6ca7204cebf4b7060696a07b1777723a6dfa7d9d"
  ],
  "changeHistoryShort": {
    "18d74fe41c0982dc1540367805b0c3d0d4fc29d3": "Ybodychange",
    "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e": "Yfilerename",
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": "Yfilerename",
    "6ca7204cebf4b7060696a07b1777723a6dfa7d9d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18d74fe41c0982dc1540367805b0c3d0d4fc29d3": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14711. RBF: RBFMetrics throws NullPointerException if stateStore disabled. Contributed by Chen Zhang.\n",
      "commitDate": "01/09/19 12:23 AM",
      "commitName": "18d74fe41c0982dc1540367805b0c3d0d4fc29d3",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "ba221dc50e793bdde99fcb8176783412d4de2d97",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 68.62,
      "commitsBetweenForRepo": 569,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,40 @@\n   public String getRouters() {\n     final Map\u003cString, Map\u003cString, Object\u003e\u003e info \u003d new LinkedHashMap\u003c\u003e();\n+    if (routerStore \u003d\u003d null) {\n+      return \"{}\";\n+    }\n     try {\n       // Get all the routers in order\n       GetRouterRegistrationsRequest request \u003d\n           GetRouterRegistrationsRequest.newInstance();\n       GetRouterRegistrationsResponse response \u003d\n           routerStore.getRouterRegistrations(request);\n       final List\u003cRouterState\u003e routers \u003d response.getRouters();\n       List\u003cRouterState\u003e routersOrder \u003d new ArrayList\u003c\u003e(routers);\n       Collections.sort(routersOrder);\n \n       // Dump router information into JSON\n       for (RouterState record : routersOrder) {\n         Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n         Map\u003cString, Object\u003e map \u003d getJson(record);\n         innerInfo.putAll(map);\n         long dateModified \u003d record.getDateModified();\n         long lastHeartbeat \u003d getSecondsSince(dateModified);\n         innerInfo.put(\"lastHeartbeat\", lastHeartbeat);\n \n         StateStoreVersion stateStoreVersion \u003d record.getStateStoreVersion();\n         if (stateStoreVersion \u003d\u003d null) {\n           LOG.error(\"Cannot get State Store versions\");\n         } else {\n           setStateStoreVersions(innerInfo, stateStoreVersion);\n         }\n \n         info.put(record.getPrimaryKey(),\n             Collections.unmodifiableMap(innerInfo));\n       }\n     } catch (IOException e) {\n       LOG.error(\"Cannot get Routers JSON from the State Store\", e);\n       return \"{}\";\n     }\n     return JSON.toString(info);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String getRouters() {\n    final Map\u003cString, Map\u003cString, Object\u003e\u003e info \u003d new LinkedHashMap\u003c\u003e();\n    if (routerStore \u003d\u003d null) {\n      return \"{}\";\n    }\n    try {\n      // Get all the routers in order\n      GetRouterRegistrationsRequest request \u003d\n          GetRouterRegistrationsRequest.newInstance();\n      GetRouterRegistrationsResponse response \u003d\n          routerStore.getRouterRegistrations(request);\n      final List\u003cRouterState\u003e routers \u003d response.getRouters();\n      List\u003cRouterState\u003e routersOrder \u003d new ArrayList\u003c\u003e(routers);\n      Collections.sort(routersOrder);\n\n      // Dump router information into JSON\n      for (RouterState record : routersOrder) {\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        Map\u003cString, Object\u003e map \u003d getJson(record);\n        innerInfo.putAll(map);\n        long dateModified \u003d record.getDateModified();\n        long lastHeartbeat \u003d getSecondsSince(dateModified);\n        innerInfo.put(\"lastHeartbeat\", lastHeartbeat);\n\n        StateStoreVersion stateStoreVersion \u003d record.getStateStoreVersion();\n        if (stateStoreVersion \u003d\u003d null) {\n          LOG.error(\"Cannot get State Store versions\");\n        } else {\n          setStateStoreVersions(innerInfo, stateStoreVersion);\n        }\n\n        info.put(record.getPrimaryKey(),\n            Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Cannot get Routers JSON from the State Store\", e);\n      return \"{}\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java",
      "extendedDetails": {}
    },
    "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-14508. RBF: Clean-up and refactor UI components. Contributed by Takanobu Asanuma.\n",
      "commitDate": "24/06/19 9:33 AM",
      "commitName": "ade8d3b60ecdab55bd61a71905ea3dbba0922f3e",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "24/06/19 9:33 AM",
      "commitNameOld": "6915d7e13c2afbb2738176ba55ea0774f25e1264",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getRouters() {\n    final Map\u003cString, Map\u003cString, Object\u003e\u003e info \u003d new LinkedHashMap\u003c\u003e();\n    try {\n      // Get all the routers in order\n      GetRouterRegistrationsRequest request \u003d\n          GetRouterRegistrationsRequest.newInstance();\n      GetRouterRegistrationsResponse response \u003d\n          routerStore.getRouterRegistrations(request);\n      final List\u003cRouterState\u003e routers \u003d response.getRouters();\n      List\u003cRouterState\u003e routersOrder \u003d new ArrayList\u003c\u003e(routers);\n      Collections.sort(routersOrder);\n\n      // Dump router information into JSON\n      for (RouterState record : routersOrder) {\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        Map\u003cString, Object\u003e map \u003d getJson(record);\n        innerInfo.putAll(map);\n        long dateModified \u003d record.getDateModified();\n        long lastHeartbeat \u003d getSecondsSince(dateModified);\n        innerInfo.put(\"lastHeartbeat\", lastHeartbeat);\n\n        StateStoreVersion stateStoreVersion \u003d record.getStateStoreVersion();\n        if (stateStoreVersion \u003d\u003d null) {\n          LOG.error(\"Cannot get State Store versions\");\n        } else {\n          setStateStoreVersions(innerInfo, stateStoreVersion);\n        }\n\n        info.put(record.getPrimaryKey(),\n            Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Cannot get Routers JSON from the State Store\", e);\n      return \"{}\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/RBFMetrics.java"
      }
    },
    "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13215. RBF: Move Router to its own module. Contributed by Wei Yan\n",
      "commitDate": "19/03/18 10:13 PM",
      "commitName": "6e2b5fa493ff8e8c2bb28e6f6f4c19347bc9b99d",
      "commitAuthor": "weiy",
      "commitDateOld": "19/03/18 5:19 PM",
      "commitNameOld": "e65ff1c8be48ef4f04ed96f96ac4caef4974944d",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public String getRouters() {\n    final Map\u003cString, Map\u003cString, Object\u003e\u003e info \u003d new LinkedHashMap\u003c\u003e();\n    try {\n      // Get all the routers in order\n      GetRouterRegistrationsRequest request \u003d\n          GetRouterRegistrationsRequest.newInstance();\n      GetRouterRegistrationsResponse response \u003d\n          routerStore.getRouterRegistrations(request);\n      final List\u003cRouterState\u003e routers \u003d response.getRouters();\n      List\u003cRouterState\u003e routersOrder \u003d new ArrayList\u003c\u003e(routers);\n      Collections.sort(routersOrder);\n\n      // Dump router information into JSON\n      for (RouterState record : routersOrder) {\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        Map\u003cString, Object\u003e map \u003d getJson(record);\n        innerInfo.putAll(map);\n        long dateModified \u003d record.getDateModified();\n        long lastHeartbeat \u003d getSecondsSince(dateModified);\n        innerInfo.put(\"lastHeartbeat\", lastHeartbeat);\n\n        StateStoreVersion stateStoreVersion \u003d record.getStateStoreVersion();\n        if (stateStoreVersion \u003d\u003d null) {\n          LOG.error(\"Cannot get State Store versions\");\n        } else {\n          setStateStoreVersions(innerInfo, stateStoreVersion);\n        }\n\n        info.put(record.getPrimaryKey(),\n            Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Cannot get Routers JSON from the State Store\", e);\n      return \"{}\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-rbf/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java"
      }
    },
    "6ca7204cebf4b7060696a07b1777723a6dfa7d9d": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13043. RBF: Expose the state of the Routers in the federation. Contributed by Inigo Goiri.\n",
      "commitDate": "01/02/18 10:37 AM",
      "commitName": "6ca7204cebf4b7060696a07b1777723a6dfa7d9d",
      "commitAuthor": "Inigo Goiri",
      "diff": "@@ -0,0 +1,37 @@\n+  public String getRouters() {\n+    final Map\u003cString, Map\u003cString, Object\u003e\u003e info \u003d new LinkedHashMap\u003c\u003e();\n+    try {\n+      // Get all the routers in order\n+      GetRouterRegistrationsRequest request \u003d\n+          GetRouterRegistrationsRequest.newInstance();\n+      GetRouterRegistrationsResponse response \u003d\n+          routerStore.getRouterRegistrations(request);\n+      final List\u003cRouterState\u003e routers \u003d response.getRouters();\n+      List\u003cRouterState\u003e routersOrder \u003d new ArrayList\u003c\u003e(routers);\n+      Collections.sort(routersOrder);\n+\n+      // Dump router information into JSON\n+      for (RouterState record : routersOrder) {\n+        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n+        Map\u003cString, Object\u003e map \u003d getJson(record);\n+        innerInfo.putAll(map);\n+        long dateModified \u003d record.getDateModified();\n+        long lastHeartbeat \u003d getSecondsSince(dateModified);\n+        innerInfo.put(\"lastHeartbeat\", lastHeartbeat);\n+\n+        StateStoreVersion stateStoreVersion \u003d record.getStateStoreVersion();\n+        if (stateStoreVersion \u003d\u003d null) {\n+          LOG.error(\"Cannot get State Store versions\");\n+        } else {\n+          setStateStoreVersions(innerInfo, stateStoreVersion);\n+        }\n+\n+        info.put(record.getPrimaryKey(),\n+            Collections.unmodifiableMap(innerInfo));\n+      }\n+    } catch (IOException e) {\n+      LOG.error(\"Cannot get Routers JSON from the State Store\", e);\n+      return \"{}\";\n+    }\n+    return JSON.toString(info);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String getRouters() {\n    final Map\u003cString, Map\u003cString, Object\u003e\u003e info \u003d new LinkedHashMap\u003c\u003e();\n    try {\n      // Get all the routers in order\n      GetRouterRegistrationsRequest request \u003d\n          GetRouterRegistrationsRequest.newInstance();\n      GetRouterRegistrationsResponse response \u003d\n          routerStore.getRouterRegistrations(request);\n      final List\u003cRouterState\u003e routers \u003d response.getRouters();\n      List\u003cRouterState\u003e routersOrder \u003d new ArrayList\u003c\u003e(routers);\n      Collections.sort(routersOrder);\n\n      // Dump router information into JSON\n      for (RouterState record : routersOrder) {\n        Map\u003cString, Object\u003e innerInfo \u003d new HashMap\u003c\u003e();\n        Map\u003cString, Object\u003e map \u003d getJson(record);\n        innerInfo.putAll(map);\n        long dateModified \u003d record.getDateModified();\n        long lastHeartbeat \u003d getSecondsSince(dateModified);\n        innerInfo.put(\"lastHeartbeat\", lastHeartbeat);\n\n        StateStoreVersion stateStoreVersion \u003d record.getStateStoreVersion();\n        if (stateStoreVersion \u003d\u003d null) {\n          LOG.error(\"Cannot get State Store versions\");\n        } else {\n          setStateStoreVersions(innerInfo, stateStoreVersion);\n        }\n\n        info.put(record.getPrimaryKey(),\n            Collections.unmodifiableMap(innerInfo));\n      }\n    } catch (IOException e) {\n      LOG.error(\"Cannot get Routers JSON from the State Store\", e);\n      return \"{}\";\n    }\n    return JSON.toString(info);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/federation/metrics/FederationMetrics.java"
    }
  }
}