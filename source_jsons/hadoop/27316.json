{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "getSubAppEntities",
  "functionId": "getSubAppEntities___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__clusterId-String(annotations-@PathParam(\"clusterid\"))__userId-String(annotations-@PathParam(\"userid\"))__entityType-String(annotations-@PathParam(\"entitytype\"))__entityId-String(annotations-@PathParam(\"entityid\"))__confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\"))__metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\"))__fields-String(annotations-@QueryParam(\"fields\"))__metricsLimit-String(annotations-@QueryParam(\"metricslimit\"))__metricsTimeStart-String(annotations-@QueryParam(\"metricstimestart\"))__metricsTimeEnd-String(annotations-@QueryParam(\"metricstimeend\"))__entityIdPrefix-String(annotations-@QueryParam(\"entityidprefix\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 3498,
  "functionEndLine": 3547,
  "numCommitsSeen": 36,
  "timeTaken": 1836,
  "changeHistory": [
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f"
  ],
  "changeHistoryShort": {
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65": "Ybodychange",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": "Ybodychange",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7627. [ATSv2] When passing a non-number as metricslimit, the error message is wrong. Contributed by Charan Hebri.\n",
      "commitDate": "06/02/19 8:28 PM",
      "commitName": "1e5e08d83b8dc168e636e0834584fecf5d44cb65",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "27/09/18 3:53 PM",
      "commitNameOld": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 132.23,
      "commitsBetweenForRepo": 983,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"entitytype\") String entityType,\n       @PathParam(\"entityid\") String entityId,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n     String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n         : QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \"\n         + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, null, null, null, null,\n               entityType, entityIdPrefix, entityId, userId);\n       entities \u003d timelineReaderManager.getEntities(context,\n           new TimelineEntityFilters.Builder().build(),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n               confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n               metricsTimeStart, metricsTimeEnd));\n       checkAccessForSubAppEntities(entities,callerUGI);\n       succeeded \u003d true;\n     } catch (Exception e) {\n-      handleException(e, url, startTime, \"\");\n+      handleException(e, url, startTime, \"Either metricslimit or metricstime\"\n+          + \" start/end\");\n     } finally {\n       long latency \u003d Time.monotonicNow() - startTime;\n       METRICS.addGetEntitiesLatency(latency, succeeded);\n       LOG.info(\n           \"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\n     }\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n \n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"entitytype\") String entityType,\n      @PathParam(\"entityid\") String entityId,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n    String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n        : QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \"\n        + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, null, null, null, null,\n              entityType, entityIdPrefix, entityId, userId);\n      entities \u003d timelineReaderManager.getEntities(context,\n          new TimelineEntityFilters.Builder().build(),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n              confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n              metricsTimeStart, metricsTimeEnd));\n      checkAccessForSubAppEntities(entities,callerUGI);\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"Either metricslimit or metricstime\"\n          + \" start/end\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\n          \"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "13/09/18 5:17 AM",
      "commitNameOld": "f4bda5e8e9fee6c5a0dda7c79ef14e73aec20e7e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"entitytype\") String entityType,\n       @PathParam(\"entityid\") String entityId,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n     String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n         : QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \"\n         + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, null, null, null, null,\n               entityType, entityIdPrefix, entityId, userId);\n       entities \u003d timelineReaderManager.getEntities(context,\n           new TimelineEntityFilters.Builder().build(),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n               confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n               metricsTimeStart, metricsTimeEnd));\n       checkAccessForSubAppEntities(entities,callerUGI);\n+      succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"\");\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      METRICS.addGetEntitiesLatency(latency, succeeded);\n+      LOG.info(\n+          \"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\n     }\n-    long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n-    LOG.info(\n-        \"Processed URL \" + url + \" (Took \" + (endTime - startTime) + \" ms.)\");\n+\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"entitytype\") String entityType,\n      @PathParam(\"entityid\") String entityId,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n    String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n        : QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \"\n        + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, null, null, null, null,\n              entityType, entityIdPrefix, entityId, userId);\n      entities \u003d timelineReaderManager.getEntities(context,\n          new TimelineEntityFilters.Builder().build(),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n              confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n              metricsTimeStart, metricsTimeEnd));\n      checkAccessForSubAppEntities(entities,callerUGI);\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\n          \"Processed URL \" + url + \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8455. Add basic ACL check for all ATS v2 REST APIs. Contributed by Rohith Sharma K S.\n",
      "commitDate": "29/06/18 10:02 AM",
      "commitName": "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/06/18 8:59 PM",
      "commitNameOld": "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 27.54,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"entitytype\") String entityType,\n       @PathParam(\"entityid\") String entityId,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n     String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n         : QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \"\n         + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n           .createTimelineReaderContext(clusterId, null, null, null, null,\n               entityType, entityIdPrefix, entityId, userId);\n       entities \u003d timelineReaderManager.getEntities(context,\n           new TimelineEntityFilters.Builder().build(),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n               confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n               metricsTimeStart, metricsTimeEnd));\n+      checkAccessForSubAppEntities(entities,callerUGI);\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\n         \"Processed URL \" + url + \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"entitytype\") String entityType,\n      @PathParam(\"entityid\") String entityId,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n    String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n        : QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \"\n        + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, null, null, null, null,\n              entityType, entityIdPrefix, entityId, userId);\n      entities \u003d timelineReaderManager.getEntities(context,\n          new TimelineEntityFilters.Builder().build(),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n              confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n              metricsTimeStart, metricsTimeEnd));\n      checkAccessForSubAppEntities(entities,callerUGI);\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\n        \"Processed URL \" + url + \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6861. Reader API for sub application entities (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f",
      "commitAuthor": "Varun Saxena",
      "diff": "@@ -0,0 +1,43 @@\n+  public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"clusterid\") String clusterId,\n+      @PathParam(\"userid\") String userId,\n+      @PathParam(\"entitytype\") String entityType,\n+      @PathParam(\"entityid\") String entityId,\n+      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n+      @QueryParam(\"fields\") String fields,\n+      @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n+      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n+      @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n+    String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n+        : QUERY_STRING_SEP + req.getQueryString());\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \"\n+        + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n+    long startTime \u003d Time.monotonicNow();\n+    init(res);\n+    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    Set\u003cTimelineEntity\u003e entities \u003d null;\n+    try {\n+      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n+          .createTimelineReaderContext(clusterId, null, null, null, null,\n+              entityType, entityIdPrefix, entityId, userId);\n+      entities \u003d timelineReaderManager.getEntities(context,\n+          new TimelineEntityFilters.Builder().build(),\n+          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n+              confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n+              metricsTimeStart, metricsTimeEnd));\n+    } catch (Exception e) {\n+      handleException(e, url, startTime, \"\");\n+    }\n+    long endTime \u003d Time.monotonicNow();\n+    if (entities \u003d\u003d null) {\n+      entities \u003d Collections.emptySet();\n+    }\n+    LOG.info(\n+        \"Processed URL \" + url + \" (Took \" + (endTime - startTime) + \" ms.)\");\n+    return entities;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getSubAppEntities(@Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"entitytype\") String entityType,\n      @PathParam(\"entityid\") String entityId,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"entityidprefix\") String entityIdPrefix) {\n    String url \u003d req.getRequestURI() + (req.getQueryString() \u003d\u003d null ? \"\"\n        : QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \"\n        + TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d TimelineReaderWebServicesUtils\n          .createTimelineReaderContext(clusterId, null, null, null, null,\n              entityType, entityIdPrefix, entityId, userId);\n      entities \u003d timelineReaderManager.getEntities(context,\n          new TimelineEntityFilters.Builder().build(),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n              confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n              metricsTimeStart, metricsTimeEnd));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\n        \"Processed URL \" + url + \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}