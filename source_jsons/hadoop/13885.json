{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "addBlock",
  "functionId": "addBlock___storageInfo-DatanodeStorageInfo__block-Block__delHint-String",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 4142,
  "functionEndLine": 4172,
  "numCommitsSeen": 617,
  "timeTaken": 19070,
  "changeHistory": [
    "a98352ced18e51003b443e1a652d19ec00b2f2d2",
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
    "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f",
    "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
    "900221f95ea9fe1936b4d5f277e6047ee8734eca",
    "8c0769dee4b455f4de08ccce36334f0be9e79e2c",
    "5865fe2bf01284993572ea60b3ec3bf8b4492818",
    "6e3fcffe291faec40fa9214f4880a35a952836c4",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
    "22a41dce4af4d5b533ba875b322551db1c152878",
    "45db4d204b796eee6dd0e39d3cc94b70c47028d4"
  ],
  "changeHistoryShort": {
    "a98352ced18e51003b443e1a652d19ec00b2f2d2": "Ybodychange",
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": "Ybodychange",
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": "Ybodychange",
    "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "a2f0cbd92f7e90909cf817c261a5fae13a9695b4": "Ymultichange(Ymodifierchange,Ybodychange)",
    "900221f95ea9fe1936b4d5f277e6047ee8734eca": "Ymultichange(Ymodifierchange,Ybodychange)",
    "8c0769dee4b455f4de08ccce36334f0be9e79e2c": "Ybodychange",
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": "Ybodychange",
    "6e3fcffe291faec40fa9214f4880a35a952836c4": "Ybodychange",
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": "Ybodychange",
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": "Ybodychange",
    "22a41dce4af4d5b533ba875b322551db1c152878": "Ybodychange",
    "45db4d204b796eee6dd0e39d3cc94b70c47028d4": "Ymultichange(Yparameterchange,Ybodychange)"
  },
  "changeHistoryDetails": {
    "a98352ced18e51003b443e1a652d19ec00b2f2d2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15086. Block scheduled counter never get decremet if the block got deleted before replication. Contributed by hemanthboyina.\n",
      "commitDate": "13/02/20 3:27 AM",
      "commitName": "a98352ced18e51003b443e1a652d19ec00b2f2d2",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "06/11/19 9:56 AM",
      "commitNameOld": "dd900259c421d6edd0b89a535a1fe08ada91735f",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 98.73,
      "commitsBetweenForRepo": 341,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n       String delHint) throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n-      if (pendingReconstruction.decrement(storedBlock, node)) {\n+      if (pendingReconstruction.decrement(storedBlock, storageInfo)) {\n         NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n       }\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n      String delHint) throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      if (pendingReconstruction.decrement(storedBlock, storageInfo)) {\n        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n      }\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "39ed3a66dbb01383ed16b141183fc48bfd2e613d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13076: [SPS]: Cleanup work for HDFS-10285 merge. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "39ed3a66dbb01383ed16b141183fc48bfd2e613d",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "db3f227d8aeeea8b5bb473fed9ca4f6a17b0fca5",
      "commitAuthorOld": "Rakesh Radhakrishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,31 @@\n   public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n       String delHint) throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n       if (pendingReconstruction.decrement(storedBlock, node)) {\n         NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n       }\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n-\n-    // notify SPS about the reported block\n-    notifyStorageMovementAttemptFinishedBlk(storageInfo, block);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n      String delHint) throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      if (pendingReconstruction.decrement(storedBlock, node)) {\n        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n      }\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "2acc50b826fa8b00f2b09d9546c4b3215b89d46d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13165: [SPS]: Collects successfully moved block details via IBR. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "2acc50b826fa8b00f2b09d9546c4b3215b89d46d",
      "commitAuthor": "Rakesh Radhakrishnan",
      "commitDateOld": "12/08/18 3:06 AM",
      "commitNameOld": "4402f3f8557527d5c6cdad6f5bdcbd707b8cbf52",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n       String delHint) throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n       if (pendingReconstruction.decrement(storedBlock, node)) {\n         NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n       }\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n+\n+    // notify SPS about the reported block\n+    notifyStorageMovementAttemptFinishedBlk(storageInfo, block);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n      String delHint) throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      if (pendingReconstruction.decrement(storedBlock, node)) {\n        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n      }\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n\n    // notify SPS about the reported block\n    notifyStorageMovementAttemptFinishedBlk(storageInfo, block);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
      "commitDate": "30/06/17 10:20 AM",
      "commitName": "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
          "commitDate": "30/06/17 10:20 AM",
          "commitName": "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "30/06/17 10:19 AM",
          "commitNameOld": "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n-      throws IOException {\n+  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n+      String delHint) throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n-      pendingReconstruction.decrement(storedBlock, node);\n+      if (pendingReconstruction.decrement(storedBlock, node)) {\n+        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n+      }\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n      String delHint) throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      if (pendingReconstruction.decrement(storedBlock, node)) {\n        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n      }\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
          "commitDate": "30/06/17 10:20 AM",
          "commitName": "6a9dc5f44b0c7945e3e9a56248cd4ff80d5c8f0f",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "30/06/17 10:19 AM",
          "commitNameOld": "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n-      throws IOException {\n+  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n+      String delHint) throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n-      pendingReconstruction.decrement(storedBlock, node);\n+      if (pendingReconstruction.decrement(storedBlock, node)) {\n+        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n+      }\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n      String delHint) throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      if (pendingReconstruction.decrement(storedBlock, node)) {\n        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n      }\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "a2f0cbd92f7e90909cf817c261a5fae13a9695b4": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Revert \"HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\"\n\nAccidentally committed the wrong patch version, reverting to fix that.\n\nThis reverts commit 900221f95ea9fe1936b4d5f277e6047ee8734eca.\n",
      "commitDate": "30/06/17 10:19 AM",
      "commitName": "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Revert \"HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\"\n\nAccidentally committed the wrong patch version, reverting to fix that.\n\nThis reverts commit 900221f95ea9fe1936b4d5f277e6047ee8734eca.\n",
          "commitDate": "30/06/17 10:19 AM",
          "commitName": "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "29/06/17 5:15 PM",
          "commitNameOld": "900221f95ea9fe1936b4d5f277e6047ee8734eca",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,29 @@\n-  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n-      String delHint) throws IOException {\n+  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n+      throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n-      if (pendingReconstruction.decrement(storedBlock, node)) {\n-        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n-      }\n+      pendingReconstruction.decrement(storedBlock, node);\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      pendingReconstruction.decrement(storedBlock, node);\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\"\n\nAccidentally committed the wrong patch version, reverting to fix that.\n\nThis reverts commit 900221f95ea9fe1936b4d5f277e6047ee8734eca.\n",
          "commitDate": "30/06/17 10:19 AM",
          "commitName": "a2f0cbd92f7e90909cf817c261a5fae13a9695b4",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "29/06/17 5:15 PM",
          "commitNameOld": "900221f95ea9fe1936b4d5f277e6047ee8734eca",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,29 @@\n-  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n-      String delHint) throws IOException {\n+  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n+      throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n-      if (pendingReconstruction.decrement(storedBlock, node)) {\n-        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n-      }\n+      pendingReconstruction.decrement(storedBlock, node);\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      pendingReconstruction.decrement(storedBlock, node);\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "900221f95ea9fe1936b4d5f277e6047ee8734eca": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
      "commitDate": "29/06/17 5:15 PM",
      "commitName": "900221f95ea9fe1936b4d5f277e6047ee8734eca",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
          "commitDate": "29/06/17 5:15 PM",
          "commitName": "900221f95ea9fe1936b4d5f277e6047ee8734eca",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "21/06/17 4:34 PM",
          "commitNameOld": "c22cf004425daa9c350df5e365b0db85b1628b40",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 8.03,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n-      throws IOException {\n+  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n+      String delHint) throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n-      pendingReconstruction.decrement(storedBlock, node);\n+      if (pendingReconstruction.decrement(storedBlock, node)) {\n+        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n+      }\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n      String delHint) throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      if (pendingReconstruction.decrement(storedBlock, node)) {\n        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n      }\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12043. Add counters for block re-replication. Contributed by Chen Liang.\n",
          "commitDate": "29/06/17 5:15 PM",
          "commitName": "900221f95ea9fe1936b4d5f277e6047ee8734eca",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "21/06/17 4:34 PM",
          "commitNameOld": "c22cf004425daa9c350df5e365b0db85b1628b40",
          "commitAuthorOld": "Zhe Zhang",
          "daysBetweenCommits": 8.03,
          "commitsBetweenForRepo": 50,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,31 @@\n-  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n-      throws IOException {\n+  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n+      String delHint) throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null \u0026\u0026\n         block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n-      pendingReconstruction.decrement(storedBlock, node);\n+      if (pendingReconstruction.decrement(storedBlock, node)) {\n+        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n+      }\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void addBlock(DatanodeStorageInfo storageInfo, Block block,\n      String delHint) throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      if (pendingReconstruction.decrement(storedBlock, node)) {\n        NameNode.getNameNodeMetrics().incSuccessfulReReplications();\n      }\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "8c0769dee4b455f4de08ccce36334f0be9e79e2c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11960. Successfully closed files can stay under-replicated. Contributed by Kihwal Lee.\n",
      "commitDate": "20/06/17 7:11 AM",
      "commitName": "8c0769dee4b455f4de08ccce36334f0be9e79e2c",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "14/06/17 10:44 AM",
      "commitNameOld": "999c8fcbefc876d9c26c23c5b87a64a81e4f113e",
      "commitAuthorOld": "Lei Xu",
      "daysBetweenCommits": 5.85,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n-    if (storedBlock !\u003d null) {\n+    if (storedBlock !\u003d null \u0026\u0026\n+        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n       pendingReconstruction.decrement(storedBlock, node);\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null \u0026\u0026\n        block.getGenerationStamp() \u003d\u003d storedBlock.getGenerationStamp()) {\n      pendingReconstruction.decrement(storedBlock, node);\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9869. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-2]. Contributed by Rakesh R.\n",
      "commitDate": "25/04/16 10:01 PM",
      "commitName": "5865fe2bf01284993572ea60b3ec3bf8b4492818",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "17/04/16 6:28 PM",
      "commitNameOld": "67523ffcf491f4f2db5335899c00a174d0caaa9b",
      "commitAuthorOld": "Walter Su",
      "daysBetweenCommits": 8.15,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     BlockInfo storedBlock \u003d getStoredBlock(block);\n     if (storedBlock !\u003d null) {\n-      pendingReplications.decrement(storedBlock, node);\n+      pendingReconstruction.decrement(storedBlock, node);\n     }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null) {\n      pendingReconstruction.decrement(storedBlock, node);\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "6e3fcffe291faec40fa9214f4880a35a952836c4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8608. Merge HDFS-7912 to trunk and branch-2 (track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks). Contributed by Zhe Zhang.\n",
      "commitDate": "17/06/15 8:05 AM",
      "commitName": "6e3fcffe291faec40fa9214f4880a35a952836c4",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "12/06/15 11:38 AM",
      "commitNameOld": "c17439c2ddd921b63b1635e6f1cba634b8da8557",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.85,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,28 @@\n   void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n-    pendingReplications.decrement(block, node);\n+    BlockInfo storedBlock \u003d getStoredBlock(block);\n+    if (storedBlock !\u003d null) {\n+      pendingReplications.decrement(getStoredBlock(block), node);\n+    }\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    BlockInfo storedBlock \u003d getStoredBlock(block);\n    if (storedBlock !\u003d null) {\n      pendingReplications.decrement(getStoredBlock(block), node);\n    }\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "a38a37c63417a3b19dcdf98251af196c9d7b8c31": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7912. Erasure Coding: track BlockInfo instead of Block in UnderReplicatedBlocks and PendingReplicationBlocks. Contributed by Jing Zhao.\n",
      "commitDate": "26/05/15 11:41 AM",
      "commitName": "a38a37c63417a3b19dcdf98251af196c9d7b8c31",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "26/05/15 11:32 AM",
      "commitNameOld": "f05c21285ef23b6a973d69f045b1cb46c5abc039",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n             \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n-    pendingReplications.decrement(block, node);\n+    pendingReplications.decrement(getStoredBlock(block), node);\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    pendingReplications.decrement(getStoredBlock(block), node);\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "3ae38ec7dfa1aaf451cf889cec6cf862379af32a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7712. Switch blockStateChangeLog to use slf4j.\n",
      "commitDate": "03/02/15 3:01 PM",
      "commitName": "3ae38ec7dfa1aaf451cf889cec6cf862379af32a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "30/01/15 11:33 AM",
      "commitNameOld": "951b3608a8cb1d9063b9be9c740b524c137b816f",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 4.14,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n-        blockLog.warn(\"BLOCK* blockReceived: \" + block\n-            + \" is expected to be removed from an unrecorded node \" + delHint);\n+        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n+            \"from an unrecorded node {}\", block, delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     pendingReplications.decrement(block, node);\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: {} is expected to be removed \" +\n            \"from an unrecorded node {}\", block, delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    pendingReplications.decrement(block, node);\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "22a41dce4af4d5b533ba875b322551db1c152878": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6997: add more tests for data migration and replicaion.\n",
      "commitDate": "06/09/14 4:44 PM",
      "commitName": "22a41dce4af4d5b533ba875b322551db1c152878",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "04/09/14 2:19 PM",
      "commitNameOld": "e08701ec71f7c10d8f15122d90c35f9f22e40837",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 2.1,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n     DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n-    node.decrementBlocksScheduled();\n+    node.decrementBlocksScheduled(storageInfo.getStorageType());\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: \" + block\n             + \" is expected to be removed from an unrecorded node \" + delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     pendingReplications.decrement(block, node);\n     processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled(storageInfo.getStorageType());\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: \" + block\n            + \" is expected to be removed from an unrecorded node \" + delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    pendingReplications.decrement(block, node);\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    },
    "45db4d204b796eee6dd0e39d3cc94b70c47028d4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6794. Update BlockManager methods to use DatanodeStorageInfo where possible. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615169 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 9:58 AM",
      "commitName": "45db4d204b796eee6dd0e39d3cc94b70c47028d4",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6794. Update BlockManager methods to use DatanodeStorageInfo where possible. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615169 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 9:58 AM",
          "commitName": "45db4d204b796eee6dd0e39d3cc94b70c47028d4",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "31/07/14 6:05 PM",
          "commitNameOld": "b8597e6a10b2e8df1bee4e8ce0c8be345f7e007d",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.66,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  void addBlock(DatanodeDescriptor node, String storageID, Block block, String delHint)\n+  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n+    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled();\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: \" + block\n             + \" is expected to be removed from an unrecorded node \" + delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     pendingReplications.decrement(block, node);\n-    processAndHandleReportedBlock(node, storageID, block, ReplicaState.FINALIZED,\n+    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled();\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: \" + block\n            + \" is expected to be removed from an unrecorded node \" + delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    pendingReplications.decrement(block, node);\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "[node-DatanodeDescriptor, storageID-String, block-Block, delHint-String]",
            "newValue": "[storageInfo-DatanodeStorageInfo, block-Block, delHint-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6794. Update BlockManager methods to use DatanodeStorageInfo where possible. (Arpit Agarwal)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615169 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 9:58 AM",
          "commitName": "45db4d204b796eee6dd0e39d3cc94b70c47028d4",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "31/07/14 6:05 PM",
          "commitNameOld": "b8597e6a10b2e8df1bee4e8ce0c8be345f7e007d",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.66,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,25 @@\n-  void addBlock(DatanodeDescriptor node, String storageID, Block block, String delHint)\n+  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n       throws IOException {\n+    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n     // Decrement number of blocks scheduled to this datanode.\n     // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n     // RECEIVED_BLOCK), we currently also decrease the approximate number. \n     node.decrementBlocksScheduled();\n \n     // get the deletion hint node\n     DatanodeDescriptor delHintNode \u003d null;\n     if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n       delHintNode \u003d datanodeManager.getDatanode(delHint);\n       if (delHintNode \u003d\u003d null) {\n         blockLog.warn(\"BLOCK* blockReceived: \" + block\n             + \" is expected to be removed from an unrecorded node \" + delHint);\n       }\n     }\n \n     //\n     // Modify the blocks-\u003edatanode map and node\u0027s map.\n     //\n     pendingReplications.decrement(block, node);\n-    processAndHandleReportedBlock(node, storageID, block, ReplicaState.FINALIZED,\n+    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n         delHintNode);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void addBlock(DatanodeStorageInfo storageInfo, Block block, String delHint)\n      throws IOException {\n    DatanodeDescriptor node \u003d storageInfo.getDatanodeDescriptor();\n    // Decrement number of blocks scheduled to this datanode.\n    // for a retry request (of DatanodeProtocol#blockReceivedAndDeleted with \n    // RECEIVED_BLOCK), we currently also decrease the approximate number. \n    node.decrementBlocksScheduled();\n\n    // get the deletion hint node\n    DatanodeDescriptor delHintNode \u003d null;\n    if (delHint !\u003d null \u0026\u0026 delHint.length() !\u003d 0) {\n      delHintNode \u003d datanodeManager.getDatanode(delHint);\n      if (delHintNode \u003d\u003d null) {\n        blockLog.warn(\"BLOCK* blockReceived: \" + block\n            + \" is expected to be removed from an unrecorded node \" + delHint);\n      }\n    }\n\n    //\n    // Modify the blocks-\u003edatanode map and node\u0027s map.\n    //\n    pendingReplications.decrement(block, node);\n    processAndHandleReportedBlock(storageInfo, block, ReplicaState.FINALIZED,\n        delHintNode);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    }
  }
}