{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerLaunch.java",
  "functionName": "launchContainer",
  "functionId": "launchContainer___ctx-ContainerStartContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
  "functionStartLine": 561,
  "functionEndLine": 573,
  "numCommitsSeen": 95,
  "timeTaken": 4304,
  "changeHistory": [
    "e787d65a08f5d5245d2313fc34f2dde518bfaa5b",
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
    "c467f311d0c7155c09052d93fac12045af925583",
    "46940d92e2b17c627eb17a9d8fc6cec9c3715592",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f"
  ],
  "changeHistoryShort": {
    "e787d65a08f5d5245d2313fc34f2dde518bfaa5b": "Ybodychange",
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": "Ybodychange",
    "c467f311d0c7155c09052d93fac12045af925583": "Ybodychange",
    "46940d92e2b17c627eb17a9d8fc6cec9c3715592": "Yexceptionschange",
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": "Ybodychange",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e787d65a08f5d5245d2313fc34f2dde518bfaa5b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8861. executorLock is misleading in ContainerLaunch. Contributed by Chandni Singh\n",
      "commitDate": "11/10/18 8:54 AM",
      "commitName": "e787d65a08f5d5245d2313fc34f2dde518bfaa5b",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/10/18 7:52 AM",
      "commitNameOld": "5ce70e1211e624d58e8bb1181aec00729ebdc085",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   protected int launchContainer(ContainerStartContext ctx)\n       throws IOException, ConfigurationException {\n     int launchPrep \u003d prepareForLaunch(ctx);\n     if (launchPrep \u003d\u003d 0) {\n-      containerExecLock.lock();\n+      launchLock.lock();\n       try {\n         return exec.launchContainer(ctx);\n       } finally {\n-        containerExecLock.unlock();\n+        launchLock.unlock();\n       }\n     }\n     return launchPrep;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int launchContainer(ContainerStartContext ctx)\n      throws IOException, ConfigurationException {\n    int launchPrep \u003d prepareForLaunch(ctx);\n    if (launchPrep \u003d\u003d 0) {\n      launchLock.lock();\n      try {\n        return exec.launchContainer(ctx);\n      } finally {\n        launchLock.unlock();\n      }\n    }\n    return launchPrep;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8160.  Support upgrade of service that use docker containers.\n            Contributed by Chandni Singh\n",
      "commitDate": "14/08/18 8:36 AM",
      "commitName": "4cba0741d58e0aeacde5b6541c9ef40a9f0e40c7",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "09/08/18 8:17 AM",
      "commitNameOld": "cd04e954d2db27f0a15b7d1c492b7cdb656a51db",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 5.01,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,13 @@\n   protected int launchContainer(ContainerStartContext ctx)\n       throws IOException, ConfigurationException {\n     int launchPrep \u003d prepareForLaunch(ctx);\n     if (launchPrep \u003d\u003d 0) {\n-      return exec.launchContainer(ctx);\n+      containerExecLock.lock();\n+      try {\n+        return exec.launchContainer(ctx);\n+      } finally {\n+        containerExecLock.unlock();\n+      }\n     }\n     return launchPrep;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int launchContainer(ContainerStartContext ctx)\n      throws IOException, ConfigurationException {\n    int launchPrep \u003d prepareForLaunch(ctx);\n    if (launchPrep \u003d\u003d 0) {\n      containerExecLock.lock();\n      try {\n        return exec.launchContainer(ctx);\n      } finally {\n        containerExecLock.unlock();\n      }\n    }\n    return launchPrep;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "c467f311d0c7155c09052d93fac12045af925583": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
      "commitDate": "10/04/18 4:25 PM",
      "commitName": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/18 7:20 AM",
      "commitNameOld": "d69b31f7f70f296ddd180e004fa0f827c2f737f2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 34.34,
      "commitsBetweenForRepo": 353,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,8 @@\n   protected int launchContainer(ContainerStartContext ctx)\n       throws IOException, ConfigurationException {\n-    ContainerId containerId \u003d container.getContainerId();\n-    if (container.isMarkedForKilling()) {\n-      LOG.info(\"Container \" + containerId + \" not launched as it has already \"\n-          + \"been marked for Killing\");\n-      this.killedBeforeStart \u003d true;\n-      return ExitCode.TERMINATED.getExitCode();\n-    }\n-    // LaunchContainer is a blocking call. We are here almost means the\n-    // container is launched, so send out the event.\n-    dispatcher.getEventHandler().handle(new ContainerEvent(\n-        containerId,\n-        ContainerEventType.CONTAINER_LAUNCHED));\n-    context.getNMStateStore().storeContainerLaunched(containerId);\n-\n-    // Check if the container is signalled to be killed.\n-    if (!containerAlreadyLaunched.compareAndSet(false, true)) {\n-      LOG.info(\"Container \" + containerId + \" not launched as \"\n-          + \"cleanup already called\");\n-      return ExitCode.TERMINATED.getExitCode();\n-    } else {\n-      exec.activateContainer(containerId, pidFilePath);\n+    int launchPrep \u003d prepareForLaunch(ctx);\n+    if (launchPrep \u003d\u003d 0) {\n       return exec.launchContainer(ctx);\n     }\n+    return launchPrep;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int launchContainer(ContainerStartContext ctx)\n      throws IOException, ConfigurationException {\n    int launchPrep \u003d prepareForLaunch(ctx);\n    if (launchPrep \u003d\u003d 0) {\n      return exec.launchContainer(ctx);\n    }\n    return launchPrep;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "46940d92e2b17c627eb17a9d8fc6cec9c3715592": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-6302. Fail the node if Linux Container Executor is not configured properly\n(Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "19/04/17 12:23 PM",
      "commitName": "46940d92e2b17c627eb17a9d8fc6cec9c3715592",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "01/03/17 2:53 PM",
      "commitNameOld": "6f6dfe0202249c129b36edfd145a2224140139cc",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 48.85,
      "commitsBetweenForRepo": 295,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n-  protected int launchContainer(ContainerStartContext ctx) throws IOException {\n+  protected int launchContainer(ContainerStartContext ctx)\n+      throws IOException, ConfigurationException {\n     ContainerId containerId \u003d container.getContainerId();\n     if (container.isMarkedForKilling()) {\n       LOG.info(\"Container \" + containerId + \" not launched as it has already \"\n           + \"been marked for Killing\");\n       this.killedBeforeStart \u003d true;\n       return ExitCode.TERMINATED.getExitCode();\n     }\n     // LaunchContainer is a blocking call. We are here almost means the\n     // container is launched, so send out the event.\n     dispatcher.getEventHandler().handle(new ContainerEvent(\n         containerId,\n         ContainerEventType.CONTAINER_LAUNCHED));\n     context.getNMStateStore().storeContainerLaunched(containerId);\n \n     // Check if the container is signalled to be killed.\n     if (!containerAlreadyLaunched.compareAndSet(false, true)) {\n       LOG.info(\"Container \" + containerId + \" not launched as \"\n           + \"cleanup already called\");\n       return ExitCode.TERMINATED.getExitCode();\n     } else {\n       exec.activateContainer(containerId, pidFilePath);\n       return exec.launchContainer(ctx);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int launchContainer(ContainerStartContext ctx)\n      throws IOException, ConfigurationException {\n    ContainerId containerId \u003d container.getContainerId();\n    if (container.isMarkedForKilling()) {\n      LOG.info(\"Container \" + containerId + \" not launched as it has already \"\n          + \"been marked for Killing\");\n      this.killedBeforeStart \u003d true;\n      return ExitCode.TERMINATED.getExitCode();\n    }\n    // LaunchContainer is a blocking call. We are here almost means the\n    // container is launched, so send out the event.\n    dispatcher.getEventHandler().handle(new ContainerEvent(\n        containerId,\n        ContainerEventType.CONTAINER_LAUNCHED));\n    context.getNMStateStore().storeContainerLaunched(containerId);\n\n    // Check if the container is signalled to be killed.\n    if (!containerAlreadyLaunched.compareAndSet(false, true)) {\n      LOG.info(\"Container \" + containerId + \" not launched as \"\n          + \"cleanup already called\");\n      return ExitCode.TERMINATED.getExitCode();\n    } else {\n      exec.activateContainer(containerId, pidFilePath);\n      return exec.launchContainer(ctx);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[IOException, ConfigurationException]"
      }
    },
    "3219b7b4ac7d12aee343f6ab2980b3357fc618b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4597. Introduce ContainerScheduler and a SCHEDULED state to NodeManager container lifecycle. (asuresh)\n",
      "commitDate": "15/11/16 7:56 AM",
      "commitName": "3219b7b4ac7d12aee343f6ab2980b3357fc618b6",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/11/16 2:21 AM",
      "commitNameOld": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 14.27,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,25 @@\n   protected int launchContainer(ContainerStartContext ctx) throws IOException {\n     ContainerId containerId \u003d container.getContainerId();\n-\n+    if (container.isMarkedForKilling()) {\n+      LOG.info(\"Container \" + containerId + \" not launched as it has already \"\n+          + \"been marked for Killing\");\n+      this.killedBeforeStart \u003d true;\n+      return ExitCode.TERMINATED.getExitCode();\n+    }\n     // LaunchContainer is a blocking call. We are here almost means the\n     // container is launched, so send out the event.\n     dispatcher.getEventHandler().handle(new ContainerEvent(\n         containerId,\n         ContainerEventType.CONTAINER_LAUNCHED));\n     context.getNMStateStore().storeContainerLaunched(containerId);\n \n     // Check if the container is signalled to be killed.\n-    if (!shouldLaunchContainer.compareAndSet(false, true)) {\n+    if (!containerAlreadyLaunched.compareAndSet(false, true)) {\n       LOG.info(\"Container \" + containerId + \" not launched as \"\n           + \"cleanup already called\");\n       return ExitCode.TERMINATED.getExitCode();\n     } else {\n       exec.activateContainer(containerId, pidFilePath);\n       return exec.launchContainer(ctx);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int launchContainer(ContainerStartContext ctx) throws IOException {\n    ContainerId containerId \u003d container.getContainerId();\n    if (container.isMarkedForKilling()) {\n      LOG.info(\"Container \" + containerId + \" not launched as it has already \"\n          + \"been marked for Killing\");\n      this.killedBeforeStart \u003d true;\n      return ExitCode.TERMINATED.getExitCode();\n    }\n    // LaunchContainer is a blocking call. We are here almost means the\n    // container is launched, so send out the event.\n    dispatcher.getEventHandler().handle(new ContainerEvent(\n        containerId,\n        ContainerEventType.CONTAINER_LAUNCHED));\n    context.getNMStateStore().storeContainerLaunched(containerId);\n\n    // Check if the container is signalled to be killed.\n    if (!containerAlreadyLaunched.compareAndSet(false, true)) {\n      LOG.info(\"Container \" + containerId + \" not launched as \"\n          + \"cleanup already called\");\n      return ExitCode.TERMINATED.getExitCode();\n    } else {\n      exec.activateContainer(containerId, pidFilePath);\n      return exec.launchContainer(ctx);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java",
      "extendedDetails": {}
    },
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3998. Add support in the NodeManager to re-launch containers. Contributed by Jun Gong.\n",
      "commitDate": "29/04/16 3:39 AM",
      "commitName": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,20 @@\n+  protected int launchContainer(ContainerStartContext ctx) throws IOException {\n+    ContainerId containerId \u003d container.getContainerId();\n+\n+    // LaunchContainer is a blocking call. We are here almost means the\n+    // container is launched, so send out the event.\n+    dispatcher.getEventHandler().handle(new ContainerEvent(\n+        containerId,\n+        ContainerEventType.CONTAINER_LAUNCHED));\n+    context.getNMStateStore().storeContainerLaunched(containerId);\n+\n+    // Check if the container is signalled to be killed.\n+    if (!shouldLaunchContainer.compareAndSet(false, true)) {\n+      LOG.info(\"Container \" + containerId + \" not launched as \"\n+          + \"cleanup already called\");\n+      return ExitCode.TERMINATED.getExitCode();\n+    } else {\n+      exec.activateContainer(containerId, pidFilePath);\n+      return exec.launchContainer(ctx);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int launchContainer(ContainerStartContext ctx) throws IOException {\n    ContainerId containerId \u003d container.getContainerId();\n\n    // LaunchContainer is a blocking call. We are here almost means the\n    // container is launched, so send out the event.\n    dispatcher.getEventHandler().handle(new ContainerEvent(\n        containerId,\n        ContainerEventType.CONTAINER_LAUNCHED));\n    context.getNMStateStore().storeContainerLaunched(containerId);\n\n    // Check if the container is signalled to be killed.\n    if (!shouldLaunchContainer.compareAndSet(false, true)) {\n      LOG.info(\"Container \" + containerId + \" not launched as \"\n          + \"cleanup already called\");\n      return ExitCode.TERMINATED.getExitCode();\n    } else {\n      exec.activateContainer(containerId, pidFilePath);\n      return exec.launchContainer(ctx);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/launcher/ContainerLaunch.java"
    }
  }
}