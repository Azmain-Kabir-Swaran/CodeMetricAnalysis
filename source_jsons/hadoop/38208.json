{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProportionalCapacityPreemptionPolicy.java",
  "functionName": "syncKillableContainersFromScheduler",
  "functionId": "syncKillableContainersFromScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
  "functionStartLine": 385,
  "functionEndLine": 399,
  "numCommitsSeen": 49,
  "timeTaken": 2333,
  "changeHistory": [
    "60e4116bf1d00afed91010e57357fe54057e4e39",
    "ae14e5d07f1b6702a5160637438028bb03d9387e"
  ],
  "changeHistoryShort": {
    "60e4116bf1d00afed91010e57357fe54057e4e39": "Ybodychange",
    "ae14e5d07f1b6702a5160637438028bb03d9387e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "60e4116bf1d00afed91010e57357fe54057e4e39": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4822. Refactor existing Preemption Policy of CS for easier adding new approach to select preemption candidates. Contributed by Wangda Tan\n",
      "commitDate": "30/03/16 12:43 PM",
      "commitName": "60e4116bf1d00afed91010e57357fe54057e4e39",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/03/16 5:02 PM",
      "commitNameOld": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 13.82,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   private void syncKillableContainersFromScheduler() {\n     // sync preemptable entities from scheduler\n-    preemptableEntities \u003d\n-        scheduler.getPreemptionManager().getShallowCopyOfPreemptableEntities();\n+    preemptableQueues \u003d\n+        scheduler.getPreemptionManager().getShallowCopyOfPreemptableQueues();\n \n     killableContainers \u003d new HashSet\u003c\u003e();\n-    for (Map.Entry\u003cString, PreemptableQueue\u003e entry : preemptableEntities\n+    for (Map.Entry\u003cString, PreemptableQueue\u003e entry : preemptableQueues\n         .entrySet()) {\n       PreemptableQueue entity \u003d entry.getValue();\n       for (Map\u003cContainerId, RMContainer\u003e map : entity.getKillableContainers()\n           .values()) {\n         killableContainers.addAll(map.keySet());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncKillableContainersFromScheduler() {\n    // sync preemptable entities from scheduler\n    preemptableQueues \u003d\n        scheduler.getPreemptionManager().getShallowCopyOfPreemptableQueues();\n\n    killableContainers \u003d new HashSet\u003c\u003e();\n    for (Map.Entry\u003cString, PreemptableQueue\u003e entry : preemptableQueues\n        .entrySet()) {\n      PreemptableQueue entity \u003d entry.getValue();\n      for (Map\u003cContainerId, RMContainer\u003e map : entity.getKillableContainers()\n          .values()) {\n        killableContainers.addAll(map.keySet());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java",
      "extendedDetails": {}
    },
    "ae14e5d07f1b6702a5160637438028bb03d9387e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4108. CapacityScheduler: Improve preemption to only kill containers that would satisfy the incoming request. (Wangda Tan)\n\n(cherry picked from commit 7e8c9beb4156dcaeb3a11e60aaa06d2370626913)\n",
      "commitDate": "16/03/16 5:02 PM",
      "commitName": "ae14e5d07f1b6702a5160637438028bb03d9387e",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,15 @@\n+  private void syncKillableContainersFromScheduler() {\n+    // sync preemptable entities from scheduler\n+    preemptableEntities \u003d\n+        scheduler.getPreemptionManager().getShallowCopyOfPreemptableEntities();\n+\n+    killableContainers \u003d new HashSet\u003c\u003e();\n+    for (Map.Entry\u003cString, PreemptableQueue\u003e entry : preemptableEntities\n+        .entrySet()) {\n+      PreemptableQueue entity \u003d entry.getValue();\n+      for (Map\u003cContainerId, RMContainer\u003e map : entity.getKillableContainers()\n+          .values()) {\n+        killableContainers.addAll(map.keySet());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void syncKillableContainersFromScheduler() {\n    // sync preemptable entities from scheduler\n    preemptableEntities \u003d\n        scheduler.getPreemptionManager().getShallowCopyOfPreemptableEntities();\n\n    killableContainers \u003d new HashSet\u003c\u003e();\n    for (Map.Entry\u003cString, PreemptableQueue\u003e entry : preemptableEntities\n        .entrySet()) {\n      PreemptableQueue entity \u003d entry.getValue();\n      for (Map\u003cContainerId, RMContainer\u003e map : entity.getKillableContainers()\n          .values()) {\n        killableContainers.addAll(map.keySet());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/monitor/capacity/ProportionalCapacityPreemptionPolicy.java"
    }
  }
}