{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ViewFileSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___theUri-URI(modifiers-final)__conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
  "functionStartLine": 263,
  "functionEndLine": 316,
  "numCommitsSeen": 61,
  "timeTaken": 4593,
  "changeHistory": [
    "4734c77b4b64b7c6432da4cc32881aba85f94ea1",
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe",
    "c92a3e94d80c86199e65735ee5aec4a6f02f50a3",
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
    "6d983cca52f113118bf49fec527ffb3eb869290a",
    "eb7791b4743c593ac7d0f0d08962132723ffe3c6",
    "da00476fca356514b0720b64c40b632a445a8907",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "3db6c4a94448163af5a1af50bc5e97aef28878c0",
    "e79d8afcd05722fe369eba919abe4f4205771a41",
    "1596a106e4db28b7372b97a55e6cd7ea844f3df6",
    "f1c74df922058e88791ed6971bbb96b53f6770f1"
  ],
  "changeHistoryShort": {
    "4734c77b4b64b7c6432da4cc32881aba85f94ea1": "Ybodychange",
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe": "Ybodychange",
    "c92a3e94d80c86199e65735ee5aec4a6f02f50a3": "Ybodychange",
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": "Ybodychange",
    "6d983cca52f113118bf49fec527ffb3eb869290a": "Ybodychange",
    "eb7791b4743c593ac7d0f0d08962132723ffe3c6": "Ybodychange",
    "da00476fca356514b0720b64c40b632a445a8907": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "3db6c4a94448163af5a1af50bc5e97aef28878c0": "Ybodychange",
    "e79d8afcd05722fe369eba919abe4f4205771a41": "Ybodychange",
    "1596a106e4db28b7372b97a55e6cd7ea844f3df6": "Ybodychange",
    "f1c74df922058e88791ed6971bbb96b53f6770f1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4734c77b4b64b7c6432da4cc32881aba85f94ea1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15322. Make NflyFS to work when ViewFsOverloadScheme\u0027s scheme and target uris schemes are same. Contributed by Uma Maheswara Rao G.\n\n",
      "commitDate": "21/05/20 9:34 PM",
      "commitName": "4734c77b4b64b7c6432da4cc32881aba85f94ea1",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "18/05/20 10:27 PM",
      "commitNameOld": "ce4ec7445345eb94c6741d416814a4eac319f0a6",
      "commitAuthorOld": "Abhishek Das",
      "daysBetweenCommits": 2.96,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,54 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     enableInnerCache \u003d config.getBoolean(CONFIG_VIEWFS_ENABLE_INNER_CACHE,\n         CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT);\n     FsGetter fsGetter \u003d fsGetter();\n     final InnerCache innerCache \u003d new InnerCache(fsGetter);\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(getScheme(), authority, \"/\", null, null);\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n         @Override\n         protected FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             FileSystem fs;\n             if (enableInnerCache) {\n               fs \u003d innerCache.get(uri, config);\n             } else {\n               fs \u003d fsGetter.get(uri, config);\n             }\n             return new ChRootedFileSystem(fs, uri);\n         }\n \n         @Override\n         protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n         }\n \n         @Override\n         protected FileSystem getTargetFileSystem(final String settings,\n             final URI[] uris) throws URISyntaxException, IOException {\n-          return NflyFSystem.createFileSystem(uris, config, settings);\n+          return NflyFSystem.createFileSystem(uris, config, settings,\n+              fsGetter);\n         }\n       };\n       workingDir \u003d this.getHomeDirectory();\n       renameStrategy \u003d RenameStrategy.valueOf(\n           conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n               RenameStrategy.SAME_MOUNTPOINT.toString()));\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n     if (enableInnerCache) {\n       // All fs instances are created and cached on startup. The cache is\n       // readonly after the initialize() so the concurrent access of the cache\n       // is safe.\n       cache \u003d innerCache.unmodifiableCache();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    enableInnerCache \u003d config.getBoolean(CONFIG_VIEWFS_ENABLE_INNER_CACHE,\n        CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT);\n    FsGetter fsGetter \u003d fsGetter();\n    final InnerCache innerCache \u003d new InnerCache(fsGetter);\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(getScheme(), authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n        @Override\n        protected FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            FileSystem fs;\n            if (enableInnerCache) {\n              fs \u003d innerCache.get(uri, config);\n            } else {\n              fs \u003d fsGetter.get(uri, config);\n            }\n            return new ChRootedFileSystem(fs, uri);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final String settings,\n            final URI[] uris) throws URISyntaxException, IOException {\n          return NflyFSystem.createFileSystem(uris, config, settings,\n              fsGetter);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n      renameStrategy \u003d RenameStrategy.valueOf(\n          conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n              RenameStrategy.SAME_MOUNTPOINT.toString()));\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n    if (enableInnerCache) {\n      // All fs instances are created and cached on startup. The cache is\n      // readonly after the initialize() so the concurrent access of the cache\n      // is safe.\n      cache \u003d innerCache.unmodifiableCache();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15305. Extend ViewFS and provide ViewFileSystemOverloadScheme implementation with scheme configurable. Contributed by Uma Maheswara Rao G.\n\n",
      "commitDate": "04/05/20 5:55 PM",
      "commitName": "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "25/09/19 4:16 AM",
      "commitNameOld": "e346e3638c595a512cd582739ff51fb64c3b4950",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 222.57,
      "commitsBetweenForRepo": 841,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     enableInnerCache \u003d config.getBoolean(CONFIG_VIEWFS_ENABLE_INNER_CACHE,\n         CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT);\n-    final InnerCache innerCache \u003d new InnerCache();\n+    FsGetter fsGetter \u003d fsGetter();\n+    final InnerCache innerCache \u003d new InnerCache(fsGetter);\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n-      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n+      myUri \u003d new URI(getScheme(), authority, \"/\", null, null);\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n-\n         @Override\n         protected FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             FileSystem fs;\n             if (enableInnerCache) {\n               fs \u003d innerCache.get(uri, config);\n             } else {\n-              fs \u003d FileSystem.get(uri, config);\n+              fs \u003d fsGetter.get(uri, config);\n             }\n             return new ChRootedFileSystem(fs, uri);\n         }\n \n         @Override\n         protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n         }\n \n         @Override\n         protected FileSystem getTargetFileSystem(final String settings,\n             final URI[] uris) throws URISyntaxException, IOException {\n           return NflyFSystem.createFileSystem(uris, config, settings);\n         }\n       };\n       workingDir \u003d this.getHomeDirectory();\n       renameStrategy \u003d RenameStrategy.valueOf(\n           conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n               RenameStrategy.SAME_MOUNTPOINT.toString()));\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n     if (enableInnerCache) {\n       // All fs instances are created and cached on startup. The cache is\n       // readonly after the initialize() so the concurrent access of the cache\n       // is safe.\n       cache \u003d innerCache.unmodifiableCache();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    enableInnerCache \u003d config.getBoolean(CONFIG_VIEWFS_ENABLE_INNER_CACHE,\n        CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT);\n    FsGetter fsGetter \u003d fsGetter();\n    final InnerCache innerCache \u003d new InnerCache(fsGetter);\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(getScheme(), authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n        @Override\n        protected FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            FileSystem fs;\n            if (enableInnerCache) {\n              fs \u003d innerCache.get(uri, config);\n            } else {\n              fs \u003d fsGetter.get(uri, config);\n            }\n            return new ChRootedFileSystem(fs, uri);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final String settings,\n            final URI[] uris) throws URISyntaxException, IOException {\n          return NflyFSystem.createFileSystem(uris, config, settings);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n      renameStrategy \u003d RenameStrategy.valueOf(\n          conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n              RenameStrategy.SAME_MOUNTPOINT.toString()));\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n    if (enableInnerCache) {\n      // All fs instances are created and cached on startup. The cache is\n      // readonly after the initialize() so the concurrent access of the cache\n      // is safe.\n      cache \u003d innerCache.unmodifiableCache();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "c92a3e94d80c86199e65735ee5aec4a6f02f50a3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15565. Add an inner FS cache to ViewFileSystem, separate from the global cache, to avoid file system leaks. Contributed by Jinglun.\n",
      "commitDate": "06/09/19 10:22 AM",
      "commitName": "c92a3e94d80c86199e65735ee5aec4a6f02f50a3",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "25/02/19 11:10 PM",
      "commitNameOld": "59ba3552d35fa10614b3b7aec42a0d81bd51b944",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 192.42,
      "commitsBetweenForRepo": 1492,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,53 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n+    enableInnerCache \u003d config.getBoolean(CONFIG_VIEWFS_ENABLE_INNER_CACHE,\n+        CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT);\n+    final InnerCache innerCache \u003d new InnerCache();\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n         protected FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n-            return new ChRootedFileSystem(uri, config);\n+            FileSystem fs;\n+            if (enableInnerCache) {\n+              fs \u003d innerCache.get(uri, config);\n+            } else {\n+              fs \u003d FileSystem.get(uri, config);\n+            }\n+            return new ChRootedFileSystem(fs, uri);\n         }\n \n         @Override\n         protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n         }\n \n         @Override\n         protected FileSystem getTargetFileSystem(final String settings,\n             final URI[] uris) throws URISyntaxException, IOException {\n           return NflyFSystem.createFileSystem(uris, config, settings);\n         }\n       };\n       workingDir \u003d this.getHomeDirectory();\n       renameStrategy \u003d RenameStrategy.valueOf(\n           conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n               RenameStrategy.SAME_MOUNTPOINT.toString()));\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n+    if (enableInnerCache) {\n+      // All fs instances are created and cached on startup. The cache is\n+      // readonly after the initialize() so the concurrent access of the cache\n+      // is safe.\n+      cache \u003d innerCache.unmodifiableCache();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    enableInnerCache \u003d config.getBoolean(CONFIG_VIEWFS_ENABLE_INNER_CACHE,\n        CONFIG_VIEWFS_ENABLE_INNER_CACHE_DEFAULT);\n    final InnerCache innerCache \u003d new InnerCache();\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            FileSystem fs;\n            if (enableInnerCache) {\n              fs \u003d innerCache.get(uri, config);\n            } else {\n              fs \u003d FileSystem.get(uri, config);\n            }\n            return new ChRootedFileSystem(fs, uri);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final String settings,\n            final URI[] uris) throws URISyntaxException, IOException {\n          return NflyFSystem.createFileSystem(uris, config, settings);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n      renameStrategy \u003d RenameStrategy.valueOf(\n          conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n              RenameStrategy.SAME_MOUNTPOINT.toString()));\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n    if (enableInnerCache) {\n      // All fs instances are created and cached on startup. The cache is\n      // readonly after the initialize() so the concurrent access of the cache\n      // is safe.\n      cache \u003d innerCache.unmodifiableCache();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12077. Provide a multi-URI replication Inode for ViewFs. Contributed by Gera Shegalov\n",
      "commitDate": "05/09/17 11:51 PM",
      "commitName": "1f3bc63e6772be81bc9a6a7d93ed81d2a9e066c0",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "25/07/17 8:51 AM",
      "commitNameOld": "6d983cca52f113118bf49fec527ffb3eb869290a",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 42.62,
      "commitsBetweenForRepo": 373,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,38 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n-        protected\n-        FileSystem getTargetFileSystem(final URI uri)\n+        protected FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             return new ChRootedFileSystem(uri, config);\n         }\n \n         @Override\n-        protected\n-        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n+        protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n         }\n \n         @Override\n-        protected\n-        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n-            throws URISyntaxException, UnsupportedFileSystemException {\n-          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n-          // return MergeFs.createMergeFs(mergeFsURIList, config);\n+        protected FileSystem getTargetFileSystem(final String settings,\n+            final URI[] uris) throws URISyntaxException, IOException {\n+          return NflyFSystem.createFileSystem(uris, config, settings);\n         }\n       };\n       workingDir \u003d this.getHomeDirectory();\n       renameStrategy \u003d RenameStrategy.valueOf(\n           conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n               RenameStrategy.SAME_MOUNTPOINT.toString()));\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(uri, config);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n        }\n\n        @Override\n        protected FileSystem getTargetFileSystem(final String settings,\n            final URI[] uris) throws URISyntaxException, IOException {\n          return NflyFSystem.createFileSystem(uris, config, settings);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n      renameStrategy \u003d RenameStrategy.valueOf(\n          conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n              RenameStrategy.SAME_MOUNTPOINT.toString()));\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "6d983cca52f113118bf49fec527ffb3eb869290a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14455. ViewFileSystem#rename should support be supported within same nameservice with different mountpoints. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "25/07/17 8:51 AM",
      "commitName": "6d983cca52f113118bf49fec527ffb3eb869290a",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "17/05/17 1:12 PM",
      "commitNameOld": "eb7791b4743c593ac7d0f0d08962132723ffe3c6",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 68.82,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,42 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             return new ChRootedFileSystem(uri, config);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n             throws URISyntaxException, UnsupportedFileSystemException {\n           throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n           // return MergeFs.createMergeFs(mergeFsURIList, config);\n         }\n       };\n       workingDir \u003d this.getHomeDirectory();\n+      renameStrategy \u003d RenameStrategy.valueOf(\n+          conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n+              RenameStrategy.SAME_MOUNTPOINT.toString()));\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(uri, config);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n      renameStrategy \u003d RenameStrategy.valueOf(\n          conf.get(Constants.CONFIG_VIEWFS_RENAME_STRATEGY,\n              RenameStrategy.SAME_MOUNTPOINT.toString()));\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "eb7791b4743c593ac7d0f0d08962132723ffe3c6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14427. Avoid reloading of Configuration in ViewFileSystem creation. Contributed by Vinayakumar B\n",
      "commitDate": "17/05/17 1:12 PM",
      "commitName": "eb7791b4743c593ac7d0f0d08962132723ffe3c6",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "09/01/17 6:01 PM",
      "commitNameOld": "511d39e0740f36bf937e7bcf974e1050f0e7c1e0",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 127.76,
      "commitsBetweenForRepo": 708,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             return new ChRootedFileSystem(uri, config);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n-          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n+          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n             throws URISyntaxException, UnsupportedFileSystemException {\n           throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n           // return MergeFs.createMergeFs(mergeFsURIList, config);\n         }\n       };\n       workingDir \u003d this.getHomeDirectory();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(uri, config);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri, config);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "da00476fca356514b0720b64c40b632a445a8907": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8013 ViewFileSystem does not honor setVerifyChecksum (Dayrn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240383 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 2:55 PM",
      "commitName": "da00476fca356514b0720b64c40b632a445a8907",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "09/01/12 1:52 PM",
      "commitNameOld": "8feb26f116b8255853224a74aedb479b9d11b6ae",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 25.04,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,39 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n-            return new ChRootedFileSystem(FileSystem.get(uri, config), \n-                new Path(uri.getPath()));\n+            return new ChRootedFileSystem(uri, config);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n             throws URISyntaxException, UnsupportedFileSystemException {\n           throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n           // return MergeFs.createMergeFs(mergeFsURIList, config);\n         }\n       };\n       workingDir \u003d this.getHomeDirectory();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(uri, config);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(FileSystem.get(uri, config), \n                new Path(uri.getPath()));\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(FileSystem.get(uri, config), \n                new Path(uri.getPath()));\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(FileSystem.get(uri, config), \n                new Path(uri.getPath()));\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
      }
    },
    "3db6c4a94448163af5a1af50bc5e97aef28878c0": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-7284 Trash and shell\u0027s rm does not work for viewfs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1129989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/11 8:27 PM",
      "commitName": "3db6c4a94448163af5a1af50bc5e97aef28878c0",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "25/05/11 1:45 PM",
      "commitNameOld": "e79d8afcd05722fe369eba919abe4f4205771a41",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n-      workingDir \u003d\n-        this.makeQualified(new Path(\"/user/\" + ugi.getShortUserName()));\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             return new ChRootedFileSystem(FileSystem.get(uri, config), \n                 new Path(uri.getPath()));\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n             throws URISyntaxException, UnsupportedFileSystemException {\n           throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n           // return MergeFs.createMergeFs(mergeFsURIList, config);\n         }\n       };\n+      workingDir \u003d this.getHomeDirectory();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(FileSystem.get(uri, config), \n                new Path(uri.getPath()));\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "e79d8afcd05722fe369eba919abe4f4205771a41": {
      "type": "Ybodychange",
      "commitMessage": "Revert HADOOP-7284 (r1127642) since it broke the HDFS build.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1127679 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/05/11 1:45 PM",
      "commitName": "e79d8afcd05722fe369eba919abe4f4205771a41",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/05/11 12:23 PM",
      "commitNameOld": "1596a106e4db28b7372b97a55e6cd7ea844f3df6",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n+      workingDir \u003d\n+        this.makeQualified(new Path(\"/user/\" + ugi.getShortUserName()));\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             return new ChRootedFileSystem(FileSystem.get(uri, config), \n                 new Path(uri.getPath()));\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n             throws URISyntaxException, UnsupportedFileSystemException {\n           throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n           // return MergeFs.createMergeFs(mergeFsURIList, config);\n         }\n       };\n-      workingDir \u003d this.getHomeDirectory();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      workingDir \u003d\n        this.makeQualified(new Path(\"/user/\" + ugi.getShortUserName()));\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(FileSystem.get(uri, config), \n                new Path(uri.getPath()));\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "1596a106e4db28b7372b97a55e6cd7ea844f3df6": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-7284 Trash and shell\u0027s rm does not work for viewfs (Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1127642 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/05/11 12:23 PM",
      "commitName": "1596a106e4db28b7372b97a55e6cd7ea844f3df6",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "05/05/11 7:11 PM",
      "commitNameOld": "f1c74df922058e88791ed6971bbb96b53f6770f1",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 19.72,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,40 @@\n   public void initialize(final URI theUri, final Configuration conf)\n       throws IOException {\n     super.initialize(theUri, conf);\n     setConf(conf);\n     config \u003d conf;\n     // Now build  client side view (i.e. client side mount table) from config.\n     final String authority \u003d theUri.getAuthority();\n     try {\n       myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n-      workingDir \u003d\n-        this.makeQualified(new Path(\"/user/\" + ugi.getShortUserName()));\n       fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final URI uri)\n           throws URISyntaxException, IOException {\n             return new ChRootedFileSystem(FileSystem.get(uri, config), \n                 new Path(uri.getPath()));\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n           throws URISyntaxException {\n           return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n         }\n \n         @Override\n         protected\n         FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n             throws URISyntaxException, UnsupportedFileSystemException {\n           throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n           // return MergeFs.createMergeFs(mergeFsURIList, config);\n         }\n       };\n+      workingDir \u003d this.getHomeDirectory();\n     } catch (URISyntaxException e) {\n       throw new IOException(\"URISyntax exception: \" + theUri);\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(FileSystem.get(uri, config), \n                new Path(uri.getPath()));\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n      workingDir \u003d this.getHomeDirectory();\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java",
      "extendedDetails": {}
    },
    "f1c74df922058e88791ed6971bbb96b53f6770f1": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7257 Client side mount tables (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1100026 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/05/11 7:11 PM",
      "commitName": "f1c74df922058e88791ed6971bbb96b53f6770f1",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,41 @@\n+  public void initialize(final URI theUri, final Configuration conf)\n+      throws IOException {\n+    super.initialize(theUri, conf);\n+    setConf(conf);\n+    config \u003d conf;\n+    // Now build  client side view (i.e. client side mount table) from config.\n+    final String authority \u003d theUri.getAuthority();\n+    try {\n+      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n+      workingDir \u003d\n+        this.makeQualified(new Path(\"/user/\" + ugi.getShortUserName()));\n+      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n+\n+        @Override\n+        protected\n+        FileSystem getTargetFileSystem(final URI uri)\n+          throws URISyntaxException, IOException {\n+            return new ChRootedFileSystem(FileSystem.get(uri, config), \n+                new Path(uri.getPath()));\n+        }\n+\n+        @Override\n+        protected\n+        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n+          throws URISyntaxException {\n+          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n+        }\n+\n+        @Override\n+        protected\n+        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n+            throws URISyntaxException, UnsupportedFileSystemException {\n+          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n+          // return MergeFs.createMergeFs(mergeFsURIList, config);\n+        }\n+      };\n+    } catch (URISyntaxException e) {\n+      throw new IOException(\"URISyntax exception: \" + theUri);\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(final URI theUri, final Configuration conf)\n      throws IOException {\n    super.initialize(theUri, conf);\n    setConf(conf);\n    config \u003d conf;\n    // Now build  client side view (i.e. client side mount table) from config.\n    final String authority \u003d theUri.getAuthority();\n    try {\n      myUri \u003d new URI(FsConstants.VIEWFS_SCHEME, authority, \"/\", null, null);\n      workingDir \u003d\n        this.makeQualified(new Path(\"/user/\" + ugi.getShortUserName()));\n      fsState \u003d new InodeTree\u003cFileSystem\u003e(conf, authority) {\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final URI uri)\n          throws URISyntaxException, IOException {\n            return new ChRootedFileSystem(FileSystem.get(uri, config), \n                new Path(uri.getPath()));\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(final INodeDir\u003cFileSystem\u003e dir)\n          throws URISyntaxException {\n          return new InternalDirOfViewFs(dir, creationTime, ugi, myUri);\n        }\n\n        @Override\n        protected\n        FileSystem getTargetFileSystem(URI[] mergeFsURIList)\n            throws URISyntaxException, UnsupportedFileSystemException {\n          throw new UnsupportedFileSystemException(\"mergefs not implemented\");\n          // return MergeFs.createMergeFs(mergeFsURIList, config);\n        }\n      };\n    } catch (URISyntaxException e) {\n      throw new IOException(\"URISyntax exception: \" + theUri);\n    }\n\n  }",
      "path": "src/java/org/apache/hadoop/fs/viewfs/ViewFileSystem.java"
    }
  }
}