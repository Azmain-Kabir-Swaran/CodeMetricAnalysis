{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GF256.java",
  "functionName": "gfInvertMatrix",
  "functionId": "gfInvertMatrix___inMatrix-byte[]__outMatrix-byte[]__n-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GF256.java",
  "functionStartLine": 199,
  "functionEndLine": 258,
  "numCommitsSeen": 2,
  "timeTaken": 950,
  "changeHistory": [
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e"
  ],
  "changeHistoryShort": {
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9": "Ybodychange",
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7b988e88992528a0cac2ca8893652c5d4a90c6b9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13861. Spelling errors in logging and exceptions for code. Contributed by Grant Sohn.\n",
      "commitDate": "05/12/16 11:18 PM",
      "commitName": "7b988e88992528a0cac2ca8893652c5d4a90c6b9",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "03/02/16 3:05 PM",
      "commitNameOld": "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e",
      "commitAuthorOld": "zhezhang",
      "daysBetweenCommits": 306.34,
      "commitsBetweenForRepo": 2198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   public static void gfInvertMatrix(byte[] inMatrix, byte[] outMatrix, int n) {\n     byte temp;\n \n     // Set outMatrix[] to the identity matrix\n     for (int i \u003d 0; i \u003c n * n; i++) {\n       // memset(outMatrix, 0, n*n)\n       outMatrix[i] \u003d 0;\n     }\n \n     for (int i \u003d 0; i \u003c n; i++) {\n       outMatrix[i * n + i] \u003d 1;\n     }\n \n     // Inverse\n     for (int j, i \u003d 0; i \u003c n; i++) {\n       // Check for 0 in pivot element\n       if (inMatrix[i * n + i] \u003d\u003d 0) {\n         // Find a row with non-zero in current column and swap\n         for (j \u003d i + 1; j \u003c n; j++) {\n           if (inMatrix[j * n + i] !\u003d 0) {\n             break;\n           }\n         }\n         if (j \u003d\u003d n) {\n           // Couldn\u0027t find means it\u0027s singular\n-          throw new RuntimeException(\"Not invertble\");\n+          throw new RuntimeException(\"Not invertible\");\n         }\n \n         for (int k \u003d 0; k \u003c n; k++) {\n           // Swap rows i,j\n           temp \u003d inMatrix[i * n + k];\n           inMatrix[i * n + k] \u003d inMatrix[j * n + k];\n           inMatrix[j * n + k] \u003d temp;\n \n           temp \u003d outMatrix[i * n + k];\n           outMatrix[i * n + k] \u003d outMatrix[j * n + k];\n           outMatrix[j * n + k] \u003d temp;\n         }\n       }\n \n       temp \u003d gfInv(inMatrix[i * n + i]); // 1/pivot\n       for (j \u003d 0; j \u003c n; j++) {\n         // Scale row i by 1/pivot\n         inMatrix[i * n + j] \u003d gfMul(inMatrix[i * n + j], temp);\n         outMatrix[i * n + j] \u003d gfMul(outMatrix[i * n + j], temp);\n       }\n \n       for (j \u003d 0; j \u003c n; j++) {\n         if (j \u003d\u003d i) {\n           continue;\n         }\n \n         temp \u003d inMatrix[j * n + i];\n         for (int k \u003d 0; k \u003c n; k++) {\n           outMatrix[j * n + k] ^\u003d gfMul(temp, outMatrix[i * n + k]);\n           inMatrix[j * n + k] ^\u003d gfMul(temp, inMatrix[i * n + k]);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void gfInvertMatrix(byte[] inMatrix, byte[] outMatrix, int n) {\n    byte temp;\n\n    // Set outMatrix[] to the identity matrix\n    for (int i \u003d 0; i \u003c n * n; i++) {\n      // memset(outMatrix, 0, n*n)\n      outMatrix[i] \u003d 0;\n    }\n\n    for (int i \u003d 0; i \u003c n; i++) {\n      outMatrix[i * n + i] \u003d 1;\n    }\n\n    // Inverse\n    for (int j, i \u003d 0; i \u003c n; i++) {\n      // Check for 0 in pivot element\n      if (inMatrix[i * n + i] \u003d\u003d 0) {\n        // Find a row with non-zero in current column and swap\n        for (j \u003d i + 1; j \u003c n; j++) {\n          if (inMatrix[j * n + i] !\u003d 0) {\n            break;\n          }\n        }\n        if (j \u003d\u003d n) {\n          // Couldn\u0027t find means it\u0027s singular\n          throw new RuntimeException(\"Not invertible\");\n        }\n\n        for (int k \u003d 0; k \u003c n; k++) {\n          // Swap rows i,j\n          temp \u003d inMatrix[i * n + k];\n          inMatrix[i * n + k] \u003d inMatrix[j * n + k];\n          inMatrix[j * n + k] \u003d temp;\n\n          temp \u003d outMatrix[i * n + k];\n          outMatrix[i * n + k] \u003d outMatrix[j * n + k];\n          outMatrix[j * n + k] \u003d temp;\n        }\n      }\n\n      temp \u003d gfInv(inMatrix[i * n + i]); // 1/pivot\n      for (j \u003d 0; j \u003c n; j++) {\n        // Scale row i by 1/pivot\n        inMatrix[i * n + j] \u003d gfMul(inMatrix[i * n + j], temp);\n        outMatrix[i * n + j] \u003d gfMul(outMatrix[i * n + j], temp);\n      }\n\n      for (j \u003d 0; j \u003c n; j++) {\n        if (j \u003d\u003d i) {\n          continue;\n        }\n\n        temp \u003d inMatrix[j * n + i];\n        for (int k \u003d 0; k \u003c n; k++) {\n          outMatrix[j * n + k] ^\u003d gfMul(temp, outMatrix[i * n + k]);\n          inMatrix[j * n + k] ^\u003d gfMul(temp, inMatrix[i * n + k]);\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GF256.java",
      "extendedDetails": {}
    },
    "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12041. Implement another Reed-Solomon coder in pure Java. Contributed by Kai Zheng.\n\nChange-Id: I35ff2e498d4f988c9a064f74374f7c7258b7a6b7\n",
      "commitDate": "03/02/16 3:05 PM",
      "commitName": "c89a14a8a4fe58f01f0cba643f2bc203e1a8701e",
      "commitAuthor": "zhezhang",
      "diff": "@@ -0,0 +1,60 @@\n+  public static void gfInvertMatrix(byte[] inMatrix, byte[] outMatrix, int n) {\n+    byte temp;\n+\n+    // Set outMatrix[] to the identity matrix\n+    for (int i \u003d 0; i \u003c n * n; i++) {\n+      // memset(outMatrix, 0, n*n)\n+      outMatrix[i] \u003d 0;\n+    }\n+\n+    for (int i \u003d 0; i \u003c n; i++) {\n+      outMatrix[i * n + i] \u003d 1;\n+    }\n+\n+    // Inverse\n+    for (int j, i \u003d 0; i \u003c n; i++) {\n+      // Check for 0 in pivot element\n+      if (inMatrix[i * n + i] \u003d\u003d 0) {\n+        // Find a row with non-zero in current column and swap\n+        for (j \u003d i + 1; j \u003c n; j++) {\n+          if (inMatrix[j * n + i] !\u003d 0) {\n+            break;\n+          }\n+        }\n+        if (j \u003d\u003d n) {\n+          // Couldn\u0027t find means it\u0027s singular\n+          throw new RuntimeException(\"Not invertble\");\n+        }\n+\n+        for (int k \u003d 0; k \u003c n; k++) {\n+          // Swap rows i,j\n+          temp \u003d inMatrix[i * n + k];\n+          inMatrix[i * n + k] \u003d inMatrix[j * n + k];\n+          inMatrix[j * n + k] \u003d temp;\n+\n+          temp \u003d outMatrix[i * n + k];\n+          outMatrix[i * n + k] \u003d outMatrix[j * n + k];\n+          outMatrix[j * n + k] \u003d temp;\n+        }\n+      }\n+\n+      temp \u003d gfInv(inMatrix[i * n + i]); // 1/pivot\n+      for (j \u003d 0; j \u003c n; j++) {\n+        // Scale row i by 1/pivot\n+        inMatrix[i * n + j] \u003d gfMul(inMatrix[i * n + j], temp);\n+        outMatrix[i * n + j] \u003d gfMul(outMatrix[i * n + j], temp);\n+      }\n+\n+      for (j \u003d 0; j \u003c n; j++) {\n+        if (j \u003d\u003d i) {\n+          continue;\n+        }\n+\n+        temp \u003d inMatrix[j * n + i];\n+        for (int k \u003d 0; k \u003c n; k++) {\n+          outMatrix[j * n + k] ^\u003d gfMul(temp, outMatrix[i * n + k]);\n+          inMatrix[j * n + k] ^\u003d gfMul(temp, inMatrix[i * n + k]);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void gfInvertMatrix(byte[] inMatrix, byte[] outMatrix, int n) {\n    byte temp;\n\n    // Set outMatrix[] to the identity matrix\n    for (int i \u003d 0; i \u003c n * n; i++) {\n      // memset(outMatrix, 0, n*n)\n      outMatrix[i] \u003d 0;\n    }\n\n    for (int i \u003d 0; i \u003c n; i++) {\n      outMatrix[i * n + i] \u003d 1;\n    }\n\n    // Inverse\n    for (int j, i \u003d 0; i \u003c n; i++) {\n      // Check for 0 in pivot element\n      if (inMatrix[i * n + i] \u003d\u003d 0) {\n        // Find a row with non-zero in current column and swap\n        for (j \u003d i + 1; j \u003c n; j++) {\n          if (inMatrix[j * n + i] !\u003d 0) {\n            break;\n          }\n        }\n        if (j \u003d\u003d n) {\n          // Couldn\u0027t find means it\u0027s singular\n          throw new RuntimeException(\"Not invertble\");\n        }\n\n        for (int k \u003d 0; k \u003c n; k++) {\n          // Swap rows i,j\n          temp \u003d inMatrix[i * n + k];\n          inMatrix[i * n + k] \u003d inMatrix[j * n + k];\n          inMatrix[j * n + k] \u003d temp;\n\n          temp \u003d outMatrix[i * n + k];\n          outMatrix[i * n + k] \u003d outMatrix[j * n + k];\n          outMatrix[j * n + k] \u003d temp;\n        }\n      }\n\n      temp \u003d gfInv(inMatrix[i * n + i]); // 1/pivot\n      for (j \u003d 0; j \u003c n; j++) {\n        // Scale row i by 1/pivot\n        inMatrix[i * n + j] \u003d gfMul(inMatrix[i * n + j], temp);\n        outMatrix[i * n + j] \u003d gfMul(outMatrix[i * n + j], temp);\n      }\n\n      for (j \u003d 0; j \u003c n; j++) {\n        if (j \u003d\u003d i) {\n          continue;\n        }\n\n        temp \u003d inMatrix[j * n + i];\n        for (int k \u003d 0; k \u003c n; k++) {\n          outMatrix[j * n + k] ^\u003d gfMul(temp, outMatrix[i * n + k]);\n          inMatrix[j * n + k] ^\u003d gfMul(temp, inMatrix[i * n + k]);\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/util/GF256.java"
    }
  }
}