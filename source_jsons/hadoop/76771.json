{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecodingState.java",
  "functionName": "checkParameters",
  "functionId": "checkParameters___inputs-T[]__erasedIndexes-int[]__outputs-T[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/DecodingState.java",
  "functionStartLine": 38,
  "functionEndLine": 54,
  "numCommitsSeen": 16,
  "timeTaken": 3158,
  "changeHistory": [
    "77202fa1035a54496d11d07472fbc399148ff630",
    "29495cb8f6b940caa9964c39a290ef233ce1ec7c",
    "4ad484883f773c702a1874fc12816ef1a4a54136",
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
    "09c3a375bafa481e88d1317388a73c46950164c9"
  ],
  "changeHistoryShort": {
    "77202fa1035a54496d11d07472fbc399148ff630": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "29495cb8f6b940caa9964c39a290ef233ce1ec7c": "Ymultichange(Yparameterchange,Ybodychange)",
    "4ad484883f773c702a1874fc12816ef1a4a54136": "Ybodychange",
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": "Ybodychange",
    "09c3a375bafa481e88d1317388a73c46950164c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "77202fa1035a54496d11d07472fbc399148ff630": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
      "commitDate": "26/05/16 10:23 PM",
      "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
      "commitAuthor": "Kai Zheng",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,17 @@\n-  protected \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n-                                 T[] outputs) {\n-    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n+  \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n+                           T[] outputs) {\n+    if (inputs.length !\u003d decoder.getNumParityUnits() +\n+        decoder.getNumDataUnits()) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (erasedIndexes.length !\u003d outputs.length) {\n       throw new HadoopIllegalArgumentException(\n           \"erasedIndexes and outputs mismatch in length\");\n     }\n \n-    if (erasedIndexes.length \u003e getNumParityUnits()) {\n+    if (erasedIndexes.length \u003e decoder.getNumParityUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"Too many erased, not recoverable\");\n     }\n-\n-    int validInputs \u003d 0;\n-    for (T input : inputs) {\n-      if (input !\u003d null) {\n-        validInputs +\u003d 1;\n-      }\n-    }\n-\n-    if (validInputs \u003c getNumDataUnits()) {\n-      throw new HadoopIllegalArgumentException(\n-          \"No enough valid inputs are provided, not recoverable\");\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n                           T[] outputs) {\n    if (inputs.length !\u003d decoder.getNumParityUnits() +\n        decoder.getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new HadoopIllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e decoder.getNumParityUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/DecodingState.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/DecodingState.java",
            "oldMethodName": "checkParameters",
            "newMethodName": "checkParameters"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,17 @@\n-  protected \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n-                                 T[] outputs) {\n-    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n+  \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n+                           T[] outputs) {\n+    if (inputs.length !\u003d decoder.getNumParityUnits() +\n+        decoder.getNumDataUnits()) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (erasedIndexes.length !\u003d outputs.length) {\n       throw new HadoopIllegalArgumentException(\n           \"erasedIndexes and outputs mismatch in length\");\n     }\n \n-    if (erasedIndexes.length \u003e getNumParityUnits()) {\n+    if (erasedIndexes.length \u003e decoder.getNumParityUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"Too many erased, not recoverable\");\n     }\n-\n-    int validInputs \u003d 0;\n-    for (T input : inputs) {\n-      if (input !\u003d null) {\n-        validInputs +\u003d 1;\n-      }\n-    }\n-\n-    if (validInputs \u003c getNumDataUnits()) {\n-      throw new HadoopIllegalArgumentException(\n-          \"No enough valid inputs are provided, not recoverable\");\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n                           T[] outputs) {\n    if (inputs.length !\u003d decoder.getNumParityUnits() +\n        decoder.getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new HadoopIllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e decoder.getNumParityUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/DecodingState.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13010. Refactor raw erasure coders. Contributed by Kai Zheng\n",
          "commitDate": "26/05/16 10:23 PM",
          "commitName": "77202fa1035a54496d11d07472fbc399148ff630",
          "commitAuthor": "Kai Zheng",
          "commitDateOld": "25/05/16 10:13 PM",
          "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
          "commitAuthorOld": "Karthik Kambatla",
          "daysBetweenCommits": 1.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,17 @@\n-  protected \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n-                                 T[] outputs) {\n-    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n+  \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n+                           T[] outputs) {\n+    if (inputs.length !\u003d decoder.getNumParityUnits() +\n+        decoder.getNumDataUnits()) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (erasedIndexes.length !\u003d outputs.length) {\n       throw new HadoopIllegalArgumentException(\n           \"erasedIndexes and outputs mismatch in length\");\n     }\n \n-    if (erasedIndexes.length \u003e getNumParityUnits()) {\n+    if (erasedIndexes.length \u003e decoder.getNumParityUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"Too many erased, not recoverable\");\n     }\n-\n-    int validInputs \u003d 0;\n-    for (T input : inputs) {\n-      if (input !\u003d null) {\n-        validInputs +\u003d 1;\n-      }\n-    }\n-\n-    if (validInputs \u003c getNumDataUnits()) {\n-      throw new HadoopIllegalArgumentException(\n-          \"No enough valid inputs are provided, not recoverable\");\n-    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n                           T[] outputs) {\n    if (inputs.length !\u003d decoder.getNumParityUnits() +\n        decoder.getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new HadoopIllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e decoder.getNumParityUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/DecodingState.java",
          "extendedDetails": {}
        }
      ]
    },
    "29495cb8f6b940caa9964c39a290ef233ce1ec7c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12060. Fix ByteBuffer usage for raw erasure coders. Contributed by Kai Zheng.\n",
      "commitDate": "20/07/15 10:15 AM",
      "commitName": "29495cb8f6b940caa9964c39a290ef233ce1ec7c",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12060. Fix ByteBuffer usage for raw erasure coders. Contributed by Kai Zheng.\n",
          "commitDate": "20/07/15 10:15 AM",
          "commitName": "29495cb8f6b940caa9964c39a290ef233ce1ec7c",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 12:07 PM",
          "commitNameOld": "4ad484883f773c702a1874fc12816ef1a4a54136",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 54.92,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n-                                 Object[] outputs) {\n+  protected \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n+                                 T[] outputs) {\n     if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (erasedIndexes.length !\u003d outputs.length) {\n       throw new HadoopIllegalArgumentException(\n           \"erasedIndexes and outputs mismatch in length\");\n     }\n \n     if (erasedIndexes.length \u003e getNumParityUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"Too many erased, not recoverable\");\n     }\n \n     int validInputs \u003d 0;\n-    for (int i \u003d 0; i \u003c inputs.length; ++i) {\n-      if (inputs[i] !\u003d null) {\n+    for (T input : inputs) {\n+      if (input !\u003d null) {\n         validInputs +\u003d 1;\n       }\n     }\n \n     if (validInputs \u003c getNumDataUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"No enough valid inputs are provided, not recoverable\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n                                 T[] outputs) {\n    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new HadoopIllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e getNumParityUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n\n    int validInputs \u003d 0;\n    for (T input : inputs) {\n      if (input !\u003d null) {\n        validInputs +\u003d 1;\n      }\n    }\n\n    if (validInputs \u003c getNumDataUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"No enough valid inputs are provided, not recoverable\");\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
          "extendedDetails": {
            "oldValue": "[inputs-Object[], erasedIndexes-int[], outputs-Object[]]",
            "newValue": "[inputs-T[], erasedIndexes-int[], outputs-T[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12060. Fix ByteBuffer usage for raw erasure coders. Contributed by Kai Zheng.\n",
          "commitDate": "20/07/15 10:15 AM",
          "commitName": "29495cb8f6b940caa9964c39a290ef233ce1ec7c",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "26/05/15 12:07 PM",
          "commitNameOld": "4ad484883f773c702a1874fc12816ef1a4a54136",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 54.92,
          "commitsBetweenForRepo": 43,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,28 @@\n-  protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n-                                 Object[] outputs) {\n+  protected \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n+                                 T[] outputs) {\n     if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (erasedIndexes.length !\u003d outputs.length) {\n       throw new HadoopIllegalArgumentException(\n           \"erasedIndexes and outputs mismatch in length\");\n     }\n \n     if (erasedIndexes.length \u003e getNumParityUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"Too many erased, not recoverable\");\n     }\n \n     int validInputs \u003d 0;\n-    for (int i \u003d 0; i \u003c inputs.length; ++i) {\n-      if (inputs[i] !\u003d null) {\n+    for (T input : inputs) {\n+      if (input !\u003d null) {\n         validInputs +\u003d 1;\n       }\n     }\n \n     if (validInputs \u003c getNumDataUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"No enough valid inputs are provided, not recoverable\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected \u003cT\u003e void checkParameters(T[] inputs, int[] erasedIndexes,\n                                 T[] outputs) {\n    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new HadoopIllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e getNumParityUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n\n    int validInputs \u003d 0;\n    for (T input : inputs) {\n      if (input !\u003d null) {\n        validInputs +\u003d 1;\n      }\n    }\n\n    if (validInputs \u003c getNumDataUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"No enough valid inputs are provided, not recoverable\");\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
          "extendedDetails": {}
        }
      ]
    },
    "4ad484883f773c702a1874fc12816ef1a4a54136": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11847 Enhance raw coder allowing to read least required inputs in decoding. Contributed by Kai Zheng\n",
      "commitDate": "26/05/15 12:07 PM",
      "commitName": "4ad484883f773c702a1874fc12816ef1a4a54136",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "26/05/15 12:07 PM",
      "commitNameOld": "b30e96bfb4b8ce5537671c97f0c9c56cd195bfdc",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,28 @@\n   protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n                                  Object[] outputs) {\n     if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (erasedIndexes.length !\u003d outputs.length) {\n       throw new HadoopIllegalArgumentException(\n           \"erasedIndexes and outputs mismatch in length\");\n     }\n \n     if (erasedIndexes.length \u003e getNumParityUnits()) {\n       throw new HadoopIllegalArgumentException(\n           \"Too many erased, not recoverable\");\n     }\n+\n+    int validInputs \u003d 0;\n+    for (int i \u003d 0; i \u003c inputs.length; ++i) {\n+      if (inputs[i] !\u003d null) {\n+        validInputs +\u003d 1;\n+      }\n+    }\n+\n+    if (validInputs \u003c getNumDataUnits()) {\n+      throw new HadoopIllegalArgumentException(\n+          \"No enough valid inputs are provided, not recoverable\");\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n                                 Object[] outputs) {\n    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new HadoopIllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e getNumParityUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n\n    int validInputs \u003d 0;\n    for (int i \u003d 0; i \u003c inputs.length; ++i) {\n      if (inputs[i] !\u003d null) {\n        validInputs +\u003d 1;\n      }\n    }\n\n    if (validInputs \u003c getNumDataUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"No enough valid inputs are provided, not recoverable\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
      "extendedDetails": {}
    },
    "343c0e76fcd95ac739ca7cd6742c9d617e19fc37": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11938. Enhance ByteBuffer version encode/decode API of raw erasure coder. Contributed by Kai Zheng.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "343c0e76fcd95ac739ca7cd6742c9d617e19fc37",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "26/05/15 12:02 PM",
      "commitNameOld": "09c3a375bafa481e88d1317388a73c46950164c9",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n                                  Object[] outputs) {\n     if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n       throw new IllegalArgumentException(\"Invalid inputs length\");\n     }\n \n     if (erasedIndexes.length !\u003d outputs.length) {\n-      throw new IllegalArgumentException(\n+      throw new HadoopIllegalArgumentException(\n           \"erasedIndexes and outputs mismatch in length\");\n     }\n \n     if (erasedIndexes.length \u003e getNumParityUnits()) {\n-      throw new IllegalArgumentException(\n+      throw new HadoopIllegalArgumentException(\n           \"Too many erased, not recoverable\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n                                 Object[] outputs) {\n    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new HadoopIllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e getNumParityUnits()) {\n      throw new HadoopIllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java",
      "extendedDetails": {}
    },
    "09c3a375bafa481e88d1317388a73c46950164c9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11920. Refactor some codes for erasure coders. Contributed by Kai Zheng.\n",
      "commitDate": "26/05/15 12:02 PM",
      "commitName": "09c3a375bafa481e88d1317388a73c46950164c9",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,16 @@\n+  protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n+                                 Object[] outputs) {\n+    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n+      throw new IllegalArgumentException(\"Invalid inputs length\");\n+    }\n+\n+    if (erasedIndexes.length !\u003d outputs.length) {\n+      throw new IllegalArgumentException(\n+          \"erasedIndexes and outputs mismatch in length\");\n+    }\n+\n+    if (erasedIndexes.length \u003e getNumParityUnits()) {\n+      throw new IllegalArgumentException(\n+          \"Too many erased, not recoverable\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void checkParameters(Object[] inputs, int[] erasedIndexes,\n                                 Object[] outputs) {\n    if (inputs.length !\u003d getNumParityUnits() + getNumDataUnits()) {\n      throw new IllegalArgumentException(\"Invalid inputs length\");\n    }\n\n    if (erasedIndexes.length !\u003d outputs.length) {\n      throw new IllegalArgumentException(\n          \"erasedIndexes and outputs mismatch in length\");\n    }\n\n    if (erasedIndexes.length \u003e getNumParityUnits()) {\n      throw new IllegalArgumentException(\n          \"Too many erased, not recoverable\");\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/erasurecode/rawcoder/AbstractRawErasureDecoder.java"
    }
  }
}