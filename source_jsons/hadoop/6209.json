{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImagePreTransactionalStorageInspector.java",
  "functionName": "inspectDirectory",
  "functionId": "inspectDirectory___sd-StorageDirectory",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
  "functionStartLine": 77,
  "functionEndLine": 120,
  "numCommitsSeen": 15,
  "timeTaken": 2238,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void inspectDirectory(StorageDirectory sd) throws IOException {\n    // Was the file just formatted?\n    if (!sd.getVersionFile().exists()) {\n      hasOutOfDateStorageDirs \u003d true;\n      return;\n    }\n    \n    boolean imageExists \u003d false;\n    boolean editsExists \u003d false;\n    \n    // Determine if sd is image, edits or both\n    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE)) {\n      imageExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.IMAGE).exists();        \n      imageDirs.add(sd.getRoot().getCanonicalPath());\n    }\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS)) {\n      editsExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.EDITS).exists();\n      editsDirs.add(sd.getRoot().getCanonicalPath());\n    }\n    \n    long checkpointTime \u003d readCheckpointTime(sd);\n\n    checkpointTimes.add(checkpointTime);\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE) \u0026\u0026 \n       (latestNameCheckpointTime \u003c checkpointTime) \u0026\u0026 imageExists) {\n      latestNameCheckpointTime \u003d checkpointTime;\n      latestNameSD \u003d sd;\n    }\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS) \u0026\u0026 \n         (latestEditsCheckpointTime \u003c checkpointTime) \u0026\u0026 editsExists) {\n      latestEditsCheckpointTime \u003d checkpointTime;\n      latestEditsSD \u003d sd;\n    }\n    \n    // check that we have a valid, non-default checkpointTime\n    if (checkpointTime \u003c\u003d 0L)\n      hasOutOfDateStorageDirs \u003d true;\n    \n    // set finalized flag\n    isUpgradeFinalized \u003d isUpgradeFinalized \u0026\u0026 !sd.getPreviousDir().exists();    \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  void inspectDirectory(StorageDirectory sd) throws IOException {\n    // Was the file just formatted?\n    if (!sd.getVersionFile().exists()) {\n      hasOutOfDateStorageDirs \u003d true;\n      return;\n    }\n    \n    boolean imageExists \u003d false;\n    boolean editsExists \u003d false;\n    \n    // Determine if sd is image, edits or both\n    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE)) {\n      imageExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.IMAGE).exists();        \n      imageDirs.add(sd.getRoot().getCanonicalPath());\n    }\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS)) {\n      editsExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.EDITS).exists();\n      editsDirs.add(sd.getRoot().getCanonicalPath());\n    }\n    \n    long checkpointTime \u003d readCheckpointTime(sd);\n\n    checkpointTimes.add(checkpointTime);\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE) \u0026\u0026 \n       (latestNameCheckpointTime \u003c checkpointTime) \u0026\u0026 imageExists) {\n      latestNameCheckpointTime \u003d checkpointTime;\n      latestNameSD \u003d sd;\n    }\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS) \u0026\u0026 \n         (latestEditsCheckpointTime \u003c checkpointTime) \u0026\u0026 editsExists) {\n      latestEditsCheckpointTime \u003d checkpointTime;\n      latestEditsSD \u003d sd;\n    }\n    \n    // check that we have a valid, non-default checkpointTime\n    if (checkpointTime \u003c\u003d 0L)\n      hasOutOfDateStorageDirs \u003d true;\n    \n    // set finalized flag\n    isUpgradeFinalized \u003d isUpgradeFinalized \u0026\u0026 !sd.getPreviousDir().exists();    \n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,44 @@\n+  void inspectDirectory(StorageDirectory sd) throws IOException {\n+    // Was the file just formatted?\n+    if (!sd.getVersionFile().exists()) {\n+      hasOutOfDateStorageDirs \u003d true;\n+      return;\n+    }\n+    \n+    boolean imageExists \u003d false;\n+    boolean editsExists \u003d false;\n+    \n+    // Determine if sd is image, edits or both\n+    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE)) {\n+      imageExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.IMAGE).exists();        \n+      imageDirs.add(sd.getRoot().getCanonicalPath());\n+    }\n+    \n+    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS)) {\n+      editsExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.EDITS).exists();\n+      editsDirs.add(sd.getRoot().getCanonicalPath());\n+    }\n+    \n+    long checkpointTime \u003d readCheckpointTime(sd);\n+\n+    checkpointTimes.add(checkpointTime);\n+    \n+    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE) \u0026\u0026 \n+       (latestNameCheckpointTime \u003c checkpointTime) \u0026\u0026 imageExists) {\n+      latestNameCheckpointTime \u003d checkpointTime;\n+      latestNameSD \u003d sd;\n+    }\n+    \n+    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS) \u0026\u0026 \n+         (latestEditsCheckpointTime \u003c checkpointTime) \u0026\u0026 editsExists) {\n+      latestEditsCheckpointTime \u003d checkpointTime;\n+      latestEditsSD \u003d sd;\n+    }\n+    \n+    // check that we have a valid, non-default checkpointTime\n+    if (checkpointTime \u003c\u003d 0L)\n+      hasOutOfDateStorageDirs \u003d true;\n+    \n+    // set finalized flag\n+    isUpgradeFinalized \u003d isUpgradeFinalized \u0026\u0026 !sd.getPreviousDir().exists();    \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void inspectDirectory(StorageDirectory sd) throws IOException {\n    // Was the file just formatted?\n    if (!sd.getVersionFile().exists()) {\n      hasOutOfDateStorageDirs \u003d true;\n      return;\n    }\n    \n    boolean imageExists \u003d false;\n    boolean editsExists \u003d false;\n    \n    // Determine if sd is image, edits or both\n    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE)) {\n      imageExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.IMAGE).exists();        \n      imageDirs.add(sd.getRoot().getCanonicalPath());\n    }\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS)) {\n      editsExists \u003d NNStorage.getStorageFile(sd, NameNodeFile.EDITS).exists();\n      editsDirs.add(sd.getRoot().getCanonicalPath());\n    }\n    \n    long checkpointTime \u003d readCheckpointTime(sd);\n\n    checkpointTimes.add(checkpointTime);\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.IMAGE) \u0026\u0026 \n       (latestNameCheckpointTime \u003c checkpointTime) \u0026\u0026 imageExists) {\n      latestNameCheckpointTime \u003d checkpointTime;\n      latestNameSD \u003d sd;\n    }\n    \n    if (sd.getStorageDirType().isOfType(NameNodeDirType.EDITS) \u0026\u0026 \n         (latestEditsCheckpointTime \u003c checkpointTime) \u0026\u0026 editsExists) {\n      latestEditsCheckpointTime \u003d checkpointTime;\n      latestEditsSD \u003d sd;\n    }\n    \n    // check that we have a valid, non-default checkpointTime\n    if (checkpointTime \u003c\u003d 0L)\n      hasOutOfDateStorageDirs \u003d true;\n    \n    // set finalized flag\n    isUpgradeFinalized \u003d isUpgradeFinalized \u0026\u0026 !sd.getPreviousDir().exists();    \n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSImagePreTransactionalStorageInspector.java"
    }
  }
}