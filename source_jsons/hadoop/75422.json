{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ActiveStandbyElector.java",
  "functionName": "processResult",
  "functionId": "processResult___rc-int__path-String__ctx-Object__name-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
  "functionStartLine": 464,
  "functionEndLine": 518,
  "numCommitsSeen": 38,
  "timeTaken": 1504,
  "changeHistory": [
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f",
    "b74d7427855eb7e20be70155c11acac0e333bd6a",
    "66931670287bc859300014ad50531f5d9a648067",
    "31c2e3f29cbdc33a7333022d61130a25cee03684",
    "805c1280ce2773bc61ea718723b42b09d795688f",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec"
  ],
  "changeHistoryShort": {
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": "Ybodychange",
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": "Ybodychange",
    "b74d7427855eb7e20be70155c11acac0e333bd6a": "Ybodychange",
    "66931670287bc859300014ad50531f5d9a648067": "Ybodychange",
    "31c2e3f29cbdc33a7333022d61130a25cee03684": "Ybodychange",
    "805c1280ce2773bc61ea718723b42b09d795688f": "Ybodychange",
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5582b0f1d469e7c98811a341c4b4c78eaa64ede5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11741. Add LOG.isDebugEnabled() guard for some LOG.debug(). Contributed by Walter Su.\n",
      "commitDate": "25/03/15 12:36 AM",
      "commitName": "5582b0f1d469e7c98811a341c4b4c78eaa64ede5",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "05/01/15 7:45 PM",
      "commitNameOld": "9803ae374f69942aec82ec6eeeb9722523a1ade0",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 78.16,
      "commitsBetweenForRepo": 694,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,55 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       String name) {\n     if (isStaleClient(ctx)) return;\n-    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n-        + \" connectionState: \" + zkConnectionState +\n-        \"  for \" + this);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n+          + \" connectionState: \" + zkConnectionState +\n+          \"  for \" + this);\n+    }\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // we successfully created the znode. we are the leader. start monitoring\n       if (becomeActive()) {\n         monitorActiveStatus();\n       } else {\n         reJoinElectionAfterFailureToBecomeActive();\n       }\n       return;\n     }\n \n     if (isNodeExists(code)) {\n       if (createRetryCount \u003d\u003d 0) {\n         // znode exists and we did not retry the operation. so a different\n         // instance has created it. become standby and monitor lock.\n         becomeStandby();\n       }\n       // if we had retried then the znode could have been created by our first\n       // attempt to the server (that we lost) and this node exists response is\n       // for the second attempt. verify this case via ephemeral node owner. this\n       // will happen on the callback for monitoring the lock.\n       monitorActiveStatus();\n       return;\n     }\n \n     String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n         + code.toString() + \" for path \" + path;\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (createRetryCount \u003c maxRetryNum) {\n         LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n         ++createRetryCount;\n         createLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode create connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock acquisition failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      String name) {\n    if (isStaleClient(ctx)) return;\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n          + \" connectionState: \" + zkConnectionState +\n          \"  for \" + this);\n    }\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // we successfully created the znode. we are the leader. start monitoring\n      if (becomeActive()) {\n        monitorActiveStatus();\n      } else {\n        reJoinElectionAfterFailureToBecomeActive();\n      }\n      return;\n    }\n\n    if (isNodeExists(code)) {\n      if (createRetryCount \u003d\u003d 0) {\n        // znode exists and we did not retry the operation. so a different\n        // instance has created it. become standby and monitor lock.\n        becomeStandby();\n      }\n      // if we had retried then the znode could have been created by our first\n      // attempt to the server (that we lost) and this node exists response is\n      // for the second attempt. verify this case via ephemeral node owner. this\n      // will happen on the callback for monitoring the lock.\n      monitorActiveStatus();\n      return;\n    }\n\n    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n        + code.toString() + \" for path \" + path;\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (createRetryCount \u003c maxRetryNum) {\n        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n        ++createRetryCount;\n        createLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode create connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock acquisition failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "6d4c7df43401b87781e81c57405434ba9b9efd6f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10535. Make the retry numbers in ActiveStandbyElector configurable. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1589905 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/04/14 4:03 PM",
      "commitName": "6d4c7df43401b87781e81c57405434ba9b9efd6f",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "25/03/14 11:07 AM",
      "commitNameOld": "274d9b2ac48547b8d466e5006c233576c1aa7591",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 30.21,
      "commitsBetweenForRepo": 198,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       String name) {\n     if (isStaleClient(ctx)) return;\n     LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState +\n         \"  for \" + this);\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // we successfully created the znode. we are the leader. start monitoring\n       if (becomeActive()) {\n         monitorActiveStatus();\n       } else {\n         reJoinElectionAfterFailureToBecomeActive();\n       }\n       return;\n     }\n \n     if (isNodeExists(code)) {\n       if (createRetryCount \u003d\u003d 0) {\n         // znode exists and we did not retry the operation. so a different\n         // instance has created it. become standby and monitor lock.\n         becomeStandby();\n       }\n       // if we had retried then the znode could have been created by our first\n       // attempt to the server (that we lost) and this node exists response is\n       // for the second attempt. verify this case via ephemeral node owner. this\n       // will happen on the callback for monitoring the lock.\n       monitorActiveStatus();\n       return;\n     }\n \n     String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n         + code.toString() + \" for path \" + path;\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n-      if (createRetryCount \u003c NUM_RETRIES) {\n+      if (createRetryCount \u003c maxRetryNum) {\n         LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n         ++createRetryCount;\n         createLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode create connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock acquisition failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      String name) {\n    if (isStaleClient(ctx)) return;\n    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState +\n        \"  for \" + this);\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // we successfully created the znode. we are the leader. start monitoring\n      if (becomeActive()) {\n        monitorActiveStatus();\n      } else {\n        reJoinElectionAfterFailureToBecomeActive();\n      }\n      return;\n    }\n\n    if (isNodeExists(code)) {\n      if (createRetryCount \u003d\u003d 0) {\n        // znode exists and we did not retry the operation. so a different\n        // instance has created it. become standby and monitor lock.\n        becomeStandby();\n      }\n      // if we had retried then the znode could have been created by our first\n      // attempt to the server (that we lost) and this node exists response is\n      // for the second attempt. verify this case via ephemeral node owner. this\n      // will happen on the callback for monitoring the lock.\n      monitorActiveStatus();\n      return;\n    }\n\n    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n        + code.toString() + \" for path \" + path;\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (createRetryCount \u003c maxRetryNum) {\n        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n        ++createRetryCount;\n        createLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode create connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock acquisition failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "b74d7427855eb7e20be70155c11acac0e333bd6a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8245. Fix flakiness in TestZKFailoverController. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1309554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/04/12 12:21 PM",
      "commitName": "b74d7427855eb7e20be70155c11acac0e333bd6a",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "03/04/12 4:37 PM",
      "commitNameOld": "30e1b3bba856b2379a0dc1e7450512427d39c5d7",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       String name) {\n     if (isStaleClient(ctx)) return;\n     LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n-        + \" connectionState: \" + zkConnectionState);\n+        + \" connectionState: \" + zkConnectionState +\n+        \"  for \" + this);\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // we successfully created the znode. we are the leader. start monitoring\n       if (becomeActive()) {\n         monitorActiveStatus();\n       } else {\n         reJoinElectionAfterFailureToBecomeActive();\n       }\n       return;\n     }\n \n     if (isNodeExists(code)) {\n       if (createRetryCount \u003d\u003d 0) {\n         // znode exists and we did not retry the operation. so a different\n         // instance has created it. become standby and monitor lock.\n         becomeStandby();\n       }\n       // if we had retried then the znode could have been created by our first\n       // attempt to the server (that we lost) and this node exists response is\n       // for the second attempt. verify this case via ephemeral node owner. this\n       // will happen on the callback for monitoring the lock.\n       monitorActiveStatus();\n       return;\n     }\n \n     String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n         + code.toString() + \" for path \" + path;\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (createRetryCount \u003c NUM_RETRIES) {\n         LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n         ++createRetryCount;\n         createLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode create connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock acquisition failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      String name) {\n    if (isStaleClient(ctx)) return;\n    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState +\n        \"  for \" + this);\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // we successfully created the znode. we are the leader. start monitoring\n      if (becomeActive()) {\n        monitorActiveStatus();\n      } else {\n        reJoinElectionAfterFailureToBecomeActive();\n      }\n      return;\n    }\n\n    if (isNodeExists(code)) {\n      if (createRetryCount \u003d\u003d 0) {\n        // znode exists and we did not retry the operation. so a different\n        // instance has created it. become standby and monitor lock.\n        becomeStandby();\n      }\n      // if we had retried then the znode could have been created by our first\n      // attempt to the server (that we lost) and this node exists response is\n      // for the second attempt. verify this case via ephemeral node owner. this\n      // will happen on the callback for monitoring the lock.\n      monitorActiveStatus();\n      return;\n    }\n\n    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n        + code.toString() + \" for path \" + path;\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (createRetryCount \u003c NUM_RETRIES) {\n        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n        ++createRetryCount;\n        createLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode create connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock acquisition failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "66931670287bc859300014ad50531f5d9a648067": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8220. ZKFailoverController doesn\u0027t handle failure to become active correctly. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3042@1307596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/03/12 1:23 PM",
      "commitName": "66931670287bc859300014ad50531f5d9a648067",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "29/03/12 2:49 PM",
      "commitNameOld": "04416861eb068f5d0a4ba1361924714d89f2d73c",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,52 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       String name) {\n     if (isStaleClient(ctx)) return;\n     LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState);\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // we successfully created the znode. we are the leader. start monitoring\n-      becomeActive();\n-      monitorActiveStatus();\n+      if (becomeActive()) {\n+        monitorActiveStatus();\n+      } else {\n+        reJoinElectionAfterFailureToBecomeActive();\n+      }\n       return;\n     }\n \n     if (isNodeExists(code)) {\n       if (createRetryCount \u003d\u003d 0) {\n         // znode exists and we did not retry the operation. so a different\n         // instance has created it. become standby and monitor lock.\n         becomeStandby();\n       }\n       // if we had retried then the znode could have been created by our first\n       // attempt to the server (that we lost) and this node exists response is\n       // for the second attempt. verify this case via ephemeral node owner. this\n       // will happen on the callback for monitoring the lock.\n       monitorActiveStatus();\n       return;\n     }\n \n     String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n         + code.toString() + \" for path \" + path;\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (createRetryCount \u003c NUM_RETRIES) {\n         LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n         ++createRetryCount;\n         createLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode create connection errors.\";\n     } else if (isSessionExpired(code)) {\n       // This isn\u0027t fatal - the client Watcher will re-join the election\n       LOG.warn(\"Lock acquisition failed because session was lost\");\n       return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      String name) {\n    if (isStaleClient(ctx)) return;\n    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // we successfully created the znode. we are the leader. start monitoring\n      if (becomeActive()) {\n        monitorActiveStatus();\n      } else {\n        reJoinElectionAfterFailureToBecomeActive();\n      }\n      return;\n    }\n\n    if (isNodeExists(code)) {\n      if (createRetryCount \u003d\u003d 0) {\n        // znode exists and we did not retry the operation. so a different\n        // instance has created it. become standby and monitor lock.\n        becomeStandby();\n      }\n      // if we had retried then the znode could have been created by our first\n      // attempt to the server (that we lost) and this node exists response is\n      // for the second attempt. verify this case via ephemeral node owner. this\n      // will happen on the callback for monitoring the lock.\n      monitorActiveStatus();\n      return;\n    }\n\n    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n        + code.toString() + \" for path \" + path;\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (createRetryCount \u003c NUM_RETRIES) {\n        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n        ++createRetryCount;\n        createLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode create connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock acquisition failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "31c2e3f29cbdc33a7333022d61130a25cee03684": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8212. Improve ActiveStandbyElector\u0027s behavior when session expires. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305510 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/03/12 12:31 PM",
      "commitName": "31c2e3f29cbdc33a7333022d61130a25cee03684",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "23/03/12 5:05 PM",
      "commitNameOld": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       String name) {\n+    if (isStaleClient(ctx)) return;\n     LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState);\n-    if (zkClient \u003d\u003d null) {\n-      // zkClient is nulled before closing the connection\n-      // this is the callback with session expired after we closed the session\n-      return;\n-    }\n \n     Code code \u003d Code.get(rc);\n     if (isSuccess(code)) {\n       // we successfully created the znode. we are the leader. start monitoring\n       becomeActive();\n       monitorActiveStatus();\n       return;\n     }\n \n     if (isNodeExists(code)) {\n       if (createRetryCount \u003d\u003d 0) {\n         // znode exists and we did not retry the operation. so a different\n         // instance has created it. become standby and monitor lock.\n         becomeStandby();\n       }\n       // if we had retried then the znode could have been created by our first\n       // attempt to the server (that we lost) and this node exists response is\n       // for the second attempt. verify this case via ephemeral node owner. this\n       // will happen on the callback for monitoring the lock.\n       monitorActiveStatus();\n       return;\n     }\n \n     String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n         + code.toString() + \" for path \" + path;\n     LOG.debug(errorMessage);\n \n     if (shouldRetry(code)) {\n       if (createRetryCount \u003c NUM_RETRIES) {\n         LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n         ++createRetryCount;\n         createLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode create connection errors.\";\n+    } else if (isSessionExpired(code)) {\n+      // This isn\u0027t fatal - the client Watcher will re-join the election\n+      LOG.warn(\"Lock acquisition failed because session was lost\");\n+      return;\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      String name) {\n    if (isStaleClient(ctx)) return;\n    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // we successfully created the znode. we are the leader. start monitoring\n      becomeActive();\n      monitorActiveStatus();\n      return;\n    }\n\n    if (isNodeExists(code)) {\n      if (createRetryCount \u003d\u003d 0) {\n        // znode exists and we did not retry the operation. so a different\n        // instance has created it. become standby and monitor lock.\n        becomeStandby();\n      }\n      // if we had retried then the znode could have been created by our first\n      // attempt to the server (that we lost) and this node exists response is\n      // for the second attempt. verify this case via ephemeral node owner. this\n      // will happen on the callback for monitoring the lock.\n      monitorActiveStatus();\n      return;\n    }\n\n    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n        + code.toString() + \" for path \" + path;\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (createRetryCount \u003c NUM_RETRIES) {\n        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n        ++createRetryCount;\n        createLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode create connection errors.\";\n    } else if (isSessionExpired(code)) {\n      // This isn\u0027t fatal - the client Watcher will re-join the election\n      LOG.warn(\"Lock acquisition failed because session was lost\");\n      return;\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "805c1280ce2773bc61ea718723b42b09d795688f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8163. Improve ActiveStandbyElector to provide hooks for fencing old active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1304675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/03/12 5:05 PM",
      "commitName": "805c1280ce2773bc61ea718723b42b09d795688f",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "01/03/12 5:32 PM",
      "commitNameOld": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 21.94,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public synchronized void processResult(int rc, String path, Object ctx,\n       String name) {\n     LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n         + \" connectionState: \" + zkConnectionState);\n     if (zkClient \u003d\u003d null) {\n       // zkClient is nulled before closing the connection\n       // this is the callback with session expired after we closed the session\n       return;\n     }\n \n     Code code \u003d Code.get(rc);\n-    if (operationSuccess(code)) {\n+    if (isSuccess(code)) {\n       // we successfully created the znode. we are the leader. start monitoring\n       becomeActive();\n       monitorActiveStatus();\n       return;\n     }\n \n-    if (operationNodeExists(code)) {\n+    if (isNodeExists(code)) {\n       if (createRetryCount \u003d\u003d 0) {\n         // znode exists and we did not retry the operation. so a different\n         // instance has created it. become standby and monitor lock.\n         becomeStandby();\n       }\n       // if we had retried then the znode could have been created by our first\n       // attempt to the server (that we lost) and this node exists response is\n       // for the second attempt. verify this case via ephemeral node owner. this\n       // will happen on the callback for monitoring the lock.\n       monitorActiveStatus();\n       return;\n     }\n \n     String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n-        + code.toString();\n+        + code.toString() + \" for path \" + path;\n     LOG.debug(errorMessage);\n \n-    if (operationRetry(code)) {\n+    if (shouldRetry(code)) {\n       if (createRetryCount \u003c NUM_RETRIES) {\n         LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n         ++createRetryCount;\n-        createNode();\n+        createLockNodeAsync();\n         return;\n       }\n       errorMessage \u003d errorMessage\n           + \". Not retrying further znode create connection errors.\";\n     }\n \n     fatalError(errorMessage);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      String name) {\n    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n    if (zkClient \u003d\u003d null) {\n      // zkClient is nulled before closing the connection\n      // this is the callback with session expired after we closed the session\n      return;\n    }\n\n    Code code \u003d Code.get(rc);\n    if (isSuccess(code)) {\n      // we successfully created the znode. we are the leader. start monitoring\n      becomeActive();\n      monitorActiveStatus();\n      return;\n    }\n\n    if (isNodeExists(code)) {\n      if (createRetryCount \u003d\u003d 0) {\n        // znode exists and we did not retry the operation. so a different\n        // instance has created it. become standby and monitor lock.\n        becomeStandby();\n      }\n      // if we had retried then the znode could have been created by our first\n      // attempt to the server (that we lost) and this node exists response is\n      // for the second attempt. verify this case via ephemeral node owner. this\n      // will happen on the callback for monitoring the lock.\n      monitorActiveStatus();\n      return;\n    }\n\n    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n        + code.toString() + \" for path \" + path;\n    LOG.debug(errorMessage);\n\n    if (shouldRetry(code)) {\n      if (createRetryCount \u003c NUM_RETRIES) {\n        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n        ++createRetryCount;\n        createLockNodeAsync();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode create connection errors.\";\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java",
      "extendedDetails": {}
    },
    "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7992. Add ZKClient library to facilitate leader election. Contributed by Bikas Saha.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1235841 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 9:26 AM",
      "commitName": "cbfe8fea0ee9753b1f79dd8bb9a2972d0539e9ec",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,49 @@\n+  public synchronized void processResult(int rc, String path, Object ctx,\n+      String name) {\n+    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n+        + \" connectionState: \" + zkConnectionState);\n+    if (zkClient \u003d\u003d null) {\n+      // zkClient is nulled before closing the connection\n+      // this is the callback with session expired after we closed the session\n+      return;\n+    }\n+\n+    Code code \u003d Code.get(rc);\n+    if (operationSuccess(code)) {\n+      // we successfully created the znode. we are the leader. start monitoring\n+      becomeActive();\n+      monitorActiveStatus();\n+      return;\n+    }\n+\n+    if (operationNodeExists(code)) {\n+      if (createRetryCount \u003d\u003d 0) {\n+        // znode exists and we did not retry the operation. so a different\n+        // instance has created it. become standby and monitor lock.\n+        becomeStandby();\n+      }\n+      // if we had retried then the znode could have been created by our first\n+      // attempt to the server (that we lost) and this node exists response is\n+      // for the second attempt. verify this case via ephemeral node owner. this\n+      // will happen on the callback for monitoring the lock.\n+      monitorActiveStatus();\n+      return;\n+    }\n+\n+    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n+        + code.toString();\n+    LOG.debug(errorMessage);\n+\n+    if (operationRetry(code)) {\n+      if (createRetryCount \u003c NUM_RETRIES) {\n+        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n+        ++createRetryCount;\n+        createNode();\n+        return;\n+      }\n+      errorMessage \u003d errorMessage\n+          + \". Not retrying further znode create connection errors.\";\n+    }\n+\n+    fatalError(errorMessage);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void processResult(int rc, String path, Object ctx,\n      String name) {\n    LOG.debug(\"CreateNode result: \" + rc + \" for path: \" + path\n        + \" connectionState: \" + zkConnectionState);\n    if (zkClient \u003d\u003d null) {\n      // zkClient is nulled before closing the connection\n      // this is the callback with session expired after we closed the session\n      return;\n    }\n\n    Code code \u003d Code.get(rc);\n    if (operationSuccess(code)) {\n      // we successfully created the znode. we are the leader. start monitoring\n      becomeActive();\n      monitorActiveStatus();\n      return;\n    }\n\n    if (operationNodeExists(code)) {\n      if (createRetryCount \u003d\u003d 0) {\n        // znode exists and we did not retry the operation. so a different\n        // instance has created it. become standby and monitor lock.\n        becomeStandby();\n      }\n      // if we had retried then the znode could have been created by our first\n      // attempt to the server (that we lost) and this node exists response is\n      // for the second attempt. verify this case via ephemeral node owner. this\n      // will happen on the callback for monitoring the lock.\n      monitorActiveStatus();\n      return;\n    }\n\n    String errorMessage \u003d \"Received create error from Zookeeper. code:\"\n        + code.toString();\n    LOG.debug(errorMessage);\n\n    if (operationRetry(code)) {\n      if (createRetryCount \u003c NUM_RETRIES) {\n        LOG.debug(\"Retrying createNode createRetryCount: \" + createRetryCount);\n        ++createRetryCount;\n        createNode();\n        return;\n      }\n      errorMessage \u003d errorMessage\n          + \". Not retrying further znode create connection errors.\";\n    }\n\n    fatalError(errorMessage);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ha/ActiveStandbyElector.java"
    }
  }
}