{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RpcProgramNfs3.java",
  "functionName": "remove",
  "functionId": "remove___xdr-XDR__securityHandler-SecurityHandler__remoteAddress-SocketAddress",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
  "functionStartLine": 1163,
  "functionEndLine": 1238,
  "numCommitsSeen": 138,
  "timeTaken": 6073,
  "changeHistory": [
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8",
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
    "f37849188b05a6251584de1aed5e66d5dfa7da4f",
    "5e5e35b1856293503124b77d5d4998a4d8e83082",
    "d71d40a63d198991077d5babd70be5e9787a53f1",
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020",
    "c9aa74743773c61be938cc1a6ea811ae1404bca2",
    "c5686addb1eebbf7efde34a345dca43e1090adf7",
    "2ecab65e3e290a1ee192b39ec70868863853543a",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
    "05f35518f19d48890770128727289582cca3457b",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597",
    "37f587563a943a827fbff865f5302bac6d202415"
  ],
  "changeHistoryShort": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": "Ybodychange",
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": "Ybodychange",
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a": "Ybodychange",
    "f37849188b05a6251584de1aed5e66d5dfa7da4f": "Ybodychange",
    "5e5e35b1856293503124b77d5d4998a4d8e83082": "Ybodychange",
    "d71d40a63d198991077d5babd70be5e9787a53f1": "Ybodychange",
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020": "Ybodychange",
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": "Ybodychange",
    "c5686addb1eebbf7efde34a345dca43e1090adf7": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "2ecab65e3e290a1ee192b39ec70868863853543a": "Ymultichange(Yparameterchange,Ybodychange)",
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": "Ybodychange",
    "05f35518f19d48890770128727289582cca3457b": "Ybodychange",
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": "Ymultichange(Yparameterchange,Ybodychange)",
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": "Ymultichange(Yparameterchange,Ybodychange)",
    "37f587563a943a827fbff865f5302bac6d202415": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f20dc0d5770d3876954faf0a6e8dcce6539ffc23": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10571. Use Log.*(Object, Throwable) overload to log exceptions.\nContributed by Andras Bokor.\n",
      "commitDate": "14/02/18 8:20 AM",
      "commitName": "f20dc0d5770d3876954faf0a6e8dcce6539ffc23",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "10/10/17 10:38 AM",
      "commitNameOld": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 126.95,
      "commitsBetweenForRepo": 833,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,76 @@\n   REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n \n     REMOVE3Request request;\n     try {\n       request \u003d REMOVE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     int namenodeId \u003d dirHandle.getNamenodeId();\n \n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS REMOVE dir fileHandle: \" + dirHandle.dumpFileHandle()\n-          + \" fileName: \" + fileName + \" client: \" + remoteAddress);\n+      LOG.debug(\"NFS REMOVE dir fileHandle: {} fileName: {} client: {}\",\n+          dirHandle.dumpFileHandle(), fileName, remoteAddress);\n     }\n-\n     DFSClient dfsClient \u003d\n         clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for dir fileId: \" + dirHandle.getFileId());\n+        LOG.info(\"Can\u0027t get path for dir fileId: {}\", dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDirectory()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n-      LOG.warn(\"Exception \", e);\n+      LOG.warn(\"Exception\", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n-          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n+          LOG.info(\"Can\u0027t get postOpDirAttr for {}\", dirFileIdPath, e1);\n         }\n       }\n \n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       int status \u003d mapErrorStatus(e);\n       return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n\n    REMOVE3Request request;\n    try {\n      request \u003d REMOVE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    int namenodeId \u003d dirHandle.getNamenodeId();\n\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileHandle: {} fileName: {} client: {}\",\n          dirHandle.dumpFileHandle(), fileName, remoteAddress);\n    }\n    DFSClient dfsClient \u003d\n        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId: {}\", dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDirectory()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception\", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for {}\", dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "d6602b5f39833611b4afa4581552f6c4c37e23a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11575. Supporting HDFS NFS gateway with Federated HDFS. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "10/10/17 10:38 AM",
      "commitName": "d6602b5f39833611b4afa4581552f6c4c37e23a8",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "14/08/17 9:57 PM",
      "commitNameOld": "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 56.53,
      "commitsBetweenForRepo": 520,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,77 @@\n   REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n-    if (dfsClient \u003d\u003d null) {\n-      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n-      return response;\n-    }\n \n     REMOVE3Request request;\n     try {\n       request \u003d REMOVE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n+    int namenodeId \u003d dirHandle.getNamenodeId();\n+\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n+      LOG.debug(\"NFS REMOVE dir fileHandle: \" + dirHandle.dumpFileHandle()\n           + \" fileName: \" + fileName + \" client: \" + remoteAddress);\n     }\n \n+    DFSClient dfsClient \u003d\n+        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+\n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId: \" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDirectory()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n \n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       int status \u003d mapErrorStatus(e);\n       return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n\n    REMOVE3Request request;\n    try {\n      request \u003d REMOVE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    int namenodeId \u003d dirHandle.getNamenodeId();\n\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileHandle: \" + dirHandle.dumpFileHandle()\n          + \" fileName: \" + fileName + \" client: \" + remoteAddress);\n    }\n\n    DFSClient dfsClient \u003d\n        clientCache.getDfsClient(securityHandler.getUser(), namenodeId);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId: \" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDirectory()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14726. Mark FileStatus::isDir as final\n",
      "commitDate": "14/08/17 9:57 PM",
      "commitName": "645a8f2a4d09acb5a21820f52ee78784d9e4cc8a",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "16/01/17 2:53 PM",
      "commitNameOld": "d1d0b3e1fd593d590aaf2e3db8f730a296b20aa1",
      "commitAuthorOld": "Jitendra Pandey",
      "daysBetweenCommits": 210.25,
      "commitsBetweenForRepo": 1196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     REMOVE3Request request;\n     try {\n       request \u003d REMOVE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName + \" client: \" + remoteAddress);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId: \" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n-      if (fstat.isDir()) {\n+      if (fstat.isDirectory()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n \n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       int status \u003d mapErrorStatus(e);\n       return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    REMOVE3Request request;\n    try {\n      request \u003d REMOVE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName + \" client: \" + remoteAddress);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId: \" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDirectory()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "f37849188b05a6251584de1aed5e66d5dfa7da4f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7423. various typos and message formatting fixes in nfs daemon and doc. (Charles Lamb via yliu)\n",
      "commitDate": "28/01/15 12:56 PM",
      "commitName": "f37849188b05a6251584de1aed5e66d5dfa7da4f",
      "commitAuthor": "yliu",
      "commitDateOld": "19/01/15 5:29 PM",
      "commitNameOld": "5e5e35b1856293503124b77d5d4998a4d8e83082",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 8.81,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     REMOVE3Request request;\n     try {\n       request \u003d REMOVE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n-          + \" fileName: \" + fileName + \" client:\" + remoteAddress);\n+          + \" fileName: \" + fileName + \" client: \" + remoteAddress);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n-        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n+        LOG.info(\"Can\u0027t get path for dir fileId: \" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n \n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       int status \u003d mapErrorStatus(e);\n       return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    REMOVE3Request request;\n    try {\n      request \u003d REMOVE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName + \" client: \" + remoteAddress);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId: \" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "5e5e35b1856293503124b77d5d4998a4d8e83082": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7640. print NFS Client in the NFS log. Contributed by Brandon Li.\n",
      "commitDate": "19/01/15 5:29 PM",
      "commitName": "5e5e35b1856293503124b77d5d4998a4d8e83082",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "11/12/14 3:40 PM",
      "commitNameOld": "f6f2a3f1c73266bfedd802eacde60d8b19b81015",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 39.08,
      "commitsBetweenForRepo": 202,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     REMOVE3Request request;\n     try {\n       request \u003d REMOVE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n-          + \" fileName: \" + fileName);\n+          + \" fileName: \" + fileName + \" client:\" + remoteAddress);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n \n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       int status \u003d mapErrorStatus(e);\n       return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    REMOVE3Request request;\n    try {\n      request \u003d REMOVE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName + \" client:\" + remoteAddress);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "d71d40a63d198991077d5babd70be5e9787a53f1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7180. NFSv3 gateway frequently gets stuck due to GC. Contributed by Brandon Li\n",
      "commitDate": "22/10/14 9:27 PM",
      "commitName": "d71d40a63d198991077d5babd70be5e9787a53f1",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "21/10/14 11:49 AM",
      "commitNameOld": "4e134a02a4b6f30704b99dfb166dc361daf426ea",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 1.4,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n-    REMOVE3Request request \u003d null;\n+    REMOVE3Request request;\n     try {\n       request \u003d REMOVE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n \n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       int status \u003d mapErrorStatus(e);\n       return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    REMOVE3Request request;\n    try {\n      request \u003d REMOVE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6892. Add XDR packaging method for each NFS request. Contributed by Brandon Li\n",
      "commitDate": "27/08/14 11:06 AM",
      "commitName": "cd9182d8b5f60428f6c91b0eb0b2e61d52a07020",
      "commitAuthor": "brandonli",
      "commitDateOld": "21/08/14 10:53 AM",
      "commitNameOld": "7b28f363b1b3f12cecc92d0bba8eb3021b67b48e",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 6.01,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n       SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n \n     REMOVE3Request request \u003d null;\n     try {\n-      request \u003d new REMOVE3Request(xdr);\n+      request \u003d REMOVE3Request.deserialize(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n \n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       int status \u003d mapErrorStatus(e);\n       return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d REMOVE3Request.deserialize(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "c9aa74743773c61be938cc1a6ea811ae1404bca2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6451. NFS should not return NFS3ERR_IO for AccessControlException. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 10:40 AM",
      "commitName": "c9aa74743773c61be938cc1a6ea811ae1404bca2",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "23/07/14 2:22 PM",
      "commitNameOld": "2a5f1029a5221c42ab61b22f99d79251ed069ca4",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 11.85,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,73 @@\n-  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {\n+  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n+      SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n-    \n+\n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           preOpDirAttr);\n       if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n+\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n-      if (e instanceof AccessControlException) {\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n-      } else {\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n-      }\n+      int status \u003d mapErrorStatus(e);\n+      return new REMOVE3Response(status, dirWcc);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler,\n      SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n\n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      int status \u003d mapErrorStatus(e);\n      return new REMOVE3Response(status, dirWcc);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "c5686addb1eebbf7efde34a345dca43e1090adf7": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6703. NFS: Files can be deleted from a read-only mount. Contributed by Srikanth Upputuri\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/07/14 1:53 PM",
      "commitName": "c5686addb1eebbf7efde34a345dca43e1090adf7",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6703. NFS: Files can be deleted from a read-only mount. Contributed by Srikanth Upputuri\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612702 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 1:53 PM",
          "commitName": "c5686addb1eebbf7efde34a345dca43e1090adf7",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "27/06/14 5:00 AM",
          "commitNameOld": "5f880f79d275c74475836a1932be6f6f2daa1407",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 25.37,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n-  public REMOVE3Response remove(XDR xdr, RpcInfo info) {\n+  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n-    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n+      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          preOpDirAttr);\n+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n+      }\n+\n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n-        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-            preOpDirAttr);\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n-        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-            preOpDirAttr);\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, info-RpcInfo]",
            "newValue": "[xdr-XDR, securityHandler-SecurityHandler, remoteAddress-SocketAddress]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6703. NFS: Files can be deleted from a read-only mount. Contributed by Srikanth Upputuri\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612702 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 1:53 PM",
          "commitName": "c5686addb1eebbf7efde34a345dca43e1090adf7",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "27/06/14 5:00 AM",
          "commitNameOld": "5f880f79d275c74475836a1932be6f6f2daa1407",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 25.37,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n-  public REMOVE3Response remove(XDR xdr, RpcInfo info) {\n+  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n-    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n+      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          preOpDirAttr);\n+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n+      }\n+\n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n-        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-            preOpDirAttr);\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n-        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-            preOpDirAttr);\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6703. NFS: Files can be deleted from a read-only mount. Contributed by Srikanth Upputuri\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612702 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/07/14 1:53 PM",
          "commitName": "c5686addb1eebbf7efde34a345dca43e1090adf7",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "27/06/14 5:00 AM",
          "commitNameOld": "5f880f79d275c74475836a1932be6f6f2daa1407",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 25.37,
          "commitsBetweenForRepo": 173,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,74 @@\n-  public REMOVE3Response remove(XDR xdr, RpcInfo info) {\n+  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n-    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n+      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          preOpDirAttr);\n+      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n+      }\n+\n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n-        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-            preOpDirAttr);\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n       }\n       if (fstat.isDir()) {\n-        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n-            preOpDirAttr);\n-        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  REMOVE3Response remove(XDR xdr, SecurityHandler securityHandler, SocketAddress remoteAddress) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      WccData errWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          preOpDirAttr);\n      if (!checkAccessPrivilege(remoteAddress, AccessPrivilege.READ_WRITE)) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, errWcc);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, errWcc);\n      }\n      if (fstat.isDir()) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, errWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "2ecab65e3e290a1ee192b39ec70868863853543a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 1:45 PM",
      "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public REMOVE3Response remove(XDR xdr,\n-      SecurityHandler securityHandler, InetAddress client) {\n+  public REMOVE3Response remove(XDR xdr, RpcInfo info) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public REMOVE3Response remove(XDR xdr, RpcInfo info) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]",
            "newValue": "[xdr-XDR, info-RpcInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6439. NFS should not reject NFS requests to the NULL procedure whether port monitoring is enabled or not. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603622 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/14 1:45 PM",
          "commitName": "2ecab65e3e290a1ee192b39ec70868863853543a",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "30/05/14 4:53 PM",
          "commitNameOld": "42391d260da400593812396c1ffd45d1a371d3cb",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 18.87,
          "commitsBetweenForRepo": 106,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,73 +1,73 @@\n-  public REMOVE3Response remove(XDR xdr,\n-      SecurityHandler securityHandler, InetAddress client) {\n+  public REMOVE3Response remove(XDR xdr, RpcInfo info) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n+    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public REMOVE3Response remove(XDR xdr, RpcInfo info) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    SecurityHandler securityHandler \u003d getSecurityHandler(info);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "3bfd18c6b0483ae27eff6d53bda934e67dda5464": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6050. NFS does not handle exceptions correctly in a few places. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 1:49 PM",
      "commitName": "3bfd18c6b0483ae27eff6d53bda934e67dda5464",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "13/03/14 2:03 PM",
      "commitNameOld": "842aa2bc9432cc137bda0a5aec9c9eef12b000ce",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 10.99,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   public REMOVE3Response remove(XDR xdr,\n       SecurityHandler securityHandler, InetAddress client) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n-          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n+          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public REMOVE3Response remove(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath, e1);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "05f35518f19d48890770128727289582cca3457b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5171. NFS should create input stream for a file and try to share it with multiple read requests. Contributed by Haohui Mai\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535586 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/10/13 4:40 PM",
      "commitName": "05f35518f19d48890770128727289582cca3457b",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "15/10/13 2:23 PM",
      "commitNameOld": "a9befa6f0a8a27b49b1e6483e749661f493f06cf",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 9.1,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,73 +1,73 @@\n   public REMOVE3Response remove(XDR xdr,\n       SecurityHandler securityHandler, InetAddress client) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n-    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n+    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n       if (fstat \u003d\u003d null) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public REMOVE3Response remove(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.getDfsClient(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient, fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
      "extendedDetails": {}
    },
    "613979c8fdacf25fd563395ecc399c4de94d3ee7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/13 12:29 PM",
      "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public REMOVE3Response remove(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n           fileIdPath);\n       if (fstat \u003d\u003d null) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public REMOVE3Response remove(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n          fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]",
            "newValue": "[xdr-XDR, securityHandler-SecurityHandler, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5085. Refactor o.a.h.nfs to support different types of authentications. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1521601 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/09/13 12:29 PM",
          "commitName": "613979c8fdacf25fd563395ecc399c4de94d3ee7",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "31/08/13 2:12 PM",
          "commitNameOld": "cbca1668317f3f2d295eea53d7bd020bda4a810f",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 9.93,
          "commitsBetweenForRepo": 38,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n+  public REMOVE3Response remove(XDR xdr,\n+      SecurityHandler securityHandler, InetAddress client) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n-    String uname \u003d authSysCheck(authSys);\n-    DFSClient dfsClient \u003d clientCache.get(uname);\n+    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n     Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n       preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n           fileIdPath);\n       if (fstat \u003d\u003d null) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n         WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n             preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n       boolean result \u003d dfsClient.delete(fileIdPath, false);\n       WccData dirWcc \u003d Nfs3Utils.createWccData(\n           Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n \n       if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n         }\n       }\n       WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n           postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public REMOVE3Response remove(XDR xdr,\n      SecurityHandler securityHandler, InetAddress client) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    DFSClient dfsClient \u003d clientCache.get(securityHandler.getUser());\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n          fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "15632cd76f12c2f7df50d0df4865fbe3d8261597": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 2:14 PM",
      "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
      "commitAuthor": "Brandon Li",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys) {\n+  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n-      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n           fileIdPath);\n       if (fstat \u003d\u003d null) {\n-        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-            dirFileIdPath, iug);\n+        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+            preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n-        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-            dirFileIdPath, iug);\n+        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+            preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n-      if (dfsClient.delete(fileIdPath, false) \u003d\u003d false) {\n-        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-            dirFileIdPath, iug);\n+      boolean result \u003d dfsClient.delete(fileIdPath, false);\n+      WccData dirWcc \u003d Nfs3Utils.createWccData(\n+          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n+\n+      if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n-\n-      WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-          dirFileIdPath, iug);\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n         }\n       }\n-      WccData dirWcc \u003d new WccData(preOpDirAttr, postOpDirAttr);\n+      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n          fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {
            "oldValue": "[xdr-XDR, authSys-RpcAuthSys]",
            "newValue": "[xdr-XDR, authSys-RpcAuthSys, client-InetAddress]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4947 Add NFS server export table to control export by hostname or IP range. Contributed by Jing Zhao\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517040 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "23/08/13 2:14 PM",
          "commitName": "15632cd76f12c2f7df50d0df4865fbe3d8261597",
          "commitAuthor": "Brandon Li",
          "commitDateOld": "19/08/13 2:54 PM",
          "commitNameOld": "c9b89de0eacf15f21faa3a7ba30d4773f571c9a4",
          "commitAuthorOld": "Brandon Li",
          "daysBetweenCommits": 3.97,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,74 +1,74 @@\n-  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys) {\n+  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n     REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n     String uname \u003d authSysCheck(authSys);\n     DFSClient dfsClient \u003d clientCache.get(uname);\n     if (dfsClient \u003d\u003d null) {\n       response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n       return response;\n     }\n     \n     REMOVE3Request request \u003d null;\n     try {\n       request \u003d new REMOVE3Request(xdr);\n     } catch (IOException e) {\n       LOG.error(\"Invalid REMOVE request\");\n       return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n     }\n     FileHandle dirHandle \u003d request.getHandle();\n     String fileName \u003d request.getName();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n           + \" fileName: \" + fileName);\n     }\n \n     String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n-    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes preOpDirAttr \u003d null;\n     Nfs3FileAttributes postOpDirAttr \u003d null;\n     try {\n-      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n       if (preOpDirAttr \u003d\u003d null) {\n         LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n       }\n \n       String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n       HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n           fileIdPath);\n       if (fstat \u003d\u003d null) {\n-        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-            dirFileIdPath, iug);\n+        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+            preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n       }\n       if (fstat.isDir()) {\n-        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-            dirFileIdPath, iug);\n+        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+            preOpDirAttr);\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n       }\n \n-      if (dfsClient.delete(fileIdPath, false) \u003d\u003d false) {\n-        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-            dirFileIdPath, iug);\n+      boolean result \u003d dfsClient.delete(fileIdPath, false);\n+      WccData dirWcc \u003d Nfs3Utils.createWccData(\n+          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n+\n+      if (!result) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n       }\n-\n-      WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n-          dirFileIdPath, iug);\n       return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n     } catch (IOException e) {\n       LOG.warn(\"Exception \", e);\n       // Try to return correct WccData\n       if (postOpDirAttr \u003d\u003d null) {\n         try {\n           postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n         } catch (IOException e1) {\n           LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n         }\n       }\n-      WccData dirWcc \u003d new WccData(preOpDirAttr, postOpDirAttr);\n+      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n+          postOpDirAttr);\n       if (e instanceof AccessControlException) {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n       } else {\n         return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys, InetAddress client) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    Nfs3FileAttributes preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d  Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n          fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n            preOpDirAttr);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      boolean result \u003d dfsClient.delete(fileIdPath, false);\n      WccData dirWcc \u003d Nfs3Utils.createWccData(\n          Nfs3Utils.getWccAttr(preOpDirAttr), dfsClient, dirFileIdPath, iug);\n\n      if (!result) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n        }\n      }\n      WccData dirWcc \u003d new WccData(Nfs3Utils.getWccAttr(preOpDirAttr),\n          postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java",
          "extendedDetails": {}
        }
      ]
    },
    "37f587563a943a827fbff865f5302bac6d202415": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4762 Provide HDFS based NFSv3 and Mountd implementation. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/13 10:31 AM",
      "commitName": "37f587563a943a827fbff865f5302bac6d202415",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,74 @@\n+  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys) {\n+    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n+    String uname \u003d authSysCheck(authSys);\n+    DFSClient dfsClient \u003d clientCache.get(uname);\n+    if (dfsClient \u003d\u003d null) {\n+      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n+      return response;\n+    }\n+    \n+    REMOVE3Request request \u003d null;\n+    try {\n+      request \u003d new REMOVE3Request(xdr);\n+    } catch (IOException e) {\n+      LOG.error(\"Invalid REMOVE request\");\n+      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n+    }\n+    FileHandle dirHandle \u003d request.getHandle();\n+    String fileName \u003d request.getName();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n+          + \" fileName: \" + fileName);\n+    }\n+\n+    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n+    WccAttr preOpDirAttr \u003d null;\n+    Nfs3FileAttributes postOpDirAttr \u003d null;\n+    try {\n+      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n+      if (preOpDirAttr \u003d\u003d null) {\n+        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n+      }\n+\n+      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n+      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n+          fileIdPath);\n+      if (fstat \u003d\u003d null) {\n+        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n+            dirFileIdPath, iug);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n+      }\n+      if (fstat.isDir()) {\n+        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n+            dirFileIdPath, iug);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n+      }\n+\n+      if (dfsClient.delete(fileIdPath, false) \u003d\u003d false) {\n+        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n+            dirFileIdPath, iug);\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n+      }\n+\n+      WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n+          dirFileIdPath, iug);\n+      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n+    } catch (IOException e) {\n+      LOG.warn(\"Exception \", e);\n+      // Try to return correct WccData\n+      if (postOpDirAttr \u003d\u003d null) {\n+        try {\n+          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n+        } catch (IOException e1) {\n+          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n+        }\n+      }\n+      WccData dirWcc \u003d new WccData(preOpDirAttr, postOpDirAttr);\n+      if (e instanceof AccessControlException) {\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n+      } else {\n+        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public REMOVE3Response remove(XDR xdr, RpcAuthSys authSys) {\n    REMOVE3Response response \u003d new REMOVE3Response(Nfs3Status.NFS3_OK);\n    String uname \u003d authSysCheck(authSys);\n    DFSClient dfsClient \u003d clientCache.get(uname);\n    if (dfsClient \u003d\u003d null) {\n      response.setStatus(Nfs3Status.NFS3ERR_SERVERFAULT);\n      return response;\n    }\n    \n    REMOVE3Request request \u003d null;\n    try {\n      request \u003d new REMOVE3Request(xdr);\n    } catch (IOException e) {\n      LOG.error(\"Invalid REMOVE request\");\n      return new REMOVE3Response(Nfs3Status.NFS3ERR_INVAL);\n    }\n    FileHandle dirHandle \u003d request.getHandle();\n    String fileName \u003d request.getName();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"NFS REMOVE dir fileId: \" + dirHandle.getFileId()\n          + \" fileName: \" + fileName);\n    }\n\n    String dirFileIdPath \u003d Nfs3Utils.getFileIdPath(dirHandle);\n    WccAttr preOpDirAttr \u003d null;\n    Nfs3FileAttributes postOpDirAttr \u003d null;\n    try {\n      preOpDirAttr \u003d Nfs3Utils.getWccAttr(dfsClient, dirFileIdPath);\n      if (preOpDirAttr \u003d\u003d null) {\n        LOG.info(\"Can\u0027t get path for dir fileId:\" + dirHandle.getFileId());\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_STALE);\n      }\n\n      String fileIdPath \u003d dirFileIdPath + \"/\" + fileName;\n      HdfsFileStatus fstat \u003d Nfs3Utils.getFileStatus(dfsClient,\n          fileIdPath);\n      if (fstat \u003d\u003d null) {\n        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n            dirFileIdPath, iug);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_NOENT, dirWcc);\n      }\n      if (fstat.isDir()) {\n        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n            dirFileIdPath, iug);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ISDIR, dirWcc);\n      }\n\n      if (dfsClient.delete(fileIdPath, false) \u003d\u003d false) {\n        WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n            dirFileIdPath, iug);\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_ACCES, dirWcc);\n      }\n\n      WccData dirWcc \u003d Nfs3Utils.createWccData(preOpDirAttr, dfsClient,\n          dirFileIdPath, iug);\n      return new REMOVE3Response(Nfs3Status.NFS3_OK, dirWcc);\n    } catch (IOException e) {\n      LOG.warn(\"Exception \", e);\n      // Try to return correct WccData\n      if (postOpDirAttr \u003d\u003d null) {\n        try {\n          postOpDirAttr \u003d Nfs3Utils.getFileAttr(dfsClient, dirFileIdPath, iug);\n        } catch (IOException e1) {\n          LOG.info(\"Can\u0027t get postOpDirAttr for \" + dirFileIdPath);\n        }\n      }\n      WccData dirWcc \u003d new WccData(preOpDirAttr, postOpDirAttr);\n      if (e instanceof AccessControlException) {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_PERM, dirWcc);\n      } else {\n        return new REMOVE3Response(Nfs3Status.NFS3ERR_IO, dirWcc);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/RpcProgramNfs3.java"
    }
  }
}