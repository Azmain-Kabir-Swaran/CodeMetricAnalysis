{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DelegationTokenAuthenticationFilter.java",
  "functionName": "getConfiguration",
  "functionId": "getConfiguration___configPrefix-String__filterConfig-FilterConfig",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationFilter.java",
  "functionStartLine": 117,
  "functionEndLine": 122,
  "numCommitsSeen": 19,
  "timeTaken": 1771,
  "changeHistory": [
    "49f5d20efe7af7cd7c45d93edad33997a695a746",
    "be9c67930b57c516723d566625f9036a88a84055",
    "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b",
    "4d4560189adccb941a3dc5eee7add134adbf6519",
    "ae0d48854d5ee0d1281c630263762e1cdeb781ff",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "49f5d20efe7af7cd7c45d93edad33997a695a746": "Ybodychange",
    "be9c67930b57c516723d566625f9036a88a84055": "Ymultichange(Yexceptionschange,Ybodychange)",
    "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b": "Yfilerename",
    "4d4560189adccb941a3dc5eee7add134adbf6519": "Ymultichange(Yfilerename,Ybodychange)",
    "ae0d48854d5ee0d1281c630263762e1cdeb781ff": "Ybodychange",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "49f5d20efe7af7cd7c45d93edad33997a695a746": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12103. Small refactoring of DelegationTokenAuthenticationFilter to allow code sharing. Contributed by Yongjun Zhang.\n",
      "commitDate": "19/06/15 2:06 PM",
      "commitName": "49f5d20efe7af7cd7c45d93edad33997a695a746",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "21/04/15 11:31 AM",
      "commitNameOld": "424a00daa069bf2049014fd46ad152ec5fc77ac8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 59.11,
      "commitsBetweenForRepo": 559,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,6 @@\n   protected Properties getConfiguration(String configPrefix,\n       FilterConfig filterConfig) throws ServletException {\n     Properties props \u003d super.getConfiguration(configPrefix, filterConfig);\n-    String authType \u003d props.getProperty(AUTH_TYPE);\n-    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\n-      props.setProperty(AUTH_TYPE,\n-          PseudoDelegationTokenAuthenticationHandler.class.getName());\n-    } else if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\n-      props.setProperty(AUTH_TYPE,\n-          KerberosDelegationTokenAuthenticationHandler.class.getName());\n-    }\n+    setAuthHandlerClass(props);\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException {\n    Properties props \u003d super.getConfiguration(configPrefix, filterConfig);\n    setAuthHandlerClass(props);\n    return props;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationFilter.java",
      "extendedDetails": {}
    },
    "be9c67930b57c516723d566625f9036a88a84055": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 2. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616672 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 9:58 PM",
      "commitName": "be9c67930b57c516723d566625f9036a88a84055",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 2. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616672 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/08/14 9:58 PM",
          "commitName": "be9c67930b57c516723d566625f9036a88a84055",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "07/08/14 9:55 PM",
          "commitNameOld": "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,13 @@\n-  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n-    Properties props \u003d new Properties();\n-    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n-\n-    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n-    for (Map.Entry\u003cString, String\u003e entry : conf) {\n-      String name \u003d entry.getKey();\n-      if (name.startsWith(CONF_PREFIX)) {\n-        String value \u003d conf.get(name);\n-        name \u003d name.substring(CONF_PREFIX.length());\n-        props.setProperty(name, value);\n-      }\n-    }\n-\n-    if (props.getProperty(AUTH_TYPE).equals(\"kerberos\")) {\n+  protected Properties getConfiguration(String configPrefix,\n+      FilterConfig filterConfig) throws ServletException {\n+    Properties props \u003d super.getConfiguration(configPrefix, filterConfig);\n+    String authType \u003d props.getProperty(AUTH_TYPE);\n+    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\n       props.setProperty(AUTH_TYPE,\n-                        HttpFSKerberosAuthenticationHandler.class.getName());\n-    }\n-\n-    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n-    if (signatureSecretFile \u003d\u003d null) {\n-      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n-    }\n-\n-    try {\n-      StringBuilder secret \u003d new StringBuilder();\n-      Reader reader \u003d new FileReader(signatureSecretFile);\n-      int c \u003d reader.read();\n-      while (c \u003e -1) {\n-        secret.append((char)c);\n-        c \u003d reader.read();\n-      }\n-      reader.close();\n-      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n-    } catch (IOException ex) {\n-      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n+          PseudoDelegationTokenAuthenticationHandler.class.getName());\n+    } else if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\n+      props.setProperty(AUTH_TYPE,\n+          KerberosDelegationTokenAuthenticationHandler.class.getName());\n     }\n     return props;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException {\n    Properties props \u003d super.getConfiguration(configPrefix, filterConfig);\n    String authType \u003d props.getProperty(AUTH_TYPE);\n    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\n      props.setProperty(AUTH_TYPE,\n          PseudoDelegationTokenAuthenticationHandler.class.getName());\n    } else if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\n      props.setProperty(AUTH_TYPE,\n          KerberosDelegationTokenAuthenticationHandler.class.getName());\n    }\n    return props;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationFilter.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[ServletException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 2. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616672 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "07/08/14 9:58 PM",
          "commitName": "be9c67930b57c516723d566625f9036a88a84055",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "07/08/14 9:55 PM",
          "commitNameOld": "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,13 @@\n-  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n-    Properties props \u003d new Properties();\n-    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n-\n-    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n-    for (Map.Entry\u003cString, String\u003e entry : conf) {\n-      String name \u003d entry.getKey();\n-      if (name.startsWith(CONF_PREFIX)) {\n-        String value \u003d conf.get(name);\n-        name \u003d name.substring(CONF_PREFIX.length());\n-        props.setProperty(name, value);\n-      }\n-    }\n-\n-    if (props.getProperty(AUTH_TYPE).equals(\"kerberos\")) {\n+  protected Properties getConfiguration(String configPrefix,\n+      FilterConfig filterConfig) throws ServletException {\n+    Properties props \u003d super.getConfiguration(configPrefix, filterConfig);\n+    String authType \u003d props.getProperty(AUTH_TYPE);\n+    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\n       props.setProperty(AUTH_TYPE,\n-                        HttpFSKerberosAuthenticationHandler.class.getName());\n-    }\n-\n-    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n-    if (signatureSecretFile \u003d\u003d null) {\n-      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n-    }\n-\n-    try {\n-      StringBuilder secret \u003d new StringBuilder();\n-      Reader reader \u003d new FileReader(signatureSecretFile);\n-      int c \u003d reader.read();\n-      while (c \u003e -1) {\n-        secret.append((char)c);\n-        c \u003d reader.read();\n-      }\n-      reader.close();\n-      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n-    } catch (IOException ex) {\n-      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n+          PseudoDelegationTokenAuthenticationHandler.class.getName());\n+    } else if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\n+      props.setProperty(AUTH_TYPE,\n+          KerberosDelegationTokenAuthenticationHandler.class.getName());\n     }\n     return props;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Properties getConfiguration(String configPrefix,\n      FilterConfig filterConfig) throws ServletException {\n    Properties props \u003d super.getConfiguration(configPrefix, filterConfig);\n    String authType \u003d props.getProperty(AUTH_TYPE);\n    if (authType.equals(PseudoAuthenticationHandler.TYPE)) {\n      props.setProperty(AUTH_TYPE,\n          PseudoDelegationTokenAuthenticationHandler.class.getName());\n    } else if (authType.equals(KerberosAuthenticationHandler.TYPE)) {\n      props.setProperty(AUTH_TYPE,\n          KerberosDelegationTokenAuthenticationHandler.class.getName());\n    }\n    return props;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationFilter.java",
          "extendedDetails": {}
        }
      ]
    },
    "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-10771. Refactor HTTP delegation support out of httpfs to common, PART 1. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616671 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/14 9:55 PM",
      "commitName": "4e7c4a6e1fd00767d966cd2482a364b2eacbd35b",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "07/08/14 9:27 PM",
      "commitNameOld": "2ac640ec751f665365d548104b3713e414f53351",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    if (props.getProperty(AUTH_TYPE).equals(\"kerberos\")) {\n      props.setProperty(AUTH_TYPE,\n                        HttpFSKerberosAuthenticationHandler.class.getName());\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    return props;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationFilter.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/delegation/web/DelegationTokenAuthenticationFilter.java"
      }
    },
    "4d4560189adccb941a3dc5eee7add134adbf6519": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "HDFS-3113. httpfs does not support delegation tokens. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/07/12 6:39 AM",
      "commitName": "4d4560189adccb941a3dc5eee7add134adbf6519",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-3113. httpfs does not support delegation tokens. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365988 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/07/12 6:39 AM",
          "commitName": "4d4560189adccb941a3dc5eee7add134adbf6519",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "26/07/12 6:23 AM",
          "commitNameOld": "9d16c9354b0c05edb30d23003dcdec4cc44ed925",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,39 @@\n   protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n+    if (props.getProperty(AUTH_TYPE).equals(\"kerberos\")) {\n+      props.setProperty(AUTH_TYPE,\n+                        HttpFSKerberosAuthenticationHandler.class.getName());\n+    }\n+\n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n     }\n \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n       Reader reader \u003d new FileReader(signatureSecretFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n     return props;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    if (props.getProperty(AUTH_TYPE).equals(\"kerberos\")) {\n      props.setProperty(AUTH_TYPE,\n                        HttpFSKerberosAuthenticationHandler.class.getName());\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    return props;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/AuthFilter.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3113. httpfs does not support delegation tokens. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1365988 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/07/12 6:39 AM",
          "commitName": "4d4560189adccb941a3dc5eee7add134adbf6519",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "26/07/12 6:23 AM",
          "commitNameOld": "9d16c9354b0c05edb30d23003dcdec4cc44ed925",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,39 @@\n   protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n \n+    if (props.getProperty(AUTH_TYPE).equals(\"kerberos\")) {\n+      props.setProperty(AUTH_TYPE,\n+                        HttpFSKerberosAuthenticationHandler.class.getName());\n+    }\n+\n     String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n     if (signatureSecretFile \u003d\u003d null) {\n       throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n     }\n \n     try {\n       StringBuilder secret \u003d new StringBuilder();\n       Reader reader \u003d new FileReader(signatureSecretFile);\n       int c \u003d reader.read();\n       while (c \u003e -1) {\n         secret.append((char)c);\n         c \u003d reader.read();\n       }\n       reader.close();\n       props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n     } catch (IOException ex) {\n       throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n     }\n     return props;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    if (props.getProperty(AUTH_TYPE).equals(\"kerberos\")) {\n      props.setProperty(AUTH_TYPE,\n                        HttpFSKerberosAuthenticationHandler.class.getName());\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    return props;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/HttpFSAuthenticationFilter.java",
          "extendedDetails": {}
        }
      ]
    },
    "ae0d48854d5ee0d1281c630263762e1cdeb781ff": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2707. HttpFS should read the hadoop-auth secret from a file instead inline from the configuration. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1224794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/12/11 11:37 AM",
      "commitName": "ae0d48854d5ee0d1281c630263762e1cdeb781ff",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "08/12/11 11:25 AM",
      "commitNameOld": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 18.01,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,34 @@\n   protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n     Properties props \u003d new Properties();\n     Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n \n     props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n     for (Map.Entry\u003cString, String\u003e entry : conf) {\n       String name \u003d entry.getKey();\n       if (name.startsWith(CONF_PREFIX)) {\n         String value \u003d conf.get(name);\n         name \u003d name.substring(CONF_PREFIX.length());\n         props.setProperty(name, value);\n       }\n     }\n+\n+    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n+    if (signatureSecretFile \u003d\u003d null) {\n+      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n+    }\n+\n+    try {\n+      StringBuilder secret \u003d new StringBuilder();\n+      Reader reader \u003d new FileReader(signatureSecretFile);\n+      int c \u003d reader.read();\n+      while (c \u003e -1) {\n+        secret.append((char)c);\n+        c \u003d reader.read();\n+      }\n+      reader.close();\n+      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n+    } catch (IOException ex) {\n+      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n+    }\n     return props;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n\n    String signatureSecretFile \u003d props.getProperty(SIGNATURE_SECRET_FILE, null);\n    if (signatureSecretFile \u003d\u003d null) {\n      throw new RuntimeException(\"Undefined property: \" + SIGNATURE_SECRET_FILE);\n    }\n\n    try {\n      StringBuilder secret \u003d new StringBuilder();\n      Reader reader \u003d new FileReader(signatureSecretFile);\n      int c \u003d reader.read();\n      while (c \u003e -1) {\n        secret.append((char)c);\n        c \u003d reader.read();\n      }\n      reader.close();\n      props.setProperty(AuthenticationFilter.SIGNATURE_SECRET, secret.toString());\n    } catch (IOException ex) {\n      throw new RuntimeException(\"Could not read HttpFS signature secret file: \" + signatureSecretFile);\n    }\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/AuthFilter.java",
      "extendedDetails": {}
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,15 @@\n+  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n+    Properties props \u003d new Properties();\n+    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n+\n+    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n+    for (Map.Entry\u003cString, String\u003e entry : conf) {\n+      String name \u003d entry.getKey();\n+      if (name.startsWith(CONF_PREFIX)) {\n+        String value \u003d conf.get(name);\n+        name \u003d name.substring(CONF_PREFIX.length());\n+        props.setProperty(name, value);\n+      }\n+    }\n+    return props;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Properties getConfiguration(String configPrefix, FilterConfig filterConfig) {\n    Properties props \u003d new Properties();\n    Configuration conf \u003d HttpFSServerWebApp.get().getConfig();\n\n    props.setProperty(AuthenticationFilter.COOKIE_PATH, \"/\");\n    for (Map.Entry\u003cString, String\u003e entry : conf) {\n      String name \u003d entry.getKey();\n      if (name.startsWith(CONF_PREFIX)) {\n        String value \u003d conf.get(name);\n        name \u003d name.substring(CONF_PREFIX.length());\n        props.setProperty(name, value);\n      }\n    }\n    return props;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/fs/http/server/AuthFilter.java"
    }
  }
}