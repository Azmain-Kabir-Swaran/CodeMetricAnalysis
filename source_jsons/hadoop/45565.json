{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMProxy.java",
  "functionName": "createRMFailoverProxyProvider",
  "functionId": "createRMFailoverProxyProvider___conf-Configuration__protocol-Class__T__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
  "functionStartLine": 178,
  "functionEndLine": 195,
  "numCommitsSeen": 17,
  "timeTaken": 1254,
  "changeHistory": [
    "ca125153b319a8f5d75585d25cb0f37ae717be01"
  ],
  "changeHistoryShort": {
    "ca125153b319a8f5d75585d25cb0f37ae717be01": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ca125153b319a8f5d75585d25cb0f37ae717be01": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1028. Added FailoverProxyProvider capability to ResourceManager to help with RM failover. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551739 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 2:32 PM",
      "commitName": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  private \u003cT\u003e RMFailoverProxyProvider\u003cT\u003e createRMFailoverProxyProvider(\n+      Configuration conf, Class\u003cT\u003e protocol) {\n+    Class\u003c? extends RMFailoverProxyProvider\u003cT\u003e\u003e defaultProviderClass;\n+    try {\n+      defaultProviderClass \u003d (Class\u003c? extends RMFailoverProxyProvider\u003cT\u003e\u003e)\n+          Class.forName(\n+              YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER);\n+    } catch (Exception e) {\n+      throw new YarnRuntimeException(\"Invalid default failover provider class\" +\n+          YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER, e);\n+    }\n+\n+    RMFailoverProxyProvider\u003cT\u003e provider \u003d ReflectionUtils.newInstance(\n+        conf.getClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n+            defaultProviderClass, RMFailoverProxyProvider.class), conf);\n+    provider.init(conf, (RMProxy\u003cT\u003e) this, protocol);\n+    return provider;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private \u003cT\u003e RMFailoverProxyProvider\u003cT\u003e createRMFailoverProxyProvider(\n      Configuration conf, Class\u003cT\u003e protocol) {\n    Class\u003c? extends RMFailoverProxyProvider\u003cT\u003e\u003e defaultProviderClass;\n    try {\n      defaultProviderClass \u003d (Class\u003c? extends RMFailoverProxyProvider\u003cT\u003e\u003e)\n          Class.forName(\n              YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER);\n    } catch (Exception e) {\n      throw new YarnRuntimeException(\"Invalid default failover provider class\" +\n          YarnConfiguration.DEFAULT_CLIENT_FAILOVER_PROXY_PROVIDER, e);\n    }\n\n    RMFailoverProxyProvider\u003cT\u003e provider \u003d ReflectionUtils.newInstance(\n        conf.getClass(YarnConfiguration.CLIENT_FAILOVER_PROXY_PROVIDER,\n            defaultProviderClass, RMFailoverProxyProvider.class), conf);\n    provider.init(conf, (RMProxy\u003cT\u003e) this, protocol);\n    return provider;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java"
    }
  }
}