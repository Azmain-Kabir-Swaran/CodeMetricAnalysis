{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMNodeLabelsManager.java",
  "functionName": "deactivateNode",
  "functionId": "deactivateNode___nodeId-NodeId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
  "functionStartLine": 271,
  "functionEndLine": 304,
  "numCommitsSeen": 22,
  "timeTaken": 1622,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "f5da5566d9c392a5df71a2dce4c2d0d50eea51ee",
    "db7f1653198b950e89567c06898d64f6b930a0ee"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "f5da5566d9c392a5df71a2dce4c2d0d50eea51ee": "Ybodychange",
    "db7f1653198b950e89567c06898d64f6b930a0ee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/06/17 10:12 AM",
      "commitNameOld": "ee89ac84e68d3e181b75c63f74a0444f9d28146f",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 626.19,
      "commitsBetweenForRepo": 5292,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n   public void deactivateNode(NodeId nodeId) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n-      \n       // save if we have a node before\n       Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       Node nm \u003d getNMInNodeSet(nodeId);\n       if (null !\u003d nm) {\n         if (null \u003d\u003d nm.labels) {\n           // When node deactivated, remove the nm from node collection if no\n           // labels explicitly set for this particular nm\n \n           // Save labels first, we need to remove label-\u003enodes relation later\n           Set\u003cString\u003e savedNodeLabels \u003d getLabelsOnNode(nodeId);\n           \n           // Remove this node in nodes collection\n           nodeCollections.get(nodeId.getHost()).nms.remove(nodeId);\n           \n           // Remove this node in labels-\u003enode\n           removeNodeFromLabels(nodeId, savedNodeLabels);\n         } else {\n           // set nm is not running, and its resource \u003d 0\n           nm.running \u003d false;\n           nm.resource \u003d Resource.newInstance(0, 0);\n         }\n       }\n       \n       // get the node after edition\n       Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       updateResourceMappings(before, after);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deactivateNode(NodeId nodeId) {\n    writeLock.lock();\n    try {\n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      Node nm \u003d getNMInNodeSet(nodeId);\n      if (null !\u003d nm) {\n        if (null \u003d\u003d nm.labels) {\n          // When node deactivated, remove the nm from node collection if no\n          // labels explicitly set for this particular nm\n\n          // Save labels first, we need to remove label-\u003enodes relation later\n          Set\u003cString\u003e savedNodeLabels \u003d getLabelsOnNode(nodeId);\n          \n          // Remove this node in nodes collection\n          nodeCollections.get(nodeId.getHost()).nms.remove(nodeId);\n          \n          // Remove this node in labels-\u003enode\n          removeNodeFromLabels(nodeId, savedNodeLabels);\n        } else {\n          // set nm is not running, and its resource \u003d 0\n          nm.running \u003d false;\n          nm.resource \u003d Resource.newInstance(0, 0);\n        }\n      }\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "f5da5566d9c392a5df71a2dce4c2d0d50eea51ee": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3132. RMNodeLabelsManager should remove node from node-to-label mapping when node becomes deactivated. Contributed by Wangda Tan\n",
      "commitDate": "18/02/15 11:51 AM",
      "commitName": "f5da5566d9c392a5df71a2dce4c2d0d50eea51ee",
      "commitAuthor": "Jian He",
      "commitDateOld": "09/02/15 8:34 PM",
      "commitNameOld": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 8.64,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,35 @@\n   public void deactivateNode(NodeId nodeId) {\n     try {\n       writeLock.lock();\n       \n       // save if we have a node before\n       Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       Node nm \u003d getNMInNodeSet(nodeId);\n       if (null !\u003d nm) {\n-        // set nm is not running, and its resource \u003d 0\n-        nm.running \u003d false;\n-        nm.resource \u003d Resource.newInstance(0, 0);\n+        if (null \u003d\u003d nm.labels) {\n+          // When node deactivated, remove the nm from node collection if no\n+          // labels explicitly set for this particular nm\n+\n+          // Save labels first, we need to remove label-\u003enodes relation later\n+          Set\u003cString\u003e savedNodeLabels \u003d getLabelsOnNode(nodeId);\n+          \n+          // Remove this node in nodes collection\n+          nodeCollections.get(nodeId.getHost()).nms.remove(nodeId);\n+          \n+          // Remove this node in labels-\u003enode\n+          removeNodeFromLabels(nodeId, savedNodeLabels);\n+        } else {\n+          // set nm is not running, and its resource \u003d 0\n+          nm.running \u003d false;\n+          nm.resource \u003d Resource.newInstance(0, 0);\n+        }\n       }\n       \n       // get the node after edition\n       Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n       \n       updateResourceMappings(before, after);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void deactivateNode(NodeId nodeId) {\n    try {\n      writeLock.lock();\n      \n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      Node nm \u003d getNMInNodeSet(nodeId);\n      if (null !\u003d nm) {\n        if (null \u003d\u003d nm.labels) {\n          // When node deactivated, remove the nm from node collection if no\n          // labels explicitly set for this particular nm\n\n          // Save labels first, we need to remove label-\u003enodes relation later\n          Set\u003cString\u003e savedNodeLabels \u003d getLabelsOnNode(nodeId);\n          \n          // Remove this node in nodes collection\n          nodeCollections.get(nodeId.getHost()).nms.remove(nodeId);\n          \n          // Remove this node in labels-\u003enode\n          removeNodeFromLabels(nodeId, savedNodeLabels);\n        } else {\n          // set nm is not running, and its resource \u003d 0\n          nm.running \u003d false;\n          nm.resource \u003d Resource.newInstance(0, 0);\n        }\n      }\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java",
      "extendedDetails": {}
    },
    "db7f1653198b950e89567c06898d64f6b930a0ee": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2494. Added NodeLabels Manager internal API and implementation. Contributed by Wangda Tan.\n",
      "commitDate": "10/10/14 11:44 AM",
      "commitName": "db7f1653198b950e89567c06898d64f6b930a0ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,21 @@\n+  public void deactivateNode(NodeId nodeId) {\n+    try {\n+      writeLock.lock();\n+      \n+      // save if we have a node before\n+      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n+      Node nm \u003d getNMInNodeSet(nodeId);\n+      if (null !\u003d nm) {\n+        // set nm is not running, and its resource \u003d 0\n+        nm.running \u003d false;\n+        nm.resource \u003d Resource.newInstance(0, 0);\n+      }\n+      \n+      // get the node after edition\n+      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n+      \n+      updateResourceMappings(before, after);\n+    } finally {\n+      writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void deactivateNode(NodeId nodeId) {\n    try {\n      writeLock.lock();\n      \n      // save if we have a node before\n      Map\u003cString, Host\u003e before \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      Node nm \u003d getNMInNodeSet(nodeId);\n      if (null !\u003d nm) {\n        // set nm is not running, and its resource \u003d 0\n        nm.running \u003d false;\n        nm.resource \u003d Resource.newInstance(0, 0);\n      }\n      \n      // get the node after edition\n      Map\u003cString, Host\u003e after \u003d cloneNodeMap(ImmutableSet.of(nodeId));\n      \n      updateResourceMappings(before, after);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/nodelabels/RMNodeLabelsManager.java"
    }
  }
}