{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMTokenSecretManagerInRM.java",
  "functionName": "createAndGetNMToken",
  "functionId": "createAndGetNMToken___applicationSubmitter-String__appAttemptId-ApplicationAttemptId__container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
  "functionStartLine": 192,
  "functionEndLine": 213,
  "numCommitsSeen": 14,
  "timeTaken": 3631,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e58fc7603053e3ac1bc2464f9622995017db5245",
    "92317e3459b502f33a3575c247f05d64e5d39a00",
    "5fd5c9900cfd299428acbc8dff767273e44647c0",
    "243bcd367ff3130d74676280233041f88aca62a5",
    "769a0bd8314cd7317c083a9b74abf47242acb58c"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e58fc7603053e3ac1bc2464f9622995017db5245": "Ybodychange",
    "92317e3459b502f33a3575c247f05d64e5d39a00": "Ybodychange",
    "5fd5c9900cfd299428acbc8dff767273e44647c0": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "243bcd367ff3130d74676280233041f88aca62a5": "Ymultichange(Yrename,Ybodychange)",
    "769a0bd8314cd7317c083a9b74abf47242acb58c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public NMToken createAndGetNMToken(String applicationSubmitter,\n       ApplicationAttemptId appAttemptId, Container container) {\n+    this.writeLock.lock();\n     try {\n-      this.writeLock.lock();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n       NMToken nmToken \u003d null;\n       if (nodeSet !\u003d null) {\n         if (!nodeSet.contains(container.getNodeId())) {\n           LOG.info(\"Sending NMToken for nodeId : \" + container.getNodeId()\n               + \" for container : \" + container.getId());\n           Token token \u003d\n               createNMToken(container.getId().getApplicationAttemptId(),\n                 container.getNodeId(), applicationSubmitter);\n           nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n           nodeSet.add(container.getNodeId());\n         }\n       }\n       return nmToken;\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NMToken createAndGetNMToken(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, Container container) {\n    this.writeLock.lock();\n    try {\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      NMToken nmToken \u003d null;\n      if (nodeSet !\u003d null) {\n        if (!nodeSet.contains(container.getNodeId())) {\n          LOG.info(\"Sending NMToken for nodeId : \" + container.getNodeId()\n              + \" for container : \" + container.getId());\n          Token token \u003d\n              createNMToken(container.getId().getApplicationAttemptId(),\n                container.getNodeId(), applicationSubmitter);\n          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n          nodeSet.add(container.getNodeId());\n        }\n      }\n      return nmToken;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
      "extendedDetails": {}
    },
    "e58fc7603053e3ac1bc2464f9622995017db5245": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6263. NMTokenSecretManagerInRM.createAndGetNMToken is not thread safe. Contributed by Haibo Chen\n",
      "commitDate": "03/03/17 6:23 AM",
      "commitName": "e58fc7603053e3ac1bc2464f9622995017db5245",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "03/02/15 6:41 PM",
      "commitNameOld": "26dee1486b70237a2a47f910472e9aa81ffad349",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 758.49,
      "commitsBetweenForRepo": 5605,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public NMToken createAndGetNMToken(String applicationSubmitter,\n       ApplicationAttemptId appAttemptId, Container container) {\n     try {\n-      this.readLock.lock();\n+      this.writeLock.lock();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n       NMToken nmToken \u003d null;\n       if (nodeSet !\u003d null) {\n         if (!nodeSet.contains(container.getNodeId())) {\n           LOG.info(\"Sending NMToken for nodeId : \" + container.getNodeId()\n               + \" for container : \" + container.getId());\n           Token token \u003d\n               createNMToken(container.getId().getApplicationAttemptId(),\n                 container.getNodeId(), applicationSubmitter);\n           nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n           nodeSet.add(container.getNodeId());\n         }\n       }\n       return nmToken;\n     } finally {\n-      this.readLock.unlock();\n+      this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NMToken createAndGetNMToken(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, Container container) {\n    try {\n      this.writeLock.lock();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      NMToken nmToken \u003d null;\n      if (nodeSet !\u003d null) {\n        if (!nodeSet.contains(container.getNodeId())) {\n          LOG.info(\"Sending NMToken for nodeId : \" + container.getNodeId()\n              + \" for container : \" + container.getId());\n          Token token \u003d\n              createNMToken(container.getId().getApplicationAttemptId(),\n                container.getNodeId(), applicationSubmitter);\n          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n          nodeSet.add(container.getNodeId());\n        }\n      }\n      return nmToken;\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
      "extendedDetails": {}
    },
    "92317e3459b502f33a3575c247f05d64e5d39a00": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1839. Fixed handling of NMTokens in ResourceManager such that containers launched by AMs running on the same machine as the AM are correctly propagated. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 3:22 PM",
      "commitName": "92317e3459b502f33a3575c247f05d64e5d39a00",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/02/14 3:39 PM",
      "commitNameOld": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 25.95,
      "commitsBetweenForRepo": 241,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,22 @@\n   public NMToken createAndGetNMToken(String applicationSubmitter,\n       ApplicationAttemptId appAttemptId, Container container) {\n     try {\n       this.readLock.lock();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n       NMToken nmToken \u003d null;\n       if (nodeSet !\u003d null) {\n         if (!nodeSet.contains(container.getNodeId())) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Sending NMToken for nodeId : \"\n-                + container.getNodeId().toString()\n-                + \" for application attempt : \" + appAttemptId.toString());\n-          }\n+          LOG.info(\"Sending NMToken for nodeId : \" + container.getNodeId()\n+              + \" for container : \" + container.getId());\n           Token token \u003d\n               createNMToken(container.getId().getApplicationAttemptId(),\n                 container.getNodeId(), applicationSubmitter);\n           nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n-          // The node set here is used for differentiating whether the NMToken\n-          // has been issued for this node from the client\u0027s perspective. If\n-          // this is an AM container, the NMToken is issued only for RM and so\n-          // we should not update the node set.\n-          if (container.getId().getId() !\u003d 1) {\n-            nodeSet.add(container.getNodeId());\n-          }\n+          nodeSet.add(container.getNodeId());\n         }\n       }\n       return nmToken;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public NMToken createAndGetNMToken(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, Container container) {\n    try {\n      this.readLock.lock();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      NMToken nmToken \u003d null;\n      if (nodeSet !\u003d null) {\n        if (!nodeSet.contains(container.getNodeId())) {\n          LOG.info(\"Sending NMToken for nodeId : \" + container.getNodeId()\n              + \" for container : \" + container.getId());\n          Token token \u003d\n              createNMToken(container.getId().getApplicationAttemptId(),\n                container.getNodeId(), applicationSubmitter);\n          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n          nodeSet.add(container.getNodeId());\n        }\n      }\n      return nmToken;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
      "extendedDetails": {}
    },
    "5fd5c9900cfd299428acbc8dff767273e44647c0": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 3:39 PM",
      "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 3:39 PM",
          "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/06/13 4:19 PM",
          "commitNameOld": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 246.01,
          "commitsBetweenForRepo": 1546,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n-      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n+  public NMToken createAndGetNMToken(String applicationSubmitter,\n+      ApplicationAttemptId appAttemptId, Container container) {\n     try {\n       this.readLock.lock();\n-      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n+      NMToken nmToken \u003d null;\n       if (nodeSet !\u003d null) {\n-        for (Container container : containers) {\n-          if (!nodeSet.contains(container.getNodeId())) {\n+        if (!nodeSet.contains(container.getNodeId())) {\n+          if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Sending NMToken for nodeId : \"\n                 + container.getNodeId().toString()\n                 + \" for application attempt : \" + appAttemptId.toString());\n-            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n-                applicationSubmitter);\n-            NMToken nmToken \u003d\n-                NMToken.newInstance(container.getNodeId(), token);\n-            nmTokens.add(nmToken);\n-            // This will update the nmToken set.\n+          }\n+          Token token \u003d\n+              createNMToken(container.getId().getApplicationAttemptId(),\n+                container.getNodeId(), applicationSubmitter);\n+          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n+          // The node set here is used for differentiating whether the NMToken\n+          // has been issued for this node from the client\u0027s perspective. If\n+          // this is an AM container, the NMToken is issued only for RM and so\n+          // we should not update the node set.\n+          if (container.getId().getId() !\u003d 1) {\n             nodeSet.add(container.getNodeId());\n           }\n         }\n       }\n-      return nmTokens;\n+      return nmToken;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NMToken createAndGetNMToken(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, Container container) {\n    try {\n      this.readLock.lock();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      NMToken nmToken \u003d null;\n      if (nodeSet !\u003d null) {\n        if (!nodeSet.contains(container.getNodeId())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Sending NMToken for nodeId : \"\n                + container.getNodeId().toString()\n                + \" for application attempt : \" + appAttemptId.toString());\n          }\n          Token token \u003d\n              createNMToken(container.getId().getApplicationAttemptId(),\n                container.getNodeId(), applicationSubmitter);\n          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n          // The node set here is used for differentiating whether the NMToken\n          // has been issued for this node from the client\u0027s perspective. If\n          // this is an AM container, the NMToken is issued only for RM and so\n          // we should not update the node set.\n          if (container.getId().getId() !\u003d 1) {\n            nodeSet.add(container.getNodeId());\n          }\n        }\n      }\n      return nmToken;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
          "extendedDetails": {
            "oldValue": "createAndGetNMTokens",
            "newValue": "createAndGetNMToken"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 3:39 PM",
          "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/06/13 4:19 PM",
          "commitNameOld": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 246.01,
          "commitsBetweenForRepo": 1546,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n-      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n+  public NMToken createAndGetNMToken(String applicationSubmitter,\n+      ApplicationAttemptId appAttemptId, Container container) {\n     try {\n       this.readLock.lock();\n-      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n+      NMToken nmToken \u003d null;\n       if (nodeSet !\u003d null) {\n-        for (Container container : containers) {\n-          if (!nodeSet.contains(container.getNodeId())) {\n+        if (!nodeSet.contains(container.getNodeId())) {\n+          if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Sending NMToken for nodeId : \"\n                 + container.getNodeId().toString()\n                 + \" for application attempt : \" + appAttemptId.toString());\n-            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n-                applicationSubmitter);\n-            NMToken nmToken \u003d\n-                NMToken.newInstance(container.getNodeId(), token);\n-            nmTokens.add(nmToken);\n-            // This will update the nmToken set.\n+          }\n+          Token token \u003d\n+              createNMToken(container.getId().getApplicationAttemptId(),\n+                container.getNodeId(), applicationSubmitter);\n+          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n+          // The node set here is used for differentiating whether the NMToken\n+          // has been issued for this node from the client\u0027s perspective. If\n+          // this is an AM container, the NMToken is issued only for RM and so\n+          // we should not update the node set.\n+          if (container.getId().getId() !\u003d 1) {\n             nodeSet.add(container.getNodeId());\n           }\n         }\n       }\n-      return nmTokens;\n+      return nmToken;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NMToken createAndGetNMToken(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, Container container) {\n    try {\n      this.readLock.lock();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      NMToken nmToken \u003d null;\n      if (nodeSet !\u003d null) {\n        if (!nodeSet.contains(container.getNodeId())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Sending NMToken for nodeId : \"\n                + container.getNodeId().toString()\n                + \" for application attempt : \" + appAttemptId.toString());\n          }\n          Token token \u003d\n              createNMToken(container.getId().getApplicationAttemptId(),\n                container.getNodeId(), applicationSubmitter);\n          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n          // The node set here is used for differentiating whether the NMToken\n          // has been issued for this node from the client\u0027s perspective. If\n          // this is an AM container, the NMToken is issued only for RM and so\n          // we should not update the node set.\n          if (container.getId().getId() !\u003d 1) {\n            nodeSet.add(container.getNodeId());\n          }\n        }\n      }\n      return nmToken;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
          "extendedDetails": {
            "oldValue": "[applicationSubmitter-String, appAttemptId-ApplicationAttemptId, containers-List\u003cContainer\u003e]",
            "newValue": "[applicationSubmitter-String, appAttemptId-ApplicationAttemptId, container-Container]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 3:39 PM",
          "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/06/13 4:19 PM",
          "commitNameOld": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 246.01,
          "commitsBetweenForRepo": 1546,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n-      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n+  public NMToken createAndGetNMToken(String applicationSubmitter,\n+      ApplicationAttemptId appAttemptId, Container container) {\n     try {\n       this.readLock.lock();\n-      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n+      NMToken nmToken \u003d null;\n       if (nodeSet !\u003d null) {\n-        for (Container container : containers) {\n-          if (!nodeSet.contains(container.getNodeId())) {\n+        if (!nodeSet.contains(container.getNodeId())) {\n+          if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Sending NMToken for nodeId : \"\n                 + container.getNodeId().toString()\n                 + \" for application attempt : \" + appAttemptId.toString());\n-            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n-                applicationSubmitter);\n-            NMToken nmToken \u003d\n-                NMToken.newInstance(container.getNodeId(), token);\n-            nmTokens.add(nmToken);\n-            // This will update the nmToken set.\n+          }\n+          Token token \u003d\n+              createNMToken(container.getId().getApplicationAttemptId(),\n+                container.getNodeId(), applicationSubmitter);\n+          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n+          // The node set here is used for differentiating whether the NMToken\n+          // has been issued for this node from the client\u0027s perspective. If\n+          // this is an AM container, the NMToken is issued only for RM and so\n+          // we should not update the node set.\n+          if (container.getId().getId() !\u003d 1) {\n             nodeSet.add(container.getNodeId());\n           }\n         }\n       }\n-      return nmTokens;\n+      return nmToken;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NMToken createAndGetNMToken(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, Container container) {\n    try {\n      this.readLock.lock();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      NMToken nmToken \u003d null;\n      if (nodeSet !\u003d null) {\n        if (!nodeSet.contains(container.getNodeId())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Sending NMToken for nodeId : \"\n                + container.getNodeId().toString()\n                + \" for application attempt : \" + appAttemptId.toString());\n          }\n          Token token \u003d\n              createNMToken(container.getId().getApplicationAttemptId(),\n                container.getNodeId(), applicationSubmitter);\n          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n          // The node set here is used for differentiating whether the NMToken\n          // has been issued for this node from the client\u0027s perspective. If\n          // this is an AM container, the NMToken is issued only for RM and so\n          // we should not update the node set.\n          if (container.getId().getId() !\u003d 1) {\n            nodeSet.add(container.getNodeId());\n          }\n        }\n      }\n      return nmToken;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
          "extendedDetails": {
            "oldValue": "List\u003cNMToken\u003e",
            "newValue": "NMToken"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "19/02/14 3:39 PM",
          "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/06/13 4:19 PM",
          "commitNameOld": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 246.01,
          "commitsBetweenForRepo": 1546,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,31 @@\n-  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n-      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n+  public NMToken createAndGetNMToken(String applicationSubmitter,\n+      ApplicationAttemptId appAttemptId, Container container) {\n     try {\n       this.readLock.lock();\n-      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n+      NMToken nmToken \u003d null;\n       if (nodeSet !\u003d null) {\n-        for (Container container : containers) {\n-          if (!nodeSet.contains(container.getNodeId())) {\n+        if (!nodeSet.contains(container.getNodeId())) {\n+          if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Sending NMToken for nodeId : \"\n                 + container.getNodeId().toString()\n                 + \" for application attempt : \" + appAttemptId.toString());\n-            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n-                applicationSubmitter);\n-            NMToken nmToken \u003d\n-                NMToken.newInstance(container.getNodeId(), token);\n-            nmTokens.add(nmToken);\n-            // This will update the nmToken set.\n+          }\n+          Token token \u003d\n+              createNMToken(container.getId().getApplicationAttemptId(),\n+                container.getNodeId(), applicationSubmitter);\n+          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n+          // The node set here is used for differentiating whether the NMToken\n+          // has been issued for this node from the client\u0027s perspective. If\n+          // this is an AM container, the NMToken is issued only for RM and so\n+          // we should not update the node set.\n+          if (container.getId().getId() !\u003d 1) {\n             nodeSet.add(container.getNodeId());\n           }\n         }\n       }\n-      return nmTokens;\n+      return nmToken;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public NMToken createAndGetNMToken(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, Container container) {\n    try {\n      this.readLock.lock();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      NMToken nmToken \u003d null;\n      if (nodeSet !\u003d null) {\n        if (!nodeSet.contains(container.getNodeId())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Sending NMToken for nodeId : \"\n                + container.getNodeId().toString()\n                + \" for application attempt : \" + appAttemptId.toString());\n          }\n          Token token \u003d\n              createNMToken(container.getId().getApplicationAttemptId(),\n                container.getNodeId(), applicationSubmitter);\n          nmToken \u003d NMToken.newInstance(container.getNodeId(), token);\n          // The node set here is used for differentiating whether the NMToken\n          // has been issued for this node from the client\u0027s perspective. If\n          // this is an AM container, the NMToken is issued only for RM and so\n          // we should not update the node set.\n          if (container.getId().getId() !\u003d 1) {\n            nodeSet.add(container.getNodeId());\n          }\n        }\n      }\n      return nmToken;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
          "extendedDetails": {}
        }
      ]
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/06/13 8:11 PM",
          "commitNameOld": "769a0bd8314cd7317c083a9b74abf47242acb58c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 2.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  public List\u003cNMToken\u003e getNMTokens(String applicationSubmitter,\n+  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n       ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n     try {\n       this.readLock.lock();\n       List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n       if (nodeSet !\u003d null) {\n         for (Container container : containers) {\n           if (!nodeSet.contains(container.getNodeId())) {\n             LOG.debug(\"Sending NMToken for nodeId : \"\n-                + container.getNodeId().toString());\n+                + container.getNodeId().toString()\n+                + \" for application attempt : \" + appAttemptId.toString());\n             Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n                 applicationSubmitter);\n             NMToken nmToken \u003d\n                 NMToken.newInstance(container.getNodeId(), token);\n             nmTokens.add(nmToken);\n+            // This will update the nmToken set.\n             nodeSet.add(container.getNodeId());\n           }\n         }\n       }\n       return nmTokens;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n    try {\n      this.readLock.lock();\n      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      if (nodeSet !\u003d null) {\n        for (Container container : containers) {\n          if (!nodeSet.contains(container.getNodeId())) {\n            LOG.debug(\"Sending NMToken for nodeId : \"\n                + container.getNodeId().toString()\n                + \" for application attempt : \" + appAttemptId.toString());\n            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n                applicationSubmitter);\n            NMToken nmToken \u003d\n                NMToken.newInstance(container.getNodeId(), token);\n            nmTokens.add(nmToken);\n            // This will update the nmToken set.\n            nodeSet.add(container.getNodeId());\n          }\n        }\n      }\n      return nmTokens;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
          "extendedDetails": {
            "oldValue": "getNMTokens",
            "newValue": "createAndGetNMTokens"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/06/13 4:19 PM",
          "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/06/13 8:11 PM",
          "commitNameOld": "769a0bd8314cd7317c083a9b74abf47242acb58c",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 2.84,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,27 @@\n-  public List\u003cNMToken\u003e getNMTokens(String applicationSubmitter,\n+  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n       ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n     try {\n       this.readLock.lock();\n       List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n       HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n       if (nodeSet !\u003d null) {\n         for (Container container : containers) {\n           if (!nodeSet.contains(container.getNodeId())) {\n             LOG.debug(\"Sending NMToken for nodeId : \"\n-                + container.getNodeId().toString());\n+                + container.getNodeId().toString()\n+                + \" for application attempt : \" + appAttemptId.toString());\n             Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n                 applicationSubmitter);\n             NMToken nmToken \u003d\n                 NMToken.newInstance(container.getNodeId(), token);\n             nmTokens.add(nmToken);\n+            // This will update the nmToken set.\n             nodeSet.add(container.getNodeId());\n           }\n         }\n       }\n       return nmTokens;\n     } finally {\n       this.readLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public List\u003cNMToken\u003e createAndGetNMTokens(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n    try {\n      this.readLock.lock();\n      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      if (nodeSet !\u003d null) {\n        for (Container container : containers) {\n          if (!nodeSet.contains(container.getNodeId())) {\n            LOG.debug(\"Sending NMToken for nodeId : \"\n                + container.getNodeId().toString()\n                + \" for application attempt : \" + appAttemptId.toString());\n            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n                applicationSubmitter);\n            NMToken nmToken \u003d\n                NMToken.newInstance(container.getNodeId(), token);\n            nmTokens.add(nmToken);\n            // This will update the nmToken set.\n            nodeSet.add(container.getNodeId());\n          }\n        }\n      }\n      return nmTokens;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java",
          "extendedDetails": {}
        }
      ]
    },
    "769a0bd8314cd7317c083a9b74abf47242acb58c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-693. Modified RM to send NMTokens on allocate call so that AMs can then use them for authentication with NMs. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/13 8:11 PM",
      "commitName": "769a0bd8314cd7317c083a9b74abf47242acb58c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  public List\u003cNMToken\u003e getNMTokens(String applicationSubmitter,\n+      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n+    try {\n+      this.readLock.lock();\n+      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n+      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n+      if (nodeSet !\u003d null) {\n+        for (Container container : containers) {\n+          if (!nodeSet.contains(container.getNodeId())) {\n+            LOG.debug(\"Sending NMToken for nodeId : \"\n+                + container.getNodeId().toString());\n+            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n+                applicationSubmitter);\n+            NMToken nmToken \u003d\n+                NMToken.newInstance(container.getNodeId(), token);\n+            nmTokens.add(nmToken);\n+            nodeSet.add(container.getNodeId());\n+          }\n+        }\n+      }\n+      return nmTokens;\n+    } finally {\n+      this.readLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cNMToken\u003e getNMTokens(String applicationSubmitter,\n      ApplicationAttemptId appAttemptId, List\u003cContainer\u003e containers) {\n    try {\n      this.readLock.lock();\n      List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n      HashSet\u003cNodeId\u003e nodeSet \u003d this.appAttemptToNodeKeyMap.get(appAttemptId);\n      if (nodeSet !\u003d null) {\n        for (Container container : containers) {\n          if (!nodeSet.contains(container.getNodeId())) {\n            LOG.debug(\"Sending NMToken for nodeId : \"\n                + container.getNodeId().toString());\n            Token token \u003d createNMToken(appAttemptId, container.getNodeId(),\n                applicationSubmitter);\n            NMToken nmToken \u003d\n                NMToken.newInstance(container.getNodeId(), token);\n            nmTokens.add(nmToken);\n            nodeSet.add(container.getNodeId());\n          }\n        }\n      }\n      return nmTokens;\n    } finally {\n      this.readLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/security/NMTokenSecretManagerInRM.java"
    }
  }
}