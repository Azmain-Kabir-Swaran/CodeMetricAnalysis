{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMProxy.java",
  "functionName": "createRetryPolicy",
  "functionId": "createRetryPolicy___conf-Configuration__isHAEnabled-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
  "functionStartLine": 202,
  "functionEndLine": 216,
  "numCommitsSeen": 29,
  "timeTaken": 3636,
  "changeHistory": [
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
    "c41699965e78ce5e87669d17923ab84e494c4188",
    "b00392dd9cbb6778f2f3e669e96cf7133590dfe7",
    "0305316d6932e6f1a05021354d77b6934e57e171",
    "5c9a51f140ba76ddb25580aeb288db25e3f9653f",
    "0708827a935d190d439854e08bb5a655d7daa606",
    "624703ed7b6d80855d3e0567bee5c1b7659bc635",
    "ca125153b319a8f5d75585d25cb0f37ae717be01",
    "472d8bc9839b9cbe262e41743f40b0cb4912f5f2",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19"
  ],
  "changeHistoryShort": {
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": "Ymultichange(Yparameterchange,Ybodychange)",
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d": "Ybodychange",
    "c41699965e78ce5e87669d17923ab84e494c4188": "Ybodychange",
    "b00392dd9cbb6778f2f3e669e96cf7133590dfe7": "Ybodychange",
    "0305316d6932e6f1a05021354d77b6934e57e171": "Ybodychange",
    "5c9a51f140ba76ddb25580aeb288db25e3f9653f": "Ybodychange",
    "0708827a935d190d439854e08bb5a655d7daa606": "Ybodychange",
    "624703ed7b6d80855d3e0567bee5c1b7659bc635": "Ybodychange",
    "ca125153b319a8f5d75585d25cb0f37ae717be01": "Ybodychange",
    "472d8bc9839b9cbe262e41743f40b0cb4912f5f2": "Ybodychange",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": "Yintroduced"
  },
  "changeHistoryDetails": {
    "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
      "commitDate": "22/01/16 6:20 PM",
      "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "24/11/15 2:35 PM",
          "commitNameOld": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 59.16,
          "commitsBetweenForRepo": 346,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public static RetryPolicy createRetryPolicy(Configuration conf) {\n+  public static RetryPolicy createRetryPolicy(Configuration conf,\n+      boolean isHAEnabled) {\n     long rmConnectWaitMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n-    return createRetryPolicy(\n-        conf, rmConnectWaitMS, rmConnectionRetryIntervalMS);\n+\n+    return createRetryPolicy(conf, rmConnectWaitMS, rmConnectionRetryIntervalMS,\n+        isHAEnabled);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf,\n      boolean isHAEnabled) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    return createRetryPolicy(conf, rmConnectWaitMS, rmConnectionRetryIntervalMS,\n        isHAEnabled);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[conf-Configuration, isHAEnabled-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4496. Improve HA ResourceManager Failover detection on the client.\nContributed by Jian He\n",
          "commitDate": "22/01/16 6:20 PM",
          "commitName": "618bfd6ac2a5b62d39e9bed80f75362bafc0ef28",
          "commitAuthor": "Xuan",
          "commitDateOld": "24/11/15 2:35 PM",
          "commitNameOld": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 59.16,
          "commitsBetweenForRepo": 346,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public static RetryPolicy createRetryPolicy(Configuration conf) {\n+  public static RetryPolicy createRetryPolicy(Configuration conf,\n+      boolean isHAEnabled) {\n     long rmConnectWaitMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n-    return createRetryPolicy(\n-        conf, rmConnectWaitMS, rmConnectionRetryIntervalMS);\n+\n+    return createRetryPolicy(conf, rmConnectWaitMS, rmConnectionRetryIntervalMS,\n+        isHAEnabled);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf,\n      boolean isHAEnabled) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    return createRetryPolicy(conf, rmConnectWaitMS, rmConnectionRetryIntervalMS,\n        isHAEnabled);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
          "extendedDetails": {}
        }
      ]
    },
    "4ac6799d4a8b071e0d367c2d709e84d8ea06942d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4132. Separate configs for nodemanager to resourcemanager connection timeout and retries. Contributed by Chang Li\n",
      "commitDate": "24/11/15 2:35 PM",
      "commitName": "4ac6799d4a8b071e0d367c2d709e84d8ea06942d",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "29/10/15 12:00 AM",
      "commitNameOld": "c41699965e78ce5e87669d17923ab84e494c4188",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 26.65,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,87 +1,13 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n-\n-    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n-    if (!waitForEver) {\n-      if (rmConnectWaitMS \u003c 0) {\n-        throw new YarnRuntimeException(\"Invalid Configuration. \"\n-            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n-            + \" can be -1, but can not be other negative numbers\");\n-      }\n-\n-      // try connect once\n-      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n-        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n-            + \" is smaller than \"\n-            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n-            + \". Only try connect once.\");\n-        rmConnectWaitMS \u003d 0;\n-      }\n-    }\n-\n-    // Handle HA case first\n-    if (HAUtil.isHAEnabled(conf)) {\n-      final long failoverSleepBaseMs \u003d conf.getLong(\n-          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n-          rmConnectionRetryIntervalMS);\n-\n-      final long failoverSleepMaxMs \u003d conf.getLong(\n-          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n-          rmConnectionRetryIntervalMS);\n-\n-      int maxFailoverAttempts \u003d conf.getInt(\n-          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n-\n-      if (maxFailoverAttempts \u003d\u003d -1) {\n-        if (waitForEver) {\n-          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n-        } else {\n-          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n-        }\n-      }\n-\n-      return RetryPolicies.failoverOnNetworkException(\n-          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n-          failoverSleepBaseMs, failoverSleepMaxMs);\n-    }\n-\n-    if (rmConnectionRetryIntervalMS \u003c 0) {\n-      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n-          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n-          \" should not be negative.\");\n-    }\n-\n-    RetryPolicy retryPolicy \u003d null;\n-    if (waitForEver) {\n-      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n-          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n-    } else {\n-      retryPolicy \u003d\n-          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n-              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n-    }\n-\n-    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n-        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n-\n-    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n-    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n-    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n-    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n-    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n-    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n-    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n-    // YARN-4288: local IOException is also possible.\n-    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n-    // Not retry on remote IO exception.\n-    return RetryPolicies.retryOtherThanRemoteException(\n-        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n+    return createRetryPolicy(\n+        conf, rmConnectWaitMS, rmConnectionRetryIntervalMS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n    return createRetryPolicy(\n        conf, rmConnectWaitMS, rmConnectionRetryIntervalMS);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "c41699965e78ce5e87669d17923ab84e494c4188": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4288. Fixed RMProxy to retry on IOException from local host. Contributed by Junping Du\n",
      "commitDate": "29/10/15 12:00 AM",
      "commitName": "c41699965e78ce5e87669d17923ab84e494c4188",
      "commitAuthor": "Jian He",
      "commitDateOld": "21/09/15 11:04 AM",
      "commitNameOld": "b00392dd9cbb6778f2f3e669e96cf7133590dfe7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 37.54,
      "commitsBetweenForRepo": 325,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,87 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n     if (HAUtil.isHAEnabled(conf)) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d null;\n     if (waitForEver) {\n       retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n           rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     } else {\n       retryPolicy \u003d\n           RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n               rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     }\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n \n     exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n     exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n-\n-    return RetryPolicies.retryByException(\n+    // YARN-4288: local IOException is also possible.\n+    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n+    // Not retry on remote IO exception.\n+    return RetryPolicies.retryOtherThanRemoteException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d null;\n    if (waitForEver) {\n      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    } else {\n      retryPolicy \u003d\n          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    }\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n    // YARN-4288: local IOException is also possible.\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n    // Not retry on remote IO exception.\n    return RetryPolicies.retryOtherThanRemoteException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "b00392dd9cbb6778f2f3e669e96cf7133590dfe7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4113. RM should respect retry-interval when uses RetryPolicies.RETRY_FOREVER. (Sunil G via wangda)\n",
      "commitDate": "21/09/15 11:04 AM",
      "commitName": "b00392dd9cbb6778f2f3e669e96cf7133590dfe7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "21/05/15 7:44 AM",
      "commitNameOld": "0305316d6932e6f1a05021354d77b6934e57e171",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 123.14,
      "commitsBetweenForRepo": 752,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,85 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n     if (HAUtil.isHAEnabled(conf)) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d null;\n     if (waitForEver) {\n-      retryPolicy \u003d RetryPolicies.RETRY_FOREVER;\n+      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n+          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     } else {\n       retryPolicy \u003d\n           RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n               rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n     }\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n \n     exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n     exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n \n     return RetryPolicies.retryByException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d null;\n    if (waitForEver) {\n      retryPolicy \u003d RetryPolicies.retryForeverWithFixedSleep(\n          rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    } else {\n      retryPolicy \u003d\n          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    }\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n\n    return RetryPolicies.retryByException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "0305316d6932e6f1a05021354d77b6934e57e171": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3646. Applications are getting stuck some times in case of retry\npolicy forever. Contributed by Raju Bairishetti.\n",
      "commitDate": "21/05/15 7:44 AM",
      "commitName": "0305316d6932e6f1a05021354d77b6934e57e171",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "10/11/14 6:25 PM",
      "commitNameOld": "5c9a51f140ba76ddb25580aeb288db25e3f9653f",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 191.51,
      "commitsBetweenForRepo": 1605,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,84 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n     if (HAUtil.isHAEnabled(conf)) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n-    if (waitForEver) {\n-      return RetryPolicies.RETRY_FOREVER;\n-    }\n-\n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n-    RetryPolicy retryPolicy \u003d\n-        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n-            rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n+    RetryPolicy retryPolicy \u003d null;\n+    if (waitForEver) {\n+      retryPolicy \u003d RetryPolicies.RETRY_FOREVER;\n+    } else {\n+      retryPolicy \u003d\n+          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n+              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n+    }\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n \n     exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n     exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n \n     return RetryPolicies.retryByException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d null;\n    if (waitForEver) {\n      retryPolicy \u003d RetryPolicies.RETRY_FOREVER;\n    } else {\n      retryPolicy \u003d\n          RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n              rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n    }\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n\n    return RetryPolicies.retryByException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "5c9a51f140ba76ddb25580aeb288db25e3f9653f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2841. RMProxy should retry EOFException.  Contributed by Jian He\n",
      "commitDate": "10/11/14 6:25 PM",
      "commitName": "5c9a51f140ba76ddb25580aeb288db25e3f9653f",
      "commitAuthor": "Xuan",
      "commitDateOld": "01/10/14 4:50 PM",
      "commitNameOld": "0708827a935d190d439854e08bb5a655d7daa606",
      "commitAuthorOld": "junping_du",
      "daysBetweenCommits": 40.11,
      "commitsBetweenForRepo": 377,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,83 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n     if (HAUtil.isHAEnabled(conf)) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (waitForEver) {\n       return RetryPolicies.RETRY_FOREVER;\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d\n         RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n             rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n \n+    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n     exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n     exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n     exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n \n     return RetryPolicies.retryByException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (waitForEver) {\n      return RetryPolicies.RETRY_FOREVER;\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d\n        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n            rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(EOFException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n\n    return RetryPolicies.retryByException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "0708827a935d190d439854e08bb5a655d7daa606": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2613. Support retry in NMClient for rolling-upgrades. (Contributed by Jian He)\n",
      "commitDate": "01/10/14 4:50 PM",
      "commitName": "0708827a935d190d439854e08bb5a655d7daa606",
      "commitAuthor": "junping_du",
      "commitDateOld": "06/01/14 10:40 AM",
      "commitNameOld": "2cddd21db9ce2e896e11225af3ae50d547884ca4",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 268.22,
      "commitsBetweenForRepo": 2168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,77 +1,82 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n-        conf.getInt(\n+        conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n     if (HAUtil.isHAEnabled(conf)) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n           maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n           maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n       }\n \n       return RetryPolicies.failoverOnNetworkException(\n           RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n           failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (waitForEver) {\n       return RetryPolicies.RETRY_FOREVER;\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d\n         RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n             rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n-    //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n-    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n+    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n+    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n+    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n+    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n+    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n+\n     return RetryPolicies.retryByException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (waitForEver) {\n      return RetryPolicies.RETRY_FOREVER;\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d\n        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n            rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    exceptionToPolicyMap.put(NoRouteToHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(UnknownHostException.class, retryPolicy);\n    exceptionToPolicyMap.put(ConnectTimeoutException.class, retryPolicy);\n    exceptionToPolicyMap.put(RetriableException.class, retryPolicy);\n    exceptionToPolicyMap.put(SocketException.class, retryPolicy);\n\n    return RetryPolicies.retryByException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "624703ed7b6d80855d3e0567bee5c1b7659bc635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1028. Addendum patch. Added FailoverProxyProvider capability to ResourceManager to help with RM failover.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1552920 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/12/13 8:29 AM",
      "commitName": "624703ed7b6d80855d3e0567bee5c1b7659bc635",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "17/12/13 2:32 PM",
      "commitNameOld": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.75,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,77 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n                 .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n     if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     // Handle HA case first\n     if (HAUtil.isHAEnabled(conf)) {\n       final long failoverSleepBaseMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n           rmConnectionRetryIntervalMS);\n \n       final long failoverSleepMaxMs \u003d conf.getLong(\n           YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n           rmConnectionRetryIntervalMS);\n \n       int maxFailoverAttempts \u003d conf.getInt(\n           YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n \n-      RetryPolicy basePolicy \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n       if (maxFailoverAttempts \u003d\u003d -1) {\n         if (waitForEver) {\n-          basePolicy \u003d RetryPolicies.FAILOVER_FOREVER;\n+          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n         } else {\n-          basePolicy \u003d new FailoverUptoMaximumTimePolicy(\n-              System.currentTimeMillis() + rmConnectWaitMS);\n+          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n         }\n-        maxFailoverAttempts \u003d 0;\n       }\n \n-      return RetryPolicies.failoverOnNetworkException(basePolicy,\n-          maxFailoverAttempts, failoverSleepBaseMs, failoverSleepMaxMs);\n+      return RetryPolicies.failoverOnNetworkException(\n+          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n+          failoverSleepBaseMs, failoverSleepMaxMs);\n     }\n \n     if (waitForEver) {\n       return RetryPolicies.RETRY_FOREVER;\n     }\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n           YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n     RetryPolicy retryPolicy \u003d\n         RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n             rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n     exceptionToPolicyMap.put(IOException.class, retryPolicy);\n     return RetryPolicies.retryByException(\n         RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          maxFailoverAttempts \u003d Integer.MAX_VALUE;\n        } else {\n          maxFailoverAttempts \u003d (int) (rmConnectWaitMS / failoverSleepBaseMs);\n        }\n      }\n\n      return RetryPolicies.failoverOnNetworkException(\n          RetryPolicies.TRY_ONCE_THEN_FAIL, maxFailoverAttempts,\n          failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (waitForEver) {\n      return RetryPolicies.RETRY_FOREVER;\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d\n        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n            rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n    return RetryPolicies.retryByException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "ca125153b319a8f5d75585d25cb0f37ae717be01": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1028. Added FailoverProxyProvider capability to ResourceManager to help with RM failover. Contributed by Karthik Kambatla.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551739 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/12/13 2:32 PM",
      "commitName": "ca125153b319a8f5d75585d25cb0f37ae717be01",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/08/13 7:35 PM",
      "commitNameOld": "472d8bc9839b9cbe262e41743f40b0cb4912f5f2",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 124.83,
      "commitsBetweenForRepo": 816,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,79 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getInt(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n             YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n             YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n-            .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n-\n-    if (rmConnectionRetryIntervalMS \u003c 0) {\n-      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n-          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n-          \" should not be negative.\");\n-    }\n+                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n-\n-    if (waitForEver) {\n-      return  RetryPolicies.RETRY_FOREVER;\n-    } else {\n+    if (!waitForEver) {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n         LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n             + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n+    // Handle HA case first\n+    if (HAUtil.isHAEnabled(conf)) {\n+      final long failoverSleepBaseMs \u003d conf.getLong(\n+          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n+          rmConnectionRetryIntervalMS);\n+\n+      final long failoverSleepMaxMs \u003d conf.getLong(\n+          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n+          rmConnectionRetryIntervalMS);\n+\n+      int maxFailoverAttempts \u003d conf.getInt(\n+          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n+\n+      RetryPolicy basePolicy \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n+      if (maxFailoverAttempts \u003d\u003d -1) {\n+        if (waitForEver) {\n+          basePolicy \u003d RetryPolicies.FAILOVER_FOREVER;\n+        } else {\n+          basePolicy \u003d new FailoverUptoMaximumTimePolicy(\n+              System.currentTimeMillis() + rmConnectWaitMS);\n+        }\n+        maxFailoverAttempts \u003d 0;\n+      }\n+\n+      return RetryPolicies.failoverOnNetworkException(basePolicy,\n+          maxFailoverAttempts, failoverSleepBaseMs, failoverSleepMaxMs);\n+    }\n+\n+    if (waitForEver) {\n+      return RetryPolicies.RETRY_FOREVER;\n+    }\n+\n+    if (rmConnectionRetryIntervalMS \u003c 0) {\n+      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n+          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n+          \" should not be negative.\");\n+    }\n+\n     RetryPolicy retryPolicy \u003d\n         RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n-            rmConnectionRetryIntervalMS,\n-            TimeUnit.MILLISECONDS);\n+            rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n     exceptionToPolicyMap.put(IOException.class, retryPolicy);\n-\n-    return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n-      exceptionToPolicyMap);\n+    return RetryPolicies.retryByException(\n+        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n                .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n    if (!waitForEver) {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    // Handle HA case first\n    if (HAUtil.isHAEnabled(conf)) {\n      final long failoverSleepBaseMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_BASE_MS,\n          rmConnectionRetryIntervalMS);\n\n      final long failoverSleepMaxMs \u003d conf.getLong(\n          YarnConfiguration.CLIENT_FAILOVER_SLEEPTIME_MAX_MS,\n          rmConnectionRetryIntervalMS);\n\n      int maxFailoverAttempts \u003d conf.getInt(\n          YarnConfiguration.CLIENT_FAILOVER_MAX_ATTEMPTS, -1);\n\n      RetryPolicy basePolicy \u003d RetryPolicies.TRY_ONCE_THEN_FAIL;\n      if (maxFailoverAttempts \u003d\u003d -1) {\n        if (waitForEver) {\n          basePolicy \u003d RetryPolicies.FAILOVER_FOREVER;\n        } else {\n          basePolicy \u003d new FailoverUptoMaximumTimePolicy(\n              System.currentTimeMillis() + rmConnectWaitMS);\n        }\n        maxFailoverAttempts \u003d 0;\n      }\n\n      return RetryPolicies.failoverOnNetworkException(basePolicy,\n          maxFailoverAttempts, failoverSleepBaseMs, failoverSleepMaxMs);\n    }\n\n    if (waitForEver) {\n      return RetryPolicies.RETRY_FOREVER;\n    }\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    RetryPolicy retryPolicy \u003d\n        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n            rmConnectionRetryIntervalMS, TimeUnit.MILLISECONDS);\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n    return RetryPolicies.retryByException(\n        RetryPolicies.TRY_ONCE_THEN_FAIL, exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "472d8bc9839b9cbe262e41743f40b0cb4912f5f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1056. Remove dual use of string \u0027resourcemanager\u0027 in yarn.resourcemanager.connect.{max.wait.secs|retry_interval.secs}. Contributed by Karthik Kambatla.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514135 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/13 7:35 PM",
      "commitName": "472d8bc9839b9cbe262e41743f40b0cb4912f5f2",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "29/07/13 4:17 PM",
      "commitNameOld": "817a6543465a3228cdb28a2eeb8e4f96a2d0f9e6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.14,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,52 @@\n   public static RetryPolicy createRetryPolicy(Configuration conf) {\n     long rmConnectWaitMS \u003d\n         conf.getInt(\n-            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS,\n-            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS)\n-        * 1000;\n+            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n+            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n     long rmConnectionRetryIntervalMS \u003d\n         conf.getLong(\n-            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n+            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n             YarnConfiguration\n-            .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n-        * 1000;\n+            .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n \n     if (rmConnectionRetryIntervalMS \u003c 0) {\n       throw new YarnRuntimeException(\"Invalid Configuration. \" +\n-          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n+          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n           \" should not be negative.\");\n     }\n \n-    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n+    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n \n     if (waitForEver) {\n       return  RetryPolicies.RETRY_FOREVER;\n     } else {\n       if (rmConnectWaitMS \u003c 0) {\n         throw new YarnRuntimeException(\"Invalid Configuration. \"\n-            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS\n+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" can be -1, but can not be other negative numbers\");\n       }\n \n       // try connect once\n       if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n-        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS\n+        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n             + \" is smaller than \"\n-            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n             + \". Only try connect once.\");\n         rmConnectWaitMS \u003d 0;\n       }\n     }\n \n     RetryPolicy retryPolicy \u003d\n         RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n             rmConnectionRetryIntervalMS,\n             TimeUnit.MILLISECONDS);\n \n     Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n         new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n     exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n     //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n     exceptionToPolicyMap.put(IOException.class, retryPolicy);\n \n     return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n       exceptionToPolicyMap);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_MS);\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS,\n            YarnConfiguration\n            .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS);\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS +\n          \" should not be negative.\");\n    }\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1);\n\n    if (waitForEver) {\n      return  RetryPolicies.RETRY_FOREVER;\n    } else {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_MS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_MS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    RetryPolicy retryPolicy \u003d\n        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n            rmConnectionRetryIntervalMS,\n            TimeUnit.MILLISECONDS);\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n\n    return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n      exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java",
      "extendedDetails": {}
    },
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": {
      "type": "Yintroduced",
      "commitMessage": "YARN-513. Create common proxy client for communicating with RM (Xuan Gong \u0026 Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:47 PM",
      "commitName": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,54 @@\n+  public static RetryPolicy createRetryPolicy(Configuration conf) {\n+    long rmConnectWaitMS \u003d\n+        conf.getInt(\n+            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS,\n+            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS)\n+        * 1000;\n+    long rmConnectionRetryIntervalMS \u003d\n+        conf.getLong(\n+            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n+            YarnConfiguration\n+            .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n+        * 1000;\n+\n+    if (rmConnectionRetryIntervalMS \u003c 0) {\n+      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n+          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n+          \" should not be negative.\");\n+    }\n+\n+    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n+\n+    if (waitForEver) {\n+      return  RetryPolicies.RETRY_FOREVER;\n+    } else {\n+      if (rmConnectWaitMS \u003c 0) {\n+        throw new YarnRuntimeException(\"Invalid Configuration. \"\n+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS\n+            + \" can be -1, but can not be other negative numbers\");\n+      }\n+\n+      // try connect once\n+      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n+        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS\n+            + \" is smaller than \"\n+            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n+            + \". Only try connect once.\");\n+        rmConnectWaitMS \u003d 0;\n+      }\n+    }\n+\n+    RetryPolicy retryPolicy \u003d\n+        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n+            rmConnectionRetryIntervalMS,\n+            TimeUnit.MILLISECONDS);\n+\n+    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n+        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n+    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n+    //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n+    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n+\n+    return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n+      exceptionToPolicyMap);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static RetryPolicy createRetryPolicy(Configuration conf) {\n    long rmConnectWaitMS \u003d\n        conf.getInt(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS,\n            YarnConfiguration.DEFAULT_RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS)\n        * 1000;\n    long rmConnectionRetryIntervalMS \u003d\n        conf.getLong(\n            YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS,\n            YarnConfiguration\n            .DEFAULT_RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS)\n        * 1000;\n\n    if (rmConnectionRetryIntervalMS \u003c 0) {\n      throw new YarnRuntimeException(\"Invalid Configuration. \" +\n          YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS +\n          \" should not be negative.\");\n    }\n\n    boolean waitForEver \u003d (rmConnectWaitMS \u003d\u003d -1000);\n\n    if (waitForEver) {\n      return  RetryPolicies.RETRY_FOREVER;\n    } else {\n      if (rmConnectWaitMS \u003c 0) {\n        throw new YarnRuntimeException(\"Invalid Configuration. \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS\n            + \" can be -1, but can not be other negative numbers\");\n      }\n\n      // try connect once\n      if (rmConnectWaitMS \u003c rmConnectionRetryIntervalMS) {\n        LOG.warn(YarnConfiguration.RESOURCEMANAGER_CONNECT_MAX_WAIT_SECS\n            + \" is smaller than \"\n            + YarnConfiguration.RESOURCEMANAGER_CONNECT_RETRY_INTERVAL_SECS\n            + \". Only try connect once.\");\n        rmConnectWaitMS \u003d 0;\n      }\n    }\n\n    RetryPolicy retryPolicy \u003d\n        RetryPolicies.retryUpToMaximumTimeWithFixedSleep(rmConnectWaitMS,\n            rmConnectionRetryIntervalMS,\n            TimeUnit.MILLISECONDS);\n\n    Map\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e exceptionToPolicyMap \u003d\n        new HashMap\u003cClass\u003c? extends Exception\u003e, RetryPolicy\u003e();\n    exceptionToPolicyMap.put(ConnectException.class, retryPolicy);\n    //TO DO: after HADOOP-9576,  IOException can be changed to EOFException\n    exceptionToPolicyMap.put(IOException.class, retryPolicy);\n\n    return RetryPolicies.retryByException(RetryPolicies.TRY_ONCE_THEN_FAIL,\n      exceptionToPolicyMap);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/RMProxy.java"
    }
  }
}