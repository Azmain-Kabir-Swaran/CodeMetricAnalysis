{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FlowRunEntityReader.java",
  "functionName": "parseEntity",
  "functionId": "parseEntity___result-Result",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
  "functionStartLine": 262,
  "functionEndLine": 302,
  "numCommitsSeen": 20,
  "timeTaken": 4837,
  "changeHistory": [
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
    "892b193bd77c15932b4c084c1d525b7017def0d4",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
    "8ef546c1ee9fce0b171813547253374d268566ba",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
    "d014f2ffd24c1aaebda7503ce0e5a81334a5f266",
    "708fa8b1ae85b6efda318368bc0c0ba02d4958c8",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9"
  ],
  "changeHistoryShort": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Ymultichange(Yfilerename,Ybodychange)",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": "Ybodychange",
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": "Yfilerename",
    "892b193bd77c15932b4c084c1d525b7017def0d4": "Ybodychange",
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": "Ybodychange",
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": "Ybodychange",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": "Yfilerename",
    "8ef546c1ee9fce0b171813547253374d268566ba": "Ybodychange",
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": "Ybodychange",
    "d014f2ffd24c1aaebda7503ce0e5a81334a5f266": "Ybodychange",
    "708fa8b1ae85b6efda318368bc0c0ba02d4958c8": "Ybodychange",
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n     flowRun.setRunId(rowKey.getFlowRunId());\n     flowRun.setUser(rowKey.getUserId());\n     flowRun.setName(rowKey.getFlowName());\n \n     // read the start time\n-    Long startTime \u003d (Long) FlowRunColumn.MIN_START_TIME.readResult(result);\n+    Long startTime \u003d (Long) ColumnRWHelper.readResult(result,\n+        FlowRunColumn.MIN_START_TIME);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n \n     // read the end time if available\n-    Long endTime \u003d (Long) FlowRunColumn.MAX_END_TIME.readResult(result);\n+    Long endTime \u003d (Long) ColumnRWHelper.readResult(result,\n+        FlowRunColumn.MAX_END_TIME);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n-    String version \u003d (String) FlowRunColumn.FLOW_VERSION.readResult(result);\n+    String version \u003d (String) ColumnRWHelper.readResult(result,\n+        FlowRunColumn.FLOW_VERSION);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics if its a single entity query or if METRICS are part of\n     // fieldsToRetrieve.\n     if (isSingleEntityRead()\n         || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     flowRun.getInfo().put(TimelineReaderUtils.FROMID_KEY,\n         rowKey.getRowKeyAsString());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n    flowRun.setRunId(rowKey.getFlowRunId());\n    flowRun.setUser(rowKey.getUserId());\n    flowRun.setName(rowKey.getFlowName());\n\n    // read the start time\n    Long startTime \u003d (Long) ColumnRWHelper.readResult(result,\n        FlowRunColumn.MIN_START_TIME);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long) ColumnRWHelper.readResult(result,\n        FlowRunColumn.MAX_END_TIME);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String) ColumnRWHelper.readResult(result,\n        FlowRunColumn.FLOW_VERSION);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics if its a single entity query or if METRICS are part of\n    // fieldsToRetrieve.\n    if (isSingleEntityRead()\n        || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    flowRun.getInfo().put(TimelineReaderUtils.FROMID_KEY,\n        rowKey.getRowKeyAsString());\n    return flowRun;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
          "commitDate": "17/02/18 7:00 AM",
          "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 3:24 AM",
          "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,41 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n     flowRun.setRunId(rowKey.getFlowRunId());\n     flowRun.setUser(rowKey.getUserId());\n     flowRun.setName(rowKey.getFlowName());\n \n     // read the start time\n-    Long startTime \u003d (Long) FlowRunColumn.MIN_START_TIME.readResult(result);\n+    Long startTime \u003d (Long) ColumnRWHelper.readResult(result,\n+        FlowRunColumn.MIN_START_TIME);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n \n     // read the end time if available\n-    Long endTime \u003d (Long) FlowRunColumn.MAX_END_TIME.readResult(result);\n+    Long endTime \u003d (Long) ColumnRWHelper.readResult(result,\n+        FlowRunColumn.MAX_END_TIME);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n-    String version \u003d (String) FlowRunColumn.FLOW_VERSION.readResult(result);\n+    String version \u003d (String) ColumnRWHelper.readResult(result,\n+        FlowRunColumn.FLOW_VERSION);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics if its a single entity query or if METRICS are part of\n     // fieldsToRetrieve.\n     if (isSingleEntityRead()\n         || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     flowRun.getInfo().put(TimelineReaderUtils.FROMID_KEY,\n         rowKey.getRowKeyAsString());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n    flowRun.setRunId(rowKey.getFlowRunId());\n    flowRun.setUser(rowKey.getUserId());\n    flowRun.setName(rowKey.getFlowName());\n\n    // read the start time\n    Long startTime \u003d (Long) ColumnRWHelper.readResult(result,\n        FlowRunColumn.MIN_START_TIME);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long) ColumnRWHelper.readResult(result,\n        FlowRunColumn.MAX_END_TIME);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String) ColumnRWHelper.readResult(result,\n        FlowRunColumn.FLOW_VERSION);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics if its a single entity query or if METRICS are part of\n    // fieldsToRetrieve.\n    if (isSingleEntityRead()\n        || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    flowRun.getInfo().put(TimelineReaderUtils.FROMID_KEY,\n        rowKey.getRowKeyAsString());\n    return flowRun;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "6f65cf27bb5bfdc03adf9db6c8a72f80d0aee0bd",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n-    TimelineReaderContext context \u003d getContext();\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n-    flowRun.setUser(context.getUserId());\n-    flowRun.setName(context.getFlowName());\n-    if (isSingleEntityRead()) {\n-      flowRun.setRunId(context.getFlowRunId());\n-    } else {\n-      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n-      flowRun.setRunId(rowKey.getFlowRunId());\n-    }\n+    FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n+    flowRun.setRunId(rowKey.getFlowRunId());\n+    flowRun.setUser(rowKey.getUserId());\n+    flowRun.setName(rowKey.getFlowName());\n \n     // read the start time\n     Long startTime \u003d (Long) FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n \n     // read the end time if available\n     Long endTime \u003d (Long) FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String) FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics if its a single entity query or if METRICS are part of\n     // fieldsToRetrieve.\n     if (isSingleEntityRead()\n         || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n+    flowRun.getInfo().put(TimelineReaderUtils.FROMID_KEY,\n+        rowKey.getRowKeyAsString());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n    flowRun.setRunId(rowKey.getFlowRunId());\n    flowRun.setUser(rowKey.getUserId());\n    flowRun.setName(rowKey.getFlowName());\n\n    // read the start time\n    Long startTime \u003d (Long) FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long) FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String) FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics if its a single entity query or if METRICS are part of\n    // fieldsToRetrieve.\n    if (isSingleEntityRead()\n        || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    flowRun.getInfo().put(TimelineReaderUtils.FROMID_KEY,\n        rowKey.getRowKeyAsString());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "b01514f65bc6090a50a583f67d1ecb5d74b6d276": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5928. Move ATSv2 HBase backend code into a new module that is only dependent at runtime by yarn servers. Contributed by Haibo Chen.\n",
      "commitDate": "19/01/17 8:52 PM",
      "commitName": "b01514f65bc6090a50a583f67d1ecb5d74b6d276",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "19/01/17 5:32 PM",
      "commitNameOld": "60865c8ea08053f3d6ac23f81c3376a3de3ca996",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 0.14,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    TimelineReaderContext context \u003d getContext();\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(context.getUserId());\n    flowRun.setName(context.getFlowName());\n    if (isSingleEntityRead()) {\n      flowRun.setRunId(context.getFlowRunId());\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long) FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long) FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String) FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics if its a single entity query or if METRICS are part of\n    // fieldsToRetrieve.\n    if (isSingleEntityRead()\n        || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java"
      }
    },
    "892b193bd77c15932b4c084c1d525b7017def0d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5170. Eliminate singleton converters and static method access. (Joep Rottinghuis via Varun Saxena)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "892b193bd77c15932b4c084c1d525b7017def0d4",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     TimelineReaderContext context \u003d getContext();\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     flowRun.setUser(context.getUserId());\n     flowRun.setName(context.getFlowName());\n     if (isSingleEntityRead()) {\n       flowRun.setRunId(context.getFlowRunId());\n     } else {\n       FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n       flowRun.setRunId(rowKey.getFlowRunId());\n     }\n \n     // read the start time\n-    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n+    Long startTime \u003d (Long) FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n \n     // read the end time if available\n-    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n+    Long endTime \u003d (Long) FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n-    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n+    String version \u003d (String) FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics if its a single entity query or if METRICS are part of\n     // fieldsToRetrieve.\n-    if (isSingleEntityRead() || TimelineStorageUtils.hasField(\n-        getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n+    if (isSingleEntityRead()\n+        || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    TimelineReaderContext context \u003d getContext();\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(context.getUserId());\n    flowRun.setName(context.getFlowName());\n    if (isSingleEntityRead()) {\n      flowRun.setRunId(context.getFlowRunId());\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long) FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long) FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String) FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics if its a single entity query or if METRICS are part of\n    // fieldsToRetrieve.\n    if (isSingleEntityRead()\n        || hasField(getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "c2efdc415a13496da43a9a8d13c73d88ca8565a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3863. Support complex filters in TimelineReader (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "c2efdc415a13496da43a9a8d13c73d88ca8565a1",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,41 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     TimelineReaderContext context \u003d getContext();\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     flowRun.setUser(context.getUserId());\n     flowRun.setName(context.getFlowName());\n     if (isSingleEntityRead()) {\n       flowRun.setRunId(context.getFlowRunId());\n     } else {\n       FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n       flowRun.setRunId(rowKey.getFlowRunId());\n     }\n \n     // read the start time\n     Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n-    if (!isSingleEntityRead() \u0026\u0026\n-        (flowRun.getStartTime() \u003c getFilters().getCreatedTimeBegin() ||\n-        flowRun.getStartTime() \u003e getFilters().getCreatedTimeEnd())) {\n-      return null;\n-    }\n \n     // read the end time if available\n     Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n-    // read metrics\n-    if (isSingleEntityRead() ||\n-        getDataToRetrieve().getFieldsToRetrieve().contains(Field.METRICS)) {\n+    // read metrics if its a single entity query or if METRICS are part of\n+    // fieldsToRetrieve.\n+    if (isSingleEntityRead() || TimelineStorageUtils.hasField(\n+        getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    TimelineReaderContext context \u003d getContext();\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(context.getUserId());\n    flowRun.setName(context.getFlowName());\n    if (isSingleEntityRead()) {\n      flowRun.setRunId(context.getFlowRunId());\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics if its a single entity query or if METRICS are part of\n    // fieldsToRetrieve.\n    if (isSingleEntityRead() || TimelineStorageUtils.hasField(\n        getDataToRetrieve().getFieldsToRetrieve(), Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "960af7d4717b8a8949d0b2e43949e7daab45aa88": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4409. Fix javadoc and checkstyle issues in timelineservice code (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     TimelineReaderContext context \u003d getContext();\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     flowRun.setUser(context.getUserId());\n     flowRun.setName(context.getFlowName());\n-    if (singleEntityRead) {\n+    if (isSingleEntityRead()) {\n       flowRun.setRunId(context.getFlowRunId());\n     } else {\n       FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n       flowRun.setRunId(rowKey.getFlowRunId());\n     }\n \n     // read the start time\n     Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n-    if (!singleEntityRead \u0026\u0026\n+    if (!isSingleEntityRead() \u0026\u0026\n         (flowRun.getStartTime() \u003c getFilters().getCreatedTimeBegin() ||\n         flowRun.getStartTime() \u003e getFilters().getCreatedTimeEnd())) {\n       return null;\n     }\n \n     // read the end time if available\n     Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics\n-    if (singleEntityRead ||\n+    if (isSingleEntityRead() ||\n         getDataToRetrieve().getFieldsToRetrieve().contains(Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    TimelineReaderContext context \u003d getContext();\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(context.getUserId());\n    flowRun.setName(context.getFlowName());\n    if (isSingleEntityRead()) {\n      flowRun.setRunId(context.getFlowRunId());\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n    if (!isSingleEntityRead() \u0026\u0026\n        (flowRun.getStartTime() \u003c getFilters().getCreatedTimeBegin() ||\n        flowRun.getStartTime() \u003e getFilters().getCreatedTimeEnd())) {\n      return null;\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    if (isSingleEntityRead() ||\n        getDataToRetrieve().getFieldsToRetrieve().contains(Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,45 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n+    TimelineReaderContext context \u003d getContext();\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n-    flowRun.setUser(userId);\n-    flowRun.setName(flowName);\n+    flowRun.setUser(context.getUserId());\n+    flowRun.setName(context.getFlowName());\n     if (singleEntityRead) {\n-      flowRun.setRunId(flowRunId);\n+      flowRun.setRunId(context.getFlowRunId());\n     } else {\n       FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n       flowRun.setRunId(rowKey.getFlowRunId());\n     }\n \n     // read the start time\n     Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n-    if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n-        flowRun.getStartTime() \u003e createdTimeEnd)) {\n+    if (!singleEntityRead \u0026\u0026\n+        (flowRun.getStartTime() \u003c getFilters().getCreatedTimeBegin() ||\n+        flowRun.getStartTime() \u003e getFilters().getCreatedTimeEnd())) {\n       return null;\n     }\n \n     // read the end time if available\n     Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics\n-    if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n+    if (singleEntityRead ||\n+        getDataToRetrieve().getFieldsToRetrieve().contains(Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    TimelineReaderContext context \u003d getContext();\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(context.getUserId());\n    flowRun.setName(context.getFlowName());\n    if (singleEntityRead) {\n      flowRun.setRunId(context.getFlowRunId());\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n    if (!singleEntityRead \u0026\u0026\n        (flowRun.getStartTime() \u003c getFilters().getCreatedTimeBegin() ||\n        flowRun.getStartTime() \u003e getFilters().getCreatedTimeEnd())) {\n      return null;\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    if (singleEntityRead ||\n        getDataToRetrieve().getFieldsToRetrieve().contains(Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "88f02941144824187b70fa2aaf0c6d90bcb77d8f": {
      "type": "Yfilerename",
      "commitMessage": "YARN-4200. Refactor reader classes in storage to nest under hbase\nspecific package name. Contributed by Li Lu.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "88f02941144824187b70fa2aaf0c6d90bcb77d8f",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "cc16683cefe2611cf4de7819496aa54854f5394c",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(userId);\n    flowRun.setName(flowName);\n    if (singleEntityRead) {\n      flowRun.setRunId(flowRunId);\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n    if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n        flowRun.getStartTime() \u003e createdTimeEnd)) {\n      return null;\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/FlowRunEntityReader.java"
      }
    },
    "8ef546c1ee9fce0b171813547253374d268566ba": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "1f710484e5b8ab4d5c67379c012004e8a4242d15",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     flowRun.setUser(userId);\n-    flowRun.setName(flowId);\n+    flowRun.setName(flowName);\n     if (singleEntityRead) {\n       flowRun.setRunId(flowRunId);\n     } else {\n       FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n       flowRun.setRunId(rowKey.getFlowRunId());\n     }\n \n     // read the start time\n     Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n     if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n         flowRun.getStartTime() \u003e createdTimeEnd)) {\n       return null;\n     }\n \n     // read the end time if available\n     Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics\n     if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(userId);\n    flowRun.setName(flowName);\n    if (singleEntityRead) {\n      flowRun.setRunId(flowRunId);\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n    if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n        flowRun.getStartTime() \u003e createdTimeEnd)) {\n      return null;\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4053. Change the way metric values are stored in HBase Storage (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "51254a6b5133c8abfec4b7d2ac9477d112b3ccfa",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d014f2ffd24c1aaebda7503ce0e5a81334a5f266",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     flowRun.setUser(userId);\n     flowRun.setName(flowId);\n     if (singleEntityRead) {\n       flowRun.setRunId(flowRunId);\n     } else {\n       FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n       flowRun.setRunId(rowKey.getFlowRunId());\n     }\n \n     // read the start time\n-    Number startTime \u003d (Number)FlowRunColumn.MIN_START_TIME.readResult(result);\n+    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n     if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n         flowRun.getStartTime() \u003e createdTimeEnd)) {\n       return null;\n     }\n \n     // read the end time if available\n-    Number endTime \u003d (Number)FlowRunColumn.MAX_END_TIME.readResult(result);\n+    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics\n     if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n       readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n     }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(userId);\n    flowRun.setName(flowId);\n    if (singleEntityRead) {\n      flowRun.setRunId(flowRunId);\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n    if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n        flowRun.getStartTime() \u003e createdTimeEnd)) {\n      return null;\n    }\n\n    // read the end time if available\n    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "d014f2ffd24c1aaebda7503ce0e5a81334a5f266": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4237 Support additional queries for ATSv2 Web UI. Contributed by\nVarun Saxena.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d014f2ffd24c1aaebda7503ce0e5a81334a5f266",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,42 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     flowRun.setUser(userId);\n     flowRun.setName(flowId);\n-    flowRun.setRunId(flowRunId);\n+    if (singleEntityRead) {\n+      flowRun.setRunId(flowRunId);\n+    } else {\n+      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n+      flowRun.setRunId(rowKey.getFlowRunId());\n+    }\n \n     // read the start time\n     Number startTime \u003d (Number)FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n       flowRun.setStartTime(startTime.longValue());\n     }\n+    if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n+        flowRun.getStartTime() \u003e createdTimeEnd)) {\n+      return null;\n+    }\n+\n     // read the end time if available\n     Number endTime \u003d (Number)FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n       flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics\n-    readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n+    if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n+      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n+    }\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(userId);\n    flowRun.setName(flowId);\n    if (singleEntityRead) {\n      flowRun.setRunId(flowRunId);\n    } else {\n      FlowRunRowKey rowKey \u003d FlowRunRowKey.parseRowKey(result.getRow());\n      flowRun.setRunId(rowKey.getFlowRunId());\n    }\n\n    // read the start time\n    Number startTime \u003d (Number)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n    if (!singleEntityRead \u0026\u0026 (flowRun.getStartTime() \u003c createdTimeBegin ||\n        flowRun.getStartTime() \u003e createdTimeEnd)) {\n      return null;\n    }\n\n    // read the end time if available\n    Number endTime \u003d (Number)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    if (singleEntityRead || fieldsToRetrieve.contains(Field.METRICS)) {\n      readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n    }\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "708fa8b1ae85b6efda318368bc0c0ba02d4958c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4210. HBase reader throws NPE if Get returns no rows (Varun Saxena via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "708fa8b1ae85b6efda318368bc0c0ba02d4958c8",
      "commitAuthor": "Vrushali Channapattan",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthorOld": "Vrushali",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   protected TimelineEntity parseEntity(Result result) throws IOException {\n     FlowRunEntity flowRun \u003d new FlowRunEntity();\n     flowRun.setUser(userId);\n     flowRun.setName(flowId);\n     flowRun.setRunId(flowRunId);\n \n     // read the start time\n-    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n+    Number startTime \u003d (Number)FlowRunColumn.MIN_START_TIME.readResult(result);\n     if (startTime !\u003d null) {\n-      flowRun.setStartTime(startTime);\n+      flowRun.setStartTime(startTime.longValue());\n     }\n     // read the end time if available\n-    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n+    Number endTime \u003d (Number)FlowRunColumn.MAX_END_TIME.readResult(result);\n     if (endTime !\u003d null) {\n-      flowRun.setMaxEndTime(endTime);\n+      flowRun.setMaxEndTime(endTime.longValue());\n     }\n \n     // read the flow version\n     String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n     if (version !\u003d null) {\n       flowRun.setVersion(version);\n     }\n \n     // read metrics\n     readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n \n     // set the id\n     flowRun.setId(flowRun.getId());\n     return flowRun;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(userId);\n    flowRun.setName(flowId);\n    flowRun.setRunId(flowRunId);\n\n    // read the start time\n    Number startTime \u003d (Number)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime.longValue());\n    }\n    // read the end time if available\n    Number endTime \u003d (Number)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime.longValue());\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java",
      "extendedDetails": {}
    },
    "10fa6da7d8a6013698767c6136ae20f0e04415e9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4074. [timeline reader] implement support for querying for flows and flow runs (sjlee via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "10fa6da7d8a6013698767c6136ae20f0e04415e9",
      "commitAuthor": "Vrushali",
      "diff": "@@ -0,0 +1,30 @@\n+  protected TimelineEntity parseEntity(Result result) throws IOException {\n+    FlowRunEntity flowRun \u003d new FlowRunEntity();\n+    flowRun.setUser(userId);\n+    flowRun.setName(flowId);\n+    flowRun.setRunId(flowRunId);\n+\n+    // read the start time\n+    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n+    if (startTime !\u003d null) {\n+      flowRun.setStartTime(startTime);\n+    }\n+    // read the end time if available\n+    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n+    if (endTime !\u003d null) {\n+      flowRun.setMaxEndTime(endTime);\n+    }\n+\n+    // read the flow version\n+    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n+    if (version !\u003d null) {\n+      flowRun.setVersion(version);\n+    }\n+\n+    // read metrics\n+    readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n+\n+    // set the id\n+    flowRun.setId(flowRun.getId());\n+    return flowRun;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected TimelineEntity parseEntity(Result result) throws IOException {\n    FlowRunEntity flowRun \u003d new FlowRunEntity();\n    flowRun.setUser(userId);\n    flowRun.setName(flowId);\n    flowRun.setRunId(flowRunId);\n\n    // read the start time\n    Long startTime \u003d (Long)FlowRunColumn.MIN_START_TIME.readResult(result);\n    if (startTime !\u003d null) {\n      flowRun.setStartTime(startTime);\n    }\n    // read the end time if available\n    Long endTime \u003d (Long)FlowRunColumn.MAX_END_TIME.readResult(result);\n    if (endTime !\u003d null) {\n      flowRun.setMaxEndTime(endTime);\n    }\n\n    // read the flow version\n    String version \u003d (String)FlowRunColumn.FLOW_VERSION.readResult(result);\n    if (version !\u003d null) {\n      flowRun.setVersion(version);\n    }\n\n    // read metrics\n    readMetrics(flowRun, result, FlowRunColumnPrefix.METRIC);\n\n    // set the id\n    flowRun.setId(flowRun.getId());\n    return flowRun;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/FlowRunEntityReader.java"
    }
  }
}