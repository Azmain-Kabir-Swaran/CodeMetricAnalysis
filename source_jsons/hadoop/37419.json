{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "listReservations",
  "functionId": "listReservations___requestInfo-ReservationListRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1453,
  "functionEndLine": 1490,
  "numCommitsSeen": 128,
  "timeTaken": 3889,
  "changeHistory": [
    "b63ae854f9f5a900ca860dcb26c30785af32bde0",
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "d82e797b652f248e238bdf1818e6b4a5b91cea7a",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e",
    "9875325d5c63f343809907d06bf48a298035a611"
  ],
  "changeHistoryShort": {
    "b63ae854f9f5a900ca860dcb26c30785af32bde0": "Ybodychange",
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "d82e797b652f248e238bdf1818e6b4a5b91cea7a": "Ybodychange",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": "Ybodychange",
    "9875325d5c63f343809907d06bf48a298035a611": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b63ae854f9f5a900ca860dcb26c30785af32bde0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6379. Remove unused argument in ClientRMService. Contributed by Kai Sasaki.\n",
      "commitDate": "26/03/17 7:23 PM",
      "commitName": "b63ae854f9f5a900ca860dcb26c30785af32bde0",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/03/17 9:56 AM",
      "commitNameOld": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 1.39,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public ReservationListResponse listReservations(\n         ReservationListRequest requestInfo) throws YarnException, IOException {\n     // Check if reservation system is enabled\n-    checkReservationSystem(AuditConstants.LIST_RESERVATION_REQUEST);\n+    checkReservationSystem();\n     ReservationListResponse response \u003d\n             recordFactory.newRecordInstance(ReservationListResponse.class);\n \n     Plan plan \u003d rValidator.validateReservationListRequest(\n             reservationSystem, requestInfo);\n     boolean includeResourceAllocations \u003d requestInfo\n             .getIncludeResourceAllocations();\n \n     ReservationId reservationId \u003d null;\n     if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n             .getReservationId().isEmpty()) {\n       reservationId \u003d ReservationId.parseReservationId(\n             requestInfo.getReservationId());\n     }\n \n     checkReservationACLs(requestInfo.getQueue(),\n             AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n \n     long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n     long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n             .getEndTime();\n \n     Set\u003cReservationAllocation\u003e reservations;\n \n     reservations \u003d plan.getReservations(reservationId, new ReservationInterval(\n             startTime, endTime));\n \n     List\u003cReservationAllocationState\u003e info \u003d\n             ReservationSystemUtil.convertAllocationsToReservationInfo(\n                     reservations, includeResourceAllocations);\n \n     response.setReservationAllocationState(info);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationListResponse listReservations(\n        ReservationListRequest requestInfo) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSystem();\n    ReservationListResponse response \u003d\n            recordFactory.newRecordInstance(ReservationListResponse.class);\n\n    Plan plan \u003d rValidator.validateReservationListRequest(\n            reservationSystem, requestInfo);\n    boolean includeResourceAllocations \u003d requestInfo\n            .getIncludeResourceAllocations();\n\n    ReservationId reservationId \u003d null;\n    if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n            .getReservationId().isEmpty()) {\n      reservationId \u003d ReservationId.parseReservationId(\n            requestInfo.getReservationId());\n    }\n\n    checkReservationACLs(requestInfo.getQueue(),\n            AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n\n    long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n    long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n            .getEndTime();\n\n    Set\u003cReservationAllocation\u003e reservations;\n\n    reservations \u003d plan.getReservations(reservationId, new ReservationInterval(\n            startTime, endTime));\n\n    List\u003cReservationAllocationState\u003e info \u003d\n            ReservationSystemUtil.convertAllocationsToReservationInfo(\n                    reservations, includeResourceAllocations);\n\n    response.setReservationAllocationState(info);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public ReservationListResponse listReservations(\n         ReservationListRequest requestInfo) throws YarnException, IOException {\n     // Check if reservation system is enabled\n-    checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);\n+    checkReservationSystem(AuditConstants.LIST_RESERVATION_REQUEST);\n     ReservationListResponse response \u003d\n             recordFactory.newRecordInstance(ReservationListResponse.class);\n \n     Plan plan \u003d rValidator.validateReservationListRequest(\n             reservationSystem, requestInfo);\n     boolean includeResourceAllocations \u003d requestInfo\n             .getIncludeResourceAllocations();\n \n     ReservationId reservationId \u003d null;\n     if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n             .getReservationId().isEmpty()) {\n       reservationId \u003d ReservationId.parseReservationId(\n             requestInfo.getReservationId());\n     }\n \n     checkReservationACLs(requestInfo.getQueue(),\n             AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n \n     long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n     long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n             .getEndTime();\n \n     Set\u003cReservationAllocation\u003e reservations;\n \n     reservations \u003d plan.getReservations(reservationId, new ReservationInterval(\n             startTime, endTime));\n \n     List\u003cReservationAllocationState\u003e info \u003d\n             ReservationSystemUtil.convertAllocationsToReservationInfo(\n                     reservations, includeResourceAllocations);\n \n     response.setReservationAllocationState(info);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationListResponse listReservations(\n        ReservationListRequest requestInfo) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSystem(AuditConstants.LIST_RESERVATION_REQUEST);\n    ReservationListResponse response \u003d\n            recordFactory.newRecordInstance(ReservationListResponse.class);\n\n    Plan plan \u003d rValidator.validateReservationListRequest(\n            reservationSystem, requestInfo);\n    boolean includeResourceAllocations \u003d requestInfo\n            .getIncludeResourceAllocations();\n\n    ReservationId reservationId \u003d null;\n    if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n            .getReservationId().isEmpty()) {\n      reservationId \u003d ReservationId.parseReservationId(\n            requestInfo.getReservationId());\n    }\n\n    checkReservationACLs(requestInfo.getQueue(),\n            AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n\n    long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n    long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n            .getEndTime();\n\n    Set\u003cReservationAllocation\u003e reservations;\n\n    reservations \u003d plan.getReservations(reservationId, new ReservationInterval(\n            startTime, endTime));\n\n    List\u003cReservationAllocationState\u003e info \u003d\n            ReservationSystemUtil.convertAllocationsToReservationInfo(\n                    reservations, includeResourceAllocations);\n\n    response.setReservationAllocationState(info);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "d82e797b652f248e238bdf1818e6b4a5b91cea7a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4825. Remove redundant code in ClientRMService::listReservations. (subru via asuresh)\n",
      "commitDate": "24/03/16 9:59 AM",
      "commitName": "d82e797b652f248e238bdf1818e6b4a5b91cea7a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "11/02/16 10:47 AM",
      "commitNameOld": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 41.93,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,38 @@\n   public ReservationListResponse listReservations(\n         ReservationListRequest requestInfo) throws YarnException, IOException {\n     // Check if reservation system is enabled\n     checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);\n     ReservationListResponse response \u003d\n             recordFactory.newRecordInstance(ReservationListResponse.class);\n \n     Plan plan \u003d rValidator.validateReservationListRequest(\n             reservationSystem, requestInfo);\n     boolean includeResourceAllocations \u003d requestInfo\n             .getIncludeResourceAllocations();\n \n     ReservationId reservationId \u003d null;\n     if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n             .getReservationId().isEmpty()) {\n       reservationId \u003d ReservationId.parseReservationId(\n             requestInfo.getReservationId());\n     }\n \n     checkReservationACLs(requestInfo.getQueue(),\n             AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n \n-    ReservationId requestedId \u003d null;\n-    if (requestInfo.getReservationId() !\u003d null\n-            \u0026\u0026 !requestInfo.getReservationId().isEmpty()) {\n-      requestedId \u003d ReservationId.parseReservationId(requestInfo\n-            .getReservationId());\n-    }\n-\n     long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n     long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n             .getEndTime();\n \n     Set\u003cReservationAllocation\u003e reservations;\n \n-    reservations \u003d plan.getReservations(requestedId, new ReservationInterval(\n+    reservations \u003d plan.getReservations(reservationId, new ReservationInterval(\n             startTime, endTime));\n \n     List\u003cReservationAllocationState\u003e info \u003d\n             ReservationSystemUtil.convertAllocationsToReservationInfo(\n                     reservations, includeResourceAllocations);\n \n     response.setReservationAllocationState(info);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationListResponse listReservations(\n        ReservationListRequest requestInfo) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);\n    ReservationListResponse response \u003d\n            recordFactory.newRecordInstance(ReservationListResponse.class);\n\n    Plan plan \u003d rValidator.validateReservationListRequest(\n            reservationSystem, requestInfo);\n    boolean includeResourceAllocations \u003d requestInfo\n            .getIncludeResourceAllocations();\n\n    ReservationId reservationId \u003d null;\n    if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n            .getReservationId().isEmpty()) {\n      reservationId \u003d ReservationId.parseReservationId(\n            requestInfo.getReservationId());\n    }\n\n    checkReservationACLs(requestInfo.getQueue(),\n            AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n\n    long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n    long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n            .getEndTime();\n\n    Set\u003cReservationAllocation\u003e reservations;\n\n    reservations \u003d plan.getReservations(reservationId, new ReservationInterval(\n            startTime, endTime));\n\n    List\u003cReservationAllocationState\u003e info \u003d\n            ReservationSystemUtil.convertAllocationsToReservationInfo(\n                    reservations, includeResourceAllocations);\n\n    response.setReservationAllocationState(info);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
      "commitDate": "11/02/16 10:47 AM",
      "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/02/16 6:17 PM",
      "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.69,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,45 @@\n   public ReservationListResponse listReservations(\n         ReservationListRequest requestInfo) throws YarnException, IOException {\n     // Check if reservation system is enabled\n     checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);\n     ReservationListResponse response \u003d\n             recordFactory.newRecordInstance(ReservationListResponse.class);\n \n     Plan plan \u003d rValidator.validateReservationListRequest(\n             reservationSystem, requestInfo);\n     boolean includeResourceAllocations \u003d requestInfo\n             .getIncludeResourceAllocations();\n \n-    String user \u003d checkReservationACLs(requestInfo.getQueue(),\n-            AuditConstants.LIST_RESERVATION_REQUEST);\n+    ReservationId reservationId \u003d null;\n+    if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n+            .getReservationId().isEmpty()) {\n+      reservationId \u003d ReservationId.parseReservationId(\n+            requestInfo.getReservationId());\n+    }\n+\n+    checkReservationACLs(requestInfo.getQueue(),\n+            AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n \n     ReservationId requestedId \u003d null;\n     if (requestInfo.getReservationId() !\u003d null\n             \u0026\u0026 !requestInfo.getReservationId().isEmpty()) {\n       requestedId \u003d ReservationId.parseReservationId(requestInfo\n             .getReservationId());\n     }\n \n     long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n     long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n             .getEndTime();\n \n-    Set\u003cReservationAllocation\u003e reservations \u003d plan.getReservations(\n-        requestedId, new ReservationInterval(startTime, endTime), user);\n+    Set\u003cReservationAllocation\u003e reservations;\n+\n+    reservations \u003d plan.getReservations(requestedId, new ReservationInterval(\n+            startTime, endTime));\n \n     List\u003cReservationAllocationState\u003e info \u003d\n             ReservationSystemUtil.convertAllocationsToReservationInfo(\n                     reservations, includeResourceAllocations);\n \n     response.setReservationAllocationState(info);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationListResponse listReservations(\n        ReservationListRequest requestInfo) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);\n    ReservationListResponse response \u003d\n            recordFactory.newRecordInstance(ReservationListResponse.class);\n\n    Plan plan \u003d rValidator.validateReservationListRequest(\n            reservationSystem, requestInfo);\n    boolean includeResourceAllocations \u003d requestInfo\n            .getIncludeResourceAllocations();\n\n    ReservationId reservationId \u003d null;\n    if (requestInfo.getReservationId() !\u003d null \u0026\u0026 !requestInfo\n            .getReservationId().isEmpty()) {\n      reservationId \u003d ReservationId.parseReservationId(\n            requestInfo.getReservationId());\n    }\n\n    checkReservationACLs(requestInfo.getQueue(),\n            AuditConstants.LIST_RESERVATION_REQUEST, reservationId);\n\n    ReservationId requestedId \u003d null;\n    if (requestInfo.getReservationId() !\u003d null\n            \u0026\u0026 !requestInfo.getReservationId().isEmpty()) {\n      requestedId \u003d ReservationId.parseReservationId(requestInfo\n            .getReservationId());\n    }\n\n    long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n    long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n            .getEndTime();\n\n    Set\u003cReservationAllocation\u003e reservations;\n\n    reservations \u003d plan.getReservations(requestedId, new ReservationInterval(\n            startTime, endTime));\n\n    List\u003cReservationAllocationState\u003e info \u003d\n            ReservationSystemUtil.convertAllocationsToReservationInfo(\n                    reservations, includeResourceAllocations);\n\n    response.setReservationAllocationState(info);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "9875325d5c63f343809907d06bf48a298035a611": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4340. Add list API to reservation system. (Sean Po via wangda)\n",
      "commitDate": "01/02/16 6:17 PM",
      "commitName": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,36 @@\n+  public ReservationListResponse listReservations(\n+        ReservationListRequest requestInfo) throws YarnException, IOException {\n+    // Check if reservation system is enabled\n+    checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);\n+    ReservationListResponse response \u003d\n+            recordFactory.newRecordInstance(ReservationListResponse.class);\n+\n+    Plan plan \u003d rValidator.validateReservationListRequest(\n+            reservationSystem, requestInfo);\n+    boolean includeResourceAllocations \u003d requestInfo\n+            .getIncludeResourceAllocations();\n+\n+    String user \u003d checkReservationACLs(requestInfo.getQueue(),\n+            AuditConstants.LIST_RESERVATION_REQUEST);\n+\n+    ReservationId requestedId \u003d null;\n+    if (requestInfo.getReservationId() !\u003d null\n+            \u0026\u0026 !requestInfo.getReservationId().isEmpty()) {\n+      requestedId \u003d ReservationId.parseReservationId(requestInfo\n+            .getReservationId());\n+    }\n+\n+    long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n+    long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n+            .getEndTime();\n+\n+    Set\u003cReservationAllocation\u003e reservations \u003d plan.getReservations(\n+        requestedId, new ReservationInterval(startTime, endTime), user);\n+\n+    List\u003cReservationAllocationState\u003e info \u003d\n+            ReservationSystemUtil.convertAllocationsToReservationInfo(\n+                    reservations, includeResourceAllocations);\n+\n+    response.setReservationAllocationState(info);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationListResponse listReservations(\n        ReservationListRequest requestInfo) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.LIST_RESERVATION_REQUEST);\n    ReservationListResponse response \u003d\n            recordFactory.newRecordInstance(ReservationListResponse.class);\n\n    Plan plan \u003d rValidator.validateReservationListRequest(\n            reservationSystem, requestInfo);\n    boolean includeResourceAllocations \u003d requestInfo\n            .getIncludeResourceAllocations();\n\n    String user \u003d checkReservationACLs(requestInfo.getQueue(),\n            AuditConstants.LIST_RESERVATION_REQUEST);\n\n    ReservationId requestedId \u003d null;\n    if (requestInfo.getReservationId() !\u003d null\n            \u0026\u0026 !requestInfo.getReservationId().isEmpty()) {\n      requestedId \u003d ReservationId.parseReservationId(requestInfo\n            .getReservationId());\n    }\n\n    long startTime \u003d Math.max(requestInfo.getStartTime(), 0);\n    long endTime \u003d requestInfo.getEndTime() \u003c\u003d -1? Long.MAX_VALUE : requestInfo\n            .getEndTime();\n\n    Set\u003cReservationAllocation\u003e reservations \u003d plan.getReservations(\n        requestedId, new ReservationInterval(startTime, endTime), user);\n\n    List\u003cReservationAllocationState\u003e info \u003d\n            ReservationSystemUtil.convertAllocationsToReservationInfo(\n                    reservations, includeResourceAllocations);\n\n    response.setReservationAllocationState(info);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}