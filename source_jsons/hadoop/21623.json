{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobSubmitter.java",
  "functionName": "addMRFrameworkToDistributedCache",
  "functionId": "addMRFrameworkToDistributedCache___conf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
  "functionStartLine": 437,
  "functionEndLine": 471,
  "numCommitsSeen": 38,
  "timeTaken": 1415,
  "changeHistory": [
    "de7efd2687ccb74608249abf4c83c84a9345ec0a",
    "db06f1bcb98270cd1c36e314f818886f1ef7fd77"
  ],
  "changeHistoryShort": {
    "de7efd2687ccb74608249abf4c83c84a9345ec0a": "Ybodychange",
    "db06f1bcb98270cd1c36e314f818886f1ef7fd77": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de7efd2687ccb74608249abf4c83c84a9345ec0a": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6873. MR Job Submission Fails if MR framework application path not on defaultFS. Contributed by Erik Krogen.\n",
      "commitDate": "29/03/17 10:10 PM",
      "commitName": "de7efd2687ccb74608249abf4c83c84a9345ec0a",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "12/12/16 9:22 PM",
      "commitNameOld": "b0b033ea2e462356b8bbcf7790953ac09c712430",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 106.99,
      "commitsBetweenForRepo": 552,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private static void addMRFrameworkToDistributedCache(Configuration conf)\n       throws IOException {\n     String framework \u003d\n         conf.get(MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, \"\");\n     if (!framework.isEmpty()) {\n       URI uri;\n       try {\n         uri \u003d new URI(framework);\n       } catch (URISyntaxException e) {\n         throw new IllegalArgumentException(\"Unable to parse \u0027\" + framework\n             + \"\u0027 as a URI, check the setting for \"\n             + MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, e);\n       }\n \n       String linkedName \u003d uri.getFragment();\n \n       // resolve any symlinks in the URI path so using a \"current\" symlink\n       // to point to a specific version shows the specific version\n       // in the distributed cache configuration\n-      FileSystem fs \u003d FileSystem.get(conf);\n+      FileSystem fs \u003d FileSystem.get(uri, conf);\n       Path frameworkPath \u003d fs.makeQualified(\n           new Path(uri.getScheme(), uri.getAuthority(), uri.getPath()));\n       FileContext fc \u003d FileContext.getFileContext(frameworkPath.toUri(), conf);\n       frameworkPath \u003d fc.resolvePath(frameworkPath);\n       uri \u003d frameworkPath.toUri();\n       try {\n         uri \u003d new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(),\n             null, linkedName);\n       } catch (URISyntaxException e) {\n         throw new IllegalArgumentException(e);\n       }\n \n       DistributedCache.addCacheArchive(uri, conf);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addMRFrameworkToDistributedCache(Configuration conf)\n      throws IOException {\n    String framework \u003d\n        conf.get(MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, \"\");\n    if (!framework.isEmpty()) {\n      URI uri;\n      try {\n        uri \u003d new URI(framework);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(\"Unable to parse \u0027\" + framework\n            + \"\u0027 as a URI, check the setting for \"\n            + MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, e);\n      }\n\n      String linkedName \u003d uri.getFragment();\n\n      // resolve any symlinks in the URI path so using a \"current\" symlink\n      // to point to a specific version shows the specific version\n      // in the distributed cache configuration\n      FileSystem fs \u003d FileSystem.get(uri, conf);\n      Path frameworkPath \u003d fs.makeQualified(\n          new Path(uri.getScheme(), uri.getAuthority(), uri.getPath()));\n      FileContext fc \u003d FileContext.getFileContext(frameworkPath.toUri(), conf);\n      frameworkPath \u003d fc.resolvePath(frameworkPath);\n      uri \u003d frameworkPath.toUri();\n      try {\n        uri \u003d new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(),\n            null, linkedName);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n\n      DistributedCache.addCacheArchive(uri, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java",
      "extendedDetails": {}
    },
    "db06f1bcb98270cd1c36e314f818886f1ef7fd77": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-4421. Run MapReduce framework via the distributed cache. Contributed by Jason Lowe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528237 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:34 PM",
      "commitName": "db06f1bcb98270cd1c36e314f818886f1ef7fd77",
      "commitAuthor": "Jason Darrell Lowe",
      "diff": "@@ -0,0 +1,35 @@\n+  private static void addMRFrameworkToDistributedCache(Configuration conf)\n+      throws IOException {\n+    String framework \u003d\n+        conf.get(MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, \"\");\n+    if (!framework.isEmpty()) {\n+      URI uri;\n+      try {\n+        uri \u003d new URI(framework);\n+      } catch (URISyntaxException e) {\n+        throw new IllegalArgumentException(\"Unable to parse \u0027\" + framework\n+            + \"\u0027 as a URI, check the setting for \"\n+            + MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, e);\n+      }\n+\n+      String linkedName \u003d uri.getFragment();\n+\n+      // resolve any symlinks in the URI path so using a \"current\" symlink\n+      // to point to a specific version shows the specific version\n+      // in the distributed cache configuration\n+      FileSystem fs \u003d FileSystem.get(conf);\n+      Path frameworkPath \u003d fs.makeQualified(\n+          new Path(uri.getScheme(), uri.getAuthority(), uri.getPath()));\n+      FileContext fc \u003d FileContext.getFileContext(frameworkPath.toUri(), conf);\n+      frameworkPath \u003d fc.resolvePath(frameworkPath);\n+      uri \u003d frameworkPath.toUri();\n+      try {\n+        uri \u003d new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(),\n+            null, linkedName);\n+      } catch (URISyntaxException e) {\n+        throw new IllegalArgumentException(e);\n+      }\n+\n+      DistributedCache.addCacheArchive(uri, conf);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void addMRFrameworkToDistributedCache(Configuration conf)\n      throws IOException {\n    String framework \u003d\n        conf.get(MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, \"\");\n    if (!framework.isEmpty()) {\n      URI uri;\n      try {\n        uri \u003d new URI(framework);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(\"Unable to parse \u0027\" + framework\n            + \"\u0027 as a URI, check the setting for \"\n            + MRJobConfig.MAPREDUCE_APPLICATION_FRAMEWORK_PATH, e);\n      }\n\n      String linkedName \u003d uri.getFragment();\n\n      // resolve any symlinks in the URI path so using a \"current\" symlink\n      // to point to a specific version shows the specific version\n      // in the distributed cache configuration\n      FileSystem fs \u003d FileSystem.get(conf);\n      Path frameworkPath \u003d fs.makeQualified(\n          new Path(uri.getScheme(), uri.getAuthority(), uri.getPath()));\n      FileContext fc \u003d FileContext.getFileContext(frameworkPath.toUri(), conf);\n      frameworkPath \u003d fc.resolvePath(frameworkPath);\n      uri \u003d frameworkPath.toUri();\n      try {\n        uri \u003d new URI(uri.getScheme(), uri.getAuthority(), uri.getPath(),\n            null, linkedName);\n      } catch (URISyntaxException e) {\n        throw new IllegalArgumentException(e);\n      }\n\n      DistributedCache.addCacheArchive(uri, conf);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/JobSubmitter.java"
    }
  }
}