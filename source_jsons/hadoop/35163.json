{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMLeveldbStateStoreService.java",
  "functionName": "loadContainerState",
  "functionId": "loadContainerState___iter-LeveldbIterator__keyPrefix-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
  "functionStartLine": 348,
  "functionEndLine": 444,
  "numCommitsSeen": 82,
  "timeTaken": 7129,
  "changeHistory": [
    "65e7469712be6cf393e29ef73cc94727eec81227",
    "9d3c39e9dd88b8f32223c01328581bb68507d415",
    "2bf9cc2c73944c9f7cde56714b8cf6995cfa539b",
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
    "66ca0a65408521d5f9b080dd16b353b49fb8eaea",
    "f155ab7cfa64e822171708040cb49889338961ce",
    "092fead5d9875fb3760206bcdd76cdafec5e9481",
    "a33ce45e35ce77dbf297df618aec3106eafda68c",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "d464f4d1c4dec483852fc8c0496787cba0af8f57",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
    "c57eac5dfe277845ab4522a1188023a73ee41539",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b"
  ],
  "changeHistoryShort": {
    "65e7469712be6cf393e29ef73cc94727eec81227": "Ymultichange(Yparameterchange,Ybodychange)",
    "9d3c39e9dd88b8f32223c01328581bb68507d415": "Ybodychange",
    "2bf9cc2c73944c9f7cde56714b8cf6995cfa539b": "Ybodychange",
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde": "Ybodychange",
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": "Ybodychange",
    "66ca0a65408521d5f9b080dd16b353b49fb8eaea": "Ybodychange",
    "f155ab7cfa64e822171708040cb49889338961ce": "Ybodychange",
    "092fead5d9875fb3760206bcdd76cdafec5e9481": "Ybodychange",
    "a33ce45e35ce77dbf297df618aec3106eafda68c": "Ybodychange",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Ybodychange",
    "d464f4d1c4dec483852fc8c0496787cba0af8f57": "Ybodychange",
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": "Ybodychange",
    "c57eac5dfe277845ab4522a1188023a73ee41539": "Ybodychange",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "65e7469712be6cf393e29ef73cc94727eec81227": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
      "commitDate": "20/08/18 8:14 AM",
      "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
          "commitDate": "20/08/18 8:14 AM",
          "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "28/07/18 8:22 AM",
          "commitNameOld": "3d586841aba99c7df98b2b4d3e48ec0144bad086",
          "commitAuthorOld": "bibinchundatt",
          "daysBetweenCommits": 22.99,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,94 +1,97 @@\n-  private RecoveredContainerState loadContainerState(ContainerId containerId,\n-      LeveldbIterator iter, String keyPrefix) throws IOException {\n-    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n+  private RecoveredContainerState loadContainerState(LeveldbIterator iter,\n+       String keyPrefix) throws IOException {\n+    ContainerId containerId \u003d ContainerId.fromString(\n+        keyPrefix.substring(CONTAINERS_KEY_PREFIX.length(),\n+            keyPrefix.length()-1));\n+    RecoveredContainerState rcs \u003d new RecoveredContainerState(containerId);\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n         ContainerTokenIdentifier containerTokenIdentifier \u003d BuilderUtils\n             .newContainerTokenIdentifier(rcs.startRequest.getContainerToken());\n         rcs.capability \u003d new ResourcePBImpl(\n             containerTokenIdentifier.getProto().getResource());\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n           rcs.status \u003d RecoveredContainerStatus.PAUSED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n         ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n             ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n         Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n         Token updatedToken \u003d Token\n             .newInstance(tokenIdentifierProto.toByteArray(),\n                 ContainerTokenIdentifier.KIND.toString(),\n                 currentToken.getPassword().array(), currentToken.getService());\n         rcs.startRequest.setContainerToken(updatedToken);\n         rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n         rcs.version \u003d tokenIdentifierProto.getVersion();\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n         String value \u003d asString(entry.getValue());\n         // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n         String[] unparsedRestartTimes \u003d\n             value.substring(1, value.length() - 1).split(\", \");\n         List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n         for (String restartTime : unparsedRestartTimes) {\n           if (!restartTime.isEmpty()) {\n             restartTimes.add(Long.parseLong(restartTime));\n           }\n         }\n         rcs.setRestartTimes(restartTimes);\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n         String resourceType \u003d suffix.substring(\n             CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n         ResourceMappings.AssignedResources assignedResources \u003d\n             ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n         rcs.getResourceMappings().addAssignedResources(resourceType,\n             assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RecoveredContainerState loadContainerState(LeveldbIterator iter,\n       String keyPrefix) throws IOException {\n    ContainerId containerId \u003d ContainerId.fromString(\n        keyPrefix.substring(CONTAINERS_KEY_PREFIX.length(),\n            keyPrefix.length()-1));\n    RecoveredContainerState rcs \u003d new RecoveredContainerState(containerId);\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n        ContainerTokenIdentifier containerTokenIdentifier \u003d BuilderUtils\n            .newContainerTokenIdentifier(rcs.startRequest.getContainerToken());\n        rcs.capability \u003d new ResourcePBImpl(\n            containerTokenIdentifier.getProto().getResource());\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n        ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n            ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n        Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n        Token updatedToken \u003d Token\n            .newInstance(tokenIdentifierProto.toByteArray(),\n                ContainerTokenIdentifier.KIND.toString(),\n                currentToken.getPassword().array(), currentToken.getService());\n        rcs.startRequest.setContainerToken(updatedToken);\n        rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n        rcs.version \u003d tokenIdentifierProto.getVersion();\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n        String value \u003d asString(entry.getValue());\n        // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n        String[] unparsedRestartTimes \u003d\n            value.substring(1, value.length() - 1).split(\", \");\n        List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n        for (String restartTime : unparsedRestartTimes) {\n          if (!restartTime.isEmpty()) {\n            restartTimes.add(Long.parseLong(restartTime));\n          }\n        }\n        rcs.setRestartTimes(restartTimes);\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, iter-LeveldbIterator, keyPrefix-String]",
            "newValue": "[iter-LeveldbIterator, keyPrefix-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8242. YARN NM: OOM error while reading back the state store on recovery. Contributed by Pradeep Ambati and Kanwaljeet Sachdev\n",
          "commitDate": "20/08/18 8:14 AM",
          "commitName": "65e7469712be6cf393e29ef73cc94727eec81227",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "28/07/18 8:22 AM",
          "commitNameOld": "3d586841aba99c7df98b2b4d3e48ec0144bad086",
          "commitAuthorOld": "bibinchundatt",
          "daysBetweenCommits": 22.99,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,94 +1,97 @@\n-  private RecoveredContainerState loadContainerState(ContainerId containerId,\n-      LeveldbIterator iter, String keyPrefix) throws IOException {\n-    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n+  private RecoveredContainerState loadContainerState(LeveldbIterator iter,\n+       String keyPrefix) throws IOException {\n+    ContainerId containerId \u003d ContainerId.fromString(\n+        keyPrefix.substring(CONTAINERS_KEY_PREFIX.length(),\n+            keyPrefix.length()-1));\n+    RecoveredContainerState rcs \u003d new RecoveredContainerState(containerId);\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n         ContainerTokenIdentifier containerTokenIdentifier \u003d BuilderUtils\n             .newContainerTokenIdentifier(rcs.startRequest.getContainerToken());\n         rcs.capability \u003d new ResourcePBImpl(\n             containerTokenIdentifier.getProto().getResource());\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n           rcs.status \u003d RecoveredContainerStatus.PAUSED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n         ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n             ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n         Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n         Token updatedToken \u003d Token\n             .newInstance(tokenIdentifierProto.toByteArray(),\n                 ContainerTokenIdentifier.KIND.toString(),\n                 currentToken.getPassword().array(), currentToken.getService());\n         rcs.startRequest.setContainerToken(updatedToken);\n         rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n         rcs.version \u003d tokenIdentifierProto.getVersion();\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n         String value \u003d asString(entry.getValue());\n         // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n         String[] unparsedRestartTimes \u003d\n             value.substring(1, value.length() - 1).split(\", \");\n         List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n         for (String restartTime : unparsedRestartTimes) {\n           if (!restartTime.isEmpty()) {\n             restartTimes.add(Long.parseLong(restartTime));\n           }\n         }\n         rcs.setRestartTimes(restartTimes);\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n         String resourceType \u003d suffix.substring(\n             CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n         ResourceMappings.AssignedResources assignedResources \u003d\n             ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n         rcs.getResourceMappings().addAssignedResources(resourceType,\n             assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private RecoveredContainerState loadContainerState(LeveldbIterator iter,\n       String keyPrefix) throws IOException {\n    ContainerId containerId \u003d ContainerId.fromString(\n        keyPrefix.substring(CONTAINERS_KEY_PREFIX.length(),\n            keyPrefix.length()-1));\n    RecoveredContainerState rcs \u003d new RecoveredContainerState(containerId);\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n        ContainerTokenIdentifier containerTokenIdentifier \u003d BuilderUtils\n            .newContainerTokenIdentifier(rcs.startRequest.getContainerToken());\n        rcs.capability \u003d new ResourcePBImpl(\n            containerTokenIdentifier.getProto().getResource());\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n        ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n            ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n        Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n        Token updatedToken \u003d Token\n            .newInstance(tokenIdentifierProto.toByteArray(),\n                ContainerTokenIdentifier.KIND.toString(),\n                currentToken.getPassword().array(), currentToken.getService());\n        rcs.startRequest.setContainerToken(updatedToken);\n        rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n        rcs.version \u003d tokenIdentifierProto.getVersion();\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n        String value \u003d asString(entry.getValue());\n        // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n        String[] unparsedRestartTimes \u003d\n            value.substring(1, value.length() - 1).split(\", \");\n        List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n        for (String restartTime : unparsedRestartTimes) {\n          if (!restartTime.isEmpty()) {\n            restartTimes.add(Long.parseLong(restartTime));\n          }\n        }\n        rcs.setRestartTimes(restartTimes);\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
          "extendedDetails": {}
        }
      ]
    },
    "9d3c39e9dd88b8f32223c01328581bb68507d415": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6966. NodeManager metrics may return wrong negative values when NM restart. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "23/07/18 11:07 AM",
      "commitName": "9d3c39e9dd88b8f32223c01328581bb68507d415",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "12/04/18 9:04 AM",
      "commitNameOld": "6bb128dfb893cf0e4aa2d3ecc65440668a1fc8d7",
      "commitAuthorOld": "Eric E Payne",
      "daysBetweenCommits": 102.09,
      "commitsBetweenForRepo": 1218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,94 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n+        ContainerTokenIdentifier containerTokenIdentifier \u003d BuilderUtils\n+            .newContainerTokenIdentifier(rcs.startRequest.getContainerToken());\n+        rcs.capability \u003d new ResourcePBImpl(\n+            containerTokenIdentifier.getProto().getResource());\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n           rcs.status \u003d RecoveredContainerStatus.PAUSED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n         ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n             ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n         Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n         Token updatedToken \u003d Token\n             .newInstance(tokenIdentifierProto.toByteArray(),\n                 ContainerTokenIdentifier.KIND.toString(),\n                 currentToken.getPassword().array(), currentToken.getService());\n         rcs.startRequest.setContainerToken(updatedToken);\n         rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n         rcs.version \u003d tokenIdentifierProto.getVersion();\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n         String value \u003d asString(entry.getValue());\n         // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n         String[] unparsedRestartTimes \u003d\n             value.substring(1, value.length() - 1).split(\", \");\n         List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n         for (String restartTime : unparsedRestartTimes) {\n           if (!restartTime.isEmpty()) {\n             restartTimes.add(Long.parseLong(restartTime));\n           }\n         }\n         rcs.setRestartTimes(restartTimes);\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n         String resourceType \u003d suffix.substring(\n             CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n         ResourceMappings.AssignedResources assignedResources \u003d\n             ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n         rcs.getResourceMappings().addAssignedResources(resourceType,\n             assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n        ContainerTokenIdentifier containerTokenIdentifier \u003d BuilderUtils\n            .newContainerTokenIdentifier(rcs.startRequest.getContainerToken());\n        rcs.capability \u003d new ResourcePBImpl(\n            containerTokenIdentifier.getProto().getResource());\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n        ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n            ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n        Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n        Token updatedToken \u003d Token\n            .newInstance(tokenIdentifierProto.toByteArray(),\n                ContainerTokenIdentifier.KIND.toString(),\n                currentToken.getPassword().array(), currentToken.getService());\n        rcs.startRequest.setContainerToken(updatedToken);\n        rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n        rcs.version \u003d tokenIdentifierProto.getVersion();\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n        String value \u003d asString(entry.getValue());\n        // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n        String[] unparsedRestartTimes \u003d\n            value.substring(1, value.length() - 1).split(\", \");\n        List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n        for (String restartTime : unparsedRestartTimes) {\n          if (!restartTime.isEmpty()) {\n            restartTimes.add(Long.parseLong(restartTime));\n          }\n        }\n        rcs.setRestartTimes(restartTimes);\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "2bf9cc2c73944c9f7cde56714b8cf6995cfa539b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8116. Nodemanager fails with NumberFormatException: For input string: . (Chandni Singh via wangda)\n\nChange-Id: Idd30cfca59982d3fc6e47aa1b88f844a78fae94d\n",
      "commitDate": "10/04/18 5:32 PM",
      "commitName": "2bf9cc2c73944c9f7cde56714b8cf6995cfa539b",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "13/03/18 5:55 PM",
      "commitNameOld": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 27.98,
      "commitsBetweenForRepo": 298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,90 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n           rcs.status \u003d RecoveredContainerStatus.PAUSED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n         ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n             ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n         Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n         Token updatedToken \u003d Token\n             .newInstance(tokenIdentifierProto.toByteArray(),\n                 ContainerTokenIdentifier.KIND.toString(),\n                 currentToken.getPassword().array(), currentToken.getService());\n         rcs.startRequest.setContainerToken(updatedToken);\n         rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n         rcs.version \u003d tokenIdentifierProto.getVersion();\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n         String value \u003d asString(entry.getValue());\n         // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n         String[] unparsedRestartTimes \u003d\n             value.substring(1, value.length() - 1).split(\", \");\n         List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n         for (String restartTime : unparsedRestartTimes) {\n-          restartTimes.add(Long.parseLong(restartTime));\n+          if (!restartTime.isEmpty()) {\n+            restartTimes.add(Long.parseLong(restartTime));\n+          }\n         }\n         rcs.setRestartTimes(restartTimes);\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n         String resourceType \u003d suffix.substring(\n             CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n         ResourceMappings.AssignedResources assignedResources \u003d\n             ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n         rcs.getResourceMappings().addAssignedResources(resourceType,\n             assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n        ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n            ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n        Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n        Token updatedToken \u003d Token\n            .newInstance(tokenIdentifierProto.toByteArray(),\n                ContainerTokenIdentifier.KIND.toString(),\n                currentToken.getPassword().array(), currentToken.getService());\n        rcs.startRequest.setContainerToken(updatedToken);\n        rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n        rcs.version \u003d tokenIdentifierProto.getVersion();\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n        String value \u003d asString(entry.getValue());\n        // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n        String[] unparsedRestartTimes \u003d\n            value.substring(1, value.length() - 1).split(\", \");\n        List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n        for (String restartTime : unparsedRestartTimes) {\n          if (!restartTime.isEmpty()) {\n            restartTimes.add(Long.parseLong(restartTime));\n          }\n        }\n        rcs.setRestartTimes(restartTimes);\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5015. Support sliding window retry capability for container restart. (Chandni Singh via wangda)\n\nChange-Id: I07addd3e4ba8d98456ee2ff1d5c540a38fe61dea\n",
      "commitDate": "13/03/18 5:55 PM",
      "commitName": "a5b27b3c678ad2f5cb8dbfa1b60ef5cd365f8bde",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/01/18 6:03 PM",
      "commitNameOld": "7f515f57ede74dae787994f37bfafd5d20c9aa4c",
      "commitAuthorOld": "Miklos Szegedi",
      "daysBetweenCommits": 69.95,
      "commitsBetweenForRepo": 446,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,88 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n           rcs.status \u003d RecoveredContainerStatus.PAUSED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n         ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n             ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n         Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n         Token updatedToken \u003d Token\n             .newInstance(tokenIdentifierProto.toByteArray(),\n                 ContainerTokenIdentifier.KIND.toString(),\n                 currentToken.getPassword().array(), currentToken.getService());\n         rcs.startRequest.setContainerToken(updatedToken);\n         rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n         rcs.version \u003d tokenIdentifierProto.getVersion();\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n+      } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n+        String value \u003d asString(entry.getValue());\n+        // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n+        String[] unparsedRestartTimes \u003d\n+            value.substring(1, value.length() - 1).split(\", \");\n+        List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n+        for (String restartTime : unparsedRestartTimes) {\n+          restartTimes.add(Long.parseLong(restartTime));\n+        }\n+        rcs.setRestartTimes(restartTimes);\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n         String resourceType \u003d suffix.substring(\n             CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n         ResourceMappings.AssignedResources assignedResources \u003d\n             ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n         rcs.getResourceMappings().addAssignedResources(resourceType,\n             assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n        ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n            ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n        Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n        Token updatedToken \u003d Token\n            .newInstance(tokenIdentifierProto.toByteArray(),\n                ContainerTokenIdentifier.KIND.toString(),\n                currentToken.getPassword().array(), currentToken.getService());\n        rcs.startRequest.setContainerToken(updatedToken);\n        rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n        rcs.version \u003d tokenIdentifierProto.getVersion();\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_RESTART_TIMES_SUFFIX)) {\n        String value \u003d asString(entry.getValue());\n        // parse the string format of List\u003cLong\u003e, e.g. [34, 21, 22]\n        String[] unparsedRestartTimes \u003d\n            value.substring(1, value.length() - 1).split(\", \");\n        List\u003cLong\u003e restartTimes \u003d new ArrayList\u003c\u003e();\n        for (String restartTime : unparsedRestartTimes) {\n          restartTimes.add(Long.parseLong(restartTime));\n        }\n        rcs.setRestartTimes(restartTimes);\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "a50be1b8f432f50c940b66d12c7de87b95ea47c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7275. NM Statestore cleanup for Container updates. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "16/10/17 1:12 PM",
      "commitName": "a50be1b8f432f50c940b66d12c7de87b95ea47c0",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/09/17 8:51 AM",
      "commitNameOld": "66ca0a65408521d5f9b080dd16b353b49fb8eaea",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 32.18,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,78 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n           rcs.status \u003d RecoveredContainerStatus.PAUSED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n             ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n-      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n-        rcs.capability \u003d new ResourcePBImpl(\n-            ResourceProto.parseFrom(entry.getValue()));\n+      } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n+        ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n+            ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n+        Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n+        Token updatedToken \u003d Token\n+            .newInstance(tokenIdentifierProto.toByteArray(),\n+                ContainerTokenIdentifier.KIND.toString(),\n+                currentToken.getPassword().array(), currentToken.getService());\n+        rcs.startRequest.setContainerToken(updatedToken);\n+        rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n+        rcs.version \u003d tokenIdentifierProto.getVersion();\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n         String resourceType \u003d suffix.substring(\n             CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n         ResourceMappings.AssignedResources assignedResources \u003d\n             ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n         rcs.getResourceMappings().addAssignedResources(resourceType,\n             assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_UPDATE_TOKEN_SUFFIX)) {\n        ContainerTokenIdentifierProto tokenIdentifierProto \u003d\n            ContainerTokenIdentifierProto.parseFrom(entry.getValue());\n        Token currentToken \u003d rcs.getStartRequest().getContainerToken();\n        Token updatedToken \u003d Token\n            .newInstance(tokenIdentifierProto.toByteArray(),\n                ContainerTokenIdentifier.KIND.toString(),\n                currentToken.getPassword().array(), currentToken.getService());\n        rcs.startRequest.setContainerToken(updatedToken);\n        rcs.capability \u003d new ResourcePBImpl(tokenIdentifierProto.getResource());\n        rcs.version \u003d tokenIdentifierProto.getVersion();\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "66ca0a65408521d5f9b080dd16b353b49fb8eaea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6059. Update paused container state in the NM state store. (Hitesh Sharma via asuresh)\n",
      "commitDate": "14/09/17 8:51 AM",
      "commitName": "66ca0a65408521d5f9b080dd16b353b49fb8eaea",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/09/17 2:13 PM",
      "commitNameOld": "f155ab7cfa64e822171708040cb49889338961ce",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.78,
      "commitsBetweenForRepo": 102,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,70 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n+      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n+        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n+            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n+            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n+          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n+        }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n-            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n+            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n+            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n         rcs.capability \u003d new ResourcePBImpl(\n             ResourceProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n         String resourceType \u003d suffix.substring(\n             CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n         ResourceMappings.AssignedResources assignedResources \u003d\n             ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n         rcs.getResourceMappings().addAssignedResources(resourceType,\n             assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_PAUSED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.LAUNCHED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)) {\n          rcs.status \u003d RecoveredContainerStatus.PAUSED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)\n            ||(rcs.status \u003d\u003d RecoveredContainerStatus.PAUSED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "f155ab7cfa64e822171708040cb49889338961ce": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7033. Add support for NM Recovery of assigned resources (e.g. GPU\u0027s, NUMA, FPGA\u0027s) to container. (Devaraj K and Wangda Tan)\n\nChange-Id: Iffd18bb95debe1c8cc55e30abc1d8f663e9d0e30\n",
      "commitDate": "07/09/17 2:13 PM",
      "commitName": "f155ab7cfa64e822171708040cb49889338961ce",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 8.63,
      "commitsBetweenForRepo": 107,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,63 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n         rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n         rcs.capability \u003d new ResourcePBImpl(\n             ResourceProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n+      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n+        String resourceType \u003d suffix.substring(\n+            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n+        ResourceMappings.AssignedResources assignedResources \u003d\n+            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n+        rcs.getResourceMappings().addAssignedResources(resourceType,\n+            assignedResources);\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else if (suffix.startsWith(CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX)) {\n        String resourceType \u003d suffix.substring(\n            CONTAINER_ASSIGNED_RESOURCES_KEY_SUFFIX.length());\n        ResourceMappings.AssignedResources assignedResources \u003d\n            ResourceMappings.AssignedResources.fromBytes(entry.getValue());\n        rcs.getResourceMappings().addAssignedResources(resourceType,\n            assignedResources);\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "092fead5d9875fb3760206bcdd76cdafec5e9481": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5792. Adopt the id prefix for YARN, MR, and DS entities. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "092fead5d9875fb3760206bcdd76cdafec5e9481",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "24/08/17 4:04 AM",
      "commitNameOld": "de0cba700bcf4276726c0aa9df8d738787debc17",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 5.79,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n+      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n+        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n         rcs.capability \u003d new ResourcePBImpl(\n             ResourceProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else {\n         LOG.warn(\"the container \" + containerId\n             + \" will be killed because of the unknown key \" + key\n             + \" during recovery.\");\n         containerUnknownKeySuffixes.put(containerId, suffix);\n         rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_START_TIME_KEY_SUFFIX)) {\n        rcs.setStartTime(Long.parseLong(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "a33ce45e35ce77dbf297df618aec3106eafda68c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5547. NMLeveldbStateStore should be more tolerant of unknown keys. Contributed by Ajith S\n",
      "commitDate": "24/01/17 8:17 AM",
      "commitName": "a33ce45e35ce77dbf297df618aec3106eafda68c",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "13/09/16 7:41 AM",
      "commitNameOld": "e7933097354a246b080b46f1a4ca2ef0f39f3b38",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 133.07,
      "commitsBetweenForRepo": 880,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,54 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n         rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n         rcs.capability \u003d new ResourcePBImpl(\n             ResourceProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else {\n-        throw new IOException(\"Unexpected container state key: \" + key);\n+        LOG.warn(\"the container \" + containerId\n+            + \" will be killed because of the unknown key \" + key\n+            + \" during recovery.\");\n+        containerUnknownKeySuffixes.put(containerId, suffix);\n+        rcs.setRecoveryType(RecoveredContainerType.KILL);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else {\n        LOG.warn(\"the container \" + containerId\n            + \" will be killed because of the unknown key \" + key\n            + \" during recovery.\");\n        containerUnknownKeySuffixes.put(containerId, suffix);\n        rcs.setRecoveryType(RecoveredContainerType.KILL);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 77.03,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,50 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n+      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n+        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.QUEUED;\n         }\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n             || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n         rcs.capability \u003d new ResourcePBImpl(\n             ResourceProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else {\n         throw new IOException(\"Unexpected container state key: \" + key);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_VERSION_KEY_SUFFIX)) {\n        rcs.version \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else {\n        throw new IOException(\"Unexpected container state key: \" + key);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "d464f4d1c4dec483852fc8c0496787cba0af8f57": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5049. Extend NMStateStore to save queued container information. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "11/05/16 7:10 PM",
      "commitName": "d464f4d1c4dec483852fc8c0496787cba0af8f57",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/04/16 3:39 AM",
      "commitNameOld": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 12.65,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,48 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n-      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n+      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n+          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n+        }\n+      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n+        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n+            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n         rcs.capability \u003d new ResourcePBImpl(\n             ResourceProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n         rcs.setRemainingRetryAttempts(\n             Integer.parseInt(asString(entry.getValue())));\n       } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n         rcs.setWorkDir(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n         rcs.setLogDir(asString(entry.getValue()));\n       } else {\n         throw new IOException(\"Unexpected container state key: \" + key);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_QUEUED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.QUEUED;\n        }\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if ((rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED)\n            || (rcs.status \u003d\u003d RecoveredContainerStatus.QUEUED)) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else {\n        throw new IOException(\"Unexpected container state key: \" + key);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3998. Add support in the NodeManager to re-launch containers. Contributed by Jun Gong.\n",
      "commitDate": "29/04/16 3:39 AM",
      "commitName": "0f25a1bb52bc56661fd020a6ba82df99f8c6ef1f",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "28/04/16 9:54 PM",
      "commitNameOld": "4a8508501bc753858693dacdafba61d604702f71",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.24,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,43 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n         rcs.capability \u003d new ResourcePBImpl(\n             ResourceProto.parseFrom(entry.getValue()));\n+      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n+        rcs.setRemainingRetryAttempts(\n+            Integer.parseInt(asString(entry.getValue())));\n+      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n+        rcs.setWorkDir(asString(entry.getValue()));\n+      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n+        rcs.setLogDir(asString(entry.getValue()));\n       } else {\n         throw new IOException(\"Unexpected container state key: \" + key);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_REMAIN_RETRIES_KEY_SUFFIX)) {\n        rcs.setRemainingRetryAttempts(\n            Integer.parseInt(asString(entry.getValue())));\n      } else if (suffix.equals(CONTAINER_WORK_DIR_KEY_SUFFIX)) {\n        rcs.setWorkDir(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_LOG_DIR_KEY_SUFFIX)) {\n        rcs.setLogDir(asString(entry.getValue()));\n      } else {\n        throw new IOException(\"Unexpected container state key: \" + key);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "c57eac5dfe277845ab4522a1188023a73ee41539": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3868. Recovery support for container resizing. Contributed by Meng Ding\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "c57eac5dfe277845ab4522a1188023a73ee41539",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/02/15 11:46 AM",
      "commitNameOld": "04f5ef18f7877ce30b12b1a3c1e851c420531b72",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 223.03,
      "commitsBetweenForRepo": 1710,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,36 @@\n   private RecoveredContainerState loadContainerState(ContainerId containerId,\n       LeveldbIterator iter, String keyPrefix) throws IOException {\n     RecoveredContainerState rcs \u003d new RecoveredContainerState();\n     rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(keyPrefix)) {\n         break;\n       }\n       iter.next();\n \n       String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n       if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n         rcs.startRequest \u003d new StartContainerRequestPBImpl(\n             StartContainerRequestProto.parseFrom(entry.getValue()));\n       } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n         rcs.diagnostics \u003d asString(entry.getValue());\n       } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n         if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n           rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n         }\n       } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n         rcs.killed \u003d true;\n       } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n         rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n         rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n+      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n+        rcs.capability \u003d new ResourcePBImpl(\n+            ResourceProto.parseFrom(entry.getValue()));\n       } else {\n         throw new IOException(\"Unexpected container state key: \" + key);\n       }\n     }\n     return rcs;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_RESOURCE_CHANGED_KEY_SUFFIX)) {\n        rcs.capability \u003d new ResourcePBImpl(\n            ResourceProto.parseFrom(entry.getValue()));\n      } else {\n        throw new IOException(\"Unexpected container state key: \" + key);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java",
      "extendedDetails": {}
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,33 @@\n+  private RecoveredContainerState loadContainerState(ContainerId containerId,\n+      LeveldbIterator iter, String keyPrefix) throws IOException {\n+    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n+    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n+    while (iter.hasNext()) {\n+      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n+      String key \u003d asString(entry.getKey());\n+      if (!key.startsWith(keyPrefix)) {\n+        break;\n+      }\n+      iter.next();\n+\n+      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n+      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n+        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n+            StartContainerRequestProto.parseFrom(entry.getValue()));\n+      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n+        rcs.diagnostics \u003d asString(entry.getValue());\n+      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n+        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n+          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n+        }\n+      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n+        rcs.killed \u003d true;\n+      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n+        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n+        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n+      } else {\n+        throw new IOException(\"Unexpected container state key: \" + key);\n+      }\n+    }\n+    return rcs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private RecoveredContainerState loadContainerState(ContainerId containerId,\n      LeveldbIterator iter, String keyPrefix) throws IOException {\n    RecoveredContainerState rcs \u003d new RecoveredContainerState();\n    rcs.status \u003d RecoveredContainerStatus.REQUESTED;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(keyPrefix)) {\n        break;\n      }\n      iter.next();\n\n      String suffix \u003d key.substring(keyPrefix.length()-1);  // start with \u0027/\u0027\n      if (suffix.equals(CONTAINER_REQUEST_KEY_SUFFIX)) {\n        rcs.startRequest \u003d new StartContainerRequestPBImpl(\n            StartContainerRequestProto.parseFrom(entry.getValue()));\n      } else if (suffix.equals(CONTAINER_DIAGS_KEY_SUFFIX)) {\n        rcs.diagnostics \u003d asString(entry.getValue());\n      } else if (suffix.equals(CONTAINER_LAUNCHED_KEY_SUFFIX)) {\n        if (rcs.status \u003d\u003d RecoveredContainerStatus.REQUESTED) {\n          rcs.status \u003d RecoveredContainerStatus.LAUNCHED;\n        }\n      } else if (suffix.equals(CONTAINER_KILLED_KEY_SUFFIX)) {\n        rcs.killed \u003d true;\n      } else if (suffix.equals(CONTAINER_EXIT_CODE_KEY_SUFFIX)) {\n        rcs.status \u003d RecoveredContainerStatus.COMPLETED;\n        rcs.exitCode \u003d Integer.parseInt(asString(entry.getValue()));\n      } else {\n        throw new IOException(\"Unexpected container state key: \" + key);\n      }\n    }\n    return rcs;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/recovery/NMLeveldbStateStoreService.java"
    }
  }
}