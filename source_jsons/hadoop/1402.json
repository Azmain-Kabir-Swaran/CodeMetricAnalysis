{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HdfsFileStatus.java",
  "functionName": "convert",
  "functionId": "convert___isdir-boolean__symlink-boolean__p-FsPermission__f-Set__Flags__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/HdfsFileStatus.java",
  "functionStartLine": 496,
  "functionEndLine": 516,
  "numCommitsSeen": 29,
  "timeTaken": 2891,
  "changeHistory": [
    "0e560f3b8d194c10dce06443979df4074e14b0db",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2"
  ],
  "changeHistoryShort": {
    "0e560f3b8d194c10dce06443979df4074e14b0db": "Ymultichange(Yparameterchange,Ymodifierchange)",
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e560f3b8d194c10dce06443979df4074e14b0db": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange)",
      "commitMessage": "HDFS-12681. Make HdfsLocatedFileStatus a subtype of LocatedFileStatus\n",
      "commitDate": "29/11/17 8:28 PM",
      "commitName": "0e560f3b8d194c10dce06443979df4074e14b0db",
      "commitAuthor": "Chris Douglas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12681. Make HdfsLocatedFileStatus a subtype of LocatedFileStatus\n",
          "commitDate": "29/11/17 8:28 PM",
          "commitName": "0e560f3b8d194c10dce06443979df4074e14b0db",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "15/11/17 7:20 PM",
          "commitNameOld": "675e9a8f57570771a0219d95940681b067d36b94",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  protected static FsPermission convert(boolean isdir, boolean symlink,\n-      FsPermission p, EnumSet\u003cFlags\u003e f) {\n+  static FsPermission convert(boolean isdir, boolean symlink,\n+                              FsPermission p, Set\u003cFlags\u003e f) {\n     if (p instanceof FsPermissionExtension) {\n       // verify flags are set consistently\n       assert p.getAclBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_ACL);\n       assert p.getEncryptedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_CRYPT);\n       assert p.getErasureCodedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_EC);\n       return p;\n     }\n     if (null \u003d\u003d p) {\n       if (isdir) {\n         p \u003d FsPermission.getDirDefault();\n       } else if (symlink) {\n         p \u003d FsPermission.getDefault();\n       } else {\n         p \u003d FsPermission.getFileDefault();\n       }\n     }\n     return new FsPermissionExtension(p, f.contains(Flags.HAS_ACL),\n         f.contains(Flags.HAS_CRYPT), f.contains(Flags.HAS_EC));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FsPermission convert(boolean isdir, boolean symlink,\n                              FsPermission p, Set\u003cFlags\u003e f) {\n    if (p instanceof FsPermissionExtension) {\n      // verify flags are set consistently\n      assert p.getAclBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_ACL);\n      assert p.getEncryptedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_CRYPT);\n      assert p.getErasureCodedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_EC);\n      return p;\n    }\n    if (null \u003d\u003d p) {\n      if (isdir) {\n        p \u003d FsPermission.getDirDefault();\n      } else if (symlink) {\n        p \u003d FsPermission.getDefault();\n      } else {\n        p \u003d FsPermission.getFileDefault();\n      }\n    }\n    return new FsPermissionExtension(p, f.contains(Flags.HAS_ACL),\n        f.contains(Flags.HAS_CRYPT), f.contains(Flags.HAS_EC));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/HdfsFileStatus.java",
          "extendedDetails": {
            "oldValue": "[isdir-boolean, symlink-boolean, p-FsPermission, f-EnumSet\u003cFlags\u003e]",
            "newValue": "[isdir-boolean, symlink-boolean, p-FsPermission, f-Set\u003cFlags\u003e]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-12681. Make HdfsLocatedFileStatus a subtype of LocatedFileStatus\n",
          "commitDate": "29/11/17 8:28 PM",
          "commitName": "0e560f3b8d194c10dce06443979df4074e14b0db",
          "commitAuthor": "Chris Douglas",
          "commitDateOld": "15/11/17 7:20 PM",
          "commitNameOld": "675e9a8f57570771a0219d95940681b067d36b94",
          "commitAuthorOld": "Chris Douglas",
          "daysBetweenCommits": 14.05,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n-  protected static FsPermission convert(boolean isdir, boolean symlink,\n-      FsPermission p, EnumSet\u003cFlags\u003e f) {\n+  static FsPermission convert(boolean isdir, boolean symlink,\n+                              FsPermission p, Set\u003cFlags\u003e f) {\n     if (p instanceof FsPermissionExtension) {\n       // verify flags are set consistently\n       assert p.getAclBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_ACL);\n       assert p.getEncryptedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_CRYPT);\n       assert p.getErasureCodedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_EC);\n       return p;\n     }\n     if (null \u003d\u003d p) {\n       if (isdir) {\n         p \u003d FsPermission.getDirDefault();\n       } else if (symlink) {\n         p \u003d FsPermission.getDefault();\n       } else {\n         p \u003d FsPermission.getFileDefault();\n       }\n     }\n     return new FsPermissionExtension(p, f.contains(Flags.HAS_ACL),\n         f.contains(Flags.HAS_CRYPT), f.contains(Flags.HAS_EC));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static FsPermission convert(boolean isdir, boolean symlink,\n                              FsPermission p, Set\u003cFlags\u003e f) {\n    if (p instanceof FsPermissionExtension) {\n      // verify flags are set consistently\n      assert p.getAclBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_ACL);\n      assert p.getEncryptedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_CRYPT);\n      assert p.getErasureCodedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_EC);\n      return p;\n    }\n    if (null \u003d\u003d p) {\n      if (isdir) {\n        p \u003d FsPermission.getDirDefault();\n      } else if (symlink) {\n        p \u003d FsPermission.getDefault();\n      } else {\n        p \u003d FsPermission.getFileDefault();\n      }\n    }\n    return new FsPermissionExtension(p, f.contains(Flags.HAS_ACL),\n        f.contains(Flags.HAS_CRYPT), f.contains(Flags.HAS_EC));\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/HdfsFileStatus.java",
          "extendedDetails": {
            "oldValue": "[protected, static]",
            "newValue": "[static]"
          }
        }
      ]
    },
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6984. Serialize FileStatus via protobuf.\n",
      "commitDate": "02/08/17 12:12 PM",
      "commitName": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
      "commitAuthor": "Chris Douglas",
      "diff": "@@ -0,0 +1,21 @@\n+  protected static FsPermission convert(boolean isdir, boolean symlink,\n+      FsPermission p, EnumSet\u003cFlags\u003e f) {\n+    if (p instanceof FsPermissionExtension) {\n+      // verify flags are set consistently\n+      assert p.getAclBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_ACL);\n+      assert p.getEncryptedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_CRYPT);\n+      assert p.getErasureCodedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_EC);\n+      return p;\n+    }\n+    if (null \u003d\u003d p) {\n+      if (isdir) {\n+        p \u003d FsPermission.getDirDefault();\n+      } else if (symlink) {\n+        p \u003d FsPermission.getDefault();\n+      } else {\n+        p \u003d FsPermission.getFileDefault();\n+      }\n+    }\n+    return new FsPermissionExtension(p, f.contains(Flags.HAS_ACL),\n+        f.contains(Flags.HAS_CRYPT), f.contains(Flags.HAS_EC));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected static FsPermission convert(boolean isdir, boolean symlink,\n      FsPermission p, EnumSet\u003cFlags\u003e f) {\n    if (p instanceof FsPermissionExtension) {\n      // verify flags are set consistently\n      assert p.getAclBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_ACL);\n      assert p.getEncryptedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_CRYPT);\n      assert p.getErasureCodedBit() \u003d\u003d f.contains(HdfsFileStatus.Flags.HAS_EC);\n      return p;\n    }\n    if (null \u003d\u003d p) {\n      if (isdir) {\n        p \u003d FsPermission.getDirDefault();\n      } else if (symlink) {\n        p \u003d FsPermission.getDefault();\n      } else {\n        p \u003d FsPermission.getFileDefault();\n      }\n    }\n    return new FsPermissionExtension(p, f.contains(Flags.HAS_ACL),\n        f.contains(Flags.HAS_CRYPT), f.contains(Flags.HAS_EC));\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/protocol/HdfsFileStatus.java"
    }
  }
}