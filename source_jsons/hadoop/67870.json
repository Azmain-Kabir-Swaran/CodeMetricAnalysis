{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleCopyListing.java",
  "functionName": "doBuildListingWithSnapshotDiff",
  "functionId": "doBuildListingWithSnapshotDiff___fileListWriter-SequenceFile.Writer__context-DistCpContext",
  "sourceFilePath": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
  "functionStartLine": 267,
  "functionEndLine": 314,
  "numCommitsSeen": 51,
  "timeTaken": 3703,
  "changeHistory": [
    "3e3963b035911703c61e6d9a2939eb894da5644c",
    "26172a94d6431e70d7fe15d66be9a7e195f79f60",
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
    "98bdb5139769eb55893971b43b9c23da9513a784",
    "95f32015ad9273420299130a9f10acdbafe63556",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926"
  ],
  "changeHistoryShort": {
    "3e3963b035911703c61e6d9a2939eb894da5644c": "Ybodychange",
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": "Ymultichange(Yparameterchange,Ybodychange)",
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": "Ybodychange",
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": "Ybodychange",
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": "Ybodychange",
    "98bdb5139769eb55893971b43b9c23da9513a784": "Ybodychange",
    "95f32015ad9273420299130a9f10acdbafe63556": "Ymodifierchange",
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3e3963b035911703c61e6d9a2939eb894da5644c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15552. Move logging APIs over to slf4j in hadoop-tools - Part2. Contributed by Ian Pickering.\n",
      "commitDate": "15/08/18 8:31 AM",
      "commitName": "3e3963b035911703c61e6d9a2939eb894da5644c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/03/17 8:04 PM",
      "commitNameOld": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 501.52,
      "commitsBetweenForRepo": 4071,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   protected void doBuildListingWithSnapshotDiff(\n       SequenceFile.Writer fileListWriter, DistCpContext context)\n       throws IOException {\n     ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n     Path sourceRoot \u003d context.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n       List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n         diff.setTarget(\n             new Path(context.getSourcePaths().get(0), diff.getTarget()));\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n           addToFileListing(fileListWriter,\n               sourceRoot, diff.getTarget(), context);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n           addToFileListing(fileListWriter,\n               sourceRoot, diff.getTarget(), context);\n \n           FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n                 distCpSync.getTraverseExcludeList(diff.getSource(),\n                     context.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                 sourceRoot, context, excludeList, fileStatuses);\n           }\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(fileStatuses, fileListWriter);\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n-      IOUtils.cleanup(LOG, fileListWriter);\n+      IOUtils.cleanupWithLogger(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpContext context)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n    Path sourceRoot \u003d context.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.setTarget(\n            new Path(context.getSourcePaths().get(0), diff.getTarget()));\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), context);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), context);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.getSource(),\n                    context.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, context, excludeList, fileStatuses);\n          }\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(fileStatuses, fileListWriter);\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "26172a94d6431e70d7fe15d66be9a7e195f79f60": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
      "commitDate": "31/03/17 8:04 PM",
      "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   protected void doBuildListingWithSnapshotDiff(\n-      SequenceFile.Writer fileListWriter, DistCpOptions options)\n+      SequenceFile.Writer fileListWriter, DistCpContext context)\n       throws IOException {\n     ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n-    Path sourceRoot \u003d options.getSourcePaths().get(0);\n+    Path sourceRoot \u003d context.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n       List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n         diff.setTarget(\n-            new Path(options.getSourcePaths().get(0), diff.getTarget()));\n+            new Path(context.getSourcePaths().get(0), diff.getTarget()));\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n           addToFileListing(fileListWriter,\n-              sourceRoot, diff.getTarget(), options);\n+              sourceRoot, diff.getTarget(), context);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n           addToFileListing(fileListWriter,\n-              sourceRoot, diff.getTarget(), options);\n+              sourceRoot, diff.getTarget(), context);\n \n           FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n                 distCpSync.getTraverseExcludeList(diff.getSource(),\n-                    options.getSourcePaths().get(0));\n+                    context.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n-                sourceRoot, options, excludeList, fileStatuses);\n+                sourceRoot, context, excludeList, fileStatuses);\n           }\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(fileStatuses, fileListWriter);\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpContext context)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n    Path sourceRoot \u003d context.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.setTarget(\n            new Path(context.getSourcePaths().get(0), diff.getTarget()));\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), context);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), context);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.getSource(),\n                    context.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, context, excludeList, fileStatuses);\n          }\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(fileStatuses, fileListWriter);\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {
            "oldValue": "[fileListWriter-SequenceFile.Writer, options-DistCpOptions]",
            "newValue": "[fileListWriter-SequenceFile.Writer, context-DistCpContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-14267. Make DistCpOptions immutable. Contributed by Mingliang Liu\n",
          "commitDate": "31/03/17 8:04 PM",
          "commitName": "26172a94d6431e70d7fe15d66be9a7e195f79f60",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "30/03/17 5:38 PM",
          "commitNameOld": "bf3fb585aaf2b179836e139c041fc87920a3c886",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,48 @@\n   protected void doBuildListingWithSnapshotDiff(\n-      SequenceFile.Writer fileListWriter, DistCpOptions options)\n+      SequenceFile.Writer fileListWriter, DistCpContext context)\n       throws IOException {\n     ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n-    Path sourceRoot \u003d options.getSourcePaths().get(0);\n+    Path sourceRoot \u003d context.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n       List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n         diff.setTarget(\n-            new Path(options.getSourcePaths().get(0), diff.getTarget()));\n+            new Path(context.getSourcePaths().get(0), diff.getTarget()));\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n           addToFileListing(fileListWriter,\n-              sourceRoot, diff.getTarget(), options);\n+              sourceRoot, diff.getTarget(), context);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n           addToFileListing(fileListWriter,\n-              sourceRoot, diff.getTarget(), options);\n+              sourceRoot, diff.getTarget(), context);\n \n           FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n                 distCpSync.getTraverseExcludeList(diff.getSource(),\n-                    options.getSourcePaths().get(0));\n+                    context.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n-                sourceRoot, options, excludeList, fileStatuses);\n+                sourceRoot, context, excludeList, fileStatuses);\n           }\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(fileStatuses, fileListWriter);\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpContext context)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n    Path sourceRoot \u003d context.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.setTarget(\n            new Path(context.getSourcePaths().get(0), diff.getTarget()));\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), context);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), context);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.getSource(),\n                    context.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, context, excludeList, fileStatuses);\n          }\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(fileStatuses, fileListWriter);\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
          "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
          "extendedDetails": {}
        }
      ]
    },
    "8650cc84f20e7d8c32dcdcd91c94372d476e2276": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "19/10/16 5:37 PM",
      "commitName": "8650cc84f20e7d8c32dcdcd91c94372d476e2276",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "17/10/16 10:47 PM",
      "commitNameOld": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   protected void doBuildListingWithSnapshotDiff(\n       SequenceFile.Writer fileListWriter, DistCpOptions options)\n       throws IOException {\n-    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n+    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n     Path sourceRoot \u003d options.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n       List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n-        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n+        diff.setTarget(\n+            new Path(options.getSourcePaths().get(0), diff.getTarget()));\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n-          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n+          addToFileListing(fileListWriter,\n+              sourceRoot, diff.getTarget(), options);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n-          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n+          addToFileListing(fileListWriter,\n+              sourceRoot, diff.getTarget(), options);\n \n-          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n+          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n-                distCpSync.getTraverseExcludeList(diff.source,\n+                distCpSync.getTraverseExcludeList(diff.getSource(),\n                     options.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                 sourceRoot, options, excludeList, fileStatuses);\n           }\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(fileStatuses, fileListWriter);\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpOptions options)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n    Path sourceRoot \u003d options.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.setTarget(\n            new Path(options.getSourcePaths().get(0), diff.getTarget()));\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), options);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), options);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.getSource(),\n                    options.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, options, excludeList, fileStatuses);\n          }\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(fileStatuses, fileListWriter);\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\"\n\nThis reverts commit 412c4c9a342b73bf1c1a7f43ea91245cbf94d02d.\n",
      "commitDate": "17/10/16 10:47 PM",
      "commitName": "0bc6d37f3c1e7c2a8682dffa95461a884bd6ba17",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "17/10/16 11:04 AM",
      "commitNameOld": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 0.49,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,45 @@\n   protected void doBuildListingWithSnapshotDiff(\n       SequenceFile.Writer fileListWriter, DistCpOptions options)\n       throws IOException {\n-    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n+    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n     Path sourceRoot \u003d options.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n       List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n-        diff.setTarget(\n-            new Path(options.getSourcePaths().get(0), diff.getTarget()));\n+        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n-          addToFileListing(fileListWriter,\n-              sourceRoot, diff.getTarget(), options);\n+          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n-          addToFileListing(fileListWriter,\n-              sourceRoot, diff.getTarget(), options);\n+          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n \n-          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n+          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n-                distCpSync.getTraverseExcludeList(diff.getSource(),\n+                distCpSync.getTraverseExcludeList(diff.source,\n                     options.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                 sourceRoot, options, excludeList, fileStatuses);\n           }\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(fileStatuses, fileListWriter);\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpOptions options)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n    Path sourceRoot \u003d options.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.source,\n                    options.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, options, excludeList, fileStatuses);\n          }\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(fileStatuses, fileListWriter);\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9820. Improve distcp to support efficient restore to an earlier snapshot. Contributed by Yongjun Zhang.\n",
      "commitDate": "17/10/16 11:04 AM",
      "commitName": "412c4c9a342b73bf1c1a7f43ea91245cbf94d02d",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "19/09/16 3:16 PM",
      "commitNameOld": "98bdb5139769eb55893971b43b9c23da9513a784",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 27.82,
      "commitsBetweenForRepo": 195,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   protected void doBuildListingWithSnapshotDiff(\n       SequenceFile.Writer fileListWriter, DistCpOptions options)\n       throws IOException {\n-    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n+    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n     Path sourceRoot \u003d options.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n       List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n-        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n+        diff.setTarget(\n+            new Path(options.getSourcePaths().get(0), diff.getTarget()));\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n-          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n+          addToFileListing(fileListWriter,\n+              sourceRoot, diff.getTarget(), options);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n-          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n+          addToFileListing(fileListWriter,\n+              sourceRoot, diff.getTarget(), options);\n \n-          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n+          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n-                distCpSync.getTraverseExcludeList(diff.source,\n+                distCpSync.getTraverseExcludeList(diff.getSource(),\n                     options.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                 sourceRoot, options, excludeList, fileStatuses);\n           }\n         }\n       }\n       if (randomizeFileListing) {\n         writeToFileListing(fileStatuses, fileListWriter);\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpOptions options)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffListForCopyListing();\n    Path sourceRoot \u003d options.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.setTarget(\n            new Path(options.getSourcePaths().get(0), diff.getTarget()));\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), options);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter,\n              sourceRoot, diff.getTarget(), options);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.getTarget());\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.getSource(),\n                    options.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, options, excludeList, fileStatuses);\n          }\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(fileStatuses, fileListWriter);\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "98bdb5139769eb55893971b43b9c23da9513a784": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13169. Randomize file list in SimpleCopyListing. Contributed by Rajesh Balamohan.\n",
      "commitDate": "19/09/16 3:16 PM",
      "commitName": "98bdb5139769eb55893971b43b9c23da9513a784",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "21/04/16 12:17 PM",
      "commitNameOld": "a749ba0ceaa843aa83146b6bea19e031c8dc3296",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 151.12,
      "commitsBetweenForRepo": 1103,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   protected void doBuildListingWithSnapshotDiff(\n       SequenceFile.Writer fileListWriter, DistCpOptions options)\n       throws IOException {\n     ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n     Path sourceRoot \u003d options.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n+      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n         diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n           addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n           addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n \n           FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n                 distCpSync.getTraverseExcludeList(diff.source,\n                     options.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n-                sourceRoot, options, excludeList);\n+                sourceRoot, options, excludeList, fileStatuses);\n           }\n         }\n       }\n+      if (randomizeFileListing) {\n+        writeToFileListing(fileStatuses, fileListWriter);\n+      }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpOptions options)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n    Path sourceRoot \u003d options.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      List\u003cFileStatusInfo\u003e fileStatuses \u003d Lists.newArrayList();\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.source,\n                    options.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, options, excludeList, fileStatuses);\n          }\n        }\n      }\n      if (randomizeFileListing) {\n        writeToFileListing(fileStatuses, fileListWriter);\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {}
    },
    "95f32015ad9273420299130a9f10acdbafe63556": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-9630. DistCp minor refactoring and clean up. Contributed by Kai Zheng.\n\nChange-Id: I363c4ffcac32116ddcdc0a22fac3db92f14a0db0\n",
      "commitDate": "11/01/16 9:46 AM",
      "commitName": "95f32015ad9273420299130a9f10acdbafe63556",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "20/08/15 8:02 AM",
      "commitNameOld": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 144.11,
      "commitsBetweenForRepo": 960,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n-  public void doBuildListingWithSnapshotDiff(SequenceFile.Writer fileListWriter,\n-      DistCpOptions options) throws IOException {\n+  protected void doBuildListingWithSnapshotDiff(\n+      SequenceFile.Writer fileListWriter, DistCpOptions options)\n+      throws IOException {\n     ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n     Path sourceRoot \u003d options.getSourcePaths().get(0);\n     FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n \n     try {\n       for (DiffInfo diff : diffList) {\n         // add snapshot paths prefix\n         diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n         if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n           addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n         } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n           addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n \n           FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n           if (sourceStatus.isDirectory()) {\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(\"Adding source dir for traverse: \" +\n                   sourceStatus.getPath());\n             }\n \n             HashSet\u003cString\u003e excludeList \u003d\n                 distCpSync.getTraverseExcludeList(diff.source,\n                     options.getSourcePaths().get(0));\n \n             ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n             sourceDirs.add(sourceStatus);\n \n             traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                 sourceRoot, options, excludeList);\n           }\n         }\n       }\n       fileListWriter.close();\n       fileListWriter \u003d null;\n     } finally {\n       IOUtils.cleanup(LOG, fileListWriter);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void doBuildListingWithSnapshotDiff(\n      SequenceFile.Writer fileListWriter, DistCpOptions options)\n      throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n    Path sourceRoot \u003d options.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.source,\n                    options.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, options, excludeList);\n          }\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[protected]"
      }
    },
    "0bc15cb6e60dc60885234e01dec1c7cb4557a926": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8828. Utilize Snapshot diff report to build diff copy list in distcp. (Yufei Gu via Yongjun Zhang)\n",
      "commitDate": "20/08/15 8:02 AM",
      "commitName": "0bc15cb6e60dc60885234e01dec1c7cb4557a926",
      "commitAuthor": "Yongjun Zhang",
      "diff": "@@ -0,0 +1,40 @@\n+  public void doBuildListingWithSnapshotDiff(SequenceFile.Writer fileListWriter,\n+      DistCpOptions options) throws IOException {\n+    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n+    Path sourceRoot \u003d options.getSourcePaths().get(0);\n+    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n+\n+    try {\n+      for (DiffInfo diff : diffList) {\n+        // add snapshot paths prefix\n+        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n+        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n+          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n+        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n+          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n+\n+          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n+          if (sourceStatus.isDirectory()) {\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(\"Adding source dir for traverse: \" +\n+                  sourceStatus.getPath());\n+            }\n+\n+            HashSet\u003cString\u003e excludeList \u003d\n+                distCpSync.getTraverseExcludeList(diff.source,\n+                    options.getSourcePaths().get(0));\n+\n+            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n+            sourceDirs.add(sourceStatus);\n+\n+            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n+                sourceRoot, options, excludeList);\n+          }\n+        }\n+      }\n+      fileListWriter.close();\n+      fileListWriter \u003d null;\n+    } finally {\n+      IOUtils.cleanup(LOG, fileListWriter);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void doBuildListingWithSnapshotDiff(SequenceFile.Writer fileListWriter,\n      DistCpOptions options) throws IOException {\n    ArrayList\u003cDiffInfo\u003e diffList \u003d distCpSync.prepareDiffList();\n    Path sourceRoot \u003d options.getSourcePaths().get(0);\n    FileSystem sourceFS \u003d sourceRoot.getFileSystem(getConf());\n\n    try {\n      for (DiffInfo diff : diffList) {\n        // add snapshot paths prefix\n        diff.target \u003d new Path(options.getSourcePaths().get(0), diff.target);\n        if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.MODIFY) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n        } else if (diff.getType() \u003d\u003d SnapshotDiffReport.DiffType.CREATE) {\n          addToFileListing(fileListWriter, sourceRoot, diff.target, options);\n\n          FileStatus sourceStatus \u003d sourceFS.getFileStatus(diff.target);\n          if (sourceStatus.isDirectory()) {\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(\"Adding source dir for traverse: \" +\n                  sourceStatus.getPath());\n            }\n\n            HashSet\u003cString\u003e excludeList \u003d\n                distCpSync.getTraverseExcludeList(diff.source,\n                    options.getSourcePaths().get(0));\n\n            ArrayList\u003cFileStatus\u003e sourceDirs \u003d new ArrayList\u003c\u003e();\n            sourceDirs.add(sourceStatus);\n\n            traverseDirectory(fileListWriter, sourceFS, sourceDirs,\n                sourceRoot, options, excludeList);\n          }\n        }\n      }\n      fileListWriter.close();\n      fileListWriter \u003d null;\n    } finally {\n      IOUtils.cleanup(LOG, fileListWriter);\n    }\n  }",
      "path": "hadoop-tools/hadoop-distcp/src/main/java/org/apache/hadoop/tools/SimpleCopyListing.java"
    }
  }
}