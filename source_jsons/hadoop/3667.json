{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HdfsKMSUtil.java",
  "functionName": "decryptEncryptedDataEncryptionKey",
  "functionId": "decryptEncryptedDataEncryptionKey___feInfo-FileEncryptionInfo__keyProvider-KeyProvider",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
  "functionStartLine": 204,
  "functionEndLine": 220,
  "numCommitsSeen": 301,
  "timeTaken": 8108,
  "changeHistory": [
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "892ade689f9bcce76daae8f66fc00a49bee8548e",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb",
    "c4ccbe62c0857261b197a68c1e03a02e92f21a38",
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
    "1737950d0fc83c68f386881b843c41b0b1e342de",
    "e14e71d5feff961b681d828b00e6f12cb197ebf5"
  ],
  "changeHistoryShort": {
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "892ade689f9bcce76daae8f66fc00a49bee8548e": "Ybodychange",
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb": "Ybodychange",
    "c4ccbe62c0857261b197a68c1e03a02e92f21a38": "Ybodychange",
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa": "Ybodychange",
    "1737950d0fc83c68f386881b843c41b0b1e342de": "Ybodychange",
    "e14e71d5feff961b681d828b00e6f12cb197ebf5": "Ybodychange"
  },
  "changeHistoryDetails": {
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
      "commitDate": "29/01/18 3:23 PM",
      "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
          "commitDate": "29/01/18 3:23 PM",
          "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "29/01/18 9:48 AM",
          "commitNameOld": "7fd287b4af5a191f18ea92850b7d904e4b4fb693",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,17 @@\n-  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n-      feInfo) throws IOException {\n-    try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n-      KeyProvider provider \u003d getKeyProvider();\n-      if (provider \u003d\u003d null) {\n-        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n-            \" an encrypted file\");\n-      }\n-      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n-          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n-          feInfo.getEncryptedDataEncryptionKey());\n-      try {\n-        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-            .createKeyProviderCryptoExtension(provider);\n-        return cryptoProvider.decryptEncryptedKey(ekv);\n-      } catch (GeneralSecurityException e) {\n-        throw new IOException(e);\n-      }\n+  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n+      feInfo, KeyProvider keyProvider) throws IOException {\n+    if (keyProvider \u003d\u003d null) {\n+      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n+          \" an encrypted file\");\n+    }\n+    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n+        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n+        feInfo.getEncryptedDataEncryptionKey());\n+    try {\n+      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+          .createKeyProviderCryptoExtension(keyProvider);\n+      return cryptoProvider.decryptEncryptedKey(ekv);\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo, KeyProvider keyProvider) throws IOException {\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n          \" an encrypted file\");\n    }\n    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n        feInfo.getEncryptedDataEncryptionKey());\n    try {\n      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n          .createKeyProviderCryptoExtension(keyProvider);\n      return cryptoProvider.decryptEncryptedKey(ekv);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
            "oldMethodName": "decryptEncryptedDataEncryptionKey",
            "newMethodName": "decryptEncryptedDataEncryptionKey"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
          "commitDate": "29/01/18 3:23 PM",
          "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "29/01/18 9:48 AM",
          "commitNameOld": "7fd287b4af5a191f18ea92850b7d904e4b4fb693",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,17 @@\n-  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n-      feInfo) throws IOException {\n-    try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n-      KeyProvider provider \u003d getKeyProvider();\n-      if (provider \u003d\u003d null) {\n-        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n-            \" an encrypted file\");\n-      }\n-      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n-          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n-          feInfo.getEncryptedDataEncryptionKey());\n-      try {\n-        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-            .createKeyProviderCryptoExtension(provider);\n-        return cryptoProvider.decryptEncryptedKey(ekv);\n-      } catch (GeneralSecurityException e) {\n-        throw new IOException(e);\n-      }\n+  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n+      feInfo, KeyProvider keyProvider) throws IOException {\n+    if (keyProvider \u003d\u003d null) {\n+      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n+          \" an encrypted file\");\n+    }\n+    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n+        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n+        feInfo.getEncryptedDataEncryptionKey());\n+    try {\n+      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+          .createKeyProviderCryptoExtension(keyProvider);\n+      return cryptoProvider.decryptEncryptedKey(ekv);\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo, KeyProvider keyProvider) throws IOException {\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n          \" an encrypted file\");\n    }\n    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n        feInfo.getEncryptedDataEncryptionKey());\n    try {\n      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n          .createKeyProviderCryptoExtension(keyProvider);\n      return cryptoProvider.decryptEncryptedKey(ekv);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
          "commitDate": "29/01/18 3:23 PM",
          "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "29/01/18 9:48 AM",
          "commitNameOld": "7fd287b4af5a191f18ea92850b7d904e4b4fb693",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,17 @@\n-  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n-      feInfo) throws IOException {\n-    try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n-      KeyProvider provider \u003d getKeyProvider();\n-      if (provider \u003d\u003d null) {\n-        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n-            \" an encrypted file\");\n-      }\n-      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n-          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n-          feInfo.getEncryptedDataEncryptionKey());\n-      try {\n-        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-            .createKeyProviderCryptoExtension(provider);\n-        return cryptoProvider.decryptEncryptedKey(ekv);\n-      } catch (GeneralSecurityException e) {\n-        throw new IOException(e);\n-      }\n+  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n+      feInfo, KeyProvider keyProvider) throws IOException {\n+    if (keyProvider \u003d\u003d null) {\n+      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n+          \" an encrypted file\");\n+    }\n+    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n+        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n+        feInfo.getEncryptedDataEncryptionKey());\n+    try {\n+      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+          .createKeyProviderCryptoExtension(keyProvider);\n+      return cryptoProvider.decryptEncryptedKey(ekv);\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo, KeyProvider keyProvider) throws IOException {\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n          \" an encrypted file\");\n    }\n    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n        feInfo.getEncryptedDataEncryptionKey());\n    try {\n      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n          .createKeyProviderCryptoExtension(keyProvider);\n      return cryptoProvider.decryptEncryptedKey(ekv);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
          "commitDate": "29/01/18 3:23 PM",
          "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "29/01/18 9:48 AM",
          "commitNameOld": "7fd287b4af5a191f18ea92850b7d904e4b4fb693",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,17 @@\n-  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n-      feInfo) throws IOException {\n-    try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n-      KeyProvider provider \u003d getKeyProvider();\n-      if (provider \u003d\u003d null) {\n-        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n-            \" an encrypted file\");\n-      }\n-      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n-          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n-          feInfo.getEncryptedDataEncryptionKey());\n-      try {\n-        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-            .createKeyProviderCryptoExtension(provider);\n-        return cryptoProvider.decryptEncryptedKey(ekv);\n-      } catch (GeneralSecurityException e) {\n-        throw new IOException(e);\n-      }\n+  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n+      feInfo, KeyProvider keyProvider) throws IOException {\n+    if (keyProvider \u003d\u003d null) {\n+      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n+          \" an encrypted file\");\n+    }\n+    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n+        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n+        feInfo.getEncryptedDataEncryptionKey());\n+    try {\n+      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+          .createKeyProviderCryptoExtension(keyProvider);\n+      return cryptoProvider.decryptEncryptedKey(ekv);\n+    } catch (GeneralSecurityException e) {\n+      throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo, KeyProvider keyProvider) throws IOException {\n    if (keyProvider \u003d\u003d null) {\n      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n          \" an encrypted file\");\n    }\n    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n        feInfo.getEncryptedDataEncryptionKey());\n    try {\n      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n          .createKeyProviderCryptoExtension(keyProvider);\n      return cryptoProvider.decryptEncryptedKey(ekv);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/HdfsKMSUtil.java",
          "extendedDetails": {
            "oldValue": "[feInfo-FileEncryptionInfo]",
            "newValue": "[feInfo-FileEncryptionInfo, keyProvider-KeyProvider]"
          }
        }
      ]
    },
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "30/09/15 8:39 AM",
      "commitNameOld": "6c17d315287020368689fa078a40a1eaedf89d5b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,20 @@\n   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n       feInfo) throws IOException {\n-    TraceScope scope \u003d tracer.newScope(\"decryptEDEK\");\n-    try {\n+    try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n       KeyProvider provider \u003d getKeyProvider();\n       if (provider \u003d\u003d null) {\n         throw new IOException(\"No KeyProvider is configured, cannot access\" +\n             \" an encrypted file\");\n       }\n       EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n           feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n           feInfo.getEncryptedDataEncryptionKey());\n       try {\n         KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n             .createKeyProviderCryptoExtension(provider);\n         return cryptoProvider.decryptEncryptedKey(ekv);\n       } catch (GeneralSecurityException e) {\n         throw new IOException(e);\n       }\n-    } finally {\n-      scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    try (TraceScope ignored \u003d tracer.newScope(\"decryptEDEK\")) {\n      KeyProvider provider \u003d getKeyProvider();\n      if (provider \u003d\u003d null) {\n        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n            \" an encrypted file\");\n      }\n      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n          feInfo.getEncryptedDataEncryptionKey());\n      try {\n        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n            .createKeyProviderCryptoExtension(provider);\n        return cryptoProvider.decryptEncryptedKey(ekv);\n      } catch (GeneralSecurityException e) {\n        throw new IOException(e);\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "892ade689f9bcce76daae8f66fc00a49bee8548e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9080. Update htrace version to 4.0.1 (cmccabe)\n",
      "commitDate": "28/09/15 7:42 AM",
      "commitName": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "26/09/15 11:08 AM",
      "commitNameOld": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n       feInfo) throws IOException {\n-    TraceScope scope \u003d Trace.startSpan(\"decryptEDEK\", traceSampler);\n+    TraceScope scope \u003d tracer.newScope(\"decryptEDEK\");\n     try {\n       KeyProvider provider \u003d getKeyProvider();\n       if (provider \u003d\u003d null) {\n         throw new IOException(\"No KeyProvider is configured, cannot access\" +\n             \" an encrypted file\");\n       }\n       EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n           feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n           feInfo.getEncryptedDataEncryptionKey());\n       try {\n         KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n             .createKeyProviderCryptoExtension(provider);\n         return cryptoProvider.decryptEncryptedKey(ekv);\n       } catch (GeneralSecurityException e) {\n         throw new IOException(e);\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    TraceScope scope \u003d tracer.newScope(\"decryptEDEK\");\n    try {\n      KeyProvider provider \u003d getKeyProvider();\n      if (provider \u003d\u003d null) {\n        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n            \" an encrypted file\");\n      }\n      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n          feInfo.getEncryptedDataEncryptionKey());\n      try {\n        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n            .createKeyProviderCryptoExtension(provider);\n        return cryptoProvider.decryptEncryptedKey(ekv);\n      } catch (GeneralSecurityException e) {\n        throw new IOException(e);\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"decryptEDEK\", traceSampler);\n    try {\n      KeyProvider provider \u003d getKeyProvider();\n      if (provider \u003d\u003d null) {\n        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n            \" an encrypted file\");\n      }\n      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n          feInfo.getEncryptedDataEncryptionKey());\n      try {\n        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n            .createKeyProviderCryptoExtension(provider);\n        return cryptoProvider.decryptEncryptedKey(ekv);\n      } catch (GeneralSecurityException e) {\n        throw new IOException(e);\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/DFSClient.java"
      }
    },
    "02340a24f211212b91dc7380c1e5b54ddb5e82eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7718. Store KeyProvider in ClientContext to avoid leaking key provider threads when using FileContext (Arun Suresh via Colin P. McCabe)\n",
      "commitDate": "09/02/15 8:23 PM",
      "commitName": "02340a24f211212b91dc7380c1e5b54ddb5e82eb",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "06/02/15 5:01 PM",
      "commitNameOld": "8de80ff71234f8fb005f297f1ce6d4755633d5e4",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 3.14,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,23 @@\n   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n       feInfo) throws IOException {\n     TraceScope scope \u003d Trace.startSpan(\"decryptEDEK\", traceSampler);\n     try {\n+      KeyProvider provider \u003d getKeyProvider();\n       if (provider \u003d\u003d null) {\n         throw new IOException(\"No KeyProvider is configured, cannot access\" +\n             \" an encrypted file\");\n       }\n       EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n           feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n           feInfo.getEncryptedDataEncryptionKey());\n       try {\n         KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n             .createKeyProviderCryptoExtension(provider);\n         return cryptoProvider.decryptEncryptedKey(ekv);\n       } catch (GeneralSecurityException e) {\n         throw new IOException(e);\n       }\n     } finally {\n       scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"decryptEDEK\", traceSampler);\n    try {\n      KeyProvider provider \u003d getKeyProvider();\n      if (provider \u003d\u003d null) {\n        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n            \" an encrypted file\");\n      }\n      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n          feInfo.getEncryptedDataEncryptionKey());\n      try {\n        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n            .createKeyProviderCryptoExtension(provider);\n        return cryptoProvider.decryptEncryptedKey(ekv);\n      } catch (GeneralSecurityException e) {\n        throw new IOException(e);\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "c4ccbe62c0857261b197a68c1e03a02e92f21a38": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7189. Add trace spans for DFSClient metadata operations. (Colin P. McCabe via yliu)\n",
      "commitDate": "15/01/15 8:23 AM",
      "commitName": "c4ccbe62c0857261b197a68c1e03a02e92f21a38",
      "commitAuthor": "yliu",
      "commitDateOld": "12/01/15 10:50 PM",
      "commitNameOld": "7e9358feb326d48b8c4f00249e7af5023cebd2e2",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 2.4,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,22 @@\n   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n       feInfo) throws IOException {\n-    if (provider \u003d\u003d null) {\n-      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n-          \" an encrypted file\");\n-    }\n-    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n-        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n-        feInfo.getEncryptedDataEncryptionKey());\n+    TraceScope scope \u003d Trace.startSpan(\"decryptEDEK\", traceSampler);\n     try {\n-      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n-          .createKeyProviderCryptoExtension(provider);\n-      return cryptoProvider.decryptEncryptedKey(ekv);\n-    } catch (GeneralSecurityException e) {\n-      throw new IOException(e);\n+      if (provider \u003d\u003d null) {\n+        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n+            \" an encrypted file\");\n+      }\n+      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n+          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n+          feInfo.getEncryptedDataEncryptionKey());\n+      try {\n+        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+            .createKeyProviderCryptoExtension(provider);\n+        return cryptoProvider.decryptEncryptedKey(ekv);\n+      } catch (GeneralSecurityException e) {\n+        throw new IOException(e);\n+      }\n+    } finally {\n+      scope.close();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    TraceScope scope \u003d Trace.startSpan(\"decryptEDEK\", traceSampler);\n    try {\n      if (provider \u003d\u003d null) {\n        throw new IOException(\"No KeyProvider is configured, cannot access\" +\n            \" an encrypted file\");\n      }\n      EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n          feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n          feInfo.getEncryptedDataEncryptionKey());\n      try {\n        KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n            .createKeyProviderCryptoExtension(provider);\n        return cryptoProvider.decryptEncryptedKey(ekv);\n      } catch (GeneralSecurityException e) {\n        throw new IOException(e);\n      }\n    } finally {\n      scope.close();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7179. DFSClient should instantiate a KeyProvider, not a KeyProviderCryptoExtension. (wang)\n",
      "commitDate": "02/10/14 1:50 PM",
      "commitName": "d2d5a0ea03b0d461a4d376c7b9de8cd5c147effa",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "29/09/14 2:14 PM",
      "commitNameOld": "7f0efe96f85704e39349f20ab6a11bfaa81c6a75",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n       feInfo) throws IOException {\n     if (provider \u003d\u003d null) {\n       throw new IOException(\"No KeyProvider is configured, cannot access\" +\n           \" an encrypted file\");\n     }\n     EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n         feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n         feInfo.getEncryptedDataEncryptionKey());\n     try {\n-      return provider.decryptEncryptedKey(ekv);\n+      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n+          .createKeyProviderCryptoExtension(provider);\n+      return cryptoProvider.decryptEncryptedKey(ekv);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    if (provider \u003d\u003d null) {\n      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n          \" an encrypted file\");\n    }\n    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n        feInfo.getEncryptedDataEncryptionKey());\n    try {\n      KeyProviderCryptoExtension cryptoProvider \u003d KeyProviderCryptoExtension\n          .createKeyProviderCryptoExtension(provider);\n      return cryptoProvider.decryptEncryptedKey(ekv);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "1737950d0fc83c68f386881b843c41b0b1e342de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6987. Move CipherSuite xattr information up to the encryption zone root. Contributed by Zhe Zhang.\n",
      "commitDate": "21/09/14 9:29 PM",
      "commitName": "1737950d0fc83c68f386881b843c41b0b1e342de",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/09/14 9:23 PM",
      "commitNameOld": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 2.0,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,15 @@\n   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n       feInfo) throws IOException {\n     if (provider \u003d\u003d null) {\n       throw new IOException(\"No KeyProvider is configured, cannot access\" +\n           \" an encrypted file\");\n     }\n     EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n-        //TODO: here we have to put the keyName to be provided by HDFS-6987\n-        null, feInfo.getEzKeyVersionName(), feInfo.getIV(),\n+        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n         feInfo.getEncryptedDataEncryptionKey());\n     try {\n       return provider.decryptEncryptedKey(ekv);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    if (provider \u003d\u003d null) {\n      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n          \" an encrypted file\");\n    }\n    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n        feInfo.getKeyName(), feInfo.getEzKeyVersionName(), feInfo.getIV(),\n        feInfo.getEncryptedDataEncryptionKey());\n    try {\n      return provider.decryptEncryptedKey(ekv);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    },
    "e14e71d5feff961b681d828b00e6f12cb197ebf5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11096. KMS: KeyAuthorizationKeyProvider should verify the keyversion belongs to the keyname on decrypt. (tucu)\n",
      "commitDate": "16/09/14 11:20 PM",
      "commitName": "e14e71d5feff961b681d828b00e6f12cb197ebf5",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "16/09/14 4:41 PM",
      "commitNameOld": "33ce887c20ec806ace02063e42599c3db76b536a",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n       feInfo) throws IOException {\n     if (provider \u003d\u003d null) {\n       throw new IOException(\"No KeyProvider is configured, cannot access\" +\n           \" an encrypted file\");\n     }\n     EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n-        feInfo.getEzKeyVersionName(), feInfo.getIV(),\n+        //TODO: here we have to put the keyName to be provided by HDFS-6987\n+        null, feInfo.getEzKeyVersionName(), feInfo.getIV(),\n         feInfo.getEncryptedDataEncryptionKey());\n     try {\n       return provider.decryptEncryptedKey(ekv);\n     } catch (GeneralSecurityException e) {\n       throw new IOException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private KeyVersion decryptEncryptedDataEncryptionKey(FileEncryptionInfo\n      feInfo) throws IOException {\n    if (provider \u003d\u003d null) {\n      throw new IOException(\"No KeyProvider is configured, cannot access\" +\n          \" an encrypted file\");\n    }\n    EncryptedKeyVersion ekv \u003d EncryptedKeyVersion.createForDecryption(\n        //TODO: here we have to put the keyName to be provided by HDFS-6987\n        null, feInfo.getEzKeyVersionName(), feInfo.getIV(),\n        feInfo.getEncryptedDataEncryptionKey());\n    try {\n      return provider.decryptEncryptedKey(ekv);\n    } catch (GeneralSecurityException e) {\n      throw new IOException(e);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/DFSClient.java",
      "extendedDetails": {}
    }
  }
}