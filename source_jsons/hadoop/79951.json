{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RawLocalFileSystem.java",
  "functionName": "mkOneDirWithMode",
  "functionId": "mkOneDirWithMode___p-Path__p2f-File__permission-FsPermission",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
  "functionStartLine": 528,
  "functionEndLine": 553,
  "numCommitsSeen": 53,
  "timeTaken": 2393,
  "changeHistory": [
    "76be82bc0419affbe0103bc4f45c90926f08d0cc",
    "be26c1b9b0ae8fc138489498f40301cf3ee303a0",
    "45af585e7ad23e7d5a5bc4dade00723d315ef6b2",
    "fc2ed4a1f9a19d61f5e3cb4fd843604f0c7fe95f",
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf"
  ],
  "changeHistoryShort": {
    "76be82bc0419affbe0103bc4f45c90926f08d0cc": "Ybodychange",
    "be26c1b9b0ae8fc138489498f40301cf3ee303a0": "Ybodychange",
    "45af585e7ad23e7d5a5bc4dade00723d315ef6b2": "Ybodychange",
    "fc2ed4a1f9a19d61f5e3cb4fd843604f0c7fe95f": "Ybodychange",
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76be82bc0419affbe0103bc4f45c90926f08d0cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13073 RawLocalFileSystem does not react on changing umask. Contributed by Andras Bokor\n",
      "commitDate": "18/07/16 6:38 AM",
      "commitName": "76be82bc0419affbe0103bc4f45c90926f08d0cc",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/07/16 2:30 AM",
      "commitNameOld": "be26c1b9b0ae8fc138489498f40301cf3ee303a0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 4.17,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n       throws IOException {\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getDirDefault();\n     }\n-    permission \u003d permission.applyUMask(umask);\n+    permission \u003d permission.applyUMask(FsPermission.getUMask(getConf()));\n     if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n       try {\n         NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n         return true;\n       } catch (IOException e) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(String.format(\n               \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n               p2f, permission.toShort()), e);\n         }\n         return false;\n       }\n     } else {\n       boolean b \u003d p2f.mkdir();\n       if (b) {\n         setPermission(p, permission);\n       }\n       return b;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n      throws IOException {\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getDirDefault();\n    }\n    permission \u003d permission.applyUMask(FsPermission.getUMask(getConf()));\n    if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n      try {\n        NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n        return true;\n      } catch (IOException e) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(String.format(\n              \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n              p2f, permission.toShort()), e);\n        }\n        return false;\n      }\n    } else {\n      boolean b \u003d p2f.mkdir();\n      if (b) {\n        setPermission(p, permission);\n      }\n      return b;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "be26c1b9b0ae8fc138489498f40301cf3ee303a0": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13073 RawLocalFileSystem does not react on changing umask. Contributed by Andras Bokor\"\n\nThis reverts commit 45af585e7ad23e7d5a5bc4dade00723d315ef6b2.\n",
      "commitDate": "14/07/16 2:30 AM",
      "commitName": "be26c1b9b0ae8fc138489498f40301cf3ee303a0",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/07/16 2:29 AM",
      "commitNameOld": "45af585e7ad23e7d5a5bc4dade00723d315ef6b2",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n       throws IOException {\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getDirDefault();\n     }\n-    permission \u003d permission.applyUMask(FsPermission.getUMask(getConf()));\n+    permission \u003d permission.applyUMask(umask);\n     if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n       try {\n         NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n         return true;\n       } catch (IOException e) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(String.format(\n               \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n               p2f, permission.toShort()), e);\n         }\n         return false;\n       }\n     } else {\n       boolean b \u003d p2f.mkdir();\n       if (b) {\n         setPermission(p, permission);\n       }\n       return b;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n      throws IOException {\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getDirDefault();\n    }\n    permission \u003d permission.applyUMask(umask);\n    if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n      try {\n        NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n        return true;\n      } catch (IOException e) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(String.format(\n              \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n              p2f, permission.toShort()), e);\n        }\n        return false;\n      }\n    } else {\n      boolean b \u003d p2f.mkdir();\n      if (b) {\n        setPermission(p, permission);\n      }\n      return b;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "45af585e7ad23e7d5a5bc4dade00723d315ef6b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13073 RawLocalFileSystem does not react on changing umask. Contributed by Andras Bokor\n",
      "commitDate": "14/07/16 2:29 AM",
      "commitName": "45af585e7ad23e7d5a5bc4dade00723d315ef6b2",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/06/16 11:50 PM",
      "commitNameOld": "5f6bc65bb31270f2b5dfdfd941a0568fc1f3337f",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 26.11,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n       throws IOException {\n     if (permission \u003d\u003d null) {\n       permission \u003d FsPermission.getDirDefault();\n     }\n-    permission \u003d permission.applyUMask(umask);\n+    permission \u003d permission.applyUMask(FsPermission.getUMask(getConf()));\n     if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n       try {\n         NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n         return true;\n       } catch (IOException e) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(String.format(\n               \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n               p2f, permission.toShort()), e);\n         }\n         return false;\n       }\n     } else {\n       boolean b \u003d p2f.mkdir();\n       if (b) {\n         setPermission(p, permission);\n       }\n       return b;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n      throws IOException {\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getDirDefault();\n    }\n    permission \u003d permission.applyUMask(FsPermission.getUMask(getConf()));\n    if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n      try {\n        NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n        return true;\n      } catch (IOException e) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(String.format(\n              \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n              p2f, permission.toShort()), e);\n        }\n        return false;\n      }\n    } else {\n      boolean b \u003d p2f.mkdir();\n      if (b) {\n        setPermission(p, permission);\n      }\n      return b;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "fc2ed4a1f9a19d61f5e3cb4fd843604f0c7fe95f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11347. RawLocalFileSystem#mkdir and create should honor umask (Varun Saxena via Colin P. McCabe)\n",
      "commitDate": "08/06/15 5:49 PM",
      "commitName": "fc2ed4a1f9a19d61f5e3cb4fd843604f0c7fe95f",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "23/04/15 11:47 AM",
      "commitNameOld": "26971e52ae65590e618a23621be244e588845adc",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 46.25,
      "commitsBetweenForRepo": 462,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n       throws IOException {\n     if (permission \u003d\u003d null) {\n-      return p2f.mkdir();\n-    } else {\n-      if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n-        try {\n-          NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n-          return true;\n-        } catch (IOException e) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(String.format(\n-                \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n-                p2f, permission.toShort()), e);\n-          }\n-          return false;\n+      permission \u003d FsPermission.getDirDefault();\n+    }\n+    permission \u003d permission.applyUMask(umask);\n+    if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n+      try {\n+        NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n+        return true;\n+      } catch (IOException e) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(String.format(\n+              \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n+              p2f, permission.toShort()), e);\n         }\n-      } else {\n-        boolean b \u003d p2f.mkdir();\n-        if (b) {\n-          setPermission(p, permission);\n-        }\n-        return b;\n+        return false;\n       }\n+    } else {\n+      boolean b \u003d p2f.mkdir();\n+      if (b) {\n+        setPermission(p, permission);\n+      }\n+      return b;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n      throws IOException {\n    if (permission \u003d\u003d null) {\n      permission \u003d FsPermission.getDirDefault();\n    }\n    permission \u003d permission.applyUMask(umask);\n    if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n      try {\n        NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n        return true;\n      } catch (IOException e) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(String.format(\n              \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n              p2f, permission.toShort()), e);\n        }\n        return false;\n      }\n    } else {\n      boolean b \u003d p2f.mkdir();\n      if (b) {\n        setPermission(p, permission);\n      }\n      return b;\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java",
      "extendedDetails": {}
    },
    "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-11321. copyToLocal cannot save a file to an SMB share unless the user has Full Control permissions. Contributed by Chris Nauroth.\n",
      "commitDate": "16/12/14 3:29 PM",
      "commitName": "e996a1bfd4f3ada6cbd9633fe68fda1e0c910bdf",
      "commitAuthor": "cnauroth",
      "diff": "@@ -0,0 +1,26 @@\n+  protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n+      throws IOException {\n+    if (permission \u003d\u003d null) {\n+      return p2f.mkdir();\n+    } else {\n+      if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n+        try {\n+          NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n+          return true;\n+        } catch (IOException e) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(String.format(\n+                \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n+                p2f, permission.toShort()), e);\n+          }\n+          return false;\n+        }\n+      } else {\n+        boolean b \u003d p2f.mkdir();\n+        if (b) {\n+          setPermission(p, permission);\n+        }\n+        return b;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean mkOneDirWithMode(Path p, File p2f, FsPermission permission)\n      throws IOException {\n    if (permission \u003d\u003d null) {\n      return p2f.mkdir();\n    } else {\n      if (Shell.WINDOWS \u0026\u0026 NativeIO.isAvailable()) {\n        try {\n          NativeIO.Windows.createDirectoryWithMode(p2f, permission.toShort());\n          return true;\n        } catch (IOException e) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(String.format(\n                \"NativeIO.createDirectoryWithMode error, path \u003d %s, mode \u003d %o\",\n                p2f, permission.toShort()), e);\n          }\n          return false;\n        }\n      } else {\n        boolean b \u003d p2f.mkdir();\n        if (b) {\n          setPermission(p, permission);\n        }\n        return b;\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/RawLocalFileSystem.java"
    }
  }
}