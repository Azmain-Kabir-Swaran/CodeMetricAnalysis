{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMNodeImpl.java",
  "functionName": "transition",
  "functionId": "transition___rmNode-RMNodeImpl__event-RMNodeEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
  "functionStartLine": 1085,
  "functionEndLine": 1087,
  "numCommitsSeen": 107,
  "timeTaken": 8469,
  "changeHistory": [
    "8f08532bde153811368e1b8336446fba4743f9d2",
    "af8514eef297574240652672d048748100c97733",
    "18e08a8f511652ed9f4ba386bb4f0cf8339e2729",
    "45a8e8c5a46535287de97fd6609c0743eef888ee",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "407cfa3b56a0645d64d2d9af305f6ef24307e775",
    "606114d6029758f2be130960b8fc3102457406ba",
    "3343494d6c39883485d29c7439831ab3c1c7248d",
    "cbdb07f4ca358b9507296868a913977ad82ed716",
    "5ace0cabe5b88bc4f9d807e01181647d0a28db92",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "8f08532bde153811368e1b8336446fba4743f9d2": "Ymultichange(Yreturntypechange,Ybodychange)",
    "af8514eef297574240652672d048748100c97733": "Ybodychange",
    "18e08a8f511652ed9f4ba386bb4f0cf8339e2729": "Ybodychange",
    "45a8e8c5a46535287de97fd6609c0743eef888ee": "Ybodychange",
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "407cfa3b56a0645d64d2d9af305f6ef24307e775": "Ymultichange(Yreturntypechange,Ybodychange)",
    "606114d6029758f2be130960b8fc3102457406ba": "Ybodychange",
    "3343494d6c39883485d29c7439831ab3c1c7248d": "Ybodychange",
    "cbdb07f4ca358b9507296868a913977ad82ed716": "Ybodychange",
    "5ace0cabe5b88bc4f9d807e01181647d0a28db92": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f08532bde153811368e1b8336446fba4743f9d2": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma\n",
      "commitDate": "02/10/15 6:50 PM",
      "commitName": "8f08532bde153811368e1b8336446fba4743f9d2",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma\n",
          "commitDate": "02/10/15 6:50 PM",
          "commitName": "8f08532bde153811368e1b8336446fba4743f9d2",
          "commitAuthor": "Xuan",
          "commitDateOld": "23/09/15 1:29 PM",
          "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.22,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,4 @@\n-    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n-      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent)event;\n-\n-      // Switch the last heartbeatresponse.\n-      rmNode.latestNodeHeartBeatResponse \u003d statusEvent.getLatestResponse();\n-      NodeHealthStatus remoteNodeHealthStatus \u003d\n-          statusEvent.getNodeHealthStatus();\n-      rmNode.setHealthReport(remoteNodeHealthStatus.getHealthReport());\n-      rmNode.setLastHealthReportTime(\n-          remoteNodeHealthStatus.getLastHealthReportTime());\n-      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n-        rmNode.context.getDispatcher().getEventHandler().handle(\n-            new NodeAddedSchedulerEvent(rmNode));\n-        rmNode.context.getDispatcher().getEventHandler().handle(\n-                new NodesListManagerEvent(\n-                    NodesListManagerEventType.NODE_USABLE, rmNode));\n-        // ??? how about updating metrics before notifying to ensure that\n-        // notifiers get update metadata because they will very likely query it\n-        // upon notification\n-        // Update metrics\n-        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n-        return NodeState.RUNNING;\n-      }\n-\n-      return NodeState.UNHEALTHY;\n+    public void transition(RMNodeImpl rmNode, RMNodeEvent event) {\n+      rmNode.containersToSignal.add(((\n+          RMNodeSignalContainerEvent) event).getSignalRequest());\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      rmNode.containersToSignal.add(((\n          RMNodeSignalContainerEvent) event).getSignalRequest());\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
          "extendedDetails": {
            "oldValue": "NodeState",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma\n",
          "commitDate": "02/10/15 6:50 PM",
          "commitName": "8f08532bde153811368e1b8336446fba4743f9d2",
          "commitAuthor": "Xuan",
          "commitDateOld": "23/09/15 1:29 PM",
          "commitNameOld": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 9.22,
          "commitsBetweenForRepo": 74,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,4 @@\n-    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n-      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent)event;\n-\n-      // Switch the last heartbeatresponse.\n-      rmNode.latestNodeHeartBeatResponse \u003d statusEvent.getLatestResponse();\n-      NodeHealthStatus remoteNodeHealthStatus \u003d\n-          statusEvent.getNodeHealthStatus();\n-      rmNode.setHealthReport(remoteNodeHealthStatus.getHealthReport());\n-      rmNode.setLastHealthReportTime(\n-          remoteNodeHealthStatus.getLastHealthReportTime());\n-      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n-        rmNode.context.getDispatcher().getEventHandler().handle(\n-            new NodeAddedSchedulerEvent(rmNode));\n-        rmNode.context.getDispatcher().getEventHandler().handle(\n-                new NodesListManagerEvent(\n-                    NodesListManagerEventType.NODE_USABLE, rmNode));\n-        // ??? how about updating metrics before notifying to ensure that\n-        // notifiers get update metadata because they will very likely query it\n-        // upon notification\n-        // Update metrics\n-        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n-        return NodeState.RUNNING;\n-      }\n-\n-      return NodeState.UNHEALTHY;\n+    public void transition(RMNodeImpl rmNode, RMNodeEvent event) {\n+      rmNode.containersToSignal.add(((\n+          RMNodeSignalContainerEvent) event).getSignalRequest());\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      rmNode.containersToSignal.add(((\n          RMNodeSignalContainerEvent) event).getSignalRequest());\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "af8514eef297574240652672d048748100c97733": {
      "type": "Ybodychange",
      "commitMessage": "YARN-686. Flatten NodeReport. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1490827 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/06/13 1:59 PM",
      "commitName": "af8514eef297574240652672d048748100c97733",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "03/06/13 5:34 PM",
      "commitNameOld": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.85,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,25 @@\n     public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestNodeHeartBeatResponse \u003d statusEvent.getLatestResponse();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n-      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n+      rmNode.setHealthReport(remoteNodeHealthStatus.getHealthReport());\n+      rmNode.setLastHealthReportTime(\n+          remoteNodeHealthStatus.getLastHealthReportTime());\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n         rmNode.context.getDispatcher().getEventHandler().handle(\n                 new NodesListManagerEvent(\n                     NodesListManagerEventType.NODE_USABLE, rmNode));\n         // ??? how about updating metrics before notifying to ensure that\n         // notifiers get update metadata because they will very likely query it\n         // upon notification\n         // Update metrics\n         rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n         return NodeState.RUNNING;\n       }\n \n       return NodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestNodeHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setHealthReport(remoteNodeHealthStatus.getHealthReport());\n      rmNode.setLastHealthReportTime(\n          remoteNodeHealthStatus.getLastHealthReportTime());\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n        return NodeState.RUNNING;\n      }\n\n      return NodeState.UNHEALTHY;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "18e08a8f511652ed9f4ba386bb4f0cf8339e2729": {
      "type": "Ybodychange",
      "commitMessage": "YARN-439. Flatten NodeHeartbeatResponse. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 11:28 AM",
      "commitName": "18e08a8f511652ed9f4ba386bb4f0cf8339e2729",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "28/02/13 9:59 PM",
      "commitNameOld": "83d80658673b286efc534d96463e4c93fb818858",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 24.52,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n     public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n-      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n+      rmNode.latestNodeHeartBeatResponse \u003d statusEvent.getLatestResponse();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n         rmNode.context.getDispatcher().getEventHandler().handle(\n                 new NodesListManagerEvent(\n                     NodesListManagerEventType.NODE_USABLE, rmNode));\n         // ??? how about updating metrics before notifying to ensure that\n         // notifiers get update metadata because they will very likely query it\n         // upon notification\n         // Update metrics\n         rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n         return NodeState.RUNNING;\n       }\n \n       return NodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestNodeHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n        return NodeState.RUNNING;\n      }\n\n      return NodeState.UNHEALTHY;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "45a8e8c5a46535287de97fd6609c0743eef888ee": {
      "type": "Ybodychange",
      "commitMessage": "YARN-60. Fixed a bug in ResourceManager which causes all NMs to get NPEs and thus causes all containers to be rejected. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1379550 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/12 12:11 PM",
      "commitName": "45a8e8c5a46535287de97fd6609c0743eef888ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/08/12 9:33 AM",
      "commitNameOld": "d8ce3bee5813f6baa2017b6fb1ccd53de1546cf1",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.11,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,23 @@\n     public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n-      rmNode.currentMasterKey \u003d statusEvent.getCurrentMasterKey();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n         rmNode.context.getDispatcher().getEventHandler().handle(\n                 new NodesListManagerEvent(\n                     NodesListManagerEventType.NODE_USABLE, rmNode));\n         // ??? how about updating metrics before notifying to ensure that\n         // notifiers get update metadata because they will very likely query it\n         // upon notification\n         // Update metrics\n         rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n         return NodeState.RUNNING;\n       }\n \n       return NodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n        return NodeState.RUNNING;\n      }\n\n      return NodeState.UNHEALTHY;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "ffd2e01604be814fa3db1dded7cd7cff26a79b1e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-39. RM-NM secret-keys should be randomly generated and rolled every so often. (Contributed by Vinod Kumar Vavilapalli and Siddharth Seth)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 7:18 PM",
      "commitName": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 16.87,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n     public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n+      rmNode.currentMasterKey \u003d statusEvent.getCurrentMasterKey();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n         rmNode.context.getDispatcher().getEventHandler().handle(\n                 new NodesListManagerEvent(\n                     NodesListManagerEventType.NODE_USABLE, rmNode));\n         // ??? how about updating metrics before notifying to ensure that\n         // notifiers get update metadata because they will very likely query it\n         // upon notification\n         // Update metrics\n         rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n         return NodeState.RUNNING;\n       }\n \n       return NodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      rmNode.currentMasterKey \u003d statusEvent.getCurrentMasterKey();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n        return NodeState.RUNNING;\n      }\n\n      return NodeState.UNHEALTHY;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n        return NodeState.RUNNING;\n      }\n\n      return NodeState.UNHEALTHY;\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java"
      }
    },
    "407cfa3b56a0645d64d2d9af305f6ef24307e775": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3958. RM: Remove RMNodeState and replace it with NodeState (Bikas Saha via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/12 8:47 AM",
      "commitName": "407cfa3b56a0645d64d2d9af305f6ef24307e775",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-3958. RM: Remove RMNodeState and replace it with NodeState (Bikas Saha via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334043 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/12 8:47 AM",
          "commitName": "407cfa3b56a0645d64d2d9af305f6ef24307e775",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "25/03/12 10:45 PM",
          "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 39.42,
          "commitsBetweenForRepo": 315,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n+    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n         rmNode.context.getDispatcher().getEventHandler().handle(\n                 new NodesListManagerEvent(\n                     NodesListManagerEventType.NODE_USABLE, rmNode));\n         // ??? how about updating metrics before notifying to ensure that\n         // notifiers get update metadata because they will very likely query it\n         // upon notification\n         // Update metrics\n-        rmNode.updateMetricsForRejoinedNode(RMNodeState.UNHEALTHY);\n-        return RMNodeState.RUNNING;\n+        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n+        return NodeState.RUNNING;\n       }\n \n-      return RMNodeState.UNHEALTHY;\n+      return NodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n        return NodeState.RUNNING;\n      }\n\n      return NodeState.UNHEALTHY;\n    }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
          "extendedDetails": {
            "oldValue": "RMNodeState",
            "newValue": "NodeState"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3958. RM: Remove RMNodeState and replace it with NodeState (Bikas Saha via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1334043 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/12 8:47 AM",
          "commitName": "407cfa3b56a0645d64d2d9af305f6ef24307e775",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "25/03/12 10:45 PM",
          "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 39.42,
          "commitsBetweenForRepo": 315,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n+    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n         rmNode.context.getDispatcher().getEventHandler().handle(\n                 new NodesListManagerEvent(\n                     NodesListManagerEventType.NODE_USABLE, rmNode));\n         // ??? how about updating metrics before notifying to ensure that\n         // notifiers get update metadata because they will very likely query it\n         // upon notification\n         // Update metrics\n-        rmNode.updateMetricsForRejoinedNode(RMNodeState.UNHEALTHY);\n-        return RMNodeState.RUNNING;\n+        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n+        return NodeState.RUNNING;\n       }\n \n-      return RMNodeState.UNHEALTHY;\n+      return NodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public NodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(NodeState.UNHEALTHY);\n        return NodeState.RUNNING;\n      }\n\n      return NodeState.UNHEALTHY;\n    }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "606114d6029758f2be130960b8fc3102457406ba": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3533. Add a channel between RM and AM to get information on nodes. Contributed by Bikas Saha. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1305230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/12 10:45 PM",
      "commitName": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/02/12 1:39 PM",
      "commitNameOld": "c0572656ced07a885f848c1134edd7b1c291d246",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 30.34,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,23 @@\n     public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n+        rmNode.context.getDispatcher().getEventHandler().handle(\n+                new NodesListManagerEvent(\n+                    NodesListManagerEventType.NODE_USABLE, rmNode));\n+        // ??? how about updating metrics before notifying to ensure that\n+        // notifiers get update metadata because they will very likely query it\n+        // upon notification\n         // Update metrics\n         rmNode.updateMetricsForRejoinedNode(RMNodeState.UNHEALTHY);\n         return RMNodeState.RUNNING;\n       }\n \n       return RMNodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        rmNode.context.getDispatcher().getEventHandler().handle(\n                new NodesListManagerEvent(\n                    NodesListManagerEventType.NODE_USABLE, rmNode));\n        // ??? how about updating metrics before notifying to ensure that\n        // notifiers get update metadata because they will very likely query it\n        // upon notification\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(RMNodeState.UNHEALTHY);\n        return RMNodeState.RUNNING;\n      }\n\n      return RMNodeState.UNHEALTHY;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "3343494d6c39883485d29c7439831ab3c1c7248d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3760. Changed active nodes list to not contain unhealthy nodes on the webUI and metrics. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1240421 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/12 5:03 PM",
      "commitName": "3343494d6c39883485d29c7439831ab3c1c7248d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/01/12 2:56 PM",
      "commitNameOld": "3cdc100369ce920701fdddae12d7f7247332b3f3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n     public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n-        ClusterMetrics.getMetrics().decrNumUnhealthyNMs();\n+        // Update metrics\n+        rmNode.updateMetricsForRejoinedNode(RMNodeState.UNHEALTHY);\n         return RMNodeState.RUNNING;\n       }\n \n       return RMNodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        // Update metrics\n        rmNode.updateMetricsForRejoinedNode(RMNodeState.UNHEALTHY);\n        return RMNodeState.RUNNING;\n      }\n\n      return RMNodeState.UNHEALTHY;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "cbdb07f4ca358b9507296868a913977ad82ed716": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2775. Fixed ResourceManager and NodeManager to force a decommissioned node to shutdown. Contributed by Devaraj K.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190467 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/11 10:31 AM",
      "commitName": "cbdb07f4ca358b9507296868a913977ad82ed716",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/09/11 10:03 AM",
      "commitNameOld": "87b969c83541c6719abcc1dabc38dc41704876ee",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 31.02,
      "commitsBetweenForRepo": 282,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n     public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n       NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n       rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n       if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n+        ClusterMetrics.getMetrics().decrNumUnhealthyNMs();\n         return RMNodeState.RUNNING;\n       }\n \n       return RMNodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        ClusterMetrics.getMetrics().decrNumUnhealthyNMs();\n        return RMNodeState.RUNNING;\n      }\n\n      return RMNodeState.UNHEALTHY;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "5ace0cabe5b88bc4f9d807e01181647d0a28db92": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2990. Fixed display of NodeHealthStatus. Contributed by Subroto Sanyal.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175351 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/09/11 2:36 AM",
      "commitName": "5ace0cabe5b88bc4f9d807e01181647d0a28db92",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "11/09/11 10:26 AM",
      "commitNameOld": "817ead65b99f465fc2dfa18072cf23cadf5f05d0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 13.67,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,15 @@\n     public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n       RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n \n       // Switch the last heartbeatresponse.\n       rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n-\n-      if (statusEvent.getNodeHealthStatus().getIsNodeHealthy()) {\n+      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n+      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n+      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n         rmNode.context.getDispatcher().getEventHandler().handle(\n             new NodeAddedSchedulerEvent(rmNode));\n         return RMNodeState.RUNNING;\n       }\n \n       return RMNodeState.UNHEALTHY;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n      NodeHealthStatus remoteNodeHealthStatus \u003d statusEvent.getNodeHealthStatus();\n      rmNode.setNodeHealthStatus(remoteNodeHealthStatus);\n      if (remoteNodeHealthStatus.getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        return RMNodeState.RUNNING;\n      }\n\n      return RMNodeState.UNHEALTHY;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n\n      if (statusEvent.getNodeHealthStatus().getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        return RMNodeState.RUNNING;\n      }\n\n      return RMNodeState.UNHEALTHY;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,14 @@\n+    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n+      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n+\n+      // Switch the last heartbeatresponse.\n+      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n+\n+      if (statusEvent.getNodeHealthStatus().getIsNodeHealthy()) {\n+        rmNode.context.getDispatcher().getEventHandler().handle(\n+            new NodeAddedSchedulerEvent(rmNode));\n+        return RMNodeState.RUNNING;\n+      }\n+\n+      return RMNodeState.UNHEALTHY;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public RMNodeState transition(RMNodeImpl rmNode, RMNodeEvent event) {\n      RMNodeStatusEvent statusEvent \u003d (RMNodeStatusEvent) event;\n\n      // Switch the last heartbeatresponse.\n      rmNode.latestHeartBeatResponse \u003d statusEvent.getLatestResponse();\n\n      if (statusEvent.getNodeHealthStatus().getIsNodeHealthy()) {\n        rmNode.context.getDispatcher().getEventHandler().handle(\n            new NodeAddedSchedulerEvent(rmNode));\n        return RMNodeState.RUNNING;\n      }\n\n      return RMNodeState.UNHEALTHY;\n    }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java"
    }
  }
}