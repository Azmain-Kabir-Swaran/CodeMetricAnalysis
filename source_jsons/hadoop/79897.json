{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLinkResolver.java",
  "functionName": "qualifySymlinkTarget",
  "functionId": "qualifySymlinkTarget___pathURI-URI(modifiers-final)__pathWithLink-Path__target-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
  "functionStartLine": 46,
  "functionEndLine": 55,
  "numCommitsSeen": 57,
  "timeTaken": 2726,
  "changeHistory": [
    "33fe54a25f04673048f0f0db4abaa42535f043ec",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
    "c24bc56484369404afae52fc2f3a23b75bfbbe75",
    "cb5c6c90c4c835a5f263629d938ed42a925bd0c2",
    "d4306d4bd115d8db294a61f88f3a432f98e79556",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0"
  ],
  "changeHistoryShort": {
    "33fe54a25f04673048f0f0db4abaa42535f043ec": "Ymodifierchange",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "c24bc56484369404afae52fc2f3a23b75bfbbe75": "Ymodifierchange",
    "cb5c6c90c4c835a5f263629d938ed42a925bd0c2": "Ybodychange",
    "d4306d4bd115d8db294a61f88f3a432f98e79556": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "33fe54a25f04673048f0f0db4abaa42535f043ec": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-9416.  Add new symlink resolution methods in FileSystem and FileSystemLinkResolver.  (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/13 4:29 PM",
      "commitName": "33fe54a25f04673048f0f0db4abaa42535f043ec",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "01/07/13 3:09 PM",
      "commitNameOld": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n-  private static Path qualifySymlinkTarget(final URI pathURI,\n+  public static Path qualifySymlinkTarget(final URI pathURI,\n       Path pathWithLink, Path target) {\n     // NB: makeQualified uses the target\u0027s scheme and authority, if\n     // specified, and the scheme and authority of pathURI, if not.\n     final URI targetUri \u003d target.toUri();\n     final String scheme \u003d targetUri.getScheme();\n     final String auth \u003d targetUri.getAuthority();\n     return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n         pathWithLink.getParent()) : target;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Path qualifySymlinkTarget(final URI pathURI,\n      Path pathWithLink, Path target) {\n    // NB: makeQualified uses the target\u0027s scheme and authority, if\n    // specified, and the scheme and authority of pathURI, if not.\n    final URI targetUri \u003d target.toUri();\n    final String scheme \u003d targetUri.getScheme();\n    final String auth \u003d targetUri.getAuthority();\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n        pathWithLink.getParent()) : target;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
      "extendedDetails": {
        "oldValue": "[private, static]",
        "newValue": "[public, static]"
      }
    },
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/13 3:09 PM",
      "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/13 3:09 PM",
          "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/07/13 1:20 PM",
          "commitNameOld": "ead7fa0413fd8aacd6d93697cf398ed17c30930f",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  private static Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n-    Path pathWithLink, Path target) {\n+  private static Path qualifySymlinkTarget(final URI pathURI,\n+      Path pathWithLink, Path target) {\n     // NB: makeQualified uses the target\u0027s scheme and authority, if\n-    // specified, and the scheme and authority of pathFS, if not.\n-    final String scheme \u003d target.toUri().getScheme();\n-    final String auth   \u003d target.toUri().getAuthority();\n-    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n-      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n-      : target;\n+    // specified, and the scheme and authority of pathURI, if not.\n+    final URI targetUri \u003d target.toUri();\n+    final String scheme \u003d targetUri.getScheme();\n+    final String auth \u003d targetUri.getAuthority();\n+    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n+        pathWithLink.getParent()) : target;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Path qualifySymlinkTarget(final URI pathURI,\n      Path pathWithLink, Path target) {\n    // NB: makeQualified uses the target\u0027s scheme and authority, if\n    // specified, and the scheme and authority of pathURI, if not.\n    final URI targetUri \u003d target.toUri();\n    final String scheme \u003d targetUri.getScheme();\n    final String auth \u003d targetUri.getAuthority();\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n        pathWithLink.getParent()) : target;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
            "oldMethodName": "qualifySymlinkTarget",
            "newMethodName": "qualifySymlinkTarget"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/13 3:09 PM",
          "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/07/13 1:20 PM",
          "commitNameOld": "ead7fa0413fd8aacd6d93697cf398ed17c30930f",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  private static Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n-    Path pathWithLink, Path target) {\n+  private static Path qualifySymlinkTarget(final URI pathURI,\n+      Path pathWithLink, Path target) {\n     // NB: makeQualified uses the target\u0027s scheme and authority, if\n-    // specified, and the scheme and authority of pathFS, if not.\n-    final String scheme \u003d target.toUri().getScheme();\n-    final String auth   \u003d target.toUri().getAuthority();\n-    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n-      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n-      : target;\n+    // specified, and the scheme and authority of pathURI, if not.\n+    final URI targetUri \u003d target.toUri();\n+    final String scheme \u003d targetUri.getScheme();\n+    final String auth \u003d targetUri.getAuthority();\n+    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n+        pathWithLink.getParent()) : target;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Path qualifySymlinkTarget(final URI pathURI,\n      Path pathWithLink, Path target) {\n    // NB: makeQualified uses the target\u0027s scheme and authority, if\n    // specified, and the scheme and authority of pathURI, if not.\n    final URI targetUri \u003d target.toUri();\n    final String scheme \u003d targetUri.getScheme();\n    final String auth \u003d targetUri.getAuthority();\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n        pathWithLink.getParent()) : target;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/13 3:09 PM",
          "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/07/13 1:20 PM",
          "commitNameOld": "ead7fa0413fd8aacd6d93697cf398ed17c30930f",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,10 +1,10 @@\n-  private static Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n-    Path pathWithLink, Path target) {\n+  private static Path qualifySymlinkTarget(final URI pathURI,\n+      Path pathWithLink, Path target) {\n     // NB: makeQualified uses the target\u0027s scheme and authority, if\n-    // specified, and the scheme and authority of pathFS, if not.\n-    final String scheme \u003d target.toUri().getScheme();\n-    final String auth   \u003d target.toUri().getAuthority();\n-    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n-      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n-      : target;\n+    // specified, and the scheme and authority of pathURI, if not.\n+    final URI targetUri \u003d target.toUri();\n+    final String scheme \u003d targetUri.getScheme();\n+    final String auth \u003d targetUri.getAuthority();\n+    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n+        pathWithLink.getParent()) : target;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static Path qualifySymlinkTarget(final URI pathURI,\n      Path pathWithLink, Path target) {\n    // NB: makeQualified uses the target\u0027s scheme and authority, if\n    // specified, and the scheme and authority of pathURI, if not.\n    final URI targetUri \u003d target.toUri();\n    final String scheme \u003d targetUri.getScheme();\n    final String auth \u003d targetUri.getAuthority();\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null) ? target.makeQualified(pathURI,\n        pathWithLink.getParent()) : target;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
          "extendedDetails": {
            "oldValue": "[pathFS-AbstractFileSystem(modifiers-final), pathWithLink-Path, target-Path]",
            "newValue": "[pathURI-URI(modifiers-final), pathWithLink-Path, target-Path]"
          }
        }
      ]
    },
    "c24bc56484369404afae52fc2f3a23b75bfbbe75": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-9075. FileContext#FSLinkResolver should be made static. Contributed by Arpit Agarwal.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1411988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/11/12 9:55 PM",
      "commitName": "c24bc56484369404afae52fc2f3a23b75bfbbe75",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "19/09/12 9:06 PM",
      "commitNameOld": "4c56bccf5ee1d6ec1fcef0804eacae785c4d7c18",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 62.08,
      "commitsBetweenForRepo": 356,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,10 @@\n-  private Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n+  private static Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n     Path pathWithLink, Path target) {\n     // NB: makeQualified uses the target\u0027s scheme and authority, if\n     // specified, and the scheme and authority of pathFS, if not.\n     final String scheme \u003d target.toUri().getScheme();\n     final String auth   \u003d target.toUri().getAuthority();\n     return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n       ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n       : target;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n    Path pathWithLink, Path target) {\n    // NB: makeQualified uses the target\u0027s scheme and authority, if\n    // specified, and the scheme and authority of pathFS, if not.\n    final String scheme \u003d target.toUri().getScheme();\n    final String auth   \u003d target.toUri().getAuthority();\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n      : target;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "cb5c6c90c4c835a5f263629d938ed42a925bd0c2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7859. TestViewFsHdfs.testgetFileLinkStatus is failing an assert. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1206786 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/11/11 9:58 AM",
      "commitName": "cb5c6c90c4c835a5f263629d938ed42a925bd0c2",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "20/11/11 11:11 PM",
      "commitNameOld": "d4306d4bd115d8db294a61f88f3a432f98e79556",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 6.45,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,10 @@\n   private Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n     Path pathWithLink, Path target) {\n-    /* NB: makeQualified uses the target\u0027s scheme and authority, if\n-     * specified, and the scheme and authority of pathFS, if not. If\n-     * the path does have a scheme and authority we assert they match\n-     * those of pathFS since resolve updates the file system of a path\n-     * that contains links each time a link is encountered.\n-     */\n+    // NB: makeQualified uses the target\u0027s scheme and authority, if\n+    // specified, and the scheme and authority of pathFS, if not.\n     final String scheme \u003d target.toUri().getScheme();\n     final String auth   \u003d target.toUri().getAuthority();\n-    if (scheme !\u003d null \u0026\u0026 auth !\u003d null) {\n-      assert scheme.equals(pathFS.getUri().getScheme());\n-      assert auth.equals(pathFS.getUri().getAuthority());\n-    }\n     return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n       ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n       : target;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n    Path pathWithLink, Path target) {\n    // NB: makeQualified uses the target\u0027s scheme and authority, if\n    // specified, and the scheme and authority of pathFS, if not.\n    final String scheme \u003d target.toUri().getScheme();\n    final String auth   \u003d target.toUri().getAuthority();\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n      : target;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {}
    },
    "d4306d4bd115d8db294a61f88f3a432f98e79556": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-7783. Add more symlink tests that cover intermediate links. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204376 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/11/11 11:11 PM",
      "commitName": "d4306d4bd115d8db294a61f88f3a432f98e79556",
      "commitAuthor": "Eli Collins",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7783. Add more symlink tests that cover intermediate links. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204376 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/11/11 11:11 PM",
          "commitName": "d4306d4bd115d8db294a61f88f3a432f98e79556",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "01/11/11 9:58 AM",
          "commitNameOld": "877021eb50dd0168b15a713602c0295bb79615eb",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 19.59,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,18 @@\n-  private Path qualifySymlinkTarget(final AbstractFileSystem linkFS, \n-      Path link, Path target) {\n-    /* NB: makeQualified uses link\u0027s scheme/authority, if specified, \n-     * and the scheme/authority of linkFS, if not. If link does have\n-     * a scheme and authority they should match those of linkFS since\n-     * resolve updates the path and file system of a path that contains\n-     * links each time a link is encountered.\n+  private Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n+    Path pathWithLink, Path target) {\n+    /* NB: makeQualified uses the target\u0027s scheme and authority, if\n+     * specified, and the scheme and authority of pathFS, if not. If\n+     * the path does have a scheme and authority we assert they match\n+     * those of pathFS since resolve updates the file system of a path\n+     * that contains links each time a link is encountered.\n      */\n-    final String linkScheme \u003d link.toUri().getScheme();\n-    final String linkAuth   \u003d link.toUri().getAuthority();\n-    if (linkScheme !\u003d null \u0026\u0026 linkAuth !\u003d null) {\n-      assert linkScheme.equals(linkFS.getUri().getScheme());\n-      assert linkAuth.equals(linkFS.getUri().getAuthority());\n+    final String scheme \u003d target.toUri().getScheme();\n+    final String auth   \u003d target.toUri().getAuthority();\n+    if (scheme !\u003d null \u0026\u0026 auth !\u003d null) {\n+      assert scheme.equals(pathFS.getUri().getScheme());\n+      assert auth.equals(pathFS.getUri().getAuthority());\n     }\n-    final boolean justPath \u003d (target.toUri().getScheme() \u003d\u003d null \u0026\u0026\n-                              target.toUri().getAuthority() \u003d\u003d null);\n-    return justPath ? target.makeQualified(linkFS.getUri(), link.getParent()) \n-                    : target;\n+    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n+      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n+      : target;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n    Path pathWithLink, Path target) {\n    /* NB: makeQualified uses the target\u0027s scheme and authority, if\n     * specified, and the scheme and authority of pathFS, if not. If\n     * the path does have a scheme and authority we assert they match\n     * those of pathFS since resolve updates the file system of a path\n     * that contains links each time a link is encountered.\n     */\n    final String scheme \u003d target.toUri().getScheme();\n    final String auth   \u003d target.toUri().getAuthority();\n    if (scheme !\u003d null \u0026\u0026 auth !\u003d null) {\n      assert scheme.equals(pathFS.getUri().getScheme());\n      assert auth.equals(pathFS.getUri().getAuthority());\n    }\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n      : target;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {
            "oldValue": "[linkFS-AbstractFileSystem(modifiers-final), link-Path, target-Path]",
            "newValue": "[pathFS-AbstractFileSystem(modifiers-final), pathWithLink-Path, target-Path]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7783. Add more symlink tests that cover intermediate links. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204376 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/11/11 11:11 PM",
          "commitName": "d4306d4bd115d8db294a61f88f3a432f98e79556",
          "commitAuthor": "Eli Collins",
          "commitDateOld": "01/11/11 9:58 AM",
          "commitNameOld": "877021eb50dd0168b15a713602c0295bb79615eb",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 19.59,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,18 @@\n-  private Path qualifySymlinkTarget(final AbstractFileSystem linkFS, \n-      Path link, Path target) {\n-    /* NB: makeQualified uses link\u0027s scheme/authority, if specified, \n-     * and the scheme/authority of linkFS, if not. If link does have\n-     * a scheme and authority they should match those of linkFS since\n-     * resolve updates the path and file system of a path that contains\n-     * links each time a link is encountered.\n+  private Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n+    Path pathWithLink, Path target) {\n+    /* NB: makeQualified uses the target\u0027s scheme and authority, if\n+     * specified, and the scheme and authority of pathFS, if not. If\n+     * the path does have a scheme and authority we assert they match\n+     * those of pathFS since resolve updates the file system of a path\n+     * that contains links each time a link is encountered.\n      */\n-    final String linkScheme \u003d link.toUri().getScheme();\n-    final String linkAuth   \u003d link.toUri().getAuthority();\n-    if (linkScheme !\u003d null \u0026\u0026 linkAuth !\u003d null) {\n-      assert linkScheme.equals(linkFS.getUri().getScheme());\n-      assert linkAuth.equals(linkFS.getUri().getAuthority());\n+    final String scheme \u003d target.toUri().getScheme();\n+    final String auth   \u003d target.toUri().getAuthority();\n+    if (scheme !\u003d null \u0026\u0026 auth !\u003d null) {\n+      assert scheme.equals(pathFS.getUri().getScheme());\n+      assert auth.equals(pathFS.getUri().getAuthority());\n     }\n-    final boolean justPath \u003d (target.toUri().getScheme() \u003d\u003d null \u0026\u0026\n-                              target.toUri().getAuthority() \u003d\u003d null);\n-    return justPath ? target.makeQualified(linkFS.getUri(), link.getParent()) \n-                    : target;\n+    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n+      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n+      : target;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Path qualifySymlinkTarget(final AbstractFileSystem pathFS,\n    Path pathWithLink, Path target) {\n    /* NB: makeQualified uses the target\u0027s scheme and authority, if\n     * specified, and the scheme and authority of pathFS, if not. If\n     * the path does have a scheme and authority we assert they match\n     * those of pathFS since resolve updates the file system of a path\n     * that contains links each time a link is encountered.\n     */\n    final String scheme \u003d target.toUri().getScheme();\n    final String auth   \u003d target.toUri().getAuthority();\n    if (scheme !\u003d null \u0026\u0026 auth !\u003d null) {\n      assert scheme.equals(pathFS.getUri().getScheme());\n      assert auth.equals(pathFS.getUri().getAuthority());\n    }\n    return (scheme \u003d\u003d null \u0026\u0026 auth \u003d\u003d null)\n      ? target.makeQualified(pathFS.getUri(), pathWithLink.getParent())\n      : target;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Path qualifySymlinkTarget(final AbstractFileSystem linkFS, \n      Path link, Path target) {\n    /* NB: makeQualified uses link\u0027s scheme/authority, if specified, \n     * and the scheme/authority of linkFS, if not. If link does have\n     * a scheme and authority they should match those of linkFS since\n     * resolve updates the path and file system of a path that contains\n     * links each time a link is encountered.\n     */\n    final String linkScheme \u003d link.toUri().getScheme();\n    final String linkAuth   \u003d link.toUri().getAuthority();\n    if (linkScheme !\u003d null \u0026\u0026 linkAuth !\u003d null) {\n      assert linkScheme.equals(linkFS.getUri().getScheme());\n      assert linkAuth.equals(linkFS.getUri().getAuthority());\n    }\n    final boolean justPath \u003d (target.toUri().getScheme() \u003d\u003d null \u0026\u0026\n                              target.toUri().getAuthority() \u003d\u003d null);\n    return justPath ? target.makeQualified(linkFS.getUri(), link.getParent()) \n                    : target;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Path qualifySymlinkTarget(final AbstractFileSystem linkFS, \n      Path link, Path target) {\n    /* NB: makeQualified uses link\u0027s scheme/authority, if specified, \n     * and the scheme/authority of linkFS, if not. If link does have\n     * a scheme and authority they should match those of linkFS since\n     * resolve updates the path and file system of a path that contains\n     * links each time a link is encountered.\n     */\n    final String linkScheme \u003d link.toUri().getScheme();\n    final String linkAuth   \u003d link.toUri().getAuthority();\n    if (linkScheme !\u003d null \u0026\u0026 linkAuth !\u003d null) {\n      assert linkScheme.equals(linkFS.getUri().getScheme());\n      assert linkAuth.equals(linkFS.getUri().getAuthority());\n    }\n    final boolean justPath \u003d (target.toUri().getScheme() \u003d\u003d null \u0026\u0026\n                              target.toUri().getAuthority() \u003d\u003d null);\n    return justPath ? target.makeQualified(linkFS.getUri(), link.getParent()) \n                    : target;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Path qualifySymlinkTarget(final AbstractFileSystem linkFS, \n      Path link, Path target) {\n    /* NB: makeQualified uses link\u0027s scheme/authority, if specified, \n     * and the scheme/authority of linkFS, if not. If link does have\n     * a scheme and authority they should match those of linkFS since\n     * resolve updates the path and file system of a path that contains\n     * links each time a link is encountered.\n     */\n    final String linkScheme \u003d link.toUri().getScheme();\n    final String linkAuth   \u003d link.toUri().getAuthority();\n    if (linkScheme !\u003d null \u0026\u0026 linkAuth !\u003d null) {\n      assert linkScheme.equals(linkFS.getUri().getScheme());\n      assert linkAuth.equals(linkFS.getUri().getAuthority());\n    }\n    final boolean justPath \u003d (target.toUri().getScheme() \u003d\u003d null \u0026\u0026\n                              target.toUri().getAuthority() \u003d\u003d null);\n    return justPath ? target.makeQualified(linkFS.getUri(), link.getParent()) \n                    : target;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": {
      "type": "Yintroduced",
      "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/10 1:43 PM",
      "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,19 @@\n+  private Path qualifySymlinkTarget(final AbstractFileSystem linkFS, \n+      Path link, Path target) {\n+    /* NB: makeQualified uses link\u0027s scheme/authority, if specified, \n+     * and the scheme/authority of linkFS, if not. If link does have\n+     * a scheme and authority they should match those of linkFS since\n+     * resolve updates the path and file system of a path that contains\n+     * links each time a link is encountered.\n+     */\n+    final String linkScheme \u003d link.toUri().getScheme();\n+    final String linkAuth   \u003d link.toUri().getAuthority();\n+    if (linkScheme !\u003d null \u0026\u0026 linkAuth !\u003d null) {\n+      assert linkScheme.equals(linkFS.getUri().getScheme());\n+      assert linkAuth.equals(linkFS.getUri().getAuthority());\n+    }\n+    final boolean justPath \u003d (target.toUri().getScheme() \u003d\u003d null \u0026\u0026\n+                              target.toUri().getAuthority() \u003d\u003d null);\n+    return justPath ? target.makeQualified(linkFS.getUri(), link.getParent()) \n+                    : target;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Path qualifySymlinkTarget(final AbstractFileSystem linkFS, \n      Path link, Path target) {\n    /* NB: makeQualified uses link\u0027s scheme/authority, if specified, \n     * and the scheme/authority of linkFS, if not. If link does have\n     * a scheme and authority they should match those of linkFS since\n     * resolve updates the path and file system of a path that contains\n     * links each time a link is encountered.\n     */\n    final String linkScheme \u003d link.toUri().getScheme();\n    final String linkAuth   \u003d link.toUri().getAuthority();\n    if (linkScheme !\u003d null \u0026\u0026 linkAuth !\u003d null) {\n      assert linkScheme.equals(linkFS.getUri().getScheme());\n      assert linkAuth.equals(linkFS.getUri().getAuthority());\n    }\n    final boolean justPath \u003d (target.toUri().getScheme() \u003d\u003d null \u0026\u0026\n                              target.toUri().getAuthority() \u003d\u003d null);\n    return justPath ? target.makeQualified(linkFS.getUri(), link.getParent()) \n                    : target;\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}