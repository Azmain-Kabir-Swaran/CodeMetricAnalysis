{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileUtil.java",
  "functionName": "unpackEntries",
  "functionId": "unpackEntries___tis-TarArchiveInputStream__entry-TarArchiveEntry__outputDir-File",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
  "functionStartLine": 962,
  "functionEndLine": 1007,
  "numCommitsSeen": 52,
  "timeTaken": 3276,
  "changeHistory": [
    "57198bc51122a36db8cb4788fcb7b55edc788b3b",
    "745f203e577bacb35b042206db94615141fa5e6f",
    "460d77bd646d03d3eb7670f9017aeeb5410c4a95",
    "dd149adeace8727864371c5a1484c6534f8b450b",
    "0e80d51983942dca3348c8a8401bad3ecbaab010",
    "a1690519317068d9855174752d22ff45f0e4c962",
    "71a57ded39a605166d616fe68f36017cdb0abe3e"
  ],
  "changeHistoryShort": {
    "57198bc51122a36db8cb4788fcb7b55edc788b3b": "Ybodychange",
    "745f203e577bacb35b042206db94615141fa5e6f": "Ybodychange",
    "460d77bd646d03d3eb7670f9017aeeb5410c4a95": "Ybodychange",
    "dd149adeace8727864371c5a1484c6534f8b450b": "Ybodychange",
    "0e80d51983942dca3348c8a8401bad3ecbaab010": "Ybodychange",
    "a1690519317068d9855174752d22ff45f0e4c962": "Ybodychange",
    "71a57ded39a605166d616fe68f36017cdb0abe3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "57198bc51122a36db8cb4788fcb7b55edc788b3b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15962. The buffer size is small when unpacking tar archives. Contributed by BELUGA BEHR.\n",
      "commitDate": "27/12/18 10:38 PM",
      "commitName": "57198bc51122a36db8cb4788fcb7b55edc788b3b",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/10/18 9:51 PM",
      "commitNameOld": "7b57f2f71fbaa5af4897309597cca70a95b04edd",
      "commitAuthorOld": "Takanobu Asanuma",
      "daysBetweenCommits": 78.07,
      "commitsBetweenForRepo": 608,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,46 @@\n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n     String targetDirPath \u003d outputDir.getCanonicalPath() + File.separator;\n     File outputFile \u003d new File(outputDir, entry.getName());\n     if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n       throw new IOException(\"expanding \" + entry.getName()\n           + \" would create entry outside of \" + outputDir);\n     }\n \n     if (entry.isDirectory()) {\n       File subDir \u003d new File(outputDir, entry.getName());\n       if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n \n       for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n         unpackEntries(tis, e, subDir);\n       }\n \n       return;\n     }\n \n     if (entry.isSymbolicLink()) {\n       // Create symbolic link relative to tar parent dir\n       Files.createSymbolicLink(FileSystems.getDefault()\n               .getPath(outputDir.getPath(), entry.getName()),\n           FileSystems.getDefault().getPath(entry.getLinkName()));\n       return;\n     }\n \n     if (!outputFile.getParentFile().exists()) {\n       if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n     }\n \n     if (entry.isLink()) {\n       File src \u003d new File(outputDir, entry.getLinkName());\n       HardLink.createHardLink(src, outputFile);\n       return;\n     }\n \n-    int count;\n-    byte data[] \u003d new byte[2048];\n-    try (BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n-        new FileOutputStream(outputFile));) {\n-\n-      while ((count \u003d tis.read(data)) !\u003d -1) {\n-        outputStream.write(data, 0, count);\n-      }\n-\n-      outputStream.flush();\n-    }\n+    org.apache.commons.io.FileUtils.copyToFile(tis, outputFile);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unpackEntries(TarArchiveInputStream tis,\n      TarArchiveEntry entry, File outputDir) throws IOException {\n    String targetDirPath \u003d outputDir.getCanonicalPath() + File.separator;\n    File outputFile \u003d new File(outputDir, entry.getName());\n    if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n      throw new IOException(\"expanding \" + entry.getName()\n          + \" would create entry outside of \" + outputDir);\n    }\n\n    if (entry.isDirectory()) {\n      File subDir \u003d new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    if (entry.isSymbolicLink()) {\n      // Create symbolic link relative to tar parent dir\n      Files.createSymbolicLink(FileSystems.getDefault()\n              .getPath(outputDir.getPath(), entry.getName()),\n          FileSystems.getDefault().getPath(entry.getLinkName()));\n      return;\n    }\n\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    if (entry.isLink()) {\n      File src \u003d new File(outputDir, entry.getLinkName());\n      HardLink.createHardLink(src, outputFile);\n      return;\n    }\n\n    org.apache.commons.io.FileUtils.copyToFile(tis, outputFile);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "745f203e577bacb35b042206db94615141fa5e6f": {
      "type": "Ybodychange",
      "commitMessage": "Additional check when unpacking archives. Contributed by Jason Lowe and Akira Ajisaka.\n",
      "commitDate": "23/05/18 1:16 AM",
      "commitName": "745f203e577bacb35b042206db94615141fa5e6f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/02/18 9:33 AM",
      "commitNameOld": "460d77bd646d03d3eb7670f9017aeeb5410c4a95",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 109.61,
      "commitsBetweenForRepo": 1371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,56 @@\n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n+    String targetDirPath \u003d outputDir.getCanonicalPath() + File.separator;\n+    File outputFile \u003d new File(outputDir, entry.getName());\n+    if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n+      throw new IOException(\"expanding \" + entry.getName()\n+          + \" would create entry outside of \" + outputDir);\n+    }\n+\n     if (entry.isDirectory()) {\n       File subDir \u003d new File(outputDir, entry.getName());\n       if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n \n       for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n         unpackEntries(tis, e, subDir);\n       }\n \n       return;\n     }\n \n     if (entry.isSymbolicLink()) {\n       // Create symbolic link relative to tar parent dir\n       Files.createSymbolicLink(FileSystems.getDefault()\n               .getPath(outputDir.getPath(), entry.getName()),\n           FileSystems.getDefault().getPath(entry.getLinkName()));\n       return;\n     }\n \n-    File outputFile \u003d new File(outputDir, entry.getName());\n     if (!outputFile.getParentFile().exists()) {\n       if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n     }\n \n     if (entry.isLink()) {\n       File src \u003d new File(outputDir, entry.getLinkName());\n       HardLink.createHardLink(src, outputFile);\n       return;\n     }\n \n     int count;\n     byte data[] \u003d new byte[2048];\n     try (BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n         new FileOutputStream(outputFile));) {\n \n       while ((count \u003d tis.read(data)) !\u003d -1) {\n         outputStream.write(data, 0, count);\n       }\n \n       outputStream.flush();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unpackEntries(TarArchiveInputStream tis,\n      TarArchiveEntry entry, File outputDir) throws IOException {\n    String targetDirPath \u003d outputDir.getCanonicalPath() + File.separator;\n    File outputFile \u003d new File(outputDir, entry.getName());\n    if (!outputFile.getCanonicalPath().startsWith(targetDirPath)) {\n      throw new IOException(\"expanding \" + entry.getName()\n          + \" would create entry outside of \" + outputDir);\n    }\n\n    if (entry.isDirectory()) {\n      File subDir \u003d new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    if (entry.isSymbolicLink()) {\n      // Create symbolic link relative to tar parent dir\n      Files.createSymbolicLink(FileSystems.getDefault()\n              .getPath(outputDir.getPath(), entry.getName()),\n          FileSystems.getDefault().getPath(entry.getLinkName()));\n      return;\n    }\n\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    if (entry.isLink()) {\n      File src \u003d new File(outputDir, entry.getLinkName());\n      HardLink.createHardLink(src, outputFile);\n      return;\n    }\n\n    int count;\n    byte data[] \u003d new byte[2048];\n    try (BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n        new FileOutputStream(outputFile));) {\n\n      while ((count \u003d tis.read(data)) !\u003d -1) {\n        outputStream.write(data, 0, count);\n      }\n\n      outputStream.flush();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "460d77bd646d03d3eb7670f9017aeeb5410c4a95": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15170. Add symlink support to FileUtil#unTarUsingJava. Contributed by Ajay Kumar\n",
      "commitDate": "02/02/18 9:33 AM",
      "commitName": "460d77bd646d03d3eb7670f9017aeeb5410c4a95",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "31/01/18 7:39 AM",
      "commitNameOld": "7288b08330001102f944124d18e02bf0585d3e96",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,50 @@\n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n     if (entry.isDirectory()) {\n       File subDir \u003d new File(outputDir, entry.getName());\n       if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n \n       for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n         unpackEntries(tis, e, subDir);\n       }\n \n       return;\n     }\n \n+    if (entry.isSymbolicLink()) {\n+      // Create symbolic link relative to tar parent dir\n+      Files.createSymbolicLink(FileSystems.getDefault()\n+              .getPath(outputDir.getPath(), entry.getName()),\n+          FileSystems.getDefault().getPath(entry.getLinkName()));\n+      return;\n+    }\n+\n     File outputFile \u003d new File(outputDir, entry.getName());\n     if (!outputFile.getParentFile().exists()) {\n       if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n     }\n \n     if (entry.isLink()) {\n       File src \u003d new File(outputDir, entry.getLinkName());\n       HardLink.createHardLink(src, outputFile);\n       return;\n     }\n \n     int count;\n     byte data[] \u003d new byte[2048];\n     try (BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n         new FileOutputStream(outputFile));) {\n \n       while ((count \u003d tis.read(data)) !\u003d -1) {\n         outputStream.write(data, 0, count);\n       }\n \n       outputStream.flush();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unpackEntries(TarArchiveInputStream tis,\n      TarArchiveEntry entry, File outputDir) throws IOException {\n    if (entry.isDirectory()) {\n      File subDir \u003d new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    if (entry.isSymbolicLink()) {\n      // Create symbolic link relative to tar parent dir\n      Files.createSymbolicLink(FileSystems.getDefault()\n              .getPath(outputDir.getPath(), entry.getName()),\n          FileSystems.getDefault().getPath(entry.getLinkName()));\n      return;\n    }\n\n    File outputFile \u003d new File(outputDir, entry.getName());\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    if (entry.isLink()) {\n      File src \u003d new File(outputDir, entry.getLinkName());\n      HardLink.createHardLink(src, outputFile);\n      return;\n    }\n\n    int count;\n    byte data[] \u003d new byte[2048];\n    try (BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n        new FileOutputStream(outputFile));) {\n\n      while ((count \u003d tis.read(data)) !\u003d -1) {\n        outputStream.write(data, 0, count);\n      }\n\n      outputStream.flush();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "dd149adeace8727864371c5a1484c6534f8b450b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10365. BufferedOutputStream in FileUtil#unpackEntries() should be closed in finally block. Contributed by Kiran Kumar M R and Sanghyun Yun.\n",
      "commitDate": "01/09/15 10:01 AM",
      "commitName": "dd149adeace8727864371c5a1484c6534f8b450b",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "30/06/15 4:49 PM",
      "commitNameOld": "aaafa0b2ee64f6cfb7fdc717500e1c483b9df8cc",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 62.72,
      "commitsBetweenForRepo": 345,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n     if (entry.isDirectory()) {\n       File subDir \u003d new File(outputDir, entry.getName());\n       if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n \n       for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n         unpackEntries(tis, e, subDir);\n       }\n \n       return;\n     }\n \n     File outputFile \u003d new File(outputDir, entry.getName());\n     if (!outputFile.getParentFile().exists()) {\n       if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n     }\n \n     if (entry.isLink()) {\n       File src \u003d new File(outputDir, entry.getLinkName());\n       HardLink.createHardLink(src, outputFile);\n       return;\n     }\n \n     int count;\n     byte data[] \u003d new byte[2048];\n-    BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n-        new FileOutputStream(outputFile));\n+    try (BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n+        new FileOutputStream(outputFile));) {\n \n-    while ((count \u003d tis.read(data)) !\u003d -1) {\n-      outputStream.write(data, 0, count);\n+      while ((count \u003d tis.read(data)) !\u003d -1) {\n+        outputStream.write(data, 0, count);\n+      }\n+\n+      outputStream.flush();\n     }\n-\n-    outputStream.flush();\n-    outputStream.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unpackEntries(TarArchiveInputStream tis,\n      TarArchiveEntry entry, File outputDir) throws IOException {\n    if (entry.isDirectory()) {\n      File subDir \u003d new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    File outputFile \u003d new File(outputDir, entry.getName());\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    if (entry.isLink()) {\n      File src \u003d new File(outputDir, entry.getLinkName());\n      HardLink.createHardLink(src, outputFile);\n      return;\n    }\n\n    int count;\n    byte data[] \u003d new byte[2048];\n    try (BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n        new FileOutputStream(outputFile));) {\n\n      while ((count \u003d tis.read(data)) !\u003d -1) {\n        outputStream.write(data, 0, count);\n      }\n\n      outputStream.flush();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "0e80d51983942dca3348c8a8401bad3ecbaab010": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8554. TestDatanodeLayoutUpgrade fails on Windows. Contributed by Chris Nauroth.\n",
      "commitDate": "08/06/15 8:39 AM",
      "commitName": "0e80d51983942dca3348c8a8401bad3ecbaab010",
      "commitAuthor": "cnauroth",
      "commitDateOld": "27/05/15 4:51 PM",
      "commitNameOld": "bf500d979858b084f0fe5c34a85c271a728e416b",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 11.66,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n     if (entry.isDirectory()) {\n       File subDir \u003d new File(outputDir, entry.getName());\n       if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n \n       for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n         unpackEntries(tis, e, subDir);\n       }\n \n       return;\n     }\n \n     File outputFile \u003d new File(outputDir, entry.getName());\n     if (!outputFile.getParentFile().exists()) {\n       if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n     }\n \n+    if (entry.isLink()) {\n+      File src \u003d new File(outputDir, entry.getLinkName());\n+      HardLink.createHardLink(src, outputFile);\n+      return;\n+    }\n+\n     int count;\n     byte data[] \u003d new byte[2048];\n     BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n         new FileOutputStream(outputFile));\n \n     while ((count \u003d tis.read(data)) !\u003d -1) {\n       outputStream.write(data, 0, count);\n     }\n \n     outputStream.flush();\n     outputStream.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unpackEntries(TarArchiveInputStream tis,\n      TarArchiveEntry entry, File outputDir) throws IOException {\n    if (entry.isDirectory()) {\n      File subDir \u003d new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    File outputFile \u003d new File(outputDir, entry.getName());\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    if (entry.isLink()) {\n      File src \u003d new File(outputDir, entry.getLinkName());\n      HardLink.createHardLink(src, outputFile);\n      return;\n    }\n\n    int count;\n    byte data[] \u003d new byte[2048];\n    BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n        new FileOutputStream(outputFile));\n\n    while ((count \u003d tis.read(data)) !\u003d -1) {\n      outputStream.write(data, 0, count);\n    }\n\n    outputStream.flush();\n    outputStream.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "a1690519317068d9855174752d22ff45f0e4c962": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11179. Java untar should handle the case that the file entry comes without its parent directory entry. Contributed by Craig Welch.\n",
      "commitDate": "08/10/14 3:36 PM",
      "commitName": "a1690519317068d9855174752d22ff45f0e4c962",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "13/03/14 5:30 PM",
      "commitNameOld": "53790d33000cb5804779a56ac3891d0e0e5a904d",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 208.92,
      "commitsBetweenForRepo": 1662,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private static void unpackEntries(TarArchiveInputStream tis,\n       TarArchiveEntry entry, File outputDir) throws IOException {\n     if (entry.isDirectory()) {\n       File subDir \u003d new File(outputDir, entry.getName());\n-      if (!subDir.mkdir() \u0026\u0026 !subDir.isDirectory()) {\n+      if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n \n       for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n         unpackEntries(tis, e, subDir);\n       }\n \n       return;\n     }\n \n     File outputFile \u003d new File(outputDir, entry.getName());\n-    if (!outputDir.exists()) {\n-      if (!outputDir.mkdirs()) {\n+    if (!outputFile.getParentFile().exists()) {\n+      if (!outputFile.getParentFile().mkdirs()) {\n         throw new IOException(\"Mkdirs failed to create tar internal dir \"\n             + outputDir);\n       }\n     }\n \n     int count;\n     byte data[] \u003d new byte[2048];\n     BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n         new FileOutputStream(outputFile));\n \n     while ((count \u003d tis.read(data)) !\u003d -1) {\n       outputStream.write(data, 0, count);\n     }\n \n     outputStream.flush();\n     outputStream.close();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unpackEntries(TarArchiveInputStream tis,\n      TarArchiveEntry entry, File outputDir) throws IOException {\n    if (entry.isDirectory()) {\n      File subDir \u003d new File(outputDir, entry.getName());\n      if (!subDir.mkdirs() \u0026\u0026 !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    File outputFile \u003d new File(outputDir, entry.getName());\n    if (!outputFile.getParentFile().exists()) {\n      if (!outputFile.getParentFile().mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    int count;\n    byte data[] \u003d new byte[2048];\n    BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n        new FileOutputStream(outputFile));\n\n    while ((count \u003d tis.read(data)) !\u003d -1) {\n      outputStream.write(data, 0, count);\n    }\n\n    outputStream.flush();\n    outputStream.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java",
      "extendedDetails": {}
    },
    "71a57ded39a605166d616fe68f36017cdb0abe3e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9264. Port change to use Java untar API on Windows from branch-1-win to trunk. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1441172 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/13 12:13 PM",
      "commitName": "71a57ded39a605166d616fe68f36017cdb0abe3e",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,36 @@\n+  private static void unpackEntries(TarArchiveInputStream tis,\n+      TarArchiveEntry entry, File outputDir) throws IOException {\n+    if (entry.isDirectory()) {\n+      File subDir \u003d new File(outputDir, entry.getName());\n+      if (!subDir.mkdir() \u0026\u0026 !subDir.isDirectory()) {\n+        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n+            + outputDir);\n+      }\n+\n+      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n+        unpackEntries(tis, e, subDir);\n+      }\n+\n+      return;\n+    }\n+\n+    File outputFile \u003d new File(outputDir, entry.getName());\n+    if (!outputDir.exists()) {\n+      if (!outputDir.mkdirs()) {\n+        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n+            + outputDir);\n+      }\n+    }\n+\n+    int count;\n+    byte data[] \u003d new byte[2048];\n+    BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n+        new FileOutputStream(outputFile));\n+\n+    while ((count \u003d tis.read(data)) !\u003d -1) {\n+      outputStream.write(data, 0, count);\n+    }\n+\n+    outputStream.flush();\n+    outputStream.close();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static void unpackEntries(TarArchiveInputStream tis,\n      TarArchiveEntry entry, File outputDir) throws IOException {\n    if (entry.isDirectory()) {\n      File subDir \u003d new File(outputDir, entry.getName());\n      if (!subDir.mkdir() \u0026\u0026 !subDir.isDirectory()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n\n      for (TarArchiveEntry e : entry.getDirectoryEntries()) {\n        unpackEntries(tis, e, subDir);\n      }\n\n      return;\n    }\n\n    File outputFile \u003d new File(outputDir, entry.getName());\n    if (!outputDir.exists()) {\n      if (!outputDir.mkdirs()) {\n        throw new IOException(\"Mkdirs failed to create tar internal dir \"\n            + outputDir);\n      }\n    }\n\n    int count;\n    byte data[] \u003d new byte[2048];\n    BufferedOutputStream outputStream \u003d new BufferedOutputStream(\n        new FileOutputStream(outputFile));\n\n    while ((count \u003d tis.read(data)) !\u003d -1) {\n      outputStream.write(data, 0, count);\n    }\n\n    outputStream.flush();\n    outputStream.close();\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileUtil.java"
    }
  }
}