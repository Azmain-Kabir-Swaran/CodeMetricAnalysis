{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HistoryFileManager.java",
  "functionName": "scanIntermediateDirectory",
  "functionId": "scanIntermediateDirectory",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
  "functionStartLine": 920,
  "functionEndLine": 942,
  "numCommitsSeen": 57,
  "timeTaken": 8672,
  "changeHistory": [
    "053e39e1e458d6437481296ab528327f7241fc78",
    "0928502029ef141759008997335ea2cd836a7154",
    "03b7ad04fadeb1a98271ac1775f900999989eafb",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "053e39e1e458d6437481296ab528327f7241fc78": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ybodychange",
    "03b7ad04fadeb1a98271ac1775f900999989eafb": "Ybodychange",
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "053e39e1e458d6437481296ab528327f7241fc78": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7273.  Fixed Job History server token renewal.\n                 Contributed by Peter Bacsko via eyang\n",
      "commitDate": "16/04/20 5:17 PM",
      "commitName": "053e39e1e458d6437481296ab528327f7241fc78",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "06/09/18 12:13 PM",
      "commitNameOld": "eb0b5a844f960017f6f48d746174d0f5826f0e5f",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 588.21,
      "commitsBetweenForRepo": 3821,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,23 @@\n   void scanIntermediateDirectory() throws IOException {\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();\n+    }\n+\n     // TODO it would be great to limit how often this happens, except in the\n     // case where we are looking for a particular job.\n     List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n         intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n     LOG.debug(\"Scanning intermediate dirs\");\n     for (FileStatus userDir : userDirList) {\n       String name \u003d userDir.getPath().getName();\n       UserLogDir dir \u003d userDirModificationTimeMap.get(name);\n       if(dir \u003d\u003d null) {\n         dir \u003d new UserLogDir();\n         UserLogDir old \u003d userDirModificationTimeMap.putIfAbsent(name, dir);\n         if(old !\u003d null) {\n           dir \u003d old;\n         }\n       }\n       dir.scanIfNeeded(userDir);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void scanIntermediateDirectory() throws IOException {\n    if (UserGroupInformation.isSecurityEnabled()) {\n      UserGroupInformation.getLoginUser().checkTGTAndReloginFromKeytab();\n    }\n\n    // TODO it would be great to limit how often this happens, except in the\n    // case where we are looking for a particular job.\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n        intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n    LOG.debug(\"Scanning intermediate dirs\");\n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      UserLogDir dir \u003d userDirModificationTimeMap.get(name);\n      if(dir \u003d\u003d null) {\n        dir \u003d new UserLogDir();\n        UserLogDir old \u003d userDirModificationTimeMap.putIfAbsent(name, dir);\n        if(old !\u003d null) {\n          dir \u003d old;\n        }\n      }\n      dir.scanIfNeeded(userDir);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ybodychange",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.49,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   void scanIntermediateDirectory() throws IOException {\n     // TODO it would be great to limit how often this happens, except in the\n     // case where we are looking for a particular job.\n     List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n         intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n-\n+    LOG.debug(\"Scanning intermediate dirs\");\n     for (FileStatus userDir : userDirList) {\n       String name \u003d userDir.getPath().getName();\n       UserLogDir dir \u003d userDirModificationTimeMap.get(name);\n       if(dir \u003d\u003d null) {\n         dir \u003d new UserLogDir();\n         UserLogDir old \u003d userDirModificationTimeMap.putIfAbsent(name, dir);\n         if(old !\u003d null) {\n           dir \u003d old;\n         }\n       }\n       dir.scanIfNeeded(userDir);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void scanIntermediateDirectory() throws IOException {\n    // TODO it would be great to limit how often this happens, except in the\n    // case where we are looking for a particular job.\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n        intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n    LOG.debug(\"Scanning intermediate dirs\");\n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      UserLogDir dir \u003d userDirModificationTimeMap.get(name);\n      if(dir \u003d\u003d null) {\n        dir \u003d new UserLogDir();\n        UserLogDir old \u003d userDirModificationTimeMap.putIfAbsent(name, dir);\n        if(old !\u003d null) {\n          dir \u003d old;\n        }\n      }\n      dir.scanIfNeeded(userDir);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "03b7ad04fadeb1a98271ac1775f900999989eafb": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4691. Historyserver can report \"Unknown job\" after RM says job has completed. Contributed by Robert Joseph Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1391671 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/09/12 2:55 PM",
      "commitName": "03b7ad04fadeb1a98271ac1775f900999989eafb",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "07/09/12 9:45 AM",
      "commitNameOld": "77805c7ae41d4f5e9d350fde83294d1d4d7ea7c4",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 21.22,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,19 @@\n   void scanIntermediateDirectory() throws IOException {\n     // TODO it would be great to limit how often this happens, except in the\n     // case where we are looking for a particular job.\n     List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n         intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n \n     for (FileStatus userDir : userDirList) {\n       String name \u003d userDir.getPath().getName();\n-      long newModificationTime \u003d userDir.getModificationTime();\n-      boolean shouldScan \u003d false;\n-      synchronized (userDirModificationTimeMap) {\n-        if (!userDirModificationTimeMap.containsKey(name)\n-            || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n-          shouldScan \u003d true;\n-          userDirModificationTimeMap.put(name, newModificationTime);\n+      UserLogDir dir \u003d userDirModificationTimeMap.get(name);\n+      if(dir \u003d\u003d null) {\n+        dir \u003d new UserLogDir();\n+        UserLogDir old \u003d userDirModificationTimeMap.putIfAbsent(name, dir);\n+        if(old !\u003d null) {\n+          dir \u003d old;\n         }\n       }\n-      if (shouldScan) {\n-        try {\n-          scanIntermediateDirectory(userDir.getPath());\n-        } catch (IOException e) {\n-          LOG.error(\"Error while trying to scan the directory \" \n-              + userDir.getPath(), e);\n-        }\n-      }\n+      dir.scanIfNeeded(userDir);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void scanIntermediateDirectory() throws IOException {\n    // TODO it would be great to limit how often this happens, except in the\n    // case where we are looking for a particular job.\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n        intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n\n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      UserLogDir dir \u003d userDirModificationTimeMap.get(name);\n      if(dir \u003d\u003d null) {\n        dir \u003d new UserLogDir();\n        UserLogDir old \u003d userDirModificationTimeMap.putIfAbsent(name, dir);\n        if(old !\u003d null) {\n          dir \u003d old;\n        }\n      }\n      dir.scanIfNeeded(userDir);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {}
    },
    "7d04a96027ad75877b41b7cd8f67455dd13159d7": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 6:59 PM",
      "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/04/12 6:59 PM",
          "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "10/04/12 11:11 AM",
          "commitNameOld": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 7.32,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  private void scanIntermediateDirectory() throws IOException {\n+  void scanIntermediateDirectory() throws IOException {\n+    // TODO it would be great to limit how often this happens, except in the\n+    // case where we are looking for a particular job.\n     List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n         intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n \n     for (FileStatus userDir : userDirList) {\n       String name \u003d userDir.getPath().getName();\n       long newModificationTime \u003d userDir.getModificationTime();\n       boolean shouldScan \u003d false;\n       synchronized (userDirModificationTimeMap) {\n         if (!userDirModificationTimeMap.containsKey(name)\n             || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n           shouldScan \u003d true;\n           userDirModificationTimeMap.put(name, newModificationTime);\n         }\n       }\n       if (shouldScan) {\n-        scanIntermediateDirectory(userDir.getPath());\n+        try {\n+          scanIntermediateDirectory(userDir.getPath());\n+        } catch (IOException e) {\n+          LOG.error(\"Error while trying to scan the directory \" \n+              + userDir.getPath(), e);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void scanIntermediateDirectory() throws IOException {\n    // TODO it would be great to limit how often this happens, except in the\n    // case where we are looking for a particular job.\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n        intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n\n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      long newModificationTime \u003d userDir.getModificationTime();\n      boolean shouldScan \u003d false;\n      synchronized (userDirModificationTimeMap) {\n        if (!userDirModificationTimeMap.containsKey(name)\n            || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n          shouldScan \u003d true;\n          userDirModificationTimeMap.put(name, newModificationTime);\n        }\n      }\n      if (shouldScan) {\n        try {\n          scanIntermediateDirectory(userDir.getPath());\n        } catch (IOException e) {\n          LOG.error(\"Error while trying to scan the directory \" \n              + userDir.getPath(), e);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3972. Fix locking and exception issues in JobHistory server. (Contributed by Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327354 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "17/04/12 6:59 PM",
          "commitName": "7d04a96027ad75877b41b7cd8f67455dd13159d7",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "10/04/12 11:11 AM",
          "commitNameOld": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
          "commitAuthorOld": "Thomas Graves",
          "daysBetweenCommits": 7.32,
          "commitsBetweenForRepo": 59,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,27 @@\n-  private void scanIntermediateDirectory() throws IOException {\n+  void scanIntermediateDirectory() throws IOException {\n+    // TODO it would be great to limit how often this happens, except in the\n+    // case where we are looking for a particular job.\n     List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n         intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n \n     for (FileStatus userDir : userDirList) {\n       String name \u003d userDir.getPath().getName();\n       long newModificationTime \u003d userDir.getModificationTime();\n       boolean shouldScan \u003d false;\n       synchronized (userDirModificationTimeMap) {\n         if (!userDirModificationTimeMap.containsKey(name)\n             || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n           shouldScan \u003d true;\n           userDirModificationTimeMap.put(name, newModificationTime);\n         }\n       }\n       if (shouldScan) {\n-        scanIntermediateDirectory(userDir.getPath());\n+        try {\n+          scanIntermediateDirectory(userDir.getPath());\n+        } catch (IOException e) {\n+          LOG.error(\"Error while trying to scan the directory \" \n+              + userDir.getPath(), e);\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void scanIntermediateDirectory() throws IOException {\n    // TODO it would be great to limit how often this happens, except in the\n    // case where we are looking for a particular job.\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n        intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n\n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      long newModificationTime \u003d userDir.getModificationTime();\n      boolean shouldScan \u003d false;\n      synchronized (userDirModificationTimeMap) {\n        if (!userDirModificationTimeMap.containsKey(name)\n            || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n          shouldScan \u003d true;\n          userDirModificationTimeMap.put(name, newModificationTime);\n        }\n      }\n      if (shouldScan) {\n        try {\n          scanIntermediateDirectory(userDir.getPath());\n        } catch (IOException e) {\n          LOG.error(\"Error while trying to scan the directory \" \n              + userDir.getPath(), e);\n        }\n      }\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f": {
      "type": "Ymovefromfile",
      "commitMessage": "MAPREDUCE-4059. The history server should have a separate pluggable storage/query interface. (Robert Evans via tgraves).\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/12 11:11 AM",
      "commitName": "cbb5f6109097a77f18f5fb0ba62ac132b8fa980f",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "10/04/12 9:13 AM",
      "commitNameOld": "000859a534f4cc6a57524a676805d8af6ad199de",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   private void scanIntermediateDirectory() throws IOException {\n-    List\u003cFileStatus\u003e userDirList \u003d \n-      JobHistoryUtils.localGlobber(intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n-    \n+    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n+        intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n+\n     for (FileStatus userDir : userDirList) {\n       String name \u003d userDir.getPath().getName();\n       long newModificationTime \u003d userDir.getModificationTime();\n       boolean shouldScan \u003d false;\n       synchronized (userDirModificationTimeMap) {\n-        if (!userDirModificationTimeMap.containsKey(name) || newModificationTime\n-            \u003e userDirModificationTimeMap.get(name)) {\n-            shouldScan \u003d true;\n-            userDirModificationTimeMap.put(name, newModificationTime);\n-        }  \n-        }  \n+        if (!userDirModificationTimeMap.containsKey(name)\n+            || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n+          shouldScan \u003d true;\n+          userDirModificationTimeMap.put(name, newModificationTime);\n+        }\n+      }\n       if (shouldScan) {\n         scanIntermediateDirectory(userDir.getPath());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void scanIntermediateDirectory() throws IOException {\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(\n        intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n\n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      long newModificationTime \u003d userDir.getModificationTime();\n      boolean shouldScan \u003d false;\n      synchronized (userDirModificationTimeMap) {\n        if (!userDirModificationTimeMap.containsKey(name)\n            || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n          shouldScan \u003d true;\n          userDirModificationTimeMap.put(name, newModificationTime);\n        }\n      }\n      if (shouldScan) {\n        scanIntermediateDirectory(userDir.getPath());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/HistoryFileManager.java",
        "oldMethodName": "scanIntermediateDirectory",
        "newMethodName": "scanIntermediateDirectory"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void scanIntermediateDirectory() throws IOException {\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n    \n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      long newModificationTime \u003d userDir.getModificationTime();\n      boolean shouldScan \u003d false;\n      synchronized (userDirModificationTimeMap) {\n        if (!userDirModificationTimeMap.containsKey(name) || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n            shouldScan \u003d true;\n            userDirModificationTimeMap.put(name, newModificationTime);\n        }  \n        }  \n      if (shouldScan) {\n        scanIntermediateDirectory(userDir.getPath());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  private void scanIntermediateDirectory() throws IOException {\n+    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n+    \n+    for (FileStatus userDir : userDirList) {\n+      String name \u003d userDir.getPath().getName();\n+      long newModificationTime \u003d userDir.getModificationTime();\n+      boolean shouldScan \u003d false;\n+      synchronized (userDirModificationTimeMap) {\n+        if (!userDirModificationTimeMap.containsKey(name) || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n+            shouldScan \u003d true;\n+            userDirModificationTimeMap.put(name, newModificationTime);\n+        }  \n+        }  \n+      if (shouldScan) {\n+        scanIntermediateDirectory(userDir.getPath());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void scanIntermediateDirectory() throws IOException {\n    List\u003cFileStatus\u003e userDirList \u003d JobHistoryUtils.localGlobber(intermediateDoneDirFc, intermediateDoneDirPath, \"\");\n    \n    for (FileStatus userDir : userDirList) {\n      String name \u003d userDir.getPath().getName();\n      long newModificationTime \u003d userDir.getModificationTime();\n      boolean shouldScan \u003d false;\n      synchronized (userDirModificationTimeMap) {\n        if (!userDirModificationTimeMap.containsKey(name) || newModificationTime \u003e userDirModificationTimeMap.get(name)) {\n            shouldScan \u003d true;\n            userDirModificationTimeMap.put(name, newModificationTime);\n        }  \n        }  \n      if (shouldScan) {\n        scanIntermediateDirectory(userDir.getPath());\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-hs/src/main/java/org/apache/hadoop/mapreduce/v2/hs/JobHistory.java"
    }
  }
}