{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AsyncLoggerSet.java",
  "functionName": "isFormatted",
  "functionId": "isFormatted",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java",
  "functionStartLine": 217,
  "functionEndLine": 223,
  "numCommitsSeen": 22,
  "timeTaken": 1273,
  "changeHistory": [
    "a93ba1648ac78ae0ad9e7c75c35e8594d8c48af4",
    "f765fdb65701e61887daedb2b369af4be12cb432"
  ],
  "changeHistoryShort": {
    "a93ba1648ac78ae0ad9e7c75c35e8594d8c48af4": "Ybodychange",
    "f765fdb65701e61887daedb2b369af4be12cb432": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a93ba1648ac78ae0ad9e7c75c35e8594d8c48af4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3840. JournalNodes log JournalNotFormattedException backtrace error before being formatted. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383252 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/12 11:33 PM",
      "commitName": "a93ba1648ac78ae0ad9e7c75c35e8594d8c48af4",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "10/09/12 11:31 PM",
      "commitNameOld": "8a8c9c18d37f0c8b219264796c0df4bcae6f4e38",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,7 @@\n   public QuorumCall\u003cAsyncLogger, Boolean\u003e isFormatted() {\n     Map\u003cAsyncLogger, ListenableFuture\u003cBoolean\u003e\u003e calls \u003d Maps.newHashMap();\n     for (AsyncLogger logger : loggers) {\n-      final SettableFuture\u003cBoolean\u003e ret \u003d SettableFuture.create();\n-      ListenableFuture\u003cGetJournalStateResponseProto\u003e jstate \u003d\n-          logger.getJournalState();\n-      Futures.addCallback(jstate, new FutureCallback\u003cGetJournalStateResponseProto\u003e() {\n-        @Override\n-        public void onFailure(Throwable t) {\n-          if (t instanceof RemoteException) {\n-            t \u003d ((RemoteException)t).unwrapRemoteException();\n-          }\n-          if (t instanceof JournalNotFormattedException) {\n-            ret.set(false);\n-          } else {\n-            ret.setException(t);\n-          }\n-        }\n-\n-        @Override\n-        public void onSuccess(GetJournalStateResponseProto jstate) {\n-          ret.set(true);\n-        }\n-      });\n-      \n-      calls.put(logger, ret);\n+      calls.put(logger, logger.isFormatted());\n     }\n     return QuorumCall.create(calls);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public QuorumCall\u003cAsyncLogger, Boolean\u003e isFormatted() {\n    Map\u003cAsyncLogger, ListenableFuture\u003cBoolean\u003e\u003e calls \u003d Maps.newHashMap();\n    for (AsyncLogger logger : loggers) {\n      calls.put(logger, logger.isFormatted());\n    }\n    return QuorumCall.create(calls);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java",
      "extendedDetails": {}
    },
    "f765fdb65701e61887daedb2b369af4be12cb432": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3793. Implement genericized format() in QJM. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1373177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:48 PM",
      "commitName": "f765fdb65701e61887daedb2b369af4be12cb432",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,29 @@\n+  public QuorumCall\u003cAsyncLogger, Boolean\u003e isFormatted() {\n+    Map\u003cAsyncLogger, ListenableFuture\u003cBoolean\u003e\u003e calls \u003d Maps.newHashMap();\n+    for (AsyncLogger logger : loggers) {\n+      final SettableFuture\u003cBoolean\u003e ret \u003d SettableFuture.create();\n+      ListenableFuture\u003cGetJournalStateResponseProto\u003e jstate \u003d\n+          logger.getJournalState();\n+      Futures.addCallback(jstate, new FutureCallback\u003cGetJournalStateResponseProto\u003e() {\n+        @Override\n+        public void onFailure(Throwable t) {\n+          if (t instanceof RemoteException) {\n+            t \u003d ((RemoteException)t).unwrapRemoteException();\n+          }\n+          if (t instanceof JournalNotFormattedException) {\n+            ret.set(false);\n+          } else {\n+            ret.setException(t);\n+          }\n+        }\n+\n+        @Override\n+        public void onSuccess(GetJournalStateResponseProto jstate) {\n+          ret.set(true);\n+        }\n+      });\n+      \n+      calls.put(logger, ret);\n+    }\n+    return QuorumCall.create(calls);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public QuorumCall\u003cAsyncLogger, Boolean\u003e isFormatted() {\n    Map\u003cAsyncLogger, ListenableFuture\u003cBoolean\u003e\u003e calls \u003d Maps.newHashMap();\n    for (AsyncLogger logger : loggers) {\n      final SettableFuture\u003cBoolean\u003e ret \u003d SettableFuture.create();\n      ListenableFuture\u003cGetJournalStateResponseProto\u003e jstate \u003d\n          logger.getJournalState();\n      Futures.addCallback(jstate, new FutureCallback\u003cGetJournalStateResponseProto\u003e() {\n        @Override\n        public void onFailure(Throwable t) {\n          if (t instanceof RemoteException) {\n            t \u003d ((RemoteException)t).unwrapRemoteException();\n          }\n          if (t instanceof JournalNotFormattedException) {\n            ret.set(false);\n          } else {\n            ret.setException(t);\n          }\n        }\n\n        @Override\n        public void onSuccess(GetJournalStateResponseProto jstate) {\n          ret.set(true);\n        }\n      });\n      \n      calls.put(logger, ret);\n    }\n    return QuorumCall.create(calls);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/AsyncLoggerSet.java"
    }
  }
}