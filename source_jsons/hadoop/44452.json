{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "startTimelineClient",
  "functionId": "startTimelineClient___conf-Configuration(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
  "functionStartLine": 950,
  "functionEndLine": 986,
  "numCommitsSeen": 113,
  "timeTaken": 3877,
  "changeHistory": [
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "0d02ab8729630ad3cfb4300702927333b1d349e3",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1",
    "9b5636408005676ae580f8d929f8e912c27828e7",
    "aa4a192feb8939353254d058c5f81bddbd0335c0"
  ],
  "changeHistoryShort": {
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90": "Ybodychange",
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "0d02ab8729630ad3cfb4300702927333b1d349e3": "Ybodychange",
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": "Ybodychange",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Ybodychange",
    "aa4a192feb8939353254d058c5f81bddbd0335c0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d09058b2fd18803d12f0835fdf78aef5e0b99c90": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6736. Consider writing to both ats v1 \u0026 v2 from RM for smoother upgrades. Contributed by Aaron Gresch.\n",
      "commitDate": "15/01/18 6:28 PM",
      "commitName": "d09058b2fd18803d12f0835fdf78aef5e0b99c90",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "09/01/18 3:09 AM",
      "commitNameOld": "783a01eb4a155044a54a30a636b86b3ab2b33044",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 6.64,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,37 @@\n   void startTimelineClient(final Configuration conf)\n       throws YarnException, IOException, InterruptedException {\n     try {\n       appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         @Override\n         public Void run() throws Exception {\n           if (YarnConfiguration.timelineServiceEnabled(conf)) {\n+            timelineServiceV1Enabled \u003d\n+                YarnConfiguration.timelineServiceV1Enabled(conf);\n+            timelineServiceV2Enabled \u003d\n+                YarnConfiguration.timelineServiceV2Enabled(conf);\n             // Creating the Timeline Client\n+            if (timelineServiceV1Enabled) {\n+              timelineClient \u003d TimelineClient.createTimelineClient();\n+              timelineClient.init(conf);\n+              timelineClient.start();\n+              LOG.info(\"Timeline service V1 client is enabled\");\n+            }\n             if (timelineServiceV2Enabled) {\n               timelineV2Client \u003d TimelineV2Client.createTimelineClient(\n                   appAttemptID.getApplicationId());\n               timelineV2Client.init(conf);\n               timelineV2Client.start();\n               LOG.info(\"Timeline service V2 client is enabled\");\n-            } else {\n-              timelineClient \u003d TimelineClient.createTimelineClient();\n-              timelineClient.init(conf);\n-              timelineClient.start();\n-              LOG.info(\"Timeline service V1 client is enabled\");\n             }\n           } else {\n             timelineClient \u003d null;\n             timelineV2Client \u003d null;\n             LOG.warn(\"Timeline service is not enabled\");\n           }\n           return null;\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n       throw new YarnException(e.getCause());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void startTimelineClient(final Configuration conf)\n      throws YarnException, IOException, InterruptedException {\n    try {\n      appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          if (YarnConfiguration.timelineServiceEnabled(conf)) {\n            timelineServiceV1Enabled \u003d\n                YarnConfiguration.timelineServiceV1Enabled(conf);\n            timelineServiceV2Enabled \u003d\n                YarnConfiguration.timelineServiceV2Enabled(conf);\n            // Creating the Timeline Client\n            if (timelineServiceV1Enabled) {\n              timelineClient \u003d TimelineClient.createTimelineClient();\n              timelineClient.init(conf);\n              timelineClient.start();\n              LOG.info(\"Timeline service V1 client is enabled\");\n            }\n            if (timelineServiceV2Enabled) {\n              timelineV2Client \u003d TimelineV2Client.createTimelineClient(\n                  appAttemptID.getApplicationId());\n              timelineV2Client.init(conf);\n              timelineV2Client.start();\n              LOG.info(\"Timeline service V2 client is enabled\");\n            }\n          } else {\n            timelineClient \u003d null;\n            timelineV2Client \u003d null;\n            LOG.warn(\"Timeline service is not enabled\");\n          }\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new YarnException(e.getCause());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "06/01/17 2:26 PM",
      "commitNameOld": "71a4acf74bc9ca34f0e57835c9d6e3efbe7c0567",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 40.89,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,32 @@\n   void startTimelineClient(final Configuration conf)\n       throws YarnException, IOException, InterruptedException {\n     try {\n       appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         @Override\n         public Void run() throws Exception {\n           if (YarnConfiguration.timelineServiceEnabled(conf)) {\n             // Creating the Timeline Client\n-            if (timelineServiceV2) {\n-              timelineClient \u003d TimelineClient.createTimelineClient(\n+            if (timelineServiceV2Enabled) {\n+              timelineV2Client \u003d TimelineV2Client.createTimelineClient(\n                   appAttemptID.getApplicationId());\n+              timelineV2Client.init(conf);\n+              timelineV2Client.start();\n               LOG.info(\"Timeline service V2 client is enabled\");\n             } else {\n               timelineClient \u003d TimelineClient.createTimelineClient();\n+              timelineClient.init(conf);\n+              timelineClient.start();\n               LOG.info(\"Timeline service V1 client is enabled\");\n             }\n-            timelineClient.init(conf);\n-            timelineClient.start();\n           } else {\n             timelineClient \u003d null;\n+            timelineV2Client \u003d null;\n             LOG.warn(\"Timeline service is not enabled\");\n           }\n           return null;\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n       throw new YarnException(e.getCause());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void startTimelineClient(final Configuration conf)\n      throws YarnException, IOException, InterruptedException {\n    try {\n      appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          if (YarnConfiguration.timelineServiceEnabled(conf)) {\n            // Creating the Timeline Client\n            if (timelineServiceV2Enabled) {\n              timelineV2Client \u003d TimelineV2Client.createTimelineClient(\n                  appAttemptID.getApplicationId());\n              timelineV2Client.init(conf);\n              timelineV2Client.start();\n              LOG.info(\"Timeline service V2 client is enabled\");\n            } else {\n              timelineClient \u003d TimelineClient.createTimelineClient();\n              timelineClient.init(conf);\n              timelineClient.start();\n              LOG.info(\"Timeline service V1 client is enabled\");\n            }\n          } else {\n            timelineClient \u003d null;\n            timelineV2Client \u003d null;\n            LOG.warn(\"Timeline service is not enabled\");\n          }\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new YarnException(e.getCause());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "0d02ab8729630ad3cfb4300702927333b1d349e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3367. Replace starting a separate thread for post entity with event loop in TimelineClient (Naganarasimha G R via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "0d02ab8729630ad3cfb4300702927333b1d349e3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,29 @@\n   void startTimelineClient(final Configuration conf)\n       throws YarnException, IOException, InterruptedException {\n     try {\n       appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         @Override\n         public Void run() throws Exception {\n           if (YarnConfiguration.timelineServiceEnabled(conf)) {\n             // Creating the Timeline Client\n             if (timelineServiceV2) {\n               timelineClient \u003d TimelineClient.createTimelineClient(\n                   appAttemptID.getApplicationId());\n+              LOG.info(\"Timeline service V2 client is enabled\");\n             } else {\n               timelineClient \u003d TimelineClient.createTimelineClient();\n+              LOG.info(\"Timeline service V1 client is enabled\");\n             }\n             timelineClient.init(conf);\n             timelineClient.start();\n           } else {\n             timelineClient \u003d null;\n             LOG.warn(\"Timeline service is not enabled\");\n           }\n           return null;\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n       throw new YarnException(e.getCause());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void startTimelineClient(final Configuration conf)\n      throws YarnException, IOException, InterruptedException {\n    try {\n      appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          if (YarnConfiguration.timelineServiceEnabled(conf)) {\n            // Creating the Timeline Client\n            if (timelineServiceV2) {\n              timelineClient \u003d TimelineClient.createTimelineClient(\n                  appAttemptID.getApplicationId());\n              LOG.info(\"Timeline service V2 client is enabled\");\n            } else {\n              timelineClient \u003d TimelineClient.createTimelineClient();\n              LOG.info(\"Timeline service V1 client is enabled\");\n            }\n            timelineClient.init(conf);\n            timelineClient.start();\n          } else {\n            timelineClient \u003d null;\n            LOG.warn(\"Timeline service is not enabled\");\n          }\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new YarnException(e.getCause());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "89e5c44f9e891a3579384c3fa3766937cd4970f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4356. Ensure the timeline service v.2 is disabled cleanly and has no\nimpact when it\u0027s turned off. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "5712b8f9fd1859fe046b482889239bd164ed7dab",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   void startTimelineClient(final Configuration conf)\n       throws YarnException, IOException, InterruptedException {\n     try {\n       appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         @Override\n         public Void run() throws Exception {\n-          if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n-              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n+          if (YarnConfiguration.timelineServiceEnabled(conf)) {\n             // Creating the Timeline Client\n-            if (newTimelineService) {\n+            if (timelineServiceV2) {\n               timelineClient \u003d TimelineClient.createTimelineClient(\n                   appAttemptID.getApplicationId());\n             } else {\n               timelineClient \u003d TimelineClient.createTimelineClient();\n             }\n             timelineClient.init(conf);\n             timelineClient.start();\n           } else {\n             timelineClient \u003d null;\n             LOG.warn(\"Timeline service is not enabled\");\n           }\n           return null;\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n       throw new YarnException(e.getCause());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void startTimelineClient(final Configuration conf)\n      throws YarnException, IOException, InterruptedException {\n    try {\n      appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          if (YarnConfiguration.timelineServiceEnabled(conf)) {\n            // Creating the Timeline Client\n            if (timelineServiceV2) {\n              timelineClient \u003d TimelineClient.createTimelineClient(\n                  appAttemptID.getApplicationId());\n            } else {\n              timelineClient \u003d TimelineClient.createTimelineClient();\n            }\n            timelineClient.init(conf);\n            timelineClient.start();\n          } else {\n            timelineClient \u003d null;\n            LOG.warn(\"Timeline service is not enabled\");\n          }\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new YarnException(e.getCause());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d45ff878c4cb8b359abb17ecf09d24b6f862874c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,28 @@\n   void startTimelineClient(final Configuration conf)\n       throws YarnException, IOException, InterruptedException {\n     try {\n       appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n         @Override\n         public Void run() throws Exception {\n           if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n               YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n             // Creating the Timeline Client\n-            timelineClient \u003d TimelineClient.createTimelineClient();\n+            if (newTimelineService) {\n+              timelineClient \u003d TimelineClient.createTimelineClient(\n+                  appAttemptID.getApplicationId());\n+            } else {\n+              timelineClient \u003d TimelineClient.createTimelineClient();\n+            }\n             timelineClient.init(conf);\n             timelineClient.start();\n           } else {\n             timelineClient \u003d null;\n             LOG.warn(\"Timeline service is not enabled\");\n           }\n           return null;\n         }\n       });\n     } catch (UndeclaredThrowableException e) {\n       throw new YarnException(e.getCause());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void startTimelineClient(final Configuration conf)\n      throws YarnException, IOException, InterruptedException {\n    try {\n      appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n            // Creating the Timeline Client\n            if (newTimelineService) {\n              timelineClient \u003d TimelineClient.createTimelineClient(\n                  appAttemptID.getApplicationId());\n            } else {\n              timelineClient \u003d TimelineClient.createTimelineClient();\n            }\n            timelineClient.init(conf);\n            timelineClient.start();\n          } else {\n            timelineClient \u003d null;\n            LOG.warn(\"Timeline service is not enabled\");\n          }\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new YarnException(e.getCause());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "aa4a192feb8939353254d058c5f81bddbd0335c0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3522. Fixed DistributedShell to instantiate TimeLineClient as the correct user. Contributed by Zhijie Shen\n",
      "commitDate": "23/04/15 11:07 AM",
      "commitName": "aa4a192feb8939353254d058c5f81bddbd0335c0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,23 @@\n+  void startTimelineClient(final Configuration conf)\n+      throws YarnException, IOException, InterruptedException {\n+    try {\n+      appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n+        @Override\n+        public Void run() throws Exception {\n+          if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n+              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n+            // Creating the Timeline Client\n+            timelineClient \u003d TimelineClient.createTimelineClient();\n+            timelineClient.init(conf);\n+            timelineClient.start();\n+          } else {\n+            timelineClient \u003d null;\n+            LOG.warn(\"Timeline service is not enabled\");\n+          }\n+          return null;\n+        }\n+      });\n+    } catch (UndeclaredThrowableException e) {\n+      throw new YarnException(e.getCause());\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void startTimelineClient(final Configuration conf)\n      throws YarnException, IOException, InterruptedException {\n    try {\n      appSubmitterUgi.doAs(new PrivilegedExceptionAction\u003cVoid\u003e() {\n        @Override\n        public Void run() throws Exception {\n          if (conf.getBoolean(YarnConfiguration.TIMELINE_SERVICE_ENABLED,\n              YarnConfiguration.DEFAULT_TIMELINE_SERVICE_ENABLED)) {\n            // Creating the Timeline Client\n            timelineClient \u003d TimelineClient.createTimelineClient();\n            timelineClient.init(conf);\n            timelineClient.start();\n          } else {\n            timelineClient \u003d null;\n            LOG.warn(\"Timeline service is not enabled\");\n          }\n          return null;\n        }\n      });\n    } catch (UndeclaredThrowableException e) {\n      throw new YarnException(e.getCause());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java"
    }
  }
}