{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerMetrics.java",
  "functionName": "initMetricsCSVOutput",
  "functionId": "initMetricsCSVOutput",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
  "functionStartLine": 466,
  "functionEndLine": 480,
  "numCommitsSeen": 40,
  "timeTaken": 1993,
  "changeHistory": [
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymovefromfile",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "29/03/17 4:18 PM",
      "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 82.21,
      "commitsBetweenForRepo": 427,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   private void initMetricsCSVOutput() {\n     int timeIntervalMS \u003d conf.getInt(\n         SLSConfiguration.METRICS_RECORD_INTERVAL_MS,\n         SLSConfiguration.METRICS_RECORD_INTERVAL_MS_DEFAULT);\n     File dir \u003d new File(metricsOutputDir + \"/metrics\");\n     if(!dir.exists() \u0026\u0026 !dir.mkdirs()) {\n-      LOG.error(\"Cannot create directory \" + dir.getAbsoluteFile());\n+      LOG.error(\"Cannot create directory {}\", dir.getAbsoluteFile());\n     }\n     final CsvReporter reporter \u003d CsvReporter.forRegistry(metrics)\n         .formatFor(Locale.US)\n         .convertRatesTo(TimeUnit.SECONDS)\n         .convertDurationsTo(TimeUnit.MILLISECONDS)\n         .build(new File(metricsOutputDir + \"/metrics\"));\n     reporter.start(timeIntervalMS, TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initMetricsCSVOutput() {\n    int timeIntervalMS \u003d conf.getInt(\n        SLSConfiguration.METRICS_RECORD_INTERVAL_MS,\n        SLSConfiguration.METRICS_RECORD_INTERVAL_MS_DEFAULT);\n    File dir \u003d new File(metricsOutputDir + \"/metrics\");\n    if(!dir.exists() \u0026\u0026 !dir.mkdirs()) {\n      LOG.error(\"Cannot create directory {}\", dir.getAbsoluteFile());\n    }\n    final CsvReporter reporter \u003d CsvReporter.forRegistry(metrics)\n        .formatFor(Locale.US)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build(new File(metricsOutputDir + \"/metrics\"));\n    reporter.start(timeIntervalMS, TimeUnit.MILLISECONDS);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
      "extendedDetails": {}
    },
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "29/03/17 2:37 PM",
      "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,15 @@\n   private void initMetricsCSVOutput() {\n     int timeIntervalMS \u003d conf.getInt(\n-            SLSConfiguration.METRICS_RECORD_INTERVAL_MS,\n-            SLSConfiguration.METRICS_RECORD_INTERVAL_MS_DEFAULT);\n+        SLSConfiguration.METRICS_RECORD_INTERVAL_MS,\n+        SLSConfiguration.METRICS_RECORD_INTERVAL_MS_DEFAULT);\n     File dir \u003d new File(metricsOutputDir + \"/metrics\");\n-    if(! dir.exists()\n-            \u0026\u0026 ! dir.mkdirs()) {\n+    if(!dir.exists() \u0026\u0026 !dir.mkdirs()) {\n       LOG.error(\"Cannot create directory \" + dir.getAbsoluteFile());\n     }\n     final CsvReporter reporter \u003d CsvReporter.forRegistry(metrics)\n-            .formatFor(Locale.US)\n-            .convertRatesTo(TimeUnit.SECONDS)\n-            .convertDurationsTo(TimeUnit.MILLISECONDS)\n-            .build(new File(metricsOutputDir + \"/metrics\"));\n+        .formatFor(Locale.US)\n+        .convertRatesTo(TimeUnit.SECONDS)\n+        .convertDurationsTo(TimeUnit.MILLISECONDS)\n+        .build(new File(metricsOutputDir + \"/metrics\"));\n     reporter.start(timeIntervalMS, TimeUnit.MILLISECONDS);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initMetricsCSVOutput() {\n    int timeIntervalMS \u003d conf.getInt(\n        SLSConfiguration.METRICS_RECORD_INTERVAL_MS,\n        SLSConfiguration.METRICS_RECORD_INTERVAL_MS_DEFAULT);\n    File dir \u003d new File(metricsOutputDir + \"/metrics\");\n    if(!dir.exists() \u0026\u0026 !dir.mkdirs()) {\n      LOG.error(\"Cannot create directory \" + dir.getAbsoluteFile());\n    }\n    final CsvReporter reporter \u003d CsvReporter.forRegistry(metrics)\n        .formatFor(Locale.US)\n        .convertRatesTo(TimeUnit.SECONDS)\n        .convertDurationsTo(TimeUnit.MILLISECONDS)\n        .build(new File(metricsOutputDir + \"/metrics\"));\n    reporter.start(timeIntervalMS, TimeUnit.MILLISECONDS);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
      "extendedDetails": {
        "oldPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
        "newPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SchedulerMetrics.java",
        "oldMethodName": "initMetricsCSVOutput",
        "newMethodName": "initMetricsCSVOutput"
      }
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,16 @@\n+  private void initMetricsCSVOutput() {\n+    int timeIntervalMS \u003d conf.getInt(\n+            SLSConfiguration.METRICS_RECORD_INTERVAL_MS,\n+            SLSConfiguration.METRICS_RECORD_INTERVAL_MS_DEFAULT);\n+    File dir \u003d new File(metricsOutputDir + \"/metrics\");\n+    if(! dir.exists()\n+            \u0026\u0026 ! dir.mkdirs()) {\n+      LOG.error(\"Cannot create directory \" + dir.getAbsoluteFile());\n+    }\n+    final CsvReporter reporter \u003d CsvReporter.forRegistry(metrics)\n+            .formatFor(Locale.US)\n+            .convertRatesTo(TimeUnit.SECONDS)\n+            .convertDurationsTo(TimeUnit.MILLISECONDS)\n+            .build(new File(metricsOutputDir + \"/metrics\"));\n+    reporter.start(timeIntervalMS, TimeUnit.MILLISECONDS);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initMetricsCSVOutput() {\n    int timeIntervalMS \u003d conf.getInt(\n            SLSConfiguration.METRICS_RECORD_INTERVAL_MS,\n            SLSConfiguration.METRICS_RECORD_INTERVAL_MS_DEFAULT);\n    File dir \u003d new File(metricsOutputDir + \"/metrics\");\n    if(! dir.exists()\n            \u0026\u0026 ! dir.mkdirs()) {\n      LOG.error(\"Cannot create directory \" + dir.getAbsoluteFile());\n    }\n    final CsvReporter reporter \u003d CsvReporter.forRegistry(metrics)\n            .formatFor(Locale.US)\n            .convertRatesTo(TimeUnit.SECONDS)\n            .convertDurationsTo(TimeUnit.MILLISECONDS)\n            .build(new File(metricsOutputDir + \"/metrics\"));\n    reporter.start(timeIntervalMS, TimeUnit.MILLISECONDS);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java"
    }
  }
}