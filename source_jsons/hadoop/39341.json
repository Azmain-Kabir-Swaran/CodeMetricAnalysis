{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "tryCommit",
  "functionId": "tryCommit___cluster-Resource__r-ResourceCommitRequest__updatePending-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 3030,
  "functionEndLine": 3091,
  "numCommitsSeen": 422,
  "timeTaken": 9775,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "51654a3962bcd0482c0e1dd32765e9533e3f9158",
    "f24c842d52e166e8566337ef93c96438f1c870d8",
    "47f711eebca315804c80012eea5f31275ac25518",
    "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
    "34f113df5cff2cc330fb671296932b8227b11975",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "51654a3962bcd0482c0e1dd32765e9533e3f9158": "Ybodychange",
    "f24c842d52e166e8566337ef93c96438f1c870d8": "Ybodychange",
    "47f711eebca315804c80012eea5f31275ac25518": "Ybodychange",
    "88d8d3f40b2923fab23a933bce1cd2e9c320ae84": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "34f113df5cff2cc330fb671296932b8227b11975": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,62 @@\n   public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n       boolean updatePending) {\n     long commitStart \u003d System.nanoTime();\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n-    }\n+    LOG.debug(\"Try to commit allocation proposal\u003d{}\", request);\n \n     boolean isSuccess \u003d false;\n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n       // Required sanity check for attemptId - when async-scheduling enabled,\n       // proposal might be outdated if AM failover just finished\n       // and proposal queue was not be consumed in time\n       if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n         if (app.accept(cluster, request, updatePending)\n             \u0026\u0026 app.apply(cluster, request, updatePending)) {\n           long commitSuccess \u003d System.nanoTime() - commitStart;\n           CapacitySchedulerMetrics.getMetrics()\n               .addCommitSuccess(commitSuccess);\n           LOG.info(\"Allocation proposal accepted\");\n           isSuccess \u003d true;\n         } else{\n           long commitFailed \u003d System.nanoTime() - commitStart;\n           CapacitySchedulerMetrics.getMetrics()\n               .addCommitFailure(commitFailed);\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Allocation proposal accepted\u003d\" + isSuccess + \", proposal\u003d\"\n-              + request);\n-        }\n+        LOG.debug(\"Allocation proposal accepted\u003d{}, proposal\u003d{}\", isSuccess,\n+            request);\n \n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n     return isSuccess;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n      boolean updatePending) {\n    long commitStart \u003d System.nanoTime();\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    LOG.debug(\"Try to commit allocation proposal\u003d{}\", request);\n\n    boolean isSuccess \u003d false;\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request, updatePending)\n            \u0026\u0026 app.apply(cluster, request, updatePending)) {\n          long commitSuccess \u003d System.nanoTime() - commitStart;\n          CapacitySchedulerMetrics.getMetrics()\n              .addCommitSuccess(commitSuccess);\n          LOG.info(\"Allocation proposal accepted\");\n          isSuccess \u003d true;\n        } else{\n          long commitFailed \u003d System.nanoTime() - commitStart;\n          CapacitySchedulerMetrics.getMetrics()\n              .addCommitFailure(commitFailed);\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        LOG.debug(\"Allocation proposal accepted\u003d{}, proposal\u003d{}\", isSuccess,\n            request);\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n    return isSuccess;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "51654a3962bcd0482c0e1dd32765e9533e3f9158": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8459. Improve Capacity Scheduler logs to debug invalid states. Contributed by Wangda Tan.\n",
      "commitDate": "03/07/18 9:59 AM",
      "commitName": "51654a3962bcd0482c0e1dd32765e9533e3f9158",
      "commitAuthor": "Sunil G",
      "commitDateOld": "02/07/18 11:46 PM",
      "commitNameOld": "d9ba6f3656e8dc97d2813181e27d12e52dca4328",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,66 @@\n   public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n       boolean updatePending) {\n     long commitStart \u003d System.nanoTime();\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n     }\n \n     boolean isSuccess \u003d false;\n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n       // Required sanity check for attemptId - when async-scheduling enabled,\n       // proposal might be outdated if AM failover just finished\n       // and proposal queue was not be consumed in time\n       if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n         if (app.accept(cluster, request, updatePending)\n             \u0026\u0026 app.apply(cluster, request, updatePending)) {\n           long commitSuccess \u003d System.nanoTime() - commitStart;\n           CapacitySchedulerMetrics.getMetrics()\n               .addCommitSuccess(commitSuccess);\n           LOG.info(\"Allocation proposal accepted\");\n           isSuccess \u003d true;\n         } else{\n           long commitFailed \u003d System.nanoTime() - commitStart;\n           CapacitySchedulerMetrics.getMetrics()\n               .addCommitFailure(commitFailed);\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Allocation proposal accepted\u003d\" + isSuccess + \", proposal\u003d\"\n+              + request);\n+        }\n+\n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n     return isSuccess;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n      boolean updatePending) {\n    long commitStart \u003d System.nanoTime();\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    boolean isSuccess \u003d false;\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request, updatePending)\n            \u0026\u0026 app.apply(cluster, request, updatePending)) {\n          long commitSuccess \u003d System.nanoTime() - commitStart;\n          CapacitySchedulerMetrics.getMetrics()\n              .addCommitSuccess(commitSuccess);\n          LOG.info(\"Allocation proposal accepted\");\n          isSuccess \u003d true;\n        } else{\n          long commitFailed \u003d System.nanoTime() - commitStart;\n          CapacitySchedulerMetrics.getMetrics()\n              .addCommitFailure(commitFailed);\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Allocation proposal accepted\u003d\" + isSuccess + \", proposal\u003d\"\n              + request);\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n    return isSuccess;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f24c842d52e166e8566337ef93c96438f1c870d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8213. Add Capacity Scheduler performance metrics. (Weiwei Yang via wangda)\n\nChange-Id: Ieea6f3eeb83c90cd74233fea896f0fcd0f325d5f\n",
      "commitDate": "25/05/18 9:53 PM",
      "commitName": "f24c842d52e166e8566337ef93c96438f1c870d8",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "10/05/18 7:47 PM",
      "commitNameOld": "9db9cd95bd0348070a286e69e7965c03c9bd39d6",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,61 @@\n   public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n       boolean updatePending) {\n+    long commitStart \u003d System.nanoTime();\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n     }\n \n     boolean isSuccess \u003d false;\n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n       // Required sanity check for attemptId - when async-scheduling enabled,\n       // proposal might be outdated if AM failover just finished\n       // and proposal queue was not be consumed in time\n       if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n         if (app.accept(cluster, request, updatePending)\n             \u0026\u0026 app.apply(cluster, request, updatePending)) {\n+          long commitSuccess \u003d System.nanoTime() - commitStart;\n+          CapacitySchedulerMetrics.getMetrics()\n+              .addCommitSuccess(commitSuccess);\n           LOG.info(\"Allocation proposal accepted\");\n           isSuccess \u003d true;\n         } else{\n+          long commitFailed \u003d System.nanoTime() - commitStart;\n+          CapacitySchedulerMetrics.getMetrics()\n+              .addCommitFailure(commitFailed);\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n     return isSuccess;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n      boolean updatePending) {\n    long commitStart \u003d System.nanoTime();\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    boolean isSuccess \u003d false;\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request, updatePending)\n            \u0026\u0026 app.apply(cluster, request, updatePending)) {\n          long commitSuccess \u003d System.nanoTime() - commitStart;\n          CapacitySchedulerMetrics.getMetrics()\n              .addCommitSuccess(commitSuccess);\n          LOG.info(\"Allocation proposal accepted\");\n          isSuccess \u003d true;\n        } else{\n          long commitFailed \u003d System.nanoTime() - commitStart;\n          CapacitySchedulerMetrics.getMetrics()\n              .addCommitFailure(commitFailed);\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n    return isSuccess;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "47f711eebca315804c80012eea5f31275ac25518": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6629. NPE occurred when container allocation proposal is applied but its resource requests are removed before. (Tao Yang via wangda)\n\nChange-Id: I805880f90b3f6798ec96ed8e8e75755f390a9ad5\n",
      "commitDate": "28/03/18 11:07 AM",
      "commitName": "47f711eebca315804c80012eea5f31275ac25518",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/03/18 4:43 PM",
      "commitNameOld": "a90471b3e65326cc18ed31fe21aef654833b5883",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 4.77,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n       boolean updatePending) {\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n     }\n \n     boolean isSuccess \u003d false;\n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n       // Required sanity check for attemptId - when async-scheduling enabled,\n       // proposal might be outdated if AM failover just finished\n       // and proposal queue was not be consumed in time\n       if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n-        if (app.accept(cluster, request, updatePending)) {\n-          app.apply(cluster, request, updatePending);\n+        if (app.accept(cluster, request, updatePending)\n+            \u0026\u0026 app.apply(cluster, request, updatePending)) {\n           LOG.info(\"Allocation proposal accepted\");\n           isSuccess \u003d true;\n         } else{\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n     return isSuccess;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n      boolean updatePending) {\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    boolean isSuccess \u003d false;\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request, updatePending)\n            \u0026\u0026 app.apply(cluster, request, updatePending)) {\n          LOG.info(\"Allocation proposal accepted\");\n          isSuccess \u003d true;\n        } else{\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n    return isSuccess;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "88d8d3f40b2923fab23a933bce1cd2e9c320ae84": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-7670. Modifications to the ResourceScheduler API to support SchedulingRequests. (asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7670. Modifications to the ResourceScheduler API to support SchedulingRequests. (asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/01/18 7:14 AM",
          "commitNameOld": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,54 @@\n-  public void tryCommit(Resource cluster, ResourceCommitRequest r) {\n+  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n+      boolean updatePending) {\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n     }\n \n+    boolean isSuccess \u003d false;\n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n       // Required sanity check for attemptId - when async-scheduling enabled,\n       // proposal might be outdated if AM failover just finished\n       // and proposal queue was not be consumed in time\n       if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n-        if (app.accept(cluster, request)) {\n-          app.apply(cluster, request);\n+        if (app.accept(cluster, request, updatePending)) {\n+          app.apply(cluster, request, updatePending);\n           LOG.info(\"Allocation proposal accepted\");\n+          isSuccess \u003d true;\n         } else{\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n+    return isSuccess;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n      boolean updatePending) {\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    boolean isSuccess \u003d false;\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request, updatePending)) {\n          app.apply(cluster, request, updatePending);\n          LOG.info(\"Allocation proposal accepted\");\n          isSuccess \u003d true;\n        } else{\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n    return isSuccess;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[cluster-Resource, r-ResourceCommitRequest]",
            "newValue": "[cluster-Resource, r-ResourceCommitRequest, updatePending-boolean]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-7670. Modifications to the ResourceScheduler API to support SchedulingRequests. (asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/01/18 7:14 AM",
          "commitNameOld": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,54 @@\n-  public void tryCommit(Resource cluster, ResourceCommitRequest r) {\n+  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n+      boolean updatePending) {\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n     }\n \n+    boolean isSuccess \u003d false;\n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n       // Required sanity check for attemptId - when async-scheduling enabled,\n       // proposal might be outdated if AM failover just finished\n       // and proposal queue was not be consumed in time\n       if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n-        if (app.accept(cluster, request)) {\n-          app.apply(cluster, request);\n+        if (app.accept(cluster, request, updatePending)) {\n+          app.apply(cluster, request, updatePending);\n           LOG.info(\"Allocation proposal accepted\");\n+          isSuccess \u003d true;\n         } else{\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n+    return isSuccess;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n      boolean updatePending) {\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    boolean isSuccess \u003d false;\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request, updatePending)) {\n          app.apply(cluster, request, updatePending);\n          LOG.info(\"Allocation proposal accepted\");\n          isSuccess \u003d true;\n        } else{\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n    return isSuccess;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7670. Modifications to the ResourceScheduler API to support SchedulingRequests. (asuresh)\n",
          "commitDate": "31/01/18 1:30 AM",
          "commitName": "88d8d3f40b2923fab23a933bce1cd2e9c320ae84",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "29/01/18 7:14 AM",
          "commitNameOld": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 1.76,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,54 @@\n-  public void tryCommit(Resource cluster, ResourceCommitRequest r) {\n+  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n+      boolean updatePending) {\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n     }\n \n+    boolean isSuccess \u003d false;\n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n       // Required sanity check for attemptId - when async-scheduling enabled,\n       // proposal might be outdated if AM failover just finished\n       // and proposal queue was not be consumed in time\n       if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n-        if (app.accept(cluster, request)) {\n-          app.apply(cluster, request);\n+        if (app.accept(cluster, request, updatePending)) {\n+          app.apply(cluster, request, updatePending);\n           LOG.info(\"Allocation proposal accepted\");\n+          isSuccess \u003d true;\n         } else{\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n+    return isSuccess;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public boolean tryCommit(Resource cluster, ResourceCommitRequest r,\n      boolean updatePending) {\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    boolean isSuccess \u003d false;\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request, updatePending)) {\n          app.apply(cluster, request, updatePending);\n          LOG.info(\"Allocation proposal accepted\");\n          isSuccess \u003d true;\n        } else{\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n    return isSuccess;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "34f113df5cff2cc330fb671296932b8227b11975": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6714. IllegalStateException while handling APP_ATTEMPT_REMOVED event when async-scheduling enabled in CapacityScheduler. Contributed by Tao Yang.\n",
      "commitDate": "11/07/17 2:22 AM",
      "commitName": "34f113df5cff2cc330fb671296932b8227b11975",
      "commitAuthor": "Sunil G",
      "commitDateOld": "15/03/17 2:18 AM",
      "commitNameOld": "2d0e24eb01cec6f4554671b54729717510711c63",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 118.0,
      "commitsBetweenForRepo": 611,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,50 @@\n   public void tryCommit(Resource cluster, ResourceCommitRequest r) {\n     ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n         (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n \n     ApplicationAttemptId attemptId \u003d null;\n \n     // We need to update unconfirmed allocated resource of application when\n     // any container allocated.\n     boolean updateUnconfirmedAllocatedResource \u003d\n         request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n             .getContainersToAllocate().isEmpty();\n \n     // find the application to accept and apply the ResourceCommitRequest\n     if (request.anythingAllocatedOrReserved()) {\n       ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n           request.getFirstAllocatedOrReservedContainer();\n       attemptId \u003d\n           c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n               .getApplicationAttemptId();\n     } else {\n       if (!request.getContainersToRelease().isEmpty()) {\n         attemptId \u003d request.getContainersToRelease().get(0)\n             .getSchedulerApplicationAttempt().getApplicationAttemptId();\n       }\n     }\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n     }\n \n     if (attemptId !\u003d null) {\n       FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n-      if (app !\u003d null) {\n+      // Required sanity check for attemptId - when async-scheduling enabled,\n+      // proposal might be outdated if AM failover just finished\n+      // and proposal queue was not be consumed in time\n+      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n         if (app.accept(cluster, request)) {\n           app.apply(cluster, request);\n           LOG.info(\"Allocation proposal accepted\");\n         } else{\n           LOG.info(\"Failed to accept allocation proposal\");\n         }\n \n         // Update unconfirmed allocated resource.\n         if (updateUnconfirmedAllocatedResource) {\n           app.decUnconfirmedRes(request.getTotalAllocatedResource());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void tryCommit(Resource cluster, ResourceCommitRequest r) {\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      // Required sanity check for attemptId - when async-scheduling enabled,\n      // proposal might be outdated if AM failover just finished\n      // and proposal queue was not be consumed in time\n      if (app !\u003d null \u0026\u0026 attemptId.equals(app.getApplicationAttemptId())) {\n        if (app.accept(cluster, request)) {\n          app.apply(cluster, request);\n          LOG.info(\"Allocation proposal accepted\");\n        } else{\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,47 @@\n+  public void tryCommit(Resource cluster, ResourceCommitRequest r) {\n+    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n+        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n+\n+    ApplicationAttemptId attemptId \u003d null;\n+\n+    // We need to update unconfirmed allocated resource of application when\n+    // any container allocated.\n+    boolean updateUnconfirmedAllocatedResource \u003d\n+        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n+            .getContainersToAllocate().isEmpty();\n+\n+    // find the application to accept and apply the ResourceCommitRequest\n+    if (request.anythingAllocatedOrReserved()) {\n+      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n+          request.getFirstAllocatedOrReservedContainer();\n+      attemptId \u003d\n+          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n+              .getApplicationAttemptId();\n+    } else {\n+      if (!request.getContainersToRelease().isEmpty()) {\n+        attemptId \u003d request.getContainersToRelease().get(0)\n+            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n+      }\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n+    }\n+\n+    if (attemptId !\u003d null) {\n+      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n+      if (app !\u003d null) {\n+        if (app.accept(cluster, request)) {\n+          app.apply(cluster, request);\n+          LOG.info(\"Allocation proposal accepted\");\n+        } else{\n+          LOG.info(\"Failed to accept allocation proposal\");\n+        }\n+\n+        // Update unconfirmed allocated resource.\n+        if (updateUnconfirmedAllocatedResource) {\n+          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void tryCommit(Resource cluster, ResourceCommitRequest r) {\n    ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request \u003d\n        (ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e) r;\n\n    ApplicationAttemptId attemptId \u003d null;\n\n    // We need to update unconfirmed allocated resource of application when\n    // any container allocated.\n    boolean updateUnconfirmedAllocatedResource \u003d\n        request.getContainersToAllocate() !\u003d null \u0026\u0026 !request\n            .getContainersToAllocate().isEmpty();\n\n    // find the application to accept and apply the ResourceCommitRequest\n    if (request.anythingAllocatedOrReserved()) {\n      ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e c \u003d\n          request.getFirstAllocatedOrReservedContainer();\n      attemptId \u003d\n          c.getAllocatedOrReservedContainer().getSchedulerApplicationAttempt()\n              .getApplicationAttemptId();\n    } else {\n      if (!request.getContainersToRelease().isEmpty()) {\n        attemptId \u003d request.getContainersToRelease().get(0)\n            .getSchedulerApplicationAttempt().getApplicationAttemptId();\n      }\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Try to commit allocation proposal\u003d\" + request);\n    }\n\n    if (attemptId !\u003d null) {\n      FiCaSchedulerApp app \u003d getApplicationAttempt(attemptId);\n      if (app !\u003d null) {\n        if (app.accept(cluster, request)) {\n          app.apply(cluster, request);\n          LOG.info(\"Allocation proposal accepted\");\n        } else{\n          LOG.info(\"Failed to accept allocation proposal\");\n        }\n\n        // Update unconfirmed allocated resource.\n        if (updateUnconfirmedAllocatedResource) {\n          app.decUnconfirmedRes(request.getTotalAllocatedResource());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}