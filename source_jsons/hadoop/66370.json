{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSFairScheduler.java",
  "functionName": "handle",
  "functionId": "handle___schedulerEvent-SchedulerEvent",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
  "functionStartLine": 127,
  "functionEndLine": 187,
  "numCommitsSeen": 38,
  "timeTaken": 2496,
  "changeHistory": [
    "6a5516c2381f107d96b8326939514de3c6e53d3d",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": "Ymultichange(Ymovefromfile,Ybodychange)",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ybodychange",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6a5516c2381f107d96b8326939514de3c6e53d3d": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
      "commitDate": "29/03/17 4:18 PM",
      "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,61 @@\n   public void handle(SchedulerEvent schedulerEvent) {\n     // metrics off\n-    if (! metricsON) {\n-      scheduler.handle(schedulerEvent);\n+    if (!metricsON) {\n+      super.handle(schedulerEvent);\n       return;\n     }\n-    if(!running)    running \u003d true;\n \n     // metrics on\n+    if(!schedulerMetrics.isRunning()) {\n+      schedulerMetrics.setRunning(true);\n+    }\n+\n     Timer.Context handlerTimer \u003d null;\n     Timer.Context operationTimer \u003d null;\n \n     NodeUpdateSchedulerEventWrapper eventWrapper;\n     try {\n-      //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n       if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n-              \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n+          \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n         eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n-                (NodeUpdateSchedulerEvent)schedulerEvent);\n+            (NodeUpdateSchedulerEvent)schedulerEvent);\n         schedulerEvent \u003d eventWrapper;\n         updateQueueWithNodeUpdate(eventWrapper);\n-      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n+      } else if (\n+          schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n           \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         // check if having AM Container, update resource usage information\n         AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n             (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n         ApplicationAttemptId appAttemptId \u003d\n-                appRemoveEvent.getApplicationAttemptID();\n-        String queue \u003d appQueueMap.get(appAttemptId.getApplicationId());\n-        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n-        if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n+            appRemoveEvent.getApplicationAttemptID();\n+        String queueName \u003d getSchedulerApp(appAttemptId).getQueue().getName();\n+        SchedulerAppReport app \u003d getSchedulerAppInfo(appAttemptId);\n+        if (!app.getLiveContainers().isEmpty()) {  // have 0 or 1\n           // should have one container which is AM container\n           RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n-          updateQueueMetrics(queue,\n-                  rmc.getContainer().getResource().getMemorySize(),\n-                  rmc.getContainer().getResource().getVirtualCores());\n+          schedulerMetrics.updateQueueMetricsByRelease(\n+              rmc.getContainer().getResource(), queueName);\n         }\n       }\n \n-      handlerTimer \u003d schedulerHandleTimer.time();\n-      operationTimer \u003d schedulerHandleTimerMap\n-              .get(schedulerEvent.getType()).time();\n+      handlerTimer \u003d schedulerMetrics.getSchedulerHandleTimer().time();\n+      operationTimer \u003d schedulerMetrics.getSchedulerHandleTimer(\n+          schedulerEvent.getType()).time();\n \n-      scheduler.handle(schedulerEvent);\n+      super.handle(schedulerEvent);\n     } finally {\n-      if (handlerTimer !\u003d null)     handlerTimer.stop();\n-      if (operationTimer !\u003d null)   operationTimer.stop();\n-      schedulerHandleCounter.inc();\n-      schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n+      if (handlerTimer !\u003d null) {\n+        handlerTimer.stop();\n+      }\n+      if (operationTimer !\u003d null) {\n+        operationTimer.stop();\n+      }\n+      schedulerMetrics.increaseSchedulerHandleCounter(schedulerEvent.getType());\n \n-      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n-          \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n+      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n+          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         SLSRunner.decreaseRemainingApps();\n-        AppRemovedSchedulerEvent appRemoveEvent \u003d\n-                (AppRemovedSchedulerEvent) schedulerEvent;\n-        appQueueMap.remove(appRemoveEvent.getApplicationID());\n-      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n-          \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n-        AppAddedSchedulerEvent appAddEvent \u003d\n-                (AppAddedSchedulerEvent) schedulerEvent;\n-        String queueName \u003d appAddEvent.getQueue();\n-        appQueueMap.put(appAddEvent.getApplicationId(), queueName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(SchedulerEvent schedulerEvent) {\n    // metrics off\n    if (!metricsON) {\n      super.handle(schedulerEvent);\n      return;\n    }\n\n    // metrics on\n    if(!schedulerMetrics.isRunning()) {\n      schedulerMetrics.setRunning(true);\n    }\n\n    Timer.Context handlerTimer \u003d null;\n    Timer.Context operationTimer \u003d null;\n\n    NodeUpdateSchedulerEventWrapper eventWrapper;\n    try {\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n          \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n        eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n            (NodeUpdateSchedulerEvent)schedulerEvent);\n        schedulerEvent \u003d eventWrapper;\n        updateQueueWithNodeUpdate(eventWrapper);\n      } else if (\n          schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        // check if having AM Container, update resource usage information\n        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n            (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n            appRemoveEvent.getApplicationAttemptID();\n        String queueName \u003d getSchedulerApp(appAttemptId).getQueue().getName();\n        SchedulerAppReport app \u003d getSchedulerAppInfo(appAttemptId);\n        if (!app.getLiveContainers().isEmpty()) {  // have 0 or 1\n          // should have one container which is AM container\n          RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n          schedulerMetrics.updateQueueMetricsByRelease(\n              rmc.getContainer().getResource(), queueName);\n        }\n      }\n\n      handlerTimer \u003d schedulerMetrics.getSchedulerHandleTimer().time();\n      operationTimer \u003d schedulerMetrics.getSchedulerHandleTimer(\n          schedulerEvent.getType()).time();\n\n      super.handle(schedulerEvent);\n    } finally {\n      if (handlerTimer !\u003d null) {\n        handlerTimer.stop();\n      }\n      if (operationTimer !\u003d null) {\n        operationTimer.stop();\n      }\n      schedulerMetrics.increaseSchedulerHandleCounter(schedulerEvent.getType());\n\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        SLSRunner.decreaseRemainingApps();\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
          "extendedDetails": {
            "oldPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
            "newPath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
            "oldMethodName": "handle",
            "newMethodName": "handle"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5654. Not be able to run SLS with FairScheduler (yufeigu via rkanter)\n",
          "commitDate": "29/03/17 4:18 PM",
          "commitName": "6a5516c2381f107d96b8326939514de3c6e53d3d",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "29/03/17 2:37 PM",
          "commitNameOld": "4966a6e26e45d7dc36e0b270066ff7c87bcd00cc",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.07,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,65 +1,61 @@\n   public void handle(SchedulerEvent schedulerEvent) {\n     // metrics off\n-    if (! metricsON) {\n-      scheduler.handle(schedulerEvent);\n+    if (!metricsON) {\n+      super.handle(schedulerEvent);\n       return;\n     }\n-    if(!running)    running \u003d true;\n \n     // metrics on\n+    if(!schedulerMetrics.isRunning()) {\n+      schedulerMetrics.setRunning(true);\n+    }\n+\n     Timer.Context handlerTimer \u003d null;\n     Timer.Context operationTimer \u003d null;\n \n     NodeUpdateSchedulerEventWrapper eventWrapper;\n     try {\n-      //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n       if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n-              \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n+          \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n         eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n-                (NodeUpdateSchedulerEvent)schedulerEvent);\n+            (NodeUpdateSchedulerEvent)schedulerEvent);\n         schedulerEvent \u003d eventWrapper;\n         updateQueueWithNodeUpdate(eventWrapper);\n-      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n+      } else if (\n+          schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n           \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         // check if having AM Container, update resource usage information\n         AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n             (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n         ApplicationAttemptId appAttemptId \u003d\n-                appRemoveEvent.getApplicationAttemptID();\n-        String queue \u003d appQueueMap.get(appAttemptId.getApplicationId());\n-        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n-        if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n+            appRemoveEvent.getApplicationAttemptID();\n+        String queueName \u003d getSchedulerApp(appAttemptId).getQueue().getName();\n+        SchedulerAppReport app \u003d getSchedulerAppInfo(appAttemptId);\n+        if (!app.getLiveContainers().isEmpty()) {  // have 0 or 1\n           // should have one container which is AM container\n           RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n-          updateQueueMetrics(queue,\n-                  rmc.getContainer().getResource().getMemorySize(),\n-                  rmc.getContainer().getResource().getVirtualCores());\n+          schedulerMetrics.updateQueueMetricsByRelease(\n+              rmc.getContainer().getResource(), queueName);\n         }\n       }\n \n-      handlerTimer \u003d schedulerHandleTimer.time();\n-      operationTimer \u003d schedulerHandleTimerMap\n-              .get(schedulerEvent.getType()).time();\n+      handlerTimer \u003d schedulerMetrics.getSchedulerHandleTimer().time();\n+      operationTimer \u003d schedulerMetrics.getSchedulerHandleTimer(\n+          schedulerEvent.getType()).time();\n \n-      scheduler.handle(schedulerEvent);\n+      super.handle(schedulerEvent);\n     } finally {\n-      if (handlerTimer !\u003d null)     handlerTimer.stop();\n-      if (operationTimer !\u003d null)   operationTimer.stop();\n-      schedulerHandleCounter.inc();\n-      schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n+      if (handlerTimer !\u003d null) {\n+        handlerTimer.stop();\n+      }\n+      if (operationTimer !\u003d null) {\n+        operationTimer.stop();\n+      }\n+      schedulerMetrics.increaseSchedulerHandleCounter(schedulerEvent.getType());\n \n-      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n-          \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n+      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n+          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         SLSRunner.decreaseRemainingApps();\n-        AppRemovedSchedulerEvent appRemoveEvent \u003d\n-                (AppRemovedSchedulerEvent) schedulerEvent;\n-        appQueueMap.remove(appRemoveEvent.getApplicationID());\n-      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n-          \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n-        AppAddedSchedulerEvent appAddEvent \u003d\n-                (AppAddedSchedulerEvent) schedulerEvent;\n-        String queueName \u003d appAddEvent.getQueue();\n-        appQueueMap.put(appAddEvent.getApplicationId(), queueName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(SchedulerEvent schedulerEvent) {\n    // metrics off\n    if (!metricsON) {\n      super.handle(schedulerEvent);\n      return;\n    }\n\n    // metrics on\n    if(!schedulerMetrics.isRunning()) {\n      schedulerMetrics.setRunning(true);\n    }\n\n    Timer.Context handlerTimer \u003d null;\n    Timer.Context operationTimer \u003d null;\n\n    NodeUpdateSchedulerEventWrapper eventWrapper;\n    try {\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n          \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n        eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n            (NodeUpdateSchedulerEvent)schedulerEvent);\n        schedulerEvent \u003d eventWrapper;\n        updateQueueWithNodeUpdate(eventWrapper);\n      } else if (\n          schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        // check if having AM Container, update resource usage information\n        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n            (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n            appRemoveEvent.getApplicationAttemptID();\n        String queueName \u003d getSchedulerApp(appAttemptId).getQueue().getName();\n        SchedulerAppReport app \u003d getSchedulerAppInfo(appAttemptId);\n        if (!app.getLiveContainers().isEmpty()) {  // have 0 or 1\n          // should have one container which is AM container\n          RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n          schedulerMetrics.updateQueueMetricsByRelease(\n              rmc.getContainer().getResource(), queueName);\n        }\n      }\n\n      handlerTimer \u003d schedulerMetrics.getSchedulerHandleTimer().time();\n      operationTimer \u003d schedulerMetrics.getSchedulerHandleTimer(\n          schedulerEvent.getType()).time();\n\n      super.handle(schedulerEvent);\n    } finally {\n      if (handlerTimer !\u003d null) {\n        handlerTimer.stop();\n      }\n      if (operationTimer !\u003d null) {\n        operationTimer.stop();\n      }\n      schedulerMetrics.increaseSchedulerHandleCounter(schedulerEvent.getType());\n\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        SLSRunner.decreaseRemainingApps();\n      }\n    }\n  }",
          "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/SLSFairScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "18/01/16 5:30 PM",
      "commitNameOld": "a44ce3f14fd940601f984fbf7980aa6fdc8f23b7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 131.6,
      "commitsBetweenForRepo": 863,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   public void handle(SchedulerEvent schedulerEvent) {\n     // metrics off\n     if (! metricsON) {\n       scheduler.handle(schedulerEvent);\n       return;\n     }\n     if(!running)    running \u003d true;\n \n     // metrics on\n     Timer.Context handlerTimer \u003d null;\n     Timer.Context operationTimer \u003d null;\n \n     NodeUpdateSchedulerEventWrapper eventWrapper;\n     try {\n       //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n       if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n               \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n         eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n                 (NodeUpdateSchedulerEvent)schedulerEvent);\n         schedulerEvent \u003d eventWrapper;\n         updateQueueWithNodeUpdate(eventWrapper);\n       } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n           \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         // check if having AM Container, update resource usage information\n         AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n             (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n         ApplicationAttemptId appAttemptId \u003d\n                 appRemoveEvent.getApplicationAttemptID();\n         String queue \u003d appQueueMap.get(appAttemptId.getApplicationId());\n         SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n         if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n           // should have one container which is AM container\n           RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n           updateQueueMetrics(queue,\n-                  rmc.getContainer().getResource().getMemory(),\n+                  rmc.getContainer().getResource().getMemorySize(),\n                   rmc.getContainer().getResource().getVirtualCores());\n         }\n       }\n \n       handlerTimer \u003d schedulerHandleTimer.time();\n       operationTimer \u003d schedulerHandleTimerMap\n               .get(schedulerEvent.getType()).time();\n \n       scheduler.handle(schedulerEvent);\n     } finally {\n       if (handlerTimer !\u003d null)     handlerTimer.stop();\n       if (operationTimer !\u003d null)   operationTimer.stop();\n       schedulerHandleCounter.inc();\n       schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n \n       if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n           \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n         SLSRunner.decreaseRemainingApps();\n         AppRemovedSchedulerEvent appRemoveEvent \u003d\n                 (AppRemovedSchedulerEvent) schedulerEvent;\n         appQueueMap.remove(appRemoveEvent.getApplicationID());\n       } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n           \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n         AppAddedSchedulerEvent appAddEvent \u003d\n                 (AppAddedSchedulerEvent) schedulerEvent;\n         String queueName \u003d appAddEvent.getQueue();\n         appQueueMap.put(appAddEvent.getApplicationId(), queueName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent schedulerEvent) {\n    // metrics off\n    if (! metricsON) {\n      scheduler.handle(schedulerEvent);\n      return;\n    }\n    if(!running)    running \u003d true;\n\n    // metrics on\n    Timer.Context handlerTimer \u003d null;\n    Timer.Context operationTimer \u003d null;\n\n    NodeUpdateSchedulerEventWrapper eventWrapper;\n    try {\n      //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n              \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n        eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n                (NodeUpdateSchedulerEvent)schedulerEvent);\n        schedulerEvent \u003d eventWrapper;\n        updateQueueWithNodeUpdate(eventWrapper);\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        // check if having AM Container, update resource usage information\n        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n            (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n                appRemoveEvent.getApplicationAttemptID();\n        String queue \u003d appQueueMap.get(appAttemptId.getApplicationId());\n        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n        if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n          // should have one container which is AM container\n          RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n          updateQueueMetrics(queue,\n                  rmc.getContainer().getResource().getMemorySize(),\n                  rmc.getContainer().getResource().getVirtualCores());\n        }\n      }\n\n      handlerTimer \u003d schedulerHandleTimer.time();\n      operationTimer \u003d schedulerHandleTimerMap\n              .get(schedulerEvent.getType()).time();\n\n      scheduler.handle(schedulerEvent);\n    } finally {\n      if (handlerTimer !\u003d null)     handlerTimer.stop();\n      if (operationTimer !\u003d null)   operationTimer.stop();\n      schedulerHandleCounter.inc();\n      schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n        SLSRunner.decreaseRemainingApps();\n        AppRemovedSchedulerEvent appRemoveEvent \u003d\n                (AppRemovedSchedulerEvent) schedulerEvent;\n        appQueueMap.remove(appRemoveEvent.getApplicationID());\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n          \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n        AppAddedSchedulerEvent appAddEvent \u003d\n                (AppAddedSchedulerEvent) schedulerEvent;\n        String queueName \u003d appAddEvent.getQueue();\n        appQueueMap.put(appAddEvent.getApplicationId(), queueName);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/12/13 4:07 PM",
      "commitNameOld": "e07f3c87cd3542760efcf713f909375b69eec00f",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 14.84,
      "commitsBetweenForRepo": 45,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,65 @@\n   public void handle(SchedulerEvent schedulerEvent) {\n     // metrics off\n     if (! metricsON) {\n       scheduler.handle(schedulerEvent);\n       return;\n     }\n     if(!running)    running \u003d true;\n \n     // metrics on\n     Timer.Context handlerTimer \u003d null;\n     Timer.Context operationTimer \u003d null;\n \n     NodeUpdateSchedulerEventWrapper eventWrapper;\n     try {\n       //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n       if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n               \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n         eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n                 (NodeUpdateSchedulerEvent)schedulerEvent);\n         schedulerEvent \u003d eventWrapper;\n         updateQueueWithNodeUpdate(eventWrapper);\n       } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n           \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         // check if having AM Container, update resource usage information\n         AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n             (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n         ApplicationAttemptId appAttemptId \u003d\n                 appRemoveEvent.getApplicationAttemptID();\n-        String queue \u003d appQueueMap.get(appAttemptId);\n+        String queue \u003d appQueueMap.get(appAttemptId.getApplicationId());\n         SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n         if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n           // should have one container which is AM container\n           RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n           updateQueueMetrics(queue,\n                   rmc.getContainer().getResource().getMemory(),\n                   rmc.getContainer().getResource().getVirtualCores());\n         }\n       }\n \n       handlerTimer \u003d schedulerHandleTimer.time();\n       operationTimer \u003d schedulerHandleTimerMap\n               .get(schedulerEvent.getType()).time();\n \n       scheduler.handle(schedulerEvent);\n     } finally {\n       if (handlerTimer !\u003d null)     handlerTimer.stop();\n       if (operationTimer !\u003d null)   operationTimer.stop();\n       schedulerHandleCounter.inc();\n       schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n \n-      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n-          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n+      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n+          \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n         SLSRunner.decreaseRemainingApps();\n-        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n-                (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n-        ApplicationAttemptId appAttemptId \u003d\n-                appRemoveEvent.getApplicationAttemptID();\n-        appQueueMap.remove(appRemoveEvent.getApplicationAttemptID());\n-      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_ADDED\n-          \u0026\u0026 schedulerEvent instanceof AppAttemptAddedSchedulerEvent) {\n-        AppAttemptAddedSchedulerEvent appAddEvent \u003d\n-                (AppAttemptAddedSchedulerEvent) schedulerEvent;\n+        AppRemovedSchedulerEvent appRemoveEvent \u003d\n+                (AppRemovedSchedulerEvent) schedulerEvent;\n+        appQueueMap.remove(appRemoveEvent.getApplicationID());\n+      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n+          \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n+        AppAddedSchedulerEvent appAddEvent \u003d\n+                (AppAddedSchedulerEvent) schedulerEvent;\n         String queueName \u003d appAddEvent.getQueue();\n-        appQueueMap.put(appAddEvent.getApplicationAttemptId(), queueName);\n+        appQueueMap.put(appAddEvent.getApplicationId(), queueName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent schedulerEvent) {\n    // metrics off\n    if (! metricsON) {\n      scheduler.handle(schedulerEvent);\n      return;\n    }\n    if(!running)    running \u003d true;\n\n    // metrics on\n    Timer.Context handlerTimer \u003d null;\n    Timer.Context operationTimer \u003d null;\n\n    NodeUpdateSchedulerEventWrapper eventWrapper;\n    try {\n      //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n              \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n        eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n                (NodeUpdateSchedulerEvent)schedulerEvent);\n        schedulerEvent \u003d eventWrapper;\n        updateQueueWithNodeUpdate(eventWrapper);\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        // check if having AM Container, update resource usage information\n        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n            (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n                appRemoveEvent.getApplicationAttemptID();\n        String queue \u003d appQueueMap.get(appAttemptId.getApplicationId());\n        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n        if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n          // should have one container which is AM container\n          RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n          updateQueueMetrics(queue,\n                  rmc.getContainer().getResource().getMemory(),\n                  rmc.getContainer().getResource().getVirtualCores());\n        }\n      }\n\n      handlerTimer \u003d schedulerHandleTimer.time();\n      operationTimer \u003d schedulerHandleTimerMap\n              .get(schedulerEvent.getType()).time();\n\n      scheduler.handle(schedulerEvent);\n    } finally {\n      if (handlerTimer !\u003d null)     handlerTimer.stop();\n      if (operationTimer !\u003d null)   operationTimer.stop();\n      schedulerHandleCounter.inc();\n      schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n        SLSRunner.decreaseRemainingApps();\n        AppRemovedSchedulerEvent appRemoveEvent \u003d\n                (AppRemovedSchedulerEvent) schedulerEvent;\n        appQueueMap.remove(appRemoveEvent.getApplicationID());\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n          \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n        AppAddedSchedulerEvent appAddEvent \u003d\n                (AppAddedSchedulerEvent) schedulerEvent;\n        String queueName \u003d appAddEvent.getQueue();\n        appQueueMap.put(appAddEvent.getApplicationId(), queueName);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
      "extendedDetails": {}
    },
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 5:44 PM",
      "commitName": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/12/13 7:09 PM",
      "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.94,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,67 @@\n   public void handle(SchedulerEvent schedulerEvent) {\n     // metrics off\n     if (! metricsON) {\n       scheduler.handle(schedulerEvent);\n       return;\n     }\n     if(!running)    running \u003d true;\n \n     // metrics on\n     Timer.Context handlerTimer \u003d null;\n     Timer.Context operationTimer \u003d null;\n \n     NodeUpdateSchedulerEventWrapper eventWrapper;\n     try {\n       //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n       if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n               \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n         eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n                 (NodeUpdateSchedulerEvent)schedulerEvent);\n         schedulerEvent \u003d eventWrapper;\n         updateQueueWithNodeUpdate(eventWrapper);\n-      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n-              \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n+      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n+          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         // check if having AM Container, update resource usage information\n-        AppRemovedSchedulerEvent appRemoveEvent \u003d\n-                (AppRemovedSchedulerEvent) schedulerEvent;\n+        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n+            (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n         ApplicationAttemptId appAttemptId \u003d\n                 appRemoveEvent.getApplicationAttemptID();\n         String queue \u003d appQueueMap.get(appAttemptId);\n         SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n         if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n           // should have one container which is AM container\n           RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n           updateQueueMetrics(queue,\n                   rmc.getContainer().getResource().getMemory(),\n                   rmc.getContainer().getResource().getVirtualCores());\n         }\n       }\n \n       handlerTimer \u003d schedulerHandleTimer.time();\n       operationTimer \u003d schedulerHandleTimerMap\n               .get(schedulerEvent.getType()).time();\n \n       scheduler.handle(schedulerEvent);\n     } finally {\n       if (handlerTimer !\u003d null)     handlerTimer.stop();\n       if (operationTimer !\u003d null)   operationTimer.stop();\n       schedulerHandleCounter.inc();\n       schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n \n-      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n-              \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n+      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n+          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n         SLSRunner.decreaseRemainingApps();\n-        AppRemovedSchedulerEvent appRemoveEvent \u003d\n-                (AppRemovedSchedulerEvent) schedulerEvent;\n+        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n+                (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n         ApplicationAttemptId appAttemptId \u003d\n                 appRemoveEvent.getApplicationAttemptID();\n         appQueueMap.remove(appRemoveEvent.getApplicationAttemptID());\n-      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n-              \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n-        AppAddedSchedulerEvent appAddEvent \u003d\n-                (AppAddedSchedulerEvent) schedulerEvent;\n+      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_ADDED\n+          \u0026\u0026 schedulerEvent instanceof AppAttemptAddedSchedulerEvent) {\n+        AppAttemptAddedSchedulerEvent appAddEvent \u003d\n+                (AppAttemptAddedSchedulerEvent) schedulerEvent;\n         String queueName \u003d appAddEvent.getQueue();\n         appQueueMap.put(appAddEvent.getApplicationAttemptId(), queueName);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent schedulerEvent) {\n    // metrics off\n    if (! metricsON) {\n      scheduler.handle(schedulerEvent);\n      return;\n    }\n    if(!running)    running \u003d true;\n\n    // metrics on\n    Timer.Context handlerTimer \u003d null;\n    Timer.Context operationTimer \u003d null;\n\n    NodeUpdateSchedulerEventWrapper eventWrapper;\n    try {\n      //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n              \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n        eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n                (NodeUpdateSchedulerEvent)schedulerEvent);\n        schedulerEvent \u003d eventWrapper;\n        updateQueueWithNodeUpdate(eventWrapper);\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        // check if having AM Container, update resource usage information\n        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n            (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n                appRemoveEvent.getApplicationAttemptID();\n        String queue \u003d appQueueMap.get(appAttemptId);\n        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n        if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n          // should have one container which is AM container\n          RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n          updateQueueMetrics(queue,\n                  rmc.getContainer().getResource().getMemory(),\n                  rmc.getContainer().getResource().getVirtualCores());\n        }\n      }\n\n      handlerTimer \u003d schedulerHandleTimer.time();\n      operationTimer \u003d schedulerHandleTimerMap\n              .get(schedulerEvent.getType()).time();\n\n      scheduler.handle(schedulerEvent);\n    } finally {\n      if (handlerTimer !\u003d null)     handlerTimer.stop();\n      if (operationTimer !\u003d null)   operationTimer.stop();\n      schedulerHandleCounter.inc();\n      schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_REMOVED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptRemovedSchedulerEvent) {\n        SLSRunner.decreaseRemainingApps();\n        AppAttemptRemovedSchedulerEvent appRemoveEvent \u003d\n                (AppAttemptRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n                appRemoveEvent.getApplicationAttemptID();\n        appQueueMap.remove(appRemoveEvent.getApplicationAttemptID());\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ATTEMPT_ADDED\n          \u0026\u0026 schedulerEvent instanceof AppAttemptAddedSchedulerEvent) {\n        AppAttemptAddedSchedulerEvent appAddEvent \u003d\n                (AppAttemptAddedSchedulerEvent) schedulerEvent;\n        String queueName \u003d appAddEvent.getQueue();\n        appQueueMap.put(appAddEvent.getApplicationAttemptId(), queueName);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,67 @@\n+  public void handle(SchedulerEvent schedulerEvent) {\n+    // metrics off\n+    if (! metricsON) {\n+      scheduler.handle(schedulerEvent);\n+      return;\n+    }\n+    if(!running)    running \u003d true;\n+\n+    // metrics on\n+    Timer.Context handlerTimer \u003d null;\n+    Timer.Context operationTimer \u003d null;\n+\n+    NodeUpdateSchedulerEventWrapper eventWrapper;\n+    try {\n+      //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n+      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n+              \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n+        eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n+                (NodeUpdateSchedulerEvent)schedulerEvent);\n+        schedulerEvent \u003d eventWrapper;\n+        updateQueueWithNodeUpdate(eventWrapper);\n+      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n+              \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n+        // check if having AM Container, update resource usage information\n+        AppRemovedSchedulerEvent appRemoveEvent \u003d\n+                (AppRemovedSchedulerEvent) schedulerEvent;\n+        ApplicationAttemptId appAttemptId \u003d\n+                appRemoveEvent.getApplicationAttemptID();\n+        String queue \u003d appQueueMap.get(appAttemptId);\n+        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n+        if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n+          // should have one container which is AM container\n+          RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n+          updateQueueMetrics(queue,\n+                  rmc.getContainer().getResource().getMemory(),\n+                  rmc.getContainer().getResource().getVirtualCores());\n+        }\n+      }\n+\n+      handlerTimer \u003d schedulerHandleTimer.time();\n+      operationTimer \u003d schedulerHandleTimerMap\n+              .get(schedulerEvent.getType()).time();\n+\n+      scheduler.handle(schedulerEvent);\n+    } finally {\n+      if (handlerTimer !\u003d null)     handlerTimer.stop();\n+      if (operationTimer !\u003d null)   operationTimer.stop();\n+      schedulerHandleCounter.inc();\n+      schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n+\n+      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n+              \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n+        SLSRunner.decreaseRemainingApps();\n+        AppRemovedSchedulerEvent appRemoveEvent \u003d\n+                (AppRemovedSchedulerEvent) schedulerEvent;\n+        ApplicationAttemptId appAttemptId \u003d\n+                appRemoveEvent.getApplicationAttemptID();\n+        appQueueMap.remove(appRemoveEvent.getApplicationAttemptID());\n+      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n+              \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n+        AppAddedSchedulerEvent appAddEvent \u003d\n+                (AppAddedSchedulerEvent) schedulerEvent;\n+        String queueName \u003d appAddEvent.getQueue();\n+        appQueueMap.put(appAddEvent.getApplicationAttemptId(), queueName);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(SchedulerEvent schedulerEvent) {\n    // metrics off\n    if (! metricsON) {\n      scheduler.handle(schedulerEvent);\n      return;\n    }\n    if(!running)    running \u003d true;\n\n    // metrics on\n    Timer.Context handlerTimer \u003d null;\n    Timer.Context operationTimer \u003d null;\n\n    NodeUpdateSchedulerEventWrapper eventWrapper;\n    try {\n      //if (schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.NODE_UPDATE\n              \u0026\u0026 schedulerEvent instanceof NodeUpdateSchedulerEvent) {\n        eventWrapper \u003d new NodeUpdateSchedulerEventWrapper(\n                (NodeUpdateSchedulerEvent)schedulerEvent);\n        schedulerEvent \u003d eventWrapper;\n        updateQueueWithNodeUpdate(eventWrapper);\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n              \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n        // check if having AM Container, update resource usage information\n        AppRemovedSchedulerEvent appRemoveEvent \u003d\n                (AppRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n                appRemoveEvent.getApplicationAttemptID();\n        String queue \u003d appQueueMap.get(appAttemptId);\n        SchedulerAppReport app \u003d scheduler.getSchedulerAppInfo(appAttemptId);\n        if (! app.getLiveContainers().isEmpty()) {  // have 0 or 1\n          // should have one container which is AM container\n          RMContainer rmc \u003d app.getLiveContainers().iterator().next();\n          updateQueueMetrics(queue,\n                  rmc.getContainer().getResource().getMemory(),\n                  rmc.getContainer().getResource().getVirtualCores());\n        }\n      }\n\n      handlerTimer \u003d schedulerHandleTimer.time();\n      operationTimer \u003d schedulerHandleTimerMap\n              .get(schedulerEvent.getType()).time();\n\n      scheduler.handle(schedulerEvent);\n    } finally {\n      if (handlerTimer !\u003d null)     handlerTimer.stop();\n      if (operationTimer !\u003d null)   operationTimer.stop();\n      schedulerHandleCounter.inc();\n      schedulerHandleCounterMap.get(schedulerEvent.getType()).inc();\n\n      if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_REMOVED\n              \u0026\u0026 schedulerEvent instanceof AppRemovedSchedulerEvent) {\n        SLSRunner.decreaseRemainingApps();\n        AppRemovedSchedulerEvent appRemoveEvent \u003d\n                (AppRemovedSchedulerEvent) schedulerEvent;\n        ApplicationAttemptId appAttemptId \u003d\n                appRemoveEvent.getApplicationAttemptID();\n        appQueueMap.remove(appRemoveEvent.getApplicationAttemptID());\n      } else if (schedulerEvent.getType() \u003d\u003d SchedulerEventType.APP_ADDED\n              \u0026\u0026 schedulerEvent instanceof AppAddedSchedulerEvent) {\n        AppAddedSchedulerEvent appAddEvent \u003d\n                (AppAddedSchedulerEvent) schedulerEvent;\n        String queueName \u003d appAddEvent.getQueue();\n        appQueueMap.put(appAddEvent.getApplicationAttemptId(), queueName);\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/scheduler/ResourceSchedulerWrapper.java"
    }
  }
}