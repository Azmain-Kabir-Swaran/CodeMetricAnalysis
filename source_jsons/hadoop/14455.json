{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JNStorage.java",
  "functionName": "analyzeStorage",
  "functionId": "analyzeStorage",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JNStorage.java",
  "functionStartLine": 237,
  "functionEndLine": 242,
  "numCommitsSeen": 23,
  "timeTaken": 1378,
  "changeHistory": [
    "f765fdb65701e61887daedb2b369af4be12cb432",
    "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "f765fdb65701e61887daedb2b369af4be12cb432": "Ymodifierchange",
    "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f765fdb65701e61887daedb2b369af4be12cb432": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-3793. Implement genericized format() in QJM. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1373177 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/12 5:48 PM",
      "commitName": "f765fdb65701e61887daedb2b369af4be12cb432",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/07/12 2:47 PM",
      "commitNameOld": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 20.13,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n-  private void analyzeStorage() throws IOException {\n+  void analyzeStorage() throws IOException {\n     this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n     if (state \u003d\u003d StorageState.NORMAL) {\n       readProperties(sd);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void analyzeStorage() throws IOException {\n    this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n    if (state \u003d\u003d StorageState.NORMAL) {\n      readProperties(sd);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JNStorage.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[]"
      }
    },
    "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-3693. JNStorage should read its storage info even before a writer becomes active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1365794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/12 2:47 PM",
      "commitName": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
      "commitAuthor": "Todd Lipcon",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3693. JNStorage should read its storage info even before a writer becomes active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1365794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/12 2:47 PM",
          "commitName": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "25/07/12 2:44 PM",
          "commitNameOld": "d2d0736de40c2b2c7872d2438bf1695e23ded5af",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,6 @@\n-  void analyzeStorage(NamespaceInfo nsInfo) throws IOException {\n-    if (lazyInitted) {\n-      checkConsistentNamespace(nsInfo);\n-      return;\n-    }\n-    \n-    StorageState state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n-    switch (state) {\n-    case NON_EXISTENT:\n-    case NOT_FORMATTED:\n-      format(nsInfo);\n-      // In the NORMAL case below, analyzeStorage() has already locked the\n-      // directory for us. But in the case that we format it, we have to\n-      // lock it here.\n-      // The directory is unlocked in close() when the node shuts down.\n-      sd.lock();\n-      break;\n-    case NORMAL:\n-      // Storage directory is already locked by analyzeStorage() - no\n-      // need to lock it here.\n+  private void analyzeStorage() throws IOException {\n+    this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n+    if (state \u003d\u003d StorageState.NORMAL) {\n       readProperties(sd);\n-      checkConsistentNamespace(nsInfo);\n-      break;\n-      \n-    default:\n-      LOG.warn(\"TODO: unhandled state for storage dir \" + sd + \": \" + state);\n     }\n-    lazyInitted  \u003d true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void analyzeStorage() throws IOException {\n    this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n    if (state \u003d\u003d StorageState.NORMAL) {\n      readProperties(sd);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JNStorage.java",
          "extendedDetails": {
            "oldValue": "[nsInfo-NamespaceInfo]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-3693. JNStorage should read its storage info even before a writer becomes active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1365794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/12 2:47 PM",
          "commitName": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "25/07/12 2:44 PM",
          "commitNameOld": "d2d0736de40c2b2c7872d2438bf1695e23ded5af",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,6 @@\n-  void analyzeStorage(NamespaceInfo nsInfo) throws IOException {\n-    if (lazyInitted) {\n-      checkConsistentNamespace(nsInfo);\n-      return;\n-    }\n-    \n-    StorageState state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n-    switch (state) {\n-    case NON_EXISTENT:\n-    case NOT_FORMATTED:\n-      format(nsInfo);\n-      // In the NORMAL case below, analyzeStorage() has already locked the\n-      // directory for us. But in the case that we format it, we have to\n-      // lock it here.\n-      // The directory is unlocked in close() when the node shuts down.\n-      sd.lock();\n-      break;\n-    case NORMAL:\n-      // Storage directory is already locked by analyzeStorage() - no\n-      // need to lock it here.\n+  private void analyzeStorage() throws IOException {\n+    this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n+    if (state \u003d\u003d StorageState.NORMAL) {\n       readProperties(sd);\n-      checkConsistentNamespace(nsInfo);\n-      break;\n-      \n-    default:\n-      LOG.warn(\"TODO: unhandled state for storage dir \" + sd + \": \" + state);\n     }\n-    lazyInitted  \u003d true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void analyzeStorage() throws IOException {\n    this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n    if (state \u003d\u003d StorageState.NORMAL) {\n      readProperties(sd);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JNStorage.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3693. JNStorage should read its storage info even before a writer becomes active. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1365794 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/07/12 2:47 PM",
          "commitName": "b17018e4b821ec860144d8bd38bc1fcb0d7eeaa5",
          "commitAuthor": "Todd Lipcon",
          "commitDateOld": "25/07/12 2:44 PM",
          "commitNameOld": "d2d0736de40c2b2c7872d2438bf1695e23ded5af",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,6 @@\n-  void analyzeStorage(NamespaceInfo nsInfo) throws IOException {\n-    if (lazyInitted) {\n-      checkConsistentNamespace(nsInfo);\n-      return;\n-    }\n-    \n-    StorageState state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n-    switch (state) {\n-    case NON_EXISTENT:\n-    case NOT_FORMATTED:\n-      format(nsInfo);\n-      // In the NORMAL case below, analyzeStorage() has already locked the\n-      // directory for us. But in the case that we format it, we have to\n-      // lock it here.\n-      // The directory is unlocked in close() when the node shuts down.\n-      sd.lock();\n-      break;\n-    case NORMAL:\n-      // Storage directory is already locked by analyzeStorage() - no\n-      // need to lock it here.\n+  private void analyzeStorage() throws IOException {\n+    this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n+    if (state \u003d\u003d StorageState.NORMAL) {\n       readProperties(sd);\n-      checkConsistentNamespace(nsInfo);\n-      break;\n-      \n-    default:\n-      LOG.warn(\"TODO: unhandled state for storage dir \" + sd + \": \" + state);\n     }\n-    lazyInitted  \u003d true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void analyzeStorage() throws IOException {\n    this.state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n    if (state \u003d\u003d StorageState.NORMAL) {\n      readProperties(sd);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JNStorage.java",
          "extendedDetails": {}
        }
      ]
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,29 @@\n+  void analyzeStorage(NamespaceInfo nsInfo) throws IOException {\n+    if (lazyInitted) {\n+      checkConsistentNamespace(nsInfo);\n+      return;\n+    }\n+    \n+    StorageState state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n+    switch (state) {\n+    case NON_EXISTENT:\n+    case NOT_FORMATTED:\n+      format(nsInfo);\n+      // In the NORMAL case below, analyzeStorage() has already locked the\n+      // directory for us. But in the case that we format it, we have to\n+      // lock it here.\n+      // The directory is unlocked in close() when the node shuts down.\n+      sd.lock();\n+      break;\n+    case NORMAL:\n+      // Storage directory is already locked by analyzeStorage() - no\n+      // need to lock it here.\n+      readProperties(sd);\n+      checkConsistentNamespace(nsInfo);\n+      break;\n+      \n+    default:\n+      LOG.warn(\"TODO: unhandled state for storage dir \" + sd + \": \" + state);\n+    }\n+    lazyInitted  \u003d true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void analyzeStorage(NamespaceInfo nsInfo) throws IOException {\n    if (lazyInitted) {\n      checkConsistentNamespace(nsInfo);\n      return;\n    }\n    \n    StorageState state \u003d sd.analyzeStorage(StartupOption.REGULAR, this);\n    switch (state) {\n    case NON_EXISTENT:\n    case NOT_FORMATTED:\n      format(nsInfo);\n      // In the NORMAL case below, analyzeStorage() has already locked the\n      // directory for us. But in the case that we format it, we have to\n      // lock it here.\n      // The directory is unlocked in close() when the node shuts down.\n      sd.lock();\n      break;\n    case NORMAL:\n      // Storage directory is already locked by analyzeStorage() - no\n      // need to lock it here.\n      readProperties(sd);\n      checkConsistentNamespace(nsInfo);\n      break;\n      \n    default:\n      LOG.warn(\"TODO: unhandled state for storage dir \" + sd + \": \" + state);\n    }\n    lazyInitted  \u003d true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JNStorage.java"
    }
  }
}