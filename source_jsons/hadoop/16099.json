{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerService.java",
  "functionName": "schedule",
  "functionId": "schedule___callable-Callable__?__(modifiers-final)__delay-long__interval-long__unit-TimeUnit",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/scheduler/SchedulerService.java",
  "functionStartLine": 93,
  "functionEndLine": 126,
  "numCommitsSeen": 4,
  "timeTaken": 542,
  "changeHistory": [
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
    "3334306512b5dc932814fded31a89ba1ee97cd9f"
  ],
  "changeHistoryShort": {
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": "Ybodychange",
    "3334306512b5dc932814fded31a89ba1ee97cd9f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "deead78e35b0cb81af875b5a8032cbd06c9a2dae": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3844. Add @Override and remove {@inheritdoc} and unnecessary imports. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1377168 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/12 6:03 PM",
      "commitName": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "01/08/12 4:14 PM",
      "commitNameOld": "08e89662170010dd619c0df859c670cb37b630dd",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 23.08,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   public void schedule(final Callable\u003c?\u003e callable, long delay, long interval, TimeUnit unit) {\n     Check.notNull(callable, \"callable\");\n     if (!scheduler.isShutdown()) {\n       LOG.debug(\"Scheduling callable [{}], interval [{}] seconds, delay [{}] in [{}]\",\n                 new Object[]{callable, delay, interval, unit});\n       Runnable r \u003d new Runnable() {\n+        @Override\n         public void run() {\n           String instrName \u003d callable.getClass().getSimpleName();\n           Instrumentation instr \u003d getServer().get(Instrumentation.class);\n           if (getServer().getStatus() \u003d\u003d Server.Status.HALTED) {\n             LOG.debug(\"Skipping [{}], server status [{}]\", callable, getServer().getStatus());\n             instr.incr(INST_GROUP, instrName + \".skips\", 1);\n           } else {\n             LOG.debug(\"Executing [{}]\", callable);\n             instr.incr(INST_GROUP, instrName + \".execs\", 1);\n             Instrumentation.Cron cron \u003d instr.createCron().start();\n             try {\n               callable.call();\n             } catch (Exception ex) {\n               instr.incr(INST_GROUP, instrName + \".fails\", 1);\n               LOG.error(\"Error executing [{}], {}\", new Object[]{callable, ex.getMessage(), ex});\n             } finally {\n               instr.addCron(INST_GROUP, instrName, cron.stop());\n             }\n           }\n         }\n       };\n       scheduler.scheduleWithFixedDelay(r, delay, interval, unit);\n     } else {\n       throw new IllegalStateException(\n         MessageFormat.format(\"Scheduler shutting down, ignoring scheduling of [{}]\", callable));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void schedule(final Callable\u003c?\u003e callable, long delay, long interval, TimeUnit unit) {\n    Check.notNull(callable, \"callable\");\n    if (!scheduler.isShutdown()) {\n      LOG.debug(\"Scheduling callable [{}], interval [{}] seconds, delay [{}] in [{}]\",\n                new Object[]{callable, delay, interval, unit});\n      Runnable r \u003d new Runnable() {\n        @Override\n        public void run() {\n          String instrName \u003d callable.getClass().getSimpleName();\n          Instrumentation instr \u003d getServer().get(Instrumentation.class);\n          if (getServer().getStatus() \u003d\u003d Server.Status.HALTED) {\n            LOG.debug(\"Skipping [{}], server status [{}]\", callable, getServer().getStatus());\n            instr.incr(INST_GROUP, instrName + \".skips\", 1);\n          } else {\n            LOG.debug(\"Executing [{}]\", callable);\n            instr.incr(INST_GROUP, instrName + \".execs\", 1);\n            Instrumentation.Cron cron \u003d instr.createCron().start();\n            try {\n              callable.call();\n            } catch (Exception ex) {\n              instr.incr(INST_GROUP, instrName + \".fails\", 1);\n              LOG.error(\"Error executing [{}], {}\", new Object[]{callable, ex.getMessage(), ex});\n            } finally {\n              instr.addCron(INST_GROUP, instrName, cron.stop());\n            }\n          }\n        }\n      };\n      scheduler.scheduleWithFixedDelay(r, delay, interval, unit);\n    } else {\n      throw new IllegalStateException(\n        MessageFormat.format(\"Scheduler shutting down, ignoring scheduling of [{}]\", callable));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/scheduler/SchedulerService.java",
      "extendedDetails": {}
    },
    "3334306512b5dc932814fded31a89ba1ee97cd9f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2178. Contributing Hoop to HDFS, replacement for HDFS proxy with read/write capabilities. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1212060 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/12/11 11:25 AM",
      "commitName": "3334306512b5dc932814fded31a89ba1ee97cd9f",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,33 @@\n+  public void schedule(final Callable\u003c?\u003e callable, long delay, long interval, TimeUnit unit) {\n+    Check.notNull(callable, \"callable\");\n+    if (!scheduler.isShutdown()) {\n+      LOG.debug(\"Scheduling callable [{}], interval [{}] seconds, delay [{}] in [{}]\",\n+                new Object[]{callable, delay, interval, unit});\n+      Runnable r \u003d new Runnable() {\n+        public void run() {\n+          String instrName \u003d callable.getClass().getSimpleName();\n+          Instrumentation instr \u003d getServer().get(Instrumentation.class);\n+          if (getServer().getStatus() \u003d\u003d Server.Status.HALTED) {\n+            LOG.debug(\"Skipping [{}], server status [{}]\", callable, getServer().getStatus());\n+            instr.incr(INST_GROUP, instrName + \".skips\", 1);\n+          } else {\n+            LOG.debug(\"Executing [{}]\", callable);\n+            instr.incr(INST_GROUP, instrName + \".execs\", 1);\n+            Instrumentation.Cron cron \u003d instr.createCron().start();\n+            try {\n+              callable.call();\n+            } catch (Exception ex) {\n+              instr.incr(INST_GROUP, instrName + \".fails\", 1);\n+              LOG.error(\"Error executing [{}], {}\", new Object[]{callable, ex.getMessage(), ex});\n+            } finally {\n+              instr.addCron(INST_GROUP, instrName, cron.stop());\n+            }\n+          }\n+        }\n+      };\n+      scheduler.scheduleWithFixedDelay(r, delay, interval, unit);\n+    } else {\n+      throw new IllegalStateException(\n+        MessageFormat.format(\"Scheduler shutting down, ignoring scheduling of [{}]\", callable));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void schedule(final Callable\u003c?\u003e callable, long delay, long interval, TimeUnit unit) {\n    Check.notNull(callable, \"callable\");\n    if (!scheduler.isShutdown()) {\n      LOG.debug(\"Scheduling callable [{}], interval [{}] seconds, delay [{}] in [{}]\",\n                new Object[]{callable, delay, interval, unit});\n      Runnable r \u003d new Runnable() {\n        public void run() {\n          String instrName \u003d callable.getClass().getSimpleName();\n          Instrumentation instr \u003d getServer().get(Instrumentation.class);\n          if (getServer().getStatus() \u003d\u003d Server.Status.HALTED) {\n            LOG.debug(\"Skipping [{}], server status [{}]\", callable, getServer().getStatus());\n            instr.incr(INST_GROUP, instrName + \".skips\", 1);\n          } else {\n            LOG.debug(\"Executing [{}]\", callable);\n            instr.incr(INST_GROUP, instrName + \".execs\", 1);\n            Instrumentation.Cron cron \u003d instr.createCron().start();\n            try {\n              callable.call();\n            } catch (Exception ex) {\n              instr.incr(INST_GROUP, instrName + \".fails\", 1);\n              LOG.error(\"Error executing [{}], {}\", new Object[]{callable, ex.getMessage(), ex});\n            } finally {\n              instr.addCron(INST_GROUP, instrName, cron.stop());\n            }\n          }\n        }\n      };\n      scheduler.scheduleWithFixedDelay(r, delay, interval, unit);\n    } else {\n      throw new IllegalStateException(\n        MessageFormat.format(\"Scheduler shutting down, ignoring scheduling of [{}]\", callable));\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-httpfs/src/main/java/org/apache/hadoop/lib/service/scheduler/SchedulerService.java"
    }
  }
}