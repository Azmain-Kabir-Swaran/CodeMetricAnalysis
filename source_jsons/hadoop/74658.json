{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DtUtilShell.java",
  "functionName": "init",
  "functionId": "init___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/DtUtilShell.java",
  "functionStartLine": 117,
  "functionEndLine": 177,
  "numCommitsSeen": 6,
  "timeTaken": 1902,
  "changeHistory": [
    "44e37b4fd9f441becf536368a89436afcd6dede8",
    "78b3a038319cb351632250279f171b756c7f24b0",
    "2753185a010e70f8d9539f42151c79177781122d"
  ],
  "changeHistoryShort": {
    "44e37b4fd9f441becf536368a89436afcd6dede8": "Ybodychange",
    "78b3a038319cb351632250279f171b756c7f24b0": "Ybodychange",
    "2753185a010e70f8d9539f42151c79177781122d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "44e37b4fd9f441becf536368a89436afcd6dede8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15885. Add base64 (urlString) support to DTUtil. Contributed by Inigo Goiri.\n",
      "commitDate": "02/11/18 10:54 AM",
      "commitName": "44e37b4fd9f441becf536368a89436afcd6dede8",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 472.56,
      "commitsBetweenForRepo": 4252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,61 @@\n   protected int init(String[] args) throws Exception {\n     if (0 \u003d\u003d args.length) {\n       return 1;\n     }\n     tokenFiles \u003d new ArrayList\u003cFile\u003e();\n     args \u003d maybeDoLoginFromKeytabAndPrincipal(args);\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (i \u003d\u003d 0) {\n         String command \u003d args[0];\n         if (command.equals(HELP)) {\n           return 1;\n         } else if (command.equals(PRINT)) {\n           setSubCommand(new Print());\n         } else if (command.equals(GET)) {\n           setSubCommand(new Get(args[++i]));\n         } else if (command.equals(EDIT)) {\n           setSubCommand(new Edit());\n         } else if (command.equals(APPEND)) {\n           setSubCommand(new Append());\n         } else if (command.equals(CANCEL)) {\n           setSubCommand(new Remove(true));\n         } else if (command.equals(REMOVE)) {\n           setSubCommand(new Remove(false));\n         } else if (command.equals(RENEW)) {\n           setSubCommand(new Renew());\n+        } else if (command.equals(IMPORT)) {\n+          setSubCommand(new Import(args[++i]));\n         }\n       } else if (args[i].equals(ALIAS)) {\n         alias \u003d new Text(args[++i]);\n       } else if (args[i].equals(SERVICE)) {\n         service \u003d new Text(args[++i]);\n       } else if (args[i].equals(RENEWER)) {\n         renewer \u003d args[++i];\n       } else if (args[i].equals(FORMAT)) {\n         format \u003d args[++i];\n         if (!format.equals(DtFileOperations.FORMAT_JAVA) \u0026\u0026\n             !format.equals(DtFileOperations.FORMAT_PB)) {\n           LOG.error(\"-format must be \u0027\" + DtFileOperations.FORMAT_JAVA +\n                     \"\u0027 or \u0027\" + DtFileOperations.FORMAT_PB + \"\u0027 not \u0027\" +\n                     format + \"\u0027\");\n           return 1;\n         }\n       } else {\n         for (; i \u003c args.length; i++) {\n           File f \u003d new File(args[i]);\n           if (f.exists()) {\n             tokenFiles.add(f);\n           }\n           if (firstFile \u003d\u003d null) {\n             firstFile \u003d f;\n           }\n         }\n         if (tokenFiles.size() \u003d\u003d 0 \u0026\u0026 firstFile \u003d\u003d null) {\n           LOG.error(\"Must provide a filename to all commands.\");\n           return 1;\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws Exception {\n    if (0 \u003d\u003d args.length) {\n      return 1;\n    }\n    tokenFiles \u003d new ArrayList\u003cFile\u003e();\n    args \u003d maybeDoLoginFromKeytabAndPrincipal(args);\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (i \u003d\u003d 0) {\n        String command \u003d args[0];\n        if (command.equals(HELP)) {\n          return 1;\n        } else if (command.equals(PRINT)) {\n          setSubCommand(new Print());\n        } else if (command.equals(GET)) {\n          setSubCommand(new Get(args[++i]));\n        } else if (command.equals(EDIT)) {\n          setSubCommand(new Edit());\n        } else if (command.equals(APPEND)) {\n          setSubCommand(new Append());\n        } else if (command.equals(CANCEL)) {\n          setSubCommand(new Remove(true));\n        } else if (command.equals(REMOVE)) {\n          setSubCommand(new Remove(false));\n        } else if (command.equals(RENEW)) {\n          setSubCommand(new Renew());\n        } else if (command.equals(IMPORT)) {\n          setSubCommand(new Import(args[++i]));\n        }\n      } else if (args[i].equals(ALIAS)) {\n        alias \u003d new Text(args[++i]);\n      } else if (args[i].equals(SERVICE)) {\n        service \u003d new Text(args[++i]);\n      } else if (args[i].equals(RENEWER)) {\n        renewer \u003d args[++i];\n      } else if (args[i].equals(FORMAT)) {\n        format \u003d args[++i];\n        if (!format.equals(DtFileOperations.FORMAT_JAVA) \u0026\u0026\n            !format.equals(DtFileOperations.FORMAT_PB)) {\n          LOG.error(\"-format must be \u0027\" + DtFileOperations.FORMAT_JAVA +\n                    \"\u0027 or \u0027\" + DtFileOperations.FORMAT_PB + \"\u0027 not \u0027\" +\n                    format + \"\u0027\");\n          return 1;\n        }\n      } else {\n        for (; i \u003c args.length; i++) {\n          File f \u003d new File(args[i]);\n          if (f.exists()) {\n            tokenFiles.add(f);\n          }\n          if (firstFile \u003d\u003d null) {\n            firstFile \u003d f;\n          }\n        }\n        if (tokenFiles.size() \u003d\u003d 0 \u0026\u0026 firstFile \u003d\u003d null) {\n          LOG.error(\"Must provide a filename to all commands.\");\n          return 1;\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/DtUtilShell.java",
      "extendedDetails": {}
    },
    "78b3a038319cb351632250279f171b756c7f24b0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13109. Add ability to edit existing token file via dtutil -alias flag (Matthew Paduano via aw)\n",
      "commitDate": "03/06/16 3:34 PM",
      "commitName": "78b3a038319cb351632250279f171b756c7f24b0",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "29/04/16 10:32 PM",
      "commitNameOld": "2753185a010e70f8d9539f42151c79177781122d",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 34.71,
      "commitsBetweenForRepo": 227,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,59 @@\n   protected int init(String[] args) throws Exception {\n     if (0 \u003d\u003d args.length) {\n       return 1;\n     }\n     tokenFiles \u003d new ArrayList\u003cFile\u003e();\n     args \u003d maybeDoLoginFromKeytabAndPrincipal(args);\n     for (int i \u003d 0; i \u003c args.length; i++) {\n       if (i \u003d\u003d 0) {\n         String command \u003d args[0];\n         if (command.equals(HELP)) {\n           return 1;\n         } else if (command.equals(PRINT)) {\n           setSubCommand(new Print());\n         } else if (command.equals(GET)) {\n           setSubCommand(new Get(args[++i]));\n+        } else if (command.equals(EDIT)) {\n+          setSubCommand(new Edit());\n         } else if (command.equals(APPEND)) {\n           setSubCommand(new Append());\n         } else if (command.equals(CANCEL)) {\n           setSubCommand(new Remove(true));\n         } else if (command.equals(REMOVE)) {\n           setSubCommand(new Remove(false));\n         } else if (command.equals(RENEW)) {\n           setSubCommand(new Renew());\n         }\n       } else if (args[i].equals(ALIAS)) {\n         alias \u003d new Text(args[++i]);\n       } else if (args[i].equals(SERVICE)) {\n         service \u003d new Text(args[++i]);\n       } else if (args[i].equals(RENEWER)) {\n         renewer \u003d args[++i];\n       } else if (args[i].equals(FORMAT)) {\n         format \u003d args[++i];\n         if (!format.equals(DtFileOperations.FORMAT_JAVA) \u0026\u0026\n             !format.equals(DtFileOperations.FORMAT_PB)) {\n           LOG.error(\"-format must be \u0027\" + DtFileOperations.FORMAT_JAVA +\n                     \"\u0027 or \u0027\" + DtFileOperations.FORMAT_PB + \"\u0027 not \u0027\" +\n                     format + \"\u0027\");\n           return 1;\n         }\n       } else {\n         for (; i \u003c args.length; i++) {\n           File f \u003d new File(args[i]);\n           if (f.exists()) {\n             tokenFiles.add(f);\n           }\n           if (firstFile \u003d\u003d null) {\n             firstFile \u003d f;\n           }\n         }\n         if (tokenFiles.size() \u003d\u003d 0 \u0026\u0026 firstFile \u003d\u003d null) {\n           LOG.error(\"Must provide a filename to all commands.\");\n           return 1;\n         }\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws Exception {\n    if (0 \u003d\u003d args.length) {\n      return 1;\n    }\n    tokenFiles \u003d new ArrayList\u003cFile\u003e();\n    args \u003d maybeDoLoginFromKeytabAndPrincipal(args);\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (i \u003d\u003d 0) {\n        String command \u003d args[0];\n        if (command.equals(HELP)) {\n          return 1;\n        } else if (command.equals(PRINT)) {\n          setSubCommand(new Print());\n        } else if (command.equals(GET)) {\n          setSubCommand(new Get(args[++i]));\n        } else if (command.equals(EDIT)) {\n          setSubCommand(new Edit());\n        } else if (command.equals(APPEND)) {\n          setSubCommand(new Append());\n        } else if (command.equals(CANCEL)) {\n          setSubCommand(new Remove(true));\n        } else if (command.equals(REMOVE)) {\n          setSubCommand(new Remove(false));\n        } else if (command.equals(RENEW)) {\n          setSubCommand(new Renew());\n        }\n      } else if (args[i].equals(ALIAS)) {\n        alias \u003d new Text(args[++i]);\n      } else if (args[i].equals(SERVICE)) {\n        service \u003d new Text(args[++i]);\n      } else if (args[i].equals(RENEWER)) {\n        renewer \u003d args[++i];\n      } else if (args[i].equals(FORMAT)) {\n        format \u003d args[++i];\n        if (!format.equals(DtFileOperations.FORMAT_JAVA) \u0026\u0026\n            !format.equals(DtFileOperations.FORMAT_PB)) {\n          LOG.error(\"-format must be \u0027\" + DtFileOperations.FORMAT_JAVA +\n                    \"\u0027 or \u0027\" + DtFileOperations.FORMAT_PB + \"\u0027 not \u0027\" +\n                    format + \"\u0027\");\n          return 1;\n        }\n      } else {\n        for (; i \u003c args.length; i++) {\n          File f \u003d new File(args[i]);\n          if (f.exists()) {\n            tokenFiles.add(f);\n          }\n          if (firstFile \u003d\u003d null) {\n            firstFile \u003d f;\n          }\n        }\n        if (tokenFiles.size() \u003d\u003d 0 \u0026\u0026 firstFile \u003d\u003d null) {\n          LOG.error(\"Must provide a filename to all commands.\");\n          return 1;\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/DtUtilShell.java",
      "extendedDetails": {}
    },
    "2753185a010e70f8d9539f42151c79177781122d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12563. Updated utility (dtutil) to create/modify token files. Contributed by Matthew Paduano\n",
      "commitDate": "29/04/16 10:32 PM",
      "commitName": "2753185a010e70f8d9539f42151c79177781122d",
      "commitAuthor": "Ravi Prakash",
      "diff": "@@ -0,0 +1,57 @@\n+  protected int init(String[] args) throws Exception {\n+    if (0 \u003d\u003d args.length) {\n+      return 1;\n+    }\n+    tokenFiles \u003d new ArrayList\u003cFile\u003e();\n+    args \u003d maybeDoLoginFromKeytabAndPrincipal(args);\n+    for (int i \u003d 0; i \u003c args.length; i++) {\n+      if (i \u003d\u003d 0) {\n+        String command \u003d args[0];\n+        if (command.equals(HELP)) {\n+          return 1;\n+        } else if (command.equals(PRINT)) {\n+          setSubCommand(new Print());\n+        } else if (command.equals(GET)) {\n+          setSubCommand(new Get(args[++i]));\n+        } else if (command.equals(APPEND)) {\n+          setSubCommand(new Append());\n+        } else if (command.equals(CANCEL)) {\n+          setSubCommand(new Remove(true));\n+        } else if (command.equals(REMOVE)) {\n+          setSubCommand(new Remove(false));\n+        } else if (command.equals(RENEW)) {\n+          setSubCommand(new Renew());\n+        }\n+      } else if (args[i].equals(ALIAS)) {\n+        alias \u003d new Text(args[++i]);\n+      } else if (args[i].equals(SERVICE)) {\n+        service \u003d new Text(args[++i]);\n+      } else if (args[i].equals(RENEWER)) {\n+        renewer \u003d args[++i];\n+      } else if (args[i].equals(FORMAT)) {\n+        format \u003d args[++i];\n+        if (!format.equals(DtFileOperations.FORMAT_JAVA) \u0026\u0026\n+            !format.equals(DtFileOperations.FORMAT_PB)) {\n+          LOG.error(\"-format must be \u0027\" + DtFileOperations.FORMAT_JAVA +\n+                    \"\u0027 or \u0027\" + DtFileOperations.FORMAT_PB + \"\u0027 not \u0027\" +\n+                    format + \"\u0027\");\n+          return 1;\n+        }\n+      } else {\n+        for (; i \u003c args.length; i++) {\n+          File f \u003d new File(args[i]);\n+          if (f.exists()) {\n+            tokenFiles.add(f);\n+          }\n+          if (firstFile \u003d\u003d null) {\n+            firstFile \u003d f;\n+          }\n+        }\n+        if (tokenFiles.size() \u003d\u003d 0 \u0026\u0026 firstFile \u003d\u003d null) {\n+          LOG.error(\"Must provide a filename to all commands.\");\n+          return 1;\n+        }\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws Exception {\n    if (0 \u003d\u003d args.length) {\n      return 1;\n    }\n    tokenFiles \u003d new ArrayList\u003cFile\u003e();\n    args \u003d maybeDoLoginFromKeytabAndPrincipal(args);\n    for (int i \u003d 0; i \u003c args.length; i++) {\n      if (i \u003d\u003d 0) {\n        String command \u003d args[0];\n        if (command.equals(HELP)) {\n          return 1;\n        } else if (command.equals(PRINT)) {\n          setSubCommand(new Print());\n        } else if (command.equals(GET)) {\n          setSubCommand(new Get(args[++i]));\n        } else if (command.equals(APPEND)) {\n          setSubCommand(new Append());\n        } else if (command.equals(CANCEL)) {\n          setSubCommand(new Remove(true));\n        } else if (command.equals(REMOVE)) {\n          setSubCommand(new Remove(false));\n        } else if (command.equals(RENEW)) {\n          setSubCommand(new Renew());\n        }\n      } else if (args[i].equals(ALIAS)) {\n        alias \u003d new Text(args[++i]);\n      } else if (args[i].equals(SERVICE)) {\n        service \u003d new Text(args[++i]);\n      } else if (args[i].equals(RENEWER)) {\n        renewer \u003d args[++i];\n      } else if (args[i].equals(FORMAT)) {\n        format \u003d args[++i];\n        if (!format.equals(DtFileOperations.FORMAT_JAVA) \u0026\u0026\n            !format.equals(DtFileOperations.FORMAT_PB)) {\n          LOG.error(\"-format must be \u0027\" + DtFileOperations.FORMAT_JAVA +\n                    \"\u0027 or \u0027\" + DtFileOperations.FORMAT_PB + \"\u0027 not \u0027\" +\n                    format + \"\u0027\");\n          return 1;\n        }\n      } else {\n        for (; i \u003c args.length; i++) {\n          File f \u003d new File(args[i]);\n          if (f.exists()) {\n            tokenFiles.add(f);\n          }\n          if (firstFile \u003d\u003d null) {\n            firstFile \u003d f;\n          }\n        }\n        if (tokenFiles.size() \u003d\u003d 0 \u0026\u0026 firstFile \u003d\u003d null) {\n          LOG.error(\"Must provide a filename to all commands.\");\n          return 1;\n        }\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/token/DtUtilShell.java"
    }
  }
}