{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "put",
  "functionId": "put___domain-TimelineDomain",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 1628,
  "functionEndLine": 1712,
  "numCommitsSeen": 19,
  "timeTaken": 3148,
  "changeHistory": [
    "839e077faf4019d6efdcd89d95930023cd0b0a08",
    "a4aa1cb40504299d3401008fdabc795eafb28713",
    "1a78c0ff016097930edf68e8278f826b637e918c",
    "241d3b3a50c6af92f023d8b2c24598f4813f4674",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
    "d78b452a4f413c6931a494c33df0666ce9b44973"
  ],
  "changeHistoryShort": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": "Ybodychange",
    "a4aa1cb40504299d3401008fdabc795eafb28713": "Ybodychange",
    "1a78c0ff016097930edf68e8278f826b637e918c": "Ybodychange",
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": "Ybodychange",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": "Ybodychange",
    "d78b452a4f413c6931a494c33df0666ce9b44973": "Yintroduced"
  },
  "changeHistoryDetails": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "07/08/17 2:56 AM",
      "commitName": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 8:15 PM",
      "commitNameOld": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   public void put(TimelineDomain domain) throws IOException {\n     WriteBatch writeBatch \u003d null;\n     try {\n       writeBatch \u003d db.createWriteBatch();\n       if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n       }\n       if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n       }\n \n       // Write description\n       byte[] domainEntryKey \u003d createDomainEntryKey(\n           domain.getId(), DESCRIPTION_COLUMN);\n       byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n       if (domain.getDescription() !\u003d null) {\n         writeBatch.put(domainEntryKey, domain.getDescription().\n                        getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write owner\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), OWNER_COLUMN);\n       // Null check for owner is done before\n       writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n       writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n \n       // Write readers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), READER_COLUMN);\n       if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write writers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), WRITER_COLUMN);\n       if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write creation time and modification time\n       // We put both timestamps together because they are always retrieved\n       // together, and store them in the same way as we did for the entity\u0027s\n       // start time and insert time.\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n       long currentTimestamp \u003d System.currentTimeMillis();\n       byte[] timestamps \u003d db.get(domainEntryKey);\n       if (timestamps \u003d\u003d null) {\n         timestamps \u003d new byte[16];\n         writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       } else {\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       }\n       writeBatch.put(domainEntryKey, timestamps);\n       writeBatch.put(ownerLookupEntryKey, timestamps);\n       db.write(writeBatch);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanup(LOG, writeBatch);\n+      IOUtils.cleanupWithLogger(LOG, writeBatch);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    WriteBatch writeBatch \u003d null;\n    try {\n      writeBatch \u003d db.createWriteBatch();\n      if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n      }\n      if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n      }\n\n      // Write description\n      byte[] domainEntryKey \u003d createDomainEntryKey(\n          domain.getId(), DESCRIPTION_COLUMN);\n      byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n      if (domain.getDescription() !\u003d null) {\n        writeBatch.put(domainEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write owner\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), OWNER_COLUMN);\n      // Null check for owner is done before\n      writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n\n      // Write readers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), READER_COLUMN);\n      if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write writers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), WRITER_COLUMN);\n      if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write creation time and modification time\n      // We put both timestamps together because they are always retrieved\n      // together, and store them in the same way as we did for the entity\u0027s\n      // start time and insert time.\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n      long currentTimestamp \u003d System.currentTimeMillis();\n      byte[] timestamps \u003d db.get(domainEntryKey);\n      if (timestamps \u003d\u003d null) {\n        timestamps \u003d new byte[16];\n        writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      } else {\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      }\n      writeBatch.put(domainEntryKey, timestamps);\n      writeBatch.put(ownerLookupEntryKey, timestamps);\n      db.write(writeBatch);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, writeBatch);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "a4aa1cb40504299d3401008fdabc795eafb28713": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\"\n\nThis reverts commit 1a78c0ff016097930edf68e8278f826b637e918c.\n",
      "commitDate": "31/07/17 8:15 PM",
      "commitName": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 6:53 PM",
      "commitNameOld": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   public void put(TimelineDomain domain) throws IOException {\n     WriteBatch writeBatch \u003d null;\n     try {\n       writeBatch \u003d db.createWriteBatch();\n       if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n       }\n       if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n       }\n \n       // Write description\n       byte[] domainEntryKey \u003d createDomainEntryKey(\n           domain.getId(), DESCRIPTION_COLUMN);\n       byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n       if (domain.getDescription() !\u003d null) {\n         writeBatch.put(domainEntryKey, domain.getDescription().\n                        getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write owner\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), OWNER_COLUMN);\n       // Null check for owner is done before\n       writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n       writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n \n       // Write readers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), READER_COLUMN);\n       if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write writers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), WRITER_COLUMN);\n       if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write creation time and modification time\n       // We put both timestamps together because they are always retrieved\n       // together, and store them in the same way as we did for the entity\u0027s\n       // start time and insert time.\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n       long currentTimestamp \u003d System.currentTimeMillis();\n       byte[] timestamps \u003d db.get(domainEntryKey);\n       if (timestamps \u003d\u003d null) {\n         timestamps \u003d new byte[16];\n         writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       } else {\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       }\n       writeBatch.put(domainEntryKey, timestamps);\n       writeBatch.put(ownerLookupEntryKey, timestamps);\n       db.write(writeBatch);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanupWithLogger(LOG, writeBatch);\n+      IOUtils.cleanup(LOG, writeBatch);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    WriteBatch writeBatch \u003d null;\n    try {\n      writeBatch \u003d db.createWriteBatch();\n      if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n      }\n      if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n      }\n\n      // Write description\n      byte[] domainEntryKey \u003d createDomainEntryKey(\n          domain.getId(), DESCRIPTION_COLUMN);\n      byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n      if (domain.getDescription() !\u003d null) {\n        writeBatch.put(domainEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write owner\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), OWNER_COLUMN);\n      // Null check for owner is done before\n      writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n\n      // Write readers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), READER_COLUMN);\n      if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write writers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), WRITER_COLUMN);\n      if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write creation time and modification time\n      // We put both timestamps together because they are always retrieved\n      // together, and store them in the same way as we did for the entity\u0027s\n      // start time and insert time.\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n      long currentTimestamp \u003d System.currentTimeMillis();\n      byte[] timestamps \u003d db.get(domainEntryKey);\n      if (timestamps \u003d\u003d null) {\n        timestamps \u003d new byte[16];\n        writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      } else {\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      }\n      writeBatch.put(domainEntryKey, timestamps);\n      writeBatch.put(ownerLookupEntryKey, timestamps);\n      db.write(writeBatch);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, writeBatch);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1a78c0ff016097930edf68e8278f826b637e918c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "31/07/17 6:53 PM",
      "commitName": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/01/17 2:24 AM",
      "commitNameOld": "4c431a694059e40e78365b02a1497a6c7e479a70",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 202.65,
      "commitsBetweenForRepo": 1063,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,85 @@\n   public void put(TimelineDomain domain) throws IOException {\n     WriteBatch writeBatch \u003d null;\n     try {\n       writeBatch \u003d db.createWriteBatch();\n       if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n       }\n       if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n       }\n \n       // Write description\n       byte[] domainEntryKey \u003d createDomainEntryKey(\n           domain.getId(), DESCRIPTION_COLUMN);\n       byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n       if (domain.getDescription() !\u003d null) {\n         writeBatch.put(domainEntryKey, domain.getDescription().\n                        getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write owner\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), OWNER_COLUMN);\n       // Null check for owner is done before\n       writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n       writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n \n       // Write readers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), READER_COLUMN);\n       if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write writers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), WRITER_COLUMN);\n       if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n         writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n                        getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write creation time and modification time\n       // We put both timestamps together because they are always retrieved\n       // together, and store them in the same way as we did for the entity\u0027s\n       // start time and insert time.\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n       long currentTimestamp \u003d System.currentTimeMillis();\n       byte[] timestamps \u003d db.get(domainEntryKey);\n       if (timestamps \u003d\u003d null) {\n         timestamps \u003d new byte[16];\n         writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       } else {\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       }\n       writeBatch.put(domainEntryKey, timestamps);\n       writeBatch.put(ownerLookupEntryKey, timestamps);\n       db.write(writeBatch);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanup(LOG, writeBatch);\n+      IOUtils.cleanupWithLogger(LOG, writeBatch);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    WriteBatch writeBatch \u003d null;\n    try {\n      writeBatch \u003d db.createWriteBatch();\n      if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n      }\n      if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n      }\n\n      // Write description\n      byte[] domainEntryKey \u003d createDomainEntryKey(\n          domain.getId(), DESCRIPTION_COLUMN);\n      byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n      if (domain.getDescription() !\u003d null) {\n        writeBatch.put(domainEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write owner\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), OWNER_COLUMN);\n      // Null check for owner is done before\n      writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n\n      // Write readers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), READER_COLUMN);\n      if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write writers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), WRITER_COLUMN);\n      if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write creation time and modification time\n      // We put both timestamps together because they are always retrieved\n      // together, and store them in the same way as we did for the entity\u0027s\n      // start time and insert time.\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n      long currentTimestamp \u003d System.currentTimeMillis();\n      byte[] timestamps \u003d db.get(domainEntryKey);\n      if (timestamps \u003d\u003d null) {\n        timestamps \u003d new byte[16];\n        writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      } else {\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      }\n      writeBatch.put(domainEntryKey, timestamps);\n      writeBatch.put(ownerLookupEntryKey, timestamps);\n      db.write(writeBatch);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, writeBatch);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "241d3b3a50c6af92f023d8b2c24598f4813f4674": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2938. Fixed new findbugs warnings in hadoop-yarn-resourcemanager and hadoop-yarn-applicationhistoryservice. Contributed by Varun Saxena.\n",
      "commitDate": "29/12/14 9:59 AM",
      "commitName": "241d3b3a50c6af92f023d8b2c24598f4813f4674",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "23/12/14 6:25 PM",
      "commitNameOld": "149512a83743715bb100feb6747b7e88301018ab",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 5.65,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,81 +1,85 @@\n   public void put(TimelineDomain domain) throws IOException {\n     WriteBatch writeBatch \u003d null;\n     try {\n       writeBatch \u003d db.createWriteBatch();\n       if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n       }\n       if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n       }\n \n       // Write description\n       byte[] domainEntryKey \u003d createDomainEntryKey(\n           domain.getId(), DESCRIPTION_COLUMN);\n       byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n       if (domain.getDescription() !\u003d null) {\n-        writeBatch.put(domainEntryKey, domain.getDescription().getBytes());\n-        writeBatch.put(ownerLookupEntryKey, domain.getDescription().getBytes());\n+        writeBatch.put(domainEntryKey, domain.getDescription().\n+                       getBytes(Charset.forName(\"UTF-8\")));\n+        writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n+                       getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write owner\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), OWNER_COLUMN);\n       // Null check for owner is done before\n-      writeBatch.put(domainEntryKey, domain.getOwner().getBytes());\n-      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes());\n+      writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n+      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n \n       // Write readers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), READER_COLUMN);\n       if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n-        writeBatch.put(domainEntryKey, domain.getReaders().getBytes());\n-        writeBatch.put(ownerLookupEntryKey, domain.getReaders().getBytes());\n+        writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n+        writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n+                       getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write writers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), WRITER_COLUMN);\n       if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n-        writeBatch.put(domainEntryKey, domain.getWriters().getBytes());\n-        writeBatch.put(ownerLookupEntryKey, domain.getWriters().getBytes());\n+        writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n+        writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n+                       getBytes(Charset.forName(\"UTF-8\")));\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write creation time and modification time\n       // We put both timestamps together because they are always retrieved\n       // together, and store them in the same way as we did for the entity\u0027s\n       // start time and insert time.\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n       long currentTimestamp \u003d System.currentTimeMillis();\n       byte[] timestamps \u003d db.get(domainEntryKey);\n       if (timestamps \u003d\u003d null) {\n         timestamps \u003d new byte[16];\n         writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       } else {\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       }\n       writeBatch.put(domainEntryKey, timestamps);\n       writeBatch.put(ownerLookupEntryKey, timestamps);\n       db.write(writeBatch);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n       IOUtils.cleanup(LOG, writeBatch);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    WriteBatch writeBatch \u003d null;\n    try {\n      writeBatch \u003d db.createWriteBatch();\n      if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n      }\n      if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n      }\n\n      // Write description\n      byte[] domainEntryKey \u003d createDomainEntryKey(\n          domain.getId(), DESCRIPTION_COLUMN);\n      byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n      if (domain.getDescription() !\u003d null) {\n        writeBatch.put(domainEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getDescription().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write owner\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), OWNER_COLUMN);\n      // Null check for owner is done before\n      writeBatch.put(domainEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes(Charset.forName(\"UTF-8\")));\n\n      // Write readers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), READER_COLUMN);\n      if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getReaders().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getReaders().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write writers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), WRITER_COLUMN);\n      if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getWriters().getBytes(Charset.forName(\"UTF-8\")));\n        writeBatch.put(ownerLookupEntryKey, domain.getWriters().\n                       getBytes(Charset.forName(\"UTF-8\")));\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write creation time and modification time\n      // We put both timestamps together because they are always retrieved\n      // together, and store them in the same way as we did for the entity\u0027s\n      // start time and insert time.\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n      long currentTimestamp \u003d System.currentTimeMillis();\n      byte[] timestamps \u003d db.get(domainEntryKey);\n      if (timestamps \u003d\u003d null) {\n        timestamps \u003d new byte[16];\n        writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      } else {\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      }\n      writeBatch.put(domainEntryKey, timestamps);\n      writeBatch.put(ownerLookupEntryKey, timestamps);\n      db.write(writeBatch);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, writeBatch);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1984. LeveldbTimelineStore does not handle db exceptions properly. Contributed by Varun Saxena\n",
      "commitDate": "24/11/14 2:36 PM",
      "commitName": "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/11/14 4:11 PM",
      "commitNameOld": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,81 @@\n   public void put(TimelineDomain domain) throws IOException {\n     WriteBatch writeBatch \u003d null;\n     try {\n       writeBatch \u003d db.createWriteBatch();\n       if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n       }\n       if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n         throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n       }\n \n       // Write description\n       byte[] domainEntryKey \u003d createDomainEntryKey(\n           domain.getId(), DESCRIPTION_COLUMN);\n       byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n       if (domain.getDescription() !\u003d null) {\n         writeBatch.put(domainEntryKey, domain.getDescription().getBytes());\n         writeBatch.put(ownerLookupEntryKey, domain.getDescription().getBytes());\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write owner\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), OWNER_COLUMN);\n       // Null check for owner is done before\n       writeBatch.put(domainEntryKey, domain.getOwner().getBytes());\n       writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes());\n \n       // Write readers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), READER_COLUMN);\n       if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getReaders().getBytes());\n         writeBatch.put(ownerLookupEntryKey, domain.getReaders().getBytes());\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write writers\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), WRITER_COLUMN);\n       if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n         writeBatch.put(domainEntryKey, domain.getWriters().getBytes());\n         writeBatch.put(ownerLookupEntryKey, domain.getWriters().getBytes());\n       } else {\n         writeBatch.put(domainEntryKey, EMPTY_BYTES);\n         writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n       }\n \n       // Write creation time and modification time\n       // We put both timestamps together because they are always retrieved\n       // together, and store them in the same way as we did for the entity\u0027s\n       // start time and insert time.\n       domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n       ownerLookupEntryKey \u003d createOwnerLookupKey(\n           domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n       long currentTimestamp \u003d System.currentTimeMillis();\n       byte[] timestamps \u003d db.get(domainEntryKey);\n       if (timestamps \u003d\u003d null) {\n         timestamps \u003d new byte[16];\n         writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       } else {\n         writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n       }\n       writeBatch.put(domainEntryKey, timestamps);\n       writeBatch.put(ownerLookupEntryKey, timestamps);\n       db.write(writeBatch);\n+    } catch(DBException e) {\n+      throw new IOException(e);            \t\n     } finally {\n       IOUtils.cleanup(LOG, writeBatch);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    WriteBatch writeBatch \u003d null;\n    try {\n      writeBatch \u003d db.createWriteBatch();\n      if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n      }\n      if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n      }\n\n      // Write description\n      byte[] domainEntryKey \u003d createDomainEntryKey(\n          domain.getId(), DESCRIPTION_COLUMN);\n      byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n      if (domain.getDescription() !\u003d null) {\n        writeBatch.put(domainEntryKey, domain.getDescription().getBytes());\n        writeBatch.put(ownerLookupEntryKey, domain.getDescription().getBytes());\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write owner\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), OWNER_COLUMN);\n      // Null check for owner is done before\n      writeBatch.put(domainEntryKey, domain.getOwner().getBytes());\n      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes());\n\n      // Write readers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), READER_COLUMN);\n      if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getReaders().getBytes());\n        writeBatch.put(ownerLookupEntryKey, domain.getReaders().getBytes());\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write writers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), WRITER_COLUMN);\n      if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getWriters().getBytes());\n        writeBatch.put(ownerLookupEntryKey, domain.getWriters().getBytes());\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write creation time and modification time\n      // We put both timestamps together because they are always retrieved\n      // together, and store them in the same way as we did for the entity\u0027s\n      // start time and insert time.\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n      long currentTimestamp \u003d System.currentTimeMillis();\n      byte[] timestamps \u003d db.get(domainEntryKey);\n      if (timestamps \u003d\u003d null) {\n        timestamps \u003d new byte[16];\n        writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      } else {\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      }\n      writeBatch.put(domainEntryKey, timestamps);\n      writeBatch.put(ownerLookupEntryKey, timestamps);\n      db.write(writeBatch);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, writeBatch);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "d78b452a4f413c6931a494c33df0666ce9b44973": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2102. Added the concept of a Timeline Domain to handle read/write ACLs on Timeline service event data. Contributed by Zhijie Shen.\n",
      "commitDate": "24/09/14 11:27 AM",
      "commitName": "d78b452a4f413c6931a494c33df0666ce9b44973",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,79 @@\n+  public void put(TimelineDomain domain) throws IOException {\n+    WriteBatch writeBatch \u003d null;\n+    try {\n+      writeBatch \u003d db.createWriteBatch();\n+      if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n+        throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n+      }\n+      if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n+        throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n+      }\n+\n+      // Write description\n+      byte[] domainEntryKey \u003d createDomainEntryKey(\n+          domain.getId(), DESCRIPTION_COLUMN);\n+      byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n+          domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n+      if (domain.getDescription() !\u003d null) {\n+        writeBatch.put(domainEntryKey, domain.getDescription().getBytes());\n+        writeBatch.put(ownerLookupEntryKey, domain.getDescription().getBytes());\n+      } else {\n+        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n+        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n+      }\n+\n+      // Write owner\n+      domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n+      ownerLookupEntryKey \u003d createOwnerLookupKey(\n+          domain.getOwner(), domain.getId(), OWNER_COLUMN);\n+      // Null check for owner is done before\n+      writeBatch.put(domainEntryKey, domain.getOwner().getBytes());\n+      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes());\n+\n+      // Write readers\n+      domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n+      ownerLookupEntryKey \u003d createOwnerLookupKey(\n+          domain.getOwner(), domain.getId(), READER_COLUMN);\n+      if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n+        writeBatch.put(domainEntryKey, domain.getReaders().getBytes());\n+        writeBatch.put(ownerLookupEntryKey, domain.getReaders().getBytes());\n+      } else {\n+        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n+        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n+      }\n+\n+      // Write writers\n+      domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n+      ownerLookupEntryKey \u003d createOwnerLookupKey(\n+          domain.getOwner(), domain.getId(), WRITER_COLUMN);\n+      if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n+        writeBatch.put(domainEntryKey, domain.getWriters().getBytes());\n+        writeBatch.put(ownerLookupEntryKey, domain.getWriters().getBytes());\n+      } else {\n+        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n+        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n+      }\n+\n+      // Write creation time and modification time\n+      // We put both timestamps together because they are always retrieved\n+      // together, and store them in the same way as we did for the entity\u0027s\n+      // start time and insert time.\n+      domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n+      ownerLookupEntryKey \u003d createOwnerLookupKey(\n+          domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n+      long currentTimestamp \u003d System.currentTimeMillis();\n+      byte[] timestamps \u003d db.get(domainEntryKey);\n+      if (timestamps \u003d\u003d null) {\n+        timestamps \u003d new byte[16];\n+        writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n+        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n+      } else {\n+        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n+      }\n+      writeBatch.put(domainEntryKey, timestamps);\n+      writeBatch.put(ownerLookupEntryKey, timestamps);\n+      db.write(writeBatch);\n+    } finally {\n+      IOUtils.cleanup(LOG, writeBatch);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void put(TimelineDomain domain) throws IOException {\n    WriteBatch writeBatch \u003d null;\n    try {\n      writeBatch \u003d db.createWriteBatch();\n      if (domain.getId() \u003d\u003d null || domain.getId().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an ID\");\n      }\n      if (domain.getOwner() \u003d\u003d null || domain.getOwner().length() \u003d\u003d 0) {\n        throw new IllegalArgumentException(\"Domain doesn\u0027t have an owner.\");\n      }\n\n      // Write description\n      byte[] domainEntryKey \u003d createDomainEntryKey(\n          domain.getId(), DESCRIPTION_COLUMN);\n      byte[] ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), DESCRIPTION_COLUMN);\n      if (domain.getDescription() !\u003d null) {\n        writeBatch.put(domainEntryKey, domain.getDescription().getBytes());\n        writeBatch.put(ownerLookupEntryKey, domain.getDescription().getBytes());\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write owner\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), OWNER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), OWNER_COLUMN);\n      // Null check for owner is done before\n      writeBatch.put(domainEntryKey, domain.getOwner().getBytes());\n      writeBatch.put(ownerLookupEntryKey, domain.getOwner().getBytes());\n\n      // Write readers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), READER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), READER_COLUMN);\n      if (domain.getReaders() !\u003d null \u0026\u0026 domain.getReaders().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getReaders().getBytes());\n        writeBatch.put(ownerLookupEntryKey, domain.getReaders().getBytes());\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write writers\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), WRITER_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), WRITER_COLUMN);\n      if (domain.getWriters() !\u003d null \u0026\u0026 domain.getWriters().length() \u003e 0) {\n        writeBatch.put(domainEntryKey, domain.getWriters().getBytes());\n        writeBatch.put(ownerLookupEntryKey, domain.getWriters().getBytes());\n      } else {\n        writeBatch.put(domainEntryKey, EMPTY_BYTES);\n        writeBatch.put(ownerLookupEntryKey, EMPTY_BYTES);\n      }\n\n      // Write creation time and modification time\n      // We put both timestamps together because they are always retrieved\n      // together, and store them in the same way as we did for the entity\u0027s\n      // start time and insert time.\n      domainEntryKey \u003d createDomainEntryKey(domain.getId(), TIMESTAMP_COLUMN);\n      ownerLookupEntryKey \u003d createOwnerLookupKey(\n          domain.getOwner(), domain.getId(), TIMESTAMP_COLUMN);\n      long currentTimestamp \u003d System.currentTimeMillis();\n      byte[] timestamps \u003d db.get(domainEntryKey);\n      if (timestamps \u003d\u003d null) {\n        timestamps \u003d new byte[16];\n        writeReverseOrderedLong(currentTimestamp, timestamps, 0);\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      } else {\n        writeReverseOrderedLong(currentTimestamp, timestamps, 8);\n      }\n      writeBatch.put(domainEntryKey, timestamps);\n      writeBatch.put(ownerLookupEntryKey, timestamps);\n      db.write(writeBatch);\n    } finally {\n      IOUtils.cleanup(LOG, writeBatch);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
    }
  }
}