{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSAdmin.java",
  "functionName": "getReconfigurationStatus",
  "functionId": "getReconfigurationStatus___nodeType-String(modifiers-final)__address-String(modifiers-final)__out-PrintStream(modifiers-final)__err-PrintStream(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
  "functionStartLine": 1907,
  "functionEndLine": 1966,
  "numCommitsSeen": 188,
  "timeTaken": 5151,
  "changeHistory": [
    "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
    "d112d183242f447d4b742139f3a4ea531a997f45",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
    "7aab5fa1bd9386b036af45cd8206622a4555d74a",
    "1861b32eb551a07d748afc6205ea9573f9503eda"
  ],
  "changeHistoryShort": {
    "d62b4a4de75edb840df6634f49cb4beb74e3fb07": "Ymultichange(Ybodychange,Yparametermetachange)",
    "d112d183242f447d4b742139f3a4ea531a997f45": "Ybodychange",
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": "Ybodychange",
    "7aab5fa1bd9386b036af45cd8206622a4555d74a": "Ybodychange",
    "1861b32eb551a07d748afc6205ea9573f9503eda": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d62b4a4de75edb840df6634f49cb4beb74e3fb07": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "HDFS-9094. Add command line option to ask NameNode reload configuration. (Contributed by Xiaobing Zhou)\n",
      "commitDate": "25/01/16 12:17 PM",
      "commitName": "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9094. Add command line option to ask NameNode reload configuration. (Contributed by Xiaobing Zhou)\n",
          "commitDate": "25/01/16 12:17 PM",
          "commitName": "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "24/01/16 2:19 PM",
          "commitNameOld": "10a2bc0dffaece216eb9a6bac3236a086b9ece31",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,60 @@\n-  int getReconfigurationStatus(String nodeType, String address,\n-      PrintStream out, PrintStream err) throws IOException {\n-    if (\"datanode\".equals(nodeType)) {\n-      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n-      try {\n-        ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n-        out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n-        if (!status.hasTask()) {\n-          out.println(\"no task was found.\");\n-          return 0;\n-        }\n-        out.print(\"started at \" + new Date(status.getStartTime()));\n-        if (!status.stopped()) {\n-          out.println(\" and is still running.\");\n-          return 0;\n-        }\n+  int getReconfigurationStatus(final String nodeType, final String address,\n+      final PrintStream out, final PrintStream err) throws IOException {\n+    String outMsg \u003d null;\n+    String errMsg \u003d null;\n+    ReconfigurationTaskStatus status \u003d null;\n \n-        out.println(\" and finished at \" +\n-            new Date(status.getEndTime()).toString() + \".\");\n-        if (status.getStatus() \u003d\u003d null) {\n-          // Nothing to report.\n-          return 0;\n+    try {\n+      status \u003d getReconfigurationStatusDispatch(nodeType, address, out, err);\n+      outMsg \u003d String.format(\"Reconfiguring status for node [%s]: \", address);\n+    } catch (IOException e) {\n+      errMsg \u003d String.format(\"Node [%s] reloading configuration: %s.\", address,\n+          e.toString());\n+    }\n+\n+    if (errMsg !\u003d null) {\n+      err.println(errMsg);\n+      return 1;\n+    } else {\n+      out.print(outMsg);\n+    }\n+\n+    if (status !\u003d null) {\n+      if (!status.hasTask()) {\n+        out.println(\"no task was found.\");\n+        return 0;\n+      }\n+      out.print(\"started at \" + new Date(status.getStartTime()));\n+      if (!status.stopped()) {\n+        out.println(\" and is still running.\");\n+        return 0;\n+      }\n+\n+      out.println(\" and finished at \"\n+          + new Date(status.getEndTime()).toString() + \".\");\n+      if (status.getStatus() \u003d\u003d null) {\n+        // Nothing to report.\n+        return 0;\n+      }\n+      for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result : status\n+          .getStatus().entrySet()) {\n+        if (!result.getValue().isPresent()) {\n+          out.printf(\n+              \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n+              result.getKey().prop, result.getKey().oldVal,\n+              result.getKey().newVal);\n+        } else {\n+          final String errorMsg \u003d result.getValue().get();\n+          out.printf(\n+              \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n+              result.getKey().prop, result.getKey().oldVal,\n+              result.getKey().newVal);\n+          out.println(\"\\tError: \" + errorMsg + \".\");\n         }\n-        for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n-            status.getStatus().entrySet()) {\n-          if (!result.getValue().isPresent()) {\n-            out.printf(\n-                \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n-                result.getKey().prop, result.getKey().oldVal,\n-                result.getKey().newVal);\n-          } else {\n-            final String errorMsg \u003d result.getValue().get();\n-            out.printf(\n-                  \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n-                  result.getKey().prop, result.getKey().oldVal,\n-                  result.getKey().newVal);\n-            out.println(\"\\tError: \" + errorMsg + \".\");\n-          }\n-        }\n-      } catch (IOException e) {\n-        err.println(\"DataNode reloading configuration: \" + e + \".\");\n-        return 1;\n       }\n     } else {\n-      err.println(\"Node type \" + nodeType +\n-          \" does not support reconfiguration.\");\n       return 1;\n     }\n+\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int getReconfigurationStatus(final String nodeType, final String address,\n      final PrintStream out, final PrintStream err) throws IOException {\n    String outMsg \u003d null;\n    String errMsg \u003d null;\n    ReconfigurationTaskStatus status \u003d null;\n\n    try {\n      status \u003d getReconfigurationStatusDispatch(nodeType, address, out, err);\n      outMsg \u003d String.format(\"Reconfiguring status for node [%s]: \", address);\n    } catch (IOException e) {\n      errMsg \u003d String.format(\"Node [%s] reloading configuration: %s.\", address,\n          e.toString());\n    }\n\n    if (errMsg !\u003d null) {\n      err.println(errMsg);\n      return 1;\n    } else {\n      out.print(outMsg);\n    }\n\n    if (status !\u003d null) {\n      if (!status.hasTask()) {\n        out.println(\"no task was found.\");\n        return 0;\n      }\n      out.print(\"started at \" + new Date(status.getStartTime()));\n      if (!status.stopped()) {\n        out.println(\" and is still running.\");\n        return 0;\n      }\n\n      out.println(\" and finished at \"\n          + new Date(status.getEndTime()).toString() + \".\");\n      if (status.getStatus() \u003d\u003d null) {\n        // Nothing to report.\n        return 0;\n      }\n      for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result : status\n          .getStatus().entrySet()) {\n        if (!result.getValue().isPresent()) {\n          out.printf(\n              \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n              result.getKey().prop, result.getKey().oldVal,\n              result.getKey().newVal);\n        } else {\n          final String errorMsg \u003d result.getValue().get();\n          out.printf(\n              \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n              result.getKey().prop, result.getKey().oldVal,\n              result.getKey().newVal);\n          out.println(\"\\tError: \" + errorMsg + \".\");\n        }\n      }\n    } else {\n      return 1;\n    }\n\n    return 0;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HDFS-9094. Add command line option to ask NameNode reload configuration. (Contributed by Xiaobing Zhou)\n",
          "commitDate": "25/01/16 12:17 PM",
          "commitName": "d62b4a4de75edb840df6634f49cb4beb74e3fb07",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "24/01/16 2:19 PM",
          "commitNameOld": "10a2bc0dffaece216eb9a6bac3236a086b9ece31",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 0.91,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,60 @@\n-  int getReconfigurationStatus(String nodeType, String address,\n-      PrintStream out, PrintStream err) throws IOException {\n-    if (\"datanode\".equals(nodeType)) {\n-      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n-      try {\n-        ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n-        out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n-        if (!status.hasTask()) {\n-          out.println(\"no task was found.\");\n-          return 0;\n-        }\n-        out.print(\"started at \" + new Date(status.getStartTime()));\n-        if (!status.stopped()) {\n-          out.println(\" and is still running.\");\n-          return 0;\n-        }\n+  int getReconfigurationStatus(final String nodeType, final String address,\n+      final PrintStream out, final PrintStream err) throws IOException {\n+    String outMsg \u003d null;\n+    String errMsg \u003d null;\n+    ReconfigurationTaskStatus status \u003d null;\n \n-        out.println(\" and finished at \" +\n-            new Date(status.getEndTime()).toString() + \".\");\n-        if (status.getStatus() \u003d\u003d null) {\n-          // Nothing to report.\n-          return 0;\n+    try {\n+      status \u003d getReconfigurationStatusDispatch(nodeType, address, out, err);\n+      outMsg \u003d String.format(\"Reconfiguring status for node [%s]: \", address);\n+    } catch (IOException e) {\n+      errMsg \u003d String.format(\"Node [%s] reloading configuration: %s.\", address,\n+          e.toString());\n+    }\n+\n+    if (errMsg !\u003d null) {\n+      err.println(errMsg);\n+      return 1;\n+    } else {\n+      out.print(outMsg);\n+    }\n+\n+    if (status !\u003d null) {\n+      if (!status.hasTask()) {\n+        out.println(\"no task was found.\");\n+        return 0;\n+      }\n+      out.print(\"started at \" + new Date(status.getStartTime()));\n+      if (!status.stopped()) {\n+        out.println(\" and is still running.\");\n+        return 0;\n+      }\n+\n+      out.println(\" and finished at \"\n+          + new Date(status.getEndTime()).toString() + \".\");\n+      if (status.getStatus() \u003d\u003d null) {\n+        // Nothing to report.\n+        return 0;\n+      }\n+      for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result : status\n+          .getStatus().entrySet()) {\n+        if (!result.getValue().isPresent()) {\n+          out.printf(\n+              \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n+              result.getKey().prop, result.getKey().oldVal,\n+              result.getKey().newVal);\n+        } else {\n+          final String errorMsg \u003d result.getValue().get();\n+          out.printf(\n+              \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n+              result.getKey().prop, result.getKey().oldVal,\n+              result.getKey().newVal);\n+          out.println(\"\\tError: \" + errorMsg + \".\");\n         }\n-        for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n-            status.getStatus().entrySet()) {\n-          if (!result.getValue().isPresent()) {\n-            out.printf(\n-                \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n-                result.getKey().prop, result.getKey().oldVal,\n-                result.getKey().newVal);\n-          } else {\n-            final String errorMsg \u003d result.getValue().get();\n-            out.printf(\n-                  \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n-                  result.getKey().prop, result.getKey().oldVal,\n-                  result.getKey().newVal);\n-            out.println(\"\\tError: \" + errorMsg + \".\");\n-          }\n-        }\n-      } catch (IOException e) {\n-        err.println(\"DataNode reloading configuration: \" + e + \".\");\n-        return 1;\n       }\n     } else {\n-      err.println(\"Node type \" + nodeType +\n-          \" does not support reconfiguration.\");\n       return 1;\n     }\n+\n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  int getReconfigurationStatus(final String nodeType, final String address,\n      final PrintStream out, final PrintStream err) throws IOException {\n    String outMsg \u003d null;\n    String errMsg \u003d null;\n    ReconfigurationTaskStatus status \u003d null;\n\n    try {\n      status \u003d getReconfigurationStatusDispatch(nodeType, address, out, err);\n      outMsg \u003d String.format(\"Reconfiguring status for node [%s]: \", address);\n    } catch (IOException e) {\n      errMsg \u003d String.format(\"Node [%s] reloading configuration: %s.\", address,\n          e.toString());\n    }\n\n    if (errMsg !\u003d null) {\n      err.println(errMsg);\n      return 1;\n    } else {\n      out.print(outMsg);\n    }\n\n    if (status !\u003d null) {\n      if (!status.hasTask()) {\n        out.println(\"no task was found.\");\n        return 0;\n      }\n      out.print(\"started at \" + new Date(status.getStartTime()));\n      if (!status.stopped()) {\n        out.println(\" and is still running.\");\n        return 0;\n      }\n\n      out.println(\" and finished at \"\n          + new Date(status.getEndTime()).toString() + \".\");\n      if (status.getStatus() \u003d\u003d null) {\n        // Nothing to report.\n        return 0;\n      }\n      for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result : status\n          .getStatus().entrySet()) {\n        if (!result.getValue().isPresent()) {\n          out.printf(\n              \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n              result.getKey().prop, result.getKey().oldVal,\n              result.getKey().newVal);\n        } else {\n          final String errorMsg \u003d result.getValue().get();\n          out.printf(\n              \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n              result.getKey().prop, result.getKey().oldVal,\n              result.getKey().newVal);\n          out.println(\"\\tError: \" + errorMsg + \".\");\n        }\n      }\n    } else {\n      return 1;\n    }\n\n    return 0;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
          "extendedDetails": {
            "oldValue": "[nodeType-String, address-String, out-PrintStream, err-PrintStream]",
            "newValue": "[nodeType-String(modifiers-final), address-String(modifiers-final), out-PrintStream(modifiers-final), err-PrintStream(modifiers-final)]"
          }
        }
      ]
    },
    "d112d183242f447d4b742139f3a4ea531a997f45": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8582. Support getting a list of reconfigurable config properties and do not generate spurious reconfig warnings (Lei (Eddy) Xu via Colin P.  McCabe)\n",
      "commitDate": "19/06/15 7:14 PM",
      "commitName": "d112d183242f447d4b742139f3a4ea531a997f45",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "04/06/15 3:35 PM",
      "commitNameOld": "b2540f486ed99e1433d4e5118608da8dd365a934",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 15.15,
      "commitsBetweenForRepo": 93,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,50 @@\n   int getReconfigurationStatus(String nodeType, String address,\n       PrintStream out, PrintStream err) throws IOException {\n     if (\"datanode\".equals(nodeType)) {\n       ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n       try {\n         ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n         out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n         if (!status.hasTask()) {\n           out.println(\"no task was found.\");\n           return 0;\n         }\n         out.print(\"started at \" + new Date(status.getStartTime()));\n         if (!status.stopped()) {\n           out.println(\" and is still running.\");\n           return 0;\n         }\n \n         out.println(\" and finished at \" +\n             new Date(status.getEndTime()).toString() + \".\");\n+        if (status.getStatus() \u003d\u003d null) {\n+          // Nothing to report.\n+          return 0;\n+        }\n         for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n             status.getStatus().entrySet()) {\n           if (!result.getValue().isPresent()) {\n-            out.print(\"SUCCESS: \");\n+            out.printf(\n+                \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n+                result.getKey().prop, result.getKey().oldVal,\n+                result.getKey().newVal);\n           } else {\n-            out.print(\"FAILED: \");\n-          }\n-          out.printf(\"Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n-              result.getKey().prop, result.getKey().oldVal,\n-              result.getKey().newVal);\n-          if (result.getValue().isPresent()) {\n-            out.println(\"\\tError: \" + result.getValue().get() + \".\");\n+            final String errorMsg \u003d result.getValue().get();\n+            out.printf(\n+                  \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n+                  result.getKey().prop, result.getKey().oldVal,\n+                  result.getKey().newVal);\n+            out.println(\"\\tError: \" + errorMsg + \".\");\n           }\n         }\n       } catch (IOException e) {\n         err.println(\"DataNode reloading configuration: \" + e + \".\");\n         return 1;\n       }\n     } else {\n-      err.println(\"Node type \" + nodeType + \" does not support reconfiguration.\");\n+      err.println(\"Node type \" + nodeType +\n+          \" does not support reconfiguration.\");\n       return 1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int getReconfigurationStatus(String nodeType, String address,\n      PrintStream out, PrintStream err) throws IOException {\n    if (\"datanode\".equals(nodeType)) {\n      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n      try {\n        ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n        out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n        if (!status.hasTask()) {\n          out.println(\"no task was found.\");\n          return 0;\n        }\n        out.print(\"started at \" + new Date(status.getStartTime()));\n        if (!status.stopped()) {\n          out.println(\" and is still running.\");\n          return 0;\n        }\n\n        out.println(\" and finished at \" +\n            new Date(status.getEndTime()).toString() + \".\");\n        if (status.getStatus() \u003d\u003d null) {\n          // Nothing to report.\n          return 0;\n        }\n        for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n            status.getStatus().entrySet()) {\n          if (!result.getValue().isPresent()) {\n            out.printf(\n                \"SUCCESS: Changed property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n                result.getKey().prop, result.getKey().oldVal,\n                result.getKey().newVal);\n          } else {\n            final String errorMsg \u003d result.getValue().get();\n            out.printf(\n                  \"FAILED: Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n                  result.getKey().prop, result.getKey().oldVal,\n                  result.getKey().newVal);\n            out.println(\"\\tError: \" + errorMsg + \".\");\n          }\n        }\n      } catch (IOException e) {\n        err.println(\"DataNode reloading configuration: \" + e + \".\");\n        return 1;\n      }\n    } else {\n      err.println(\"Node type \" + nodeType +\n          \" does not support reconfiguration.\");\n      return 1;\n    }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "b9f6d0c956f0278c8b9b83e05b523a442a730ebb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7515. Fix new findbugs warnings in hadoop-hdfs. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 12:36 PM",
      "commitName": "b9f6d0c956f0278c8b9b83e05b523a442a730ebb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "04/11/14 10:16 AM",
      "commitNameOld": "3dfd6e68fe5028fe3766ae5056dc175c38cc97e1",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 37.1,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   int getReconfigurationStatus(String nodeType, String address,\n       PrintStream out, PrintStream err) throws IOException {\n     if (\"datanode\".equals(nodeType)) {\n       ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n       try {\n         ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n         out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n         if (!status.hasTask()) {\n           out.println(\"no task was found.\");\n           return 0;\n         }\n         out.print(\"started at \" + new Date(status.getStartTime()));\n         if (!status.stopped()) {\n           out.println(\" and is still running.\");\n           return 0;\n         }\n \n         out.println(\" and finished at \" +\n             new Date(status.getEndTime()).toString() + \".\");\n         for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n             status.getStatus().entrySet()) {\n           if (!result.getValue().isPresent()) {\n             out.print(\"SUCCESS: \");\n           } else {\n             out.print(\"FAILED: \");\n           }\n-          out.printf(\"Change property %s\\n\\tFrom: \\\"%s\\\"\\n\\tTo: \\\"%s\\\"\\n\",\n+          out.printf(\"Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n               result.getKey().prop, result.getKey().oldVal,\n               result.getKey().newVal);\n           if (result.getValue().isPresent()) {\n             out.println(\"\\tError: \" + result.getValue().get() + \".\");\n           }\n         }\n       } catch (IOException e) {\n         err.println(\"DataNode reloading configuration: \" + e + \".\");\n         return 1;\n       }\n     } else {\n       err.println(\"Node type \" + nodeType + \" does not support reconfiguration.\");\n       return 1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int getReconfigurationStatus(String nodeType, String address,\n      PrintStream out, PrintStream err) throws IOException {\n    if (\"datanode\".equals(nodeType)) {\n      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n      try {\n        ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n        out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n        if (!status.hasTask()) {\n          out.println(\"no task was found.\");\n          return 0;\n        }\n        out.print(\"started at \" + new Date(status.getStartTime()));\n        if (!status.stopped()) {\n          out.println(\" and is still running.\");\n          return 0;\n        }\n\n        out.println(\" and finished at \" +\n            new Date(status.getEndTime()).toString() + \".\");\n        for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n            status.getStatus().entrySet()) {\n          if (!result.getValue().isPresent()) {\n            out.print(\"SUCCESS: \");\n          } else {\n            out.print(\"FAILED: \");\n          }\n          out.printf(\"Change property %s%n\\tFrom: \\\"%s\\\"%n\\tTo: \\\"%s\\\"%n\",\n              result.getKey().prop, result.getKey().oldVal,\n              result.getKey().newVal);\n          if (result.getValue().isPresent()) {\n            out.println(\"\\tError: \" + result.getValue().get() + \".\");\n          }\n        }\n      } catch (IOException e) {\n        err.println(\"DataNode reloading configuration: \" + e + \".\");\n        return 1;\n      }\n    } else {\n      err.println(\"Node type \" + nodeType + \" does not support reconfiguration.\");\n      return 1;\n    }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "7aab5fa1bd9386b036af45cd8206622a4555d74a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7154. Fix returning value of starting reconfiguration task (Lei Xu via Colin P. McCabe)\n",
      "commitDate": "20/10/14 6:33 PM",
      "commitName": "7aab5fa1bd9386b036af45cd8206622a4555d74a",
      "commitAuthor": "Colin Patrick Mccabe",
      "commitDateOld": "25/09/14 1:11 PM",
      "commitNameOld": "1861b32eb551a07d748afc6205ea9573f9503eda",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 25.22,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   int getReconfigurationStatus(String nodeType, String address,\n       PrintStream out, PrintStream err) throws IOException {\n     if (\"datanode\".equals(nodeType)) {\n       ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n       try {\n         ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n         out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n         if (!status.hasTask()) {\n           out.println(\"no task was found.\");\n           return 0;\n         }\n         out.print(\"started at \" + new Date(status.getStartTime()));\n         if (!status.stopped()) {\n           out.println(\" and is still running.\");\n           return 0;\n         }\n \n         out.println(\" and finished at \" +\n             new Date(status.getEndTime()).toString() + \".\");\n         for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n             status.getStatus().entrySet()) {\n           if (!result.getValue().isPresent()) {\n             out.print(\"SUCCESS: \");\n           } else {\n             out.print(\"FAILED: \");\n           }\n           out.printf(\"Change property %s\\n\\tFrom: \\\"%s\\\"\\n\\tTo: \\\"%s\\\"\\n\",\n               result.getKey().prop, result.getKey().oldVal,\n               result.getKey().newVal);\n           if (result.getValue().isPresent()) {\n             out.println(\"\\tError: \" + result.getValue().get() + \".\");\n           }\n         }\n       } catch (IOException e) {\n         err.println(\"DataNode reloading configuration: \" + e + \".\");\n-        return -1;\n+        return 1;\n       }\n     } else {\n       err.println(\"Node type \" + nodeType + \" does not support reconfiguration.\");\n-      return -1;\n+      return 1;\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  int getReconfigurationStatus(String nodeType, String address,\n      PrintStream out, PrintStream err) throws IOException {\n    if (\"datanode\".equals(nodeType)) {\n      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n      try {\n        ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n        out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n        if (!status.hasTask()) {\n          out.println(\"no task was found.\");\n          return 0;\n        }\n        out.print(\"started at \" + new Date(status.getStartTime()));\n        if (!status.stopped()) {\n          out.println(\" and is still running.\");\n          return 0;\n        }\n\n        out.println(\" and finished at \" +\n            new Date(status.getEndTime()).toString() + \".\");\n        for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n            status.getStatus().entrySet()) {\n          if (!result.getValue().isPresent()) {\n            out.print(\"SUCCESS: \");\n          } else {\n            out.print(\"FAILED: \");\n          }\n          out.printf(\"Change property %s\\n\\tFrom: \\\"%s\\\"\\n\\tTo: \\\"%s\\\"\\n\",\n              result.getKey().prop, result.getKey().oldVal,\n              result.getKey().newVal);\n          if (result.getValue().isPresent()) {\n            out.println(\"\\tError: \" + result.getValue().get() + \".\");\n          }\n        }\n      } catch (IOException e) {\n        err.println(\"DataNode reloading configuration: \" + e + \".\");\n        return 1;\n      }\n    } else {\n      err.println(\"Node type \" + nodeType + \" does not support reconfiguration.\");\n      return 1;\n    }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "1861b32eb551a07d748afc6205ea9573f9503eda": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6808. Add command line option to ask DataNode reload configuration. (Lei Xu via Colin McCabe)\n",
      "commitDate": "25/09/14 1:11 PM",
      "commitName": "1861b32eb551a07d748afc6205ea9573f9503eda",
      "commitAuthor": "Colin Patrick Mccabe",
      "diff": "@@ -0,0 +1,43 @@\n+  int getReconfigurationStatus(String nodeType, String address,\n+      PrintStream out, PrintStream err) throws IOException {\n+    if (\"datanode\".equals(nodeType)) {\n+      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n+      try {\n+        ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n+        out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n+        if (!status.hasTask()) {\n+          out.println(\"no task was found.\");\n+          return 0;\n+        }\n+        out.print(\"started at \" + new Date(status.getStartTime()));\n+        if (!status.stopped()) {\n+          out.println(\" and is still running.\");\n+          return 0;\n+        }\n+\n+        out.println(\" and finished at \" +\n+            new Date(status.getEndTime()).toString() + \".\");\n+        for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n+            status.getStatus().entrySet()) {\n+          if (!result.getValue().isPresent()) {\n+            out.print(\"SUCCESS: \");\n+          } else {\n+            out.print(\"FAILED: \");\n+          }\n+          out.printf(\"Change property %s\\n\\tFrom: \\\"%s\\\"\\n\\tTo: \\\"%s\\\"\\n\",\n+              result.getKey().prop, result.getKey().oldVal,\n+              result.getKey().newVal);\n+          if (result.getValue().isPresent()) {\n+            out.println(\"\\tError: \" + result.getValue().get() + \".\");\n+          }\n+        }\n+      } catch (IOException e) {\n+        err.println(\"DataNode reloading configuration: \" + e + \".\");\n+        return -1;\n+      }\n+    } else {\n+      err.println(\"Node type \" + nodeType + \" does not support reconfiguration.\");\n+      return -1;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  int getReconfigurationStatus(String nodeType, String address,\n      PrintStream out, PrintStream err) throws IOException {\n    if (\"datanode\".equals(nodeType)) {\n      ClientDatanodeProtocol dnProxy \u003d getDataNodeProxy(address);\n      try {\n        ReconfigurationTaskStatus status \u003d dnProxy.getReconfigurationStatus();\n        out.print(\"Reconfiguring status for DataNode[\" + address + \"]: \");\n        if (!status.hasTask()) {\n          out.println(\"no task was found.\");\n          return 0;\n        }\n        out.print(\"started at \" + new Date(status.getStartTime()));\n        if (!status.stopped()) {\n          out.println(\" and is still running.\");\n          return 0;\n        }\n\n        out.println(\" and finished at \" +\n            new Date(status.getEndTime()).toString() + \".\");\n        for (Map.Entry\u003cPropertyChange, Optional\u003cString\u003e\u003e result :\n            status.getStatus().entrySet()) {\n          if (!result.getValue().isPresent()) {\n            out.print(\"SUCCESS: \");\n          } else {\n            out.print(\"FAILED: \");\n          }\n          out.printf(\"Change property %s\\n\\tFrom: \\\"%s\\\"\\n\\tTo: \\\"%s\\\"\\n\",\n              result.getKey().prop, result.getKey().oldVal,\n              result.getKey().newVal);\n          if (result.getValue().isPresent()) {\n            out.println(\"\\tError: \" + result.getValue().get() + \".\");\n          }\n        }\n      } catch (IOException e) {\n        err.println(\"DataNode reloading configuration: \" + e + \".\");\n        return -1;\n      }\n    } else {\n      err.println(\"Node type \" + nodeType + \" does not support reconfiguration.\");\n      return -1;\n    }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
    }
  }
}