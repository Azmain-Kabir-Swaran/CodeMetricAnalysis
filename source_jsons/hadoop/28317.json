{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SQLFederationStateStore.java",
  "functionName": "getSubClusters",
  "functionId": "getSubClusters___subClustersRequest-GetSubClustersInfoRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
  "functionStartLine": 453,
  "functionEndLine": 517,
  "numCommitsSeen": 6,
  "timeTaken": 1251,
  "changeHistory": [
    "75abc9a8e2cf1c7d2c574ede720df59421512be3",
    "5272af8c7eab76d779c621eb0208bf29ffa25613"
  ],
  "changeHistoryShort": {
    "75abc9a8e2cf1c7d2c574ede720df59421512be3": "Ybodychange",
    "5272af8c7eab76d779c621eb0208bf29ffa25613": "Yintroduced"
  },
  "changeHistoryDetails": {
    "75abc9a8e2cf1c7d2c574ede720df59421512be3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5603. Metrics for Federation StateStore. (Ellen Hui via asuresh)\n",
      "commitDate": "21/08/17 10:43 PM",
      "commitName": "75abc9a8e2cf1c7d2c574ede720df59421512be3",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "825108d08a9b49d7c19915624f9167101528cb95",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 20.22,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,65 @@\n   public GetSubClustersInfoResponse getSubClusters(\n       GetSubClustersInfoRequest subClustersRequest) throws YarnException {\n     CallableStatement cstmt \u003d null;\n     Connection conn \u003d null;\n     ResultSet rs \u003d null;\n     List\u003cSubClusterInfo\u003e subClusters \u003d new ArrayList\u003cSubClusterInfo\u003e();\n \n     try {\n       conn \u003d getConnection();\n       cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTERS);\n \n       // Execute the query\n+      long startTime \u003d clock.getTime();\n       rs \u003d cstmt.executeQuery();\n+      long stopTime \u003d clock.getTime();\n \n       while (rs.next()) {\n \n         // Extract the output for each tuple\n         String subClusterName \u003d rs.getString(1);\n         String amRMAddress \u003d rs.getString(2);\n         String clientRMAddress \u003d rs.getString(3);\n         String rmAdminAddress \u003d rs.getString(4);\n         String webAppAddress \u003d rs.getString(5);\n         long lastHeartBeat \u003d rs.getTimestamp(6, utcCalendar).getTime();\n         SubClusterState state \u003d SubClusterState.fromString(rs.getString(7));\n         long lastStartTime \u003d rs.getLong(8);\n         String capability \u003d rs.getString(9);\n \n         SubClusterId subClusterId \u003d SubClusterId.newInstance(subClusterName);\n         SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n             amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n             lastHeartBeat, state, lastStartTime, capability);\n \n+        FederationStateStoreClientMetrics\n+            .succeededStateStoreCall(stopTime - startTime);\n+\n+\n         // Check if the output it is a valid subcluster\n         try {\n           FederationMembershipStateStoreInputValidator\n               .checkSubClusterInfo(subClusterInfo);\n         } catch (FederationStateStoreInvalidInputException e) {\n           String errMsg \u003d\n               \"SubCluster \" + subClusterId.toString() + \" is not valid\";\n           FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n         }\n \n         // Filter the inactive\n         if (!subClustersRequest.getFilterInactiveSubClusters()\n             || subClusterInfo.getState().isActive()) {\n           subClusters.add(subClusterInfo);\n         }\n       }\n \n     } catch (SQLException e) {\n+      FederationStateStoreClientMetrics.failedStateStoreCall();\n       FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n           \"Unable to obtain the information for all the SubClusters \", e);\n     } finally {\n       // Return to the pool the CallableStatement and the Connection\n       FederationStateStoreUtils.returnToPool(LOG, cstmt, conn, rs);\n     }\n     return GetSubClustersInfoResponse.newInstance(subClusters);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClustersInfoResponse getSubClusters(\n      GetSubClustersInfoRequest subClustersRequest) throws YarnException {\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n    ResultSet rs \u003d null;\n    List\u003cSubClusterInfo\u003e subClusters \u003d new ArrayList\u003cSubClusterInfo\u003e();\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTERS);\n\n      // Execute the query\n      long startTime \u003d clock.getTime();\n      rs \u003d cstmt.executeQuery();\n      long stopTime \u003d clock.getTime();\n\n      while (rs.next()) {\n\n        // Extract the output for each tuple\n        String subClusterName \u003d rs.getString(1);\n        String amRMAddress \u003d rs.getString(2);\n        String clientRMAddress \u003d rs.getString(3);\n        String rmAdminAddress \u003d rs.getString(4);\n        String webAppAddress \u003d rs.getString(5);\n        long lastHeartBeat \u003d rs.getTimestamp(6, utcCalendar).getTime();\n        SubClusterState state \u003d SubClusterState.fromString(rs.getString(7));\n        long lastStartTime \u003d rs.getLong(8);\n        String capability \u003d rs.getString(9);\n\n        SubClusterId subClusterId \u003d SubClusterId.newInstance(subClusterName);\n        SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n            amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n            lastHeartBeat, state, lastStartTime, capability);\n\n        FederationStateStoreClientMetrics\n            .succeededStateStoreCall(stopTime - startTime);\n\n\n        // Check if the output it is a valid subcluster\n        try {\n          FederationMembershipStateStoreInputValidator\n              .checkSubClusterInfo(subClusterInfo);\n        } catch (FederationStateStoreInvalidInputException e) {\n          String errMsg \u003d\n              \"SubCluster \" + subClusterId.toString() + \" is not valid\";\n          FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n        }\n\n        // Filter the inactive\n        if (!subClustersRequest.getFilterInactiveSubClusters()\n            || subClusterInfo.getState().isActive()) {\n          subClusters.add(subClusterInfo);\n        }\n      }\n\n    } catch (SQLException e) {\n      FederationStateStoreClientMetrics.failedStateStoreCall();\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to obtain the information for all the SubClusters \", e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn, rs);\n    }\n    return GetSubClustersInfoResponse.newInstance(subClusters);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java",
      "extendedDetails": {}
    },
    "5272af8c7eab76d779c621eb0208bf29ffa25613": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3663. Federation State and Policy Store (DBMS implementation). (Giovanni Matteo Fumarola via curino).\n\n(cherry picked from commit be99c1fe2eb150fabd69902118d65941f82971f6)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "5272af8c7eab76d779c621eb0208bf29ffa25613",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,58 @@\n+  public GetSubClustersInfoResponse getSubClusters(\n+      GetSubClustersInfoRequest subClustersRequest) throws YarnException {\n+    CallableStatement cstmt \u003d null;\n+    Connection conn \u003d null;\n+    ResultSet rs \u003d null;\n+    List\u003cSubClusterInfo\u003e subClusters \u003d new ArrayList\u003cSubClusterInfo\u003e();\n+\n+    try {\n+      conn \u003d getConnection();\n+      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTERS);\n+\n+      // Execute the query\n+      rs \u003d cstmt.executeQuery();\n+\n+      while (rs.next()) {\n+\n+        // Extract the output for each tuple\n+        String subClusterName \u003d rs.getString(1);\n+        String amRMAddress \u003d rs.getString(2);\n+        String clientRMAddress \u003d rs.getString(3);\n+        String rmAdminAddress \u003d rs.getString(4);\n+        String webAppAddress \u003d rs.getString(5);\n+        long lastHeartBeat \u003d rs.getTimestamp(6, utcCalendar).getTime();\n+        SubClusterState state \u003d SubClusterState.fromString(rs.getString(7));\n+        long lastStartTime \u003d rs.getLong(8);\n+        String capability \u003d rs.getString(9);\n+\n+        SubClusterId subClusterId \u003d SubClusterId.newInstance(subClusterName);\n+        SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n+            amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n+            lastHeartBeat, state, lastStartTime, capability);\n+\n+        // Check if the output it is a valid subcluster\n+        try {\n+          FederationMembershipStateStoreInputValidator\n+              .checkSubClusterInfo(subClusterInfo);\n+        } catch (FederationStateStoreInvalidInputException e) {\n+          String errMsg \u003d\n+              \"SubCluster \" + subClusterId.toString() + \" is not valid\";\n+          FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n+        }\n+\n+        // Filter the inactive\n+        if (!subClustersRequest.getFilterInactiveSubClusters()\n+            || subClusterInfo.getState().isActive()) {\n+          subClusters.add(subClusterInfo);\n+        }\n+      }\n+\n+    } catch (SQLException e) {\n+      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n+          \"Unable to obtain the information for all the SubClusters \", e);\n+    } finally {\n+      // Return to the pool the CallableStatement and the Connection\n+      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn, rs);\n+    }\n+    return GetSubClustersInfoResponse.newInstance(subClusters);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetSubClustersInfoResponse getSubClusters(\n      GetSubClustersInfoRequest subClustersRequest) throws YarnException {\n    CallableStatement cstmt \u003d null;\n    Connection conn \u003d null;\n    ResultSet rs \u003d null;\n    List\u003cSubClusterInfo\u003e subClusters \u003d new ArrayList\u003cSubClusterInfo\u003e();\n\n    try {\n      conn \u003d getConnection();\n      cstmt \u003d conn.prepareCall(CALL_SP_GET_SUBCLUSTERS);\n\n      // Execute the query\n      rs \u003d cstmt.executeQuery();\n\n      while (rs.next()) {\n\n        // Extract the output for each tuple\n        String subClusterName \u003d rs.getString(1);\n        String amRMAddress \u003d rs.getString(2);\n        String clientRMAddress \u003d rs.getString(3);\n        String rmAdminAddress \u003d rs.getString(4);\n        String webAppAddress \u003d rs.getString(5);\n        long lastHeartBeat \u003d rs.getTimestamp(6, utcCalendar).getTime();\n        SubClusterState state \u003d SubClusterState.fromString(rs.getString(7));\n        long lastStartTime \u003d rs.getLong(8);\n        String capability \u003d rs.getString(9);\n\n        SubClusterId subClusterId \u003d SubClusterId.newInstance(subClusterName);\n        SubClusterInfo subClusterInfo \u003d SubClusterInfo.newInstance(subClusterId,\n            amRMAddress, clientRMAddress, rmAdminAddress, webAppAddress,\n            lastHeartBeat, state, lastStartTime, capability);\n\n        // Check if the output it is a valid subcluster\n        try {\n          FederationMembershipStateStoreInputValidator\n              .checkSubClusterInfo(subClusterInfo);\n        } catch (FederationStateStoreInvalidInputException e) {\n          String errMsg \u003d\n              \"SubCluster \" + subClusterId.toString() + \" is not valid\";\n          FederationStateStoreUtils.logAndThrowStoreException(LOG, errMsg);\n        }\n\n        // Filter the inactive\n        if (!subClustersRequest.getFilterInactiveSubClusters()\n            || subClusterInfo.getState().isActive()) {\n          subClusters.add(subClusterInfo);\n        }\n      }\n\n    } catch (SQLException e) {\n      FederationStateStoreUtils.logAndThrowRetriableException(LOG,\n          \"Unable to obtain the information for all the SubClusters \", e);\n    } finally {\n      // Return to the pool the CallableStatement and the Connection\n      FederationStateStoreUtils.returnToPool(LOG, cstmt, conn, rs);\n    }\n    return GetSubClustersInfoResponse.newInstance(subClusters);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/store/impl/SQLFederationStateStore.java"
    }
  }
}