{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystem.java",
  "functionName": "checkPath",
  "functionId": "checkPath___path-Path",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
  "functionStartLine": 745,
  "functionEndLine": 778,
  "numCommitsSeen": 188,
  "timeTaken": 5126,
  "changeHistory": [
    "e346e3638c595a512cd582739ff51fb64c3b4950",
    "1611b51a9780d18e76c0e9f9777bfae6ee70df12",
    "4bb572d3366c478924fa95e513858e8a8c793774",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "e346e3638c595a512cd582739ff51fb64c3b4950": "Ybodychange",
    "1611b51a9780d18e76c0e9f9777bfae6ee70df12": "Ybodychange",
    "4bb572d3366c478924fa95e513858e8a8c793774": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e346e3638c595a512cd582739ff51fb64c3b4950": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15691 Add PathCapabilities to FileSystem and FileContext.\n\nContributed by Steve Loughran.\n\nThis complements the StreamCapabilities Interface by allowing applications to probe for a specific path on a specific instance of a FileSystem client\nto offer a specific capability.\n\nThis is intended to allow applications to determine\n\n* Whether a method is implemented before calling it and dealing with UnsupportedOperationException.\n* Whether a specific feature is believed to be available in the remote store.\n\nAs well as a common set of capabilities defined in CommonPathCapabilities,\nfile systems are free to add their own capabilities, prefixed with\n fs. + schema + .\n\nThe plan is to identify and document more capabilities -and for file systems which add new features, for a declaration of the availability of the feature to always be available.\n\nNote\n\n* The remote store is not expected to be checked for the feature;\n  It is more a check of client API and the client\u0027s configuration/knowledge\n  of the state of the remote system.\n* Permissions are not checked.\n\nChange-Id: I80bfebe94f4a8bdad8f3ac055495735b824968f5\n",
      "commitDate": "25/09/19 4:16 AM",
      "commitName": "e346e3638c595a512cd582739ff51fb64c3b4950",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "06/09/19 10:22 AM",
      "commitNameOld": "c92a3e94d80c86199e65735ee5aec4a6f02f50a3",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 18.75,
      "commitsBetweenForRepo": 157,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,34 @@\n   protected void checkPath(Path path) {\n+    Preconditions.checkArgument(path !\u003d null, \"null path\");\n     URI uri \u003d path.toUri();\n     String thatScheme \u003d uri.getScheme();\n     if (thatScheme \u003d\u003d null)                // fs is relative\n       return;\n     URI thisUri \u003d getCanonicalUri();\n     String thisScheme \u003d thisUri.getScheme();\n     //authority and scheme are not case sensitive\n     if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n       String thisAuthority \u003d thisUri.getAuthority();\n       String thatAuthority \u003d uri.getAuthority();\n       if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n           thisAuthority !\u003d null) {                // fs has an authority\n         URI defaultUri \u003d getDefaultUri(getConf());\n         if (thisScheme.equalsIgnoreCase(defaultUri.getScheme())) {\n           uri \u003d defaultUri; // schemes match, so use this uri instead\n         } else {\n           uri \u003d null; // can\u0027t determine auth of the path\n         }\n       }\n       if (uri !\u003d null) {\n         // canonicalize uri before comparing with this fs\n         uri \u003d canonicalizeUri(uri);\n         thatAuthority \u003d uri.getAuthority();\n         if (thisAuthority \u003d\u003d thatAuthority ||       // authorities match\n             (thisAuthority !\u003d null \u0026\u0026\n              thisAuthority.equalsIgnoreCase(thatAuthority)))\n           return;\n       }\n     }\n     throw new IllegalArgumentException(\"Wrong FS: \" + path +\n                                        \", expected: \" + this.getUri());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void checkPath(Path path) {\n    Preconditions.checkArgument(path !\u003d null, \"null path\");\n    URI uri \u003d path.toUri();\n    String thatScheme \u003d uri.getScheme();\n    if (thatScheme \u003d\u003d null)                // fs is relative\n      return;\n    URI thisUri \u003d getCanonicalUri();\n    String thisScheme \u003d thisUri.getScheme();\n    //authority and scheme are not case sensitive\n    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n      String thisAuthority \u003d thisUri.getAuthority();\n      String thatAuthority \u003d uri.getAuthority();\n      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n          thisAuthority !\u003d null) {                // fs has an authority\n        URI defaultUri \u003d getDefaultUri(getConf());\n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme())) {\n          uri \u003d defaultUri; // schemes match, so use this uri instead\n        } else {\n          uri \u003d null; // can\u0027t determine auth of the path\n        }\n      }\n      if (uri !\u003d null) {\n        // canonicalize uri before comparing with this fs\n        uri \u003d canonicalizeUri(uri);\n        thatAuthority \u003d uri.getAuthority();\n        if (thisAuthority \u003d\u003d thatAuthority ||       // authorities match\n            (thisAuthority !\u003d null \u0026\u0026\n             thisAuthority.equalsIgnoreCase(thatAuthority)))\n          return;\n      }\n    }\n    throw new IllegalArgumentException(\"Wrong FS: \" + path +\n                                       \", expected: \" + this.getUri());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "1611b51a9780d18e76c0e9f9777bfae6ee70df12": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9150. Avoid unnecessary DNS resolution attempts for logical URIs. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1462303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/03/13 1:58 PM",
      "commitName": "1611b51a9780d18e76c0e9f9777bfae6ee70df12",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "25/02/13 4:10 PM",
      "commitNameOld": "4840775e3d1485af3983f63ece2fc394b89563ef",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 30.87,
      "commitsBetweenForRepo": 182,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   protected void checkPath(Path path) {\n     URI uri \u003d path.toUri();\n     String thatScheme \u003d uri.getScheme();\n     if (thatScheme \u003d\u003d null)                // fs is relative\n       return;\n     URI thisUri \u003d getCanonicalUri();\n     String thisScheme \u003d thisUri.getScheme();\n     //authority and scheme are not case sensitive\n     if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n       String thisAuthority \u003d thisUri.getAuthority();\n       String thatAuthority \u003d uri.getAuthority();\n       if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n           thisAuthority !\u003d null) {                // fs has an authority\n         URI defaultUri \u003d getDefaultUri(getConf());\n         if (thisScheme.equalsIgnoreCase(defaultUri.getScheme())) {\n           uri \u003d defaultUri; // schemes match, so use this uri instead\n         } else {\n           uri \u003d null; // can\u0027t determine auth of the path\n         }\n       }\n       if (uri !\u003d null) {\n         // canonicalize uri before comparing with this fs\n-        uri \u003d NetUtils.getCanonicalUri(uri, getDefaultPort());\n+        uri \u003d canonicalizeUri(uri);\n         thatAuthority \u003d uri.getAuthority();\n         if (thisAuthority \u003d\u003d thatAuthority ||       // authorities match\n             (thisAuthority !\u003d null \u0026\u0026\n              thisAuthority.equalsIgnoreCase(thatAuthority)))\n           return;\n       }\n     }\n     throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                        \", expected: \"+this.getUri());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void checkPath(Path path) {\n    URI uri \u003d path.toUri();\n    String thatScheme \u003d uri.getScheme();\n    if (thatScheme \u003d\u003d null)                // fs is relative\n      return;\n    URI thisUri \u003d getCanonicalUri();\n    String thisScheme \u003d thisUri.getScheme();\n    //authority and scheme are not case sensitive\n    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n      String thisAuthority \u003d thisUri.getAuthority();\n      String thatAuthority \u003d uri.getAuthority();\n      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n          thisAuthority !\u003d null) {                // fs has an authority\n        URI defaultUri \u003d getDefaultUri(getConf());\n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme())) {\n          uri \u003d defaultUri; // schemes match, so use this uri instead\n        } else {\n          uri \u003d null; // can\u0027t determine auth of the path\n        }\n      }\n      if (uri !\u003d null) {\n        // canonicalize uri before comparing with this fs\n        uri \u003d canonicalizeUri(uri);\n        thatAuthority \u003d uri.getAuthority();\n        if (thisAuthority \u003d\u003d thatAuthority ||       // authorities match\n            (thisAuthority !\u003d null \u0026\u0026\n             thisAuthority.equalsIgnoreCase(thatAuthority)))\n          return;\n      }\n    }\n    throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                       \", expected: \"+this.getUri());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "4bb572d3366c478924fa95e513858e8a8c793774": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7808. Port HADOOP-7510 - Add configurable option to use original hostname in token instead of IP to allow server IP change. Contributed by Daryn Sharp.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 10:41 AM",
      "commitName": "4bb572d3366c478924fa95e513858e8a8c793774",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "03/01/12 10:58 AM",
      "commitNameOld": "7ee3e072b8ede446512137d623158edad21b4c46",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 1.99,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,33 @@\n   protected void checkPath(Path path) {\n     URI uri \u003d path.toUri();\n-    if (uri.getScheme() \u003d\u003d null)                // fs is relative \n-      return;\n-    String thisScheme \u003d this.getUri().getScheme();\n     String thatScheme \u003d uri.getScheme();\n-    String thisAuthority \u003d this.getUri().getAuthority();\n-    String thatAuthority \u003d uri.getAuthority();\n+    if (thatScheme \u003d\u003d null)                // fs is relative\n+      return;\n+    URI thisUri \u003d getCanonicalUri();\n+    String thisScheme \u003d thisUri.getScheme();\n     //authority and scheme are not case sensitive\n     if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n-      if (thisAuthority \u003d\u003d thatAuthority ||       // \u0026 authorities match\n-          (thisAuthority !\u003d null \u0026\u0026 \n-           thisAuthority.equalsIgnoreCase(thatAuthority)))\n-        return;\n-\n+      String thisAuthority \u003d thisUri.getAuthority();\n+      String thatAuthority \u003d uri.getAuthority();\n       if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n           thisAuthority !\u003d null) {                // fs has an authority\n-        URI defaultUri \u003d getDefaultUri(getConf()); // \u0026 is the conf default \n-        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n-            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n-          return;\n-        try {                                     // or the default fs\u0027s uri\n-          defaultUri \u003d get(getConf()).getUri();\n-        } catch (IOException e) {\n-          throw new RuntimeException(e);\n+        URI defaultUri \u003d getDefaultUri(getConf());\n+        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme())) {\n+          uri \u003d defaultUri; // schemes match, so use this uri instead\n+        } else {\n+          uri \u003d null; // can\u0027t determine auth of the path\n         }\n-        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n-            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n+      }\n+      if (uri !\u003d null) {\n+        // canonicalize uri before comparing with this fs\n+        uri \u003d NetUtils.getCanonicalUri(uri, getDefaultPort());\n+        thatAuthority \u003d uri.getAuthority();\n+        if (thisAuthority \u003d\u003d thatAuthority ||       // authorities match\n+            (thisAuthority !\u003d null \u0026\u0026\n+             thisAuthority.equalsIgnoreCase(thatAuthority)))\n           return;\n       }\n     }\n     throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                        \", expected: \"+this.getUri());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void checkPath(Path path) {\n    URI uri \u003d path.toUri();\n    String thatScheme \u003d uri.getScheme();\n    if (thatScheme \u003d\u003d null)                // fs is relative\n      return;\n    URI thisUri \u003d getCanonicalUri();\n    String thisScheme \u003d thisUri.getScheme();\n    //authority and scheme are not case sensitive\n    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n      String thisAuthority \u003d thisUri.getAuthority();\n      String thatAuthority \u003d uri.getAuthority();\n      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n          thisAuthority !\u003d null) {                // fs has an authority\n        URI defaultUri \u003d getDefaultUri(getConf());\n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme())) {\n          uri \u003d defaultUri; // schemes match, so use this uri instead\n        } else {\n          uri \u003d null; // can\u0027t determine auth of the path\n        }\n      }\n      if (uri !\u003d null) {\n        // canonicalize uri before comparing with this fs\n        uri \u003d NetUtils.getCanonicalUri(uri, getDefaultPort());\n        thatAuthority \u003d uri.getAuthority();\n        if (thisAuthority \u003d\u003d thatAuthority ||       // authorities match\n            (thisAuthority !\u003d null \u0026\u0026\n             thisAuthority.equalsIgnoreCase(thatAuthority)))\n          return;\n      }\n    }\n    throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                       \", expected: \"+this.getUri());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void checkPath(Path path) {\n    URI uri \u003d path.toUri();\n    if (uri.getScheme() \u003d\u003d null)                // fs is relative \n      return;\n    String thisScheme \u003d this.getUri().getScheme();\n    String thatScheme \u003d uri.getScheme();\n    String thisAuthority \u003d this.getUri().getAuthority();\n    String thatAuthority \u003d uri.getAuthority();\n    //authority and scheme are not case sensitive\n    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n      if (thisAuthority \u003d\u003d thatAuthority ||       // \u0026 authorities match\n          (thisAuthority !\u003d null \u0026\u0026 \n           thisAuthority.equalsIgnoreCase(thatAuthority)))\n        return;\n\n      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n          thisAuthority !\u003d null) {                // fs has an authority\n        URI defaultUri \u003d getDefaultUri(getConf()); // \u0026 is the conf default \n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n        try {                                     // or the default fs\u0027s uri\n          defaultUri \u003d get(getConf()).getUri();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n      }\n    }\n    throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                       \", expected: \"+this.getUri());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void checkPath(Path path) {\n    URI uri \u003d path.toUri();\n    if (uri.getScheme() \u003d\u003d null)                // fs is relative \n      return;\n    String thisScheme \u003d this.getUri().getScheme();\n    String thatScheme \u003d uri.getScheme();\n    String thisAuthority \u003d this.getUri().getAuthority();\n    String thatAuthority \u003d uri.getAuthority();\n    //authority and scheme are not case sensitive\n    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n      if (thisAuthority \u003d\u003d thatAuthority ||       // \u0026 authorities match\n          (thisAuthority !\u003d null \u0026\u0026 \n           thisAuthority.equalsIgnoreCase(thatAuthority)))\n        return;\n\n      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n          thisAuthority !\u003d null) {                // fs has an authority\n        URI defaultUri \u003d getDefaultUri(getConf()); // \u0026 is the conf default \n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n        try {                                     // or the default fs\u0027s uri\n          defaultUri \u003d get(getConf()).getUri();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n      }\n    }\n    throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                       \", expected: \"+this.getUri());\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void checkPath(Path path) {\n    URI uri \u003d path.toUri();\n    if (uri.getScheme() \u003d\u003d null)                // fs is relative \n      return;\n    String thisScheme \u003d this.getUri().getScheme();\n    String thatScheme \u003d uri.getScheme();\n    String thisAuthority \u003d this.getUri().getAuthority();\n    String thatAuthority \u003d uri.getAuthority();\n    //authority and scheme are not case sensitive\n    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n      if (thisAuthority \u003d\u003d thatAuthority ||       // \u0026 authorities match\n          (thisAuthority !\u003d null \u0026\u0026 \n           thisAuthority.equalsIgnoreCase(thatAuthority)))\n        return;\n\n      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n          thisAuthority !\u003d null) {                // fs has an authority\n        URI defaultUri \u003d getDefaultUri(getConf()); // \u0026 is the conf default \n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n        try {                                     // or the default fs\u0027s uri\n          defaultUri \u003d get(getConf()).getUri();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n      }\n    }\n    throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                       \", expected: \"+this.getUri());\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/FileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileSystem.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,34 @@\n+  protected void checkPath(Path path) {\n+    URI uri \u003d path.toUri();\n+    if (uri.getScheme() \u003d\u003d null)                // fs is relative \n+      return;\n+    String thisScheme \u003d this.getUri().getScheme();\n+    String thatScheme \u003d uri.getScheme();\n+    String thisAuthority \u003d this.getUri().getAuthority();\n+    String thatAuthority \u003d uri.getAuthority();\n+    //authority and scheme are not case sensitive\n+    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n+      if (thisAuthority \u003d\u003d thatAuthority ||       // \u0026 authorities match\n+          (thisAuthority !\u003d null \u0026\u0026 \n+           thisAuthority.equalsIgnoreCase(thatAuthority)))\n+        return;\n+\n+      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n+          thisAuthority !\u003d null) {                // fs has an authority\n+        URI defaultUri \u003d getDefaultUri(getConf()); // \u0026 is the conf default \n+        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n+            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n+          return;\n+        try {                                     // or the default fs\u0027s uri\n+          defaultUri \u003d get(getConf()).getUri();\n+        } catch (IOException e) {\n+          throw new RuntimeException(e);\n+        }\n+        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n+            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n+          return;\n+      }\n+    }\n+    throw new IllegalArgumentException(\"Wrong FS: \"+path+\n+                                       \", expected: \"+this.getUri());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void checkPath(Path path) {\n    URI uri \u003d path.toUri();\n    if (uri.getScheme() \u003d\u003d null)                // fs is relative \n      return;\n    String thisScheme \u003d this.getUri().getScheme();\n    String thatScheme \u003d uri.getScheme();\n    String thisAuthority \u003d this.getUri().getAuthority();\n    String thatAuthority \u003d uri.getAuthority();\n    //authority and scheme are not case sensitive\n    if (thisScheme.equalsIgnoreCase(thatScheme)) {// schemes match\n      if (thisAuthority \u003d\u003d thatAuthority ||       // \u0026 authorities match\n          (thisAuthority !\u003d null \u0026\u0026 \n           thisAuthority.equalsIgnoreCase(thatAuthority)))\n        return;\n\n      if (thatAuthority \u003d\u003d null \u0026\u0026                // path\u0027s authority is null\n          thisAuthority !\u003d null) {                // fs has an authority\n        URI defaultUri \u003d getDefaultUri(getConf()); // \u0026 is the conf default \n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n        try {                                     // or the default fs\u0027s uri\n          defaultUri \u003d get(getConf()).getUri();\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        if (thisScheme.equalsIgnoreCase(defaultUri.getScheme()) \u0026\u0026\n            thisAuthority.equalsIgnoreCase(defaultUri.getAuthority()))\n          return;\n      }\n    }\n    throw new IllegalArgumentException(\"Wrong FS: \"+path+\n                                       \", expected: \"+this.getUri());\n  }",
      "path": "src/java/org/apache/hadoop/fs/FileSystem.java"
    }
  }
}