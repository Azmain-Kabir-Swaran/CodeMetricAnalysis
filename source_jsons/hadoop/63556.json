{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Resource.java",
  "functionName": "compareTo",
  "functionId": "compareTo___other-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
  "functionStartLine": 432,
  "functionEndLine": 464,
  "numCommitsSeen": 49,
  "timeTaken": 10585,
  "changeHistory": [
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
    "a062374c396ba2bddbbe4d3806cc2896293b4e0b",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "2fd7f2823074cbfbcc083a6f66edff62c7a131f0",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": "Ybodychange",
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": "Ybodychange",
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": "Ybodychange",
    "a062374c396ba2bddbbe4d3806cc2896293b4e0b": "Ymovefromfile",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "2fd7f2823074cbfbcc083a6f66edff62c7a131f0": "Yfilerename",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6909. Use LightWeightedResource when number of resource types more than two. (Sunil G via wangda)\n\nChange-Id: I90e021c5dea7abd9ec6bd73b2287c8adebe14595\n",
      "commitDate": "09/11/17 2:51 PM",
      "commitName": "dd07038ffae33a5e73eb331477d43eaf3f4c2aaa",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/11/17 6:55 PM",
      "commitNameOld": "1700adc6f7e0ec9f855f554cd0d470a8f04e9c51",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 6.87,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public int compareTo(Resource other) {\n     ResourceInformation[] otherResources \u003d other.getResources();\n \n     int arrLenThis \u003d this.resources.length;\n     int arrLenOther \u003d otherResources.length;\n \n     // compare memory and vcores first(in that order) to preserve\n-    // existing behaviour\n+    // existing behavior.\n     for (int i \u003d 0; i \u003c arrLenThis; i++) {\n       ResourceInformation otherEntry;\n       try {\n         otherEntry \u003d otherResources[i];\n       } catch (ArrayIndexOutOfBoundsException e) {\n         // For two vectors with different size and same prefix. Shorter vector\n         // goes first.\n         return 1;\n       }\n       ResourceInformation entry \u003d resources[i];\n \n       long diff \u003d entry.compareTo(otherEntry);\n       if (diff \u003e 0) {\n         return 1;\n       } else if (diff \u003c 0) {\n         return -1;\n       }\n     }\n \n     if (arrLenThis \u003c arrLenOther) {\n       return -1;\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    ResourceInformation[] otherResources \u003d other.getResources();\n\n    int arrLenThis \u003d this.resources.length;\n    int arrLenOther \u003d otherResources.length;\n\n    // compare memory and vcores first(in that order) to preserve\n    // existing behavior.\n    for (int i \u003d 0; i \u003c arrLenThis; i++) {\n      ResourceInformation otherEntry;\n      try {\n        otherEntry \u003d otherResources[i];\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // For two vectors with different size and same prefix. Shorter vector\n        // goes first.\n        return 1;\n      }\n      ResourceInformation entry \u003d resources[i];\n\n      long diff \u003d entry.compareTo(otherEntry);\n      if (diff \u003e 0) {\n        return 1;\n      } else if (diff \u003c 0) {\n        return -1;\n      }\n    }\n\n    if (arrLenThis \u003c arrLenOther) {\n      return -1;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "a6989af1d91d8b6795862c39d154823f8488c8de",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,33 @@\n   public int compareTo(Resource other) {\n-    ResourceInformation[] thisResources \u003d this.getResources();\n     ResourceInformation[] otherResources \u003d other.getResources();\n \n+    int arrLenThis \u003d this.resources.length;\n+    int arrLenOther \u003d otherResources.length;\n+\n     // compare memory and vcores first(in that order) to preserve\n     // existing behaviour\n-    long diff \u003d this.getMemorySize() - other.getMemorySize();\n-    if (diff \u003d\u003d 0) {\n-      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n-    }\n-    if (diff \u003d\u003d 0) {\n-      diff \u003d thisResources.length - otherResources.length;\n-      if (diff \u003d\u003d 0) {\n-        int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n-        for (int i \u003d 0; i \u003c maxLength; i++) {\n-          // For memory and vcores, we can skip the loop as it\u0027s already\n-          // compared.\n-          if (i \u003c 2) {\n-            continue;\n-          }\n+    for (int i \u003d 0; i \u003c arrLenThis; i++) {\n+      ResourceInformation otherEntry;\n+      try {\n+        otherEntry \u003d otherResources[i];\n+      } catch (ArrayIndexOutOfBoundsException e) {\n+        // For two vectors with different size and same prefix. Shorter vector\n+        // goes first.\n+        return 1;\n+      }\n+      ResourceInformation entry \u003d resources[i];\n \n-          ResourceInformation entry \u003d thisResources[i];\n-          ResourceInformation otherEntry \u003d otherResources[i];\n-          if (entry.getName().equals(otherEntry.getName())) {\n-            diff \u003d entry.compareTo(otherEntry);\n-            if (diff !\u003d 0) {\n-              break;\n-            }\n-          }\n-        }\n+      long diff \u003d entry.compareTo(otherEntry);\n+      if (diff \u003e 0) {\n+        return 1;\n+      } else if (diff \u003c 0) {\n+        return -1;\n       }\n     }\n-    return Long.compare(diff, 0);\n+\n+    if (arrLenThis \u003c arrLenOther) {\n+      return -1;\n+    }\n+\n+    return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    ResourceInformation[] otherResources \u003d other.getResources();\n\n    int arrLenThis \u003d this.resources.length;\n    int arrLenOther \u003d otherResources.length;\n\n    // compare memory and vcores first(in that order) to preserve\n    // existing behaviour\n    for (int i \u003d 0; i \u003c arrLenThis; i++) {\n      ResourceInformation otherEntry;\n      try {\n        otherEntry \u003d otherResources[i];\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // For two vectors with different size and same prefix. Shorter vector\n        // goes first.\n        return 1;\n      }\n      ResourceInformation entry \u003d resources[i];\n\n      long diff \u003d entry.compareTo(otherEntry);\n      if (diff \u003e 0) {\n        return 1;\n      } else if (diff \u003c 0) {\n        return -1;\n      }\n    }\n\n    if (arrLenThis \u003c arrLenOther) {\n      return -1;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
      "extendedDetails": {}
    },
    "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6788. [YARN-3926] Improve performance of resource profile branch\n(Contributed by Sunil Govindan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "3aeaafecb823ef6c175ea5d0d9cb726faacaf32d",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "ca2808d8bbe49766029e5dba88ff863f6c993287",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public int compareTo(Resource other) {\n-    Map\u003cString, ResourceInformation\u003e thisResources, otherResources;\n-    thisResources \u003d this.getResources();\n-    otherResources \u003d other.getResources();\n-    long diff \u003d thisResources.size() - otherResources.size();\n+    ResourceInformation[] thisResources \u003d this.getResources();\n+    ResourceInformation[] otherResources \u003d other.getResources();\n+\n+    // compare memory and vcores first(in that order) to preserve\n+    // existing behaviour\n+    long diff \u003d this.getMemorySize() - other.getMemorySize();\n     if (diff \u003d\u003d 0) {\n-      // compare memory and vcores first(in that order) to preserve\n-      // existing behaviour\n-      if (thisResources.keySet().equals(otherResources.keySet())) {\n-        diff \u003d this.getMemorySize() - other.getMemorySize();\n-        if (diff \u003d\u003d 0) {\n-          diff \u003d this.getVirtualCores() - other.getVirtualCores();\n-        }\n-        if (diff \u003d\u003d 0) {\n-          for (Map.Entry\u003cString, ResourceInformation\u003e entry : thisResources\n-              .entrySet()) {\n-            if (entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())\n-                || entry.getKey()\n-                .equals(ResourceInformation.VCORES.getName())) {\n-              continue;\n-            }\n-            diff \u003d\n-                entry.getValue().compareTo(otherResources.get(entry.getKey()));\n+      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n+    }\n+    if (diff \u003d\u003d 0) {\n+      diff \u003d thisResources.length - otherResources.length;\n+      if (diff \u003d\u003d 0) {\n+        int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n+        for (int i \u003d 0; i \u003c maxLength; i++) {\n+          // For memory and vcores, we can skip the loop as it\u0027s already\n+          // compared.\n+          if (i \u003c 2) {\n+            continue;\n+          }\n+\n+          ResourceInformation entry \u003d thisResources[i];\n+          ResourceInformation otherEntry \u003d otherResources[i];\n+          if (entry.getName().equals(otherEntry.getName())) {\n+            diff \u003d entry.compareTo(otherEntry);\n             if (diff !\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n     }\n     return Long.compare(diff, 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    ResourceInformation[] thisResources \u003d this.getResources();\n    ResourceInformation[] otherResources \u003d other.getResources();\n\n    // compare memory and vcores first(in that order) to preserve\n    // existing behaviour\n    long diff \u003d this.getMemorySize() - other.getMemorySize();\n    if (diff \u003d\u003d 0) {\n      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n    }\n    if (diff \u003d\u003d 0) {\n      diff \u003d thisResources.length - otherResources.length;\n      if (diff \u003d\u003d 0) {\n        int maxLength \u003d ResourceUtils.getResourceTypesArray().length;\n        for (int i \u003d 0; i \u003c maxLength; i++) {\n          // For memory and vcores, we can skip the loop as it\u0027s already\n          // compared.\n          if (i \u003c 2) {\n            continue;\n          }\n\n          ResourceInformation entry \u003d thisResources[i];\n          ResourceInformation otherEntry \u003d otherResources[i];\n          if (entry.getName().equals(otherEntry.getName())) {\n            diff \u003d entry.compareTo(otherEntry);\n            if (diff !\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n    }\n    return Long.compare(diff, 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
      "extendedDetails": {}
    },
    "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5242. Update DominantResourceCalculator to consider all resource types in calculations. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "9e4ba6aff595b7a5b53d016c97c8334e10f1f2cb",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n   public int compareTo(Resource other) {\n     Map\u003cString, ResourceInformation\u003e thisResources, otherResources;\n     thisResources \u003d this.getResources();\n     otherResources \u003d other.getResources();\n     long diff \u003d thisResources.size() - otherResources.size();\n     if (diff \u003d\u003d 0) {\n+      // compare memory and vcores first(in that order) to preserve\n+      // existing behaviour\n       if (thisResources.keySet().equals(otherResources.keySet())) {\n         diff \u003d this.getMemorySize() - other.getMemorySize();\n         if (diff \u003d\u003d 0) {\n           diff \u003d this.getVirtualCores() - other.getVirtualCores();\n         }\n         if (diff \u003d\u003d 0) {\n           for (Map.Entry\u003cString, ResourceInformation\u003e entry : thisResources\n               .entrySet()) {\n+            if (entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())\n+                || entry.getKey()\n+                .equals(ResourceInformation.VCORES.getName())) {\n+              continue;\n+            }\n             diff \u003d\n                 entry.getValue().compareTo(otherResources.get(entry.getKey()));\n             if (diff !\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n     }\n     return Long.compare(diff, 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    Map\u003cString, ResourceInformation\u003e thisResources, otherResources;\n    thisResources \u003d this.getResources();\n    otherResources \u003d other.getResources();\n    long diff \u003d thisResources.size() - otherResources.size();\n    if (diff \u003d\u003d 0) {\n      // compare memory and vcores first(in that order) to preserve\n      // existing behaviour\n      if (thisResources.keySet().equals(otherResources.keySet())) {\n        diff \u003d this.getMemorySize() - other.getMemorySize();\n        if (diff \u003d\u003d 0) {\n          diff \u003d this.getVirtualCores() - other.getVirtualCores();\n        }\n        if (diff \u003d\u003d 0) {\n          for (Map.Entry\u003cString, ResourceInformation\u003e entry : thisResources\n              .entrySet()) {\n            if (entry.getKey().equals(ResourceInformation.MEMORY_MB.getName())\n                || entry.getKey()\n                .equals(ResourceInformation.VCORES.getName())) {\n              continue;\n            }\n            diff \u003d\n                entry.getValue().compareTo(otherResources.get(entry.getKey()));\n            if (diff !\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n    }\n    return Long.compare(diff, 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
      "extendedDetails": {}
    },
    "1bbab7c1570a2438b2fa6da70397dd1d5211a137": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4081. Add support for multiple resource types in the Resource class. (Varun Vasudev via wangda)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "1bbab7c1570a2438b2fa6da70397dd1d5211a137",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "08/06/17 10:08 AM",
      "commitNameOld": "a062374c396ba2bddbbe4d3806cc2896293b4e0b",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 95.97,
      "commitsBetweenForRepo": 641,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,25 @@\n   public int compareTo(Resource other) {\n-    long diff \u003d this.getMemorySize() - other.getMemorySize();\n+    Map\u003cString, ResourceInformation\u003e thisResources, otherResources;\n+    thisResources \u003d this.getResources();\n+    otherResources \u003d other.getResources();\n+    long diff \u003d thisResources.size() - otherResources.size();\n     if (diff \u003d\u003d 0) {\n-      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n+      if (thisResources.keySet().equals(otherResources.keySet())) {\n+        diff \u003d this.getMemorySize() - other.getMemorySize();\n+        if (diff \u003d\u003d 0) {\n+          diff \u003d this.getVirtualCores() - other.getVirtualCores();\n+        }\n+        if (diff \u003d\u003d 0) {\n+          for (Map.Entry\u003cString, ResourceInformation\u003e entry : thisResources\n+              .entrySet()) {\n+            diff \u003d\n+                entry.getValue().compareTo(otherResources.get(entry.getKey()));\n+            if (diff !\u003d 0) {\n+              break;\n+            }\n+          }\n+        }\n+      }\n     }\n-    return diff \u003d\u003d 0 ? 0 : (diff \u003e 0 ? 1 : -1);\n+    return Long.compare(diff, 0);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    Map\u003cString, ResourceInformation\u003e thisResources, otherResources;\n    thisResources \u003d this.getResources();\n    otherResources \u003d other.getResources();\n    long diff \u003d thisResources.size() - otherResources.size();\n    if (diff \u003d\u003d 0) {\n      if (thisResources.keySet().equals(otherResources.keySet())) {\n        diff \u003d this.getMemorySize() - other.getMemorySize();\n        if (diff \u003d\u003d 0) {\n          diff \u003d this.getVirtualCores() - other.getVirtualCores();\n        }\n        if (diff \u003d\u003d 0) {\n          for (Map.Entry\u003cString, ResourceInformation\u003e entry : thisResources\n              .entrySet()) {\n            diff \u003d\n                entry.getValue().compareTo(otherResources.get(entry.getKey()));\n            if (diff !\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n    }\n    return Long.compare(diff, 0);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
      "extendedDetails": {}
    },
    "a062374c396ba2bddbbe4d3806cc2896293b4e0b": {
      "type": "Ymovefromfile",
      "commitMessage": "YARN-6679. Reduce Resource instance overhead via non-PBImpl\n(Contributed by Daryn Sharp via Daniel Templeton)\n",
      "commitDate": "08/06/17 10:08 AM",
      "commitName": "a062374c396ba2bddbbe4d3806cc2896293b4e0b",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "07/06/17 3:52 PM",
      "commitNameOld": "5672ae7b37ce75086a1cb5bb9a388288fc913eb7",
      "commitAuthorOld": "John Zhuge",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int compareTo(Resource other) {\n    long diff \u003d this.getMemorySize() - other.getMemorySize();\n    if (diff \u003d\u003d 0) {\n      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n    }\n    return diff \u003d\u003d 0 ? 0 : (diff \u003e 0 ? 1 : -1);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/Resource.java",
        "oldMethodName": "compareTo",
        "newMethodName": "compareTo"
      }
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "18/06/13 12:36 AM",
      "commitNameOld": "2fd7f2823074cbfbcc083a6f66edff62c7a131f0",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1076.35,
      "commitsBetweenForRepo": 8022,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,7 @@\n   public int compareTo(Resource other) {\n-    int diff \u003d this.getMemory() - other.getMemory();\n+    long diff \u003d this.getMemorySize() - other.getMemorySize();\n     if (diff \u003d\u003d 0) {\n       diff \u003d this.getVirtualCores() - other.getVirtualCores();\n     }\n-    return diff;\n+    return diff \u003d\u003d 0 ? 0 : (diff \u003e 0 ? 1 : -1);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    long diff \u003d this.getMemorySize() - other.getMemorySize();\n    if (diff \u003d\u003d 0) {\n      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n    }\n    return diff \u003d\u003d 0 ? 0 : (diff \u003e 0 ? 1 : -1);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "2fd7f2823074cbfbcc083a6f66edff62c7a131f0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-846.  Move pb Impl classes from yarn-api to yarn-common. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494052 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 12:36 AM",
      "commitName": "2fd7f2823074cbfbcc083a6f66edff62c7a131f0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 11:34 PM",
      "commitNameOld": "6451288704922576e75dd1597f5fd0ef09ab4f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int compareTo(Resource other) {\n    int diff \u003d this.getMemory() - other.getMemory();\n    if (diff \u003d\u003d 0) {\n      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n    }\n    return diff;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java"
      }
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 153.99,
      "commitsBetweenForRepo": 815,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,3 +1,7 @@\n   public int compareTo(Resource other) {\n-    return this.getMemory() - other.getMemory();\n+    int diff \u003d this.getMemory() - other.getMemory();\n+    if (diff \u003d\u003d 0) {\n+      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n+    }\n+    return diff;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    int diff \u003d this.getMemory() - other.getMemory();\n    if (diff \u003d\u003d 0) {\n      diff \u003d this.getVirtualCores() - other.getVirtualCores();\n    }\n    return diff;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int compareTo(Resource other) {\n    return this.getMemory() - other.getMemory();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int compareTo(Resource other) {\n    return this.getMemory() - other.getMemory();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,3 @@\n+  public int compareTo(Resource other) {\n+    return this.getMemory() - other.getMemory();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int compareTo(Resource other) {\n    return this.getMemory() - other.getMemory();\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-api/src/main/java/org/apache/hadoop/yarn/api/records/impl/pb/ResourcePBImpl.java"
    }
  }
}