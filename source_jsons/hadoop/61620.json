{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DominantResourceCalculator.java",
  "functionName": "divide",
  "functionId": "divide___clusterResource-Resource__numerator-Resource__denominator-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
  "functionStartLine": 363,
  "functionEndLine": 379,
  "numCommitsSeen": 37,
  "timeTaken": 2943,
  "changeHistory": [
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
    "a0030c8c6f5489d8285632a651394b2b2320255c",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0"
  ],
  "changeHistoryShort": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": "Ybodychange",
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": "Ybodychange",
    "a0030c8c6f5489d8285632a651394b2b2320255c": "Ybodychange",
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0921b706f7f80c40e061d2c0f8c8b2e4910071e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9037. [CSI] Ignore volume resource in resource calculators based on tags. Contributed by Sunil Govindan.\n",
      "commitDate": "07/01/19 10:30 PM",
      "commitName": "0921b706f7f80c40e061d2c0f8c8b2e4910071e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/12/18 3:16 PM",
      "commitNameOld": "912b1f9d64a61ef2663d95e2b4f286e6ee8d5ff9",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   public float divide(Resource clusterResource,\n       Resource numerator, Resource denominator) {\n-    int nKnownResourceTypes \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n+    int nKnownResourceTypes \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n     ResourceInformation[] clusterRes \u003d clusterResource.getResources();\n     // We have to provide the calculateShares() method with somewhere to store\n     // the shares. We don\u0027t actually need these shares afterwards.\n     double[] numeratorShares \u003d new double[nKnownResourceTypes];\n     double[] denominatorShares \u003d new double[nKnownResourceTypes];\n     // We also have to provide a place for calculateShares() to store the max\n     // shares so that we can use them.\n     double[] max \u003d new double[2];\n \n     calculateShares(clusterRes, numerator, denominator, numeratorShares,\n         denominatorShares, max);\n \n     return (float) (max[0] / max[1]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float divide(Resource clusterResource,\n      Resource numerator, Resource denominator) {\n    int nKnownResourceTypes \u003d ResourceUtils.getNumberOfCountableResourceTypes();\n    ResourceInformation[] clusterRes \u003d clusterResource.getResources();\n    // We have to provide the calculateShares() method with somewhere to store\n    // the shares. We don\u0027t actually need these shares afterwards.\n    double[] numeratorShares \u003d new double[nKnownResourceTypes];\n    double[] denominatorShares \u003d new double[nKnownResourceTypes];\n    // We also have to provide a place for calculateShares() to store the max\n    // shares so that we can use them.\n    double[] max \u003d new double[2];\n\n    calculateShares(clusterRes, numerator, denominator, numeratorShares,\n        denominatorShares, max);\n\n    return (float) (max[0] / max[1]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "bf2b687412f9a830ec4834477ccf25dbe76fddcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7136. Additional Performance Improvement for Resource Profile Feature\n(Contributed by Wangda Tan via Daniel Templeton)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "bf2b687412f9a830ec4834477ccf25dbe76fddcd",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,17 @@\n   public float divide(Resource clusterResource,\n       Resource numerator, Resource denominator) {\n+    int nKnownResourceTypes \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n     ResourceInformation[] clusterRes \u003d clusterResource.getResources();\n     // We have to provide the calculateShares() method with somewhere to store\n     // the shares. We don\u0027t actually need these shares afterwards.\n-    double[] numeratorShares \u003d new double[clusterRes.length];\n-    double[] denominatorShares \u003d new double[clusterRes.length];\n+    double[] numeratorShares \u003d new double[nKnownResourceTypes];\n+    double[] denominatorShares \u003d new double[nKnownResourceTypes];\n     // We also have to provide a place for calculateShares() to store the max\n     // shares so that we can use them.\n     double[] max \u003d new double[2];\n \n     calculateShares(clusterRes, numerator, denominator, numeratorShares,\n         denominatorShares, max);\n \n     return (float) (max[0] / max[1]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float divide(Resource clusterResource,\n      Resource numerator, Resource denominator) {\n    int nKnownResourceTypes \u003d ResourceUtils.getNumberOfKnownResourceTypes();\n    ResourceInformation[] clusterRes \u003d clusterResource.getResources();\n    // We have to provide the calculateShares() method with somewhere to store\n    // the shares. We don\u0027t actually need these shares afterwards.\n    double[] numeratorShares \u003d new double[nKnownResourceTypes];\n    double[] denominatorShares \u003d new double[nKnownResourceTypes];\n    // We also have to provide a place for calculateShares() to store the max\n    // shares so that we can use them.\n    double[] max \u003d new double[2];\n\n    calculateShares(clusterRes, numerator, denominator, numeratorShares,\n        denominatorShares, max);\n\n    return (float) (max[0] / max[1]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "a0030c8c6f5489d8285632a651394b2b2320255c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6610. [YARN-3926] DominantResourceCalculator#getResourceAsValue dominant param is updated to handle multiple resources. Contributed by Daniel Templeton.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "a0030c8c6f5489d8285632a651394b2b2320255c",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "2b51b262aba0191b80dc93799574c0b959cb4f4e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,16 @@\n   public float divide(Resource clusterResource,\n       Resource numerator, Resource denominator) {\n-    return\n-        getResourceAsValue(clusterResource, numerator, true) /\n-        getResourceAsValue(clusterResource, denominator, true);\n+    ResourceInformation[] clusterRes \u003d clusterResource.getResources();\n+    // We have to provide the calculateShares() method with somewhere to store\n+    // the shares. We don\u0027t actually need these shares afterwards.\n+    double[] numeratorShares \u003d new double[clusterRes.length];\n+    double[] denominatorShares \u003d new double[clusterRes.length];\n+    // We also have to provide a place for calculateShares() to store the max\n+    // shares so that we can use them.\n+    double[] max \u003d new double[2];\n+\n+    calculateShares(clusterRes, numerator, denominator, numeratorShares,\n+        denominatorShares, max);\n+\n+    return (float) (max[0] / max[1]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public float divide(Resource clusterResource,\n      Resource numerator, Resource denominator) {\n    ResourceInformation[] clusterRes \u003d clusterResource.getResources();\n    // We have to provide the calculateShares() method with somewhere to store\n    // the shares. We don\u0027t actually need these shares afterwards.\n    double[] numeratorShares \u003d new double[clusterRes.length];\n    double[] denominatorShares \u003d new double[clusterRes.length];\n    // We also have to provide a place for calculateShares() to store the max\n    // shares so that we can use them.\n    double[] max \u003d new double[2];\n\n    calculateShares(clusterRes, numerator, denominator, numeratorShares,\n        denominatorShares, max);\n\n    return (float) (max[0] / max[1]);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java",
      "extendedDetails": {}
    },
    "37d7935a9d7b86635c9c1ffc03f88b49857f88a0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-827. Need to make Resource arithmetic methods accessible^CJian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1495533 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/06/13 11:28 AM",
      "commitName": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,6 @@\n+  public float divide(Resource clusterResource, \n+      Resource numerator, Resource denominator) {\n+    return \n+        getResourceAsValue(clusterResource, numerator, true) / \n+        getResourceAsValue(clusterResource, denominator, true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public float divide(Resource clusterResource, \n      Resource numerator, Resource denominator) {\n    return \n        getResourceAsValue(clusterResource, numerator, true) / \n        getResourceAsValue(clusterResource, denominator, true);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/resource/DominantResourceCalculator.java"
    }
  }
}