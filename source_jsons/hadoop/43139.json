{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "processContainersUpgrade",
  "functionId": "processContainersUpgrade___ugi-UserGroupInformation__service-Service__containers-List__Container__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 794,
  "functionEndLine": 815,
  "numCommitsSeen": 50,
  "timeTaken": 3089,
  "changeHistory": [
    "913f87dada27776c539dfb352400ecf8d40e7943",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
    "4a7369b09547a78f532af66c763c6994a38b5d68"
  ],
  "changeHistoryShort": {
    "913f87dada27776c539dfb352400ecf8d40e7943": "Ybodychange",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": "Ymultichange(Yrename,Ybodychange)",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "913f87dada27776c539dfb352400ecf8d40e7943": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8665.  Added Yarn service cancel upgrade option.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/09/18 11:51 AM",
      "commitName": "913f87dada27776c539dfb352400ecf8d40e7943",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/08/18 4:49 PM",
      "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 35.79,
      "commitsBetweenForRepo": 332,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,22 @@\n   private Response processContainersUpgrade(UserGroupInformation ugi,\n       Service service, List\u003cContainer\u003e containers) throws YarnException,\n       IOException, InterruptedException {\n \n-    if (service.getState() !\u003d ServiceState.UPGRADING) {\n+    if (!service.getState().equals(ServiceState.UPGRADING) \u0026\u0026\n+        !service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n       throw new YarnException(\n           String.format(\"The upgrade of service %s has not been initiated.\",\n               service.getName()));\n     }\n     ServiceApiUtil.validateInstancesUpgrade(containers);\n     Integer result \u003d invokeContainersUpgrade(ugi, service, containers);\n     if (result \u003d\u003d EXIT_SUCCESS) {\n       ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Upgrading component instances \" + containers.stream()\n               .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n       return formatResponse(Response.Status.ACCEPTED, status);\n     }\n     // If result is not a success, consider it a no-op\n     return Response.status(Response.Status.NO_CONTENT).build();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response processContainersUpgrade(UserGroupInformation ugi,\n      Service service, List\u003cContainer\u003e containers) throws YarnException,\n      IOException, InterruptedException {\n\n    if (!service.getState().equals(ServiceState.UPGRADING) \u0026\u0026\n        !service.getState().equals(ServiceState.UPGRADING_AUTO_FINALIZE)) {\n      throw new YarnException(\n          String.format(\"The upgrade of service %s has not been initiated.\",\n              service.getName()));\n    }\n    ServiceApiUtil.validateInstancesUpgrade(containers);\n    Integer result \u003d invokeContainersUpgrade(ugi, service, containers);\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Upgrading component instances \" + containers.stream()\n              .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n      return formatResponse(Response.Status.ACCEPTED, status);\n    }\n    // If result is not a success, consider it a no-op\n    return Response.status(Response.Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Response processContainersUpgrade(UserGroupInformation ugi,\n      Service service, List\u003cContainer\u003e containers) throws YarnException,\n      IOException, InterruptedException {\n\n    if (service.getState() !\u003d ServiceState.UPGRADING) {\n      throw new YarnException(\n          String.format(\"The upgrade of service %s has not been initiated.\",\n              service.getName()));\n    }\n    ServiceApiUtil.validateInstancesUpgrade(containers);\n    Integer result \u003d invokeContainersUpgrade(ugi, service, containers);\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Upgrading component instances \" + containers.stream()\n              .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n      return formatResponse(Response.Status.ACCEPTED, status);\n    }\n    // If result is not a success, consider it a no-op\n    return Response.status(Response.Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "8d3b39de89809f5eed06f85f00ab223e2f75e49c": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-8081.  Add support to upgrade a component.\n            Contributed by Chandni Singh\n",
      "commitDate": "15/05/18 5:40 PM",
      "commitName": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-8081.  Add support to upgrade a component.\n            Contributed by Chandni Singh\n",
          "commitDate": "15/05/18 5:40 PM",
          "commitName": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "03/05/18 10:27 AM",
          "commitNameOld": "7fe3214d4bb810c0da18dd936875b4e2588ba518",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.3,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,21 @@\n-  private Response processContainerUpgrade(UserGroupInformation ugi,\n+  private Response processContainersUpgrade(UserGroupInformation ugi,\n       Service service, List\u003cContainer\u003e containers) throws YarnException,\n       IOException, InterruptedException {\n \n     if (service.getState() !\u003d ServiceState.UPGRADING) {\n       throw new YarnException(\n           String.format(\"The upgrade of service %s has not been initiated.\",\n               service.getName()));\n     }\n-    for (Container liveContainer : containers) {\n-      if (liveContainer.getState() !\u003d ContainerState.NEEDS_UPGRADE) {\n-        // Nothing to upgrade\n-        throw new YarnException(String.format(\n-            \"The component instance (%s) does not need an upgrade.\",\n-            liveContainer.getComponentInstanceName()));\n-      }\n-    }\n-\n-    Integer result \u003d ugi.doAs((PrivilegedExceptionAction\u003cInteger\u003e) () -\u003e {\n-      int result1;\n-      ServiceClient sc \u003d getServiceClient();\n-      sc.init(YARN_CONFIG);\n-      sc.start();\n-      result1 \u003d sc.actionUpgrade(service, containers);\n-      sc.close();\n-      return result1;\n-    });\n-\n+    ServiceApiUtil.validateInstancesUpgrade(containers);\n+    Integer result \u003d invokeContainersUpgrade(ugi, service, containers);\n     if (result \u003d\u003d EXIT_SUCCESS) {\n       ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Upgrading component instances \" + containers.stream()\n               .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n       return formatResponse(Response.Status.ACCEPTED, status);\n     }\n     // If result is not a success, consider it a no-op\n     return Response.status(Response.Status.NO_CONTENT).build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response processContainersUpgrade(UserGroupInformation ugi,\n      Service service, List\u003cContainer\u003e containers) throws YarnException,\n      IOException, InterruptedException {\n\n    if (service.getState() !\u003d ServiceState.UPGRADING) {\n      throw new YarnException(\n          String.format(\"The upgrade of service %s has not been initiated.\",\n              service.getName()));\n    }\n    ServiceApiUtil.validateInstancesUpgrade(containers);\n    Integer result \u003d invokeContainersUpgrade(ugi, service, containers);\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Upgrading component instances \" + containers.stream()\n              .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n      return formatResponse(Response.Status.ACCEPTED, status);\n    }\n    // If result is not a success, consider it a no-op\n    return Response.status(Response.Status.NO_CONTENT).build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {
            "oldValue": "processContainerUpgrade",
            "newValue": "processContainersUpgrade"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8081.  Add support to upgrade a component.\n            Contributed by Chandni Singh\n",
          "commitDate": "15/05/18 5:40 PM",
          "commitName": "8d3b39de89809f5eed06f85f00ab223e2f75e49c",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "03/05/18 10:27 AM",
          "commitNameOld": "7fe3214d4bb810c0da18dd936875b4e2588ba518",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 12.3,
          "commitsBetweenForRepo": 93,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,21 @@\n-  private Response processContainerUpgrade(UserGroupInformation ugi,\n+  private Response processContainersUpgrade(UserGroupInformation ugi,\n       Service service, List\u003cContainer\u003e containers) throws YarnException,\n       IOException, InterruptedException {\n \n     if (service.getState() !\u003d ServiceState.UPGRADING) {\n       throw new YarnException(\n           String.format(\"The upgrade of service %s has not been initiated.\",\n               service.getName()));\n     }\n-    for (Container liveContainer : containers) {\n-      if (liveContainer.getState() !\u003d ContainerState.NEEDS_UPGRADE) {\n-        // Nothing to upgrade\n-        throw new YarnException(String.format(\n-            \"The component instance (%s) does not need an upgrade.\",\n-            liveContainer.getComponentInstanceName()));\n-      }\n-    }\n-\n-    Integer result \u003d ugi.doAs((PrivilegedExceptionAction\u003cInteger\u003e) () -\u003e {\n-      int result1;\n-      ServiceClient sc \u003d getServiceClient();\n-      sc.init(YARN_CONFIG);\n-      sc.start();\n-      result1 \u003d sc.actionUpgrade(service, containers);\n-      sc.close();\n-      return result1;\n-    });\n-\n+    ServiceApiUtil.validateInstancesUpgrade(containers);\n+    Integer result \u003d invokeContainersUpgrade(ugi, service, containers);\n     if (result \u003d\u003d EXIT_SUCCESS) {\n       ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(\n           \"Upgrading component instances \" + containers.stream()\n               .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n       return formatResponse(Response.Status.ACCEPTED, status);\n     }\n     // If result is not a success, consider it a no-op\n     return Response.status(Response.Status.NO_CONTENT).build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response processContainersUpgrade(UserGroupInformation ugi,\n      Service service, List\u003cContainer\u003e containers) throws YarnException,\n      IOException, InterruptedException {\n\n    if (service.getState() !\u003d ServiceState.UPGRADING) {\n      throw new YarnException(\n          String.format(\"The upgrade of service %s has not been initiated.\",\n              service.getName()));\n    }\n    ServiceApiUtil.validateInstancesUpgrade(containers);\n    Integer result \u003d invokeContainersUpgrade(ugi, service, containers);\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Upgrading component instances \" + containers.stream()\n              .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n      return formatResponse(Response.Status.ACCEPTED, status);\n    }\n    // If result is not a success, consider it a no-op\n    return Response.status(Response.Status.NO_CONTENT).build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,38 @@\n+  private Response processContainerUpgrade(UserGroupInformation ugi,\n+      Service service, List\u003cContainer\u003e containers) throws YarnException,\n+      IOException, InterruptedException {\n+\n+    if (service.getState() !\u003d ServiceState.UPGRADING) {\n+      throw new YarnException(\n+          String.format(\"The upgrade of service %s has not been initiated.\",\n+              service.getName()));\n+    }\n+    for (Container liveContainer : containers) {\n+      if (liveContainer.getState() !\u003d ContainerState.NEEDS_UPGRADE) {\n+        // Nothing to upgrade\n+        throw new YarnException(String.format(\n+            \"The component instance (%s) does not need an upgrade.\",\n+            liveContainer.getComponentInstanceName()));\n+      }\n+    }\n+\n+    Integer result \u003d ugi.doAs((PrivilegedExceptionAction\u003cInteger\u003e) () -\u003e {\n+      int result1;\n+      ServiceClient sc \u003d getServiceClient();\n+      sc.init(YARN_CONFIG);\n+      sc.start();\n+      result1 \u003d sc.actionUpgrade(service, containers);\n+      sc.close();\n+      return result1;\n+    });\n+\n+    if (result \u003d\u003d EXIT_SUCCESS) {\n+      ServiceStatus status \u003d new ServiceStatus();\n+      status.setDiagnostics(\n+          \"Upgrading component instances \" + containers.stream()\n+              .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n+      return formatResponse(Response.Status.ACCEPTED, status);\n+    }\n+    // If result is not a success, consider it a no-op\n+    return Response.status(Response.Status.NO_CONTENT).build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response processContainerUpgrade(UserGroupInformation ugi,\n      Service service, List\u003cContainer\u003e containers) throws YarnException,\n      IOException, InterruptedException {\n\n    if (service.getState() !\u003d ServiceState.UPGRADING) {\n      throw new YarnException(\n          String.format(\"The upgrade of service %s has not been initiated.\",\n              service.getName()));\n    }\n    for (Container liveContainer : containers) {\n      if (liveContainer.getState() !\u003d ContainerState.NEEDS_UPGRADE) {\n        // Nothing to upgrade\n        throw new YarnException(String.format(\n            \"The component instance (%s) does not need an upgrade.\",\n            liveContainer.getComponentInstanceName()));\n      }\n    }\n\n    Integer result \u003d ugi.doAs((PrivilegedExceptionAction\u003cInteger\u003e) () -\u003e {\n      int result1;\n      ServiceClient sc \u003d getServiceClient();\n      sc.init(YARN_CONFIG);\n      sc.start();\n      result1 \u003d sc.actionUpgrade(service, containers);\n      sc.close();\n      return result1;\n    });\n\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(\n          \"Upgrading component instances \" + containers.stream()\n              .map(Container::getId).collect(Collectors.joining(\",\")) + \".\");\n      return formatResponse(Response.Status.ACCEPTED, status);\n    }\n    // If result is not a success, consider it a no-op\n    return Response.status(Response.Status.NO_CONTENT).build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}