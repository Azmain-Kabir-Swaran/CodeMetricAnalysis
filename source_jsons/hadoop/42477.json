{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbRMStateStore.java",
  "functionName": "loadRMApp",
  "functionId": "loadRMApp___rmState-RMState__iter-LeveldbIterator__appIdStr-String__appData-byte[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/LeveldbRMStateStore.java",
  "functionStartLine": 403,
  "functionEndLine": 430,
  "numCommitsSeen": 19,
  "timeTaken": 1560,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "a7fba0bc28764e0fb36c335ea60cc58079fe007f"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "a7fba0bc28764e0fb36c335ea60cc58079fe007f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,28 @@\n   private int loadRMApp(RMState rmState, LeveldbIterator iter, String appIdStr,\n       byte[] appData) throws IOException {\n     ApplicationStateData appState \u003d createApplicationState(appIdStr, appData);\n     ApplicationId appId \u003d\n         appState.getApplicationSubmissionContext().getApplicationId();\n     rmState.appState.put(appId, appState);\n     String attemptNodePrefix \u003d getApplicationNodeKey(appId) + SEPARATOR;\n     while (iter.hasNext()) {\n       Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n       String key \u003d asString(entry.getKey());\n       if (!key.startsWith(attemptNodePrefix)) {\n         break;\n       }\n \n       String attemptId \u003d key.substring(attemptNodePrefix.length());\n       if (attemptId.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n         ApplicationAttemptStateData attemptState \u003d\n             createAttemptState(attemptId, entry.getValue());\n         appState.attempts.put(attemptState.getAttemptId(), attemptState);\n       } else {\n         LOG.warn(\"Ignoring unknown application key: \" + key);\n       }\n       iter.next();\n     }\n     int numAttempts \u003d appState.attempts.size();\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Loaded application \" + appId + \" with \" + numAttempts\n-          + \" attempts\");\n-    }\n+    LOG.debug(\"Loaded application {} with {} attempts\", appId, numAttempts);\n     return numAttempts;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int loadRMApp(RMState rmState, LeveldbIterator iter, String appIdStr,\n      byte[] appData) throws IOException {\n    ApplicationStateData appState \u003d createApplicationState(appIdStr, appData);\n    ApplicationId appId \u003d\n        appState.getApplicationSubmissionContext().getApplicationId();\n    rmState.appState.put(appId, appState);\n    String attemptNodePrefix \u003d getApplicationNodeKey(appId) + SEPARATOR;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(attemptNodePrefix)) {\n        break;\n      }\n\n      String attemptId \u003d key.substring(attemptNodePrefix.length());\n      if (attemptId.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        ApplicationAttemptStateData attemptState \u003d\n            createAttemptState(attemptId, entry.getValue());\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      } else {\n        LOG.warn(\"Ignoring unknown application key: \" + key);\n      }\n      iter.next();\n    }\n    int numAttempts \u003d appState.attempts.size();\n    LOG.debug(\"Loaded application {} with {} attempts\", appId, numAttempts);\n    return numAttempts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/LeveldbRMStateStore.java",
      "extendedDetails": {}
    },
    "a7fba0bc28764e0fb36c335ea60cc58079fe007f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2765. Added leveldb-based implementation for RMStateStore. Contributed by Jason Lowe\n",
      "commitDate": "01/12/14 4:38 PM",
      "commitName": "a7fba0bc28764e0fb36c335ea60cc58079fe007f",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,31 @@\n+  private int loadRMApp(RMState rmState, LeveldbIterator iter, String appIdStr,\n+      byte[] appData) throws IOException {\n+    ApplicationStateData appState \u003d createApplicationState(appIdStr, appData);\n+    ApplicationId appId \u003d\n+        appState.getApplicationSubmissionContext().getApplicationId();\n+    rmState.appState.put(appId, appState);\n+    String attemptNodePrefix \u003d getApplicationNodeKey(appId) + SEPARATOR;\n+    while (iter.hasNext()) {\n+      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n+      String key \u003d asString(entry.getKey());\n+      if (!key.startsWith(attemptNodePrefix)) {\n+        break;\n+      }\n+\n+      String attemptId \u003d key.substring(attemptNodePrefix.length());\n+      if (attemptId.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n+        ApplicationAttemptStateData attemptState \u003d\n+            createAttemptState(attemptId, entry.getValue());\n+        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n+      } else {\n+        LOG.warn(\"Ignoring unknown application key: \" + key);\n+      }\n+      iter.next();\n+    }\n+    int numAttempts \u003d appState.attempts.size();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Loaded application \" + appId + \" with \" + numAttempts\n+          + \" attempts\");\n+    }\n+    return numAttempts;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int loadRMApp(RMState rmState, LeveldbIterator iter, String appIdStr,\n      byte[] appData) throws IOException {\n    ApplicationStateData appState \u003d createApplicationState(appIdStr, appData);\n    ApplicationId appId \u003d\n        appState.getApplicationSubmissionContext().getApplicationId();\n    rmState.appState.put(appId, appState);\n    String attemptNodePrefix \u003d getApplicationNodeKey(appId) + SEPARATOR;\n    while (iter.hasNext()) {\n      Entry\u003cbyte[],byte[]\u003e entry \u003d iter.peekNext();\n      String key \u003d asString(entry.getKey());\n      if (!key.startsWith(attemptNodePrefix)) {\n        break;\n      }\n\n      String attemptId \u003d key.substring(attemptNodePrefix.length());\n      if (attemptId.startsWith(ApplicationAttemptId.appAttemptIdStrPrefix)) {\n        ApplicationAttemptStateData attemptState \u003d\n            createAttemptState(attemptId, entry.getValue());\n        appState.attempts.put(attemptState.getAttemptId(), attemptState);\n      } else {\n        LOG.warn(\"Ignoring unknown application key: \" + key);\n      }\n      iter.next();\n    }\n    int numAttempts \u003d appState.attempts.size();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Loaded application \" + appId + \" with \" + numAttempts\n          + \" attempts\");\n    }\n    return numAttempts;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/LeveldbRMStateStore.java"
    }
  }
}