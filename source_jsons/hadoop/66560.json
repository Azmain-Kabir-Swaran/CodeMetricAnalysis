{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SynthTraceJobProducer.java",
  "functionName": "generateSubmissionTime",
  "functionId": "generateSubmissionTime",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java",
  "functionStartLine": 322,
  "functionEndLine": 333,
  "numCommitsSeen": 5,
  "timeTaken": 1553,
  "changeHistory": [
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf"
  ],
  "changeHistoryShort": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "84cea0011ffe510d24cf9f2952944f7a6fe622cf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7732. Support Generic AM Simulator from SynthGenerator. (Contributed by Young Chen via curino)\n",
      "commitDate": "20/02/18 5:00 PM",
      "commitName": "84cea0011ffe510d24cf9f2952944f7a6fe622cf",
      "commitAuthor": "Carlo Curino",
      "diff": "@@ -0,0 +1,12 @@\n+    public long generateSubmissionTime(){\n+      int index \u003d SynthUtils.getWeighted(time_weights, rand);\n+      // Retrieve the lower and upper bounds for this time \"bucket\"\n+      int start \u003d time_distribution.get(index).time;\n+      // Get the beginning of the next time sample (if it exists)\n+      index \u003d (index+1)\u003ctime_distribution.size() ? index+1 : index;\n+      int end \u003d time_distribution.get(index).time;\n+      int range \u003d end-start;\n+      // Within this time \"bucket\", uniformly pick a time if our\n+      // range is non-zero, otherwise just use the start time of the bucket\n+      return start + (range\u003e0 ? rand.nextInt(range) : 0);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public long generateSubmissionTime(){\n      int index \u003d SynthUtils.getWeighted(time_weights, rand);\n      // Retrieve the lower and upper bounds for this time \"bucket\"\n      int start \u003d time_distribution.get(index).time;\n      // Get the beginning of the next time sample (if it exists)\n      index \u003d (index+1)\u003ctime_distribution.size() ? index+1 : index;\n      int end \u003d time_distribution.get(index).time;\n      int range \u003d end-start;\n      // Within this time \"bucket\", uniformly pick a time if our\n      // range is non-zero, otherwise just use the start time of the bucket\n      return start + (range\u003e0 ? rand.nextInt(range) : 0);\n    }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/synthetic/SynthTraceJobProducer.java"
    }
  }
}