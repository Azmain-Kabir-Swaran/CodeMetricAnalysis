{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslDataTransferServer.java",
  "functionName": "getEncryptedStreams",
  "functionId": "getEncryptedStreams___peer-Peer__underlyingOut-OutputStream__underlyingIn-InputStream",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
  "functionStartLine": 164,
  "functionEndLine": 188,
  "numCommitsSeen": 16,
  "timeTaken": 3425,
  "changeHistory": [
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
    "3b54223c0f32d42a84436c670d80b791a8e9696d",
    "9b4a7900c7dfc0590316eedaa97144f938885651"
  ],
  "changeHistoryShort": {
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": "Ybodychange",
    "3b54223c0f32d42a84436c670d80b791a8e9696d": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "9b4a7900c7dfc0590316eedaa97144f938885651": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1dd248b756e5a323ac885eefd3f81a639d6b86f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9854. Log cipher suite negotiation more verbosely. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "24/02/16 12:11 PM",
      "commitName": "d1dd248b756e5a323ac885eefd3f81a639d6b86f",
      "commitAuthor": "cnauroth",
      "commitDateOld": "03/09/15 3:32 PM",
      "commitNameOld": "ed78b14ebc9a21bb57ccd088e8b49bfa457a396f",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 173.9,
      "commitsBetweenForRepo": 1199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   private IOStreamPair getEncryptedStreams(Peer peer,\n       OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n     if (peer.hasSecureChannel() ||\n         dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n       return new IOStreamPair(underlyingIn, underlyingOut);\n     }\n \n     Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n       dnConf.getEncryptionAlgorithm());\n \n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Server using encryption algorithm \" +\n         dnConf.getEncryptionAlgorithm());\n     }\n \n     CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n       new PasswordFunction() {\n         @Override\n         public char[] apply(String userName) throws IOException {\n           return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n         }\n       });\n-    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n+    return doSaslHandshake(peer, underlyingOut, underlyingIn, saslProps,\n         callbackHandler);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private IOStreamPair getEncryptedStreams(Peer peer,\n      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n      dnConf.getEncryptionAlgorithm());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Server using encryption algorithm \" +\n        dnConf.getEncryptionAlgorithm());\n    }\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n        }\n      });\n    return doSaslHandshake(peer, underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
      "extendedDetails": {}
    },
    "3b54223c0f32d42a84436c670d80b791a8e9696d": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 11:10 AM",
      "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "14/07/14 10:51 AM",
          "commitNameOld": "425616861bd7e801fdcf0a113606ad81015b1861",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,25 @@\n-  public static IOStreamPair getEncryptedStreams(\n-      OutputStream underlyingOut, InputStream underlyingIn,\n-      DataEncryptionKey encryptionKey)\n-          throws IOException {\n-    \n-    Map\u003cString, String\u003e saslProps \u003d Maps.newHashMap(SASL_PROPS);\n-    saslProps.put(\"com.sun.security.sasl.digest.cipher\",\n-        encryptionKey.encryptionAlgorithm);\n-    \n+  private IOStreamPair getEncryptedStreams(Peer peer,\n+      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n+    if (peer.hasSecureChannel() ||\n+        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    }\n+\n+    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n+      dnConf.getEncryptionAlgorithm());\n+\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Client using encryption algorithm \" +\n-          encryptionKey.encryptionAlgorithm);\n+      LOG.debug(\"Server using encryption algorithm \" +\n+        dnConf.getEncryptionAlgorithm());\n     }\n-    \n-    DataOutputStream out \u003d new DataOutputStream(underlyingOut);\n-    DataInputStream in \u003d new DataInputStream(underlyingIn);\n-    \n-    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n-    SaslParticipant sasl \u003d new SaslParticipant(Sasl.createSaslClient(\n-        new String[] { MECHANISM }, userName, PROTOCOL, SERVER_NAME, saslProps,\n-        new SaslClientCallbackHandler(encryptionKey.encryptionKey, userName)));\n-    \n-    out.writeInt(ENCRYPTED_TRANSFER_MAGIC_NUMBER);\n-    out.flush();\n-    \n-    try {\n-      // Start of handshake - \"initial response\" in SASL terminology.\n-      sendSaslMessage(out, new byte[0]);\n-      \n-      // step 1\n-      performSaslStep1(out, in, sasl);\n-      \n-      // step 2 (client-side only)\n-      byte[] remoteResponse \u003d readSaslMessage(in);\n-      byte[] localResponse \u003d sasl.evaluateChallengeOrResponse(remoteResponse);\n-      assert localResponse \u003d\u003d null;\n-      \n-      // SASL handshake is complete\n-      checkSaslComplete(sasl);\n-      \n-      return sasl.createEncryptedStreamPair(out, in);\n-    } catch (IOException ioe) {\n-      sendGenericSaslErrorMessage(out, ioe.getMessage());\n-      throw ioe;\n-    }\n+\n+    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n+      new PasswordFunction() {\n+        @Override\n+        public char[] apply(String userName) throws IOException {\n+          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n+        }\n+      });\n+    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n+        callbackHandler);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(Peer peer,\n      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n      dnConf.getEncryptionAlgorithm());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Server using encryption algorithm \" +\n        dnConf.getEncryptionAlgorithm());\n    }\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n        }\n      });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/DataTransferEncryptor.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
            "oldMethodName": "getEncryptedStreams",
            "newMethodName": "getEncryptedStreams"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "14/07/14 10:51 AM",
          "commitNameOld": "425616861bd7e801fdcf0a113606ad81015b1861",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,25 @@\n-  public static IOStreamPair getEncryptedStreams(\n-      OutputStream underlyingOut, InputStream underlyingIn,\n-      DataEncryptionKey encryptionKey)\n-          throws IOException {\n-    \n-    Map\u003cString, String\u003e saslProps \u003d Maps.newHashMap(SASL_PROPS);\n-    saslProps.put(\"com.sun.security.sasl.digest.cipher\",\n-        encryptionKey.encryptionAlgorithm);\n-    \n+  private IOStreamPair getEncryptedStreams(Peer peer,\n+      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n+    if (peer.hasSecureChannel() ||\n+        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    }\n+\n+    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n+      dnConf.getEncryptionAlgorithm());\n+\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Client using encryption algorithm \" +\n-          encryptionKey.encryptionAlgorithm);\n+      LOG.debug(\"Server using encryption algorithm \" +\n+        dnConf.getEncryptionAlgorithm());\n     }\n-    \n-    DataOutputStream out \u003d new DataOutputStream(underlyingOut);\n-    DataInputStream in \u003d new DataInputStream(underlyingIn);\n-    \n-    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n-    SaslParticipant sasl \u003d new SaslParticipant(Sasl.createSaslClient(\n-        new String[] { MECHANISM }, userName, PROTOCOL, SERVER_NAME, saslProps,\n-        new SaslClientCallbackHandler(encryptionKey.encryptionKey, userName)));\n-    \n-    out.writeInt(ENCRYPTED_TRANSFER_MAGIC_NUMBER);\n-    out.flush();\n-    \n-    try {\n-      // Start of handshake - \"initial response\" in SASL terminology.\n-      sendSaslMessage(out, new byte[0]);\n-      \n-      // step 1\n-      performSaslStep1(out, in, sasl);\n-      \n-      // step 2 (client-side only)\n-      byte[] remoteResponse \u003d readSaslMessage(in);\n-      byte[] localResponse \u003d sasl.evaluateChallengeOrResponse(remoteResponse);\n-      assert localResponse \u003d\u003d null;\n-      \n-      // SASL handshake is complete\n-      checkSaslComplete(sasl);\n-      \n-      return sasl.createEncryptedStreamPair(out, in);\n-    } catch (IOException ioe) {\n-      sendGenericSaslErrorMessage(out, ioe.getMessage());\n-      throw ioe;\n-    }\n+\n+    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n+      new PasswordFunction() {\n+        @Override\n+        public char[] apply(String userName) throws IOException {\n+          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n+        }\n+      });\n+    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n+        callbackHandler);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(Peer peer,\n      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n      dnConf.getEncryptionAlgorithm());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Server using encryption algorithm \" +\n        dnConf.getEncryptionAlgorithm());\n    }\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n        }\n      });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
          "extendedDetails": {
            "oldValue": "[public, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "14/07/14 10:51 AM",
          "commitNameOld": "425616861bd7e801fdcf0a113606ad81015b1861",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,25 @@\n-  public static IOStreamPair getEncryptedStreams(\n-      OutputStream underlyingOut, InputStream underlyingIn,\n-      DataEncryptionKey encryptionKey)\n-          throws IOException {\n-    \n-    Map\u003cString, String\u003e saslProps \u003d Maps.newHashMap(SASL_PROPS);\n-    saslProps.put(\"com.sun.security.sasl.digest.cipher\",\n-        encryptionKey.encryptionAlgorithm);\n-    \n+  private IOStreamPair getEncryptedStreams(Peer peer,\n+      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n+    if (peer.hasSecureChannel() ||\n+        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    }\n+\n+    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n+      dnConf.getEncryptionAlgorithm());\n+\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Client using encryption algorithm \" +\n-          encryptionKey.encryptionAlgorithm);\n+      LOG.debug(\"Server using encryption algorithm \" +\n+        dnConf.getEncryptionAlgorithm());\n     }\n-    \n-    DataOutputStream out \u003d new DataOutputStream(underlyingOut);\n-    DataInputStream in \u003d new DataInputStream(underlyingIn);\n-    \n-    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n-    SaslParticipant sasl \u003d new SaslParticipant(Sasl.createSaslClient(\n-        new String[] { MECHANISM }, userName, PROTOCOL, SERVER_NAME, saslProps,\n-        new SaslClientCallbackHandler(encryptionKey.encryptionKey, userName)));\n-    \n-    out.writeInt(ENCRYPTED_TRANSFER_MAGIC_NUMBER);\n-    out.flush();\n-    \n-    try {\n-      // Start of handshake - \"initial response\" in SASL terminology.\n-      sendSaslMessage(out, new byte[0]);\n-      \n-      // step 1\n-      performSaslStep1(out, in, sasl);\n-      \n-      // step 2 (client-side only)\n-      byte[] remoteResponse \u003d readSaslMessage(in);\n-      byte[] localResponse \u003d sasl.evaluateChallengeOrResponse(remoteResponse);\n-      assert localResponse \u003d\u003d null;\n-      \n-      // SASL handshake is complete\n-      checkSaslComplete(sasl);\n-      \n-      return sasl.createEncryptedStreamPair(out, in);\n-    } catch (IOException ioe) {\n-      sendGenericSaslErrorMessage(out, ioe.getMessage());\n-      throw ioe;\n-    }\n+\n+    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n+      new PasswordFunction() {\n+        @Override\n+        public char[] apply(String userName) throws IOException {\n+          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n+        }\n+      });\n+    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n+        callbackHandler);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(Peer peer,\n      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n      dnConf.getEncryptionAlgorithm());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Server using encryption algorithm \" +\n        dnConf.getEncryptionAlgorithm());\n    }\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n        }\n      });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2856. Fix block protocol so that Datanodes don\u0027t require root or jsvc. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610474 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/07/14 11:10 AM",
          "commitName": "3b54223c0f32d42a84436c670d80b791a8e9696d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "14/07/14 10:51 AM",
          "commitNameOld": "425616861bd7e801fdcf0a113606ad81015b1861",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,46 +1,25 @@\n-  public static IOStreamPair getEncryptedStreams(\n-      OutputStream underlyingOut, InputStream underlyingIn,\n-      DataEncryptionKey encryptionKey)\n-          throws IOException {\n-    \n-    Map\u003cString, String\u003e saslProps \u003d Maps.newHashMap(SASL_PROPS);\n-    saslProps.put(\"com.sun.security.sasl.digest.cipher\",\n-        encryptionKey.encryptionAlgorithm);\n-    \n+  private IOStreamPair getEncryptedStreams(Peer peer,\n+      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n+    if (peer.hasSecureChannel() ||\n+        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n+      return new IOStreamPair(underlyingIn, underlyingOut);\n+    }\n+\n+    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n+      dnConf.getEncryptionAlgorithm());\n+\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Client using encryption algorithm \" +\n-          encryptionKey.encryptionAlgorithm);\n+      LOG.debug(\"Server using encryption algorithm \" +\n+        dnConf.getEncryptionAlgorithm());\n     }\n-    \n-    DataOutputStream out \u003d new DataOutputStream(underlyingOut);\n-    DataInputStream in \u003d new DataInputStream(underlyingIn);\n-    \n-    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n-    SaslParticipant sasl \u003d new SaslParticipant(Sasl.createSaslClient(\n-        new String[] { MECHANISM }, userName, PROTOCOL, SERVER_NAME, saslProps,\n-        new SaslClientCallbackHandler(encryptionKey.encryptionKey, userName)));\n-    \n-    out.writeInt(ENCRYPTED_TRANSFER_MAGIC_NUMBER);\n-    out.flush();\n-    \n-    try {\n-      // Start of handshake - \"initial response\" in SASL terminology.\n-      sendSaslMessage(out, new byte[0]);\n-      \n-      // step 1\n-      performSaslStep1(out, in, sasl);\n-      \n-      // step 2 (client-side only)\n-      byte[] remoteResponse \u003d readSaslMessage(in);\n-      byte[] localResponse \u003d sasl.evaluateChallengeOrResponse(remoteResponse);\n-      assert localResponse \u003d\u003d null;\n-      \n-      // SASL handshake is complete\n-      checkSaslComplete(sasl);\n-      \n-      return sasl.createEncryptedStreamPair(out, in);\n-    } catch (IOException ioe) {\n-      sendGenericSaslErrorMessage(out, ioe.getMessage());\n-      throw ioe;\n-    }\n+\n+    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n+      new PasswordFunction() {\n+        @Override\n+        public char[] apply(String userName) throws IOException {\n+          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n+        }\n+      });\n+    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n+        callbackHandler);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private IOStreamPair getEncryptedStreams(Peer peer,\n      OutputStream underlyingOut, InputStream underlyingIn) throws IOException {\n    if (peer.hasSecureChannel() ||\n        dnConf.getTrustedChannelResolver().isTrusted(getPeerAddress(peer))) {\n      return new IOStreamPair(underlyingIn, underlyingOut);\n    }\n\n    Map\u003cString, String\u003e saslProps \u003d createSaslPropertiesForEncryption(\n      dnConf.getEncryptionAlgorithm());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Server using encryption algorithm \" +\n        dnConf.getEncryptionAlgorithm());\n    }\n\n    CallbackHandler callbackHandler \u003d new SaslServerCallbackHandler(\n      new PasswordFunction() {\n        @Override\n        public char[] apply(String userName) throws IOException {\n          return encryptionKeyToPassword(getEncryptionKeyFromUserName(userName));\n        }\n      });\n    return doSaslHandshake(underlyingOut, underlyingIn, saslProps,\n        callbackHandler);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/sasl/SaslDataTransferServer.java",
          "extendedDetails": {
            "oldValue": "[underlyingOut-OutputStream, underlyingIn-InputStream, encryptionKey-DataEncryptionKey]",
            "newValue": "[peer-Peer, underlyingOut-OutputStream, underlyingIn-InputStream]"
          }
        }
      ]
    },
    "9b4a7900c7dfc0590316eedaa97144f938885651": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3637. Add support for encrypting the DataTransferProtocol. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370354 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 9:40 AM",
      "commitName": "9b4a7900c7dfc0590316eedaa97144f938885651",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,46 @@\n+  public static IOStreamPair getEncryptedStreams(\n+      OutputStream underlyingOut, InputStream underlyingIn,\n+      DataEncryptionKey encryptionKey)\n+          throws IOException {\n+    \n+    Map\u003cString, String\u003e saslProps \u003d Maps.newHashMap(SASL_PROPS);\n+    saslProps.put(\"com.sun.security.sasl.digest.cipher\",\n+        encryptionKey.encryptionAlgorithm);\n+    \n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Client using encryption algorithm \" +\n+          encryptionKey.encryptionAlgorithm);\n+    }\n+    \n+    DataOutputStream out \u003d new DataOutputStream(underlyingOut);\n+    DataInputStream in \u003d new DataInputStream(underlyingIn);\n+    \n+    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n+    SaslParticipant sasl \u003d new SaslParticipant(Sasl.createSaslClient(\n+        new String[] { MECHANISM }, userName, PROTOCOL, SERVER_NAME, saslProps,\n+        new SaslClientCallbackHandler(encryptionKey.encryptionKey, userName)));\n+    \n+    out.writeInt(ENCRYPTED_TRANSFER_MAGIC_NUMBER);\n+    out.flush();\n+    \n+    try {\n+      // Start of handshake - \"initial response\" in SASL terminology.\n+      sendSaslMessage(out, new byte[0]);\n+      \n+      // step 1\n+      performSaslStep1(out, in, sasl);\n+      \n+      // step 2 (client-side only)\n+      byte[] remoteResponse \u003d readSaslMessage(in);\n+      byte[] localResponse \u003d sasl.evaluateChallengeOrResponse(remoteResponse);\n+      assert localResponse \u003d\u003d null;\n+      \n+      // SASL handshake is complete\n+      checkSaslComplete(sasl);\n+      \n+      return sasl.createEncryptedStreamPair(out, in);\n+    } catch (IOException ioe) {\n+      sendGenericSaslErrorMessage(out, ioe.getMessage());\n+      throw ioe;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static IOStreamPair getEncryptedStreams(\n      OutputStream underlyingOut, InputStream underlyingIn,\n      DataEncryptionKey encryptionKey)\n          throws IOException {\n    \n    Map\u003cString, String\u003e saslProps \u003d Maps.newHashMap(SASL_PROPS);\n    saslProps.put(\"com.sun.security.sasl.digest.cipher\",\n        encryptionKey.encryptionAlgorithm);\n    \n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Client using encryption algorithm \" +\n          encryptionKey.encryptionAlgorithm);\n    }\n    \n    DataOutputStream out \u003d new DataOutputStream(underlyingOut);\n    DataInputStream in \u003d new DataInputStream(underlyingIn);\n    \n    String userName \u003d getUserNameFromEncryptionKey(encryptionKey);\n    SaslParticipant sasl \u003d new SaslParticipant(Sasl.createSaslClient(\n        new String[] { MECHANISM }, userName, PROTOCOL, SERVER_NAME, saslProps,\n        new SaslClientCallbackHandler(encryptionKey.encryptionKey, userName)));\n    \n    out.writeInt(ENCRYPTED_TRANSFER_MAGIC_NUMBER);\n    out.flush();\n    \n    try {\n      // Start of handshake - \"initial response\" in SASL terminology.\n      sendSaslMessage(out, new byte[0]);\n      \n      // step 1\n      performSaslStep1(out, in, sasl);\n      \n      // step 2 (client-side only)\n      byte[] remoteResponse \u003d readSaslMessage(in);\n      byte[] localResponse \u003d sasl.evaluateChallengeOrResponse(remoteResponse);\n      assert localResponse \u003d\u003d null;\n      \n      // SASL handshake is complete\n      checkSaslComplete(sasl);\n      \n      return sasl.createEncryptedStreamPair(out, in);\n    } catch (IOException ioe) {\n      sendGenericSaslErrorMessage(out, ioe.getMessage());\n      throw ioe;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/protocol/datatransfer/DataTransferEncryptor.java"
    }
  }
}