{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "getStartTime",
  "functionId": "getStartTime___entityId-String__entityType-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 1026,
  "functionEndLine": 1030,
  "numCommitsSeen": 27,
  "timeTaken": 2838,
  "changeHistory": [
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "b3ea4aebff42131642af0393748dc751cb3fc31e",
    "40464fba22bac99d0e5b79674152aa5dfba99483",
    "84425fb435cb603fd8adcc2f76631c0244175310",
    "23b2e43f5d678517e33590d15dec73225b9c5682"
  ],
  "changeHistoryShort": {
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "b3ea4aebff42131642af0393748dc751cb3fc31e": "Ybodychange",
    "40464fba22bac99d0e5b79674152aa5dfba99483": "Ymultichange(Yparameterchange,Ybodychange)",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
    "23b2e43f5d678517e33590d15dec73225b9c5682": "Yintroduced"
  },
  "changeHistoryDetails": {
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private byte[] getStartTime(String entityId, String entityType)\n      throws IOException {\n    Long l \u003d getStartTimeLong(entityId, entityType);\n    return l \u003d\u003d null ? null : writeReverseOrderedLong(l);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
      }
    },
    "b3ea4aebff42131642af0393748dc751cb3fc31e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1717. Enabled periodically discarding old data in LeveldbTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 1:35 PM",
      "commitName": "b3ea4aebff42131642af0393748dc751cb3fc31e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "04/03/14 9:32 AM",
      "commitNameOld": "40464fba22bac99d0e5b79674152aa5dfba99483",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.13,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,5 @@\n   private byte[] getStartTime(String entityId, String entityType)\n       throws IOException {\n-    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n-    // start time is not provided, so try to look it up\n-    if (startTimeReadCache.containsKey(entity)) {\n-      // found the start time in the cache\n-      return writeReverseOrderedLong(startTimeReadCache.get(entity));\n-    } else {\n-      // try to look up the start time in the db\n-      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n-      byte[] v \u003d db.get(b);\n-      if (v \u003d\u003d null) {\n-        // did not find the start time in the db\n-        return null;\n-      } else {\n-        // found the start time in the db\n-        startTimeReadCache.put(entity, readReverseOrderedLong(v, 0));\n-        return v;\n-      }\n-    }\n+    Long l \u003d getStartTimeLong(entityId, entityType);\n+    return l \u003d\u003d null ? null : writeReverseOrderedLong(l);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private byte[] getStartTime(String entityId, String entityType)\n      throws IOException {\n    Long l \u003d getStartTimeLong(entityId, entityType);\n    return l \u003d\u003d null ? null : writeReverseOrderedLong(l);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "40464fba22bac99d0e5b79674152aa5dfba99483": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1730. Implemented simple write-locking in the LevelDB based timeline-store. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/14 9:32 AM",
      "commitName": "40464fba22bac99d0e5b79674152aa5dfba99483",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1730. Implemented simple write-locking in the LevelDB based timeline-store. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574145 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/14 9:32 AM",
          "commitName": "40464fba22bac99d0e5b79674152aa5dfba99483",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:55 PM",
          "commitNameOld": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.86,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,21 @@\n-  private byte[] getStartTime(String entityId, String entityType,\n-      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n+  private byte[] getStartTime(String entityId, String entityType)\n       throws IOException {\n     EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n-    if (startTime \u003d\u003d null) {\n-      // start time is not provided, so try to look it up\n-      if (startTimeCache.containsKey(entity)) {\n-        // found the start time in the cache\n-        startTime \u003d startTimeCache.get(entity);\n-      } else {\n-        // try to look up the start time in the db\n-        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n-        byte[] v \u003d db.get(b);\n-        if (v \u003d\u003d null) {\n-          // did not find the start time in the db\n-          // if this is a put, try to set it from the provided events\n-          if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n-            // no events, or not a put, so return null\n-            return null;\n-          }\n-          Long min \u003d Long.MAX_VALUE;\n-          for (TimelineEvent e : events)\n-            if (min \u003e e.getTimestamp())\n-              min \u003d e.getTimestamp();\n-          startTime \u003d min;\n-          // selected start time as minimum timestamp of provided events\n-          // write start time to db and cache\n-          writeBatch.put(b, writeReverseOrderedLong(startTime));\n-          startTimeCache.put(entity, startTime);\n-        } else {\n-          // found the start time in the db\n-          startTime \u003d readReverseOrderedLong(v, 0);\n-          if (writeBatch !\u003d null) {\n-            // if this is a put, re-add the start time to the cache\n-            startTimeCache.put(entity, startTime);\n-          }\n-        }\n-      }\n+    // start time is not provided, so try to look it up\n+    if (startTimeReadCache.containsKey(entity)) {\n+      // found the start time in the cache\n+      return writeReverseOrderedLong(startTimeReadCache.get(entity));\n     } else {\n-      // start time is provided\n-      // TODO: verify start time in db as well as cache?\n-      if (startTimeCache.containsKey(entity)) {\n-        // if the start time is already in the cache,\n-        // and it is different from the provided start time,\n-        // use the one from the cache\n-        if (!startTime.equals(startTimeCache.get(entity)))\n-          startTime \u003d startTimeCache.get(entity);\n-      } else if (writeBatch !\u003d null) {\n-        // if this is a put, write the provided start time to the db and the\n-        // cache\n-        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n-        writeBatch.put(b, writeReverseOrderedLong(startTime));\n-        startTimeCache.put(entity, startTime);\n+      // try to look up the start time in the db\n+      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n+      byte[] v \u003d db.get(b);\n+      if (v \u003d\u003d null) {\n+        // did not find the start time in the db\n+        return null;\n+      } else {\n+        // found the start time in the db\n+        startTimeReadCache.put(entity, readReverseOrderedLong(v, 0));\n+        return v;\n       }\n     }\n-    return writeReverseOrderedLong(startTime);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private byte[] getStartTime(String entityId, String entityType)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    // start time is not provided, so try to look it up\n    if (startTimeReadCache.containsKey(entity)) {\n      // found the start time in the cache\n      return writeReverseOrderedLong(startTimeReadCache.get(entity));\n    } else {\n      // try to look up the start time in the db\n      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n      byte[] v \u003d db.get(b);\n      if (v \u003d\u003d null) {\n        // did not find the start time in the db\n        return null;\n      } else {\n        // found the start time in the db\n        startTimeReadCache.put(entity, readReverseOrderedLong(v, 0));\n        return v;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[entityId-String, entityType-String, startTime-Long, events-List\u003cTimelineEvent\u003e, writeBatch-WriteBatch]",
            "newValue": "[entityId-String, entityType-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1730. Implemented simple write-locking in the LevelDB based timeline-store. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574145 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/03/14 9:32 AM",
          "commitName": "40464fba22bac99d0e5b79674152aa5dfba99483",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:55 PM",
          "commitNameOld": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 9.86,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,21 @@\n-  private byte[] getStartTime(String entityId, String entityType,\n-      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n+  private byte[] getStartTime(String entityId, String entityType)\n       throws IOException {\n     EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n-    if (startTime \u003d\u003d null) {\n-      // start time is not provided, so try to look it up\n-      if (startTimeCache.containsKey(entity)) {\n-        // found the start time in the cache\n-        startTime \u003d startTimeCache.get(entity);\n-      } else {\n-        // try to look up the start time in the db\n-        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n-        byte[] v \u003d db.get(b);\n-        if (v \u003d\u003d null) {\n-          // did not find the start time in the db\n-          // if this is a put, try to set it from the provided events\n-          if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n-            // no events, or not a put, so return null\n-            return null;\n-          }\n-          Long min \u003d Long.MAX_VALUE;\n-          for (TimelineEvent e : events)\n-            if (min \u003e e.getTimestamp())\n-              min \u003d e.getTimestamp();\n-          startTime \u003d min;\n-          // selected start time as minimum timestamp of provided events\n-          // write start time to db and cache\n-          writeBatch.put(b, writeReverseOrderedLong(startTime));\n-          startTimeCache.put(entity, startTime);\n-        } else {\n-          // found the start time in the db\n-          startTime \u003d readReverseOrderedLong(v, 0);\n-          if (writeBatch !\u003d null) {\n-            // if this is a put, re-add the start time to the cache\n-            startTimeCache.put(entity, startTime);\n-          }\n-        }\n-      }\n+    // start time is not provided, so try to look it up\n+    if (startTimeReadCache.containsKey(entity)) {\n+      // found the start time in the cache\n+      return writeReverseOrderedLong(startTimeReadCache.get(entity));\n     } else {\n-      // start time is provided\n-      // TODO: verify start time in db as well as cache?\n-      if (startTimeCache.containsKey(entity)) {\n-        // if the start time is already in the cache,\n-        // and it is different from the provided start time,\n-        // use the one from the cache\n-        if (!startTime.equals(startTimeCache.get(entity)))\n-          startTime \u003d startTimeCache.get(entity);\n-      } else if (writeBatch !\u003d null) {\n-        // if this is a put, write the provided start time to the db and the\n-        // cache\n-        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n-        writeBatch.put(b, writeReverseOrderedLong(startTime));\n-        startTimeCache.put(entity, startTime);\n+      // try to look up the start time in the db\n+      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n+      byte[] v \u003d db.get(b);\n+      if (v \u003d\u003d null) {\n+        // did not find the start time in the db\n+        return null;\n+      } else {\n+        // found the start time in the db\n+        startTimeReadCache.put(entity, readReverseOrderedLong(v, 0));\n+        return v;\n       }\n     }\n-    return writeReverseOrderedLong(startTime);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private byte[] getStartTime(String entityId, String entityType)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    // start time is not provided, so try to look it up\n    if (startTimeReadCache.containsKey(entity)) {\n      // found the start time in the cache\n      return writeReverseOrderedLong(startTimeReadCache.get(entity));\n    } else {\n      // try to look up the start time in the db\n      byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n      byte[] v \u003d db.get(b);\n      if (v \u003d\u003d null) {\n        // did not find the start time in the db\n        return null;\n      } else {\n        // found the start time in the db\n        startTimeReadCache.put(entity, readReverseOrderedLong(v, 0));\n        return v;\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Ymultichange(Yfilerename,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   private byte[] getStartTime(String entityId, String entityType,\n-      Long startTime, List\u003cATSEvent\u003e events, WriteBatch writeBatch)\n+      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n       throws IOException {\n     EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n     if (startTime \u003d\u003d null) {\n       // start time is not provided, so try to look it up\n       if (startTimeCache.containsKey(entity)) {\n         // found the start time in the cache\n         startTime \u003d startTimeCache.get(entity);\n       } else {\n         // try to look up the start time in the db\n         byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n         byte[] v \u003d db.get(b);\n         if (v \u003d\u003d null) {\n           // did not find the start time in the db\n           // if this is a put, try to set it from the provided events\n           if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n             // no events, or not a put, so return null\n             return null;\n           }\n           Long min \u003d Long.MAX_VALUE;\n-          for (ATSEvent e : events)\n+          for (TimelineEvent e : events)\n             if (min \u003e e.getTimestamp())\n               min \u003d e.getTimestamp();\n           startTime \u003d min;\n           // selected start time as minimum timestamp of provided events\n           // write start time to db and cache\n           writeBatch.put(b, writeReverseOrderedLong(startTime));\n           startTimeCache.put(entity, startTime);\n         } else {\n           // found the start time in the db\n           startTime \u003d readReverseOrderedLong(v, 0);\n           if (writeBatch !\u003d null) {\n             // if this is a put, re-add the start time to the cache\n             startTimeCache.put(entity, startTime);\n           }\n         }\n       }\n     } else {\n       // start time is provided\n       // TODO: verify start time in db as well as cache?\n       if (startTimeCache.containsKey(entity)) {\n         // if the start time is already in the cache,\n         // and it is different from the provided start time,\n         // use the one from the cache\n         if (!startTime.equals(startTimeCache.get(entity)))\n           startTime \u003d startTimeCache.get(entity);\n       } else if (writeBatch !\u003d null) {\n         // if this is a put, write the provided start time to the db and the\n         // cache\n         byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n         writeBatch.put(b, writeReverseOrderedLong(startTime));\n         startTimeCache.put(entity, startTime);\n       }\n     }\n     return writeReverseOrderedLong(startTime);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private byte[] getStartTime(String entityId, String entityType,\n      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    if (startTime \u003d\u003d null) {\n      // start time is not provided, so try to look it up\n      if (startTimeCache.containsKey(entity)) {\n        // found the start time in the cache\n        startTime \u003d startTimeCache.get(entity);\n      } else {\n        // try to look up the start time in the db\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        byte[] v \u003d db.get(b);\n        if (v \u003d\u003d null) {\n          // did not find the start time in the db\n          // if this is a put, try to set it from the provided events\n          if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n            // no events, or not a put, so return null\n            return null;\n          }\n          Long min \u003d Long.MAX_VALUE;\n          for (TimelineEvent e : events)\n            if (min \u003e e.getTimestamp())\n              min \u003d e.getTimestamp();\n          startTime \u003d min;\n          // selected start time as minimum timestamp of provided events\n          // write start time to db and cache\n          writeBatch.put(b, writeReverseOrderedLong(startTime));\n          startTimeCache.put(entity, startTime);\n        } else {\n          // found the start time in the db\n          startTime \u003d readReverseOrderedLong(v, 0);\n          if (writeBatch !\u003d null) {\n            // if this is a put, re-add the start time to the cache\n            startTimeCache.put(entity, startTime);\n          }\n        }\n      }\n    } else {\n      // start time is provided\n      // TODO: verify start time in db as well as cache?\n      if (startTimeCache.containsKey(entity)) {\n        // if the start time is already in the cache,\n        // and it is different from the provided start time,\n        // use the one from the cache\n        if (!startTime.equals(startTimeCache.get(entity)))\n          startTime \u003d startTimeCache.get(entity);\n      } else if (writeBatch !\u003d null) {\n        // if this is a put, write the provided start time to the db and the\n        // cache\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        writeBatch.put(b, writeReverseOrderedLong(startTime));\n        startTimeCache.put(entity, startTime);\n      }\n    }\n    return writeReverseOrderedLong(startTime);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/LeveldbApplicationTimelineStore.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   private byte[] getStartTime(String entityId, String entityType,\n-      Long startTime, List\u003cATSEvent\u003e events, WriteBatch writeBatch)\n+      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n       throws IOException {\n     EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n     if (startTime \u003d\u003d null) {\n       // start time is not provided, so try to look it up\n       if (startTimeCache.containsKey(entity)) {\n         // found the start time in the cache\n         startTime \u003d startTimeCache.get(entity);\n       } else {\n         // try to look up the start time in the db\n         byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n         byte[] v \u003d db.get(b);\n         if (v \u003d\u003d null) {\n           // did not find the start time in the db\n           // if this is a put, try to set it from the provided events\n           if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n             // no events, or not a put, so return null\n             return null;\n           }\n           Long min \u003d Long.MAX_VALUE;\n-          for (ATSEvent e : events)\n+          for (TimelineEvent e : events)\n             if (min \u003e e.getTimestamp())\n               min \u003d e.getTimestamp();\n           startTime \u003d min;\n           // selected start time as minimum timestamp of provided events\n           // write start time to db and cache\n           writeBatch.put(b, writeReverseOrderedLong(startTime));\n           startTimeCache.put(entity, startTime);\n         } else {\n           // found the start time in the db\n           startTime \u003d readReverseOrderedLong(v, 0);\n           if (writeBatch !\u003d null) {\n             // if this is a put, re-add the start time to the cache\n             startTimeCache.put(entity, startTime);\n           }\n         }\n       }\n     } else {\n       // start time is provided\n       // TODO: verify start time in db as well as cache?\n       if (startTimeCache.containsKey(entity)) {\n         // if the start time is already in the cache,\n         // and it is different from the provided start time,\n         // use the one from the cache\n         if (!startTime.equals(startTimeCache.get(entity)))\n           startTime \u003d startTimeCache.get(entity);\n       } else if (writeBatch !\u003d null) {\n         // if this is a put, write the provided start time to the db and the\n         // cache\n         byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n         writeBatch.put(b, writeReverseOrderedLong(startTime));\n         startTimeCache.put(entity, startTime);\n       }\n     }\n     return writeReverseOrderedLong(startTime);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private byte[] getStartTime(String entityId, String entityType,\n      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    if (startTime \u003d\u003d null) {\n      // start time is not provided, so try to look it up\n      if (startTimeCache.containsKey(entity)) {\n        // found the start time in the cache\n        startTime \u003d startTimeCache.get(entity);\n      } else {\n        // try to look up the start time in the db\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        byte[] v \u003d db.get(b);\n        if (v \u003d\u003d null) {\n          // did not find the start time in the db\n          // if this is a put, try to set it from the provided events\n          if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n            // no events, or not a put, so return null\n            return null;\n          }\n          Long min \u003d Long.MAX_VALUE;\n          for (TimelineEvent e : events)\n            if (min \u003e e.getTimestamp())\n              min \u003d e.getTimestamp();\n          startTime \u003d min;\n          // selected start time as minimum timestamp of provided events\n          // write start time to db and cache\n          writeBatch.put(b, writeReverseOrderedLong(startTime));\n          startTimeCache.put(entity, startTime);\n        } else {\n          // found the start time in the db\n          startTime \u003d readReverseOrderedLong(v, 0);\n          if (writeBatch !\u003d null) {\n            // if this is a put, re-add the start time to the cache\n            startTimeCache.put(entity, startTime);\n          }\n        }\n      }\n    } else {\n      // start time is provided\n      // TODO: verify start time in db as well as cache?\n      if (startTimeCache.containsKey(entity)) {\n        // if the start time is already in the cache,\n        // and it is different from the provided start time,\n        // use the one from the cache\n        if (!startTime.equals(startTimeCache.get(entity)))\n          startTime \u003d startTimeCache.get(entity);\n      } else if (writeBatch !\u003d null) {\n        // if this is a put, write the provided start time to the db and the\n        // cache\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        writeBatch.put(b, writeReverseOrderedLong(startTime));\n        startTimeCache.put(entity, startTime);\n      }\n    }\n    return writeReverseOrderedLong(startTime);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,57 @@\n   private byte[] getStartTime(String entityId, String entityType,\n-      Long startTime, List\u003cATSEvent\u003e events, WriteBatch writeBatch)\n+      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n       throws IOException {\n     EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n     if (startTime \u003d\u003d null) {\n       // start time is not provided, so try to look it up\n       if (startTimeCache.containsKey(entity)) {\n         // found the start time in the cache\n         startTime \u003d startTimeCache.get(entity);\n       } else {\n         // try to look up the start time in the db\n         byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n         byte[] v \u003d db.get(b);\n         if (v \u003d\u003d null) {\n           // did not find the start time in the db\n           // if this is a put, try to set it from the provided events\n           if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n             // no events, or not a put, so return null\n             return null;\n           }\n           Long min \u003d Long.MAX_VALUE;\n-          for (ATSEvent e : events)\n+          for (TimelineEvent e : events)\n             if (min \u003e e.getTimestamp())\n               min \u003d e.getTimestamp();\n           startTime \u003d min;\n           // selected start time as minimum timestamp of provided events\n           // write start time to db and cache\n           writeBatch.put(b, writeReverseOrderedLong(startTime));\n           startTimeCache.put(entity, startTime);\n         } else {\n           // found the start time in the db\n           startTime \u003d readReverseOrderedLong(v, 0);\n           if (writeBatch !\u003d null) {\n             // if this is a put, re-add the start time to the cache\n             startTimeCache.put(entity, startTime);\n           }\n         }\n       }\n     } else {\n       // start time is provided\n       // TODO: verify start time in db as well as cache?\n       if (startTimeCache.containsKey(entity)) {\n         // if the start time is already in the cache,\n         // and it is different from the provided start time,\n         // use the one from the cache\n         if (!startTime.equals(startTimeCache.get(entity)))\n           startTime \u003d startTimeCache.get(entity);\n       } else if (writeBatch !\u003d null) {\n         // if this is a put, write the provided start time to the db and the\n         // cache\n         byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n         writeBatch.put(b, writeReverseOrderedLong(startTime));\n         startTimeCache.put(entity, startTime);\n       }\n     }\n     return writeReverseOrderedLong(startTime);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private byte[] getStartTime(String entityId, String entityType,\n      Long startTime, List\u003cTimelineEvent\u003e events, WriteBatch writeBatch)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    if (startTime \u003d\u003d null) {\n      // start time is not provided, so try to look it up\n      if (startTimeCache.containsKey(entity)) {\n        // found the start time in the cache\n        startTime \u003d startTimeCache.get(entity);\n      } else {\n        // try to look up the start time in the db\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        byte[] v \u003d db.get(b);\n        if (v \u003d\u003d null) {\n          // did not find the start time in the db\n          // if this is a put, try to set it from the provided events\n          if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n            // no events, or not a put, so return null\n            return null;\n          }\n          Long min \u003d Long.MAX_VALUE;\n          for (TimelineEvent e : events)\n            if (min \u003e e.getTimestamp())\n              min \u003d e.getTimestamp();\n          startTime \u003d min;\n          // selected start time as minimum timestamp of provided events\n          // write start time to db and cache\n          writeBatch.put(b, writeReverseOrderedLong(startTime));\n          startTimeCache.put(entity, startTime);\n        } else {\n          // found the start time in the db\n          startTime \u003d readReverseOrderedLong(v, 0);\n          if (writeBatch !\u003d null) {\n            // if this is a put, re-add the start time to the cache\n            startTimeCache.put(entity, startTime);\n          }\n        }\n      }\n    } else {\n      // start time is provided\n      // TODO: verify start time in db as well as cache?\n      if (startTimeCache.containsKey(entity)) {\n        // if the start time is already in the cache,\n        // and it is different from the provided start time,\n        // use the one from the cache\n        if (!startTime.equals(startTimeCache.get(entity)))\n          startTime \u003d startTimeCache.get(entity);\n      } else if (writeBatch !\u003d null) {\n        // if this is a put, write the provided start time to the db and the\n        // cache\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        writeBatch.put(b, writeReverseOrderedLong(startTime));\n        startTimeCache.put(entity, startTime);\n      }\n    }\n    return writeReverseOrderedLong(startTime);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[entityId-String, entityType-String, startTime-Long, events-List\u003cATSEvent\u003e, writeBatch-WriteBatch]",
            "newValue": "[entityId-String, entityType-String, startTime-Long, events-List\u003cTimelineEvent\u003e, writeBatch-WriteBatch]"
          }
        }
      ]
    },
    "23b2e43f5d678517e33590d15dec73225b9c5682": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1635. Implemented a Leveldb based ApplicationTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1565868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 6:15 PM",
      "commitName": "23b2e43f5d678517e33590d15dec73225b9c5682",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,57 @@\n+  private byte[] getStartTime(String entityId, String entityType,\n+      Long startTime, List\u003cATSEvent\u003e events, WriteBatch writeBatch)\n+      throws IOException {\n+    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n+    if (startTime \u003d\u003d null) {\n+      // start time is not provided, so try to look it up\n+      if (startTimeCache.containsKey(entity)) {\n+        // found the start time in the cache\n+        startTime \u003d startTimeCache.get(entity);\n+      } else {\n+        // try to look up the start time in the db\n+        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n+        byte[] v \u003d db.get(b);\n+        if (v \u003d\u003d null) {\n+          // did not find the start time in the db\n+          // if this is a put, try to set it from the provided events\n+          if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n+            // no events, or not a put, so return null\n+            return null;\n+          }\n+          Long min \u003d Long.MAX_VALUE;\n+          for (ATSEvent e : events)\n+            if (min \u003e e.getTimestamp())\n+              min \u003d e.getTimestamp();\n+          startTime \u003d min;\n+          // selected start time as minimum timestamp of provided events\n+          // write start time to db and cache\n+          writeBatch.put(b, writeReverseOrderedLong(startTime));\n+          startTimeCache.put(entity, startTime);\n+        } else {\n+          // found the start time in the db\n+          startTime \u003d readReverseOrderedLong(v, 0);\n+          if (writeBatch !\u003d null) {\n+            // if this is a put, re-add the start time to the cache\n+            startTimeCache.put(entity, startTime);\n+          }\n+        }\n+      }\n+    } else {\n+      // start time is provided\n+      // TODO: verify start time in db as well as cache?\n+      if (startTimeCache.containsKey(entity)) {\n+        // if the start time is already in the cache,\n+        // and it is different from the provided start time,\n+        // use the one from the cache\n+        if (!startTime.equals(startTimeCache.get(entity)))\n+          startTime \u003d startTimeCache.get(entity);\n+      } else if (writeBatch !\u003d null) {\n+        // if this is a put, write the provided start time to the db and the\n+        // cache\n+        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n+        writeBatch.put(b, writeReverseOrderedLong(startTime));\n+        startTimeCache.put(entity, startTime);\n+      }\n+    }\n+    return writeReverseOrderedLong(startTime);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private byte[] getStartTime(String entityId, String entityType,\n      Long startTime, List\u003cATSEvent\u003e events, WriteBatch writeBatch)\n      throws IOException {\n    EntityIdentifier entity \u003d new EntityIdentifier(entityId, entityType);\n    if (startTime \u003d\u003d null) {\n      // start time is not provided, so try to look it up\n      if (startTimeCache.containsKey(entity)) {\n        // found the start time in the cache\n        startTime \u003d startTimeCache.get(entity);\n      } else {\n        // try to look up the start time in the db\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        byte[] v \u003d db.get(b);\n        if (v \u003d\u003d null) {\n          // did not find the start time in the db\n          // if this is a put, try to set it from the provided events\n          if (events \u003d\u003d null || writeBatch \u003d\u003d null) {\n            // no events, or not a put, so return null\n            return null;\n          }\n          Long min \u003d Long.MAX_VALUE;\n          for (ATSEvent e : events)\n            if (min \u003e e.getTimestamp())\n              min \u003d e.getTimestamp();\n          startTime \u003d min;\n          // selected start time as minimum timestamp of provided events\n          // write start time to db and cache\n          writeBatch.put(b, writeReverseOrderedLong(startTime));\n          startTimeCache.put(entity, startTime);\n        } else {\n          // found the start time in the db\n          startTime \u003d readReverseOrderedLong(v, 0);\n          if (writeBatch !\u003d null) {\n            // if this is a put, re-add the start time to the cache\n            startTimeCache.put(entity, startTime);\n          }\n        }\n      }\n    } else {\n      // start time is provided\n      // TODO: verify start time in db as well as cache?\n      if (startTimeCache.containsKey(entity)) {\n        // if the start time is already in the cache,\n        // and it is different from the provided start time,\n        // use the one from the cache\n        if (!startTime.equals(startTimeCache.get(entity)))\n          startTime \u003d startTimeCache.get(entity);\n      } else if (writeBatch !\u003d null) {\n        // if this is a put, write the provided start time to the db and the\n        // cache\n        byte[] b \u003d createStartTimeLookupKey(entity.getId(), entity.getType());\n        writeBatch.put(b, writeReverseOrderedLong(startTime));\n        startTimeCache.put(entity, startTime);\n      }\n    }\n    return writeReverseOrderedLong(startTime);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/apptimeline/LeveldbApplicationTimelineStore.java"
    }
  }
}