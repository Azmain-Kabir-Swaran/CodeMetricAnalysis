{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RouterWebServiceUtil.java",
  "functionName": "mergeMetrics",
  "functionId": "mergeMetrics___metrics-ClusterMetricsInfo__metricsResponse-ClusterMetricsInfo",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
  "functionStartLine": 395,
  "functionEndLine": 451,
  "numCommitsSeen": 8,
  "timeTaken": 1195,
  "changeHistory": [
    "acabc657ff5433f36ce1b238cecd3a3b5bbe87ae",
    "bac4e8cca8b54405f5e37b90e545b93bbadee0f4"
  ],
  "changeHistoryShort": {
    "acabc657ff5433f36ce1b238cecd3a3b5bbe87ae": "Ybodychange",
    "bac4e8cca8b54405f5e37b90e545b93bbadee0f4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "acabc657ff5433f36ce1b238cecd3a3b5bbe87ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7341. TestRouterWebServiceUtil#testMergeMetrics is flakey. (Robert Kanter via Haibo Chen)\n",
      "commitDate": "17/10/17 10:15 AM",
      "commitName": "acabc657ff5433f36ce1b238cecd3a3b5bbe87ae",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "03/10/17 10:53 PM",
      "commitNameOld": "acf5b880d8283f5a96455c89a6b1b548d0d8c0e7",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 13.47,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n   public static void mergeMetrics(ClusterMetricsInfo metrics,\n       ClusterMetricsInfo metricsResponse) {\n     metrics.setAppsSubmitted(\n         metrics.getAppsSubmitted() + metricsResponse.getAppsSubmitted());\n     metrics.setAppsCompleted(\n         metrics.getAppsCompleted() + metricsResponse.getAppsCompleted());\n     metrics.setAppsPending(\n         metrics.getAppsPending() + metricsResponse.getAppsPending());\n     metrics.setAppsRunning(\n         metrics.getAppsRunning() + metricsResponse.getAppsRunning());\n     metrics.setAppsFailed(\n         metrics.getAppsFailed() + metricsResponse.getAppsFailed());\n     metrics.setAppsKilled(\n         metrics.getAppsKilled() + metricsResponse.getAppsKilled());\n \n     metrics.setReservedMB(\n         metrics.getReservedMB() + metricsResponse.getReservedMB());\n     metrics.setAvailableMB(\n         metrics.getAvailableMB() + metricsResponse.getAvailableMB());\n     metrics.setAllocatedMB(\n         metrics.getAllocatedMB() + metricsResponse.getAllocatedMB());\n \n     metrics.setReservedVirtualCores(metrics.getReservedVirtualCores()\n         + metricsResponse.getReservedVirtualCores());\n     metrics.setAvailableVirtualCores(metrics.getAvailableVirtualCores()\n         + metricsResponse.getAvailableVirtualCores());\n     metrics.setAllocatedVirtualCores(metrics.getAllocatedVirtualCores()\n         + metricsResponse.getAllocatedVirtualCores());\n \n     metrics.setContainersAllocated(metrics.getContainersAllocated()\n         + metricsResponse.getContainersAllocated());\n     metrics.setContainersReserved(metrics.getReservedContainers()\n         + metricsResponse.getReservedContainers());\n     metrics.setContainersPending(metrics.getPendingContainers()\n         + metricsResponse.getPendingContainers());\n \n-    metrics.setTotalMB(metrics.getTotalMB() + metricsResponse.getTotalMB());\n-    metrics.setTotalVirtualCores(\n-        metrics.getTotalVirtualCores() + metrics.getTotalVirtualCores());\n-    metrics.setTotalNodes(metrics.getTotalNodes() + metrics.getTotalNodes());\n-    metrics.setLostNodes(metrics.getLostNodes() + metrics.getLostNodes());\n-    metrics.setUnhealthyNodes(\n-        metrics.getUnhealthyNodes() + metrics.getUnhealthyNodes());\n-    metrics.setDecommissioningNodes(\n-        metrics.getDecommissioningNodes() + metrics.getDecommissioningNodes());\n-    metrics.setDecommissionedNodes(\n-        metrics.getDecommissionedNodes() + metrics.getDecommissionedNodes());\n-    metrics.setRebootedNodes(\n-        metrics.getRebootedNodes() + metrics.getRebootedNodes());\n-    metrics.setActiveNodes(metrics.getActiveNodes() + metrics.getActiveNodes());\n-    metrics.setShutdownNodes(\n-        metrics.getShutdownNodes() + metrics.getShutdownNodes());\n+    metrics.setTotalMB(metrics.getTotalMB()\n+        + metricsResponse.getTotalMB());\n+    metrics.setTotalVirtualCores(metrics.getTotalVirtualCores()\n+        + metricsResponse.getTotalVirtualCores());\n+    metrics.setTotalNodes(metrics.getTotalNodes()\n+        + metricsResponse.getTotalNodes());\n+    metrics.setLostNodes(metrics.getLostNodes()\n+        + metricsResponse.getLostNodes());\n+    metrics.setUnhealthyNodes(metrics.getUnhealthyNodes()\n+        + metricsResponse.getUnhealthyNodes());\n+    metrics.setDecommissioningNodes(metrics.getDecommissioningNodes()\n+        + metricsResponse.getDecommissioningNodes());\n+    metrics.setDecommissionedNodes(metrics.getDecommissionedNodes()\n+        + metricsResponse.getDecommissionedNodes());\n+    metrics.setRebootedNodes(metrics.getRebootedNodes()\n+        + metricsResponse.getRebootedNodes());\n+    metrics.setActiveNodes(metrics.getActiveNodes()\n+        + metricsResponse.getActiveNodes());\n+    metrics.setShutdownNodes(metrics.getShutdownNodes()\n+        + metricsResponse.getShutdownNodes());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void mergeMetrics(ClusterMetricsInfo metrics,\n      ClusterMetricsInfo metricsResponse) {\n    metrics.setAppsSubmitted(\n        metrics.getAppsSubmitted() + metricsResponse.getAppsSubmitted());\n    metrics.setAppsCompleted(\n        metrics.getAppsCompleted() + metricsResponse.getAppsCompleted());\n    metrics.setAppsPending(\n        metrics.getAppsPending() + metricsResponse.getAppsPending());\n    metrics.setAppsRunning(\n        metrics.getAppsRunning() + metricsResponse.getAppsRunning());\n    metrics.setAppsFailed(\n        metrics.getAppsFailed() + metricsResponse.getAppsFailed());\n    metrics.setAppsKilled(\n        metrics.getAppsKilled() + metricsResponse.getAppsKilled());\n\n    metrics.setReservedMB(\n        metrics.getReservedMB() + metricsResponse.getReservedMB());\n    metrics.setAvailableMB(\n        metrics.getAvailableMB() + metricsResponse.getAvailableMB());\n    metrics.setAllocatedMB(\n        metrics.getAllocatedMB() + metricsResponse.getAllocatedMB());\n\n    metrics.setReservedVirtualCores(metrics.getReservedVirtualCores()\n        + metricsResponse.getReservedVirtualCores());\n    metrics.setAvailableVirtualCores(metrics.getAvailableVirtualCores()\n        + metricsResponse.getAvailableVirtualCores());\n    metrics.setAllocatedVirtualCores(metrics.getAllocatedVirtualCores()\n        + metricsResponse.getAllocatedVirtualCores());\n\n    metrics.setContainersAllocated(metrics.getContainersAllocated()\n        + metricsResponse.getContainersAllocated());\n    metrics.setContainersReserved(metrics.getReservedContainers()\n        + metricsResponse.getReservedContainers());\n    metrics.setContainersPending(metrics.getPendingContainers()\n        + metricsResponse.getPendingContainers());\n\n    metrics.setTotalMB(metrics.getTotalMB()\n        + metricsResponse.getTotalMB());\n    metrics.setTotalVirtualCores(metrics.getTotalVirtualCores()\n        + metricsResponse.getTotalVirtualCores());\n    metrics.setTotalNodes(metrics.getTotalNodes()\n        + metricsResponse.getTotalNodes());\n    metrics.setLostNodes(metrics.getLostNodes()\n        + metricsResponse.getLostNodes());\n    metrics.setUnhealthyNodes(metrics.getUnhealthyNodes()\n        + metricsResponse.getUnhealthyNodes());\n    metrics.setDecommissioningNodes(metrics.getDecommissioningNodes()\n        + metricsResponse.getDecommissioningNodes());\n    metrics.setDecommissionedNodes(metrics.getDecommissionedNodes()\n        + metricsResponse.getDecommissionedNodes());\n    metrics.setRebootedNodes(metrics.getRebootedNodes()\n        + metricsResponse.getRebootedNodes());\n    metrics.setActiveNodes(metrics.getActiveNodes()\n        + metricsResponse.getActiveNodes());\n    metrics.setShutdownNodes(metrics.getShutdownNodes()\n        + metricsResponse.getShutdownNodes());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java",
      "extendedDetails": {}
    },
    "bac4e8cca8b54405f5e37b90e545b93bbadee0f4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7095. Federation: routing getNode/getNodes/getMetrics REST invocations transparently to multiple RMs. (Giovanni Matteo Fumarola via Subru).\n",
      "commitDate": "31/08/17 3:05 PM",
      "commitName": "bac4e8cca8b54405f5e37b90e545b93bbadee0f4",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,53 @@\n+  public static void mergeMetrics(ClusterMetricsInfo metrics,\n+      ClusterMetricsInfo metricsResponse) {\n+    metrics.setAppsSubmitted(\n+        metrics.getAppsSubmitted() + metricsResponse.getAppsSubmitted());\n+    metrics.setAppsCompleted(\n+        metrics.getAppsCompleted() + metricsResponse.getAppsCompleted());\n+    metrics.setAppsPending(\n+        metrics.getAppsPending() + metricsResponse.getAppsPending());\n+    metrics.setAppsRunning(\n+        metrics.getAppsRunning() + metricsResponse.getAppsRunning());\n+    metrics.setAppsFailed(\n+        metrics.getAppsFailed() + metricsResponse.getAppsFailed());\n+    metrics.setAppsKilled(\n+        metrics.getAppsKilled() + metricsResponse.getAppsKilled());\n+\n+    metrics.setReservedMB(\n+        metrics.getReservedMB() + metricsResponse.getReservedMB());\n+    metrics.setAvailableMB(\n+        metrics.getAvailableMB() + metricsResponse.getAvailableMB());\n+    metrics.setAllocatedMB(\n+        metrics.getAllocatedMB() + metricsResponse.getAllocatedMB());\n+\n+    metrics.setReservedVirtualCores(metrics.getReservedVirtualCores()\n+        + metricsResponse.getReservedVirtualCores());\n+    metrics.setAvailableVirtualCores(metrics.getAvailableVirtualCores()\n+        + metricsResponse.getAvailableVirtualCores());\n+    metrics.setAllocatedVirtualCores(metrics.getAllocatedVirtualCores()\n+        + metricsResponse.getAllocatedVirtualCores());\n+\n+    metrics.setContainersAllocated(metrics.getContainersAllocated()\n+        + metricsResponse.getContainersAllocated());\n+    metrics.setContainersReserved(metrics.getReservedContainers()\n+        + metricsResponse.getReservedContainers());\n+    metrics.setContainersPending(metrics.getPendingContainers()\n+        + metricsResponse.getPendingContainers());\n+\n+    metrics.setTotalMB(metrics.getTotalMB() + metricsResponse.getTotalMB());\n+    metrics.setTotalVirtualCores(\n+        metrics.getTotalVirtualCores() + metrics.getTotalVirtualCores());\n+    metrics.setTotalNodes(metrics.getTotalNodes() + metrics.getTotalNodes());\n+    metrics.setLostNodes(metrics.getLostNodes() + metrics.getLostNodes());\n+    metrics.setUnhealthyNodes(\n+        metrics.getUnhealthyNodes() + metrics.getUnhealthyNodes());\n+    metrics.setDecommissioningNodes(\n+        metrics.getDecommissioningNodes() + metrics.getDecommissioningNodes());\n+    metrics.setDecommissionedNodes(\n+        metrics.getDecommissionedNodes() + metrics.getDecommissionedNodes());\n+    metrics.setRebootedNodes(\n+        metrics.getRebootedNodes() + metrics.getRebootedNodes());\n+    metrics.setActiveNodes(metrics.getActiveNodes() + metrics.getActiveNodes());\n+    metrics.setShutdownNodes(\n+        metrics.getShutdownNodes() + metrics.getShutdownNodes());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void mergeMetrics(ClusterMetricsInfo metrics,\n      ClusterMetricsInfo metricsResponse) {\n    metrics.setAppsSubmitted(\n        metrics.getAppsSubmitted() + metricsResponse.getAppsSubmitted());\n    metrics.setAppsCompleted(\n        metrics.getAppsCompleted() + metricsResponse.getAppsCompleted());\n    metrics.setAppsPending(\n        metrics.getAppsPending() + metricsResponse.getAppsPending());\n    metrics.setAppsRunning(\n        metrics.getAppsRunning() + metricsResponse.getAppsRunning());\n    metrics.setAppsFailed(\n        metrics.getAppsFailed() + metricsResponse.getAppsFailed());\n    metrics.setAppsKilled(\n        metrics.getAppsKilled() + metricsResponse.getAppsKilled());\n\n    metrics.setReservedMB(\n        metrics.getReservedMB() + metricsResponse.getReservedMB());\n    metrics.setAvailableMB(\n        metrics.getAvailableMB() + metricsResponse.getAvailableMB());\n    metrics.setAllocatedMB(\n        metrics.getAllocatedMB() + metricsResponse.getAllocatedMB());\n\n    metrics.setReservedVirtualCores(metrics.getReservedVirtualCores()\n        + metricsResponse.getReservedVirtualCores());\n    metrics.setAvailableVirtualCores(metrics.getAvailableVirtualCores()\n        + metricsResponse.getAvailableVirtualCores());\n    metrics.setAllocatedVirtualCores(metrics.getAllocatedVirtualCores()\n        + metricsResponse.getAllocatedVirtualCores());\n\n    metrics.setContainersAllocated(metrics.getContainersAllocated()\n        + metricsResponse.getContainersAllocated());\n    metrics.setContainersReserved(metrics.getReservedContainers()\n        + metricsResponse.getReservedContainers());\n    metrics.setContainersPending(metrics.getPendingContainers()\n        + metricsResponse.getPendingContainers());\n\n    metrics.setTotalMB(metrics.getTotalMB() + metricsResponse.getTotalMB());\n    metrics.setTotalVirtualCores(\n        metrics.getTotalVirtualCores() + metrics.getTotalVirtualCores());\n    metrics.setTotalNodes(metrics.getTotalNodes() + metrics.getTotalNodes());\n    metrics.setLostNodes(metrics.getLostNodes() + metrics.getLostNodes());\n    metrics.setUnhealthyNodes(\n        metrics.getUnhealthyNodes() + metrics.getUnhealthyNodes());\n    metrics.setDecommissioningNodes(\n        metrics.getDecommissioningNodes() + metrics.getDecommissioningNodes());\n    metrics.setDecommissionedNodes(\n        metrics.getDecommissionedNodes() + metrics.getDecommissionedNodes());\n    metrics.setRebootedNodes(\n        metrics.getRebootedNodes() + metrics.getRebootedNodes());\n    metrics.setActiveNodes(metrics.getActiveNodes() + metrics.getActiveNodes());\n    metrics.setShutdownNodes(\n        metrics.getShutdownNodes() + metrics.getShutdownNodes());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-router/src/main/java/org/apache/hadoop/yarn/server/router/webapp/RouterWebServiceUtil.java"
    }
  }
}