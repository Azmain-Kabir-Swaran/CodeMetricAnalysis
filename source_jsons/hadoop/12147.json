{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataNode.java",
  "functionName": "initStorage",
  "functionId": "initStorage___nsInfo-NamespaceInfo(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
  "functionStartLine": 1754,
  "functionEndLine": 1783,
  "numCommitsSeen": 358,
  "timeTaken": 2143,
  "changeHistory": [
    "dfcb331ba3516264398121c9f23af3a79c0509cc"
  ],
  "changeHistoryShort": {
    "dfcb331ba3516264398121c9f23af3a79c0509cc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dfcb331ba3516264398121c9f23af3a79c0509cc": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13076: [SPS]: Addendum. Resolve conflicts after rebasing branch to trunk. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "dfcb331ba3516264398121c9f23af3a79c0509cc",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,30 @@\n+  private void initStorage(final NamespaceInfo nsInfo) throws IOException {\n+    final FsDatasetSpi.Factory\u003c? extends FsDatasetSpi\u003c?\u003e\u003e factory\n+        \u003d FsDatasetSpi.Factory.getFactory(getConf());\n+    \n+    if (!factory.isSimulated()) {\n+      final StartupOption startOpt \u003d getStartupOption(getConf());\n+      if (startOpt \u003d\u003d null) {\n+        throw new IOException(\"Startup option not set.\");\n+      }\n+      final String bpid \u003d nsInfo.getBlockPoolID();\n+      //read storage info, lock data dirs and transition fs state if necessary\n+      synchronized (this) {\n+        storage.recoverTransitionRead(this, nsInfo, dataDirs, startOpt);\n+      }\n+      final StorageInfo bpStorage \u003d storage.getBPStorage(bpid);\n+      LOG.info(\"Setting up storage: nsid\u003d{};bpid\u003d{};lv\u003d{};\" +\n+              \"nsInfo\u003d{};dnuuid\u003d{}\",\n+          bpStorage.getNamespaceID(), bpid, storage.getLayoutVersion(),\n+          nsInfo, storage.getDatanodeUuid());\n+    }\n+\n+    // If this is a newly formatted DataNode then assign a new DatanodeUuid.\n+    checkDatanodeUuid();\n+\n+    synchronized(this)  {\n+      if (data \u003d\u003d null) {\n+        data \u003d factory.newInstance(this, storage, getConf());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initStorage(final NamespaceInfo nsInfo) throws IOException {\n    final FsDatasetSpi.Factory\u003c? extends FsDatasetSpi\u003c?\u003e\u003e factory\n        \u003d FsDatasetSpi.Factory.getFactory(getConf());\n    \n    if (!factory.isSimulated()) {\n      final StartupOption startOpt \u003d getStartupOption(getConf());\n      if (startOpt \u003d\u003d null) {\n        throw new IOException(\"Startup option not set.\");\n      }\n      final String bpid \u003d nsInfo.getBlockPoolID();\n      //read storage info, lock data dirs and transition fs state if necessary\n      synchronized (this) {\n        storage.recoverTransitionRead(this, nsInfo, dataDirs, startOpt);\n      }\n      final StorageInfo bpStorage \u003d storage.getBPStorage(bpid);\n      LOG.info(\"Setting up storage: nsid\u003d{};bpid\u003d{};lv\u003d{};\" +\n              \"nsInfo\u003d{};dnuuid\u003d{}\",\n          bpStorage.getNamespaceID(), bpid, storage.getLayoutVersion(),\n          nsInfo, storage.getDatanodeUuid());\n    }\n\n    // If this is a newly formatted DataNode then assign a new DatanodeUuid.\n    checkDatanodeUuid();\n\n    synchronized(this)  {\n      if (data \u003d\u003d null) {\n        data \u003d factory.newInstance(this, storage, getConf());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
    }
  }
}