{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSConfigToCSConfigConverter.java",
  "functionName": "isDrfUsed",
  "functionId": "isDrfUsed___fs-FairScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
  "functionStartLine": 389,
  "functionEndLine": 397,
  "numCommitsSeen": 9,
  "timeTaken": 1703,
  "changeHistory": [
    "cb6399c1095af52112cbf4356572d99923d694ae",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b"
  ],
  "changeHistoryShort": {
    "cb6399c1095af52112cbf4356572d99923d694ae": "Ybodychange",
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cb6399c1095af52112cbf4356572d99923d694ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10257. FS-CS converter: skip increment properties for mem/vcores and fix DRF check. Contributed by Peter Bacsko\n",
      "commitDate": "05/05/20 7:00 AM",
      "commitName": "cb6399c1095af52112cbf4356572d99923d694ae",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "26/03/20 4:35 AM",
      "commitNameOld": "9a297ff31d3e5d16ac648de584d430fc856afefe",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 40.1,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,9 @@\n   private boolean isDrfUsed(FairScheduler fs) {\n     FSQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n     AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n \n     String defaultPolicy \u003d allocConf.getDefaultSchedulingPolicy().getName();\n \n-    if (DominantResourceFairnessPolicy.NAME.equals(defaultPolicy)) {\n-      return true;\n-    } else {\n-      return isDrfUsedOnQueueLevel(rootQueue);\n-    }\n+    return DominantResourceFairnessPolicy.NAME.equals(defaultPolicy) ||\n+        isDrfUsedOnQueueLevel(rootQueue);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isDrfUsed(FairScheduler fs) {\n    FSQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n\n    String defaultPolicy \u003d allocConf.getDefaultSchedulingPolicy().getName();\n\n    return DominantResourceFairnessPolicy.NAME.equals(defaultPolicy) ||\n        isDrfUsedOnQueueLevel(rootQueue);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java",
      "extendedDetails": {}
    },
    "ca297680352b7bf20ca6cd98ff81bb68e1358c5b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-10085. FS-CS converter: remove mixed ordering policy check. Contributed by Peter Bacsko\n",
      "commitDate": "28/01/20 6:22 AM",
      "commitName": "ca297680352b7bf20ca6cd98ff81bb68e1358c5b",
      "commitAuthor": "Szilard Nemeth",
      "diff": "@@ -0,0 +1,12 @@\n+  private boolean isDrfUsed(FairScheduler fs) {\n+    FSQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n+    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n+\n+    String defaultPolicy \u003d allocConf.getDefaultSchedulingPolicy().getName();\n+\n+    if (DominantResourceFairnessPolicy.NAME.equals(defaultPolicy)) {\n+      return true;\n+    } else {\n+      return isDrfUsedOnQueueLevel(rootQueue);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isDrfUsed(FairScheduler fs) {\n    FSQueue rootQueue \u003d fs.getQueueManager().getRootQueue();\n    AllocationConfiguration allocConf \u003d fs.getAllocationConfiguration();\n\n    String defaultPolicy \u003d allocConf.getDefaultSchedulingPolicy().getName();\n\n    if (DominantResourceFairnessPolicy.NAME.equals(defaultPolicy)) {\n      return true;\n    } else {\n      return isDrfUsedOnQueueLevel(rootQueue);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/converter/FSConfigToCSConfigConverter.java"
    }
  }
}