{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuthenticationFilter.java",
  "functionName": "getToken",
  "functionId": "getToken___request-HttpServletRequest",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
  "functionStartLine": 427,
  "functionEndLine": 458,
  "numCommitsSeen": 36,
  "timeTaken": 2064,
  "changeHistory": [
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
    "f6f3a447bf3b2900a2e9a0615ad9877f9310e062",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af"
  ],
  "changeHistoryShort": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": "Ybodychange",
    "f6f3a447bf3b2900a2e9a0615ad9877f9310e062": "Ybodychange",
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12082 Support multiple authentication schemes via AuthenticationFilter\n",
      "commitDate": "18/10/16 6:32 PM",
      "commitName": "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
      "commitAuthor": "Benoy Antony",
      "commitDateOld": "16/09/16 2:53 PM",
      "commitNameOld": "f6f3a447bf3b2900a2e9a0615ad9877f9310e062",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 32.15,
      "commitsBetweenForRepo": 229,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,32 @@\n   protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n     AuthenticationToken token \u003d null;\n     String tokenStr \u003d null;\n     Cookie[] cookies \u003d request.getCookies();\n     if (cookies !\u003d null) {\n       for (Cookie cookie : cookies) {\n         if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n           tokenStr \u003d cookie.getValue();\n           if (tokenStr.isEmpty()) {\n             throw new AuthenticationException(\"Unauthorized access\");\n           }\n           try {\n             tokenStr \u003d signer.verifyAndExtract(tokenStr);\n           } catch (SignerException ex) {\n             throw new AuthenticationException(ex);\n           }\n           break;\n         }\n       }\n     }\n     if (tokenStr !\u003d null) {\n       token \u003d AuthenticationToken.parse(tokenStr);\n-      if (!token.getType().equals(authHandler.getType())) {\n+      boolean match \u003d verifyTokenType(getAuthenticationHandler(), token);\n+      if (!match) {\n         throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n       }\n       if (token.isExpired()) {\n         throw new AuthenticationException(\"AuthenticationToken expired\");\n       }\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n    AuthenticationToken token \u003d null;\n    String tokenStr \u003d null;\n    Cookie[] cookies \u003d request.getCookies();\n    if (cookies !\u003d null) {\n      for (Cookie cookie : cookies) {\n        if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n          tokenStr \u003d cookie.getValue();\n          if (tokenStr.isEmpty()) {\n            throw new AuthenticationException(\"Unauthorized access\");\n          }\n          try {\n            tokenStr \u003d signer.verifyAndExtract(tokenStr);\n          } catch (SignerException ex) {\n            throw new AuthenticationException(ex);\n          }\n          break;\n        }\n      }\n    }\n    if (tokenStr !\u003d null) {\n      token \u003d AuthenticationToken.parse(tokenStr);\n      boolean match \u003d verifyTokenType(getAuthenticationHandler(), token);\n      if (!match) {\n        throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n      }\n      if (token.isExpired()) {\n        throw new AuthenticationException(\"AuthenticationToken expired\");\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "f6f3a447bf3b2900a2e9a0615ad9877f9310e062": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13580. If user is unauthorized, log \"unauthorized\" instead of \"Invalid signed text:\". Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "16/09/16 2:53 PM",
      "commitName": "f6f3a447bf3b2900a2e9a0615ad9877f9310e062",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "07/04/16 11:50 PM",
      "commitNameOld": "594c70f779b277bd0b9d0a5dc98c3e9cc49b7e91",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 161.63,
      "commitsBetweenForRepo": 1169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n     AuthenticationToken token \u003d null;\n     String tokenStr \u003d null;\n     Cookie[] cookies \u003d request.getCookies();\n     if (cookies !\u003d null) {\n       for (Cookie cookie : cookies) {\n         if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n           tokenStr \u003d cookie.getValue();\n+          if (tokenStr.isEmpty()) {\n+            throw new AuthenticationException(\"Unauthorized access\");\n+          }\n           try {\n             tokenStr \u003d signer.verifyAndExtract(tokenStr);\n           } catch (SignerException ex) {\n             throw new AuthenticationException(ex);\n           }\n           break;\n         }\n       }\n     }\n     if (tokenStr !\u003d null) {\n       token \u003d AuthenticationToken.parse(tokenStr);\n       if (!token.getType().equals(authHandler.getType())) {\n         throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n       }\n       if (token.isExpired()) {\n         throw new AuthenticationException(\"AuthenticationToken expired\");\n       }\n     }\n     return token;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n    AuthenticationToken token \u003d null;\n    String tokenStr \u003d null;\n    Cookie[] cookies \u003d request.getCookies();\n    if (cookies !\u003d null) {\n      for (Cookie cookie : cookies) {\n        if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n          tokenStr \u003d cookie.getValue();\n          if (tokenStr.isEmpty()) {\n            throw new AuthenticationException(\"Unauthorized access\");\n          }\n          try {\n            tokenStr \u003d signer.verifyAndExtract(tokenStr);\n          } catch (SignerException ex) {\n            throw new AuthenticationException(ex);\n          }\n          break;\n        }\n      }\n    }\n    if (tokenStr !\u003d null) {\n      token \u003d AuthenticationToken.parse(tokenStr);\n      if (!token.getType().equals(authHandler.getType())) {\n        throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n      }\n      if (token.isExpired()) {\n        throw new AuthenticationException(\"AuthenticationToken expired\");\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {}
    },
    "2b016dac8232e0f5c43293adcbdf7164f5fca74c": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7579. Rename package names from alfredo to auth.  Contributed by Alejandro Abdelnur\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1163852 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/11 3:40 PM",
      "commitName": "2b016dac8232e0f5c43293adcbdf7164f5fca74c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "31/08/11 2:18 PM",
      "commitNameOld": "4f1a0e36fab1f18e6e2c5fcc72cd9a7634967fcd",
      "commitAuthorOld": "Konstantin Shvachko",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n    AuthenticationToken token \u003d null;\n    String tokenStr \u003d null;\n    Cookie[] cookies \u003d request.getCookies();\n    if (cookies !\u003d null) {\n      for (Cookie cookie : cookies) {\n        if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n          tokenStr \u003d cookie.getValue();\n          try {\n            tokenStr \u003d signer.verifyAndExtract(tokenStr);\n          } catch (SignerException ex) {\n            throw new AuthenticationException(ex);\n          }\n          break;\n        }\n      }\n    }\n    if (tokenStr !\u003d null) {\n      token \u003d AuthenticationToken.parse(tokenStr);\n      if (!token.getType().equals(authHandler.getType())) {\n        throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n      }\n      if (token.isExpired()) {\n        throw new AuthenticationException(\"AuthenticationToken expired\");\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java",
      "extendedDetails": {
        "oldPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/AuthenticationFilter.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n    AuthenticationToken token \u003d null;\n    String tokenStr \u003d null;\n    Cookie[] cookies \u003d request.getCookies();\n    if (cookies !\u003d null) {\n      for (Cookie cookie : cookies) {\n        if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n          tokenStr \u003d cookie.getValue();\n          try {\n            tokenStr \u003d signer.verifyAndExtract(tokenStr);\n          } catch (SignerException ex) {\n            throw new AuthenticationException(ex);\n          }\n          break;\n        }\n      }\n    }\n    if (tokenStr !\u003d null) {\n      token \u003d AuthenticationToken.parse(tokenStr);\n      if (!token.getType().equals(authHandler.getType())) {\n        throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n      }\n      if (token.isExpired()) {\n        throw new AuthenticationException(\"AuthenticationToken expired\");\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java",
      "extendedDetails": {
        "oldPath": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java",
        "newPath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java"
      }
    },
    "a0f120ce68dddb0cb31b64c89f3224313f3cb5af": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7119. add Kerberos HTTP SPNEGO authentication support to Hadoop JT/NN/DN/TT web-consoles. (Alejandro Abdelnur via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159804 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 3:31 PM",
      "commitName": "a0f120ce68dddb0cb31b64c89f3224313f3cb5af",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,28 @@\n+  protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n+    AuthenticationToken token \u003d null;\n+    String tokenStr \u003d null;\n+    Cookie[] cookies \u003d request.getCookies();\n+    if (cookies !\u003d null) {\n+      for (Cookie cookie : cookies) {\n+        if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n+          tokenStr \u003d cookie.getValue();\n+          try {\n+            tokenStr \u003d signer.verifyAndExtract(tokenStr);\n+          } catch (SignerException ex) {\n+            throw new AuthenticationException(ex);\n+          }\n+          break;\n+        }\n+      }\n+    }\n+    if (tokenStr !\u003d null) {\n+      token \u003d AuthenticationToken.parse(tokenStr);\n+      if (!token.getType().equals(authHandler.getType())) {\n+        throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n+      }\n+      if (token.isExpired()) {\n+        throw new AuthenticationException(\"AuthenticationToken expired\");\n+      }\n+    }\n+    return token;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected AuthenticationToken getToken(HttpServletRequest request) throws IOException, AuthenticationException {\n    AuthenticationToken token \u003d null;\n    String tokenStr \u003d null;\n    Cookie[] cookies \u003d request.getCookies();\n    if (cookies !\u003d null) {\n      for (Cookie cookie : cookies) {\n        if (cookie.getName().equals(AuthenticatedURL.AUTH_COOKIE)) {\n          tokenStr \u003d cookie.getValue();\n          try {\n            tokenStr \u003d signer.verifyAndExtract(tokenStr);\n          } catch (SignerException ex) {\n            throw new AuthenticationException(ex);\n          }\n          break;\n        }\n      }\n    }\n    if (tokenStr !\u003d null) {\n      token \u003d AuthenticationToken.parse(tokenStr);\n      if (!token.getType().equals(authHandler.getType())) {\n        throw new AuthenticationException(\"Invalid AuthenticationToken type\");\n      }\n      if (token.isExpired()) {\n        throw new AuthenticationException(\"AuthenticationToken expired\");\n      }\n    }\n    return token;\n  }",
      "path": "hadoop-alfredo/src/main/java/org/apache/hadoop/alfredo/server/AuthenticationFilter.java"
    }
  }
}