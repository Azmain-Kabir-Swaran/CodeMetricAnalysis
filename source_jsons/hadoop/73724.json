{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProtobufRpcEngine.java",
  "functionName": "getProtocolImpl",
  "functionId": "getProtocolImpl___server-RPC.Server__protoName-String__clientVersion-long",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
  "functionStartLine": 441,
  "functionEndLine": 459,
  "numCommitsSeen": 88,
  "timeTaken": 1820,
  "changeHistory": [
    "725623534ce7ab20c28af6e0cdf57bd7278551dd",
    "589c68ae09effd6c4f26505d61636f779c22e99f",
    "22d5944c42b4bef5144a9f6426751b15717c5a3e"
  ],
  "changeHistoryShort": {
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "589c68ae09effd6c4f26505d61636f779c22e99f": "Ybodychange",
    "22d5944c42b4bef5144a9f6426751b15717c5a3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 10:51 AM",
      "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 10:51 AM",
          "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "21/03/13 9:41 AM",
          "commitNameOld": "357472001725e786f28b27560bac8aca54c3c983",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 44.05,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n       private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n-          String protoName, long version) throws IOException {\n-        ProtoNameVer pv \u003d new ProtoNameVer(protoName, version);\n+          String protoName, long clientVersion) throws RpcServerException {\n+        ProtoNameVer pv \u003d new ProtoNameVer(protoName, clientVersion);\n         ProtoClassProtoImpl impl \u003d \n             server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n         if (impl \u003d\u003d null) { // no match for Protocol AND Version\n           VerProtocolImpl highest \u003d \n               server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                   protoName);\n           if (highest \u003d\u003d null) {\n-            throw new IOException(\"Unknown protocol: \" + protoName);\n+            throw new RpcNoSuchProtocolException(\n+                \"Unknown protocol: \" + protoName);\n           }\n           // protocol supported but not the version that client wants\n-          throw new RPC.VersionMismatch(protoName, version,\n+          throw new RPC.VersionMismatch(protoName, clientVersion,\n               highest.version);\n         }\n         return impl;\n       }\n\\ No newline at end of file\n",
          "actualSource": "      private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n          String protoName, long clientVersion) throws RpcServerException {\n        ProtoNameVer pv \u003d new ProtoNameVer(protoName, clientVersion);\n        ProtoClassProtoImpl impl \u003d \n            server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n        if (impl \u003d\u003d null) { // no match for Protocol AND Version\n          VerProtocolImpl highest \u003d \n              server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                  protoName);\n          if (highest \u003d\u003d null) {\n            throw new RpcNoSuchProtocolException(\n                \"Unknown protocol: \" + protoName);\n          }\n          // protocol supported but not the version that client wants\n          throw new RPC.VersionMismatch(protoName, clientVersion,\n              highest.version);\n        }\n        return impl;\n      }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "[server-RPC.Server, protoName-String, version-long]",
            "newValue": "[server-RPC.Server, protoName-String, clientVersion-long]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 10:51 AM",
          "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "21/03/13 9:41 AM",
          "commitNameOld": "357472001725e786f28b27560bac8aca54c3c983",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 44.05,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n       private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n-          String protoName, long version) throws IOException {\n-        ProtoNameVer pv \u003d new ProtoNameVer(protoName, version);\n+          String protoName, long clientVersion) throws RpcServerException {\n+        ProtoNameVer pv \u003d new ProtoNameVer(protoName, clientVersion);\n         ProtoClassProtoImpl impl \u003d \n             server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n         if (impl \u003d\u003d null) { // no match for Protocol AND Version\n           VerProtocolImpl highest \u003d \n               server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                   protoName);\n           if (highest \u003d\u003d null) {\n-            throw new IOException(\"Unknown protocol: \" + protoName);\n+            throw new RpcNoSuchProtocolException(\n+                \"Unknown protocol: \" + protoName);\n           }\n           // protocol supported but not the version that client wants\n-          throw new RPC.VersionMismatch(protoName, version,\n+          throw new RPC.VersionMismatch(protoName, clientVersion,\n               highest.version);\n         }\n         return impl;\n       }\n\\ No newline at end of file\n",
          "actualSource": "      private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n          String protoName, long clientVersion) throws RpcServerException {\n        ProtoNameVer pv \u003d new ProtoNameVer(protoName, clientVersion);\n        ProtoClassProtoImpl impl \u003d \n            server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n        if (impl \u003d\u003d null) { // no match for Protocol AND Version\n          VerProtocolImpl highest \u003d \n              server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                  protoName);\n          if (highest \u003d\u003d null) {\n            throw new RpcNoSuchProtocolException(\n                \"Unknown protocol: \" + protoName);\n          }\n          // protocol supported but not the version that client wants\n          throw new RPC.VersionMismatch(protoName, clientVersion,\n              highest.version);\n        }\n        return impl;\n      }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[RpcServerException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 10:51 AM",
          "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "21/03/13 9:41 AM",
          "commitNameOld": "357472001725e786f28b27560bac8aca54c3c983",
          "commitAuthorOld": "Sanjay Radia",
          "daysBetweenCommits": 44.05,
          "commitsBetweenForRepo": 258,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n       private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n-          String protoName, long version) throws IOException {\n-        ProtoNameVer pv \u003d new ProtoNameVer(protoName, version);\n+          String protoName, long clientVersion) throws RpcServerException {\n+        ProtoNameVer pv \u003d new ProtoNameVer(protoName, clientVersion);\n         ProtoClassProtoImpl impl \u003d \n             server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n         if (impl \u003d\u003d null) { // no match for Protocol AND Version\n           VerProtocolImpl highest \u003d \n               server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                   protoName);\n           if (highest \u003d\u003d null) {\n-            throw new IOException(\"Unknown protocol: \" + protoName);\n+            throw new RpcNoSuchProtocolException(\n+                \"Unknown protocol: \" + protoName);\n           }\n           // protocol supported but not the version that client wants\n-          throw new RPC.VersionMismatch(protoName, version,\n+          throw new RPC.VersionMismatch(protoName, clientVersion,\n               highest.version);\n         }\n         return impl;\n       }\n\\ No newline at end of file\n",
          "actualSource": "      private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n          String protoName, long clientVersion) throws RpcServerException {\n        ProtoNameVer pv \u003d new ProtoNameVer(protoName, clientVersion);\n        ProtoClassProtoImpl impl \u003d \n            server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n        if (impl \u003d\u003d null) { // no match for Protocol AND Version\n          VerProtocolImpl highest \u003d \n              server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                  protoName);\n          if (highest \u003d\u003d null) {\n            throw new RpcNoSuchProtocolException(\n                \"Unknown protocol: \" + protoName);\n          }\n          // protocol supported but not the version that client wants\n          throw new RPC.VersionMismatch(protoName, clientVersion,\n              highest.version);\n        }\n        return impl;\n      }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
          "extendedDetails": {}
        }
      ]
    },
    "589c68ae09effd6c4f26505d61636f779c22e99f": {
      "type": "Ybodychange",
      "commitMessage": "    HADOOP-8285 Use ProtoBuf for RpcPayLoadHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1329319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/12 9:34 AM",
      "commitName": "589c68ae09effd6c4f26505d61636f779c22e99f",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "17/04/12 8:04 AM",
      "commitNameOld": "e8eed2f62d30e0bf2f915ee3ad6b9c9f6d2d97cb",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 6.06,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n       private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n           String protoName, long version) throws IOException {\n         ProtoNameVer pv \u003d new ProtoNameVer(protoName, version);\n         ProtoClassProtoImpl impl \u003d \n-            server.getProtocolImplMap(RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n+            server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n         if (impl \u003d\u003d null) { // no match for Protocol AND Version\n           VerProtocolImpl highest \u003d \n-              server.getHighestSupportedProtocol(RpcKind.RPC_PROTOCOL_BUFFER, \n+              server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                   protoName);\n           if (highest \u003d\u003d null) {\n             throw new IOException(\"Unknown protocol: \" + protoName);\n           }\n           // protocol supported but not the version that client wants\n           throw new RPC.VersionMismatch(protoName, version,\n               highest.version);\n         }\n         return impl;\n       }\n\\ No newline at end of file\n",
      "actualSource": "      private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n          String protoName, long version) throws IOException {\n        ProtoNameVer pv \u003d new ProtoNameVer(protoName, version);\n        ProtoClassProtoImpl impl \u003d \n            server.getProtocolImplMap(RPC.RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n        if (impl \u003d\u003d null) { // no match for Protocol AND Version\n          VerProtocolImpl highest \u003d \n              server.getHighestSupportedProtocol(RPC.RpcKind.RPC_PROTOCOL_BUFFER, \n                  protoName);\n          if (highest \u003d\u003d null) {\n            throw new IOException(\"Unknown protocol: \" + protoName);\n          }\n          // protocol supported but not the version that client wants\n          throw new RPC.VersionMismatch(protoName, version,\n              highest.version);\n        }\n        return impl;\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java",
      "extendedDetails": {}
    },
    "22d5944c42b4bef5144a9f6426751b15717c5a3e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8085. Add RPC metrics to ProtobufRpcEngine. Contributed by Hari Mankude.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1293071 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/02/12 8:05 PM",
      "commitName": "22d5944c42b4bef5144a9f6426751b15717c5a3e",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,18 @@\n+      private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n+          String protoName, long version) throws IOException {\n+        ProtoNameVer pv \u003d new ProtoNameVer(protoName, version);\n+        ProtoClassProtoImpl impl \u003d \n+            server.getProtocolImplMap(RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n+        if (impl \u003d\u003d null) { // no match for Protocol AND Version\n+          VerProtocolImpl highest \u003d \n+              server.getHighestSupportedProtocol(RpcKind.RPC_PROTOCOL_BUFFER, \n+                  protoName);\n+          if (highest \u003d\u003d null) {\n+            throw new IOException(\"Unknown protocol: \" + protoName);\n+          }\n+          // protocol supported but not the version that client wants\n+          throw new RPC.VersionMismatch(protoName, version,\n+              highest.version);\n+        }\n+        return impl;\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      private static ProtoClassProtoImpl getProtocolImpl(RPC.Server server,\n          String protoName, long version) throws IOException {\n        ProtoNameVer pv \u003d new ProtoNameVer(protoName, version);\n        ProtoClassProtoImpl impl \u003d \n            server.getProtocolImplMap(RpcKind.RPC_PROTOCOL_BUFFER).get(pv);\n        if (impl \u003d\u003d null) { // no match for Protocol AND Version\n          VerProtocolImpl highest \u003d \n              server.getHighestSupportedProtocol(RpcKind.RPC_PROTOCOL_BUFFER, \n                  protoName);\n          if (highest \u003d\u003d null) {\n            throw new IOException(\"Unknown protocol: \" + protoName);\n          }\n          // protocol supported but not the version that client wants\n          throw new RPC.VersionMismatch(protoName, version,\n              highest.version);\n        }\n        return impl;\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/ProtobufRpcEngine.java"
    }
  }
}