{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FsDatasetImpl.java",
  "functionName": "finalizeBlock",
  "functionId": "finalizeBlock___b-ExtendedBlock__fsyncDir-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
  "functionStartLine": 1789,
  "functionEndLine": 1826,
  "numCommitsSeen": 388,
  "timeTaken": 12806,
  "changeHistory": [
    "d3b595157256e198c4340d555e14ad6144f2eaa1",
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
    "69afa26f19adad4c630a307c274130eb8b697141",
    "1543d0f5be6a02ad00e7a33e35d78af8516043e3",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
    "d4fb8821630f2da107b6c438a449c35df3686595",
    "bc13dfb1426944ce45293cb8f444239a7406762c",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "d3b595157256e198c4340d555e14ad6144f2eaa1": "Ybodychange",
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": "Ybodychange",
    "69afa26f19adad4c630a307c274130eb8b697141": "Ybodychange",
    "1543d0f5be6a02ad00e7a33e35d78af8516043e3": "Ymultichange(Yparameterchange,Ybodychange)",
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": "Ymultichange(Ymodifierchange,Ybodychange)",
    "d4fb8821630f2da107b6c438a449c35df3686595": "Ybodychange",
    "bc13dfb1426944ce45293cb8f444239a7406762c": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d3b595157256e198c4340d555e14ad6144f2eaa1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15242. Add metrics for operations hold lock times of FsDatasetImpl. Contributed by Xiaoqiao He.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nReviewed-by: Inigo Goiri \u003cinigoiri@apache.org\u003e\n",
      "commitDate": "01/04/20 4:36 PM",
      "commitName": "d3b595157256e198c4340d555e14ad6144f2eaa1",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "11/02/20 8:00 AM",
      "commitNameOld": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthorOld": "Stephen O\u0027Donnell",
      "daysBetweenCommits": 50.32,
      "commitsBetweenForRepo": 174,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,38 @@\n   public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n       throws IOException {\n     ReplicaInfo replicaInfo \u003d null;\n     ReplicaInfo finalizedReplicaInfo \u003d null;\n+    long startTimeMs \u003d Time.monotonicNow();\n     try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n       if (Thread.interrupted()) {\n         // Don\u0027t allow data modifications from interrupted threads\n         throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n       }\n       replicaInfo \u003d getReplicaInfo(b);\n       if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n         // this is legal, when recovery happens on a file that has\n         // been opened for append but never modified\n         return;\n       }\n       finalizedReplicaInfo \u003d finalizeReplica(b.getBlockPoolId(), replicaInfo);\n+    } finally {\n+      if (dataNodeMetrics !\u003d null) {\n+        long finalizeBlockMs \u003d Time.monotonicNow() - startTimeMs;\n+        dataNodeMetrics.addFinalizeBlockOp(finalizeBlockMs);\n+      }\n     }\n     /*\n      * Sync the directory after rename from tmp/rbw to Finalized if\n      * configured. Though rename should be atomic operation, sync on both\n      * dest and src directories are done because IOUtils.fsync() calls\n      * directory\u0027s channel sync, not the journal itself.\n      */\n     if (fsyncDir \u0026\u0026 finalizedReplicaInfo instanceof FinalizedReplica\n         \u0026\u0026 replicaInfo instanceof LocalReplica) {\n       FinalizedReplica finalizedReplica \u003d\n           (FinalizedReplica) finalizedReplicaInfo;\n       finalizedReplica.fsyncDirectory();\n       LocalReplica localReplica \u003d (LocalReplica) replicaInfo;\n       localReplica.fsyncDirectory();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n      throws IOException {\n    ReplicaInfo replicaInfo \u003d null;\n    ReplicaInfo finalizedReplicaInfo \u003d null;\n    long startTimeMs \u003d Time.monotonicNow();\n    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n      if (Thread.interrupted()) {\n        // Don\u0027t allow data modifications from interrupted threads\n        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n      }\n      replicaInfo \u003d getReplicaInfo(b);\n      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n        // this is legal, when recovery happens on a file that has\n        // been opened for append but never modified\n        return;\n      }\n      finalizedReplicaInfo \u003d finalizeReplica(b.getBlockPoolId(), replicaInfo);\n    } finally {\n      if (dataNodeMetrics !\u003d null) {\n        long finalizeBlockMs \u003d Time.monotonicNow() - startTimeMs;\n        dataNodeMetrics.addFinalizeBlockOp(finalizeBlockMs);\n      }\n    }\n    /*\n     * Sync the directory after rename from tmp/rbw to Finalized if\n     * configured. Though rename should be atomic operation, sync on both\n     * dest and src directories are done because IOUtils.fsync() calls\n     * directory\u0027s channel sync, not the journal itself.\n     */\n    if (fsyncDir \u0026\u0026 finalizedReplicaInfo instanceof FinalizedReplica\n        \u0026\u0026 replicaInfo instanceof LocalReplica) {\n      FinalizedReplica finalizedReplica \u003d\n          (FinalizedReplica) finalizedReplicaInfo;\n      finalizedReplica.fsyncDirectory();\n      LocalReplica localReplica \u003d (LocalReplica) replicaInfo;\n      localReplica.fsyncDirectory();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15150. Introduce read write lock to Datanode. Contributed Stephen O\u0027Donnell.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "11/02/20 8:00 AM",
      "commitName": "d7c136b9ed6d99e1b03f5b89723b3a20df359ba8",
      "commitAuthor": "Stephen O\u0027Donnell",
      "commitDateOld": "28/01/20 10:10 AM",
      "commitNameOld": "1839c467f60cbb8592d446694ec3d7710cda5142",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 13.91,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n       throws IOException {\n     ReplicaInfo replicaInfo \u003d null;\n     ReplicaInfo finalizedReplicaInfo \u003d null;\n-    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n       if (Thread.interrupted()) {\n         // Don\u0027t allow data modifications from interrupted threads\n         throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n       }\n       replicaInfo \u003d getReplicaInfo(b);\n       if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n         // this is legal, when recovery happens on a file that has\n         // been opened for append but never modified\n         return;\n       }\n       finalizedReplicaInfo \u003d finalizeReplica(b.getBlockPoolId(), replicaInfo);\n     }\n     /*\n      * Sync the directory after rename from tmp/rbw to Finalized if\n      * configured. Though rename should be atomic operation, sync on both\n      * dest and src directories are done because IOUtils.fsync() calls\n      * directory\u0027s channel sync, not the journal itself.\n      */\n     if (fsyncDir \u0026\u0026 finalizedReplicaInfo instanceof FinalizedReplica\n         \u0026\u0026 replicaInfo instanceof LocalReplica) {\n       FinalizedReplica finalizedReplica \u003d\n           (FinalizedReplica) finalizedReplicaInfo;\n       finalizedReplica.fsyncDirectory();\n       LocalReplica localReplica \u003d (LocalReplica) replicaInfo;\n       localReplica.fsyncDirectory();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n      throws IOException {\n    ReplicaInfo replicaInfo \u003d null;\n    ReplicaInfo finalizedReplicaInfo \u003d null;\n    try (AutoCloseableLock lock \u003d datasetWriteLock.acquire()) {\n      if (Thread.interrupted()) {\n        // Don\u0027t allow data modifications from interrupted threads\n        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n      }\n      replicaInfo \u003d getReplicaInfo(b);\n      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n        // this is legal, when recovery happens on a file that has\n        // been opened for append but never modified\n        return;\n      }\n      finalizedReplicaInfo \u003d finalizeReplica(b.getBlockPoolId(), replicaInfo);\n    }\n    /*\n     * Sync the directory after rename from tmp/rbw to Finalized if\n     * configured. Though rename should be atomic operation, sync on both\n     * dest and src directories are done because IOUtils.fsync() calls\n     * directory\u0027s channel sync, not the journal itself.\n     */\n    if (fsyncDir \u0026\u0026 finalizedReplicaInfo instanceof FinalizedReplica\n        \u0026\u0026 replicaInfo instanceof LocalReplica) {\n      FinalizedReplica finalizedReplica \u003d\n          (FinalizedReplica) finalizedReplicaInfo;\n      finalizedReplica.fsyncDirectory();\n      LocalReplica localReplica \u003d (LocalReplica) replicaInfo;\n      localReplica.fsyncDirectory();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "69afa26f19adad4c630a307c274130eb8b697141": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12157. Do fsyncDirectory(..) outside of FSDataset lock. Contributed by inayakumar B.\n",
      "commitDate": "09/08/17 7:03 AM",
      "commitName": "69afa26f19adad4c630a307c274130eb8b697141",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "01/08/17 6:34 PM",
      "commitNameOld": "6814324c332a7d780f3b844fd6f1c62db2f6c88e",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 7.52,
      "commitsBetweenForRepo": 54,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,32 @@\n   public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n       throws IOException {\n+    ReplicaInfo replicaInfo \u003d null;\n+    ReplicaInfo finalizedReplicaInfo \u003d null;\n     try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       if (Thread.interrupted()) {\n         // Don\u0027t allow data modifications from interrupted threads\n         throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n       }\n-      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n+      replicaInfo \u003d getReplicaInfo(b);\n       if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n         // this is legal, when recovery happens on a file that has\n         // been opened for append but never modified\n         return;\n       }\n-      finalizeReplica(b.getBlockPoolId(), replicaInfo, fsyncDir);\n+      finalizedReplicaInfo \u003d finalizeReplica(b.getBlockPoolId(), replicaInfo);\n+    }\n+    /*\n+     * Sync the directory after rename from tmp/rbw to Finalized if\n+     * configured. Though rename should be atomic operation, sync on both\n+     * dest and src directories are done because IOUtils.fsync() calls\n+     * directory\u0027s channel sync, not the journal itself.\n+     */\n+    if (fsyncDir \u0026\u0026 finalizedReplicaInfo instanceof FinalizedReplica\n+        \u0026\u0026 replicaInfo instanceof LocalReplica) {\n+      FinalizedReplica finalizedReplica \u003d\n+          (FinalizedReplica) finalizedReplicaInfo;\n+      finalizedReplica.fsyncDirectory();\n+      LocalReplica localReplica \u003d (LocalReplica) replicaInfo;\n+      localReplica.fsyncDirectory();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n      throws IOException {\n    ReplicaInfo replicaInfo \u003d null;\n    ReplicaInfo finalizedReplicaInfo \u003d null;\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      if (Thread.interrupted()) {\n        // Don\u0027t allow data modifications from interrupted threads\n        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n      }\n      replicaInfo \u003d getReplicaInfo(b);\n      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n        // this is legal, when recovery happens on a file that has\n        // been opened for append but never modified\n        return;\n      }\n      finalizedReplicaInfo \u003d finalizeReplica(b.getBlockPoolId(), replicaInfo);\n    }\n    /*\n     * Sync the directory after rename from tmp/rbw to Finalized if\n     * configured. Though rename should be atomic operation, sync on both\n     * dest and src directories are done because IOUtils.fsync() calls\n     * directory\u0027s channel sync, not the journal itself.\n     */\n    if (fsyncDir \u0026\u0026 finalizedReplicaInfo instanceof FinalizedReplica\n        \u0026\u0026 replicaInfo instanceof LocalReplica) {\n      FinalizedReplica finalizedReplica \u003d\n          (FinalizedReplica) finalizedReplicaInfo;\n      finalizedReplica.fsyncDirectory();\n      LocalReplica localReplica \u003d (LocalReplica) replicaInfo;\n      localReplica.fsyncDirectory();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "1543d0f5be6a02ad00e7a33e35d78af8516043e3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5042. Completed files lost after power failure. Contributed by Vinayakumar B.\n",
      "commitDate": "31/05/17 8:55 AM",
      "commitName": "1543d0f5be6a02ad00e7a33e35d78af8516043e3",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5042. Completed files lost after power failure. Contributed by Vinayakumar B.\n",
          "commitDate": "31/05/17 8:55 AM",
          "commitName": "1543d0f5be6a02ad00e7a33e35d78af8516043e3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/05/17 11:05 AM",
          "commitNameOld": "29b7df960fc3d0a7d1416225c3106c7d4222f0ca",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 5.91,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-  public void finalizeBlock(ExtendedBlock b) throws IOException {\n+  public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n+      throws IOException {\n     try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       if (Thread.interrupted()) {\n         // Don\u0027t allow data modifications from interrupted threads\n         throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n       }\n       ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n       if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n         // this is legal, when recovery happens on a file that has\n         // been opened for append but never modified\n         return;\n       }\n-      finalizeReplica(b.getBlockPoolId(), replicaInfo);\n+      finalizeReplica(b.getBlockPoolId(), replicaInfo, fsyncDir);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      if (Thread.interrupted()) {\n        // Don\u0027t allow data modifications from interrupted threads\n        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n        // this is legal, when recovery happens on a file that has\n        // been opened for append but never modified\n        return;\n      }\n      finalizeReplica(b.getBlockPoolId(), replicaInfo, fsyncDir);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[b-ExtendedBlock]",
            "newValue": "[b-ExtendedBlock, fsyncDir-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5042. Completed files lost after power failure. Contributed by Vinayakumar B.\n",
          "commitDate": "31/05/17 8:55 AM",
          "commitName": "1543d0f5be6a02ad00e7a33e35d78af8516043e3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/05/17 11:05 AM",
          "commitNameOld": "29b7df960fc3d0a7d1416225c3106c7d4222f0ca",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 5.91,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,15 +1,16 @@\n-  public void finalizeBlock(ExtendedBlock b) throws IOException {\n+  public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n+      throws IOException {\n     try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n       if (Thread.interrupted()) {\n         // Don\u0027t allow data modifications from interrupted threads\n         throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n       }\n       ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n       if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n         // this is legal, when recovery happens on a file that has\n         // been opened for append but never modified\n         return;\n       }\n-      finalizeReplica(b.getBlockPoolId(), replicaInfo);\n+      finalizeReplica(b.getBlockPoolId(), replicaInfo, fsyncDir);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void finalizeBlock(ExtendedBlock b, boolean fsyncDir)\n      throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      if (Thread.interrupted()) {\n        // Don\u0027t allow data modifications from interrupted threads\n        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n        // this is legal, when recovery happens on a file that has\n        // been opened for append but never modified\n        return;\n      }\n      finalizeReplica(b.getBlockPoolId(), replicaInfo, fsyncDir);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
      "commitDate": "08/08/16 12:02 PM",
      "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
      "commitAuthor": "Arpit Agarwal",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
          "commitDate": "08/08/16 12:02 PM",
          "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/07/16 7:40 PM",
          "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 30.68,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n-    if (Thread.interrupted()) {\n-      // Don\u0027t allow data modifications from interrupted threads\n-      throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n+  public void finalizeBlock(ExtendedBlock b) throws IOException {\n+    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+      if (Thread.interrupted()) {\n+        // Don\u0027t allow data modifications from interrupted threads\n+        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n+      }\n+      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n+      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n+        // this is legal, when recovery happens on a file that has\n+        // been opened for append but never modified\n+        return;\n+      }\n+      finalizeReplica(b.getBlockPoolId(), replicaInfo);\n     }\n-    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n-      // this is legal, when recovery happens on a file that has\n-      // been opened for append but never modified\n-      return;\n-    }\n-    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void finalizeBlock(ExtendedBlock b) throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      if (Thread.interrupted()) {\n        // Don\u0027t allow data modifications from interrupted threads\n        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n        // this is legal, when recovery happens on a file that has\n        // been opened for append but never modified\n        return;\n      }\n      finalizeReplica(b.getBlockPoolId(), replicaInfo);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10682. Replace FsDatasetImpl object lock with a separate lock object. (Chen Liang)\n",
          "commitDate": "08/08/16 12:02 PM",
          "commitName": "8c0638471f8f1dd47667b2d6727d4d2d54e4b48c",
          "commitAuthor": "Arpit Agarwal",
          "commitDateOld": "08/07/16 7:40 PM",
          "commitNameOld": "da6f1b88dd47e22b24d44f6fc8bbee73e85746f7",
          "commitAuthorOld": "Yongjun Zhang",
          "daysBetweenCommits": 30.68,
          "commitsBetweenForRepo": 320,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,13 +1,15 @@\n-  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n-    if (Thread.interrupted()) {\n-      // Don\u0027t allow data modifications from interrupted threads\n-      throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n+  public void finalizeBlock(ExtendedBlock b) throws IOException {\n+    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n+      if (Thread.interrupted()) {\n+        // Don\u0027t allow data modifications from interrupted threads\n+        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n+      }\n+      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n+      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n+        // this is legal, when recovery happens on a file that has\n+        // been opened for append but never modified\n+        return;\n+      }\n+      finalizeReplica(b.getBlockPoolId(), replicaInfo);\n     }\n-    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n-    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n-      // this is legal, when recovery happens on a file that has\n-      // been opened for append but never modified\n-      return;\n-    }\n-    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void finalizeBlock(ExtendedBlock b) throws IOException {\n    try (AutoCloseableLock lock \u003d datasetLock.acquire()) {\n      if (Thread.interrupted()) {\n        // Don\u0027t allow data modifications from interrupted threads\n        throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n      }\n      ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n      if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n        // this is legal, when recovery happens on a file that has\n        // been opened for append but never modified\n        return;\n      }\n      finalizeReplica(b.getBlockPoolId(), replicaInfo);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "d4fb8821630f2da107b6c438a449c35df3686595": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3541. Deadlock between recovery, xceiver and packet responder. Contributed by Vinay.\n\nSubmitted by:\tVinay\nReviewed by:\tUma Maheswara Rao G\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358794 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/12 10:42 AM",
      "commitName": "d4fb8821630f2da107b6c438a449c35df3686595",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "02/04/12 10:38 AM",
      "commitNameOld": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 97.0,
      "commitsBetweenForRepo": 584,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,13 @@\n   public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n+    if (Thread.interrupted()) {\n+      // Don\u0027t allow data modifications from interrupted threads\n+      throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n+    }\n     ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n     if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n       // this is legal, when recovery happens on a file that has\n       // been opened for append but never modified\n       return;\n     }\n     finalizeReplica(b.getBlockPoolId(), replicaInfo);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n    if (Thread.interrupted()) {\n      // Don\u0027t allow data modifications from interrupted threads\n      throw new IOException(\"Cannot finalize block from Interrupted Thread\");\n    }\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n      // this is legal, when recovery happens on a file that has\n      // been opened for append but never modified\n      return;\n    }\n    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {}
    },
    "bc13dfb1426944ce45293cb8f444239a7406762c": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-3130. Move fsdataset implementation to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/04/12 10:38 AM",
      "commitName": "bc13dfb1426944ce45293cb8f444239a7406762c",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/12 8:48 PM",
      "commitNameOld": "a4ccb8f504e79802f1b3c69acbcbb00b2343c529",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n      // this is legal, when recovery happens on a file that has\n      // been opened for append but never modified\n      return;\n    }\n    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/fsdataset/impl/FsDatasetImpl.java",
        "oldMethodName": "finalizeBlock",
        "newMethodName": "finalizeBlock"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n      // this is legal, when recovery happens on a file that has\n      // been opened for append but never modified\n      return;\n    }\n    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n      // this is legal, when recovery happens on a file that has\n      // been opened for append but never modified\n      return;\n    }\n    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,9 @@\n+  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n+    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n+    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n+      // this is legal, when recovery happens on a file that has\n+      // been opened for append but never modified\n+      return;\n+    }\n+    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void finalizeBlock(ExtendedBlock b) throws IOException {\n    ReplicaInfo replicaInfo \u003d getReplicaInfo(b);\n    if (replicaInfo.getState() \u003d\u003d ReplicaState.FINALIZED) {\n      // this is legal, when recovery happens on a file that has\n      // been opened for append but never modified\n      return;\n    }\n    finalizeReplica(b.getBlockPoolId(), replicaInfo);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/FSDataset.java"
    }
  }
}