{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LdapAuthenticationHandler.java",
  "functionName": "authenticateUser",
  "functionId": "authenticateUser___userName-String__password-String",
  "sourceFilePath": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/LdapAuthenticationHandler.java",
  "functionStartLine": 205,
  "functionEndLine": 240,
  "numCommitsSeen": 2,
  "timeTaken": 546,
  "changeHistory": [
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492"
  ],
  "changeHistoryShort": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bca385241c0fc8ff168c7b0f2984a7aed2c7492": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12082 Support multiple authentication schemes via AuthenticationFilter\n",
      "commitDate": "18/10/16 6:32 PM",
      "commitName": "4bca385241c0fc8ff168c7b0f2984a7aed2c7492",
      "commitAuthor": "Benoy Antony",
      "diff": "@@ -0,0 +1,36 @@\n+  private AuthenticationToken authenticateUser(String userName,\n+      String password) throws AuthenticationException {\n+    if (userName \u003d\u003d null || userName.isEmpty()) {\n+      throw new AuthenticationException(\"Error validating LDAP user:\"\n+          + \" a null or blank username has been provided\");\n+    }\n+\n+    // If the domain is available in the config, then append it unless domain\n+    // is already part of the username. LDAP providers like Active Directory\n+    // use a fully qualified user name like foo@bar.com.\n+    if (!hasDomain(userName) \u0026\u0026 ldapDomain !\u003d null) {\n+      userName \u003d userName + \"@\" + ldapDomain;\n+    }\n+\n+    if (password \u003d\u003d null || password.isEmpty() ||\n+        password.getBytes(StandardCharsets.UTF_8)[0] \u003d\u003d 0) {\n+      throw new AuthenticationException(\"Error validating LDAP user:\"\n+          + \" a null or blank password has been provided\");\n+    }\n+\n+    // setup the security principal\n+    String bindDN;\n+    if (baseDN \u003d\u003d null) {\n+      bindDN \u003d userName;\n+    } else {\n+      bindDN \u003d \"uid\u003d\" + userName + \",\" + baseDN;\n+    }\n+\n+    if (this.enableStartTls) {\n+      authenticateWithTlsExtension(bindDN, password);\n+    } else {\n+      authenticateWithoutTlsExtension(bindDN, password);\n+    }\n+\n+    return new AuthenticationToken(userName, userName, TYPE);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private AuthenticationToken authenticateUser(String userName,\n      String password) throws AuthenticationException {\n    if (userName \u003d\u003d null || userName.isEmpty()) {\n      throw new AuthenticationException(\"Error validating LDAP user:\"\n          + \" a null or blank username has been provided\");\n    }\n\n    // If the domain is available in the config, then append it unless domain\n    // is already part of the username. LDAP providers like Active Directory\n    // use a fully qualified user name like foo@bar.com.\n    if (!hasDomain(userName) \u0026\u0026 ldapDomain !\u003d null) {\n      userName \u003d userName + \"@\" + ldapDomain;\n    }\n\n    if (password \u003d\u003d null || password.isEmpty() ||\n        password.getBytes(StandardCharsets.UTF_8)[0] \u003d\u003d 0) {\n      throw new AuthenticationException(\"Error validating LDAP user:\"\n          + \" a null or blank password has been provided\");\n    }\n\n    // setup the security principal\n    String bindDN;\n    if (baseDN \u003d\u003d null) {\n      bindDN \u003d userName;\n    } else {\n      bindDN \u003d \"uid\u003d\" + userName + \",\" + baseDN;\n    }\n\n    if (this.enableStartTls) {\n      authenticateWithTlsExtension(bindDN, password);\n    } else {\n      authenticateWithoutTlsExtension(bindDN, password);\n    }\n\n    return new AuthenticationToken(userName, userName, TYPE);\n  }",
      "path": "hadoop-common-project/hadoop-auth/src/main/java/org/apache/hadoop/security/authentication/server/LdapAuthenticationHandler.java"
    }
  }
}