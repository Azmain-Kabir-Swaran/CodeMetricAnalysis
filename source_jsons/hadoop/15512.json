{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Diff.java",
  "functionName": "combinePosterior",
  "functionId": "combinePosterior___posterior-Diff__K,E__(modifiers-final)__deletedProcesser-Processor__E__(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
  "functionStartLine": 508,
  "functionEndLine": 543,
  "numCommitsSeen": 60,
  "timeTaken": 4474,
  "changeHistory": [
    "ba0da2785d251745969f88a50d33ce61876d91aa",
    "9701555899315c94584b24d8717c1d7540a4a491",
    "3b3ea5c4220e674064c7603a449f63904c10bac1",
    "43f8d0b9c9e209eb503451613c2f8d3fed07c203",
    "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
    "a3bf2083867db5d848ea14f145d120f02b820af2",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
    "7856221d4a4701565bb21259d839c8c402e72f49",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
    "2d4097840c29116e9b000c158ce841d27863ad6e"
  ],
  "changeHistoryShort": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": "Ybodychange",
    "9701555899315c94584b24d8717c1d7540a4a491": "Ybodychange",
    "3b3ea5c4220e674064c7603a449f63904c10bac1": "Ymultichange(Yreturntypechange,Ybodychange)",
    "43f8d0b9c9e209eb503451613c2f8d3fed07c203": "Yfilerename",
    "f29fa9e820e25730d00a1a00c51c6f11028fb5a7": "Ymultichange(Yreturntypechange,Ybodychange)",
    "a3bf2083867db5d848ea14f145d120f02b820af2": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": "Ymultichange(Yparameterchange,Ybodychange)",
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": "Ymultichange(Yparameterchange,Ybodychange)",
    "7856221d4a4701565bb21259d839c8c402e72f49": "Ybodychange",
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": "Ymultichange(Yparameterchange,Ybodychange)",
    "2d4097840c29116e9b000c158ce841d27863ad6e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba0da2785d251745969f88a50d33ce61876d91aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13252. Code refactoring: Remove Diff.ListType.\n",
      "commitDate": "09/03/18 3:50 PM",
      "commitName": "ba0da2785d251745969f88a50d33ce61876d91aa",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "31/05/17 8:09 AM",
      "commitNameOld": "13de636b4079b077890ad10389ff350dcf8086a2",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 282.36,
      "commitsBetweenForRepo": 1962,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,36 @@\n   public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n       final Processor\u003cE\u003e deletedProcesser) {\n-    final Iterator\u003cE\u003e createdIterator \u003d posterior.getList(ListType.CREATED).iterator();\n-    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getList(ListType.DELETED).iterator();\n+    final Iterator\u003cE\u003e createdIterator\n+        \u003d posterior.getCreatedUnmodifiable().iterator();\n+    final Iterator\u003cE\u003e deletedIterator\n+        \u003d posterior.getDeletedUnmodifiable().iterator();\n \n     E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n     E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n     for(; c !\u003d null || d !\u003d null; ) {\n       final int cmp \u003d c \u003d\u003d null? 1\n           : d \u003d\u003d null? -1\n           : c.compareTo(d.getKey());\n       if (cmp \u003c 0) {\n         // case 1: only in c-list\n         create(c);\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       } else if (cmp \u003e 0) {\n         // case 2: only in d-list\n         final UndoInfo\u003cE\u003e ui \u003d delete(d);\n         if (deletedProcesser !\u003d null) {\n           deletedProcesser.process(ui.trashed);\n         }\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       } else {\n         // case 3: in both c-list and d-list \n         final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n         if (deletedProcesser !\u003d null) {\n           deletedProcesser.process(ui.trashed);\n         }\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator\n        \u003d posterior.getCreatedUnmodifiable().iterator();\n    final Iterator\u003cE\u003e deletedIterator\n        \u003d posterior.getDeletedUnmodifiable().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {}
    },
    "9701555899315c94584b24d8717c1d7540a4a491": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4534. Add INodeReference in order to support rename with snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1458164 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/13 11:27 PM",
      "commitName": "9701555899315c94584b24d8717c1d7540a4a491",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "11/03/13 7:41 PM",
      "commitNameOld": "3b3ea5c4220e674064c7603a449f63904c10bac1",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 7.16,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n       final Processor\u003cE\u003e deletedProcesser) {\n-    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n-    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n+    final Iterator\u003cE\u003e createdIterator \u003d posterior.getList(ListType.CREATED).iterator();\n+    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getList(ListType.DELETED).iterator();\n \n     E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n     E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n     for(; c !\u003d null || d !\u003d null; ) {\n       final int cmp \u003d c \u003d\u003d null? 1\n           : d \u003d\u003d null? -1\n           : c.compareTo(d.getKey());\n       if (cmp \u003c 0) {\n         // case 1: only in c-list\n         create(c);\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       } else if (cmp \u003e 0) {\n         // case 2: only in d-list\n         final UndoInfo\u003cE\u003e ui \u003d delete(d);\n         if (deletedProcesser !\u003d null) {\n           deletedProcesser.process(ui.trashed);\n         }\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       } else {\n         // case 3: in both c-list and d-list \n         final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n         if (deletedProcesser !\u003d null) {\n           deletedProcesser.process(ui.trashed);\n         }\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getList(ListType.CREATED).iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getList(ListType.DELETED).iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {}
    },
    "3b3ea5c4220e674064c7603a449f63904c10bac1": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-4563. Update namespace/diskspace usage after deleting snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/03/13 7:41 PM",
      "commitName": "3b3ea5c4220e674064c7603a449f63904c10bac1",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4563. Update namespace/diskspace usage after deleting snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/03/13 7:41 PM",
          "commitName": "3b3ea5c4220e674064c7603a449f63904c10bac1",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/03/13 8:45 PM",
          "commitNameOld": "43f8d0b9c9e209eb503451613c2f8d3fed07c203",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.96,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,34 @@\n-  public int combinePosterior(final Diff\u003cK, E\u003e posterior,\n+  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n       final Processor\u003cE\u003e deletedProcesser) {\n     final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n     final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n     E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n     E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n-    int deletedNum \u003d 0;\n     for(; c !\u003d null || d !\u003d null; ) {\n       final int cmp \u003d c \u003d\u003d null? 1\n           : d \u003d\u003d null? -1\n           : c.compareTo(d.getKey());\n       if (cmp \u003c 0) {\n         // case 1: only in c-list\n         create(c);\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       } else if (cmp \u003e 0) {\n         // case 2: only in d-list\n         final UndoInfo\u003cE\u003e ui \u003d delete(d);\n         if (deletedProcesser !\u003d null) {\n-          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n+          deletedProcesser.process(ui.trashed);\n         }\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       } else {\n         // case 3: in both c-list and d-list \n         final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n         if (deletedProcesser !\u003d null) {\n-          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n+          deletedProcesser.process(ui.trashed);\n         }\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n     }\n-    return deletedNum;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
          "extendedDetails": {
            "oldValue": "int",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4563. Update namespace/diskspace usage after deleting snapshots.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1455396 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/03/13 7:41 PM",
          "commitName": "3b3ea5c4220e674064c7603a449f63904c10bac1",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "10/03/13 8:45 PM",
          "commitNameOld": "43f8d0b9c9e209eb503451613c2f8d3fed07c203",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.96,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,34 @@\n-  public int combinePosterior(final Diff\u003cK, E\u003e posterior,\n+  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n       final Processor\u003cE\u003e deletedProcesser) {\n     final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n     final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n     E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n     E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n-    int deletedNum \u003d 0;\n     for(; c !\u003d null || d !\u003d null; ) {\n       final int cmp \u003d c \u003d\u003d null? 1\n           : d \u003d\u003d null? -1\n           : c.compareTo(d.getKey());\n       if (cmp \u003c 0) {\n         // case 1: only in c-list\n         create(c);\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       } else if (cmp \u003e 0) {\n         // case 2: only in d-list\n         final UndoInfo\u003cE\u003e ui \u003d delete(d);\n         if (deletedProcesser !\u003d null) {\n-          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n+          deletedProcesser.process(ui.trashed);\n         }\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       } else {\n         // case 3: in both c-list and d-list \n         final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n         if (deletedProcesser !\u003d null) {\n-          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n+          deletedProcesser.process(ui.trashed);\n         }\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n     }\n-    return deletedNum;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
          "extendedDetails": {}
        }
      ]
    },
    "43f8d0b9c9e209eb503451613c2f8d3fed07c203": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-4574. Move Diff to the util package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1454988 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/03/13 8:45 PM",
      "commitName": "43f8d0b9c9e209eb503451613c2f8d3fed07c203",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "09/03/13 10:14 AM",
      "commitNameOld": "d32fb8a62b323a21228d864ce0e859464fb1f160",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 1.4,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    int deletedNum \u003d 0;\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n    return deletedNum;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/util/Diff.java"
      }
    },
    "f29fa9e820e25730d00a1a00c51c6f11028fb5a7": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-4499. Fix file/directory/snapshot deletion for file diff.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448504 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/02/13 7:27 PM",
      "commitName": "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-4499. Fix file/directory/snapshot deletion for file diff.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448504 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/13 7:27 PM",
          "commitName": "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "20/02/13 12:02 PM",
          "commitNameOld": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n-  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n+  public int combinePosterior(final Diff\u003cK, E\u003e posterior,\n       final Processor\u003cE\u003e deletedProcesser) {\n     final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n     final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n     E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n     E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n+    int deletedNum \u003d 0;\n     for(; c !\u003d null || d !\u003d null; ) {\n       final int cmp \u003d c \u003d\u003d null? 1\n           : d \u003d\u003d null? -1\n           : c.compareTo(d.getKey());\n       if (cmp \u003c 0) {\n         // case 1: only in c-list\n         create(c);\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       } else if (cmp \u003e 0) {\n         // case 2: only in d-list\n         final UndoInfo\u003cE\u003e ui \u003d delete(d);\n         if (deletedProcesser !\u003d null) {\n-          deletedProcesser.process(ui.trashed);\n+          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n         }\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       } else {\n         // case 3: in both c-list and d-list \n         final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n         if (deletedProcesser !\u003d null) {\n-          deletedProcesser.process(ui.trashed);\n+          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n         }\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n     }\n+    return deletedNum;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    int deletedNum \u003d 0;\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n    return deletedNum;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4499. Fix file/directory/snapshot deletion for file diff.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1448504 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/02/13 7:27 PM",
          "commitName": "f29fa9e820e25730d00a1a00c51c6f11028fb5a7",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "20/02/13 12:02 PM",
          "commitNameOld": "fac3883188d9c4f1fe188d98f88cb3c83b243bbd",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.31,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,36 @@\n-  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n+  public int combinePosterior(final Diff\u003cK, E\u003e posterior,\n       final Processor\u003cE\u003e deletedProcesser) {\n     final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n     final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n     E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n     E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n+    int deletedNum \u003d 0;\n     for(; c !\u003d null || d !\u003d null; ) {\n       final int cmp \u003d c \u003d\u003d null? 1\n           : d \u003d\u003d null? -1\n           : c.compareTo(d.getKey());\n       if (cmp \u003c 0) {\n         // case 1: only in c-list\n         create(c);\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       } else if (cmp \u003e 0) {\n         // case 2: only in d-list\n         final UndoInfo\u003cE\u003e ui \u003d delete(d);\n         if (deletedProcesser !\u003d null) {\n-          deletedProcesser.process(ui.trashed);\n+          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n         }\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       } else {\n         // case 3: in both c-list and d-list \n         final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n         if (deletedProcesser !\u003d null) {\n-          deletedProcesser.process(ui.trashed);\n+          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n         }\n         c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n     }\n+    return deletedNum;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    int deletedNum \u003d 0;\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedNum +\u003d deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n    return deletedNum;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {}
        }
      ]
    },
    "a3bf2083867db5d848ea14f145d120f02b820af2": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/13 4:01 PM",
      "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,34 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n-      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n-          postDiff.created: Collections.\u003cINode\u003eemptyList();\n-      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n-          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n-      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n-      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n+  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n+      final Processor\u003cE\u003e deletedProcesser) {\n+    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n+    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n-      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n-      for(; c !\u003d null || d !\u003d null; ) {\n-        final int cmp \u003d c \u003d\u003d null? 1\n-            : d \u003d\u003d null? -1\n-            : c.compareTo(d.getLocalNameBytes());\n-        if (cmp \u003c 0) {\n-          // case 1: only in c-list\n-          create(c);\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-        } else if (cmp \u003e 0) {\n-          // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n-        } else {\n-          // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    for(; c !\u003d null || d !\u003d null; ) {\n+      final int cmp \u003d c \u003d\u003d null? 1\n+          : d \u003d\u003d null? -1\n+          : c.compareTo(d.getKey());\n+      if (cmp \u003c 0) {\n+        // case 1: only in c-list\n+        create(c);\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+      } else if (cmp \u003e 0) {\n+        // case 2: only in d-list\n+        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n         }\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+      } else {\n+        // case 3: in both c-list and d-list \n+        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n+        }\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
            "oldMethodName": "combinePostDiff",
            "newMethodName": "combinePosterior"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,34 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n-      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n-          postDiff.created: Collections.\u003cINode\u003eemptyList();\n-      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n-          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n-      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n-      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n+  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n+      final Processor\u003cE\u003e deletedProcesser) {\n+    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n+    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n-      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n-      for(; c !\u003d null || d !\u003d null; ) {\n-        final int cmp \u003d c \u003d\u003d null? 1\n-            : d \u003d\u003d null? -1\n-            : c.compareTo(d.getLocalNameBytes());\n-        if (cmp \u003c 0) {\n-          // case 1: only in c-list\n-          create(c);\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-        } else if (cmp \u003e 0) {\n-          // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n-        } else {\n-          // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    for(; c !\u003d null || d !\u003d null; ) {\n+      final int cmp \u003d c \u003d\u003d null? 1\n+          : d \u003d\u003d null? -1\n+          : c.compareTo(d.getKey());\n+      if (cmp \u003c 0) {\n+        // case 1: only in c-list\n+        create(c);\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+      } else if (cmp \u003e 0) {\n+        // case 2: only in d-list\n+        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n         }\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+      } else {\n+        // case 3: in both c-list and d-list \n+        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n+        }\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,34 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n-      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n-          postDiff.created: Collections.\u003cINode\u003eemptyList();\n-      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n-          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n-      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n-      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n+  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n+      final Processor\u003cE\u003e deletedProcesser) {\n+    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n+    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n-      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n-      for(; c !\u003d null || d !\u003d null; ) {\n-        final int cmp \u003d c \u003d\u003d null? 1\n-            : d \u003d\u003d null? -1\n-            : c.compareTo(d.getLocalNameBytes());\n-        if (cmp \u003c 0) {\n-          // case 1: only in c-list\n-          create(c);\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-        } else if (cmp \u003e 0) {\n-          // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n-        } else {\n-          // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    for(; c !\u003d null || d !\u003d null; ) {\n+      final int cmp \u003d c \u003d\u003d null? 1\n+          : d \u003d\u003d null? -1\n+          : c.compareTo(d.getKey());\n+      if (cmp \u003c 0) {\n+        // case 1: only in c-list\n+        create(c);\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+      } else if (cmp \u003e 0) {\n+        // case 2: only in d-list\n+        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n         }\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+      } else {\n+        // case 3: in both c-list and d-list \n+        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n+        }\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,34 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n-      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n-          postDiff.created: Collections.\u003cINode\u003eemptyList();\n-      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n-          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n-      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n-      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n+  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n+      final Processor\u003cE\u003e deletedProcesser) {\n+    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n+    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n-      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n-      for(; c !\u003d null || d !\u003d null; ) {\n-        final int cmp \u003d c \u003d\u003d null? 1\n-            : d \u003d\u003d null? -1\n-            : c.compareTo(d.getLocalNameBytes());\n-        if (cmp \u003c 0) {\n-          // case 1: only in c-list\n-          create(c);\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-        } else if (cmp \u003e 0) {\n-          // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n-        } else {\n-          // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    for(; c !\u003d null || d !\u003d null; ) {\n+      final int cmp \u003d c \u003d\u003d null? 1\n+          : d \u003d\u003d null? -1\n+          : c.compareTo(d.getKey());\n+      if (cmp \u003c 0) {\n+        // case 1: only in c-list\n+        create(c);\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+      } else if (cmp \u003e 0) {\n+        // case 2: only in d-list\n+        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n         }\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+      } else {\n+        // case 3: in both c-list and d-list \n+        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n+        }\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldValue": "combinePostDiff",
            "newValue": "combinePosterior"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4441. Move INodeDirectoryWithSnapshot.Diff and the related classes to a package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438782 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "25/01/13 4:01 PM",
          "commitName": "a3bf2083867db5d848ea14f145d120f02b820af2",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "24/01/13 7:13 PM",
          "commitNameOld": "569d63d36cfc1744288b9ad756c0ff7d762f1549",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.87,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,34 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n-      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n-          postDiff.created: Collections.\u003cINode\u003eemptyList();\n-      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n-          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n-      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n-      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n+  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n+      final Processor\u003cE\u003e deletedProcesser) {\n+    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n+    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n \n-      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n-      for(; c !\u003d null || d !\u003d null; ) {\n-        final int cmp \u003d c \u003d\u003d null? 1\n-            : d \u003d\u003d null? -1\n-            : c.compareTo(d.getLocalNameBytes());\n-        if (cmp \u003c 0) {\n-          // case 1: only in c-list\n-          create(c);\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-        } else if (cmp \u003e 0) {\n-          // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n-        } else {\n-          // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n-          if (deletedINodeProcesser !\u003d null) {\n-            deletedINodeProcesser.process(triple.middle);\n-          }\n-          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n-          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+    for(; c !\u003d null || d !\u003d null; ) {\n+      final int cmp \u003d c \u003d\u003d null? 1\n+          : d \u003d\u003d null? -1\n+          : c.compareTo(d.getKey());\n+      if (cmp \u003c 0) {\n+        // case 1: only in c-list\n+        create(c);\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+      } else if (cmp \u003e 0) {\n+        // case 2: only in d-list\n+        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n         }\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+      } else {\n+        // case 3: in both c-list and d-list \n+        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n+        if (deletedProcesser !\u003d null) {\n+          deletedProcesser.process(ui.trashed);\n+        }\n+        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n       }\n-    }\n\\ No newline at end of file\n+    }\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public void combinePosterior(final Diff\u003cK, E\u003e posterior,\n      final Processor\u003cE\u003e deletedProcesser) {\n    final Iterator\u003cE\u003e createdIterator \u003d posterior.getCreatedList().iterator();\n    final Iterator\u003cE\u003e deletedIterator \u003d posterior.getDeletedList().iterator();\n\n    E c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n    E d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n    for(; c !\u003d null || d !\u003d null; ) {\n      final int cmp \u003d c \u003d\u003d null? 1\n          : d \u003d\u003d null? -1\n          : c.compareTo(d.getKey());\n      if (cmp \u003c 0) {\n        // case 1: only in c-list\n        create(c);\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      } else if (cmp \u003e 0) {\n        // case 2: only in d-list\n        final UndoInfo\u003cE\u003e ui \u003d delete(d);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      } else {\n        // case 3: in both c-list and d-list \n        final UndoInfo\u003cE\u003e ui \u003d modify(d, c);\n        if (deletedProcesser !\u003d null) {\n          deletedProcesser.process(ui.trashed);\n        }\n        c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n      }\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/diff/Diff.java",
          "extendedDetails": {
            "oldValue": "[postDiff-Diff, deletedINodeProcesser-Processor]",
            "newValue": "[posterior-Diff\u003cK,E\u003e(modifiers-final), deletedProcesser-Processor\u003cE\u003e(modifiers-final)]"
          }
        }
      ]
    },
    "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/01/13 1:33 PM",
      "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/13 1:33 PM",
          "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/01/13 6:48 PM",
          "commitNameOld": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,37 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser,\n-        boolean updateCircularList) {\n+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n       final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n           postDiff.created: Collections.\u003cINode\u003eemptyList();\n       final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n           postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n       final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n       final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n \n       INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n       for(; c !\u003d null || d !\u003d null; ) {\n         final int cmp \u003d c \u003d\u003d null? 1\n             : d \u003d\u003d null? -1\n             : c.compareTo(d.getLocalNameBytes());\n         if (cmp \u003c 0) {\n           // case 1: only in c-list\n           create(c);\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         } else if (cmp \u003e 0) {\n           // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d, \n-              updateCircularList);\n+          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         } else {\n           // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c,\n-              updateCircularList);\n+          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n          postDiff.created: Collections.\u003cINode\u003eemptyList();\n      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n\n      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n      for(; c !\u003d null || d !\u003d null; ) {\n        final int cmp \u003d c \u003d\u003d null? 1\n            : d \u003d\u003d null? -1\n            : c.compareTo(d.getLocalNameBytes());\n        if (cmp \u003c 0) {\n          // case 1: only in c-list\n          create(c);\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        } else if (cmp \u003e 0) {\n          // case 2: only in d-list\n          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        } else {\n          // case 3: in both c-list and d-list \n          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[postDiff-Diff, deletedINodeProcesser-Processor, updateCircularList-boolean]",
            "newValue": "[postDiff-Diff, deletedINodeProcesser-Processor]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4436. Change INode.recordModification(..) to return only the current inode and remove the updateCircularList parameter from some methods in INodeDirectoryWithSnapshot.Diff.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1438203 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/01/13 1:33 PM",
          "commitName": "bb80f2fb29d6f58d9c35f4a1fd88c99517f43e16",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "22/01/13 6:48 PM",
          "commitNameOld": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthorOld": "Suresh Srinivas",
          "daysBetweenCommits": 1.78,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,37 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser,\n-        boolean updateCircularList) {\n+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n       final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n           postDiff.created: Collections.\u003cINode\u003eemptyList();\n       final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n           postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n       final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n       final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n \n       INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n       for(; c !\u003d null || d !\u003d null; ) {\n         final int cmp \u003d c \u003d\u003d null? 1\n             : d \u003d\u003d null? -1\n             : c.compareTo(d.getLocalNameBytes());\n         if (cmp \u003c 0) {\n           // case 1: only in c-list\n           create(c);\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         } else if (cmp \u003e 0) {\n           // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d, \n-              updateCircularList);\n+          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         } else {\n           // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c,\n-              updateCircularList);\n+          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n          postDiff.created: Collections.\u003cINode\u003eemptyList();\n      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n\n      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n      for(; c !\u003d null || d !\u003d null; ) {\n        final int cmp \u003d c \u003d\u003d null? 1\n            : d \u003d\u003d null? -1\n            : c.compareTo(d.getLocalNameBytes());\n        if (cmp \u003c 0) {\n          // case 1: only in c-list\n          create(c);\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        } else if (cmp \u003e 0) {\n          // case 2: only in d-list\n          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        } else {\n          // case 3: in both c-list and d-list \n          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "fe3584aadfc7839abcd03239e4d07afd12b8b90f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/13 6:48 PM",
      "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:48 PM",
          "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "16/01/13 4:43 AM",
          "commitNameOld": "7856221d4a4701565bb21259d839c8c402e72f49",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.59,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,40 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser,\n+        boolean updateCircularList) {\n       final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n           postDiff.created: Collections.\u003cINode\u003eemptyList();\n       final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n           postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n       final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n       final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n \n       INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n       for(; c !\u003d null || d !\u003d null; ) {\n         final int cmp \u003d c \u003d\u003d null? 1\n             : d \u003d\u003d null? -1\n             : c.compareTo(d.getLocalNameBytes());\n         if (cmp \u003c 0) {\n           // case 1: only in c-list\n           create(c);\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         } else if (cmp \u003e 0) {\n           // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n+          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d, \n+              updateCircularList);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         } else {\n           // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n+          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c,\n+              updateCircularList);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser,\n        boolean updateCircularList) {\n      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n          postDiff.created: Collections.\u003cINode\u003eemptyList();\n      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n\n      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n      for(; c !\u003d null || d !\u003d null; ) {\n        final int cmp \u003d c \u003d\u003d null? 1\n            : d \u003d\u003d null? -1\n            : c.compareTo(d.getLocalNameBytes());\n        if (cmp \u003c 0) {\n          // case 1: only in c-list\n          create(c);\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        } else if (cmp \u003e 0) {\n          // case 2: only in d-list\n          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d, \n              updateCircularList);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        } else {\n          // case 3: in both c-list and d-list \n          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c,\n              updateCircularList);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[postDiff-Diff, deletedINodeProcesser-Processor]",
            "newValue": "[postDiff-Diff, deletedINodeProcesser-Processor, updateCircularList-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4126. Add reading/writing snapshot information to FSImage. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1437256 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/01/13 6:48 PM",
          "commitName": "fe3584aadfc7839abcd03239e4d07afd12b8b90f",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "16/01/13 4:43 AM",
          "commitNameOld": "7856221d4a4701565bb21259d839c8c402e72f49",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 6.59,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,40 @@\n-    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser,\n+        boolean updateCircularList) {\n       final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n           postDiff.created: Collections.\u003cINode\u003eemptyList();\n       final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n           postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n       final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n       final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n \n       INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n       INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n \n       for(; c !\u003d null || d !\u003d null; ) {\n         final int cmp \u003d c \u003d\u003d null? 1\n             : d \u003d\u003d null? -1\n             : c.compareTo(d.getLocalNameBytes());\n         if (cmp \u003c 0) {\n           // case 1: only in c-list\n           create(c);\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n         } else if (cmp \u003e 0) {\n           // case 2: only in d-list\n-          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n+          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d, \n+              updateCircularList);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         } else {\n           // case 3: in both c-list and d-list \n-          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n+          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c,\n+              updateCircularList);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n           c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n           d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser,\n        boolean updateCircularList) {\n      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n          postDiff.created: Collections.\u003cINode\u003eemptyList();\n      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n\n      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n      for(; c !\u003d null || d !\u003d null; ) {\n        final int cmp \u003d c \u003d\u003d null? 1\n            : d \u003d\u003d null? -1\n            : c.compareTo(d.getLocalNameBytes());\n        if (cmp \u003c 0) {\n          // case 1: only in c-list\n          create(c);\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        } else if (cmp \u003e 0) {\n          // case 2: only in d-list\n          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d, \n              updateCircularList);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        } else {\n          // case 3: in both c-list and d-list \n          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c,\n              updateCircularList);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "7856221d4a4701565bb21259d839c8c402e72f49": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4407. Change INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) to merge-sort like and keep the postDiff parameter unmodified.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433918 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/13 4:43 AM",
      "commitName": "7856221d4a4701565bb21259d839c8c402e72f49",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "14/01/13 10:20 PM",
      "commitNameOld": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 1.27,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,37 @@\n     void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n-      while (postDiff.created !\u003d null \u0026\u0026 !postDiff.created.isEmpty()) {\n-        final INode c \u003d postDiff.created.remove(postDiff.created.size() - 1);\n-        final int deletedIndex \u003d search(postDiff.deleted, c);\n-        if (deletedIndex \u003c 0) {\n-          // case 1\n+      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n+          postDiff.created: Collections.\u003cINode\u003eemptyList();\n+      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n+          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n+      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n+      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n+\n+      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n+\n+      for(; c !\u003d null || d !\u003d null; ) {\n+        final int cmp \u003d c \u003d\u003d null? 1\n+            : d \u003d\u003d null? -1\n+            : c.compareTo(d.getLocalNameBytes());\n+        if (cmp \u003c 0) {\n+          // case 1: only in c-list\n           create(c);\n+          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+        } else if (cmp \u003e 0) {\n+          // case 2: only in d-list\n+          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n+          if (deletedINodeProcesser !\u003d null) {\n+            deletedINodeProcesser.process(triple.middle);\n+          }\n+          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         } else {\n-          final INode d \u003d postDiff.deleted.remove(deletedIndex);\n-          // case 3\n+          // case 3: in both c-list and d-list \n           final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n           if (deletedINodeProcesser !\u003d null) {\n             deletedINodeProcesser.process(triple.middle);\n           }\n-        }\n-      }\n-      \n-      while (postDiff.deleted !\u003d null \u0026\u0026 !postDiff.deleted.isEmpty()) {\n-        // case 2\n-        INode node \u003d postDiff.deleted.remove(postDiff.deleted.size() - 1);\n-        Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(node);\n-        if (deletedINodeProcesser !\u003d null) {\n-          deletedINodeProcesser.process(triple.middle);\n+          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n+          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n      final List\u003cINode\u003e postCreated \u003d postDiff.created !\u003d null?\n          postDiff.created: Collections.\u003cINode\u003eemptyList();\n      final List\u003cINode\u003e postDeleted \u003d postDiff.deleted !\u003d null?\n          postDiff.deleted: Collections.\u003cINode\u003eemptyList();\n      final Iterator\u003cINode\u003e createdIterator \u003d postCreated.iterator();\n      final Iterator\u003cINode\u003e deletedIterator \u003d postDeleted.iterator();\n\n      INode c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n      INode d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n\n      for(; c !\u003d null || d !\u003d null; ) {\n        final int cmp \u003d c \u003d\u003d null? 1\n            : d \u003d\u003d null? -1\n            : c.compareTo(d.getLocalNameBytes());\n        if (cmp \u003c 0) {\n          // case 1: only in c-list\n          create(c);\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n        } else if (cmp \u003e 0) {\n          // case 2: only in d-list\n          Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(d);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        } else {\n          // case 3: in both c-list and d-list \n          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n          c \u003d createdIterator.hasNext()? createdIterator.next(): null;\n          d \u003d deletedIterator.hasNext()? deletedIterator.next(): null;\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
      "extendedDetails": {}
    },
    "00d318378e4b43d36be91b29ae3ef8a879a81e1e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/01/13 10:20 PM",
      "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/01/13 10:20 PM",
          "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "09/01/13 8:44 AM",
          "commitNameOld": "2d4097840c29116e9b000c158ce841d27863ad6e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.57,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,26 @@\n-    void combinePostDiff(Diff postDiff, BlocksMapUpdateInfo collectedBlocks) {\n+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n       while (postDiff.created !\u003d null \u0026\u0026 !postDiff.created.isEmpty()) {\n-        INode node \u003d postDiff.created.remove(postDiff.created.size() - 1);\n-        int deletedIndex \u003d search(postDiff.deleted, node);\n+        final INode c \u003d postDiff.created.remove(postDiff.created.size() - 1);\n+        final int deletedIndex \u003d search(postDiff.deleted, c);\n         if (deletedIndex \u003c 0) {\n-          // for case 1\n-          create(node);\n+          // case 1\n+          create(c);\n         } else {\n+          final INode d \u003d postDiff.deleted.remove(deletedIndex);\n           // case 3\n-          int createdIndex \u003d search(created, node);\n-          if (createdIndex \u003c 0) {\n-            // 3.4\n-            create(node);\n-            insertDeleted(node, search(deleted, node));\n-          } else {\n-            // 3.1 and 3.3\n-            created.set(createdIndex, node);\n-            // for 3.1 and 3.3, if the node is an INodeFileWithLink, need to\n-            // remove d in the posterior diff from the circular list, also do\n-            // possible block deletion and blocksMap updating\n-            INode dInPost \u003d postDiff.deleted.get(deletedIndex);\n-            if (dInPost instanceof INodeFileWithLink) {\n-              // dInPost must be an INodeFileWithLink\n-              ((INodeFileWithLink) dInPost)\n-                  .collectSubtreeBlocksAndClear(collectedBlocks);\n-            }\n+          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n+          if (deletedINodeProcesser !\u003d null) {\n+            deletedINodeProcesser.process(triple.middle);\n           }\n-          // also remove the inode from the deleted list\n-          postDiff.deleted.remove(deletedIndex);\n         }\n       }\n       \n       while (postDiff.deleted !\u003d null \u0026\u0026 !postDiff.deleted.isEmpty()) {\n         // case 2\n         INode node \u003d postDiff.deleted.remove(postDiff.deleted.size() - 1);\n         Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(node);\n-        // for 2.3, if the node is an INodeFileWithLink, need to remove c\u0027 from\n-        // the circular list\n-        INode cInCurrent \u003d triple.middle;\n-        if (cInCurrent instanceof INodeFileWithLink) {\n-          ((INodeFileWithLink) cInCurrent)\n-              .collectSubtreeBlocksAndClear(collectedBlocks);\n+        if (deletedINodeProcesser !\u003d null) {\n+          deletedINodeProcesser.process(triple.middle);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n      while (postDiff.created !\u003d null \u0026\u0026 !postDiff.created.isEmpty()) {\n        final INode c \u003d postDiff.created.remove(postDiff.created.size() - 1);\n        final int deletedIndex \u003d search(postDiff.deleted, c);\n        if (deletedIndex \u003c 0) {\n          // case 1\n          create(c);\n        } else {\n          final INode d \u003d postDiff.deleted.remove(deletedIndex);\n          // case 3\n          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n        }\n      }\n      \n      while (postDiff.deleted !\u003d null \u0026\u0026 !postDiff.deleted.isEmpty()) {\n        // case 2\n        INode node \u003d postDiff.deleted.remove(postDiff.deleted.size() - 1);\n        Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(node);\n        if (deletedINodeProcesser !\u003d null) {\n          deletedINodeProcesser.process(triple.middle);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {
            "oldValue": "[postDiff-Diff, collectedBlocks-BlocksMapUpdateInfo]",
            "newValue": "[postDiff-Diff, deletedINodeProcesser-Processor]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-4397. Fix a bug in INodeDirectoryWithSnapshot.Diff.combinePostDiff(..) that it may put the wrong node into the deleted list.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1433293 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "14/01/13 10:20 PM",
          "commitName": "00d318378e4b43d36be91b29ae3ef8a879a81e1e",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "09/01/13 8:44 AM",
          "commitNameOld": "2d4097840c29116e9b000c158ce841d27863ad6e",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 5.57,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,26 @@\n-    void combinePostDiff(Diff postDiff, BlocksMapUpdateInfo collectedBlocks) {\n+    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n       while (postDiff.created !\u003d null \u0026\u0026 !postDiff.created.isEmpty()) {\n-        INode node \u003d postDiff.created.remove(postDiff.created.size() - 1);\n-        int deletedIndex \u003d search(postDiff.deleted, node);\n+        final INode c \u003d postDiff.created.remove(postDiff.created.size() - 1);\n+        final int deletedIndex \u003d search(postDiff.deleted, c);\n         if (deletedIndex \u003c 0) {\n-          // for case 1\n-          create(node);\n+          // case 1\n+          create(c);\n         } else {\n+          final INode d \u003d postDiff.deleted.remove(deletedIndex);\n           // case 3\n-          int createdIndex \u003d search(created, node);\n-          if (createdIndex \u003c 0) {\n-            // 3.4\n-            create(node);\n-            insertDeleted(node, search(deleted, node));\n-          } else {\n-            // 3.1 and 3.3\n-            created.set(createdIndex, node);\n-            // for 3.1 and 3.3, if the node is an INodeFileWithLink, need to\n-            // remove d in the posterior diff from the circular list, also do\n-            // possible block deletion and blocksMap updating\n-            INode dInPost \u003d postDiff.deleted.get(deletedIndex);\n-            if (dInPost instanceof INodeFileWithLink) {\n-              // dInPost must be an INodeFileWithLink\n-              ((INodeFileWithLink) dInPost)\n-                  .collectSubtreeBlocksAndClear(collectedBlocks);\n-            }\n+          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n+          if (deletedINodeProcesser !\u003d null) {\n+            deletedINodeProcesser.process(triple.middle);\n           }\n-          // also remove the inode from the deleted list\n-          postDiff.deleted.remove(deletedIndex);\n         }\n       }\n       \n       while (postDiff.deleted !\u003d null \u0026\u0026 !postDiff.deleted.isEmpty()) {\n         // case 2\n         INode node \u003d postDiff.deleted.remove(postDiff.deleted.size() - 1);\n         Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(node);\n-        // for 2.3, if the node is an INodeFileWithLink, need to remove c\u0027 from\n-        // the circular list\n-        INode cInCurrent \u003d triple.middle;\n-        if (cInCurrent instanceof INodeFileWithLink) {\n-          ((INodeFileWithLink) cInCurrent)\n-              .collectSubtreeBlocksAndClear(collectedBlocks);\n+        if (deletedINodeProcesser !\u003d null) {\n+          deletedINodeProcesser.process(triple.middle);\n         }\n       }\n     }\n\\ No newline at end of file\n",
          "actualSource": "    void combinePostDiff(Diff postDiff, Processor deletedINodeProcesser) {\n      while (postDiff.created !\u003d null \u0026\u0026 !postDiff.created.isEmpty()) {\n        final INode c \u003d postDiff.created.remove(postDiff.created.size() - 1);\n        final int deletedIndex \u003d search(postDiff.deleted, c);\n        if (deletedIndex \u003c 0) {\n          // case 1\n          create(c);\n        } else {\n          final INode d \u003d postDiff.deleted.remove(deletedIndex);\n          // case 3\n          final Triple\u003cInteger, INode, Integer\u003e triple \u003d modify(d, c);\n          if (deletedINodeProcesser !\u003d null) {\n            deletedINodeProcesser.process(triple.middle);\n          }\n        }\n      }\n      \n      while (postDiff.deleted !\u003d null \u0026\u0026 !postDiff.deleted.isEmpty()) {\n        // case 2\n        INode node \u003d postDiff.deleted.remove(postDiff.deleted.size() - 1);\n        Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(node);\n        if (deletedINodeProcesser !\u003d null) {\n          deletedINodeProcesser.process(triple.middle);\n        }\n      }\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java",
          "extendedDetails": {}
        }
      ]
    },
    "2d4097840c29116e9b000c158ce841d27863ad6e": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4244. Support snapshot deletion.  Contributed by Jing Zhao\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-2802@1430953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 8:44 AM",
      "commitName": "2d4097840c29116e9b000c158ce841d27863ad6e",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,45 @@\n+    void combinePostDiff(Diff postDiff, BlocksMapUpdateInfo collectedBlocks) {\n+      while (postDiff.created !\u003d null \u0026\u0026 !postDiff.created.isEmpty()) {\n+        INode node \u003d postDiff.created.remove(postDiff.created.size() - 1);\n+        int deletedIndex \u003d search(postDiff.deleted, node);\n+        if (deletedIndex \u003c 0) {\n+          // for case 1\n+          create(node);\n+        } else {\n+          // case 3\n+          int createdIndex \u003d search(created, node);\n+          if (createdIndex \u003c 0) {\n+            // 3.4\n+            create(node);\n+            insertDeleted(node, search(deleted, node));\n+          } else {\n+            // 3.1 and 3.3\n+            created.set(createdIndex, node);\n+            // for 3.1 and 3.3, if the node is an INodeFileWithLink, need to\n+            // remove d in the posterior diff from the circular list, also do\n+            // possible block deletion and blocksMap updating\n+            INode dInPost \u003d postDiff.deleted.get(deletedIndex);\n+            if (dInPost instanceof INodeFileWithLink) {\n+              // dInPost must be an INodeFileWithLink\n+              ((INodeFileWithLink) dInPost)\n+                  .collectSubtreeBlocksAndClear(collectedBlocks);\n+            }\n+          }\n+          // also remove the inode from the deleted list\n+          postDiff.deleted.remove(deletedIndex);\n+        }\n+      }\n+      \n+      while (postDiff.deleted !\u003d null \u0026\u0026 !postDiff.deleted.isEmpty()) {\n+        // case 2\n+        INode node \u003d postDiff.deleted.remove(postDiff.deleted.size() - 1);\n+        Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(node);\n+        // for 2.3, if the node is an INodeFileWithLink, need to remove c\u0027 from\n+        // the circular list\n+        INode cInCurrent \u003d triple.middle;\n+        if (cInCurrent instanceof INodeFileWithLink) {\n+          ((INodeFileWithLink) cInCurrent)\n+              .collectSubtreeBlocksAndClear(collectedBlocks);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void combinePostDiff(Diff postDiff, BlocksMapUpdateInfo collectedBlocks) {\n      while (postDiff.created !\u003d null \u0026\u0026 !postDiff.created.isEmpty()) {\n        INode node \u003d postDiff.created.remove(postDiff.created.size() - 1);\n        int deletedIndex \u003d search(postDiff.deleted, node);\n        if (deletedIndex \u003c 0) {\n          // for case 1\n          create(node);\n        } else {\n          // case 3\n          int createdIndex \u003d search(created, node);\n          if (createdIndex \u003c 0) {\n            // 3.4\n            create(node);\n            insertDeleted(node, search(deleted, node));\n          } else {\n            // 3.1 and 3.3\n            created.set(createdIndex, node);\n            // for 3.1 and 3.3, if the node is an INodeFileWithLink, need to\n            // remove d in the posterior diff from the circular list, also do\n            // possible block deletion and blocksMap updating\n            INode dInPost \u003d postDiff.deleted.get(deletedIndex);\n            if (dInPost instanceof INodeFileWithLink) {\n              // dInPost must be an INodeFileWithLink\n              ((INodeFileWithLink) dInPost)\n                  .collectSubtreeBlocksAndClear(collectedBlocks);\n            }\n          }\n          // also remove the inode from the deleted list\n          postDiff.deleted.remove(deletedIndex);\n        }\n      }\n      \n      while (postDiff.deleted !\u003d null \u0026\u0026 !postDiff.deleted.isEmpty()) {\n        // case 2\n        INode node \u003d postDiff.deleted.remove(postDiff.deleted.size() - 1);\n        Triple\u003cInteger, INode, Integer\u003e triple \u003d delete(node);\n        // for 2.3, if the node is an INodeFileWithLink, need to remove c\u0027 from\n        // the circular list\n        INode cInCurrent \u003d triple.middle;\n        if (cInCurrent instanceof INodeFileWithLink) {\n          ((INodeFileWithLink) cInCurrent)\n              .collectSubtreeBlocksAndClear(collectedBlocks);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/INodeDirectoryWithSnapshot.java"
    }
  }
}