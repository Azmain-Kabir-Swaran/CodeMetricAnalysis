{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "wrapWithSasl",
  "functionId": "wrapWithSasl___call-RpcCall",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 3341,
  "functionEndLine": 3363,
  "numCommitsSeen": 666,
  "timeTaken": 9156,
  "changeHistory": [
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
    "580a8334963709e728ed677c815fb7fef9bca70e",
    "2d8227605fe22c1c05f31729edc8939013763c05",
    "476a251e5efe5e5850671f924e622b587c262653",
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
    "c03c8fe199429a43c6aa944016566738abd9b193",
    "1594dd6965c412a08339a0079ee1416dd6f595f9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "940389afce6a1b9b9e1519aed528cbc444786756"
  ],
  "changeHistoryShort": {
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": "Yparameterchange",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": "Yparameterchange",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": "Yparameterchange",
    "580a8334963709e728ed677c815fb7fef9bca70e": "Ybodychange",
    "2d8227605fe22c1c05f31729edc8939013763c05": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "476a251e5efe5e5850671f924e622b587c262653": "Ybodychange",
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3": "Ymodifierchange",
    "c03c8fe199429a43c6aa944016566738abd9b193": "Ybodychange",
    "1594dd6965c412a08339a0079ee1416dd6f595f9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "940389afce6a1b9b9e1519aed528cbc444786756": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "01/09/16 1:44 PM",
      "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 2:04 PM",
      "commitNameOld": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-  private void wrapWithSasl(Call call) throws IOException {\n+  private void wrapWithSasl(RpcCall call) throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n           .setToken(ByteString.copyFrom(token))\n           .build();\n       setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void wrapWithSasl(RpcCall call) throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token))\n          .build();\n      setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[call-Call]",
        "newValue": "[call-RpcCall]"
      }
    },
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": {
      "type": "Yparameterchange",
      "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
      "commitDate": "25/08/16 2:04 PM",
      "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 9:44 AM",
      "commitNameOld": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-  private void wrapWithSasl(RpcCall call) throws IOException {\n+  private void wrapWithSasl(Call call) throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n           .setToken(ByteString.copyFrom(token))\n           .build();\n       setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void wrapWithSasl(Call call) throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token))\n          .build();\n      setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[call-RpcCall]",
        "newValue": "[call-Call]"
      }
    },
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "25/08/16 9:44 AM",
      "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 11:22 AM",
      "commitNameOld": "580a8334963709e728ed677c815fb7fef9bca70e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 21.93,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-  private void wrapWithSasl(Call call) throws IOException {\n+  private void wrapWithSasl(RpcCall call) throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n           .setToken(ByteString.copyFrom(token))\n           .build();\n       setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void wrapWithSasl(RpcCall call) throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token))\n          .build();\n      setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[call-Call]",
        "newValue": "[call-RpcCall]"
      }
    },
    "580a8334963709e728ed677c815fb7fef9bca70e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13483. Optimize IPC server protobuf decoding. Contributed by Daryn Sharp.\n",
      "commitDate": "03/08/16 11:22 AM",
      "commitName": "580a8334963709e728ed677c815fb7fef9bca70e",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 7:31 AM",
      "commitNameOld": "2d8227605fe22c1c05f31729edc8939013763c05",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   private void wrapWithSasl(Call call) throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n           .setToken(ByteString.copyFrom(token))\n           .build();\n-      setupResponse(call, saslHeader, new RpcResponseWrapper(saslMessage));\n+      setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void wrapWithSasl(Call call) throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token))\n          .build();\n      setupResponse(call, saslHeader, RpcWritable.wrap(saslMessage));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "2d8227605fe22c1c05f31729edc8939013763c05": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
      "commitDate": "03/08/16 7:31 AM",
      "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 7:31 AM",
          "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/08/16 8:40 AM",
          "commitNameOld": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,23 @@\n-  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)\n-      throws IOException {\n+  private void wrapWithSasl(Call call) throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n-      response.reset();\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n-          .setToken(ByteString.copyFrom(token, 0, token.length))\n+          .setToken(ByteString.copyFrom(token))\n           .build();\n-      RpcResponseMessageWrapper saslResponse \u003d\n-          new RpcResponseMessageWrapper(saslHeader, saslMessage);\n-\n-      DataOutputStream out \u003d new DataOutputStream(response);\n-      out.writeInt(saslResponse.getLength());\n-      saslResponse.write(out);\n+      setupResponse(call, saslHeader, new RpcResponseWrapper(saslMessage));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void wrapWithSasl(Call call) throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token))\n          .build();\n      setupResponse(call, saslHeader, new RpcResponseWrapper(saslMessage));\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[response-ByteArrayOutputStream, call-Call]",
            "newValue": "[call-Call]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 7:31 AM",
          "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/08/16 8:40 AM",
          "commitNameOld": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,23 @@\n-  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)\n-      throws IOException {\n+  private void wrapWithSasl(Call call) throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n-      response.reset();\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n-          .setToken(ByteString.copyFrom(token, 0, token.length))\n+          .setToken(ByteString.copyFrom(token))\n           .build();\n-      RpcResponseMessageWrapper saslResponse \u003d\n-          new RpcResponseMessageWrapper(saslHeader, saslMessage);\n-\n-      DataOutputStream out \u003d new DataOutputStream(response);\n-      out.writeInt(saslResponse.getLength());\n-      saslResponse.write(out);\n+      setupResponse(call, saslHeader, new RpcResponseWrapper(saslMessage));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void wrapWithSasl(Call call) throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token))\n          .build();\n      setupResponse(call, saslHeader, new RpcResponseWrapper(saslMessage));\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 7:31 AM",
          "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/08/16 8:40 AM",
          "commitNameOld": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,23 @@\n-  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)\n-      throws IOException {\n+  private void wrapWithSasl(Call call) throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n-      response.reset();\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n-          .setToken(ByteString.copyFrom(token, 0, token.length))\n+          .setToken(ByteString.copyFrom(token))\n           .build();\n-      RpcResponseMessageWrapper saslResponse \u003d\n-          new RpcResponseMessageWrapper(saslHeader, saslMessage);\n-\n-      DataOutputStream out \u003d new DataOutputStream(response);\n-      out.writeInt(saslResponse.getLength());\n-      saslResponse.write(out);\n+      setupResponse(call, saslHeader, new RpcResponseWrapper(saslMessage));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void wrapWithSasl(Call call) throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token))\n          .build();\n      setupResponse(call, saslHeader, new RpcResponseWrapper(saslMessage));\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "476a251e5efe5e5850671f924e622b587c262653": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12483. Maintain wrapped SASL ordering for postponed IPC responses. (Daryn Sharp via yliu)\n",
      "commitDate": "18/10/15 6:54 PM",
      "commitName": "476a251e5efe5e5850671f924e622b587c262653",
      "commitAuthor": "yliu",
      "commitDateOld": "12/10/15 1:09 AM",
      "commitNameOld": "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private static void wrapWithSasl(ByteArrayOutputStream response, Call call)\n       throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n-      byte[] token \u003d response.toByteArray();\n+      byte[] token \u003d call.rpcResponse.array();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       response.reset();\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n           .setToken(ByteString.copyFrom(token, 0, token.length))\n           .build();\n       RpcResponseMessageWrapper saslResponse \u003d\n           new RpcResponseMessageWrapper(saslHeader, saslMessage);\n \n       DataOutputStream out \u003d new DataOutputStream(response);\n       out.writeInt(saslResponse.getLength());\n       saslResponse.write(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d call.rpcResponse.array();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token, 0, token.length))\n          .build();\n      RpcResponseMessageWrapper saslResponse \u003d\n          new RpcResponseMessageWrapper(saslHeader, saslMessage);\n\n      DataOutputStream out \u003d new DataOutputStream(response);\n      out.writeInt(saslResponse.getLength());\n      saslResponse.write(out);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-10300. Allowed deferred sending of call responses. (Daryn Sharp via yliu)\n",
      "commitDate": "12/10/15 1:09 AM",
      "commitName": "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
      "commitAuthor": "yliu",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 13.73,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n-  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n+  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)\n       throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d response.toByteArray();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       response.reset();\n       // rebuild with sasl header and payload\n       RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n           .setCallId(AuthProtocol.SASL.callId)\n           .setStatus(RpcStatusProto.SUCCESS)\n           .build();\n       RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n           .setState(SaslState.WRAP)\n           .setToken(ByteString.copyFrom(token, 0, token.length))\n           .build();\n       RpcResponseMessageWrapper saslResponse \u003d\n           new RpcResponseMessageWrapper(saslHeader, saslMessage);\n \n       DataOutputStream out \u003d new DataOutputStream(response);\n       out.writeInt(saslResponse.getLength());\n       saslResponse.write(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d response.toByteArray();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token, 0, token.length))\n          .build();\n      RpcResponseMessageWrapper saslResponse \u003d\n          new RpcResponseMessageWrapper(saslHeader, saslMessage);\n\n      DataOutputStream out \u003d new DataOutputStream(response);\n      out.writeInt(saslResponse.getLength());\n      saslResponse.write(out);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "c03c8fe199429a43c6aa944016566738abd9b193": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9820. RPCv9 wire protocol is insufficient to support multiplexing. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1512091 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/13 4:02 PM",
      "commitName": "c03c8fe199429a43c6aa944016566738abd9b193",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "05/08/13 4:01 PM",
      "commitNameOld": "63a1273f2a8e0b668ff70330262adedee63112d9",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,30 @@\n   private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n       throws IOException {\n     if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d response.toByteArray();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       response.reset();\n-      DataOutputStream saslOut \u003d new DataOutputStream(response);\n-      saslOut.writeInt(token.length);\n-      saslOut.write(token, 0, token.length);\n+      // rebuild with sasl header and payload\n+      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n+          .setCallId(AuthProtocol.SASL.callId)\n+          .setStatus(RpcStatusProto.SUCCESS)\n+          .build();\n+      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n+          .setState(SaslState.WRAP)\n+          .setToken(ByteString.copyFrom(token, 0, token.length))\n+          .build();\n+      RpcResponseMessageWrapper saslResponse \u003d\n+          new RpcResponseMessageWrapper(saslHeader, saslMessage);\n+\n+      DataOutputStream out \u003d new DataOutputStream(response);\n+      out.writeInt(saslResponse.getLength());\n+      saslResponse.write(out);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d response.toByteArray();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      // rebuild with sasl header and payload\n      RpcResponseHeaderProto saslHeader \u003d RpcResponseHeaderProto.newBuilder()\n          .setCallId(AuthProtocol.SASL.callId)\n          .setStatus(RpcStatusProto.SUCCESS)\n          .build();\n      RpcSaslProto saslMessage \u003d RpcSaslProto.newBuilder()\n          .setState(SaslState.WRAP)\n          .setToken(ByteString.copyFrom(token, 0, token.length))\n          .build();\n      RpcResponseMessageWrapper saslResponse \u003d\n          new RpcResponseMessageWrapper(saslHeader, saslMessage);\n\n      DataOutputStream out \u003d new DataOutputStream(response);\n      out.writeInt(saslResponse.getLength());\n      saslResponse.write(out);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "1594dd6965c412a08339a0079ee1416dd6f595f9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9015. Standardize creation of SaslRpcServers (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1406851 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/12 2:50 PM",
      "commitName": "1594dd6965c412a08339a0079ee1416dd6f595f9",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "05/11/12 10:37 AM",
      "commitNameOld": "b1aa62a848646f78e019c74186d9696e9101afcf",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 2.18,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n       throws IOException {\n-    if (call.connection.useSasl) {\n+    if (call.connection.saslServer !\u003d null) {\n       byte[] token \u003d response.toByteArray();\n       // synchronization may be needed since there can be multiple Handler\n       // threads using saslServer to wrap responses.\n       synchronized (call.connection.saslServer) {\n         token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n       }\n       if (LOG.isDebugEnabled())\n         LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n             + \" as call response.\");\n       response.reset();\n       DataOutputStream saslOut \u003d new DataOutputStream(response);\n       saslOut.writeInt(token.length);\n       saslOut.write(token, 0, token.length);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.saslServer !\u003d null) {\n      byte[] token \u003d response.toByteArray();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      DataOutputStream saslOut \u003d new DataOutputStream(response);\n      saslOut.writeInt(token.length);\n      saslOut.write(token, 0, token.length);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.useSasl) {\n      byte[] token \u003d response.toByteArray();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      DataOutputStream saslOut \u003d new DataOutputStream(response);\n      saslOut.writeInt(token.length);\n      saslOut.write(token, 0, token.length);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.useSasl) {\n      byte[] token \u003d response.toByteArray();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      DataOutputStream saslOut \u003d new DataOutputStream(response);\n      saslOut.writeInt(token.length);\n      saslOut.write(token, 0, token.length);\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.useSasl) {\n      byte[] token \u003d response.toByteArray();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      DataOutputStream saslOut \u003d new DataOutputStream(response);\n      saslOut.writeInt(token.length);\n      saslOut.write(token, 0, token.length);\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "940389afce6a1b9b9e1519aed528cbc444786756": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/10 5:30 PM",
      "commitName": "940389afce6a1b9b9e1519aed528cbc444786756",
      "commitAuthor": "Devaraj Das",
      "diff": "@@ -0,0 +1,18 @@\n+  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n+      throws IOException {\n+    if (call.connection.useSasl) {\n+      byte[] token \u003d response.toByteArray();\n+      // synchronization may be needed since there can be multiple Handler\n+      // threads using saslServer to wrap responses.\n+      synchronized (call.connection.saslServer) {\n+        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n+      }\n+      if (LOG.isDebugEnabled())\n+        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n+            + \" as call response.\");\n+      response.reset();\n+      DataOutputStream saslOut \u003d new DataOutputStream(response);\n+      saslOut.writeInt(token.length);\n+      saslOut.write(token, 0, token.length);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void wrapWithSasl(ByteArrayOutputStream response, Call call)\n      throws IOException {\n    if (call.connection.useSasl) {\n      byte[] token \u003d response.toByteArray();\n      // synchronization may be needed since there can be multiple Handler\n      // threads using saslServer to wrap responses.\n      synchronized (call.connection.saslServer) {\n        token \u003d call.connection.saslServer.wrap(token, 0, token.length);\n      }\n      if (LOG.isDebugEnabled())\n        LOG.debug(\"Adding saslServer wrapped token of size \" + token.length\n            + \" as call response.\");\n      response.reset();\n      DataOutputStream saslOut \u003d new DataOutputStream(response);\n      saslOut.writeInt(token.length);\n      saslOut.write(token, 0, token.length);\n    }\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}