{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ChangeTracker.java",
  "functionName": "processResponse",
  "functionId": "processResponse___copyResult-CopyResult(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java",
  "functionStartLine": 205,
  "functionEndLine": 219,
  "numCommitsSeen": 4,
  "timeTaken": 1631,
  "changeHistory": [
    "a36274d69947648dbe82721220cc5240ec5d396d"
  ],
  "changeHistoryShort": {
    "a36274d69947648dbe82721220cc5240ec5d396d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a36274d69947648dbe82721220cc5240ec5d396d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-16085. S3Guard: use object version or etags to protect against inconsistent read after replace/overwrite.\n\nContributed by Ben Roling.\n\nS3Guard will now track the etag of uploaded files and, if an S3\nbucket is versioned, the object version.\n\nYou can then control how to react to a mismatch between the data\nin the DynamoDB table and that in the store: warn, fail, or, when\nusing versions, return the original value.\n\nThis adds two new columns to the table: etag and version.\nThis is transparent to older S3A clients -but when such clients\nadd/update data to the S3Guard table, they will not add these values.\nAs a result, the etag/version checks will not work with files uploaded by older clients.\n\nFor a consistent experience, upgrade all clients to use the latest hadoop version.\n",
      "commitDate": "19/05/19 2:29 PM",
      "commitName": "a36274d69947648dbe82721220cc5240ec5d396d",
      "commitAuthor": "Ben Roling",
      "diff": "@@ -0,0 +1,15 @@\n+  public void processResponse(final CopyResult copyResult)\n+      throws PathIOException {\n+    // ETag (sometimes, depending on encryption and/or multipart) is not the\n+    // same on the copied object as the original.  Version Id seems to never\n+    // be the same on the copy.  As such, there isn\u0027t really anything that\n+    // can be verified on the response, except that a revision ID is present\n+    // if required.\n+    String newRevisionId \u003d policy.getRevisionId(copyResult);\n+    LOG.debug(\"Copy result {}: {}\", policy.getSource(), newRevisionId);\n+    if (newRevisionId \u003d\u003d null \u0026\u0026 policy.isRequireVersion()) {\n+      throw new NoVersionAttributeException(uri, String.format(\n+          \"Change detection policy requires %s\",\n+          policy.getSource()));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void processResponse(final CopyResult copyResult)\n      throws PathIOException {\n    // ETag (sometimes, depending on encryption and/or multipart) is not the\n    // same on the copied object as the original.  Version Id seems to never\n    // be the same on the copy.  As such, there isn\u0027t really anything that\n    // can be verified on the response, except that a revision ID is present\n    // if required.\n    String newRevisionId \u003d policy.getRevisionId(copyResult);\n    LOG.debug(\"Copy result {}: {}\", policy.getSource(), newRevisionId);\n    if (newRevisionId \u003d\u003d null \u0026\u0026 policy.isRequireVersion()) {\n      throw new NoVersionAttributeException(uri, String.format(\n          \"Change detection policy requires %s\",\n          policy.getSource()));\n    }\n  }",
      "path": "hadoop-tools/hadoop-aws/src/main/java/org/apache/hadoop/fs/s3a/impl/ChangeTracker.java"
    }
  }
}