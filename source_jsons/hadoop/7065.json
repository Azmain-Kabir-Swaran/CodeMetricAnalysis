{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirSymlinkOp.java",
  "functionName": "addSymlink",
  "functionId": "addSymlink___fsd-FSDirectory__path-String__iip-INodesInPath__target-String__dirPerms-PermissionStatus__createParent-boolean__logRetryCache-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
  "functionStartLine": 99,
  "functionEndLine": 129,
  "numCommitsSeen": 983,
  "timeTaken": 14120,
  "changeHistory": [
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "185e0c7b4c056b88f606362c71e4a22aae7076e0",
    "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
    "02f3ff33876752f0cce0d91eef62a4d564e11072"
  ],
  "changeHistoryShort": {
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e": "Ybodychange",
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0": "Ybodychange",
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ymultichange(Yparameterchange,Ybodychange)",
    "185e0c7b4c056b88f606362c71e4a22aae7076e0": "Ybodychange",
    "a4e0ff5e052abad498595ee198b49c5310c9ec0d": "Ybodychange",
    "02f3ff33876752f0cce0d91eef62a4d564e11072": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8b7adf4ddf420a93c586c4b2eac27dd0f649682e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10768. Optimize mkdir ops. Contributed by Daryn Sharp.\n",
      "commitDate": "26/08/16 1:39 PM",
      "commitName": "8b7adf4ddf420a93c586c4b2eac27dd0f649682e",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "17/08/16 1:53 PM",
      "commitNameOld": "869393643de23dcb010cc33091c8eb398de0fd6c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 8.99,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private static INodeSymlink addSymlink(FSDirectory fsd, String path,\n       INodesInPath iip, String target, PermissionStatus dirPerms,\n       boolean createParent, boolean logRetryCache) throws IOException {\n     final long mtime \u003d now();\n-    final byte[] localName \u003d iip.getLastLocalName();\n+    final INodesInPath parent;\n     if (createParent) {\n-      Map.Entry\u003cINodesInPath, String\u003e e \u003d FSDirMkdirOp\n-          .createAncestorDirectories(fsd, iip, dirPerms);\n-      if (e \u003d\u003d null) {\n+      parent \u003d FSDirMkdirOp.createAncestorDirectories(fsd, iip, dirPerms);\n+      if (parent \u003d\u003d null) {\n         return null;\n       }\n-      iip \u003d INodesInPath.append(e.getKey(), null, localName);\n+    } else {\n+      parent \u003d iip.getParentINodesInPath();\n     }\n     final String userName \u003d dirPerms.getUserName();\n     long id \u003d fsd.allocateNewInodeId();\n     PermissionStatus perm \u003d new PermissionStatus(\n         userName, null, FsPermission.getDefault());\n-    INodeSymlink newNode \u003d unprotectedAddSymlink(fsd, iip.getExistingINodes(),\n-        localName, id, target, mtime, mtime, perm);\n+    INodeSymlink newNode \u003d unprotectedAddSymlink(fsd, parent,\n+        iip.getLastLocalName(), id, target, mtime, mtime, perm);\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n     fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static INodeSymlink addSymlink(FSDirectory fsd, String path,\n      INodesInPath iip, String target, PermissionStatus dirPerms,\n      boolean createParent, boolean logRetryCache) throws IOException {\n    final long mtime \u003d now();\n    final INodesInPath parent;\n    if (createParent) {\n      parent \u003d FSDirMkdirOp.createAncestorDirectories(fsd, iip, dirPerms);\n      if (parent \u003d\u003d null) {\n        return null;\n      }\n    } else {\n      parent \u003d iip.getParentINodesInPath();\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d fsd.allocateNewInodeId();\n    PermissionStatus perm \u003d new PermissionStatus(\n        userName, null, FsPermission.getDefault());\n    INodeSymlink newNode \u003d unprotectedAddSymlink(fsd, parent,\n        iip.getLastLocalName(), id, target, mtime, mtime, perm);\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "5caebbae8c2fc9ba2e32384657aee21641a1a6d0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7484. Make FSDirectory#addINode take existing INodes as its parameter. Contributed by Jing Zhao.\n",
      "commitDate": "22/12/14 11:19 PM",
      "commitName": "5caebbae8c2fc9ba2e32384657aee21641a1a6d0",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "18/12/14 11:25 AM",
      "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 4.5,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,31 @@\n-  private static INodeSymlink addSymlink(\n-      FSDirectory fsd, String path, INodesInPath iip, String target,\n-      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n-      throws IOException {\n+  private static INodeSymlink addSymlink(FSDirectory fsd, String path,\n+      INodesInPath iip, String target, PermissionStatus dirPerms,\n+      boolean createParent, boolean logRetryCache) throws IOException {\n     final long mtime \u003d now();\n+    final byte[] localName \u003d iip.getLastLocalName();\n     if (createParent) {\n-      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n-      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n-          fsd,\n-          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n+      Map.Entry\u003cINodesInPath, String\u003e e \u003d FSDirMkdirOp\n+          .createAncestorDirectories(fsd, iip, dirPerms);\n+      if (e \u003d\u003d null) {\n         return null;\n-      } else {\n-        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n+      iip \u003d INodesInPath.append(e.getKey(), null, localName);\n     }\n     final String userName \u003d dirPerms.getUserName();\n     long id \u003d fsd.allocateNewInodeId();\n     PermissionStatus perm \u003d new PermissionStatus(\n         userName, null, FsPermission.getDefault());\n-    INodeSymlink newNode \u003d\n-        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n+    INodeSymlink newNode \u003d unprotectedAddSymlink(fsd, iip.getExistingINodes(),\n+        localName, id, target, mtime, mtime, perm);\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n     fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static INodeSymlink addSymlink(FSDirectory fsd, String path,\n      INodesInPath iip, String target, PermissionStatus dirPerms,\n      boolean createParent, boolean logRetryCache) throws IOException {\n    final long mtime \u003d now();\n    final byte[] localName \u003d iip.getLastLocalName();\n    if (createParent) {\n      Map.Entry\u003cINodesInPath, String\u003e e \u003d FSDirMkdirOp\n          .createAncestorDirectories(fsd, iip, dirPerms);\n      if (e \u003d\u003d null) {\n        return null;\n      }\n      iip \u003d INodesInPath.append(e.getKey(), null, localName);\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d fsd.allocateNewInodeId();\n    PermissionStatus perm \u003d new PermissionStatus(\n        userName, null, FsPermission.getDefault());\n    INodeSymlink newNode \u003d unprotectedAddSymlink(fsd, iip.getExistingINodes(),\n        localName, id, target, mtime, mtime, perm);\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
      "extendedDetails": {}
    },
    "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "17/12/14 2:48 PM",
      "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n-                                  PermissionStatus dirPerms,\n-                                  boolean createParent, boolean logRetryCache)\n-      throws UnresolvedLinkException, FileAlreadyExistsException,\n-      QuotaExceededException, SnapshotAccessControlException, AclException {\n-    waitForLoadingFSImage();\n-\n-    final long modTime \u003d now();\n+  private static INodeSymlink addSymlink(\n+      FSDirectory fsd, String path, INodesInPath iip, String target,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n+      throws IOException {\n+    final long mtime \u003d now();\n     if (createParent) {\n       INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n-      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n-          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n+      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n+          fsd,\n+          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n         return null;\n       } else {\n         iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n-    long id \u003d dir.allocateNewInodeId();\n-    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n-            new PermissionStatus(userName, null, FsPermission.getDefault()));\n+    long id \u003d fsd.allocateNewInodeId();\n+    PermissionStatus perm \u003d new PermissionStatus(\n+        userName, null, FsPermission.getDefault());\n+    INodeSymlink newNode \u003d\n+        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n-    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n+    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static INodeSymlink addSymlink(\n      FSDirectory fsd, String path, INodesInPath iip, String target,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    final long mtime \u003d now();\n    if (createParent) {\n      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n          fsd,\n          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n        return null;\n      } else {\n        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d fsd.allocateNewInodeId();\n    PermissionStatus perm \u003d new PermissionStatus(\n        userName, null, FsPermission.getDefault());\n    INodeSymlink newNode \u003d\n        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
            "oldMethodName": "addSymlink",
            "newMethodName": "addSymlink"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n-                                  PermissionStatus dirPerms,\n-                                  boolean createParent, boolean logRetryCache)\n-      throws UnresolvedLinkException, FileAlreadyExistsException,\n-      QuotaExceededException, SnapshotAccessControlException, AclException {\n-    waitForLoadingFSImage();\n-\n-    final long modTime \u003d now();\n+  private static INodeSymlink addSymlink(\n+      FSDirectory fsd, String path, INodesInPath iip, String target,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n+      throws IOException {\n+    final long mtime \u003d now();\n     if (createParent) {\n       INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n-      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n-          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n+      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n+          fsd,\n+          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n         return null;\n       } else {\n         iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n-    long id \u003d dir.allocateNewInodeId();\n-    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n-            new PermissionStatus(userName, null, FsPermission.getDefault()));\n+    long id \u003d fsd.allocateNewInodeId();\n+    PermissionStatus perm \u003d new PermissionStatus(\n+        userName, null, FsPermission.getDefault());\n+    INodeSymlink newNode \u003d\n+        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n-    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n+    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static INodeSymlink addSymlink(\n      FSDirectory fsd, String path, INodesInPath iip, String target,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    final long mtime \u003d now();\n    if (createParent) {\n      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n          fsd,\n          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n        return null;\n      } else {\n        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d fsd.allocateNewInodeId();\n    PermissionStatus perm \u003d new PermissionStatus(\n        userName, null, FsPermission.getDefault());\n    INodeSymlink newNode \u003d\n        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[private, static]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n-                                  PermissionStatus dirPerms,\n-                                  boolean createParent, boolean logRetryCache)\n-      throws UnresolvedLinkException, FileAlreadyExistsException,\n-      QuotaExceededException, SnapshotAccessControlException, AclException {\n-    waitForLoadingFSImage();\n-\n-    final long modTime \u003d now();\n+  private static INodeSymlink addSymlink(\n+      FSDirectory fsd, String path, INodesInPath iip, String target,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n+      throws IOException {\n+    final long mtime \u003d now();\n     if (createParent) {\n       INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n-      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n-          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n+      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n+          fsd,\n+          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n         return null;\n       } else {\n         iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n-    long id \u003d dir.allocateNewInodeId();\n-    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n-            new PermissionStatus(userName, null, FsPermission.getDefault()));\n+    long id \u003d fsd.allocateNewInodeId();\n+    PermissionStatus perm \u003d new PermissionStatus(\n+        userName, null, FsPermission.getDefault());\n+    INodeSymlink newNode \u003d\n+        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n-    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n+    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static INodeSymlink addSymlink(\n      FSDirectory fsd, String path, INodesInPath iip, String target,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    final long mtime \u003d now();\n    if (createParent) {\n      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n          fsd,\n          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n        return null;\n      } else {\n        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d fsd.allocateNewInodeId();\n    PermissionStatus perm \u003d new PermissionStatus(\n        userName, null, FsPermission.getDefault());\n    INodeSymlink newNode \u003d\n        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldValue": "[UnresolvedLinkException, FileAlreadyExistsException, QuotaExceededException, SnapshotAccessControlException, AclException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n-                                  PermissionStatus dirPerms,\n-                                  boolean createParent, boolean logRetryCache)\n-      throws UnresolvedLinkException, FileAlreadyExistsException,\n-      QuotaExceededException, SnapshotAccessControlException, AclException {\n-    waitForLoadingFSImage();\n-\n-    final long modTime \u003d now();\n+  private static INodeSymlink addSymlink(\n+      FSDirectory fsd, String path, INodesInPath iip, String target,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n+      throws IOException {\n+    final long mtime \u003d now();\n     if (createParent) {\n       INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n-      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n-          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n+      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n+          fsd,\n+          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n         return null;\n       } else {\n         iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n-    long id \u003d dir.allocateNewInodeId();\n-    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n-            new PermissionStatus(userName, null, FsPermission.getDefault()));\n+    long id \u003d fsd.allocateNewInodeId();\n+    PermissionStatus perm \u003d new PermissionStatus(\n+        userName, null, FsPermission.getDefault());\n+    INodeSymlink newNode \u003d\n+        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n-    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n+    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static INodeSymlink addSymlink(\n      FSDirectory fsd, String path, INodesInPath iip, String target,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    final long mtime \u003d now();\n    if (createParent) {\n      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n          fsd,\n          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n        return null;\n      } else {\n        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d fsd.allocateNewInodeId();\n    PermissionStatus perm \u003d new PermissionStatus(\n        userName, null, FsPermission.getDefault());\n    INodeSymlink newNode \u003d\n        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7528. Consolidate symlink-related implementation into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "17/12/14 2:48 PM",
          "commitName": "0da1330bfd3080a7ad95a4b48ba7b7ac89c3608f",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "17/12/14 2:05 PM",
          "commitNameOld": "316613bdaee282cdd5c0958bf2719e0601a5b66c",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n-  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n-                                  PermissionStatus dirPerms,\n-                                  boolean createParent, boolean logRetryCache)\n-      throws UnresolvedLinkException, FileAlreadyExistsException,\n-      QuotaExceededException, SnapshotAccessControlException, AclException {\n-    waitForLoadingFSImage();\n-\n-    final long modTime \u003d now();\n+  private static INodeSymlink addSymlink(\n+      FSDirectory fsd, String path, INodesInPath iip, String target,\n+      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n+      throws IOException {\n+    final long mtime \u003d now();\n     if (createParent) {\n       INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n-      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n-          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n+      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n+          fsd,\n+          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n         return null;\n       } else {\n         iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n-    long id \u003d dir.allocateNewInodeId();\n-    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n-            new PermissionStatus(userName, null, FsPermission.getDefault()));\n+    long id \u003d fsd.allocateNewInodeId();\n+    PermissionStatus perm \u003d new PermissionStatus(\n+        userName, null, FsPermission.getDefault());\n+    INodeSymlink newNode \u003d\n+        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n-    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n+    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static INodeSymlink addSymlink(\n      FSDirectory fsd, String path, INodesInPath iip, String target,\n      PermissionStatus dirPerms, boolean createParent, boolean logRetryCache)\n      throws IOException {\n    final long mtime \u003d now();\n    if (createParent) {\n      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(\n          fsd,\n          parentIIP, dirPerms, true, mtime)) \u003d\u003d null) {\n        return null;\n      } else {\n        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d fsd.allocateNewInodeId();\n    PermissionStatus perm \u003d new PermissionStatus(\n        userName, null, FsPermission.getDefault());\n    INodeSymlink newNode \u003d\n        unprotectedAddSymlink(fsd, iip, id, target, mtime, mtime, perm);\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    fsd.getEditLog().logSymlink(path, target, mtime, mtime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirSymlinkOp.java",
          "extendedDetails": {
            "oldValue": "[path-String, iip-INodesInPath, target-String, dirPerms-PermissionStatus, createParent-boolean, logRetryCache-boolean]",
            "newValue": "[fsd-FSDirectory, path-String, iip-INodesInPath, target-String, dirPerms-PermissionStatus, createParent-boolean, logRetryCache-boolean]"
          }
        }
      ]
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "12/12/14 11:51 AM",
          "commitNameOld": "46612c7a5135d20b20403780b47dd00654aab057",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,33 @@\n-  private INodeSymlink addSymlink(String path, String target,\n+  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n                                   PermissionStatus dirPerms,\n                                   boolean createParent, boolean logRetryCache)\n       throws UnresolvedLinkException, FileAlreadyExistsException,\n       QuotaExceededException, SnapshotAccessControlException, AclException {\n     waitForLoadingFSImage();\n \n     final long modTime \u003d now();\n     if (createParent) {\n-      final String parent \u003d new Path(path).getParent().toString();\n-      if (!FSDirMkdirOp.mkdirsRecursively(dir, parent, dirPerms, true,\n-          modTime)) {\n+      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n+      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n+          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n         return null;\n+      } else {\n+        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n     long id \u003d dir.allocateNewInodeId();\n-    INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n+    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n             new PermissionStatus(userName, null, FsPermission.getDefault()));\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n     getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n                                  PermissionStatus dirPerms,\n                                  boolean createParent, boolean logRetryCache)\n      throws UnresolvedLinkException, FileAlreadyExistsException,\n      QuotaExceededException, SnapshotAccessControlException, AclException {\n    waitForLoadingFSImage();\n\n    final long modTime \u003d now();\n    if (createParent) {\n      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n        return null;\n      } else {\n        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d dir.allocateNewInodeId();\n    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n            new PermissionStatus(userName, null, FsPermission.getDefault()));\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[path-String, target-String, dirPerms-PermissionStatus, createParent-boolean, logRetryCache-boolean]",
            "newValue": "[path-String, iip-INodesInPath, target-String, dirPerms-PermissionStatus, createParent-boolean, logRetryCache-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
          "commitDate": "12/12/14 3:13 PM",
          "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "12/12/14 11:51 AM",
          "commitNameOld": "46612c7a5135d20b20403780b47dd00654aab057",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,33 @@\n-  private INodeSymlink addSymlink(String path, String target,\n+  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n                                   PermissionStatus dirPerms,\n                                   boolean createParent, boolean logRetryCache)\n       throws UnresolvedLinkException, FileAlreadyExistsException,\n       QuotaExceededException, SnapshotAccessControlException, AclException {\n     waitForLoadingFSImage();\n \n     final long modTime \u003d now();\n     if (createParent) {\n-      final String parent \u003d new Path(path).getParent().toString();\n-      if (!FSDirMkdirOp.mkdirsRecursively(dir, parent, dirPerms, true,\n-          modTime)) {\n+      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n+      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n+          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n         return null;\n+      } else {\n+        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n     long id \u003d dir.allocateNewInodeId();\n-    INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n+    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n             new PermissionStatus(userName, null, FsPermission.getDefault()));\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n     getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private INodeSymlink addSymlink(String path, INodesInPath iip, String target,\n                                  PermissionStatus dirPerms,\n                                  boolean createParent, boolean logRetryCache)\n      throws UnresolvedLinkException, FileAlreadyExistsException,\n      QuotaExceededException, SnapshotAccessControlException, AclException {\n    waitForLoadingFSImage();\n\n    final long modTime \u003d now();\n    if (createParent) {\n      INodesInPath parentIIP \u003d iip.getParentINodesInPath();\n      if (parentIIP \u003d\u003d null || (parentIIP \u003d FSDirMkdirOp.mkdirsRecursively(dir,\n          parentIIP, dirPerms, true, modTime)) \u003d\u003d null) {\n        return null;\n      } else {\n        iip \u003d INodesInPath.append(parentIIP, null, iip.getLastLocalName());\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d dir.allocateNewInodeId();\n    INodeSymlink newNode \u003d dir.addSymlink(iip, id, target, modTime, modTime,\n            new PermissionStatus(userName, null, FsPermission.getDefault()));\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "185e0c7b4c056b88f606362c71e4a22aae7076e0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7462. Consolidate implementation of mkdirs() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "02/12/14 2:53 PM",
      "commitName": "185e0c7b4c056b88f606362c71e4a22aae7076e0",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "01/12/14 9:48 PM",
      "commitNameOld": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   private INodeSymlink addSymlink(String path, String target,\n                                   PermissionStatus dirPerms,\n                                   boolean createParent, boolean logRetryCache)\n       throws UnresolvedLinkException, FileAlreadyExistsException,\n       QuotaExceededException, SnapshotAccessControlException, AclException {\n     waitForLoadingFSImage();\n \n     final long modTime \u003d now();\n     if (createParent) {\n       final String parent \u003d new Path(path).getParent().toString();\n-      if (!mkdirsRecursively(parent, dirPerms, true, modTime)) {\n+      if (!FSDirMkdirOp.mkdirsRecursively(dir, parent, dirPerms, true,\n+          modTime)) {\n         return null;\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n-    long id \u003d allocateNewInodeId();\n+    long id \u003d dir.allocateNewInodeId();\n     INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n             new PermissionStatus(userName, null, FsPermission.getDefault()));\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n     getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeSymlink addSymlink(String path, String target,\n                                  PermissionStatus dirPerms,\n                                  boolean createParent, boolean logRetryCache)\n      throws UnresolvedLinkException, FileAlreadyExistsException,\n      QuotaExceededException, SnapshotAccessControlException, AclException {\n    waitForLoadingFSImage();\n\n    final long modTime \u003d now();\n    if (createParent) {\n      final String parent \u003d new Path(path).getParent().toString();\n      if (!FSDirMkdirOp.mkdirsRecursively(dir, parent, dirPerms, true,\n          modTime)) {\n        return null;\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d dir.allocateNewInodeId();\n    INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n            new PermissionStatus(userName, null, FsPermission.getDefault()));\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "a4e0ff5e052abad498595ee198b49c5310c9ec0d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6480. Move waitForReady() from FSDirectory to FSNamesystem. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1603705 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/14 9:13 PM",
      "commitName": "a4e0ff5e052abad498595ee198b49c5310c9ec0d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/06/14 6:00 PM",
      "commitNameOld": "8e8a769e7f5ce806ffdf584f017512ab58cd84e8",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.13,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private INodeSymlink addSymlink(String path, String target,\n                                   PermissionStatus dirPerms,\n                                   boolean createParent, boolean logRetryCache)\n       throws UnresolvedLinkException, FileAlreadyExistsException,\n       QuotaExceededException, SnapshotAccessControlException, AclException {\n-    dir.waitForReady();\n+    waitForLoadingFSImage();\n \n     final long modTime \u003d now();\n     if (createParent) {\n       final String parent \u003d new Path(path).getParent().toString();\n       if (!mkdirsRecursively(parent, dirPerms, true, modTime)) {\n         return null;\n       }\n     }\n     final String userName \u003d dirPerms.getUserName();\n     long id \u003d allocateNewInodeId();\n     INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n             new PermissionStatus(userName, null, FsPermission.getDefault()));\n     if (newNode \u003d\u003d null) {\n       NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n       return null;\n     }\n     getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n         logRetryCache);\n \n     if(NameNode.stateChangeLog.isDebugEnabled()) {\n       NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n     }\n     return newNode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeSymlink addSymlink(String path, String target,\n                                  PermissionStatus dirPerms,\n                                  boolean createParent, boolean logRetryCache)\n      throws UnresolvedLinkException, FileAlreadyExistsException,\n      QuotaExceededException, SnapshotAccessControlException, AclException {\n    waitForLoadingFSImage();\n\n    final long modTime \u003d now();\n    if (createParent) {\n      final String parent \u003d new Path(path).getParent().toString();\n      if (!mkdirsRecursively(parent, dirPerms, true, modTime)) {\n        return null;\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d allocateNewInodeId();\n    INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n            new PermissionStatus(userName, null, FsPermission.getDefault()));\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "02f3ff33876752f0cce0d91eef62a4d564e11072": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6330. Move mkdirs() to FSNamesystem. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1602484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/14 11:04 AM",
      "commitName": "02f3ff33876752f0cce0d91eef62a4d564e11072",
      "commitAuthor": "Haohui Mai",
      "diff": "@@ -0,0 +1,30 @@\n+  private INodeSymlink addSymlink(String path, String target,\n+                                  PermissionStatus dirPerms,\n+                                  boolean createParent, boolean logRetryCache)\n+      throws UnresolvedLinkException, FileAlreadyExistsException,\n+      QuotaExceededException, SnapshotAccessControlException, AclException {\n+    dir.waitForReady();\n+\n+    final long modTime \u003d now();\n+    if (createParent) {\n+      final String parent \u003d new Path(path).getParent().toString();\n+      if (!mkdirsRecursively(parent, dirPerms, true, modTime)) {\n+        return null;\n+      }\n+    }\n+    final String userName \u003d dirPerms.getUserName();\n+    long id \u003d allocateNewInodeId();\n+    INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n+            new PermissionStatus(userName, null, FsPermission.getDefault()));\n+    if (newNode \u003d\u003d null) {\n+      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n+      return null;\n+    }\n+    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n+        logRetryCache);\n+\n+    if(NameNode.stateChangeLog.isDebugEnabled()) {\n+      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n+    }\n+    return newNode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private INodeSymlink addSymlink(String path, String target,\n                                  PermissionStatus dirPerms,\n                                  boolean createParent, boolean logRetryCache)\n      throws UnresolvedLinkException, FileAlreadyExistsException,\n      QuotaExceededException, SnapshotAccessControlException, AclException {\n    dir.waitForReady();\n\n    final long modTime \u003d now();\n    if (createParent) {\n      final String parent \u003d new Path(path).getParent().toString();\n      if (!mkdirsRecursively(parent, dirPerms, true, modTime)) {\n        return null;\n      }\n    }\n    final String userName \u003d dirPerms.getUserName();\n    long id \u003d allocateNewInodeId();\n    INodeSymlink newNode \u003d dir.addSymlink(id, path, target, modTime, modTime,\n            new PermissionStatus(userName, null, FsPermission.getDefault()));\n    if (newNode \u003d\u003d null) {\n      NameNode.stateChangeLog.info(\"addSymlink: failed to add \" + path);\n      return null;\n    }\n    getEditLog().logSymlink(path, target, modTime, modTime, newNode,\n        logRetryCache);\n\n    if(NameNode.stateChangeLog.isDebugEnabled()) {\n      NameNode.stateChangeLog.debug(\"addSymlink: \" + path + \" is added\");\n    }\n    return newNode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java"
    }
  }
}