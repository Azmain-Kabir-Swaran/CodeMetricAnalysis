{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationHistoryServer.java",
  "functionName": "startWebApp",
  "functionId": "startWebApp",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
  "functionStartLine": 237,
  "functionEndLine": 324,
  "numCommitsSeen": 40,
  "timeTaken": 5572,
  "changeHistory": [
    "879de51206ddef132c092ee21e8b6c6e5976a56e",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "22fcd819f0c445be661e644ed67221f867013af8",
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
    "f114e728da6e19f3d35ff0cfef9fceea26aa5d46",
    "f8adeb712dc834c27cec15c04a986f2f635aba83",
    "25f8f801d15e3d9f27f4a2a198262407203e14a5",
    "d1b9b852442cb93b413eff8a137db6213e730d9c",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a",
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
    "91d45f0f017281c8ab7ac858aa5d618accb9ea44",
    "4bd0194e6be68421eb1dc87f9f031626112e4c50",
    "a9023c2736fb8a95dbba90d3f61c9eca33126af4",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
    "e52f67e3897a67a0b6d29e557a31cfa881738821",
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
    "892ada8fb35d57a1120d548fdefb056824aa939f",
    "b867b695565c588e8f86c867cba76397cab62848",
    "e167e585e9dd5c86ae763c257d62fdcc83260200",
    "484faadffec97f8e454cf18b821f6ef12a27616c",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a"
  ],
  "changeHistoryShort": {
    "879de51206ddef132c092ee21e8b6c6e5976a56e": "Ybodychange",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ybodychange",
    "22fcd819f0c445be661e644ed67221f867013af8": "Ybodychange",
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea": "Ybodychange",
    "f114e728da6e19f3d35ff0cfef9fceea26aa5d46": "Ybodychange",
    "f8adeb712dc834c27cec15c04a986f2f635aba83": "Ybodychange",
    "25f8f801d15e3d9f27f4a2a198262407203e14a5": "Ybodychange",
    "d1b9b852442cb93b413eff8a137db6213e730d9c": "Ybodychange",
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": "Ybodychange",
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059": "Ybodychange",
    "91d45f0f017281c8ab7ac858aa5d618accb9ea44": "Ybodychange",
    "4bd0194e6be68421eb1dc87f9f031626112e4c50": "Ybodychange",
    "a9023c2736fb8a95dbba90d3f61c9eca33126af4": "Ybodychange",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": "Ymultichange(Ymodifierchange,Ybodychange)",
    "e52f67e3897a67a0b6d29e557a31cfa881738821": "Ybodychange",
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705": "Ybodychange",
    "892ada8fb35d57a1120d548fdefb056824aa939f": "Ybodychange",
    "b867b695565c588e8f86c867cba76397cab62848": "Ybodychange",
    "e167e585e9dd5c86ae763c257d62fdcc83260200": "Ybodychange",
    "484faadffec97f8e454cf18b821f6ef12a27616c": "Ybodychange",
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "879de51206ddef132c092ee21e8b6c6e5976a56e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5647. [ATSv2 Security] Collector side changes for loading auth filters and principals. Contributed by Varun Saxena\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "879de51206ddef132c092ee21e8b6c6e5976a56e",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/08/17 2:56 AM",
      "commitNameOld": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 22.84,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,118 +1,88 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n-    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n-        secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n-    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n-    boolean modifiedInitializers \u003d false;\n-\n-    initializers \u003d\n-        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n-\n+    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n+    Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n+    // Add CORS filter\n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n-      if(conf.getBoolean(YarnConfiguration\n-          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n-              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n-        if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n-          initializers \u003d\n-            initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n+      if(conf.getBoolean(YarnConfiguration.\n+          TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED,\n+          YarnConfiguration.\n+          TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n+        if (initializers.contains(\n+            HttpCrossOriginFilterInitializer.class.getName())) {\n+          initializers \u003d initializers.replaceAll(\n+              HttpCrossOriginFilterInitializer.class.getName(),\n               CrossOriginFilterInitializer.class.getName());\n+        } else {\n+          defaultInitializers.add(CrossOriginFilterInitializer.class.getName());\n         }\n-        else {\n-          if (initializers.length() !\u003d 0) {\n-            initializers +\u003d \",\";\n-          }\n-          initializers +\u003d CrossOriginFilterInitializer.class.getName();\n-        }\n-        modifiedInitializers \u003d true;\n       }\n     }\n-\n-    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n-      .getName())) {\n-      if (initializers.length() !\u003d 0) {\n-        initializers +\u003d \",\";\n-      }\n-      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n-      modifiedInitializers \u003d true;\n-    }\n-\n-    String[] parts \u003d initializers.split(\",\");\n-    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n-    for (String filterInitializer : parts) {\n-      filterInitializer \u003d filterInitializer.trim();\n-      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n-        .getName())) {\n-        modifiedInitializers \u003d true;\n-        continue;\n-      }\n-      target.add(filterInitializer);\n-    }\n-    String actualInitializers \u003d\n-        org.apache.commons.lang.StringUtils.join(target, \",\");\n-    if (modifiedInitializers) {\n-      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n-    }\n+    TimelineServerUtils.addTimelineAuthFilter(\n+        initializers, defaultInitializers, secretManagerService);\n+    TimelineServerUtils.setTimelineFilters(\n+        conf, initializers, defaultInitializers);\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     try {\n       AHSWebApp ahsWebApp \u003d\n           new AHSWebApp(timelineDataManager, ahsClientService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n              .with(conf)\n               .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                  conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n               .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n               .withXFSProtection(YarnConfiguration.TIMELINE_XFS_PREFIX)\n               .at(bindAddress).build(ahsWebApp);\n        HttpServer2 httpServer \u003d webApp.httpServer();\n \n        String[] names \u003d conf.getTrimmedStrings(\n            YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n        WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n \n       for (String name : names) {\n         String webPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n         String onDiskPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n         WebAppContext uiWebAppContext \u003d new WebAppContext();\n         uiWebAppContext.setContextPath(webPath);\n         if (onDiskPath.endsWith(\".war\")) {\n           uiWebAppContext.setWar(onDiskPath);\n         } else {\n           uiWebAppContext.setResourceBase(onDiskPath);\n         }\n         final String[] ALL_URLS \u003d {\"/*\"};\n         FilterHolder[] filterHolders \u003d\n             webAppContext.getServletHandler().getFilters();\n         for (FilterHolder filterHolder : filterHolders) {\n           if (!\"guice\".equals(filterHolder.getName())) {\n             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n                 ALL_URLS);\n           }\n         }\n         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n         httpServer.addHandlerAtFront(uiWebAppContext);\n       }\n        httpServer.start();\n        conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         this.getListenerAddress());\n        LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\", \"\");\n    Set\u003cString\u003e defaultInitializers \u003d new LinkedHashSet\u003cString\u003e();\n    // Add CORS filter\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration.\n          TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED,\n          YarnConfiguration.\n          TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.contains(\n            HttpCrossOriginFilterInitializer.class.getName())) {\n          initializers \u003d initializers.replaceAll(\n              HttpCrossOriginFilterInitializer.class.getName(),\n              CrossOriginFilterInitializer.class.getName());\n        } else {\n          defaultInitializers.add(CrossOriginFilterInitializer.class.getName());\n        }\n      }\n    }\n    TimelineServerUtils.addTimelineAuthFilter(\n        initializers, defaultInitializers, secretManagerService);\n    TimelineServerUtils.setTimelineFilters(\n        conf, initializers, defaultInitializers);\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    try {\n      AHSWebApp ahsWebApp \u003d\n          new AHSWebApp(timelineDataManager, ahsClientService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n             .with(conf)\n              .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n              .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.TIMELINE_XFS_PREFIX)\n              .at(bindAddress).build(ahsWebApp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n\n       String[] names \u003d conf.getTrimmedStrings(\n           YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n\n      for (String name : names) {\n        String webPath \u003d conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n        String onDiskPath \u003d conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n        WebAppContext uiWebAppContext \u003d new WebAppContext();\n        uiWebAppContext.setContextPath(webPath);\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n        }\n        final String[] ALL_URLS \u003d {\"/*\"};\n        FilterHolder[] filterHolders \u003d\n            webAppContext.getServletHandler().getFilters();\n        for (FilterHolder filterHolder : filterHolders) {\n          if (!\"guice\".equals(filterHolder.getName())) {\n            HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                filterHolder.getClassName(), filterHolder.getInitParameters(),\n                ALL_URLS);\n          }\n        }\n        LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n        httpServer.addHandlerAtFront(uiWebAppContext);\n      }\n       httpServer.start();\n       conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        this.getListenerAddress());\n       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "19/05/16 2:15 PM",
      "commitNameOld": "22fcd819f0c445be661e644ed67221f867013af8",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 161.08,
      "commitsBetweenForRepo": 1233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,114 +1,118 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n         if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n           initializers \u003d\n             initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n               CrossOriginFilterInitializer.class.getName());\n         }\n         else {\n           if (initializers.length() !\u003d 0) {\n             initializers +\u003d \",\";\n           }\n           initializers +\u003d CrossOriginFilterInitializer.class.getName();\n         }\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       if (initializers.length() !\u003d 0) {\n         initializers +\u003d \",\";\n       }\n       initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     try {\n       AHSWebApp ahsWebApp \u003d\n           new AHSWebApp(timelineDataManager, ahsClientService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n              .with(conf)\n               .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                  conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n               .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n               .withXFSProtection(YarnConfiguration.TIMELINE_XFS_PREFIX)\n               .at(bindAddress).build(ahsWebApp);\n        HttpServer2 httpServer \u003d webApp.httpServer();\n \n        String[] names \u003d conf.getTrimmedStrings(\n            YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n        WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n \n-       for (String name : names) {\n-         String webPath \u003d conf.get(\n-             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n-         String onDiskPath \u003d conf.get(\n-             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n-         WebAppContext uiWebAppContext \u003d new WebAppContext();\n-         uiWebAppContext.setContextPath(webPath);\n-         uiWebAppContext.setWar(onDiskPath);\n-         final String[] ALL_URLS \u003d { \"/*\" };\n-         FilterHolder[] filterHolders \u003d\n-           webAppContext.getServletHandler().getFilters();\n-         for (FilterHolder filterHolder: filterHolders) {\n-           if (!\"guice\".equals(filterHolder.getName())) {\n-             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n-                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n-                 ALL_URLS);\n-           }\n-         }\n-         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n-         httpServer.addContext(uiWebAppContext, true);\n-       }\n+      for (String name : names) {\n+        String webPath \u003d conf.get(\n+            YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n+        String onDiskPath \u003d conf.get(\n+            YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n+        WebAppContext uiWebAppContext \u003d new WebAppContext();\n+        uiWebAppContext.setContextPath(webPath);\n+        if (onDiskPath.endsWith(\".war\")) {\n+          uiWebAppContext.setWar(onDiskPath);\n+        } else {\n+          uiWebAppContext.setResourceBase(onDiskPath);\n+        }\n+        final String[] ALL_URLS \u003d {\"/*\"};\n+        FilterHolder[] filterHolders \u003d\n+            webAppContext.getServletHandler().getFilters();\n+        for (FilterHolder filterHolder : filterHolders) {\n+          if (!\"guice\".equals(filterHolder.getName())) {\n+            HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n+                filterHolder.getClassName(), filterHolder.getInitParameters(),\n+                ALL_URLS);\n+          }\n+        }\n+        LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n+        httpServer.addHandlerAtFront(uiWebAppContext);\n+      }\n        httpServer.start();\n        conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         this.getListenerAddress());\n        LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n          initializers \u003d\n            initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n              CrossOriginFilterInitializer.class.getName());\n        }\n        else {\n          if (initializers.length() !\u003d 0) {\n            initializers +\u003d \",\";\n          }\n          initializers +\u003d CrossOriginFilterInitializer.class.getName();\n        }\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      if (initializers.length() !\u003d 0) {\n        initializers +\u003d \",\";\n      }\n      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    try {\n      AHSWebApp ahsWebApp \u003d\n          new AHSWebApp(timelineDataManager, ahsClientService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n             .with(conf)\n              .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n              .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.TIMELINE_XFS_PREFIX)\n              .at(bindAddress).build(ahsWebApp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n\n       String[] names \u003d conf.getTrimmedStrings(\n           YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n\n      for (String name : names) {\n        String webPath \u003d conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n        String onDiskPath \u003d conf.get(\n            YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n        WebAppContext uiWebAppContext \u003d new WebAppContext();\n        uiWebAppContext.setContextPath(webPath);\n        if (onDiskPath.endsWith(\".war\")) {\n          uiWebAppContext.setWar(onDiskPath);\n        } else {\n          uiWebAppContext.setResourceBase(onDiskPath);\n        }\n        final String[] ALL_URLS \u003d {\"/*\"};\n        FilterHolder[] filterHolders \u003d\n            webAppContext.getServletHandler().getFilters();\n        for (FilterHolder filterHolder : filterHolders) {\n          if (!\"guice\".equals(filterHolder.getName())) {\n            HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                filterHolder.getClassName(), filterHolder.getInitParameters(),\n                ALL_URLS);\n          }\n        }\n        LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n        httpServer.addHandlerAtFront(uiWebAppContext);\n      }\n       httpServer.start();\n       conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        this.getListenerAddress());\n       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "22fcd819f0c445be661e644ed67221f867013af8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5076. YARN web interfaces lack XFS protection. Contributed by Jonathan Maron.\n(cherry picked from commit 2703ec68712279494d67b0d76b7ac10e7a1628be)\n",
      "commitDate": "19/05/16 2:15 PM",
      "commitName": "22fcd819f0c445be661e644ed67221f867013af8",
      "commitAuthor": "Junping Du",
      "commitDateOld": "28/03/16 10:17 PM",
      "commitNameOld": "80182809aed76fb9522d25db9bf5e445395dd573",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 51.66,
      "commitsBetweenForRepo": 345,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,113 +1,114 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n         if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n           initializers \u003d\n             initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n               CrossOriginFilterInitializer.class.getName());\n         }\n         else {\n           if (initializers.length() !\u003d 0) {\n             initializers +\u003d \",\";\n           }\n           initializers +\u003d CrossOriginFilterInitializer.class.getName();\n         }\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       if (initializers.length() !\u003d 0) {\n         initializers +\u003d \",\";\n       }\n       initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     try {\n       AHSWebApp ahsWebApp \u003d\n           new AHSWebApp(timelineDataManager, ahsClientService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n              .with(conf)\n               .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                  conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n               .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n+              .withXFSProtection(YarnConfiguration.TIMELINE_XFS_PREFIX)\n               .at(bindAddress).build(ahsWebApp);\n        HttpServer2 httpServer \u003d webApp.httpServer();\n \n        String[] names \u003d conf.getTrimmedStrings(\n            YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n        WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n \n        for (String name : names) {\n          String webPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n          String onDiskPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n          WebAppContext uiWebAppContext \u003d new WebAppContext();\n          uiWebAppContext.setContextPath(webPath);\n          uiWebAppContext.setWar(onDiskPath);\n          final String[] ALL_URLS \u003d { \"/*\" };\n          FilterHolder[] filterHolders \u003d\n            webAppContext.getServletHandler().getFilters();\n          for (FilterHolder filterHolder: filterHolders) {\n            if (!\"guice\".equals(filterHolder.getName())) {\n              HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                  filterHolder.getClassName(), filterHolder.getInitParameters(),\n                  ALL_URLS);\n            }\n          }\n          LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n          httpServer.addContext(uiWebAppContext, true);\n        }\n        httpServer.start();\n        conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         this.getListenerAddress());\n        LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n          initializers \u003d\n            initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n              CrossOriginFilterInitializer.class.getName());\n        }\n        else {\n          if (initializers.length() !\u003d 0) {\n            initializers +\u003d \",\";\n          }\n          initializers +\u003d CrossOriginFilterInitializer.class.getName();\n        }\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      if (initializers.length() !\u003d 0) {\n        initializers +\u003d \",\";\n      }\n      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    try {\n      AHSWebApp ahsWebApp \u003d\n          new AHSWebApp(timelineDataManager, ahsClientService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n             .with(conf)\n              .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n              .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n              .withXFSProtection(YarnConfiguration.TIMELINE_XFS_PREFIX)\n              .at(bindAddress).build(ahsWebApp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n\n       String[] names \u003d conf.getTrimmedStrings(\n           YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n\n       for (String name : names) {\n         String webPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n         String onDiskPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n         WebAppContext uiWebAppContext \u003d new WebAppContext();\n         uiWebAppContext.setContextPath(webPath);\n         uiWebAppContext.setWar(onDiskPath);\n         final String[] ALL_URLS \u003d { \"/*\" };\n         FilterHolder[] filterHolders \u003d\n           webAppContext.getServletHandler().getFilters();\n         for (FilterHolder filterHolder: filterHolders) {\n           if (!\"guice\".equals(filterHolder.getName())) {\n             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n                 ALL_URLS);\n           }\n         }\n         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n         httpServer.addContext(uiWebAppContext, true);\n       }\n       httpServer.start();\n       conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        this.getListenerAddress());\n       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "e51a8c10560e5db5cf01fd530af48825cb51c9ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4737. Add CSRF filter support in YARN. Contributed by Jonathan Maron.\n",
      "commitDate": "07/03/16 1:56 AM",
      "commitName": "e51a8c10560e5db5cf01fd530af48825cb51c9ea",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "17/01/16 5:37 PM",
      "commitNameOld": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 49.35,
      "commitsBetweenForRepo": 346,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,108 +1,113 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n         if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n           initializers \u003d\n             initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n               CrossOriginFilterInitializer.class.getName());\n         }\n         else {\n           if (initializers.length() !\u003d 0) {\n             initializers +\u003d \",\";\n           }\n           initializers +\u003d CrossOriginFilterInitializer.class.getName();\n         }\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       if (initializers.length() !\u003d 0) {\n         initializers +\u003d \",\";\n       }\n       initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     try {\n-      AHSWebApp ahsWebApp \u003d new AHSWebApp(timelineDataManager, ahsClientService);\n+      AHSWebApp ahsWebApp \u003d\n+          new AHSWebApp(timelineDataManager, ahsClientService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n-             .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);\n+             .with(conf)\n+              .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n+              .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n+              .at(bindAddress).build(ahsWebApp);\n        HttpServer2 httpServer \u003d webApp.httpServer();\n \n-       String[] names \u003d conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n+       String[] names \u003d conf.getTrimmedStrings(\n+           YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n        WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n \n        for (String name : names) {\n          String webPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n          String onDiskPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n          WebAppContext uiWebAppContext \u003d new WebAppContext();\n          uiWebAppContext.setContextPath(webPath);\n          uiWebAppContext.setWar(onDiskPath);\n          final String[] ALL_URLS \u003d { \"/*\" };\n          FilterHolder[] filterHolders \u003d\n            webAppContext.getServletHandler().getFilters();\n          for (FilterHolder filterHolder: filterHolders) {\n            if (!\"guice\".equals(filterHolder.getName())) {\n              HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                  filterHolder.getClassName(), filterHolder.getInitParameters(),\n                  ALL_URLS);\n            }\n          }\n          LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n          httpServer.addContext(uiWebAppContext, true);\n        }\n        httpServer.start();\n        conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n-         YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n-         this.getListenerAddress());\n+        YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+        this.getListenerAddress());\n        LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n          initializers \u003d\n            initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n              CrossOriginFilterInitializer.class.getName());\n        }\n        else {\n          if (initializers.length() !\u003d 0) {\n            initializers +\u003d \",\";\n          }\n          initializers +\u003d CrossOriginFilterInitializer.class.getName();\n        }\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      if (initializers.length() !\u003d 0) {\n        initializers +\u003d \",\";\n      }\n      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    try {\n      AHSWebApp ahsWebApp \u003d\n          new AHSWebApp(timelineDataManager, ahsClientService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n             .with(conf)\n              .withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS))\n              .withCSRFProtection(YarnConfiguration.TIMELINE_CSRF_PREFIX)\n              .at(bindAddress).build(ahsWebApp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n\n       String[] names \u003d conf.getTrimmedStrings(\n           YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n\n       for (String name : names) {\n         String webPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n         String onDiskPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n         WebAppContext uiWebAppContext \u003d new WebAppContext();\n         uiWebAppContext.setContextPath(webPath);\n         uiWebAppContext.setWar(onDiskPath);\n         final String[] ALL_URLS \u003d { \"/*\" };\n         FilterHolder[] filterHolders \u003d\n           webAppContext.getServletHandler().getFilters();\n         for (FilterHolder filterHolder: filterHolders) {\n           if (!\"guice\".equals(filterHolder.getName())) {\n             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n                 ALL_URLS);\n           }\n         }\n         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n         httpServer.addContext(uiWebAppContext, true);\n       }\n       httpServer.start();\n       conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n        YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n        this.getListenerAddress());\n       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "f114e728da6e19f3d35ff0cfef9fceea26aa5d46": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2859.addendum: fix the remaining issue from the previous patch\n",
      "commitDate": "19/11/15 10:08 AM",
      "commitName": "f114e728da6e19f3d35ff0cfef9fceea26aa5d46",
      "commitAuthor": "Xuan",
      "commitDateOld": "30/10/15 2:00 AM",
      "commitNameOld": "ce31b22739512804da38cf87e0ce1059e3128da3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 20.38,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,108 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n         if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n           initializers \u003d\n             initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n               CrossOriginFilterInitializer.class.getName());\n         }\n         else {\n           if (initializers.length() !\u003d 0) {\n             initializers +\u003d \",\";\n           }\n           initializers +\u003d CrossOriginFilterInitializer.class.getName();\n         }\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       if (initializers.length() !\u003d 0) {\n         initializers +\u003d \",\";\n       }\n       initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     try {\n       AHSWebApp ahsWebApp \u003d new AHSWebApp(timelineDataManager, ahsClientService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n              .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                  conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);\n        HttpServer2 httpServer \u003d webApp.httpServer();\n \n        String[] names \u003d conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n        WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n \n        for (String name : names) {\n          String webPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n          String onDiskPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n          WebAppContext uiWebAppContext \u003d new WebAppContext();\n          uiWebAppContext.setContextPath(webPath);\n          uiWebAppContext.setWar(onDiskPath);\n          final String[] ALL_URLS \u003d { \"/*\" };\n          FilterHolder[] filterHolders \u003d\n            webAppContext.getServletHandler().getFilters();\n          for (FilterHolder filterHolder: filterHolders) {\n            if (!\"guice\".equals(filterHolder.getName())) {\n              HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                  filterHolder.getClassName(), filterHolder.getInitParameters(),\n                  ALL_URLS);\n            }\n          }\n          LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n          httpServer.addContext(uiWebAppContext, true);\n        }\n        httpServer.start();\n+       conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n+         YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+         this.getListenerAddress());\n        LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n          initializers \u003d\n            initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n              CrossOriginFilterInitializer.class.getName());\n        }\n        else {\n          if (initializers.length() !\u003d 0) {\n            initializers +\u003d \",\";\n          }\n          initializers +\u003d CrossOriginFilterInitializer.class.getName();\n        }\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      if (initializers.length() !\u003d 0) {\n        initializers +\u003d \",\";\n      }\n      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    try {\n      AHSWebApp ahsWebApp \u003d new AHSWebApp(timelineDataManager, ahsClientService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n             .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n\n       String[] names \u003d conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n\n       for (String name : names) {\n         String webPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n         String onDiskPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n         WebAppContext uiWebAppContext \u003d new WebAppContext();\n         uiWebAppContext.setContextPath(webPath);\n         uiWebAppContext.setWar(onDiskPath);\n         final String[] ALL_URLS \u003d { \"/*\" };\n         FilterHolder[] filterHolders \u003d\n           webAppContext.getServletHandler().getFilters();\n         for (FilterHolder filterHolder: filterHolders) {\n           if (!\"guice\".equals(filterHolder.getName())) {\n             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n                 ALL_URLS);\n           }\n         }\n         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n         httpServer.addContext(uiWebAppContext, true);\n       }\n       httpServer.start();\n       conf.updateConnectAddr(YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n         YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         YarnConfiguration.DEFAULT_TIMELINE_SERVICE_WEBAPP_ADDRESS,\n         this.getListenerAddress());\n       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "f8adeb712dc834c27cec15c04a986f2f635aba83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4009. CORS support for ResourceManager REST API. ( Varun Vasudev via jeagles)\n",
      "commitDate": "23/10/15 8:34 AM",
      "commitName": "f8adeb712dc834c27cec15c04a986f2f635aba83",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "21/10/15 1:38 PM",
      "commitNameOld": "25f8f801d15e3d9f27f4a2a198262407203e14a5",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,97 +1,104 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n-        if (initializers.length() !\u003d 0) {\n-          initializers +\u003d \",\";\n+        if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n+          initializers \u003d\n+            initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n+              CrossOriginFilterInitializer.class.getName());\n         }\n-        initializers +\u003d CrossOriginFilterInitializer.class.getName();\n+        else {\n+          if (initializers.length() !\u003d 0) {\n+            initializers +\u003d \",\";\n+          }\n+          initializers +\u003d CrossOriginFilterInitializer.class.getName();\n+        }\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       if (initializers.length() !\u003d 0) {\n         initializers +\u003d \",\";\n       }\n       initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     try {\n       AHSWebApp ahsWebApp \u003d new AHSWebApp(timelineDataManager, ahsClientService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n              .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                  conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);\n        HttpServer2 httpServer \u003d webApp.httpServer();\n \n        String[] names \u003d conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n        WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n \n        for (String name : names) {\n          String webPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n          String onDiskPath \u003d conf.get(\n              YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n          WebAppContext uiWebAppContext \u003d new WebAppContext();\n          uiWebAppContext.setContextPath(webPath);\n          uiWebAppContext.setWar(onDiskPath);\n          final String[] ALL_URLS \u003d { \"/*\" };\n          FilterHolder[] filterHolders \u003d\n            webAppContext.getServletHandler().getFilters();\n          for (FilterHolder filterHolder: filterHolders) {\n            if (!\"guice\".equals(filterHolder.getName())) {\n              HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                  filterHolder.getClassName(), filterHolder.getInitParameters(),\n                  ALL_URLS);\n            }\n          }\n          LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n          httpServer.addContext(uiWebAppContext, true);\n        }\n        httpServer.start();\n        LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.contains(HttpCrossOriginFilterInitializer.class.getName())) {\n          initializers \u003d\n            initializers.replaceAll(HttpCrossOriginFilterInitializer.class.getName(),\n              CrossOriginFilterInitializer.class.getName());\n        }\n        else {\n          if (initializers.length() !\u003d 0) {\n            initializers +\u003d \",\";\n          }\n          initializers +\u003d CrossOriginFilterInitializer.class.getName();\n        }\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      if (initializers.length() !\u003d 0) {\n        initializers +\u003d \",\";\n      }\n      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    try {\n      AHSWebApp ahsWebApp \u003d new AHSWebApp(timelineDataManager, ahsClientService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n             .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n\n       String[] names \u003d conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n\n       for (String name : names) {\n         String webPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n         String onDiskPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n         WebAppContext uiWebAppContext \u003d new WebAppContext();\n         uiWebAppContext.setContextPath(webPath);\n         uiWebAppContext.setWar(onDiskPath);\n         final String[] ALL_URLS \u003d { \"/*\" };\n         FilterHolder[] filterHolders \u003d\n           webAppContext.getServletHandler().getFilters();\n         for (FilterHolder filterHolder: filterHolders) {\n           if (!\"guice\".equals(filterHolder.getName())) {\n             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n                 ALL_URLS);\n           }\n         }\n         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n         httpServer.addContext(uiWebAppContext, true);\n       }\n       httpServer.start();\n       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "25f8f801d15e3d9f27f4a2a198262407203e14a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2513. Host framework UIs in YARN for use with the ATS (jeagles)\n",
      "commitDate": "21/10/15 1:38 PM",
      "commitName": "25f8f801d15e3d9f27f4a2a198262407203e14a5",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "24/09/15 3:01 PM",
      "commitNameOld": "d1b9b852442cb93b413eff8a137db6213e730d9c",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 26.94,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,97 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n         if (initializers.length() !\u003d 0) {\n           initializers +\u003d \",\";\n         }\n         initializers +\u003d CrossOriginFilterInitializer.class.getName();\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       if (initializers.length() !\u003d 0) {\n         initializers +\u003d \",\";\n       }\n       initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n-    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n+      AHSWebApp ahsWebApp \u003d new AHSWebApp(timelineDataManager, ahsClientService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n-            .with(conf).at(bindAddress).start(\n-                new AHSWebApp(timelineDataManager, ahsClientService));\n+             .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n+                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);\n+       HttpServer2 httpServer \u003d webApp.httpServer();\n+\n+       String[] names \u003d conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n+       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n+\n+       for (String name : names) {\n+         String webPath \u003d conf.get(\n+             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n+         String onDiskPath \u003d conf.get(\n+             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n+         WebAppContext uiWebAppContext \u003d new WebAppContext();\n+         uiWebAppContext.setContextPath(webPath);\n+         uiWebAppContext.setWar(onDiskPath);\n+         final String[] ALL_URLS \u003d { \"/*\" };\n+         FilterHolder[] filterHolders \u003d\n+           webAppContext.getServletHandler().getFilters();\n+         for (FilterHolder filterHolder: filterHolders) {\n+           if (!\"guice\".equals(filterHolder.getName())) {\n+             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n+                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n+                 ALL_URLS);\n+           }\n+         }\n+         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n+         httpServer.addContext(uiWebAppContext, true);\n+       }\n+       httpServer.start();\n+       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.length() !\u003d 0) {\n          initializers +\u003d \",\";\n        }\n        initializers +\u003d CrossOriginFilterInitializer.class.getName();\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      if (initializers.length() !\u003d 0) {\n        initializers +\u003d \",\";\n      }\n      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    try {\n      AHSWebApp ahsWebApp \u003d new AHSWebApp(timelineDataManager, ahsClientService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n             .with(conf).withAttribute(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS,\n                 conf.get(YarnConfiguration.TIMELINE_SERVICE_WEBAPP_ADDRESS)).at(bindAddress).build(ahsWebApp);\n       HttpServer2 httpServer \u003d webApp.httpServer();\n\n       String[] names \u003d conf.getTrimmedStrings(YarnConfiguration.TIMELINE_SERVICE_UI_NAMES);\n       WebAppContext webAppContext \u003d httpServer.getWebAppContext();\n\n       for (String name : names) {\n         String webPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_WEB_PATH_PREFIX + name);\n         String onDiskPath \u003d conf.get(\n             YarnConfiguration.TIMELINE_SERVICE_UI_ON_DISK_PATH_PREFIX + name);\n         WebAppContext uiWebAppContext \u003d new WebAppContext();\n         uiWebAppContext.setContextPath(webPath);\n         uiWebAppContext.setWar(onDiskPath);\n         final String[] ALL_URLS \u003d { \"/*\" };\n         FilterHolder[] filterHolders \u003d\n           webAppContext.getServletHandler().getFilters();\n         for (FilterHolder filterHolder: filterHolders) {\n           if (!\"guice\".equals(filterHolder.getName())) {\n             HttpServer2.defineFilter(uiWebAppContext, filterHolder.getName(),\n                 filterHolder.getClassName(), filterHolder.getInitParameters(),\n                 ALL_URLS);\n           }\n         }\n         LOG.info(\"Hosting \" + name + \" from \" + onDiskPath + \" at \" + webPath);\n         httpServer.addContext(uiWebAppContext, true);\n       }\n       httpServer.start();\n       LOG.info(\"Instantiating AHSWebApp at \" + getPort());\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "d1b9b852442cb93b413eff8a137db6213e730d9c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3624. ApplicationHistoryServer should not reverse the order of the\nfilters it gets. Contributed by Mit Desai\n",
      "commitDate": "24/09/15 3:01 PM",
      "commitName": "d1b9b852442cb93b413eff8a137db6213e730d9c",
      "commitAuthor": "Xuan",
      "commitDateOld": "12/08/15 3:47 PM",
      "commitNameOld": "dc2340c60e33f903f8fd34958ec746c989016191",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 42.97,
      "commitsBetweenForRepo": 274,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,69 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n-        initializers \u003d CrossOriginFilterInitializer.class.getName() + \",\"\n-            + initializers;\n+        if (initializers.length() !\u003d 0) {\n+          initializers +\u003d \",\";\n+        }\n+        initializers +\u003d CrossOriginFilterInitializer.class.getName();\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n-      initializers \u003d\n-          TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n-              + initializers;\n+      if (initializers.length() !\u003d 0) {\n+        initializers +\u003d \",\";\n+      }\n+      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(\n                 new AHSWebApp(timelineDataManager, ahsClientService));\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        if (initializers.length() !\u003d 0) {\n          initializers +\u003d \",\";\n        }\n        initializers +\u003d CrossOriginFilterInitializer.class.getName();\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      if (initializers.length() !\u003d 0) {\n        initializers +\u003d \",\";\n      }\n      initializers +\u003d TimelineAuthenticationFilterInitializer.class.getName();\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(\n                new AHSWebApp(timelineDataManager, ahsClientService));\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "95bfd087dc89e57a93340604cc8b96042fa1a05a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1809. Synchronize RM and TimeLineServer Web-UIs. Contributed by Zhijie Shen and Xuan Gong\n",
      "commitDate": "05/03/15 9:20 PM",
      "commitName": "95bfd087dc89e57a93340604cc8b96042fa1a05a",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/01/15 2:51 PM",
      "commitNameOld": "30a8778c632c0f57cdd005080a470065a60756a8",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 35.27,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,66 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n         secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n         initializers \u003d CrossOriginFilterInitializer.class.getName() + \",\"\n             + initializers;\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       initializers \u003d\n           TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers;\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(\n-                new AHSWebApp(timelineDataManager, historyManager));\n+                new AHSWebApp(timelineDataManager, ahsClientService));\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        initializers \u003d CrossOriginFilterInitializer.class.getName() + \",\"\n            + initializers;\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      initializers \u003d\n          TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers;\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(\n                new AHSWebApp(timelineDataManager, ahsClientService));\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "39063cd36f96e351e4a6bf0bc2b6185711d4b059": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2676. Enhanced Timeline auth-filter to support proxy users. Contributed by Zhijie Shen.\n",
      "commitDate": "17/10/14 10:02 PM",
      "commitName": "39063cd36f96e351e4a6bf0bc2b6185711d4b059",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/10/14 5:52 PM",
      "commitNameOld": "9e40de6af7959ac7bb5f4e4d2833ca14ea457614",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.17,
      "commitsBetweenForRepo": 135,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,67 +1,66 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n+    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n+        secretManagerService.getTimelineDelegationTokenSecretManager());\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n       if(conf.getBoolean(YarnConfiguration\n           .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n               .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n         initializers \u003d CrossOriginFilterInitializer.class.getName() + \",\"\n             + initializers;\n         modifiedInitializers \u003d true;\n       }\n     }\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       initializers \u003d\n           TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers;\n       modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n         modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n     if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n-      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n-      ahsWebApp.setApplicationHistoryManager(historyManager);\n-      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n-      ahsWebApp.setTimelineDataManager(timelineDataManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n-            .with(conf).at(bindAddress).start(ahsWebApp);\n+            .with(conf).at(bindAddress).start(\n+                new AHSWebApp(timelineDataManager, historyManager));\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    TimelineAuthenticationFilter.setTimelineDelegationTokenSecretManager(\n        secretManagerService.getTimelineDelegationTokenSecretManager());\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        initializers \u003d CrossOriginFilterInitializer.class.getName() + \",\"\n            + initializers;\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      initializers \u003d\n          TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers;\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(\n                new AHSWebApp(timelineDataManager, historyManager));\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "91d45f0f017281c8ab7ac858aa5d618accb9ea44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2509. Enable Cross Origin Filter for timeline server only and not all Yarn servers (Mit Desai via jeagles)\n",
      "commitDate": "04/09/14 9:53 AM",
      "commitName": "91d45f0f017281c8ab7ac858aa5d618accb9ea44",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "29/08/14 9:40 AM",
      "commitNameOld": "4bd0194e6be68421eb1dc87f9f031626112e4c50",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 6.01,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,67 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n-    boolean modifiedInitialiers \u003d false;\n+    boolean modifiedInitializers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n+    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n+      if(conf.getBoolean(YarnConfiguration\n+          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n+              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n+        initializers \u003d CrossOriginFilterInitializer.class.getName() + \",\"\n+            + initializers;\n+        modifiedInitializers \u003d true;\n+      }\n+    }\n+\n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       initializers \u003d\n           TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers;\n-      modifiedInitialiers \u003d true;\n+      modifiedInitializers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n-        modifiedInitialiers \u003d true;\n+        modifiedInitializers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n-    if (modifiedInitialiers) {\n+    if (modifiedInitializers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n       ahsWebApp.setTimelineDataManager(timelineDataManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitializers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(CrossOriginFilterInitializer.class.getName())) {\n      if(conf.getBoolean(YarnConfiguration\n          .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED, YarnConfiguration\n              .TIMELINE_SERVICE_HTTP_CROSS_ORIGIN_ENABLED_DEFAULT)) {\n        initializers \u003d CrossOriginFilterInitializer.class.getName() + \",\"\n            + initializers;\n        modifiedInitializers \u003d true;\n      }\n    }\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      initializers \u003d\n          TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers;\n      modifiedInitializers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitializers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitializers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineDataManager(timelineDataManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "4bd0194e6be68421eb1dc87f9f031626112e4c50": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2449. Fixed the bug that TimelineAuthenticationFilterInitializer is not automatically added when hadoop.http.filter.initializers is not configured. Contributed by Varun Vasudev.\n",
      "commitDate": "29/08/14 9:40 AM",
      "commitName": "4bd0194e6be68421eb1dc87f9f031626112e4c50",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "14/08/14 2:17 PM",
      "commitNameOld": "a9023c2736fb8a95dbba90d3f61c9eca33126af4",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 14.81,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n+    boolean modifiedInitialiers \u003d false;\n \n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n \n     if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n       .getName())) {\n       initializers \u003d\n           TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n               + initializers;\n+      modifiedInitialiers \u003d true;\n     }\n \n     String[] parts \u003d initializers.split(\",\");\n     ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n     for (String filterInitializer : parts) {\n       filterInitializer \u003d filterInitializer.trim();\n       if (filterInitializer.equals(AuthenticationFilterInitializer.class\n         .getName())) {\n+        modifiedInitialiers \u003d true;\n         continue;\n       }\n       target.add(filterInitializer);\n     }\n     String actualInitializers \u003d\n         org.apache.commons.lang.StringUtils.join(target, \",\");\n-    if (!actualInitializers.equals(initializers)) {\n+    if (modifiedInitialiers) {\n       conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n       ahsWebApp.setTimelineDataManager(timelineDataManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    boolean modifiedInitialiers \u003d false;\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      initializers \u003d\n          TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers;\n      modifiedInitialiers \u003d true;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        modifiedInitialiers \u003d true;\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (modifiedInitialiers) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineDataManager(timelineDataManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "a9023c2736fb8a95dbba90d3f61c9eca33126af4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2397. Avoided loading two authentication filters for RM and TS web interfaces. Contributed by Varun Vasudev.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 2:17 PM",
      "commitName": "a9023c2736fb8a95dbba90d3f61c9eca33126af4",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "10/08/14 12:21 AM",
      "commitNameOld": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 4.58,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,54 @@\n   private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n+\n     initializers \u003d\n-        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n-            + initializers;\n-    if (!initializers.contains(\n-        TimelineAuthenticationFilterInitializer.class.getName())) {\n-      conf.set(\"hadoop.http.filter.initializers\",\n-          TimelineAuthenticationFilterInitializer.class.getName()\n-              + initializers);\n+        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n+\n+    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n+      .getName())) {\n+      initializers \u003d\n+          TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n+              + initializers;\n+    }\n+\n+    String[] parts \u003d initializers.split(\",\");\n+    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n+    for (String filterInitializer : parts) {\n+      filterInitializer \u003d filterInitializer.trim();\n+      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n+        .getName())) {\n+        continue;\n+      }\n+      target.add(filterInitializer);\n+    }\n+    String actualInitializers \u003d\n+        org.apache.commons.lang.StringUtils.join(target, \",\");\n+    if (!actualInitializers.equals(initializers)) {\n+      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n       ahsWebApp.setTimelineDataManager(timelineDataManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : initializers;\n\n    if (!initializers.contains(TimelineAuthenticationFilterInitializer.class\n      .getName())) {\n      initializers \u003d\n          TimelineAuthenticationFilterInitializer.class.getName() + \",\"\n              + initializers;\n    }\n\n    String[] parts \u003d initializers.split(\",\");\n    ArrayList\u003cString\u003e target \u003d new ArrayList\u003cString\u003e();\n    for (String filterInitializer : parts) {\n      filterInitializer \u003d filterInitializer.trim();\n      if (filterInitializer.equals(AuthenticationFilterInitializer.class\n        .getName())) {\n        continue;\n      }\n      target.add(filterInitializer);\n    }\n    String actualInitializers \u003d\n        org.apache.commons.lang.StringUtils.join(target, \",\");\n    if (!actualInitializers.equals(initializers)) {\n      conf.set(\"hadoop.http.filter.initializers\", actualInitializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineDataManager(timelineDataManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/14 12:21 AM",
      "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/08/14 12:21 AM",
          "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
          "commitAuthor": "Junping Du",
          "commitDateOld": "31/07/14 1:06 PM",
          "commitNameOld": "e52f67e3897a67a0b6d29e557a31cfa881738821",
          "commitAuthorOld": "Xuan Gong",
          "daysBetweenCommits": 9.47,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,37 @@\n-  protected void startWebApp() {\n+  private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n             + initializers;\n     if (!initializers.contains(\n         TimelineAuthenticationFilterInitializer.class.getName())) {\n       conf.set(\"hadoop.http.filter.initializers\",\n           TimelineAuthenticationFilterInitializer.class.getName()\n               + initializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n-      ahsWebApp.setTimelineStore(timelineStore);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n-      ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n+      ahsWebApp.setTimelineDataManager(timelineDataManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n            + initializers;\n    if (!initializers.contains(\n        TimelineAuthenticationFilterInitializer.class.getName())) {\n      conf.set(\"hadoop.http.filter.initializers\",\n          TimelineAuthenticationFilterInitializer.class.getName()\n              + initializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineDataManager(timelineDataManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
          "extendedDetails": {
            "oldValue": "[protected]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/08/14 12:21 AM",
          "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
          "commitAuthor": "Junping Du",
          "commitDateOld": "31/07/14 1:06 PM",
          "commitNameOld": "e52f67e3897a67a0b6d29e557a31cfa881738821",
          "commitAuthorOld": "Xuan Gong",
          "daysBetweenCommits": 9.47,
          "commitsBetweenForRepo": 76,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,38 +1,37 @@\n-  protected void startWebApp() {\n+  private void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n             + initializers;\n     if (!initializers.contains(\n         TimelineAuthenticationFilterInitializer.class.getName())) {\n       conf.set(\"hadoop.http.filter.initializers\",\n           TimelineAuthenticationFilterInitializer.class.getName()\n               + initializers);\n     }\n     String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                           YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                           WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n-      ahsWebApp.setTimelineStore(timelineStore);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n-      ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n+      ahsWebApp.setTimelineDataManager(timelineDataManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n            + initializers;\n    if (!initializers.contains(\n        TimelineAuthenticationFilterInitializer.class.getName())) {\n      conf.set(\"hadoop.http.filter.initializers\",\n          TimelineAuthenticationFilterInitializer.class.getName()\n              + initializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineDataManager(timelineDataManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
          "extendedDetails": {}
        }
      ]
    },
    "e52f67e3897a67a0b6d29e557a31cfa881738821": {
      "type": "Ybodychange",
      "commitMessage": "    YARN-1994. Expose YARN/MR endpoints on multiple interfaces. Contributed by Craig Welch, Milan Potocnik,and Arpit Agarwal\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1614981 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/14 1:06 PM",
      "commitName": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "14/07/14 9:33 PM",
      "commitNameOld": "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 16.65,
      "commitsBetweenForRepo": 130,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,38 @@\n   protected void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // Always load pseudo authentication filter to parse \"user.name\" in an URL\n     // to identify a HTTP request\u0027s user in insecure mode.\n     // When Kerberos authentication type is set (i.e., secure mode is turned on),\n     // the customized filter will be loaded by the timeline server to do Kerberos\n     // + DT authentication.\n     String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n     initializers \u003d\n         initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n             + initializers;\n     if (!initializers.contains(\n         TimelineAuthenticationFilterInitializer.class.getName())) {\n       conf.set(\"hadoop.http.filter.initializers\",\n           TimelineAuthenticationFilterInitializer.class.getName()\n               + initializers);\n     }\n-    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\n+    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n+                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n+                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n       ahsWebApp.setTimelineStore(timelineStore);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n       ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n            + initializers;\n    if (!initializers.contains(\n        TimelineAuthenticationFilterInitializer.class.getName())) {\n      conf.set(\"hadoop.http.filter.initializers\",\n          TimelineAuthenticationFilterInitializer.class.getName()\n              + initializers);\n    }\n    String bindAddress \u003d WebAppUtils.getWebAppBindURL(conf,\n                          YarnConfiguration.TIMELINE_SERVICE_BIND_HOST,\n                          WebAppUtils.getAHSWebAppURLWithoutScheme(conf));\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineStore(timelineStore);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2228. Augmented TimelineServer to load pseudo authentication filter when authentication \u003d simple. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1610575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 9:33 PM",
      "commitName": "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/05/14 11:09 AM",
      "commitNameOld": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 47.43,
      "commitsBetweenForRepo": 298,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,36 @@\n   protected void startWebApp() {\n     Configuration conf \u003d getConfig();\n-    // Play trick to make the customized filter will only be loaded by the\n-    // timeline server when security is enabled and Kerberos authentication\n-    // is used.\n-    if (UserGroupInformation.isSecurityEnabled()\n-        \u0026\u0026 conf\n-            .get(TimelineAuthenticationFilterInitializer.PREFIX + \"type\", \"\")\n-            .equals(\"kerberos\")) {\n-      String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n-      initializers \u003d\n-          initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n-              + initializers;\n-      if (!initializers.contains(\n-          TimelineAuthenticationFilterInitializer.class.getName())) {\n-        conf.set(\"hadoop.http.filter.initializers\",\n-            TimelineAuthenticationFilterInitializer.class.getName()\n-            + initializers);\n-      }\n+    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n+    // to identify a HTTP request\u0027s user in insecure mode.\n+    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n+    // the customized filter will be loaded by the timeline server to do Kerberos\n+    // + DT authentication.\n+    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n+    initializers \u003d\n+        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n+            + initializers;\n+    if (!initializers.contains(\n+        TimelineAuthenticationFilterInitializer.class.getName())) {\n+      conf.set(\"hadoop.http.filter.initializers\",\n+          TimelineAuthenticationFilterInitializer.class.getName()\n+              + initializers);\n     }\n     String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n       ahsWebApp.setTimelineStore(timelineStore);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n       ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Always load pseudo authentication filter to parse \"user.name\" in an URL\n    // to identify a HTTP request\u0027s user in insecure mode.\n    // When Kerberos authentication type is set (i.e., secure mode is turned on),\n    // the customized filter will be loaded by the timeline server to do Kerberos\n    // + DT authentication.\n    String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n    initializers \u003d\n        initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n            + initializers;\n    if (!initializers.contains(\n        TimelineAuthenticationFilterInitializer.class.getName())) {\n      conf.set(\"hadoop.http.filter.initializers\",\n          TimelineAuthenticationFilterInitializer.class.getName()\n              + initializers);\n    }\n    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineStore(timelineStore);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "892ada8fb35d57a1120d548fdefb056824aa939f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1937. Added owner-only ACLs support for Timeline Client and server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597186 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 2:19 PM",
      "commitName": "892ada8fb35d57a1120d548fdefb056824aa939f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "23/05/14 10:09 AM",
      "commitNameOld": "b867b695565c588e8f86c867cba76397cab62848",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   protected void startWebApp() {\n     Configuration conf \u003d getConfig();\n     // Play trick to make the customized filter will only be loaded by the\n     // timeline server when security is enabled and Kerberos authentication\n     // is used.\n     if (UserGroupInformation.isSecurityEnabled()\n         \u0026\u0026 conf\n             .get(TimelineAuthenticationFilterInitializer.PREFIX + \"type\", \"\")\n             .equals(\"kerberos\")) {\n       String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n       initializers \u003d\n           initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n               + initializers;\n       if (!initializers.contains(\n           TimelineAuthenticationFilterInitializer.class.getName())) {\n         conf.set(\"hadoop.http.filter.initializers\",\n             TimelineAuthenticationFilterInitializer.class.getName()\n             + initializers);\n       }\n     }\n     String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n       ahsWebApp.setApplicationHistoryManager(historyManager);\n       ahsWebApp.setTimelineStore(timelineStore);\n       ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n+      ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                 ahsClientService, \"ws\")\n             .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Play trick to make the customized filter will only be loaded by the\n    // timeline server when security is enabled and Kerberos authentication\n    // is used.\n    if (UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 conf\n            .get(TimelineAuthenticationFilterInitializer.PREFIX + \"type\", \"\")\n            .equals(\"kerberos\")) {\n      String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n      initializers \u003d\n          initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n              + initializers;\n      if (!initializers.contains(\n          TimelineAuthenticationFilterInitializer.class.getName())) {\n        conf.set(\"hadoop.http.filter.initializers\",\n            TimelineAuthenticationFilterInitializer.class.getName()\n            + initializers);\n      }\n    }\n    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineStore(timelineStore);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      ahsWebApp.setTimelineACLsManager(timelineACLsManager);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "b867b695565c588e8f86c867cba76397cab62848": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2049. Added delegation-token support for the Timeline Server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597130 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 10:09 AM",
      "commitName": "b867b695565c588e8f86c867cba76397cab62848",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/05/14 4:20 PM",
      "commitNameOld": "fdb5870d498228348e7fb8561fcb0e3d1bbe7379",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.74,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,38 @@\n   protected void startWebApp() {\n-    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(getConfig());\n+    Configuration conf \u003d getConfig();\n+    // Play trick to make the customized filter will only be loaded by the\n+    // timeline server when security is enabled and Kerberos authentication\n+    // is used.\n+    if (UserGroupInformation.isSecurityEnabled()\n+        \u0026\u0026 conf\n+            .get(TimelineAuthenticationFilterInitializer.PREFIX + \"type\", \"\")\n+            .equals(\"kerberos\")) {\n+      String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n+      initializers \u003d\n+          initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n+              + initializers;\n+      if (!initializers.contains(\n+          TimelineAuthenticationFilterInitializer.class.getName())) {\n+        conf.set(\"hadoop.http.filter.initializers\",\n+            TimelineAuthenticationFilterInitializer.class.getName()\n+            + initializers);\n+      }\n+    }\n+    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n+      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n+      ahsWebApp.setApplicationHistoryManager(historyManager);\n+      ahsWebApp.setTimelineStore(timelineStore);\n+      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n-              ahsClientService, \"ws\")\n-            .with(getConfig())\n-            .withHttpSpnegoPrincipalKey(\n-              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_SPNEGO_USER_NAME_KEY)\n-            .withHttpSpnegoKeytabKey(\n-              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n-            .at(bindAddress)\n-            .start(new AHSWebApp(historyManager, timelineStore));\n+                ahsClientService, \"ws\")\n+            .with(conf).at(bindAddress).start(ahsWebApp);\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() {\n    Configuration conf \u003d getConfig();\n    // Play trick to make the customized filter will only be loaded by the\n    // timeline server when security is enabled and Kerberos authentication\n    // is used.\n    if (UserGroupInformation.isSecurityEnabled()\n        \u0026\u0026 conf\n            .get(TimelineAuthenticationFilterInitializer.PREFIX + \"type\", \"\")\n            .equals(\"kerberos\")) {\n      String initializers \u003d conf.get(\"hadoop.http.filter.initializers\");\n      initializers \u003d\n          initializers \u003d\u003d null || initializers.length() \u003d\u003d 0 ? \"\" : \",\"\n              + initializers;\n      if (!initializers.contains(\n          TimelineAuthenticationFilterInitializer.class.getName())) {\n        conf.set(\"hadoop.http.filter.initializers\",\n            TimelineAuthenticationFilterInitializer.class.getName()\n            + initializers);\n      }\n    }\n    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(conf);\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      AHSWebApp ahsWebApp \u003d AHSWebApp.getInstance();\n      ahsWebApp.setApplicationHistoryManager(historyManager);\n      ahsWebApp.setTimelineStore(timelineStore);\n      ahsWebApp.setTimelineDelegationTokenSecretManagerService(secretManagerService);\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n                ahsClientService, \"ws\")\n            .with(conf).at(bindAddress).start(ahsWebApp);\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "e167e585e9dd5c86ae763c257d62fdcc83260200": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1749. Updated application-history related configs to reflect the latest reality and to be consistently named. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570948 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 6:04 PM",
      "commitName": "e167e585e9dd5c86ae763c257d62fdcc83260200",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/02/14 12:55 PM",
      "commitNameOld": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n   protected void startWebApp() {\n     String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(getConfig());\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n               ahsClientService, \"ws\")\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n-              YarnConfiguration.AHS_WEBAPP_SPNEGO_USER_NAME_KEY)\n+              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n-              YarnConfiguration.AHS_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n             .at(bindAddress)\n             .start(new AHSWebApp(historyManager, timelineStore));\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() {\n    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(getConfig());\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n              ahsClientService, \"ws\")\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.TIMELINE_SERVICE_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(bindAddress)\n            .start(new AHSWebApp(historyManager, timelineStore));\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "484faadffec97f8e454cf18b821f6ef12a27616c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1636. Augmented Application-history server\u0027s web-services to also expose new APIs for retrieving and storing timeline information. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 9:02 AM",
      "commitName": "484faadffec97f8e454cf18b821f6ef12a27616c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "25/01/14 8:51 PM",
      "commitNameOld": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.51,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   protected void startWebApp() {\n     String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(getConfig());\n     LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n     try {\n       webApp \u003d\n           WebApps\n             .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n               ahsClientService, \"ws\")\n             .with(getConfig())\n             .withHttpSpnegoPrincipalKey(\n               YarnConfiguration.AHS_WEBAPP_SPNEGO_USER_NAME_KEY)\n             .withHttpSpnegoKeytabKey(\n               YarnConfiguration.AHS_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n-            .at(bindAddress).start(new AHSWebApp(historyManager));\n+            .at(bindAddress)\n+            .start(new AHSWebApp(historyManager, timelineStore));\n     } catch (Exception e) {\n       String msg \u003d \"AHSWebApp failed to start.\";\n       LOG.error(msg, e);\n       throw new YarnRuntimeException(msg, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() {\n    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(getConfig());\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n              ahsClientService, \"ws\")\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.AHS_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.AHS_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(bindAddress)\n            .start(new AHSWebApp(historyManager, timelineStore));\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java",
      "extendedDetails": {}
    },
    "cbee889711eddc5c67a61df4a6531b4ab3cd205a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-321. Merging YARN-321 branch to trunk.\nsvn merge ../branches/YARN-321\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561452 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 8:51 PM",
      "commitName": "cbee889711eddc5c67a61df4a6531b4ab3cd205a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  protected void startWebApp() {\n+    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(getConfig());\n+    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n+    try {\n+      webApp \u003d\n+          WebApps\n+            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n+              ahsClientService, \"ws\")\n+            .with(getConfig())\n+            .withHttpSpnegoPrincipalKey(\n+              YarnConfiguration.AHS_WEBAPP_SPNEGO_USER_NAME_KEY)\n+            .withHttpSpnegoKeytabKey(\n+              YarnConfiguration.AHS_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n+            .at(bindAddress).start(new AHSWebApp(historyManager));\n+    } catch (Exception e) {\n+      String msg \u003d \"AHSWebApp failed to start.\";\n+      LOG.error(msg, e);\n+      throw new YarnRuntimeException(msg, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void startWebApp() {\n    String bindAddress \u003d WebAppUtils.getAHSWebAppURLWithoutScheme(getConfig());\n    LOG.info(\"Instantiating AHSWebApp at \" + bindAddress);\n    try {\n      webApp \u003d\n          WebApps\n            .$for(\"applicationhistory\", ApplicationHistoryClientService.class,\n              ahsClientService, \"ws\")\n            .with(getConfig())\n            .withHttpSpnegoPrincipalKey(\n              YarnConfiguration.AHS_WEBAPP_SPNEGO_USER_NAME_KEY)\n            .withHttpSpnegoKeytabKey(\n              YarnConfiguration.AHS_WEBAPP_SPNEGO_KEYTAB_FILE_KEY)\n            .at(bindAddress).start(new AHSWebApp(historyManager));\n    } catch (Exception e) {\n      String msg \u003d \"AHSWebApp failed to start.\";\n      LOG.error(msg, e);\n      throw new YarnRuntimeException(msg, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/ApplicationHistoryServer.java"
    }
  }
}