{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "GenericOptionsParser.java",
  "functionName": "expandWildcard",
  "functionId": "expandWildcard___finalPaths-List__String____path-Path__fs-FileSystem",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
  "functionStartLine": 489,
  "functionEndLine": 506,
  "numCommitsSeen": 24,
  "timeTaken": 1223,
  "changeHistory": [
    "5af572b6443715b7a741296c1bd520a1840f9a7c",
    "0ad48aa2c8f41196743305c711ea19cc48f186da"
  ],
  "changeHistoryShort": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": "Ybodychange",
    "0ad48aa2c8f41196743305c711ea19cc48f186da": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5af572b6443715b7a741296c1bd520a1840f9a7c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13427. Eliminate needless uses of FileSystem#{exists(), isFile(), isDirectory()}. Contributed by Steve Loughran and Mingliang Liu\n",
      "commitDate": "15/11/16 10:57 AM",
      "commitName": "5af572b6443715b7a741296c1bd520a1840f9a7c",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "08/11/16 3:40 PM",
      "commitNameOld": "2a65eb121e23243fcb642d28b3f74241536485d8",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 6.8,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private void expandWildcard(List\u003cString\u003e finalPaths, Path path, FileSystem fs)\n       throws IOException {\n-    if (!fs.isDirectory(path)) {\n+    FileStatus status \u003d fs.getFileStatus(path);\n+    if (!status.isDirectory()) {\n       throw new FileNotFoundException(path + \" is not a directory.\");\n     }\n     // get all the jars in the directory\n     List\u003cPath\u003e jars \u003d FileUtil.getJarsInDirectory(path.toString(),\n         fs.equals(FileSystem.getLocal(conf)));\n     if (jars.isEmpty()) {\n       LOG.warn(path + \" does not have jars in it. It will be ignored.\");\n     } else {\n       for (Path jar: jars) {\n         finalPaths.add(jar.makeQualified(fs.getUri(),\n             fs.getWorkingDirectory()).toString());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void expandWildcard(List\u003cString\u003e finalPaths, Path path, FileSystem fs)\n      throws IOException {\n    FileStatus status \u003d fs.getFileStatus(path);\n    if (!status.isDirectory()) {\n      throw new FileNotFoundException(path + \" is not a directory.\");\n    }\n    // get all the jars in the directory\n    List\u003cPath\u003e jars \u003d FileUtil.getJarsInDirectory(path.toString(),\n        fs.equals(FileSystem.getLocal(conf)));\n    if (jars.isEmpty()) {\n      LOG.warn(path + \" does not have jars in it. It will be ignored.\");\n    } else {\n      for (Path jar: jars) {\n        finalPaths.add(jar.makeQualified(fs.getUri(),\n            fs.getWorkingDirectory()).toString());\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java",
      "extendedDetails": {}
    },
    "0ad48aa2c8f41196743305c711ea19cc48f186da": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12747. support wildcard in libjars argument (sjlee)\n",
      "commitDate": "08/08/16 5:34 PM",
      "commitName": "0ad48aa2c8f41196743305c711ea19cc48f186da",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,17 @@\n+  private void expandWildcard(List\u003cString\u003e finalPaths, Path path, FileSystem fs)\n+      throws IOException {\n+    if (!fs.isDirectory(path)) {\n+      throw new FileNotFoundException(path + \" is not a directory.\");\n+    }\n+    // get all the jars in the directory\n+    List\u003cPath\u003e jars \u003d FileUtil.getJarsInDirectory(path.toString(),\n+        fs.equals(FileSystem.getLocal(conf)));\n+    if (jars.isEmpty()) {\n+      LOG.warn(path + \" does not have jars in it. It will be ignored.\");\n+    } else {\n+      for (Path jar: jars) {\n+        finalPaths.add(jar.makeQualified(fs.getUri(),\n+            fs.getWorkingDirectory()).toString());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void expandWildcard(List\u003cString\u003e finalPaths, Path path, FileSystem fs)\n      throws IOException {\n    if (!fs.isDirectory(path)) {\n      throw new FileNotFoundException(path + \" is not a directory.\");\n    }\n    // get all the jars in the directory\n    List\u003cPath\u003e jars \u003d FileUtil.getJarsInDirectory(path.toString(),\n        fs.equals(FileSystem.getLocal(conf)));\n    if (jars.isEmpty()) {\n      LOG.warn(path + \" does not have jars in it. It will be ignored.\");\n    } else {\n      for (Path jar: jars) {\n        finalPaths.add(jar.makeQualified(fs.getUri(),\n            fs.getWorkingDirectory()).toString());\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/GenericOptionsParser.java"
    }
  }
}