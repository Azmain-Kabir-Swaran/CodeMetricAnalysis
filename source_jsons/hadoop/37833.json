{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultPlacementRule.java",
  "functionName": "setConfig",
  "functionId": "setConfig___conf-Element",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/placement/DefaultPlacementRule.java",
  "functionStartLine": 55,
  "functionEndLine": 78,
  "numCommitsSeen": 1,
  "timeTaken": 539,
  "changeHistory": [
    "0aefe2846fbda5b3402879e343e65484355849c9"
  ],
  "changeHistoryShort": {
    "0aefe2846fbda5b3402879e343e65484355849c9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0aefe2846fbda5b3402879e343e65484355849c9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9298. Implement FS placement rules using PlacementRule interface. Contributed by Wilfred Spiegelenburg.\n",
      "commitDate": "04/03/19 11:49 PM",
      "commitName": "0aefe2846fbda5b3402879e343e65484355849c9",
      "commitAuthor": "Yufei Gu",
      "diff": "@@ -0,0 +1,24 @@\n+  public void setConfig(Element conf) {\n+    // Get the flag from the config (defaults to true if not set)\n+    createQueue \u003d getCreateFlag(conf);\n+    // No config can be set when no policy is defined and we use defaults\n+    if (conf !\u003d null) {\n+      defaultQueueName \u003d conf.getAttribute(\"queue\");\n+      // A queue read from the config could be illegal check it: fall back to\n+      // the config default if it is the case\n+      // However we cannot clean the name as a nested name is allowed.\n+      if (!isValidQueueName(defaultQueueName)) {\n+        LOG.error(\"Default rule configured with an illegal queue name: \u0027{}\u0027\",\n+            defaultQueueName);\n+        defaultQueueName \u003d null;\n+      }\n+    }\n+    // The queue name does not have to be set and we really use \"default\"\n+    if (defaultQueueName \u003d\u003d null || defaultQueueName.isEmpty()) {\n+      defaultQueueName \u003d assureRoot(YarnConfiguration.DEFAULT_QUEUE_NAME);\n+    } else {\n+      defaultQueueName \u003d assureRoot(defaultQueueName);\n+    }\n+    LOG.debug(\"Default rule instantiated with queue name: {}, \" +\n+        \"and create flag: {}\", defaultQueueName, createQueue);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void setConfig(Element conf) {\n    // Get the flag from the config (defaults to true if not set)\n    createQueue \u003d getCreateFlag(conf);\n    // No config can be set when no policy is defined and we use defaults\n    if (conf !\u003d null) {\n      defaultQueueName \u003d conf.getAttribute(\"queue\");\n      // A queue read from the config could be illegal check it: fall back to\n      // the config default if it is the case\n      // However we cannot clean the name as a nested name is allowed.\n      if (!isValidQueueName(defaultQueueName)) {\n        LOG.error(\"Default rule configured with an illegal queue name: \u0027{}\u0027\",\n            defaultQueueName);\n        defaultQueueName \u003d null;\n      }\n    }\n    // The queue name does not have to be set and we really use \"default\"\n    if (defaultQueueName \u003d\u003d null || defaultQueueName.isEmpty()) {\n      defaultQueueName \u003d assureRoot(YarnConfiguration.DEFAULT_QUEUE_NAME);\n    } else {\n      defaultQueueName \u003d assureRoot(defaultQueueName);\n    }\n    LOG.debug(\"Default rule instantiated with queue name: {}, \" +\n        \"and create flag: {}\", defaultQueueName, createQueue);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/placement/DefaultPlacementRule.java"
    }
  }
}