{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDBTimelineStore.java",
  "functionName": "getEntity",
  "functionId": "getEntity___entityId-String__entityType-String__fields-EnumSet__Field__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
  "functionStartLine": 412,
  "functionEndLine": 434,
  "numCommitsSeen": 12,
  "timeTaken": 2276,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b",
    "01aca54a22c8586d232a8f79fe9977aeb8d09b83",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b": "Ybodychange",
    "01aca54a22c8586d232a8f79fe9977aeb8d09b83": "Ybodychange",
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "02/07/18 3:34 PM",
      "commitNameOld": "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 256.03,
      "commitsBetweenForRepo": 2038,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,23 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n-      if ( LOG.isDebugEnabled()) {\n-        LOG.debug(\"Could not find start time for {} {} \", entityType, entityId);\n-      }\n+      LOG.debug(\"Could not find start time for {} {} \", entityType, entityId);\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n         .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n         .getBytesForLookup();\n \n     DB db \u003d entitydb.getDBForStartTime(revStartTime);\n     if (db \u003d\u003d null) {\n-      if ( LOG.isDebugEnabled()) {\n-        LOG.debug(\"Could not find db for {} {} \", entityType, entityId);\n-      }\n+      LOG.debug(\"Could not find db for {} {} \", entityType, entityId);\n       return null;\n     }\n     try (DBIterator iterator \u003d db.iterator()) {\n       iterator.seek(prefix);\n \n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      LOG.debug(\"Could not find start time for {} {} \", entityType, entityId);\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n        .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n        .getBytesForLookup();\n\n    DB db \u003d entitydb.getDBForStartTime(revStartTime);\n    if (db \u003d\u003d null) {\n      LOG.debug(\"Could not find db for {} {} \", entityType, entityId);\n      return null;\n    }\n    try (DBIterator iterator \u003d db.iterator()) {\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
      "extendedDetails": {}
    },
    "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8415. TimelineWebServices.getEntity should throw ForbiddenException instead of 404 when ACL checks fail. Contributed by Suma Shivaprasad.\n",
      "commitDate": "02/07/18 3:34 PM",
      "commitName": "fa9ef15ecd6dc30fb260e1c342a2b51505d39b6b",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 20.29,
      "commitsBetweenForRepo": 111,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,27 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n+      if ( LOG.isDebugEnabled()) {\n+        LOG.debug(\"Could not find start time for {} {} \", entityType, entityId);\n+      }\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n         .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n         .getBytesForLookup();\n \n     DB db \u003d entitydb.getDBForStartTime(revStartTime);\n     if (db \u003d\u003d null) {\n+      if ( LOG.isDebugEnabled()) {\n+        LOG.debug(\"Could not find db for {} {} \", entityType, entityId);\n+      }\n       return null;\n     }\n     try (DBIterator iterator \u003d db.iterator()) {\n       iterator.seek(prefix);\n \n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      if ( LOG.isDebugEnabled()) {\n        LOG.debug(\"Could not find start time for {} {} \", entityType, entityId);\n      }\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n        .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n        .getBytesForLookup();\n\n    DB db \u003d entitydb.getDBForStartTime(revStartTime);\n    if (db \u003d\u003d null) {\n      if ( LOG.isDebugEnabled()) {\n        LOG.debug(\"Could not find db for {} {} \", entityType, entityId);\n      }\n      return null;\n    }\n    try (DBIterator iterator \u003d db.iterator()) {\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
      "extendedDetails": {}
    },
    "01aca54a22c8586d232a8f79fe9977aeb8d09b83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5368. Memory leak in timeline server (Jonathan Eagles via Varun Saxena)\n",
      "commitDate": "28/03/17 1:23 PM",
      "commitName": "01aca54a22c8586d232a8f79fe9977aeb8d09b83",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "20/07/16 8:36 AM",
      "commitNameOld": "1c9d2ab503ea5a3f16757351af9603041059b390",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 251.2,
      "commitsBetweenForRepo": 1583,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,21 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n         .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n         .getBytesForLookup();\n \n-    DBIterator iterator \u003d null;\n-    try {\n-      DB db \u003d entitydb.getDBForStartTime(revStartTime);\n-      if (db \u003d\u003d null) {\n-        return null;\n-      }\n-      iterator \u003d db.iterator();\n+    DB db \u003d entitydb.getDBForStartTime(revStartTime);\n+    if (db \u003d\u003d null) {\n+      return null;\n+    }\n+    try (DBIterator iterator \u003d db.iterator()) {\n       iterator.seek(prefix);\n \n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n-    } finally {\n-      IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n        .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n        .getBytesForLookup();\n\n    DB db \u003d entitydb.getDBForStartTime(revStartTime);\n    if (db \u003d\u003d null) {\n      return null;\n    }\n    try (DBIterator iterator \u003d db.iterator()) {\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
      "extendedDetails": {}
    },
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,25 @@\n+  public TimelineEntity getEntity(String entityId, String entityType,\n+      EnumSet\u003cField\u003e fields) throws IOException {\n+    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n+    if (revStartTime \u003d\u003d null) {\n+      return null;\n+    }\n+    byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n+        .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n+        .getBytesForLookup();\n+\n+    DBIterator iterator \u003d null;\n+    try {\n+      DB db \u003d entitydb.getDBForStartTime(revStartTime);\n+      if (db \u003d\u003d null) {\n+        return null;\n+      }\n+      iterator \u003d db.iterator();\n+      iterator.seek(prefix);\n+\n+      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n+          prefix, prefix.length);\n+    } finally {\n+      IOUtils.cleanup(LOG, iterator);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(entityType)\n        .add(writeReverseOrderedLong(revStartTime)).add(entityId)\n        .getBytesForLookup();\n\n    DBIterator iterator \u003d null;\n    try {\n      DB db \u003d entitydb.getDBForStartTime(revStartTime);\n      if (db \u003d\u003d null) {\n        return null;\n      }\n      iterator \u003d db.iterator();\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java"
    }
  }
}