{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderUtils.java",
  "functionName": "escapeString",
  "functionId": "escapeString___str-String(modifiers-final)__delimiterChar-char(modifiers-final)__escapeChar-char(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderUtils.java",
  "functionStartLine": 129,
  "functionEndLine": 165,
  "numCommitsSeen": 5,
  "timeTaken": 616,
  "changeHistory": [
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7"
  ],
  "changeHistoryShort": {
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthor": "Li Lu",
      "diff": "@@ -0,0 +1,37 @@\n+  private static String escapeString(final String str, final char delimiterChar,\n+      final char escapeChar) {\n+    if (str \u003d\u003d null) {\n+      return null;\n+    }\n+    int len \u003d str.length();\n+    if (len \u003d\u003d 0) {\n+      return \"\";\n+    }\n+    StringBuilder builder \u003d new StringBuilder();\n+    // Keeps track of offset of the passed string.\n+    int offset \u003d 0;\n+    // Indicates start offset from which characters will be copied from original\n+    // string to destination string. Resets when an escape or delimiter char is\n+    // encountered.\n+    int startOffset \u003d 0;\n+    // Iterate over the string till we reach the end.\n+    while (offset \u003c len) {\n+      char charAtOffset \u003d str.charAt(offset);\n+      if (charAtOffset \u003d\u003d escapeChar || charAtOffset \u003d\u003d delimiterChar) {\n+        // If an escape or delimiter character is encountered, copy characters\n+        // from the offset where escape or delimiter was last encountered.\n+        if (startOffset \u003c offset) {\n+          builder.append(str.substring(startOffset, offset));\n+        }\n+        // Append escape char before delimiter/escape char.\n+        builder.append(escapeChar).append(charAtOffset);\n+        // Reset start offset for copying characters when next escape/delimiter\n+        // char is encountered.\n+        startOffset \u003d offset + 1;\n+      }\n+      offset++;\n+    }\n+    // Copy remaining characters.\n+    builder.append(str.substring(startOffset));\n+    return builder.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static String escapeString(final String str, final char delimiterChar,\n      final char escapeChar) {\n    if (str \u003d\u003d null) {\n      return null;\n    }\n    int len \u003d str.length();\n    if (len \u003d\u003d 0) {\n      return \"\";\n    }\n    StringBuilder builder \u003d new StringBuilder();\n    // Keeps track of offset of the passed string.\n    int offset \u003d 0;\n    // Indicates start offset from which characters will be copied from original\n    // string to destination string. Resets when an escape or delimiter char is\n    // encountered.\n    int startOffset \u003d 0;\n    // Iterate over the string till we reach the end.\n    while (offset \u003c len) {\n      char charAtOffset \u003d str.charAt(offset);\n      if (charAtOffset \u003d\u003d escapeChar || charAtOffset \u003d\u003d delimiterChar) {\n        // If an escape or delimiter character is encountered, copy characters\n        // from the offset where escape or delimiter was last encountered.\n        if (startOffset \u003c offset) {\n          builder.append(str.substring(startOffset, offset));\n        }\n        // Append escape char before delimiter/escape char.\n        builder.append(escapeChar).append(charAtOffset);\n        // Reset start offset for copying characters when next escape/delimiter\n        // char is encountered.\n        startOffset \u003d offset + 1;\n      }\n      offset++;\n    }\n    // Copy remaining characters.\n    builder.append(str.substring(startOffset));\n    return builder.toString();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderUtils.java"
    }
  }
}