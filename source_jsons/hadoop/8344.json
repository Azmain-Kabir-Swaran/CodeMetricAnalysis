{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirErasureCodingOp.java",
  "functionName": "unsetErasureCodingPolicy",
  "functionId": "unsetErasureCodingPolicy___fsn-FSNamesystem(modifiers-final)__srcArg-String(modifiers-final)__pc-FSPermissionChecker(modifiers-final)__logRetryCache-boolean(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
  "functionStartLine": 208,
  "functionEndLine": 236,
  "numCommitsSeen": 54,
  "timeTaken": 3707,
  "changeHistory": [
    "30eceec3420fc6be00d3878ba787bd9518d3ca0e",
    "9b90e52f1ec22c18cd535af2a569defcef65b093",
    "3085a604300ed76d06a0011bd5555e419897b6cd",
    "e69231658dc4a79da936e6856017b5c4f6124ecb"
  ],
  "changeHistoryShort": {
    "30eceec3420fc6be00d3878ba787bd9518d3ca0e": "Ybodychange",
    "9b90e52f1ec22c18cd535af2a569defcef65b093": "Yreturntypechange",
    "3085a604300ed76d06a0011bd5555e419897b6cd": "Ymultichange(Yparameterchange,Ybodychange)",
    "e69231658dc4a79da936e6856017b5c4f6124ecb": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30eceec3420fc6be00d3878ba787bd9518d3ca0e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13806. EC: No error message for unsetting EC policy of the directory inherits the erasure coding policy from an ancestor directory. Contributed by Ayush Saxena.\n",
      "commitDate": "09/09/18 8:40 PM",
      "commitName": "30eceec3420fc6be00d3878ba787bd9518d3ca0e",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "20/08/18 9:03 PM",
      "commitNameOld": "770d9d9bb686bacef601ec8c4f884dc5afa9d4e2",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 19.98,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,29 @@\n   static FileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n       final String srcArg, final FSPermissionChecker pc,\n       final boolean logRetryCache) throws IOException {\n     assert fsn.hasWriteLock();\n \n     String src \u003d srcArg;\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     final INodesInPath iip;\n     List\u003cXAttr\u003e xAttrs;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n       // Write access is required to unset erasure coding policy\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n       src \u003d iip.getPath();\n       xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n     } finally {\n       fsd.writeUnlock();\n     }\n     if (xAttrs !\u003d null) {\n       fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n+    } else {\n+      throw new NoECPolicySetException(\n+          \"No erasure coding policy explicitly set on \" + src);\n     }\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n      final String srcArg, final FSPermissionChecker pc,\n      final boolean logRetryCache) throws IOException {\n    assert fsn.hasWriteLock();\n\n    String src \u003d srcArg;\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip;\n    List\u003cXAttr\u003e xAttrs;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n      // Write access is required to unset erasure coding policy\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n      src \u003d iip.getPath();\n      xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n    } finally {\n      fsd.writeUnlock();\n    }\n    if (xAttrs !\u003d null) {\n      fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n    } else {\n      throw new NoECPolicySetException(\n          \"No erasure coding policy explicitly set on \" + src);\n    }\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {}
    },
    "9b90e52f1ec22c18cd535af2a569defcef65b093": {
      "type": "Yreturntypechange",
      "commitMessage": "HDFS-11641. Reduce cost of audit logging by using FileStatus instead of HdfsFileStatus. Contributed by Daryn Sharp.\n",
      "commitDate": "16/05/17 9:28 AM",
      "commitName": "9b90e52f1ec22c18cd535af2a569defcef65b093",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "27/04/17 10:18 PM",
      "commitNameOld": "cb672a45a0bbd8950b9b5e304c2e03f516945903",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 18.47,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n-  static HdfsFileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n+  static FileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n       final String srcArg, final FSPermissionChecker pc,\n       final boolean logRetryCache) throws IOException {\n     assert fsn.hasWriteLock();\n \n     String src \u003d srcArg;\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     final INodesInPath iip;\n     List\u003cXAttr\u003e xAttrs;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n       // Write access is required to unset erasure coding policy\n       if (fsd.isPermissionEnabled()) {\n         fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n       }\n       src \u003d iip.getPath();\n       xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n     } finally {\n       fsd.writeUnlock();\n     }\n     if (xAttrs !\u003d null) {\n       fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n     }\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static FileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n      final String srcArg, final FSPermissionChecker pc,\n      final boolean logRetryCache) throws IOException {\n    assert fsn.hasWriteLock();\n\n    String src \u003d srcArg;\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip;\n    List\u003cXAttr\u003e xAttrs;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n      // Write access is required to unset erasure coding policy\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n      src \u003d iip.getPath();\n      xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n    } finally {\n      fsd.writeUnlock();\n    }\n    if (xAttrs !\u003d null) {\n      fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n    }\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
      "extendedDetails": {
        "oldValue": "HdfsFileStatus",
        "newValue": "FileStatus"
      }
    },
    "3085a604300ed76d06a0011bd5555e419897b6cd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
      "commitDate": "03/03/17 1:00 PM",
      "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
          "commitDate": "03/03/17 1:00 PM",
          "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/03/17 7:58 PM",
          "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,26 @@\n   static HdfsFileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n-      final String srcArg, final boolean logRetryCache) throws IOException {\n+      final String srcArg, final FSPermissionChecker pc,\n+      final boolean logRetryCache) throws IOException {\n     assert fsn.hasWriteLock();\n \n     String src \u003d srcArg;\n-    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     final INodesInPath iip;\n     List\u003cXAttr\u003e xAttrs;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n+      // Write access is required to unset erasure coding policy\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n+      }\n       src \u003d iip.getPath();\n       xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n     } finally {\n       fsd.writeUnlock();\n     }\n     if (xAttrs !\u003d null) {\n       fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n     }\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n      final String srcArg, final FSPermissionChecker pc,\n      final boolean logRetryCache) throws IOException {\n    assert fsn.hasWriteLock();\n\n    String src \u003d srcArg;\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip;\n    List\u003cXAttr\u003e xAttrs;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n      // Write access is required to unset erasure coding policy\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n      src \u003d iip.getPath();\n      xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n    } finally {\n      fsd.writeUnlock();\n    }\n    if (xAttrs !\u003d null) {\n      fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n    }\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {
            "oldValue": "[fsn-FSNamesystem(modifiers-final), srcArg-String(modifiers-final), logRetryCache-boolean(modifiers-final)]",
            "newValue": "[fsn-FSNamesystem(modifiers-final), srcArg-String(modifiers-final), pc-FSPermissionChecker(modifiers-final), logRetryCache-boolean(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8112. Relax permission checking for EC related operations.\n",
          "commitDate": "03/03/17 1:00 PM",
          "commitName": "3085a604300ed76d06a0011bd5555e419897b6cd",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "02/03/17 7:58 PM",
          "commitNameOld": "3749152b661d0359b3b941ab1d17177230f3b8dc",
          "commitAuthorOld": "Rakesh Radhakrishnan",
          "daysBetweenCommits": 0.71,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,26 @@\n   static HdfsFileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n-      final String srcArg, final boolean logRetryCache) throws IOException {\n+      final String srcArg, final FSPermissionChecker pc,\n+      final boolean logRetryCache) throws IOException {\n     assert fsn.hasWriteLock();\n \n     String src \u003d srcArg;\n-    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n     FSDirectory fsd \u003d fsn.getFSDirectory();\n     final INodesInPath iip;\n     List\u003cXAttr\u003e xAttrs;\n     fsd.writeLock();\n     try {\n       iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n+      // Write access is required to unset erasure coding policy\n+      if (fsd.isPermissionEnabled()) {\n+        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n+      }\n       src \u003d iip.getPath();\n       xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n     } finally {\n       fsd.writeUnlock();\n     }\n     if (xAttrs !\u003d null) {\n       fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n     }\n     return fsd.getAuditFileInfo(iip);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static HdfsFileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n      final String srcArg, final FSPermissionChecker pc,\n      final boolean logRetryCache) throws IOException {\n    assert fsn.hasWriteLock();\n\n    String src \u003d srcArg;\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip;\n    List\u003cXAttr\u003e xAttrs;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n      // Write access is required to unset erasure coding policy\n      if (fsd.isPermissionEnabled()) {\n        fsd.checkPathAccess(pc, iip, FsAction.WRITE);\n      }\n      src \u003d iip.getPath();\n      xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n    } finally {\n      fsd.writeUnlock();\n    }\n    if (xAttrs !\u003d null) {\n      fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n    }\n    return fsd.getAuditFileInfo(iip);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "e69231658dc4a79da936e6856017b5c4f6124ecb": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-11072. Add ability to unset and change directory EC policy. Contributed by Sammi Chen.\n",
      "commitDate": "10/01/17 11:32 AM",
      "commitName": "e69231658dc4a79da936e6856017b5c4f6124ecb",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,22 @@\n+  static HdfsFileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n+      final String srcArg, final boolean logRetryCache) throws IOException {\n+    assert fsn.hasWriteLock();\n+\n+    String src \u003d srcArg;\n+    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n+    FSDirectory fsd \u003d fsn.getFSDirectory();\n+    final INodesInPath iip;\n+    List\u003cXAttr\u003e xAttrs;\n+    fsd.writeLock();\n+    try {\n+      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n+      src \u003d iip.getPath();\n+      xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n+    } finally {\n+      fsd.writeUnlock();\n+    }\n+    if (xAttrs !\u003d null) {\n+      fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n+    }\n+    return fsd.getAuditFileInfo(iip);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static HdfsFileStatus unsetErasureCodingPolicy(final FSNamesystem fsn,\n      final String srcArg, final boolean logRetryCache) throws IOException {\n    assert fsn.hasWriteLock();\n\n    String src \u003d srcArg;\n    FSPermissionChecker pc \u003d fsn.getPermissionChecker();\n    FSDirectory fsd \u003d fsn.getFSDirectory();\n    final INodesInPath iip;\n    List\u003cXAttr\u003e xAttrs;\n    fsd.writeLock();\n    try {\n      iip \u003d fsd.resolvePath(pc, src, DirOp.WRITE_LINK);\n      src \u003d iip.getPath();\n      xAttrs \u003d removeErasureCodingPolicyXAttr(fsn, iip);\n    } finally {\n      fsd.writeUnlock();\n    }\n    if (xAttrs !\u003d null) {\n      fsn.getEditLog().logRemoveXAttrs(src, xAttrs, logRetryCache);\n    }\n    return fsd.getAuditFileInfo(iip);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirErasureCodingOp.java"
    }
  }
}