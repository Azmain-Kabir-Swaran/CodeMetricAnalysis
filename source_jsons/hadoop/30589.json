{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeveldbTimelineStore.java",
  "functionName": "getEntity",
  "functionId": "getEntity___entityId-String__entityType-String__fields-EnumSet__Field__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
  "functionStartLine": 373,
  "functionEndLine": 398,
  "numCommitsSeen": 24,
  "timeTaken": 3256,
  "changeHistory": [
    "839e077faf4019d6efdcd89d95930023cd0b0a08",
    "a4aa1cb40504299d3401008fdabc795eafb28713",
    "1a78c0ff016097930edf68e8278f826b637e918c",
    "7f07c4d81023e3bf4bf8980e64cc9420ec31cf55",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "b3ea4aebff42131642af0393748dc751cb3fc31e",
    "40464fba22bac99d0e5b79674152aa5dfba99483",
    "84425fb435cb603fd8adcc2f76631c0244175310"
  ],
  "changeHistoryShort": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": "Ybodychange",
    "a4aa1cb40504299d3401008fdabc795eafb28713": "Ybodychange",
    "1a78c0ff016097930edf68e8278f826b637e918c": "Ybodychange",
    "7f07c4d81023e3bf4bf8980e64cc9420ec31cf55": "Ybodychange",
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": "Ybodychange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "b3ea4aebff42131642af0393748dc751cb3fc31e": "Ybodychange",
    "40464fba22bac99d0e5b79674152aa5dfba99483": "Ybodychange",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Yintroduced"
  },
  "changeHistoryDetails": {
    "839e077faf4019d6efdcd89d95930023cd0b0a08": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "07/08/17 2:56 AM",
      "commitName": "839e077faf4019d6efdcd89d95930023cd0b0a08",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 8:15 PM",
      "commitNameOld": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n         .add(entityType).add(writeReverseOrderedLong(revStartTime))\n         .add(entityId).getBytesForLookup();\n \n     LeveldbIterator iterator \u003d null;\n     try {\n       iterator \u003d new LeveldbIterator(db);\n       iterator.seek(prefix);\n \n       if (fields \u003d\u003d null) {\n         fields \u003d EnumSet.allOf(Field.class);\n       }\n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanup(LOG, iterator);\n+      IOUtils.cleanupWithLogger(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n        .add(entityId).getBytesForLookup();\n\n    LeveldbIterator iterator \u003d null;\n    try {\n      iterator \u003d new LeveldbIterator(db);\n      iterator.seek(prefix);\n\n      if (fields \u003d\u003d null) {\n        fields \u003d EnumSet.allOf(Field.class);\n      }\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "a4aa1cb40504299d3401008fdabc795eafb28713": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\"\n\nThis reverts commit 1a78c0ff016097930edf68e8278f826b637e918c.\n",
      "commitDate": "31/07/17 8:15 PM",
      "commitName": "a4aa1cb40504299d3401008fdabc795eafb28713",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "31/07/17 6:53 PM",
      "commitNameOld": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n         .add(entityType).add(writeReverseOrderedLong(revStartTime))\n         .add(entityId).getBytesForLookup();\n \n     LeveldbIterator iterator \u003d null;\n     try {\n       iterator \u003d new LeveldbIterator(db);\n       iterator.seek(prefix);\n \n       if (fields \u003d\u003d null) {\n         fields \u003d EnumSet.allOf(Field.class);\n       }\n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanupWithLogger(LOG, iterator);\n+      IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n        .add(entityId).getBytesForLookup();\n\n    LeveldbIterator iterator \u003d null;\n    try {\n      iterator \u003d new LeveldbIterator(db);\n      iterator.seek(prefix);\n\n      if (fields \u003d\u003d null) {\n        fields \u003d EnumSet.allOf(Field.class);\n      }\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1a78c0ff016097930edf68e8278f826b637e918c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6873. Moving logging APIs over to slf4j in hadoop-yarn-server-applicationhistoryservice. Contributed by Yeliang Cang.\n",
      "commitDate": "31/07/17 6:53 PM",
      "commitName": "1a78c0ff016097930edf68e8278f826b637e918c",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "10/01/17 2:24 AM",
      "commitNameOld": "4c431a694059e40e78365b02a1497a6c7e479a70",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 202.65,
      "commitsBetweenForRepo": 1063,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n         .add(entityType).add(writeReverseOrderedLong(revStartTime))\n         .add(entityId).getBytesForLookup();\n \n     LeveldbIterator iterator \u003d null;\n     try {\n       iterator \u003d new LeveldbIterator(db);\n       iterator.seek(prefix);\n \n       if (fields \u003d\u003d null) {\n         fields \u003d EnumSet.allOf(Field.class);\n       }\n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n-      IOUtils.cleanup(LOG, iterator);\n+      IOUtils.cleanupWithLogger(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n        .add(entityId).getBytesForLookup();\n\n    LeveldbIterator iterator \u003d null;\n    try {\n      iterator \u003d new LeveldbIterator(db);\n      iterator.seek(prefix);\n\n      if (fields \u003d\u003d null) {\n        fields \u003d EnumSet.allOf(Field.class);\n      }\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanupWithLogger(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "7f07c4d81023e3bf4bf8980e64cc9420ec31cf55": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3530. ATS throws exception on trying to filter results without\notherinfo. Contributed by zhijie shen\n",
      "commitDate": "27/04/15 10:36 AM",
      "commitName": "7f07c4d81023e3bf4bf8980e64cc9420ec31cf55",
      "commitAuthor": "Xuan",
      "commitDateOld": "13/03/15 10:04 AM",
      "commitNameOld": "8180e676abb2bb500a48b3a0c0809d2a807ab235",
      "commitAuthorOld": "Jonathan Eagles",
      "daysBetweenCommits": 45.02,
      "commitsBetweenForRepo": 407,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,26 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n         .add(entityType).add(writeReverseOrderedLong(revStartTime))\n         .add(entityId).getBytesForLookup();\n \n     LeveldbIterator iterator \u003d null;\n     try {\n       iterator \u003d new LeveldbIterator(db);\n       iterator.seek(prefix);\n \n+      if (fields \u003d\u003d null) {\n+        fields \u003d EnumSet.allOf(Field.class);\n+      }\n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n     } catch(DBException e) {\n       throw new IOException(e);            \t\n     } finally {\n       IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n        .add(entityId).getBytesForLookup();\n\n    LeveldbIterator iterator \u003d null;\n    try {\n      iterator \u003d new LeveldbIterator(db);\n      iterator.seek(prefix);\n\n      if (fields \u003d\u003d null) {\n        fields \u003d EnumSet.allOf(Field.class);\n      }\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1984. LeveldbTimelineStore does not handle db exceptions properly. Contributed by Varun Saxena\n",
      "commitDate": "24/11/14 2:36 PM",
      "commitName": "1ce4d33c2dc86d711b227a04d2f9a2ab696a24a1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "07/11/14 4:11 PM",
      "commitNameOld": "4a114dd67aae83e5bb2d65470166de954acf36a2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 16.93,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n     if (revStartTime \u003d\u003d null) {\n       return null;\n     }\n     byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n         .add(entityType).add(writeReverseOrderedLong(revStartTime))\n         .add(entityId).getBytesForLookup();\n \n-    DBIterator iterator \u003d null;\n+    LeveldbIterator iterator \u003d null;\n     try {\n-      iterator \u003d db.iterator();\n+      iterator \u003d new LeveldbIterator(db);\n       iterator.seek(prefix);\n \n       return getEntity(entityId, entityType, revStartTime, fields, iterator,\n           prefix, prefix.length);\n+    } catch(DBException e) {\n+      throw new IOException(e);            \t\n     } finally {\n       IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n        .add(entityId).getBytesForLookup();\n\n    LeveldbIterator iterator \u003d null;\n    try {\n      iterator \u003d new LeveldbIterator(db);\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } catch(DBException e) {\n      throw new IOException(e);            \t\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n        .add(entityId).getBytesForLookup();\n\n    DBIterator iterator \u003d null;\n    try {\n      iterator \u003d db.iterator();\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/LeveldbTimelineStore.java"
      }
    },
    "b3ea4aebff42131642af0393748dc751cb3fc31e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1717. Enabled periodically discarding old data in LeveldbTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577693 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 1:35 PM",
      "commitName": "b3ea4aebff42131642af0393748dc751cb3fc31e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "04/03/14 9:32 AM",
      "commitNameOld": "40464fba22bac99d0e5b79674152aa5dfba99483",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.13,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n+    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n+    if (revStartTime \u003d\u003d null) {\n+      return null;\n+    }\n+    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n+        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n+        .add(entityId).getBytesForLookup();\n+\n     DBIterator iterator \u003d null;\n     try {\n-      byte[] revStartTime \u003d getStartTime(entityId, entityType);\n-      if (revStartTime \u003d\u003d null)\n-        return null;\n-      byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n-          .add(entityType).add(revStartTime).add(entityId).getBytesForLookup();\n-\n       iterator \u003d db.iterator();\n       iterator.seek(prefix);\n \n-      return getEntity(entityId, entityType,\n-          readReverseOrderedLong(revStartTime, 0), fields, iterator, prefix,\n-          prefix.length);\n+      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n+          prefix, prefix.length);\n     } finally {\n       IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    Long revStartTime \u003d getStartTimeLong(entityId, entityType);\n    if (revStartTime \u003d\u003d null) {\n      return null;\n    }\n    byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n        .add(entityType).add(writeReverseOrderedLong(revStartTime))\n        .add(entityId).getBytesForLookup();\n\n    DBIterator iterator \u003d null;\n    try {\n      iterator \u003d db.iterator();\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType, revStartTime, fields, iterator,\n          prefix, prefix.length);\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "40464fba22bac99d0e5b79674152aa5dfba99483": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1730. Implemented simple write-locking in the LevelDB based timeline-store. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574145 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/03/14 9:32 AM",
      "commitName": "40464fba22bac99d0e5b79674152aa5dfba99483",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/02/14 12:55 PM",
      "commitNameOld": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.86,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   public TimelineEntity getEntity(String entityId, String entityType,\n       EnumSet\u003cField\u003e fields) throws IOException {\n     DBIterator iterator \u003d null;\n     try {\n-      byte[] revStartTime \u003d getStartTime(entityId, entityType, null, null, null);\n+      byte[] revStartTime \u003d getStartTime(entityId, entityType);\n       if (revStartTime \u003d\u003d null)\n         return null;\n       byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n           .add(entityType).add(revStartTime).add(entityId).getBytesForLookup();\n \n       iterator \u003d db.iterator();\n       iterator.seek(prefix);\n \n       return getEntity(entityId, entityType,\n           readReverseOrderedLong(revStartTime, 0), fields, iterator, prefix,\n           prefix.length);\n     } finally {\n       IOUtils.cleanup(LOG, iterator);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    DBIterator iterator \u003d null;\n    try {\n      byte[] revStartTime \u003d getStartTime(entityId, entityType);\n      if (revStartTime \u003d\u003d null)\n        return null;\n      byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n          .add(entityType).add(revStartTime).add(entityId).getBytesForLookup();\n\n      iterator \u003d db.iterator();\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType,\n          readReverseOrderedLong(revStartTime, 0), fields, iterator, prefix,\n          prefix.length);\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java",
      "extendedDetails": {}
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,20 @@\n+  public TimelineEntity getEntity(String entityId, String entityType,\n+      EnumSet\u003cField\u003e fields) throws IOException {\n+    DBIterator iterator \u003d null;\n+    try {\n+      byte[] revStartTime \u003d getStartTime(entityId, entityType, null, null, null);\n+      if (revStartTime \u003d\u003d null)\n+        return null;\n+      byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n+          .add(entityType).add(revStartTime).add(entityId).getBytesForLookup();\n+\n+      iterator \u003d db.iterator();\n+      iterator.seek(prefix);\n+\n+      return getEntity(entityId, entityType,\n+          readReverseOrderedLong(revStartTime, 0), fields, iterator, prefix,\n+          prefix.length);\n+    } finally {\n+      IOUtils.cleanup(LOG, iterator);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getEntity(String entityId, String entityType,\n      EnumSet\u003cField\u003e fields) throws IOException {\n    DBIterator iterator \u003d null;\n    try {\n      byte[] revStartTime \u003d getStartTime(entityId, entityType, null, null, null);\n      if (revStartTime \u003d\u003d null)\n        return null;\n      byte[] prefix \u003d KeyBuilder.newInstance().add(ENTITY_ENTRY_PREFIX)\n          .add(entityType).add(revStartTime).add(entityId).getBytesForLookup();\n\n      iterator \u003d db.iterator();\n      iterator.seek(prefix);\n\n      return getEntity(entityId, entityType,\n          readReverseOrderedLong(revStartTime, 0), fields, iterator, prefix,\n          prefix.length);\n    } finally {\n      IOUtils.cleanup(LOG, iterator);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/timeline/LeveldbTimelineStore.java"
    }
  }
}