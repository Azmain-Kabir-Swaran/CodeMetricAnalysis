{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Stat.java",
  "functionName": "processPath",
  "functionId": "processPath___item-PathData",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
  "functionStartLine": 92,
  "functionEndLine": 155,
  "numCommitsSeen": 15,
  "timeTaken": 1956,
  "changeHistory": [
    "c6330f22a5e5c2370bab885f9bea4bf8f5e9cf44",
    "bedfec0c10144087168bc79501ffd5ab4fa52606",
    "bb84f1fccb18c6c7373851e05d2451d55e908242",
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
    "9eb87574a3e10904b1d1fa92bf542b6b0eddcf78",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc",
    "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899"
  ],
  "changeHistoryShort": {
    "c6330f22a5e5c2370bab885f9bea4bf8f5e9cf44": "Ybodychange",
    "bedfec0c10144087168bc79501ffd5ab4fa52606": "Ybodychange",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ybodychange",
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15": "Ybodychange",
    "9eb87574a3e10904b1d1fa92bf542b6b0eddcf78": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc": "Ybodychange",
    "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c6330f22a5e5c2370bab885f9bea4bf8f5e9cf44": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12190. Enable \u0027hdfs dfs -stat\u0027 to display access time. Contributed by Yongjun Zhang.\n",
      "commitDate": "27/07/17 4:48 PM",
      "commitName": "c6330f22a5e5c2370bab885f9bea4bf8f5e9cf44",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "13/02/17 10:14 AM",
      "commitNameOld": "cc45da79fda7dfba2795ac397d62f40a858dcdd9",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 164.23,
      "commitsBetweenForRepo": 888,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,64 @@\n   protected void processPath(PathData item) throws IOException {\n     FileStatus stat \u003d item.stat;\n     StringBuilder buf \u003d new StringBuilder();\n \n     char[] fmt \u003d format.toCharArray();\n     for (int i \u003d 0; i \u003c fmt.length; ++i) {\n       if (fmt[i] !\u003d \u0027%\u0027) {\n         buf.append(fmt[i]);\n       } else {\n         // this silently drops a trailing %?\n         if (i + 1 \u003d\u003d fmt.length) break;\n         switch (fmt[++i]) {\n           case \u0027a\u0027:\n             buf.append(stat.getPermission().toOctal());\n             break;\n           case \u0027A\u0027:\n             buf.append(stat.getPermission());\n             break;\n           case \u0027b\u0027:\n             buf.append(stat.getLen());\n             break;\n           case \u0027F\u0027:\n             buf.append(stat.isDirectory()\n                 ? \"directory\"\n                 : (stat.isFile() ? \"regular file\" : \"symlink\"));\n             break;\n           case \u0027g\u0027:\n             buf.append(stat.getGroup());\n             break;\n           case \u0027n\u0027:\n             buf.append(item.path.getName());\n             break;\n           case \u0027o\u0027:\n             buf.append(stat.getBlockSize());\n             break;\n           case \u0027r\u0027:\n             buf.append(stat.getReplication());\n             break;\n           case \u0027u\u0027:\n             buf.append(stat.getOwner());\n             break;\n+          case \u0027x\u0027:\n+            buf.append(timeFmt.format(new Date(stat.getAccessTime())));\n+            break;\n+          case \u0027X\u0027:\n+            buf.append(stat.getAccessTime());\n+            break;\n           case \u0027y\u0027:\n             buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n             break;\n           case \u0027Y\u0027:\n             buf.append(stat.getModificationTime());\n             break;\n           default:\n             // this leaves %\u003cunknown\u003e alone, which causes the potential for\n             // future format options to break strings; should use %% to\n             // escape percents\n             buf.append(fmt[i]);\n             break;\n         }\n       }\n     }\n     out.println(buf.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027a\u0027:\n            buf.append(stat.getPermission().toOctal());\n            break;\n          case \u0027A\u0027:\n            buf.append(stat.getPermission());\n            break;\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\"\n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027g\u0027:\n            buf.append(stat.getGroup());\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027u\u0027:\n            buf.append(stat.getOwner());\n            break;\n          case \u0027x\u0027:\n            buf.append(timeFmt.format(new Date(stat.getAccessTime())));\n            break;\n          case \u0027X\u0027:\n            buf.append(stat.getAccessTime());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {}
    },
    "bedfec0c10144087168bc79501ffd5ab4fa52606": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13522. Add %A and %a formats for fs -stat command to print permissions. Contributed by Alex Garbarini.\n",
      "commitDate": "17/10/16 11:00 PM",
      "commitName": "bedfec0c10144087168bc79501ffd5ab4fa52606",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "15/01/15 7:55 AM",
      "commitNameOld": "ce29074685abaa88ae9586fe8277aca23f9d54d6",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 641.59,
      "commitsBetweenForRepo": 4913,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,58 @@\n   protected void processPath(PathData item) throws IOException {\n     FileStatus stat \u003d item.stat;\n     StringBuilder buf \u003d new StringBuilder();\n \n     char[] fmt \u003d format.toCharArray();\n     for (int i \u003d 0; i \u003c fmt.length; ++i) {\n       if (fmt[i] !\u003d \u0027%\u0027) {\n         buf.append(fmt[i]);\n       } else {\n         // this silently drops a trailing %?\n         if (i + 1 \u003d\u003d fmt.length) break;\n         switch (fmt[++i]) {\n+          case \u0027a\u0027:\n+            buf.append(stat.getPermission().toOctal());\n+            break;\n+          case \u0027A\u0027:\n+            buf.append(stat.getPermission());\n+            break;\n           case \u0027b\u0027:\n             buf.append(stat.getLen());\n             break;\n           case \u0027F\u0027:\n             buf.append(stat.isDirectory()\n                 ? \"directory\"\n                 : (stat.isFile() ? \"regular file\" : \"symlink\"));\n             break;\n           case \u0027g\u0027:\n             buf.append(stat.getGroup());\n             break;\n           case \u0027n\u0027:\n             buf.append(item.path.getName());\n             break;\n           case \u0027o\u0027:\n             buf.append(stat.getBlockSize());\n             break;\n           case \u0027r\u0027:\n             buf.append(stat.getReplication());\n             break;\n           case \u0027u\u0027:\n             buf.append(stat.getOwner());\n             break;\n           case \u0027y\u0027:\n             buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n             break;\n           case \u0027Y\u0027:\n             buf.append(stat.getModificationTime());\n             break;\n           default:\n             // this leaves %\u003cunknown\u003e alone, which causes the potential for\n             // future format options to break strings; should use %% to\n             // escape percents\n             buf.append(fmt[i]);\n             break;\n         }\n       }\n     }\n     out.println(buf.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027a\u0027:\n            buf.append(stat.getPermission().toOctal());\n            break;\n          case \u0027A\u0027:\n            buf.append(stat.getPermission());\n            break;\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\"\n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027g\u0027:\n            buf.append(stat.getGroup());\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027u\u0027:\n            buf.append(stat.getOwner());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {}
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "commitDateOld": "28/08/14 3:53 PM",
      "commitNameOld": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
      "commitAuthorOld": "arp",
      "daysBetweenCommits": 32.27,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,52 @@\n   protected void processPath(PathData item) throws IOException {\n     FileStatus stat \u003d item.stat;\n     StringBuilder buf \u003d new StringBuilder();\n \n     char[] fmt \u003d format.toCharArray();\n     for (int i \u003d 0; i \u003c fmt.length; ++i) {\n       if (fmt[i] !\u003d \u0027%\u0027) {\n         buf.append(fmt[i]);\n       } else {\n         // this silently drops a trailing %?\n         if (i + 1 \u003d\u003d fmt.length) break;\n         switch (fmt[++i]) {\n           case \u0027b\u0027:\n             buf.append(stat.getLen());\n             break;\n           case \u0027F\u0027:\n             buf.append(stat.isDirectory()\n-                ? \"directory\" \n+                ? \"directory\"\n                 : (stat.isFile() ? \"regular file\" : \"symlink\"));\n             break;\n           case \u0027g\u0027:\n             buf.append(stat.getGroup());\n             break;\n           case \u0027n\u0027:\n             buf.append(item.path.getName());\n             break;\n           case \u0027o\u0027:\n             buf.append(stat.getBlockSize());\n             break;\n           case \u0027r\u0027:\n             buf.append(stat.getReplication());\n             break;\n           case \u0027u\u0027:\n             buf.append(stat.getOwner());\n             break;\n           case \u0027y\u0027:\n             buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n             break;\n           case \u0027Y\u0027:\n             buf.append(stat.getModificationTime());\n             break;\n-          case \u0027l\u0027:\n-            buf.append(stat.isLazyPersist());\n-            break;\n           default:\n             // this leaves %\u003cunknown\u003e alone, which causes the potential for\n             // future format options to break strings; should use %% to\n             // escape percents\n             buf.append(fmt[i]);\n             break;\n         }\n       }\n     }\n     out.println(buf.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\"\n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027g\u0027:\n            buf.append(stat.getGroup());\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027u\u0027:\n            buf.append(stat.getOwner());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {}
    },
    "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6928. \u0027hdfs put\u0027 command should accept lazyPersist flag for testing. (Arpit Agarwal)\n",
      "commitDate": "28/08/14 3:53 PM",
      "commitName": "bbaa7dc28db75d9b3700c6ff95222d8e1de29c15",
      "commitAuthor": "arp",
      "commitDateOld": "12/06/14 11:39 PM",
      "commitNameOld": "be3fdd1c40140e24df1a5414cf91537862b66e82",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 76.68,
      "commitsBetweenForRepo": 605,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,55 @@\n   protected void processPath(PathData item) throws IOException {\n     FileStatus stat \u003d item.stat;\n     StringBuilder buf \u003d new StringBuilder();\n \n     char[] fmt \u003d format.toCharArray();\n     for (int i \u003d 0; i \u003c fmt.length; ++i) {\n       if (fmt[i] !\u003d \u0027%\u0027) {\n         buf.append(fmt[i]);\n       } else {\n         // this silently drops a trailing %?\n         if (i + 1 \u003d\u003d fmt.length) break;\n         switch (fmt[++i]) {\n           case \u0027b\u0027:\n             buf.append(stat.getLen());\n             break;\n           case \u0027F\u0027:\n             buf.append(stat.isDirectory()\n                 ? \"directory\" \n                 : (stat.isFile() ? \"regular file\" : \"symlink\"));\n             break;\n           case \u0027g\u0027:\n             buf.append(stat.getGroup());\n             break;\n           case \u0027n\u0027:\n             buf.append(item.path.getName());\n             break;\n           case \u0027o\u0027:\n             buf.append(stat.getBlockSize());\n             break;\n           case \u0027r\u0027:\n             buf.append(stat.getReplication());\n             break;\n           case \u0027u\u0027:\n             buf.append(stat.getOwner());\n             break;\n           case \u0027y\u0027:\n             buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n             break;\n           case \u0027Y\u0027:\n             buf.append(stat.getModificationTime());\n             break;\n+          case \u0027l\u0027:\n+            buf.append(stat.isLazyPersist());\n+            break;\n           default:\n             // this leaves %\u003cunknown\u003e alone, which causes the potential for\n             // future format options to break strings; should use %% to\n             // escape percents\n             buf.append(fmt[i]);\n             break;\n         }\n       }\n     }\n     out.println(buf.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\" \n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027g\u0027:\n            buf.append(stat.getGroup());\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027u\u0027:\n            buf.append(stat.getOwner());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          case \u0027l\u0027:\n            buf.append(stat.isLazyPersist());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {}
    },
    "9eb87574a3e10904b1d1fa92bf542b6b0eddcf78": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7574. Improve FSShell -stat, add user/group elements (XieXianshan via harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1225114 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/12/11 10:48 PM",
      "commitName": "9eb87574a3e10904b1d1fa92bf542b6b0eddcf78",
      "commitAuthor": "Harsh J",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 125.27,
      "commitsBetweenForRepo": 818,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,52 @@\n   protected void processPath(PathData item) throws IOException {\n     FileStatus stat \u003d item.stat;\n     StringBuilder buf \u003d new StringBuilder();\n \n     char[] fmt \u003d format.toCharArray();\n     for (int i \u003d 0; i \u003c fmt.length; ++i) {\n       if (fmt[i] !\u003d \u0027%\u0027) {\n         buf.append(fmt[i]);\n       } else {\n         // this silently drops a trailing %?\n         if (i + 1 \u003d\u003d fmt.length) break;\n         switch (fmt[++i]) {\n           case \u0027b\u0027:\n             buf.append(stat.getLen());\n             break;\n           case \u0027F\u0027:\n             buf.append(stat.isDirectory()\n                 ? \"directory\" \n                 : (stat.isFile() ? \"regular file\" : \"symlink\"));\n             break;\n+          case \u0027g\u0027:\n+            buf.append(stat.getGroup());\n+            break;\n           case \u0027n\u0027:\n             buf.append(item.path.getName());\n             break;\n           case \u0027o\u0027:\n             buf.append(stat.getBlockSize());\n             break;\n           case \u0027r\u0027:\n             buf.append(stat.getReplication());\n             break;\n+          case \u0027u\u0027:\n+            buf.append(stat.getOwner());\n+            break;\n           case \u0027y\u0027:\n             buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n             break;\n           case \u0027Y\u0027:\n             buf.append(stat.getModificationTime());\n             break;\n           default:\n             // this leaves %\u003cunknown\u003e alone, which causes the potential for\n             // future format options to break strings; should use %% to\n             // escape percents\n             buf.append(fmt[i]);\n             break;\n         }\n       }\n     }\n     out.println(buf.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\" \n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027g\u0027:\n            buf.append(stat.getGroup());\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027u\u0027:\n            buf.append(stat.getOwner());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\" \n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\" \n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/shell/Stat.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/shell/Stat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\" \n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/shell/Stat.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/shell/Stat.java"
      }
    },
    "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7286. Refactor the du/dus/df commands to conform to new FsCommand class. Contributed by Daryn Sharp.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1103968 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/05/11 5:53 PM",
      "commitName": "b04fb035ece4aafef525ec65cbd0ffe9bf70e5cc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/05/11 11:32 AM",
      "commitNameOld": "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 5.26,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   protected void processPath(PathData item) throws IOException {\n     FileStatus stat \u003d item.stat;\n     StringBuilder buf \u003d new StringBuilder();\n \n     char[] fmt \u003d format.toCharArray();\n     for (int i \u003d 0; i \u003c fmt.length; ++i) {\n       if (fmt[i] !\u003d \u0027%\u0027) {\n         buf.append(fmt[i]);\n       } else {\n         // this silently drops a trailing %?\n         if (i + 1 \u003d\u003d fmt.length) break;\n         switch (fmt[++i]) {\n           case \u0027b\u0027:\n             buf.append(stat.getLen());\n             break;\n           case \u0027F\u0027:\n             buf.append(stat.isDirectory()\n                 ? \"directory\" \n                 : (stat.isFile() ? \"regular file\" : \"symlink\"));\n             break;\n           case \u0027n\u0027:\n-            buf.append(item);\n+            buf.append(item.path.getName());\n             break;\n           case \u0027o\u0027:\n             buf.append(stat.getBlockSize());\n             break;\n           case \u0027r\u0027:\n             buf.append(stat.getReplication());\n             break;\n           case \u0027y\u0027:\n             buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n             break;\n           case \u0027Y\u0027:\n             buf.append(stat.getModificationTime());\n             break;\n           default:\n             // this leaves %\u003cunknown\u003e alone, which causes the potential for\n             // future format options to break strings; should use %% to\n             // escape percents\n             buf.append(fmt[i]);\n             break;\n         }\n       }\n     }\n     out.println(buf.toString());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\" \n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027n\u0027:\n            buf.append(item.path.getName());\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/Stat.java",
      "extendedDetails": {}
    },
    "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7275. Refactor the stat commands to conform to new FsCommand class.  Contributed by Daryn Sharp\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1102012 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/11 11:32 AM",
      "commitName": "4aa51ca6f9ba0b096568bfb5aa4249fd41d99899",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,46 @@\n+  protected void processPath(PathData item) throws IOException {\n+    FileStatus stat \u003d item.stat;\n+    StringBuilder buf \u003d new StringBuilder();\n+\n+    char[] fmt \u003d format.toCharArray();\n+    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n+      if (fmt[i] !\u003d \u0027%\u0027) {\n+        buf.append(fmt[i]);\n+      } else {\n+        // this silently drops a trailing %?\n+        if (i + 1 \u003d\u003d fmt.length) break;\n+        switch (fmt[++i]) {\n+          case \u0027b\u0027:\n+            buf.append(stat.getLen());\n+            break;\n+          case \u0027F\u0027:\n+            buf.append(stat.isDirectory()\n+                ? \"directory\" \n+                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n+            break;\n+          case \u0027n\u0027:\n+            buf.append(item);\n+            break;\n+          case \u0027o\u0027:\n+            buf.append(stat.getBlockSize());\n+            break;\n+          case \u0027r\u0027:\n+            buf.append(stat.getReplication());\n+            break;\n+          case \u0027y\u0027:\n+            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n+            break;\n+          case \u0027Y\u0027:\n+            buf.append(stat.getModificationTime());\n+            break;\n+          default:\n+            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n+            // future format options to break strings; should use %% to\n+            // escape percents\n+            buf.append(fmt[i]);\n+            break;\n+        }\n+      }\n+    }\n+    out.println(buf.toString());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void processPath(PathData item) throws IOException {\n    FileStatus stat \u003d item.stat;\n    StringBuilder buf \u003d new StringBuilder();\n\n    char[] fmt \u003d format.toCharArray();\n    for (int i \u003d 0; i \u003c fmt.length; ++i) {\n      if (fmt[i] !\u003d \u0027%\u0027) {\n        buf.append(fmt[i]);\n      } else {\n        // this silently drops a trailing %?\n        if (i + 1 \u003d\u003d fmt.length) break;\n        switch (fmt[++i]) {\n          case \u0027b\u0027:\n            buf.append(stat.getLen());\n            break;\n          case \u0027F\u0027:\n            buf.append(stat.isDirectory()\n                ? \"directory\" \n                : (stat.isFile() ? \"regular file\" : \"symlink\"));\n            break;\n          case \u0027n\u0027:\n            buf.append(item);\n            break;\n          case \u0027o\u0027:\n            buf.append(stat.getBlockSize());\n            break;\n          case \u0027r\u0027:\n            buf.append(stat.getReplication());\n            break;\n          case \u0027y\u0027:\n            buf.append(timeFmt.format(new Date(stat.getModificationTime())));\n            break;\n          case \u0027Y\u0027:\n            buf.append(stat.getModificationTime());\n            break;\n          default:\n            // this leaves %\u003cunknown\u003e alone, which causes the potential for\n            // future format options to break strings; should use %% to\n            // escape percents\n            buf.append(fmt[i]);\n            break;\n        }\n      }\n    }\n    out.println(buf.toString());\n  }",
      "path": "src/java/org/apache/hadoop/fs/shell/Stat.java"
    }
  }
}