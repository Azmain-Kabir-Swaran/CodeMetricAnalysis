{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SocketIOWithTimeout.java",
  "functionName": "get",
  "functionId": "get___channel-SelectableChannel",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
  "functionStartLine": 388,
  "functionEndLine": 421,
  "numCommitsSeen": 11,
  "timeTaken": 911,
  "changeHistory": [
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "03/05/12 2:57 PM",
      "commitNameOld": "03181022ab238b2d4f59932eb8eadbe7cb52a669",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 69.88,
      "commitsBetweenForRepo": 357,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private synchronized SelectorInfo get(SelectableChannel channel) \n                                                          throws IOException {\n       SelectorInfo selInfo \u003d null;\n       \n       SelectorProvider provider \u003d channel.provider();\n       \n       // pick the list : rarely there is more than one provider in use.\n       ProviderInfo pList \u003d providerList;\n       while (pList !\u003d null \u0026\u0026 pList.provider !\u003d provider) {\n         pList \u003d pList.next;\n       }      \n       if (pList \u003d\u003d null) {\n         //LOG.info(\"Creating new ProviderInfo : \" + provider.toString());\n         pList \u003d new ProviderInfo();\n         pList.provider \u003d provider;\n         pList.queue \u003d new LinkedList\u003cSelectorInfo\u003e();\n         pList.next \u003d providerList;\n         providerList \u003d pList;\n       }\n       \n       LinkedList\u003cSelectorInfo\u003e queue \u003d pList.queue;\n       \n       if (queue.isEmpty()) {\n         Selector selector \u003d provider.openSelector();\n         selInfo \u003d new SelectorInfo();\n         selInfo.selector \u003d selector;\n         selInfo.queue \u003d queue;\n       } else {\n         selInfo \u003d queue.removeLast();\n       }\n       \n-      trimIdleSelectors(System.currentTimeMillis());\n+      trimIdleSelectors(Time.now());\n       return selInfo;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized SelectorInfo get(SelectableChannel channel) \n                                                         throws IOException {\n      SelectorInfo selInfo \u003d null;\n      \n      SelectorProvider provider \u003d channel.provider();\n      \n      // pick the list : rarely there is more than one provider in use.\n      ProviderInfo pList \u003d providerList;\n      while (pList !\u003d null \u0026\u0026 pList.provider !\u003d provider) {\n        pList \u003d pList.next;\n      }      \n      if (pList \u003d\u003d null) {\n        //LOG.info(\"Creating new ProviderInfo : \" + provider.toString());\n        pList \u003d new ProviderInfo();\n        pList.provider \u003d provider;\n        pList.queue \u003d new LinkedList\u003cSelectorInfo\u003e();\n        pList.next \u003d providerList;\n        providerList \u003d pList;\n      }\n      \n      LinkedList\u003cSelectorInfo\u003e queue \u003d pList.queue;\n      \n      if (queue.isEmpty()) {\n        Selector selector \u003d provider.openSelector();\n        selInfo \u003d new SelectorInfo();\n        selInfo.selector \u003d selector;\n        selInfo.queue \u003d queue;\n      } else {\n        selInfo \u003d queue.removeLast();\n      }\n      \n      trimIdleSelectors(Time.now());\n      return selInfo;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized SelectorInfo get(SelectableChannel channel) \n                                                         throws IOException {\n      SelectorInfo selInfo \u003d null;\n      \n      SelectorProvider provider \u003d channel.provider();\n      \n      // pick the list : rarely there is more than one provider in use.\n      ProviderInfo pList \u003d providerList;\n      while (pList !\u003d null \u0026\u0026 pList.provider !\u003d provider) {\n        pList \u003d pList.next;\n      }      \n      if (pList \u003d\u003d null) {\n        //LOG.info(\"Creating new ProviderInfo : \" + provider.toString());\n        pList \u003d new ProviderInfo();\n        pList.provider \u003d provider;\n        pList.queue \u003d new LinkedList\u003cSelectorInfo\u003e();\n        pList.next \u003d providerList;\n        providerList \u003d pList;\n      }\n      \n      LinkedList\u003cSelectorInfo\u003e queue \u003d pList.queue;\n      \n      if (queue.isEmpty()) {\n        Selector selector \u003d provider.openSelector();\n        selInfo \u003d new SelectorInfo();\n        selInfo.selector \u003d selector;\n        selInfo.queue \u003d queue;\n      } else {\n        selInfo \u003d queue.removeLast();\n      }\n      \n      trimIdleSelectors(System.currentTimeMillis());\n      return selInfo;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized SelectorInfo get(SelectableChannel channel) \n                                                         throws IOException {\n      SelectorInfo selInfo \u003d null;\n      \n      SelectorProvider provider \u003d channel.provider();\n      \n      // pick the list : rarely there is more than one provider in use.\n      ProviderInfo pList \u003d providerList;\n      while (pList !\u003d null \u0026\u0026 pList.provider !\u003d provider) {\n        pList \u003d pList.next;\n      }      \n      if (pList \u003d\u003d null) {\n        //LOG.info(\"Creating new ProviderInfo : \" + provider.toString());\n        pList \u003d new ProviderInfo();\n        pList.provider \u003d provider;\n        pList.queue \u003d new LinkedList\u003cSelectorInfo\u003e();\n        pList.next \u003d providerList;\n        providerList \u003d pList;\n      }\n      \n      LinkedList\u003cSelectorInfo\u003e queue \u003d pList.queue;\n      \n      if (queue.isEmpty()) {\n        Selector selector \u003d provider.openSelector();\n        selInfo \u003d new SelectorInfo();\n        selInfo.selector \u003d selector;\n        selInfo.queue \u003d queue;\n      } else {\n        selInfo \u003d queue.removeLast();\n      }\n      \n      trimIdleSelectors(System.currentTimeMillis());\n      return selInfo;\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private synchronized SelectorInfo get(SelectableChannel channel) \n                                                         throws IOException {\n      SelectorInfo selInfo \u003d null;\n      \n      SelectorProvider provider \u003d channel.provider();\n      \n      // pick the list : rarely there is more than one provider in use.\n      ProviderInfo pList \u003d providerList;\n      while (pList !\u003d null \u0026\u0026 pList.provider !\u003d provider) {\n        pList \u003d pList.next;\n      }      \n      if (pList \u003d\u003d null) {\n        //LOG.info(\"Creating new ProviderInfo : \" + provider.toString());\n        pList \u003d new ProviderInfo();\n        pList.provider \u003d provider;\n        pList.queue \u003d new LinkedList\u003cSelectorInfo\u003e();\n        pList.next \u003d providerList;\n        providerList \u003d pList;\n      }\n      \n      LinkedList\u003cSelectorInfo\u003e queue \u003d pList.queue;\n      \n      if (queue.isEmpty()) {\n        Selector selector \u003d provider.openSelector();\n        selInfo \u003d new SelectorInfo();\n        selInfo.selector \u003d selector;\n        selInfo.queue \u003d queue;\n      } else {\n        selInfo \u003d queue.removeLast();\n      }\n      \n      trimIdleSelectors(System.currentTimeMillis());\n      return selInfo;\n    }",
      "path": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/net/SocketIOWithTimeout.java",
        "newPath": "common/src/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,34 @@\n+    private synchronized SelectorInfo get(SelectableChannel channel) \n+                                                         throws IOException {\n+      SelectorInfo selInfo \u003d null;\n+      \n+      SelectorProvider provider \u003d channel.provider();\n+      \n+      // pick the list : rarely there is more than one provider in use.\n+      ProviderInfo pList \u003d providerList;\n+      while (pList !\u003d null \u0026\u0026 pList.provider !\u003d provider) {\n+        pList \u003d pList.next;\n+      }      \n+      if (pList \u003d\u003d null) {\n+        //LOG.info(\"Creating new ProviderInfo : \" + provider.toString());\n+        pList \u003d new ProviderInfo();\n+        pList.provider \u003d provider;\n+        pList.queue \u003d new LinkedList\u003cSelectorInfo\u003e();\n+        pList.next \u003d providerList;\n+        providerList \u003d pList;\n+      }\n+      \n+      LinkedList\u003cSelectorInfo\u003e queue \u003d pList.queue;\n+      \n+      if (queue.isEmpty()) {\n+        Selector selector \u003d provider.openSelector();\n+        selInfo \u003d new SelectorInfo();\n+        selInfo.selector \u003d selector;\n+        selInfo.queue \u003d queue;\n+      } else {\n+        selInfo \u003d queue.removeLast();\n+      }\n+      \n+      trimIdleSelectors(System.currentTimeMillis());\n+      return selInfo;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private synchronized SelectorInfo get(SelectableChannel channel) \n                                                         throws IOException {\n      SelectorInfo selInfo \u003d null;\n      \n      SelectorProvider provider \u003d channel.provider();\n      \n      // pick the list : rarely there is more than one provider in use.\n      ProviderInfo pList \u003d providerList;\n      while (pList !\u003d null \u0026\u0026 pList.provider !\u003d provider) {\n        pList \u003d pList.next;\n      }      \n      if (pList \u003d\u003d null) {\n        //LOG.info(\"Creating new ProviderInfo : \" + provider.toString());\n        pList \u003d new ProviderInfo();\n        pList.provider \u003d provider;\n        pList.queue \u003d new LinkedList\u003cSelectorInfo\u003e();\n        pList.next \u003d providerList;\n        providerList \u003d pList;\n      }\n      \n      LinkedList\u003cSelectorInfo\u003e queue \u003d pList.queue;\n      \n      if (queue.isEmpty()) {\n        Selector selector \u003d provider.openSelector();\n        selInfo \u003d new SelectorInfo();\n        selInfo.selector \u003d selector;\n        selInfo.queue \u003d queue;\n      } else {\n        selInfo \u003d queue.removeLast();\n      }\n      \n      trimIdleSelectors(System.currentTimeMillis());\n      return selInfo;\n    }",
      "path": "src/java/org/apache/hadoop/net/SocketIOWithTimeout.java"
    }
  }
}