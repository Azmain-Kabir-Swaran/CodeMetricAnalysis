{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeafQueue.java",
  "functionName": "apply",
  "functionId": "apply___cluster-Resource__request-ResourceCommitRequest__FiCaSchedulerApp,FiCaSchedulerNode__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
  "functionStartLine": 1305,
  "functionEndLine": 1351,
  "numCommitsSeen": 176,
  "timeTaken": 3791,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": "Ybodychange",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,47 @@\n   public void apply(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     // Do we need to call parent queue\u0027s apply?\n     boolean applyToParentQueue \u003d false;\n \n     releaseContainers(cluster, request);\n \n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n-\n       if (request.anythingAllocatedOrReserved()) {\n         ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n             allocation \u003d request.getFirstAllocatedOrReservedContainer();\n         SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n             schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n \n         // Do not modify queue when allocation from reserved container\n         if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n           // Only invoke apply() of ParentQueue when new allocation /\n           // reservation happen.\n           applyToParentQueue \u003d true;\n           // Book-keeping\n           // Note: Update headroom to account for current allocation too...\n           allocateResource(cluster,\n               schedulerContainer.getSchedulerApplicationAttempt(),\n               allocation.getAllocatedOrReservedResource(),\n               schedulerContainer.getNodePartition(),\n               schedulerContainer.getRmContainer());\n           orderingPolicy.containerAllocated(\n               schedulerContainer.getSchedulerApplicationAttempt(),\n               schedulerContainer.getRmContainer());\n         }\n \n         // Update reserved resource\n         if (Resources.greaterThan(resourceCalculator, cluster,\n             request.getTotalReservedResource(), Resources.none())) {\n           incReservedResource(schedulerContainer.getNodePartition(),\n               request.getTotalReservedResource());\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n \n     if (parent !\u003d null \u0026\u0026 applyToParentQueue) {\n       parent.apply(cluster, request);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void apply(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    // Do we need to call parent queue\u0027s apply?\n    boolean applyToParentQueue \u003d false;\n\n    releaseContainers(cluster, request);\n\n    writeLock.lock();\n    try {\n      if (request.anythingAllocatedOrReserved()) {\n        ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            allocation \u003d request.getFirstAllocatedOrReservedContainer();\n        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n\n        // Do not modify queue when allocation from reserved container\n        if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n          // Only invoke apply() of ParentQueue when new allocation /\n          // reservation happen.\n          applyToParentQueue \u003d true;\n          // Book-keeping\n          // Note: Update headroom to account for current allocation too...\n          allocateResource(cluster,\n              schedulerContainer.getSchedulerApplicationAttempt(),\n              allocation.getAllocatedOrReservedResource(),\n              schedulerContainer.getNodePartition(),\n              schedulerContainer.getRmContainer());\n          orderingPolicy.containerAllocated(\n              schedulerContainer.getSchedulerApplicationAttempt(),\n              schedulerContainer.getRmContainer());\n        }\n\n        // Update reserved resource\n        if (Resources.greaterThan(resourceCalculator, cluster,\n            request.getTotalReservedResource(), Resources.none())) {\n          incReservedResource(schedulerContainer.getNodePartition(),\n              request.getTotalReservedResource());\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    if (parent !\u003d null \u0026\u0026 applyToParentQueue) {\n      parent.apply(cluster, request);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6216. Unify Container Resizing code paths with Container Updates making it scheduler agnostic. (Arun Suresh via wangda)\n",
      "commitDate": "28/02/17 10:35 AM",
      "commitName": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.01,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,48 @@\n   public void apply(Resource cluster,\n       ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n     // Do we need to call parent queue\u0027s apply?\n     boolean applyToParentQueue \u003d false;\n \n     releaseContainers(cluster, request);\n \n     try {\n       writeLock.lock();\n \n       if (request.anythingAllocatedOrReserved()) {\n         ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n             allocation \u003d request.getFirstAllocatedOrReservedContainer();\n         SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n             schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n \n         // Do not modify queue when allocation from reserved container\n         if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n           // Only invoke apply() of ParentQueue when new allocation /\n           // reservation happen.\n           applyToParentQueue \u003d true;\n           // Book-keeping\n           // Note: Update headroom to account for current allocation too...\n           allocateResource(cluster,\n               schedulerContainer.getSchedulerApplicationAttempt(),\n               allocation.getAllocatedOrReservedResource(),\n               schedulerContainer.getNodePartition(),\n-              schedulerContainer.getRmContainer(),\n-              allocation.isIncreasedAllocation());\n+              schedulerContainer.getRmContainer());\n           orderingPolicy.containerAllocated(\n               schedulerContainer.getSchedulerApplicationAttempt(),\n               schedulerContainer.getRmContainer());\n         }\n \n         // Update reserved resource\n         if (Resources.greaterThan(resourceCalculator, cluster,\n             request.getTotalReservedResource(), Resources.none())) {\n           incReservedResource(schedulerContainer.getNodePartition(),\n               request.getTotalReservedResource());\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n \n     if (parent !\u003d null \u0026\u0026 applyToParentQueue) {\n       parent.apply(cluster, request);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void apply(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    // Do we need to call parent queue\u0027s apply?\n    boolean applyToParentQueue \u003d false;\n\n    releaseContainers(cluster, request);\n\n    try {\n      writeLock.lock();\n\n      if (request.anythingAllocatedOrReserved()) {\n        ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            allocation \u003d request.getFirstAllocatedOrReservedContainer();\n        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n\n        // Do not modify queue when allocation from reserved container\n        if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n          // Only invoke apply() of ParentQueue when new allocation /\n          // reservation happen.\n          applyToParentQueue \u003d true;\n          // Book-keeping\n          // Note: Update headroom to account for current allocation too...\n          allocateResource(cluster,\n              schedulerContainer.getSchedulerApplicationAttempt(),\n              allocation.getAllocatedOrReservedResource(),\n              schedulerContainer.getNodePartition(),\n              schedulerContainer.getRmContainer());\n          orderingPolicy.containerAllocated(\n              schedulerContainer.getSchedulerApplicationAttempt(),\n              schedulerContainer.getRmContainer());\n        }\n\n        // Update reserved resource\n        if (Resources.greaterThan(resourceCalculator, cluster,\n            request.getTotalReservedResource(), Resources.none())) {\n          incReservedResource(schedulerContainer.getNodePartition(),\n              request.getTotalReservedResource());\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    if (parent !\u003d null \u0026\u0026 applyToParentQueue) {\n      parent.apply(cluster, request);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java",
      "extendedDetails": {}
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,49 @@\n+  public void apply(Resource cluster,\n+      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n+    // Do we need to call parent queue\u0027s apply?\n+    boolean applyToParentQueue \u003d false;\n+\n+    releaseContainers(cluster, request);\n+\n+    try {\n+      writeLock.lock();\n+\n+      if (request.anythingAllocatedOrReserved()) {\n+        ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n+            allocation \u003d request.getFirstAllocatedOrReservedContainer();\n+        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n+            schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n+\n+        // Do not modify queue when allocation from reserved container\n+        if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n+          // Only invoke apply() of ParentQueue when new allocation /\n+          // reservation happen.\n+          applyToParentQueue \u003d true;\n+          // Book-keeping\n+          // Note: Update headroom to account for current allocation too...\n+          allocateResource(cluster,\n+              schedulerContainer.getSchedulerApplicationAttempt(),\n+              allocation.getAllocatedOrReservedResource(),\n+              schedulerContainer.getNodePartition(),\n+              schedulerContainer.getRmContainer(),\n+              allocation.isIncreasedAllocation());\n+          orderingPolicy.containerAllocated(\n+              schedulerContainer.getSchedulerApplicationAttempt(),\n+              schedulerContainer.getRmContainer());\n+        }\n+\n+        // Update reserved resource\n+        if (Resources.greaterThan(resourceCalculator, cluster,\n+            request.getTotalReservedResource(), Resources.none())) {\n+          incReservedResource(schedulerContainer.getNodePartition(),\n+              request.getTotalReservedResource());\n+        }\n+      }\n+    } finally {\n+      writeLock.unlock();\n+    }\n+\n+    if (parent !\u003d null \u0026\u0026 applyToParentQueue) {\n+      parent.apply(cluster, request);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void apply(Resource cluster,\n      ResourceCommitRequest\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e request) {\n    // Do we need to call parent queue\u0027s apply?\n    boolean applyToParentQueue \u003d false;\n\n    releaseContainers(cluster, request);\n\n    try {\n      writeLock.lock();\n\n      if (request.anythingAllocatedOrReserved()) {\n        ContainerAllocationProposal\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            allocation \u003d request.getFirstAllocatedOrReservedContainer();\n        SchedulerContainer\u003cFiCaSchedulerApp, FiCaSchedulerNode\u003e\n            schedulerContainer \u003d allocation.getAllocatedOrReservedContainer();\n\n        // Do not modify queue when allocation from reserved container\n        if (allocation.getAllocateFromReservedContainer() \u003d\u003d null) {\n          // Only invoke apply() of ParentQueue when new allocation /\n          // reservation happen.\n          applyToParentQueue \u003d true;\n          // Book-keeping\n          // Note: Update headroom to account for current allocation too...\n          allocateResource(cluster,\n              schedulerContainer.getSchedulerApplicationAttempt(),\n              allocation.getAllocatedOrReservedResource(),\n              schedulerContainer.getNodePartition(),\n              schedulerContainer.getRmContainer(),\n              allocation.isIncreasedAllocation());\n          orderingPolicy.containerAllocated(\n              schedulerContainer.getSchedulerApplicationAttempt(),\n              schedulerContainer.getRmContainer());\n        }\n\n        // Update reserved resource\n        if (Resources.greaterThan(resourceCalculator, cluster,\n            request.getTotalReservedResource(), Resources.none())) {\n          incReservedResource(schedulerContainer.getNodePartition(),\n              request.getTotalReservedResource());\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n\n    if (parent !\u003d null \u0026\u0026 applyToParentQueue) {\n      parent.apply(cluster, request);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/LeafQueue.java"
    }
  }
}