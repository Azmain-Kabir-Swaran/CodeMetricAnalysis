{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Stat.java",
  "functionName": "parseExecResult",
  "functionId": "parseExecResult___lines-BufferedReader",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Stat.java",
  "functionStartLine": 114,
  "functionEndLine": 173,
  "numCommitsSeen": 6,
  "timeTaken": 1154,
  "changeHistory": [
    "761d44f9003beb9961e4de735948b3a9ad521dfd",
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875"
  ],
  "changeHistoryShort": {
    "761d44f9003beb9961e4de735948b3a9ad521dfd": "Ybodychange",
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": "Yintroduced"
  },
  "changeHistoryDetails": {
    "761d44f9003beb9961e4de735948b3a9ad521dfd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10866. RawLocalFileSystem fails to read symlink targets via the stat command when the format of the stat command uses non-curly quotes (yzhang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1612428 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/07/14 4:21 PM",
      "commitName": "761d44f9003beb9961e4de735948b3a9ad521dfd",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "04/09/13 6:46 PM",
      "commitNameOld": "4f4680111143ff50b78c34792ebd452c7fbec504",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 319.9,
      "commitsBetweenForRepo": 2145,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n   protected void parseExecResult(BufferedReader lines) throws IOException {\n     // Reset stat\n     stat \u003d null;\n \n     String line \u003d lines.readLine();\n     if (line \u003d\u003d null) {\n       throw new IOException(\"Unable to stat path: \" + original);\n     }\n     if (line.endsWith(\"No such file or directory\") ||\n         line.endsWith(\"Not a directory\")) {\n       throw new FileNotFoundException(\"File \" + original + \" does not exist\");\n     }\n     if (line.endsWith(\"Too many levels of symbolic links\")) {\n       throw new IOException(\"Possible cyclic loop while following symbolic\" +\n           \" link \" + original);\n     }\n     // 6,symbolic link,6,1373584236,1373584236,lrwxrwxrwx,andrew,andrew,`link\u0027 -\u003e `target\u0027\n+    // OR\n+    // 6,symbolic link,6,1373584236,1373584236,lrwxrwxrwx,andrew,andrew,\u0027link\u0027 -\u003e \u0027target\u0027\n     StringTokenizer tokens \u003d new StringTokenizer(line, \",\");\n     try {\n       long length \u003d Long.parseLong(tokens.nextToken());\n       boolean isDir \u003d tokens.nextToken().equalsIgnoreCase(\"directory\") ? true\n           : false;\n       // Convert from seconds to milliseconds\n       long modTime \u003d Long.parseLong(tokens.nextToken())*1000;\n       long accessTime \u003d Long.parseLong(tokens.nextToken())*1000;\n       String octalPerms \u003d tokens.nextToken();\n       // FreeBSD has extra digits beyond 4, truncate them\n       if (octalPerms.length() \u003e 4) {\n         int len \u003d octalPerms.length();\n         octalPerms \u003d octalPerms.substring(len-4, len);\n       }\n       FsPermission perms \u003d new FsPermission(Short.parseShort(octalPerms, 8));\n       String owner \u003d tokens.nextToken();\n       String group \u003d tokens.nextToken();\n       String symStr \u003d tokens.nextToken();\n       // \u0027notalink\u0027\n-      // \u0027link\u0027 -\u003e `target\u0027\n+      // `link\u0027 -\u003e `target\u0027 OR \u0027link\u0027 -\u003e \u0027target\u0027\n       // \u0027\u0027 -\u003e \u0027\u0027\n       Path symlink \u003d null;\n-      StringTokenizer symTokens \u003d new StringTokenizer(symStr, \"`\");\n-      symTokens.nextToken();\n+      String parts[] \u003d symStr.split(\" -\u003e \");      \n       try {\n-        String target \u003d symTokens.nextToken();\n-        target \u003d target.substring(0, target.length()-1);\n+        String target \u003d parts[1];\n+        target \u003d target.substring(1, target.length()-1);\n         if (!target.isEmpty()) {\n           symlink \u003d new Path(target);\n         }\n-      } catch (NoSuchElementException e) {\n+      } catch (ArrayIndexOutOfBoundsException e) {\n         // null if not a symlink\n       }\n       // Set stat\n       stat \u003d new FileStatus(length, isDir, 1, blockSize, modTime, accessTime,\n           perms, owner, group, symlink, qualified);\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Unexpected stat output: \" + line, e);\n     } catch (NoSuchElementException e) {\n       throw new IOException(\"Unexpected stat output: \" + line, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    // Reset stat\n    stat \u003d null;\n\n    String line \u003d lines.readLine();\n    if (line \u003d\u003d null) {\n      throw new IOException(\"Unable to stat path: \" + original);\n    }\n    if (line.endsWith(\"No such file or directory\") ||\n        line.endsWith(\"Not a directory\")) {\n      throw new FileNotFoundException(\"File \" + original + \" does not exist\");\n    }\n    if (line.endsWith(\"Too many levels of symbolic links\")) {\n      throw new IOException(\"Possible cyclic loop while following symbolic\" +\n          \" link \" + original);\n    }\n    // 6,symbolic link,6,1373584236,1373584236,lrwxrwxrwx,andrew,andrew,`link\u0027 -\u003e `target\u0027\n    // OR\n    // 6,symbolic link,6,1373584236,1373584236,lrwxrwxrwx,andrew,andrew,\u0027link\u0027 -\u003e \u0027target\u0027\n    StringTokenizer tokens \u003d new StringTokenizer(line, \",\");\n    try {\n      long length \u003d Long.parseLong(tokens.nextToken());\n      boolean isDir \u003d tokens.nextToken().equalsIgnoreCase(\"directory\") ? true\n          : false;\n      // Convert from seconds to milliseconds\n      long modTime \u003d Long.parseLong(tokens.nextToken())*1000;\n      long accessTime \u003d Long.parseLong(tokens.nextToken())*1000;\n      String octalPerms \u003d tokens.nextToken();\n      // FreeBSD has extra digits beyond 4, truncate them\n      if (octalPerms.length() \u003e 4) {\n        int len \u003d octalPerms.length();\n        octalPerms \u003d octalPerms.substring(len-4, len);\n      }\n      FsPermission perms \u003d new FsPermission(Short.parseShort(octalPerms, 8));\n      String owner \u003d tokens.nextToken();\n      String group \u003d tokens.nextToken();\n      String symStr \u003d tokens.nextToken();\n      // \u0027notalink\u0027\n      // `link\u0027 -\u003e `target\u0027 OR \u0027link\u0027 -\u003e \u0027target\u0027\n      // \u0027\u0027 -\u003e \u0027\u0027\n      Path symlink \u003d null;\n      String parts[] \u003d symStr.split(\" -\u003e \");      \n      try {\n        String target \u003d parts[1];\n        target \u003d target.substring(1, target.length()-1);\n        if (!target.isEmpty()) {\n          symlink \u003d new Path(target);\n        }\n      } catch (ArrayIndexOutOfBoundsException e) {\n        // null if not a symlink\n      }\n      // Set stat\n      stat \u003d new FileStatus(length, isDir, 1, blockSize, modTime, accessTime,\n          perms, owner, group, symlink, qualified);\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Unexpected stat output: \" + line, e);\n    } catch (NoSuchElementException e) {\n      throw new IOException(\"Unexpected stat output: \" + line, e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Stat.java",
      "extendedDetails": {}
    },
    "fdba5fac263f9bf79fccf566c36bbc42ef67e875": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9652.  RawLocalFs#getFileLinkStatus does not fill in the link owner and mode.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1514088 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/13 4:12 PM",
      "commitName": "fdba5fac263f9bf79fccf566c36bbc42ef67e875",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,59 @@\n+  protected void parseExecResult(BufferedReader lines) throws IOException {\n+    // Reset stat\n+    stat \u003d null;\n+\n+    String line \u003d lines.readLine();\n+    if (line \u003d\u003d null) {\n+      throw new IOException(\"Unable to stat path: \" + original);\n+    }\n+    if (line.endsWith(\"No such file or directory\") ||\n+        line.endsWith(\"Not a directory\")) {\n+      throw new FileNotFoundException(\"File \" + original + \" does not exist\");\n+    }\n+    if (line.endsWith(\"Too many levels of symbolic links\")) {\n+      throw new IOException(\"Possible cyclic loop while following symbolic\" +\n+          \" link \" + original);\n+    }\n+    // 6,symbolic link,6,1373584236,1373584236,lrwxrwxrwx,andrew,andrew,`link\u0027 -\u003e `target\u0027\n+    StringTokenizer tokens \u003d new StringTokenizer(line, \",\");\n+    try {\n+      long length \u003d Long.parseLong(tokens.nextToken());\n+      boolean isDir \u003d tokens.nextToken().equalsIgnoreCase(\"directory\") ? true\n+          : false;\n+      // Convert from seconds to milliseconds\n+      long modTime \u003d Long.parseLong(tokens.nextToken())*1000;\n+      long accessTime \u003d Long.parseLong(tokens.nextToken())*1000;\n+      String octalPerms \u003d tokens.nextToken();\n+      // FreeBSD has extra digits beyond 4, truncate them\n+      if (octalPerms.length() \u003e 4) {\n+        int len \u003d octalPerms.length();\n+        octalPerms \u003d octalPerms.substring(len-4, len);\n+      }\n+      FsPermission perms \u003d new FsPermission(Short.parseShort(octalPerms, 8));\n+      String owner \u003d tokens.nextToken();\n+      String group \u003d tokens.nextToken();\n+      String symStr \u003d tokens.nextToken();\n+      // \u0027notalink\u0027\n+      // \u0027link\u0027 -\u003e `target\u0027\n+      // \u0027\u0027 -\u003e \u0027\u0027\n+      Path symlink \u003d null;\n+      StringTokenizer symTokens \u003d new StringTokenizer(symStr, \"`\");\n+      symTokens.nextToken();\n+      try {\n+        String target \u003d symTokens.nextToken();\n+        target \u003d target.substring(0, target.length()-1);\n+        if (!target.isEmpty()) {\n+          symlink \u003d new Path(target);\n+        }\n+      } catch (NoSuchElementException e) {\n+        // null if not a symlink\n+      }\n+      // Set stat\n+      stat \u003d new FileStatus(length, isDir, 1, blockSize, modTime, accessTime,\n+          perms, owner, group, symlink, qualified);\n+    } catch (NumberFormatException e) {\n+      throw new IOException(\"Unexpected stat output: \" + line, e);\n+    } catch (NoSuchElementException e) {\n+      throw new IOException(\"Unexpected stat output: \" + line, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void parseExecResult(BufferedReader lines) throws IOException {\n    // Reset stat\n    stat \u003d null;\n\n    String line \u003d lines.readLine();\n    if (line \u003d\u003d null) {\n      throw new IOException(\"Unable to stat path: \" + original);\n    }\n    if (line.endsWith(\"No such file or directory\") ||\n        line.endsWith(\"Not a directory\")) {\n      throw new FileNotFoundException(\"File \" + original + \" does not exist\");\n    }\n    if (line.endsWith(\"Too many levels of symbolic links\")) {\n      throw new IOException(\"Possible cyclic loop while following symbolic\" +\n          \" link \" + original);\n    }\n    // 6,symbolic link,6,1373584236,1373584236,lrwxrwxrwx,andrew,andrew,`link\u0027 -\u003e `target\u0027\n    StringTokenizer tokens \u003d new StringTokenizer(line, \",\");\n    try {\n      long length \u003d Long.parseLong(tokens.nextToken());\n      boolean isDir \u003d tokens.nextToken().equalsIgnoreCase(\"directory\") ? true\n          : false;\n      // Convert from seconds to milliseconds\n      long modTime \u003d Long.parseLong(tokens.nextToken())*1000;\n      long accessTime \u003d Long.parseLong(tokens.nextToken())*1000;\n      String octalPerms \u003d tokens.nextToken();\n      // FreeBSD has extra digits beyond 4, truncate them\n      if (octalPerms.length() \u003e 4) {\n        int len \u003d octalPerms.length();\n        octalPerms \u003d octalPerms.substring(len-4, len);\n      }\n      FsPermission perms \u003d new FsPermission(Short.parseShort(octalPerms, 8));\n      String owner \u003d tokens.nextToken();\n      String group \u003d tokens.nextToken();\n      String symStr \u003d tokens.nextToken();\n      // \u0027notalink\u0027\n      // \u0027link\u0027 -\u003e `target\u0027\n      // \u0027\u0027 -\u003e \u0027\u0027\n      Path symlink \u003d null;\n      StringTokenizer symTokens \u003d new StringTokenizer(symStr, \"`\");\n      symTokens.nextToken();\n      try {\n        String target \u003d symTokens.nextToken();\n        target \u003d target.substring(0, target.length()-1);\n        if (!target.isEmpty()) {\n          symlink \u003d new Path(target);\n        }\n      } catch (NoSuchElementException e) {\n        // null if not a symlink\n      }\n      // Set stat\n      stat \u003d new FileStatus(length, isDir, 1, blockSize, modTime, accessTime,\n          perms, owner, group, symlink, qualified);\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Unexpected stat output: \" + line, e);\n    } catch (NoSuchElementException e) {\n      throw new IOException(\"Unexpected stat output: \" + line, e);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Stat.java"
    }
  }
}