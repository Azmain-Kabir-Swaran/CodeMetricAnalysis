{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DataChecksum.java",
  "functionName": "verifyChunked",
  "functionId": "verifyChunked___type-Type(modifiers-final)__algorithm-Checksum(modifiers-final)__data-ByteBuffer(modifiers-final)__bytesPerCrc-int(modifiers-final)__crcs-ByteBuffer(modifiers-final)__filename-String(modifiers-final)__basePos-long(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
  "functionStartLine": 388,
  "functionEndLine": 431,
  "numCommitsSeen": 43,
  "timeTaken": 3107,
  "changeHistory": [
    "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
    "ab638e77b811d9592470f7d342cd11a66efbbf0d",
    "bd79a4b9263726f4642c94bff689dbc109592a70",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "22fa0e43e37478707963a86f66e95d2a6dddf812"
  ],
  "changeHistoryShort": {
    "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Yparametermetachange)",
    "ab638e77b811d9592470f7d342cd11a66efbbf0d": "Ybodychange",
    "bd79a4b9263726f4642c94bff689dbc109592a70": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "22fa0e43e37478707963a86f66e95d2a6dddf812": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.\n",
      "commitDate": "18/02/16 11:47 AM",
      "commitName": "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.\n",
          "commitDate": "18/02/16 11:47 AM",
          "commitName": "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 1:49 PM",
          "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 127.96,
          "commitsBetweenForRepo": 878,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,44 @@\n-  private void verifyChunkedSums(\n-      byte[] data, int dataOff, int dataLen,\n-      byte[] checksums, int checksumsOff, String fileName,\n-      long basePos) throws ChecksumException {\n-    if (type.size \u003d\u003d 0) return;\n+  static void verifyChunked(final Type type, final Checksum algorithm,\n+      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n+      final String filename, final long basePos) throws ChecksumException {\n+    final byte[] bytes \u003d new byte[bytesPerCrc];\n+    final int dataOffset \u003d data.position();\n+    final int dataLength \u003d data.remaining();\n+    data.mark();\n+    crcs.mark();\n \n-    if (NativeCrc32.isAvailable()) {\n-      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n-          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n-      return;\n-    }\n-    \n-    int remaining \u003d dataLen;\n-    int dataPos \u003d 0;\n-    while (remaining \u003e 0) {\n-      int n \u003d Math.min(remaining, bytesPerChecksum);\n-      \n-      summer.reset();\n-      summer.update(data, dataOff + dataPos, n);\n-      dataPos +\u003d n;\n-      remaining -\u003d n;\n-      \n-      int calculated \u003d (int)summer.getValue();\n-      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n-        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n-        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n-        checksums[checksumsOff + 3] \u0026 0xff;\n-      checksumsOff +\u003d 4;\n-      if (calculated !\u003d stored) {\n-        long errPos \u003d basePos + dataPos - n;\n-        throw new ChecksumException(\n-            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n-            \" exp: \" + stored + \" got: \" + calculated, errPos);\n+    try {\n+      int i \u003d 0;\n+      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n+        data.get(bytes);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, bytesPerCrc);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n       }\n+\n+      final int remainder \u003d dataLength - i;\n+      if (remainder \u003e 0) {\n+        data.get(bytes, 0, remainder);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, remainder);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n+      }\n+    } finally {\n+      data.reset();\n+      crcs.reset();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyChunked(final Type type, final Checksum algorithm,\n      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n      final String filename, final long basePos) throws ChecksumException {\n    final byte[] bytes \u003d new byte[bytesPerCrc];\n    final int dataOffset \u003d data.position();\n    final int dataLength \u003d data.remaining();\n    data.mark();\n    crcs.mark();\n\n    try {\n      int i \u003d 0;\n      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n        data.get(bytes);\n        algorithm.reset();\n        algorithm.update(bytes, 0, bytesPerCrc);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n\n      final int remainder \u003d dataLength - i;\n      if (remainder \u003e 0) {\n        data.get(bytes, 0, remainder);\n        algorithm.reset();\n        algorithm.update(bytes, 0, remainder);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n    } finally {\n      data.reset();\n      crcs.reset();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
          "extendedDetails": {
            "oldValue": "verifyChunkedSums",
            "newValue": "verifyChunked"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.\n",
          "commitDate": "18/02/16 11:47 AM",
          "commitName": "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 1:49 PM",
          "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 127.96,
          "commitsBetweenForRepo": 878,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,44 @@\n-  private void verifyChunkedSums(\n-      byte[] data, int dataOff, int dataLen,\n-      byte[] checksums, int checksumsOff, String fileName,\n-      long basePos) throws ChecksumException {\n-    if (type.size \u003d\u003d 0) return;\n+  static void verifyChunked(final Type type, final Checksum algorithm,\n+      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n+      final String filename, final long basePos) throws ChecksumException {\n+    final byte[] bytes \u003d new byte[bytesPerCrc];\n+    final int dataOffset \u003d data.position();\n+    final int dataLength \u003d data.remaining();\n+    data.mark();\n+    crcs.mark();\n \n-    if (NativeCrc32.isAvailable()) {\n-      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n-          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n-      return;\n-    }\n-    \n-    int remaining \u003d dataLen;\n-    int dataPos \u003d 0;\n-    while (remaining \u003e 0) {\n-      int n \u003d Math.min(remaining, bytesPerChecksum);\n-      \n-      summer.reset();\n-      summer.update(data, dataOff + dataPos, n);\n-      dataPos +\u003d n;\n-      remaining -\u003d n;\n-      \n-      int calculated \u003d (int)summer.getValue();\n-      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n-        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n-        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n-        checksums[checksumsOff + 3] \u0026 0xff;\n-      checksumsOff +\u003d 4;\n-      if (calculated !\u003d stored) {\n-        long errPos \u003d basePos + dataPos - n;\n-        throw new ChecksumException(\n-            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n-            \" exp: \" + stored + \" got: \" + calculated, errPos);\n+    try {\n+      int i \u003d 0;\n+      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n+        data.get(bytes);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, bytesPerCrc);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n       }\n+\n+      final int remainder \u003d dataLength - i;\n+      if (remainder \u003e 0) {\n+        data.get(bytes, 0, remainder);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, remainder);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n+      }\n+    } finally {\n+      data.reset();\n+      crcs.reset();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyChunked(final Type type, final Checksum algorithm,\n      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n      final String filename, final long basePos) throws ChecksumException {\n    final byte[] bytes \u003d new byte[bytesPerCrc];\n    final int dataOffset \u003d data.position();\n    final int dataLength \u003d data.remaining();\n    data.mark();\n    crcs.mark();\n\n    try {\n      int i \u003d 0;\n      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n        data.get(bytes);\n        algorithm.reset();\n        algorithm.update(bytes, 0, bytesPerCrc);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n\n      final int remainder \u003d dataLength - i;\n      if (remainder \u003e 0) {\n        data.get(bytes, 0, remainder);\n        algorithm.reset();\n        algorithm.update(bytes, 0, remainder);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n    } finally {\n      data.reset();\n      crcs.reset();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
          "extendedDetails": {
            "oldValue": "[data-byte[], dataOff-int, dataLen-int, checksums-byte[], checksumsOff-int, fileName-String, basePos-long]",
            "newValue": "[type-Type(modifiers-final), algorithm-Checksum(modifiers-final), data-ByteBuffer(modifiers-final), bytesPerCrc-int(modifiers-final), crcs-ByteBuffer(modifiers-final), filename-String(modifiers-final), basePos-long(modifiers-final)]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.\n",
          "commitDate": "18/02/16 11:47 AM",
          "commitName": "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 1:49 PM",
          "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 127.96,
          "commitsBetweenForRepo": 878,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,44 @@\n-  private void verifyChunkedSums(\n-      byte[] data, int dataOff, int dataLen,\n-      byte[] checksums, int checksumsOff, String fileName,\n-      long basePos) throws ChecksumException {\n-    if (type.size \u003d\u003d 0) return;\n+  static void verifyChunked(final Type type, final Checksum algorithm,\n+      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n+      final String filename, final long basePos) throws ChecksumException {\n+    final byte[] bytes \u003d new byte[bytesPerCrc];\n+    final int dataOffset \u003d data.position();\n+    final int dataLength \u003d data.remaining();\n+    data.mark();\n+    crcs.mark();\n \n-    if (NativeCrc32.isAvailable()) {\n-      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n-          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n-      return;\n-    }\n-    \n-    int remaining \u003d dataLen;\n-    int dataPos \u003d 0;\n-    while (remaining \u003e 0) {\n-      int n \u003d Math.min(remaining, bytesPerChecksum);\n-      \n-      summer.reset();\n-      summer.update(data, dataOff + dataPos, n);\n-      dataPos +\u003d n;\n-      remaining -\u003d n;\n-      \n-      int calculated \u003d (int)summer.getValue();\n-      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n-        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n-        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n-        checksums[checksumsOff + 3] \u0026 0xff;\n-      checksumsOff +\u003d 4;\n-      if (calculated !\u003d stored) {\n-        long errPos \u003d basePos + dataPos - n;\n-        throw new ChecksumException(\n-            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n-            \" exp: \" + stored + \" got: \" + calculated, errPos);\n+    try {\n+      int i \u003d 0;\n+      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n+        data.get(bytes);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, bytesPerCrc);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n       }\n+\n+      final int remainder \u003d dataLength - i;\n+      if (remainder \u003e 0) {\n+        data.get(bytes, 0, remainder);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, remainder);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n+      }\n+    } finally {\n+      data.reset();\n+      crcs.reset();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyChunked(final Type type, final Checksum algorithm,\n      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n      final String filename, final long basePos) throws ChecksumException {\n    final byte[] bytes \u003d new byte[bytesPerCrc];\n    final int dataOffset \u003d data.position();\n    final int dataLength \u003d data.remaining();\n    data.mark();\n    crcs.mark();\n\n    try {\n      int i \u003d 0;\n      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n        data.get(bytes);\n        algorithm.reset();\n        algorithm.update(bytes, 0, bytesPerCrc);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n\n      final int remainder \u003d dataLength - i;\n      if (remainder \u003e 0) {\n        data.get(bytes, 0, remainder);\n        algorithm.reset();\n        algorithm.update(bytes, 0, remainder);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n    } finally {\n      data.reset();\n      crcs.reset();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.\n",
          "commitDate": "18/02/16 11:47 AM",
          "commitName": "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 1:49 PM",
          "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 127.96,
          "commitsBetweenForRepo": 878,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,44 @@\n-  private void verifyChunkedSums(\n-      byte[] data, int dataOff, int dataLen,\n-      byte[] checksums, int checksumsOff, String fileName,\n-      long basePos) throws ChecksumException {\n-    if (type.size \u003d\u003d 0) return;\n+  static void verifyChunked(final Type type, final Checksum algorithm,\n+      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n+      final String filename, final long basePos) throws ChecksumException {\n+    final byte[] bytes \u003d new byte[bytesPerCrc];\n+    final int dataOffset \u003d data.position();\n+    final int dataLength \u003d data.remaining();\n+    data.mark();\n+    crcs.mark();\n \n-    if (NativeCrc32.isAvailable()) {\n-      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n-          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n-      return;\n-    }\n-    \n-    int remaining \u003d dataLen;\n-    int dataPos \u003d 0;\n-    while (remaining \u003e 0) {\n-      int n \u003d Math.min(remaining, bytesPerChecksum);\n-      \n-      summer.reset();\n-      summer.update(data, dataOff + dataPos, n);\n-      dataPos +\u003d n;\n-      remaining -\u003d n;\n-      \n-      int calculated \u003d (int)summer.getValue();\n-      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n-        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n-        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n-        checksums[checksumsOff + 3] \u0026 0xff;\n-      checksumsOff +\u003d 4;\n-      if (calculated !\u003d stored) {\n-        long errPos \u003d basePos + dataPos - n;\n-        throw new ChecksumException(\n-            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n-            \" exp: \" + stored + \" got: \" + calculated, errPos);\n+    try {\n+      int i \u003d 0;\n+      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n+        data.get(bytes);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, bytesPerCrc);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n       }\n+\n+      final int remainder \u003d dataLength - i;\n+      if (remainder \u003e 0) {\n+        data.get(bytes, 0, remainder);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, remainder);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n+      }\n+    } finally {\n+      data.reset();\n+      crcs.reset();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyChunked(final Type type, final Checksum algorithm,\n      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n      final String filename, final long basePos) throws ChecksumException {\n    final byte[] bytes \u003d new byte[bytesPerCrc];\n    final int dataOffset \u003d data.position();\n    final int dataLength \u003d data.remaining();\n    data.mark();\n    crcs.mark();\n\n    try {\n      int i \u003d 0;\n      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n        data.get(bytes);\n        algorithm.reset();\n        algorithm.update(bytes, 0, bytesPerCrc);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n\n      final int remainder \u003d dataLength - i;\n      if (remainder \u003e 0) {\n        data.get(bytes, 0, remainder);\n        algorithm.reset();\n        algorithm.update(bytes, 0, remainder);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n    } finally {\n      data.reset();\n      crcs.reset();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "HADOOP-10865. Add a Crc32 chunked verification benchmark for both directly and non-directly buffer cases.\n",
          "commitDate": "18/02/16 11:47 AM",
          "commitName": "bbfaf3c2712c9ba82b0f8423bdeb314bf505a692",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "13/10/15 1:49 PM",
          "commitNameOld": "c59af2fdf8f7f53117c626a895dab7fd78cf08ec",
          "commitAuthorOld": "Steve Loughran",
          "daysBetweenCommits": 127.96,
          "commitsBetweenForRepo": 878,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,44 @@\n-  private void verifyChunkedSums(\n-      byte[] data, int dataOff, int dataLen,\n-      byte[] checksums, int checksumsOff, String fileName,\n-      long basePos) throws ChecksumException {\n-    if (type.size \u003d\u003d 0) return;\n+  static void verifyChunked(final Type type, final Checksum algorithm,\n+      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n+      final String filename, final long basePos) throws ChecksumException {\n+    final byte[] bytes \u003d new byte[bytesPerCrc];\n+    final int dataOffset \u003d data.position();\n+    final int dataLength \u003d data.remaining();\n+    data.mark();\n+    crcs.mark();\n \n-    if (NativeCrc32.isAvailable()) {\n-      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n-          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n-      return;\n-    }\n-    \n-    int remaining \u003d dataLen;\n-    int dataPos \u003d 0;\n-    while (remaining \u003e 0) {\n-      int n \u003d Math.min(remaining, bytesPerChecksum);\n-      \n-      summer.reset();\n-      summer.update(data, dataOff + dataPos, n);\n-      dataPos +\u003d n;\n-      remaining -\u003d n;\n-      \n-      int calculated \u003d (int)summer.getValue();\n-      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n-        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n-        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n-        checksums[checksumsOff + 3] \u0026 0xff;\n-      checksumsOff +\u003d 4;\n-      if (calculated !\u003d stored) {\n-        long errPos \u003d basePos + dataPos - n;\n-        throw new ChecksumException(\n-            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n-            \" exp: \" + stored + \" got: \" + calculated, errPos);\n+    try {\n+      int i \u003d 0;\n+      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n+        data.get(bytes);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, bytesPerCrc);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n       }\n+\n+      final int remainder \u003d dataLength - i;\n+      if (remainder \u003e 0) {\n+        data.get(bytes, 0, remainder);\n+        algorithm.reset();\n+        algorithm.update(bytes, 0, remainder);\n+        final int computed \u003d (int)algorithm.getValue();\n+        final int expected \u003d crcs.getInt();\n+\n+        if (computed !\u003d expected) {\n+          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n+          throwChecksumException(type, algorithm, filename, errPos, expected,\n+              computed);\n+        }\n+      }\n+    } finally {\n+      data.reset();\n+      crcs.reset();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void verifyChunked(final Type type, final Checksum algorithm,\n      final ByteBuffer data, final int bytesPerCrc, final ByteBuffer crcs,\n      final String filename, final long basePos) throws ChecksumException {\n    final byte[] bytes \u003d new byte[bytesPerCrc];\n    final int dataOffset \u003d data.position();\n    final int dataLength \u003d data.remaining();\n    data.mark();\n    crcs.mark();\n\n    try {\n      int i \u003d 0;\n      for(final int n \u003d dataLength - bytesPerCrc + 1; i \u003c n; i +\u003d bytesPerCrc) {\n        data.get(bytes);\n        algorithm.reset();\n        algorithm.update(bytes, 0, bytesPerCrc);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - bytesPerCrc;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n\n      final int remainder \u003d dataLength - i;\n      if (remainder \u003e 0) {\n        data.get(bytes, 0, remainder);\n        algorithm.reset();\n        algorithm.update(bytes, 0, remainder);\n        final int computed \u003d (int)algorithm.getValue();\n        final int expected \u003d crcs.getInt();\n\n        if (computed !\u003d expected) {\n          long errPos \u003d basePos + data.position() - dataOffset - remainder;\n          throwChecksumException(type, algorithm, filename, errPos, expected,\n              computed);\n        }\n      }\n    } finally {\n      data.reset();\n      crcs.reset();\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
          "extendedDetails": {
            "oldValue": "[data-byte[], dataOff-int, dataLen-int, checksums-byte[], checksumsOff-int, fileName-String, basePos-long]",
            "newValue": "[type-Type(modifiers-final), algorithm-Checksum(modifiers-final), data-ByteBuffer(modifiers-final), bytesPerCrc-int(modifiers-final), crcs-ByteBuffer(modifiers-final), filename-String(modifiers-final), basePos-long(modifiers-final)]"
          }
        }
      ]
    },
    "ab638e77b811d9592470f7d342cd11a66efbbf0d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6865. Byte array native checksumming on client side. Contributed by James Thomas.\n",
      "commitDate": "28/08/14 4:44 PM",
      "commitName": "ab638e77b811d9592470f7d342cd11a66efbbf0d",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "18/08/14 11:02 AM",
      "commitNameOld": "e446497cd1e9b892659e9cfb79d37f33a4e39de0",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 10.24,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   private void verifyChunkedSums(\n       byte[] data, int dataOff, int dataLen,\n       byte[] checksums, int checksumsOff, String fileName,\n       long basePos) throws ChecksumException {\n+    if (type.size \u003d\u003d 0) return;\n \n     if (NativeCrc32.isAvailable()) {\n       NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n           checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n       return;\n     }\n     \n     int remaining \u003d dataLen;\n     int dataPos \u003d 0;\n     while (remaining \u003e 0) {\n       int n \u003d Math.min(remaining, bytesPerChecksum);\n       \n       summer.reset();\n       summer.update(data, dataOff + dataPos, n);\n       dataPos +\u003d n;\n       remaining -\u003d n;\n       \n       int calculated \u003d (int)summer.getValue();\n       int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n         (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n         (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n         checksums[checksumsOff + 3] \u0026 0xff;\n       checksumsOff +\u003d 4;\n       if (calculated !\u003d stored) {\n         long errPos \u003d basePos + dataPos - n;\n         throw new ChecksumException(\n             \"Checksum error: \"+ fileName + \" at \"+ errPos +\n             \" exp: \" + stored + \" got: \" + calculated, errPos);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyChunkedSums(\n      byte[] data, int dataOff, int dataLen,\n      byte[] checksums, int checksumsOff, String fileName,\n      long basePos) throws ChecksumException {\n    if (type.size \u003d\u003d 0) return;\n\n    if (NativeCrc32.isAvailable()) {\n      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n      return;\n    }\n    \n    int remaining \u003d dataLen;\n    int dataPos \u003d 0;\n    while (remaining \u003e 0) {\n      int n \u003d Math.min(remaining, bytesPerChecksum);\n      \n      summer.reset();\n      summer.update(data, dataOff + dataPos, n);\n      dataPos +\u003d n;\n      remaining -\u003d n;\n      \n      int calculated \u003d (int)summer.getValue();\n      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n        checksums[checksumsOff + 3] \u0026 0xff;\n      checksumsOff +\u003d 4;\n      if (calculated !\u003d stored) {\n        long errPos \u003d basePos + dataPos - n;\n        throw new ChecksumException(\n            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n            \" exp: \" + stored + \" got: \" + calculated, errPos);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {}
    },
    "bd79a4b9263726f4642c94bff689dbc109592a70": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10838. Byte array native checksumming. Contributed by James Thomas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617875 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/08/14 9:29 PM",
      "commitName": "bd79a4b9263726f4642c94bff689dbc109592a70",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "07/07/14 11:10 AM",
      "commitNameOld": "55e7ddf514b45bb45f2cfa1995c0d4b786ae0df3",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 37.43,
      "commitsBetweenForRepo": 290,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,35 @@\n   private void verifyChunkedSums(\n       byte[] data, int dataOff, int dataLen,\n       byte[] checksums, int checksumsOff, String fileName,\n       long basePos) throws ChecksumException {\n+\n+    if (NativeCrc32.isAvailable()) {\n+      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n+          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n+      return;\n+    }\n     \n     int remaining \u003d dataLen;\n     int dataPos \u003d 0;\n     while (remaining \u003e 0) {\n       int n \u003d Math.min(remaining, bytesPerChecksum);\n       \n       summer.reset();\n       summer.update(data, dataOff + dataPos, n);\n       dataPos +\u003d n;\n       remaining -\u003d n;\n       \n       int calculated \u003d (int)summer.getValue();\n       int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n         (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n         (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n         checksums[checksumsOff + 3] \u0026 0xff;\n       checksumsOff +\u003d 4;\n       if (calculated !\u003d stored) {\n         long errPos \u003d basePos + dataPos - n;\n         throw new ChecksumException(\n             \"Checksum error: \"+ fileName + \" at \"+ errPos +\n             \" exp: \" + stored + \" got: \" + calculated, errPos);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyChunkedSums(\n      byte[] data, int dataOff, int dataLen,\n      byte[] checksums, int checksumsOff, String fileName,\n      long basePos) throws ChecksumException {\n\n    if (NativeCrc32.isAvailable()) {\n      NativeCrc32.verifyChunkedSumsByteArray(bytesPerChecksum, type.id,\n          checksums, checksumsOff, data, dataOff, dataLen, fileName, basePos);\n      return;\n    }\n    \n    int remaining \u003d dataLen;\n    int dataPos \u003d 0;\n    while (remaining \u003e 0) {\n      int n \u003d Math.min(remaining, bytesPerChecksum);\n      \n      summer.reset();\n      summer.update(data, dataOff + dataPos, n);\n      dataPos +\u003d n;\n      remaining -\u003d n;\n      \n      int calculated \u003d (int)summer.getValue();\n      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n        checksums[checksumsOff + 3] \u0026 0xff;\n      checksumsOff +\u003d 4;\n      if (calculated !\u003d stored) {\n        long errPos \u003d basePos + dataPos - n;\n        throw new ChecksumException(\n            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n            \" exp: \" + stored + \" got: \" + calculated, errPos);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void verifyChunkedSums(\n      byte[] data, int dataOff, int dataLen,\n      byte[] checksums, int checksumsOff, String fileName,\n      long basePos) throws ChecksumException {\n    \n    int remaining \u003d dataLen;\n    int dataPos \u003d 0;\n    while (remaining \u003e 0) {\n      int n \u003d Math.min(remaining, bytesPerChecksum);\n      \n      summer.reset();\n      summer.update(data, dataOff + dataPos, n);\n      dataPos +\u003d n;\n      remaining -\u003d n;\n      \n      int calculated \u003d (int)summer.getValue();\n      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n        checksums[checksumsOff + 3] \u0026 0xff;\n      checksumsOff +\u003d 4;\n      if (calculated !\u003d stored) {\n        long errPos \u003d basePos + dataPos - n;\n        throw new ChecksumException(\n            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n            \" exp: \" + stored + \" got: \" + calculated, errPos);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void verifyChunkedSums(\n      byte[] data, int dataOff, int dataLen,\n      byte[] checksums, int checksumsOff, String fileName,\n      long basePos) throws ChecksumException {\n    \n    int remaining \u003d dataLen;\n    int dataPos \u003d 0;\n    while (remaining \u003e 0) {\n      int n \u003d Math.min(remaining, bytesPerChecksum);\n      \n      summer.reset();\n      summer.update(data, dataOff + dataPos, n);\n      dataPos +\u003d n;\n      remaining -\u003d n;\n      \n      int calculated \u003d (int)summer.getValue();\n      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n        checksums[checksumsOff + 3] \u0026 0xff;\n      checksumsOff +\u003d 4;\n      if (calculated !\u003d stored) {\n        long errPos \u003d basePos + dataPos - n;\n        throw new ChecksumException(\n            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n            \" exp: \" + stored + \" got: \" + calculated, errPos);\n      }\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/DataChecksum.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/DataChecksum.java"
      }
    },
    "22fa0e43e37478707963a86f66e95d2a6dddf812": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7444. Add Checksum API to verify and calculate checksums \"in bulk\". Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1146111 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/07/11 9:12 AM",
      "commitName": "22fa0e43e37478707963a86f66e95d2a6dddf812",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,29 @@\n+  private void verifyChunkedSums(\n+      byte[] data, int dataOff, int dataLen,\n+      byte[] checksums, int checksumsOff, String fileName,\n+      long basePos) throws ChecksumException {\n+    \n+    int remaining \u003d dataLen;\n+    int dataPos \u003d 0;\n+    while (remaining \u003e 0) {\n+      int n \u003d Math.min(remaining, bytesPerChecksum);\n+      \n+      summer.reset();\n+      summer.update(data, dataOff + dataPos, n);\n+      dataPos +\u003d n;\n+      remaining -\u003d n;\n+      \n+      int calculated \u003d (int)summer.getValue();\n+      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n+        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n+        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n+        checksums[checksumsOff + 3] \u0026 0xff;\n+      checksumsOff +\u003d 4;\n+      if (calculated !\u003d stored) {\n+        long errPos \u003d basePos + dataPos - n;\n+        throw new ChecksumException(\n+            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n+            \" exp: \" + stored + \" got: \" + calculated, errPos);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void verifyChunkedSums(\n      byte[] data, int dataOff, int dataLen,\n      byte[] checksums, int checksumsOff, String fileName,\n      long basePos) throws ChecksumException {\n    \n    int remaining \u003d dataLen;\n    int dataPos \u003d 0;\n    while (remaining \u003e 0) {\n      int n \u003d Math.min(remaining, bytesPerChecksum);\n      \n      summer.reset();\n      summer.update(data, dataOff + dataPos, n);\n      dataPos +\u003d n;\n      remaining -\u003d n;\n      \n      int calculated \u003d (int)summer.getValue();\n      int stored \u003d (checksums[checksumsOff] \u003c\u003c 24 \u0026 0xff000000) |\n        (checksums[checksumsOff + 1] \u003c\u003c 16 \u0026 0xff0000) |\n        (checksums[checksumsOff + 2] \u003c\u003c 8 \u0026 0xff00) |\n        checksums[checksumsOff + 3] \u0026 0xff;\n      checksumsOff +\u003d 4;\n      if (calculated !\u003d stored) {\n        long errPos \u003d basePos + dataPos - n;\n        throw new ChecksumException(\n            \"Checksum error: \"+ fileName + \" at \"+ errPos +\n            \" exp: \" + stored + \" got: \" + calculated, errPos);\n      }\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/util/DataChecksum.java"
    }
  }
}