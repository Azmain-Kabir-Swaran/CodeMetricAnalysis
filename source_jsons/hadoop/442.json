{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SnapshotDiffReportGenerator.java",
  "functionName": "generateReportList",
  "functionId": "generateReportList",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/SnapshotDiffReportGenerator.java",
  "functionStartLine": 178,
  "functionEndLine": 218,
  "numCommitsSeen": 1,
  "timeTaken": 1541,
  "changeHistory": [
    "b1c7654ee40b372ed777525a42981c7cf55b5c72"
  ],
  "changeHistoryShort": {
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1c7654ee40b372ed777525a42981c7cf55b5c72": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12594. snapshotDiff fails if the report exceeds the RPC response limit. Contributed by Shashikant Banerjee\n",
      "commitDate": "30/11/17 12:18 PM",
      "commitName": "b1c7654ee40b372ed777525a42981c7cf55b5c72",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,41 @@\n+  public void generateReportList() {\n+    mlist.sort(INODE_COMPARATOR);\n+    for (DiffReportListingEntry created : clist) {\n+      ChildrenDiff entry \u003d dirDiffMap.get(created.getDirId());\n+      if (entry \u003d\u003d null) {\n+        List\u003cDiffReportListingEntry\u003e createdList \u003d new ChunkedArrayList\u003c\u003e();\n+        createdList.add(created);\n+        ChildrenDiff list \u003d new ChildrenDiff(createdList, null);\n+        dirDiffMap.put(created.getDirId(), list);\n+      } else {\n+        dirDiffMap.get(created.getDirId()).getCreatedList().add(created);\n+      }\n+      if (created.isReference()) {\n+        RenameEntry renameEntry \u003d getEntry(created.getFileId());\n+        if (renameEntry.getTargetPath() !\u003d null) {\n+          renameEntry.setTarget(created.getSourcePath());\n+        }\n+      }\n+    }\n+    for (DiffReportListingEntry deleted : dlist) {\n+      ChildrenDiff entry \u003d dirDiffMap.get(deleted.getDirId());\n+      if (entry \u003d\u003d null || (entry.getDeletedList().isEmpty())) {\n+        ChildrenDiff list;\n+        List\u003cDiffReportListingEntry\u003e deletedList \u003d new ChunkedArrayList\u003c\u003e();\n+        deletedList.add(deleted);\n+        if (entry \u003d\u003d null) {\n+          list \u003d new ChildrenDiff(null, deletedList);\n+        } else {\n+          list \u003d new ChildrenDiff(entry.getCreatedList(), deletedList);\n+        }\n+        dirDiffMap.put(deleted.getDirId(), list);\n+      } else {\n+        entry.getDeletedList().add(deleted);\n+      }\n+      if (deleted.isReference()) {\n+        RenameEntry renameEntry \u003d getEntry(deleted.getFileId());\n+        renameEntry.setTarget(deleted.getTargetPath());\n+        renameEntry.setSource(deleted.getSourcePath());\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void generateReportList() {\n    mlist.sort(INODE_COMPARATOR);\n    for (DiffReportListingEntry created : clist) {\n      ChildrenDiff entry \u003d dirDiffMap.get(created.getDirId());\n      if (entry \u003d\u003d null) {\n        List\u003cDiffReportListingEntry\u003e createdList \u003d new ChunkedArrayList\u003c\u003e();\n        createdList.add(created);\n        ChildrenDiff list \u003d new ChildrenDiff(createdList, null);\n        dirDiffMap.put(created.getDirId(), list);\n      } else {\n        dirDiffMap.get(created.getDirId()).getCreatedList().add(created);\n      }\n      if (created.isReference()) {\n        RenameEntry renameEntry \u003d getEntry(created.getFileId());\n        if (renameEntry.getTargetPath() !\u003d null) {\n          renameEntry.setTarget(created.getSourcePath());\n        }\n      }\n    }\n    for (DiffReportListingEntry deleted : dlist) {\n      ChildrenDiff entry \u003d dirDiffMap.get(deleted.getDirId());\n      if (entry \u003d\u003d null || (entry.getDeletedList().isEmpty())) {\n        ChildrenDiff list;\n        List\u003cDiffReportListingEntry\u003e deletedList \u003d new ChunkedArrayList\u003c\u003e();\n        deletedList.add(deleted);\n        if (entry \u003d\u003d null) {\n          list \u003d new ChildrenDiff(null, deletedList);\n        } else {\n          list \u003d new ChildrenDiff(entry.getCreatedList(), deletedList);\n        }\n        dirDiffMap.put(deleted.getDirId(), list);\n      } else {\n        entry.getDeletedList().add(deleted);\n      }\n      if (deleted.isReference()) {\n        RenameEntry renameEntry \u003d getEntry(deleted.getFileId());\n        renameEntry.setTarget(deleted.getTargetPath());\n        renameEntry.setSource(deleted.getSourcePath());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/SnapshotDiffReportGenerator.java"
    }
  }
}