{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAppImpl.java",
  "functionName": "recover",
  "functionId": "recover___state-RMState",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
  "functionStartLine": 918,
  "functionEndLine": 966,
  "numCommitsSeen": 170,
  "timeTaken": 9640,
  "changeHistory": [
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
    "f216276d2164c6564632c571fd3adbb03bc8b3e4",
    "bcc15c6290b3912a054323695a6a931b0de163bd",
    "23c6e3c4e41fecc61d062542cb61e68898235006",
    "06f0b50a284455ffd5857cb42f386e92d121d0e6",
    "2e2dbf59d1ab39c06923103ccbd77c5e13e20b06",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438",
    "9b5636408005676ae580f8d929f8e912c27828e7",
    "d6258b33a7428a0725ead96bc43f4dd444c7c8f1",
    "e30668106dc246f68db36fbd1f2db6ec08cd96f2",
    "52734134116eb4b18686e308d00e71e7e903383e",
    "4546c7582b6762c18ba150d80a8976eb51a8290c",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1",
    "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a",
    "5805a81efbc024024d8172489dfdc6cf77879416",
    "e76faebc9589654e83c8244ef9aff88391e56b80",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39"
  ],
  "changeHistoryShort": {
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": "Ybodychange",
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": "Ybodychange",
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": "Ybodychange",
    "f216276d2164c6564632c571fd3adbb03bc8b3e4": "Ybodychange",
    "bcc15c6290b3912a054323695a6a931b0de163bd": "Ybodychange",
    "23c6e3c4e41fecc61d062542cb61e68898235006": "Ybodychange",
    "06f0b50a284455ffd5857cb42f386e92d121d0e6": "Ybodychange",
    "2e2dbf59d1ab39c06923103ccbd77c5e13e20b06": "Ybodychange",
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": "Ybodychange",
    "9b5636408005676ae580f8d929f8e912c27828e7": "Ybodychange",
    "d6258b33a7428a0725ead96bc43f4dd444c7c8f1": "Ybodychange",
    "e30668106dc246f68db36fbd1f2db6ec08cd96f2": "Ybodychange",
    "52734134116eb4b18686e308d00e71e7e903383e": "Ybodychange",
    "4546c7582b6762c18ba150d80a8976eb51a8290c": "Ybodychange",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": "Ybodychange",
    "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a": "Ybodychange",
    "5805a81efbc024024d8172489dfdc6cf77879416": "Ybodychange",
    "e76faebc9589654e83c8244ef9aff88391e56b80": "Yexceptionschange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": "Ybodychange",
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": "Ybodychange",
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": "Yexceptionschange",
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bb92bfb4ef96baa234966b60e464d1773fbf3f22": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 11:15 AM",
      "commitName": "bb92bfb4ef96baa234966b60e464d1773fbf3f22",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 6:04 AM",
      "commitNameOld": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.22,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n \n     if (recoveredFinalState \u003d\u003d null) {\n       LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n           appState.getAttemptCount(), \"NONE\"));\n     } else if (LOG.isDebugEnabled()) {\n       LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n           appState.getAttemptCount(), recoveredFinalState));\n     }\n \n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n+    this.launchTime \u003d appState.getLaunchTime();\n     this.callerContext \u003d appState.getCallerContext();\n     this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n     // send the ATS create Event during RM recovery.\n     // NOTE: it could be duplicated with events sent before RM get restarted.\n     sendATSCreateEvent();\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n\n    if (recoveredFinalState \u003d\u003d null) {\n      LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), \"NONE\"));\n    } else if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), recoveredFinalState));\n    }\n\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.launchTime \u003d appState.getLaunchTime();\n    this.callerContext \u003d appState.getCallerContext();\n    this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event during RM recovery.\n    // NOTE: it could be duplicated with events sent before RM get restarted.\n    sendATSCreateEvent();\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\"\n\nThis reverts commit 0c14b6f0d80d847be7ef3eda1614eadbf835181c.\n",
      "commitDate": "17/04/18 6:04 AM",
      "commitName": "86dfb70875d3e583deeec9998d95cfd7c5ae4ec4",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "17/04/18 5:59 AM",
      "commitNameOld": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,48 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n \n     if (recoveredFinalState \u003d\u003d null) {\n       LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n           appState.getAttemptCount(), \"NONE\"));\n     } else if (LOG.isDebugEnabled()) {\n       LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n           appState.getAttemptCount(), recoveredFinalState));\n     }\n \n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n-    this.launchTime \u003d appState.getLaunchTime();\n     this.callerContext \u003d appState.getCallerContext();\n     this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n     // send the ATS create Event during RM recovery.\n     // NOTE: it could be duplicated with events sent before RM get restarted.\n     sendATSCreateEvent();\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n\n    if (recoveredFinalState \u003d\u003d null) {\n      LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), \"NONE\"));\n    } else if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), recoveredFinalState));\n    }\n\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event during RM recovery.\n    // NOTE: it could be duplicated with events sent before RM get restarted.\n    sendATSCreateEvent();\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "0c14b6f0d80d847be7ef3eda1614eadbf835181c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7088. Add application launch time to Resource Manager REST API. (Kanwaljeet Sachdev via Haibo Chen)\n",
      "commitDate": "17/04/18 5:59 AM",
      "commitName": "0c14b6f0d80d847be7ef3eda1614eadbf835181c",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "26/03/18 11:19 AM",
      "commitNameOld": "9eef19b2ad78b8464da252d0e23c08675898b9d8",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 21.78,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,49 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n \n     if (recoveredFinalState \u003d\u003d null) {\n       LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n           appState.getAttemptCount(), \"NONE\"));\n     } else if (LOG.isDebugEnabled()) {\n       LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n           appState.getAttemptCount(), recoveredFinalState));\n     }\n \n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n+    this.launchTime \u003d appState.getLaunchTime();\n     this.callerContext \u003d appState.getCallerContext();\n     this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n     // send the ATS create Event during RM recovery.\n     // NOTE: it could be duplicated with events sent before RM get restarted.\n     sendATSCreateEvent();\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n\n    if (recoveredFinalState \u003d\u003d null) {\n      LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), \"NONE\"));\n    } else if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), recoveredFinalState));\n    }\n\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.launchTime \u003d appState.getLaunchTime();\n    this.callerContext \u003d appState.getCallerContext();\n    this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event during RM recovery.\n    // NOTE: it could be duplicated with events sent before RM get restarted.\n    sendATSCreateEvent();\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "f216276d2164c6564632c571fd3adbb03bc8b3e4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4882. Change the log level to DEBUG for recovering completed applications (templedf via rkanter)\n",
      "commitDate": "28/12/16 3:21 PM",
      "commitName": "f216276d2164c6564632c571fd3adbb03bc8b3e4",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "07/12/16 10:57 AM",
      "commitNameOld": "ab923a53fcf55d4d75aa027d46e3c4a659015325",
      "commitAuthorOld": "Sunil",
      "daysBetweenCommits": 21.18,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,48 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n-    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n-        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n-        + this.recoveredFinalState );\n+\n+    if (recoveredFinalState \u003d\u003d null) {\n+      LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n+          appState.getAttemptCount(), \"NONE\"));\n+    } else if (LOG.isDebugEnabled()) {\n+      LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n+          appState.getAttemptCount(), recoveredFinalState));\n+    }\n+\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n     // send the ATS create Event during RM recovery.\n     // NOTE: it could be duplicated with events sent before RM get restarted.\n     sendATSCreateEvent();\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n\n    if (recoveredFinalState \u003d\u003d null) {\n      LOG.info(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), \"NONE\"));\n    } else if (LOG.isDebugEnabled()) {\n      LOG.debug(String.format(RECOVERY_MESSAGE, getApplicationId(),\n          appState.getAttemptCount(), recoveredFinalState));\n    }\n\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event during RM recovery.\n    // NOTE: it could be duplicated with events sent before RM get restarted.\n    sendATSCreateEvent();\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "bcc15c6290b3912a054323695a6a931b0de163bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5611. Provide an API to update lifetime of an application. Contributed by Rohith Sharma K S\n",
      "commitDate": "09/11/16 4:08 PM",
      "commitName": "bcc15c6290b3912a054323695a6a931b0de163bd",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/10/16 8:12 AM",
      "commitNameOld": "4d2f380d787a6145f45c87ba663079fedbf645b8",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 34.37,
      "commitsBetweenForRepo": 328,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,42 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n+    this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n     // send the ATS create Event during RM recovery.\n     // NOTE: it could be duplicated with events sent before RM get restarted.\n     sendATSCreateEvent();\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    this.applicationTimeouts \u003d appState.getApplicationTimeouts();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event during RM recovery.\n    // NOTE: it could be duplicated with events sent before RM get restarted.\n    sendATSCreateEvent();\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "23c6e3c4e41fecc61d062542cb61e68898235006": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5476. Non existent application reported as ACCEPTED by YarnClientImpl (Junping Du via Varun Saxena)\n",
      "commitDate": "12/08/16 8:07 AM",
      "commitName": "23c6e3c4e41fecc61d062542cb61e68898235006",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/08/16 11:25 AM",
      "commitNameOld": "5c95bb315ba605b3bed77966a99a63854234e2c5",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 1.86,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,41 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n-    // send the ATS create Event\n-    sendATSCreateEvent(this, this.startTime);\n+    // send the ATS create Event during RM recovery.\n+    // NOTE: it could be duplicated with events sent before RM get restarted.\n+    sendATSCreateEvent();\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event during RM recovery.\n    // NOTE: it could be duplicated with events sent before RM get restarted.\n    sendATSCreateEvent();\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "06f0b50a284455ffd5857cb42f386e92d121d0e6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4644. TestRMRestart fails and findbugs issue in YARN-2928 branch (Varun Saxena via Naganarasimha G R)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "06f0b50a284455ffd5857cb42f386e92d121d0e6",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "2e2dbf59d1ab39c06923103ccbd77c5e13e20b06",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,40 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n-\n-    // send the ATS create Event\n-    sendATSCreateEvent(this, this.startTime);\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n     // send the ATS create Event\n     sendATSCreateEvent(this, this.startTime);\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "2e2dbf59d1ab39c06923103ccbd77c5e13e20b06": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4392. ApplicationCreatedEvent event time resets after RM\nrestart/failover. Contributed by Naganarasimha G R and Xuan Gong\n\n(cherry picked from commit 4546c7582b6762c18ba150d80a8976eb51a8290c)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/test/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/TestRMAppTransitions.java\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2e2dbf59d1ab39c06923103ccbd77c5e13e20b06",
      "commitAuthor": "Xuan",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n \n     // send the ATS create Event\n     sendATSCreateEvent(this, this.startTime);\n     //TODO recover collector address.\n     //this.collectorAddr \u003d appState.getCollectorAddr();\n \n+    // send the ATS create Event\n+    sendATSCreateEvent(this, this.startTime);\n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "2188a07e5bea1da26bf679ca0ece26ab596d3438": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3333. Rename TimelineAggregator etc. to TimelineCollector. Contributed by Sangjin Lee\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "2188a07e5bea1da26bf679ca0ece26ab596d3438",
      "commitAuthor": "Junping Du",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n \n     // send the ATS create Event\n     sendATSCreateEvent(this, this.startTime);\n-    //TODO recover aggregator address.\n-    //this.aggregatorAddr \u003d appState.getAggregatorAddr();\n+    //TODO recover collector address.\n+    //this.collectorAddr \u003d appState.getCollectorAddr();\n \n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n    //TODO recover collector address.\n    //this.collectorAddr \u003d appState.getCollectorAddr();\n\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "9b5636408005676ae580f8d929f8e912c27828e7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3039. Implemented the app-level timeline aggregator discovery service. Contributed by Junping Du.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9b5636408005676ae580f8d929f8e912c27828e7",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 32.74,
      "commitsBetweenForRepo": 223,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n \n     // send the ATS create Event\n     sendATSCreateEvent(this, this.startTime);\n+    //TODO recover aggregator address.\n+    //this.aggregatorAddr \u003d appState.getAggregatorAddr();\n \n     RMAppAttemptImpl preAttempt \u003d null;\n     for (ApplicationAttemptId attemptId :\n         new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n       createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n       // If previous attempt is not in final state, it means we failed to store\n       // its final state. We set it to FAILED now because we could not make sure\n       // about its final state.\n       if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n         preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n       }\n       preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n     }\n     if (currentAttempt !\u003d null) {\n       nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n    //TODO recover aggregator address.\n    //this.aggregatorAddr \u003d appState.getAggregatorAddr();\n\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "d6258b33a7428a0725ead96bc43f4dd444c7c8f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4497. RM might fail to restart when recovering apps whose attempts are missing. (Jun Gong via rohithsharmaks)\n",
      "commitDate": "22/01/16 6:57 AM",
      "commitName": "d6258b33a7428a0725ead96bc43f4dd444c7c8f1",
      "commitAuthor": "rohithsharmaks",
      "commitDateOld": "21/01/16 8:44 PM",
      "commitNameOld": "e30668106dc246f68db36fbd1f2db6ec08cd96f2",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,39 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     // If interval \u003e 0, some attempts might have been deleted.\n     if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n \n     // send the ATS create Event\n     sendATSCreateEvent(this, this.startTime);\n \n-    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n+    RMAppAttemptImpl preAttempt \u003d null;\n+    for (ApplicationAttemptId attemptId :\n+        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n       // create attempt\n-      createNewAttempt();\n+      createNewAttempt(attemptId);\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n+      // If previous attempt is not in final state, it means we failed to store\n+      // its final state. We set it to FAILED now because we could not make sure\n+      // about its final state.\n+      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n+        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n+      }\n+      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n+    }\n+    if (currentAttempt !\u003d null) {\n+      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n\n    RMAppAttemptImpl preAttempt \u003d null;\n    for (ApplicationAttemptId attemptId :\n        new TreeSet\u003c\u003e(appState.attempts.keySet())) {\n      // create attempt\n      createNewAttempt(attemptId);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n      // If previous attempt is not in final state, it means we failed to store\n      // its final state. We set it to FAILED now because we could not make sure\n      // about its final state.\n      if (preAttempt !\u003d null \u0026\u0026 preAttempt.getRecoveredFinalState() \u003d\u003d null) {\n        preAttempt.setRecoveredFinalState(RMAppAttemptState.FAILED);\n      }\n      preAttempt \u003d (RMAppAttemptImpl)currentAttempt;\n    }\n    if (currentAttempt !\u003d null) {\n      nextAttemptId \u003d currentAttempt.getAppAttemptId().getAttemptId() + 1;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "e30668106dc246f68db36fbd1f2db6ec08cd96f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4584. RM startup failure when AM attempts greater than max-attempts. (Bibin A Chundatt via rohithsharmaks)\n",
      "commitDate": "21/01/16 8:44 PM",
      "commitName": "e30668106dc246f68db36fbd1f2db6ec08cd96f2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "18/01/16 1:58 AM",
      "commitNameOld": "d40859fab1ad977636457a6cc96b6a4f9b903afc",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 3.78,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n     // If interval \u003e 0, some attempts might have been deleted.\n-    if (submissionContext.getAttemptFailuresValidityInterval() \u003e 0) {\n+    if (this.attemptFailuresValidityInterval \u003e 0) {\n       this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n       this.nextAttemptId \u003d firstAttemptIdInStateStore;\n     }\n \n     // send the ATS create Event\n     sendATSCreateEvent(this, this.startTime);\n \n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (this.attemptFailuresValidityInterval \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "52734134116eb4b18686e308d00e71e7e903383e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3480. Remove attempts that are beyond max-attempt limit from state store. Contributed by Jun Gong\n",
      "commitDate": "29/12/15 3:58 PM",
      "commitName": "52734134116eb4b18686e308d00e71e7e903383e",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/12/15 10:52 AM",
      "commitNameOld": "6cb0af3c39a5d49cb2f7911ee21363a9542ca2d7",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 15.21,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,27 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n+    // If interval \u003e 0, some attempts might have been deleted.\n+    if (submissionContext.getAttemptFailuresValidityInterval() \u003e 0) {\n+      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n+      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n+    }\n \n     // send the ATS create Event\n     sendATSCreateEvent(this, this.startTime);\n \n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n    // If interval \u003e 0, some attempts might have been deleted.\n    if (submissionContext.getAttemptFailuresValidityInterval() \u003e 0) {\n      this.firstAttemptIdInStateStore \u003d appState.getFirstAttemptId();\n      this.nextAttemptId \u003d firstAttemptIdInStateStore;\n    }\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "4546c7582b6762c18ba150d80a8976eb51a8290c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4392. ApplicationCreatedEvent event time resets after RM\nrestart/failover. Contributed by Naganarasimha G R and Xuan Gong\n",
      "commitDate": "07/12/15 12:24 PM",
      "commitName": "4546c7582b6762c18ba150d80a8976eb51a8290c",
      "commitAuthor": "Xuan",
      "commitDateOld": "23/11/15 5:19 PM",
      "commitNameOld": "8676a118a12165ae5a8b80a2a4596c133471ebc1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.8,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,22 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n     this.callerContext \u003d appState.getCallerContext();\n \n+    // send the ATS create Event\n+    sendATSCreateEvent(this, this.startTime);\n+\n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n\n    // send the ATS create Event\n    sendATSCreateEvent(this, this.startTime);\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4349. Support CallerContext in YARN. Contributed by Wangda Tan\n",
      "commitDate": "23/11/15 5:19 PM",
      "commitName": "8676a118a12165ae5a8b80a2a4596c133471ebc1",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/11/15 11:23 AM",
      "commitNameOld": "7f55a18071ebe1c5591ff8a410b227c855c3f428",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 11.25,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n     this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n         .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n+    this.callerContext \u003d appState.getCallerContext();\n \n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    this.callerContext \u003d appState.getCallerContext();\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4028. AppBlock page key update and diagnostics value null on\nrecovery. Contributed by Bibin A Chundatt\n",
      "commitDate": "18/08/15 10:53 PM",
      "commitName": "22dc5fc20942a8d98333ed5470b5fb8c1d257f1a",
      "commitAuthor": "Xuan",
      "commitDateOld": "06/08/15 10:13 PM",
      "commitNameOld": "b6265d39c5d0fda21dfe55273f193d8a6a20c6a8",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 12.03,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public void recover(RMState state) {\n     ApplicationStateData appState \u003d\n         state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \"\n         + this.recoveredFinalState );\n-    this.diagnostics.append(appState.getDiagnostics());\n+    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n+        .getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n \n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(null \u003d\u003d appState.getDiagnostics() ? \"\" : appState\n        .getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "5805a81efbc024024d8172489dfdc6cf77879416": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2404. Removed ApplicationAttemptState and ApplicationState class in RMStateStore. Contributed by Tsuyoshi OZAWA\n",
      "commitDate": "25/11/14 12:48 PM",
      "commitName": "5805a81efbc024024d8172489dfdc6cf77879416",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/11/14 3:34 PM",
      "commitNameOld": "d005404ef7211fe96ce1801ed267a249568540fd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 11.88,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,17 @@\n   public void recover(RMState state) {\n-    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n+    ApplicationStateData appState \u003d\n+        state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n-        + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n+        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n+        + this.recoveredFinalState );\n     this.diagnostics.append(appState.getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n \n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationStateData appState \u003d\n        state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \"\n        + this.recoveredFinalState );\n    this.diagnostics.append(appState.getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "e76faebc9589654e83c8244ef9aff88391e56b80": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-2834. Fixed ResourceManager to ignore token-renewal failures on recovery consistent with the (somewhat incorrect) behaviour in the non-recovery case. Contributed by Jian He.\n",
      "commitDate": "09/11/14 6:56 PM",
      "commitName": "e76faebc9589654e83c8244ef9aff88391e56b80",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "04/11/14 5:45 PM",
      "commitNameOld": "b2cd2698028118b6384904732dbf94942f644732",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 5.05,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n-  public void recover(RMState state) throws Exception{\n+  public void recover(RMState state) {\n     ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n     this.diagnostics.append(appState.getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n \n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n    this.diagnostics.append(appState.getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {
        "oldValue": "[Exception]",
        "newValue": "[]"
      }
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public void recover(RMState state) throws Exception{\n     ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n     this.diagnostics.append(appState.getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n \n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n-      createNewAttempt(false);\n+      createNewAttempt();\n       ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) throws Exception{\n    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n    this.diagnostics.append(appState.getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt();\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1210. Changed RM to start new app-attempts on RM restart only after ensuring that previous AM exited or after expiry time. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:17 PM",
      "commitName": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/10/13 10:25 AM",
      "commitNameOld": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 18.49,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public void recover(RMState state) throws Exception{\n     ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n     this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n         + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n     this.diagnostics.append(appState.getDiagnostics());\n     this.storedFinishTime \u003d appState.getFinishTime();\n     this.startTime \u003d appState.getStartTime();\n+\n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt(false);\n-      // recover attempt\n-      ((RMAppAttemptImpl) currentAttempt).recover(state);\n+      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) throws Exception{\n    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n    this.diagnostics.append(appState.getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt(false);\n      ((RMAppAttemptImpl)this.currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-891. Modified ResourceManager state-store to remember completed applications so that clients can get information about them post RM-restart. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1537560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/10/13 10:25 AM",
      "commitName": "9f4d4e27fb1760b352cc5b301cd65a50d2d43ff6",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/09/13 6:07 PM",
      "commitNameOld": "929f96ee14b95494c092f84c92878d3f5cd681fd",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 36.68,
      "commitsBetweenForRepo": 266,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,15 @@\n   public void recover(RMState state) throws Exception{\n     ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n+    this.recoveredFinalState \u003d appState.getState();\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n-            + appState.getAttemptCount() + \" attempts\");\n+        + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n+    this.diagnostics.append(appState.getDiagnostics());\n+    this.storedFinishTime \u003d appState.getFinishTime();\n+    this.startTime \u003d appState.getStartTime();\n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt(false);\n       // recover attempt\n       ((RMAppAttemptImpl) currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) throws Exception{\n    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n    this.recoveredFinalState \u003d appState.getState();\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n        + appState.getAttemptCount() + \" attempts and final state \u003d \" + this.recoveredFinalState );\n    this.diagnostics.append(appState.getDiagnostics());\n    this.storedFinishTime \u003d appState.getFinishTime();\n    this.startTime \u003d appState.getStartTime();\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt(false);\n      // recover attempt\n      ((RMAppAttemptImpl) currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {}
    },
    "f4951e07087c99ab6d57ff5efdd962432ac641ab": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-1116. Populate AMRMTokens back to AMRMTokenSecretManager after RM restarts (Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1523146 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/09/13 4:51 PM",
      "commitName": "f4951e07087c99ab6d57ff5efdd962432ac641ab",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "09/09/13 2:19 PM",
      "commitNameOld": "1a649aa51a3fe291b21bd2bb45d84fcd1806c521",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.11,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,11 +1,11 @@\n-  public void recover(RMState state) {\n+  public void recover(RMState state) throws Exception{\n     ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n     LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n             + appState.getAttemptCount() + \" attempts\");\n     for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n       // create attempt\n       createNewAttempt(false);\n       // recover attempt\n       ((RMAppAttemptImpl) currentAttempt).recover(state);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) throws Exception{\n    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n            + appState.getAttemptCount() + \" attempts\");\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt(false);\n      // recover attempt\n      ((RMAppAttemptImpl) currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[Exception]"
      }
    },
    "6cd0736cc57849e4f7c5d38a3986432a9717fe39": {
      "type": "Yintroduced",
      "commitMessage": "YARN-230. RM Restart phase 1 - includes support for saving/restarting all applications on an RM bounce. Contributed by Bikas Saha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1423758 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/12/12 8:21 PM",
      "commitName": "6cd0736cc57849e4f7c5d38a3986432a9717fe39",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,11 @@\n+  public void recover(RMState state) {\n+    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n+    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n+            + appState.getAttemptCount() + \" attempts\");\n+    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n+      // create attempt\n+      createNewAttempt(false);\n+      // recover attempt\n+      ((RMAppAttemptImpl) currentAttempt).recover(state);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void recover(RMState state) {\n    ApplicationState appState \u003d state.getApplicationState().get(getApplicationId());\n    LOG.info(\"Recovering app: \" + getApplicationId() + \" with \" + \n            + appState.getAttemptCount() + \" attempts\");\n    for(int i\u003d0; i\u003cappState.getAttemptCount(); ++i) {\n      // create attempt\n      createNewAttempt(false);\n      // recover attempt\n      ((RMAppAttemptImpl) currentAttempt).recover(state);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java"
    }
  }
}