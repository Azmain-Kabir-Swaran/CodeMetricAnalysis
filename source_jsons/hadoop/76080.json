{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BZip2Codec.java",
  "functionName": "readStreamHeader",
  "functionId": "readStreamHeader",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
  "functionStartLine": 410,
  "functionEndLine": 443,
  "numCommitsSeen": 20,
  "timeTaken": 1425,
  "changeHistory": [
    "770b5eb2db686275df445be9280e76cc3710ffdc",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "86724941c5144a06113090d40c50c289e7ebd290",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": "Ybodychange",
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "86724941c5144a06113090d40c50c289e7ebd290": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "770b5eb2db686275df445be9280e76cc3710ffdc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13444. Replace org.apache.commons.io.Charsets with java.nio.charset.StandardCharsets. Contributed by Vincent Poon.\n",
      "commitDate": "01/08/16 1:35 AM",
      "commitName": "770b5eb2db686275df445be9280e76cc3710ffdc",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "13/06/16 6:18 PM",
      "commitNameOld": "e3ba9ad3f116306910f74645ded91506345b9f6e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 48.3,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private BufferedInputStream readStreamHeader() throws IOException {\n       // We are flexible enough to allow the compressed stream not to\n       // start with the header of BZ. So it works fine either we have\n       // the header or not.\n       if (super.in !\u003d null) {\n         bufferedIn.mark(HEADER_LEN);\n         byte[] headerBytes \u003d new byte[HEADER_LEN];\n         int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n         if (actualRead !\u003d -1) {\n-          String header \u003d new String(headerBytes, Charsets.UTF_8);\n+          String header \u003d new String(headerBytes, StandardCharsets.UTF_8);\n           if (header.compareTo(HEADER) !\u003d 0) {\n             bufferedIn.reset();\n           } else {\n             this.isHeaderStripped \u003d true;\n             // In case of BYBLOCK mode, we also want to strip off\n             // remaining two character of the header.\n             if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n               actualRead \u003d bufferedIn.read(headerBytes, 0,\n                   SUB_HEADER_LEN);\n               if (actualRead !\u003d -1) {\n                 this.isSubHeaderStripped \u003d true;\n               }\n             }\n           }\n         }\n       }\n \n       if (bufferedIn \u003d\u003d null) {\n         throw new IOException(\"Failed to read bzip2 stream.\");\n       }\n \n       return bufferedIn;\n \n     }// end of method\n\\ No newline at end of file\n",
      "actualSource": "    private BufferedInputStream readStreamHeader() throws IOException {\n      // We are flexible enough to allow the compressed stream not to\n      // start with the header of BZ. So it works fine either we have\n      // the header or not.\n      if (super.in !\u003d null) {\n        bufferedIn.mark(HEADER_LEN);\n        byte[] headerBytes \u003d new byte[HEADER_LEN];\n        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n        if (actualRead !\u003d -1) {\n          String header \u003d new String(headerBytes, StandardCharsets.UTF_8);\n          if (header.compareTo(HEADER) !\u003d 0) {\n            bufferedIn.reset();\n          } else {\n            this.isHeaderStripped \u003d true;\n            // In case of BYBLOCK mode, we also want to strip off\n            // remaining two character of the header.\n            if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n              actualRead \u003d bufferedIn.read(headerBytes, 0,\n                  SUB_HEADER_LEN);\n              if (actualRead !\u003d -1) {\n                this.isSubHeaderStripped \u003d true;\n              }\n            }\n          }\n        }\n      }\n\n      if (bufferedIn \u003d\u003d null) {\n        throw new IOException(\"Failed to read bzip2 stream.\");\n      }\n\n      return bufferedIn;\n\n    }// end of method",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {}
    },
    "5b9fcedb4d116d91d70aaad6cbf59093eeee36df": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11389. Clean up byte to string encoding issues in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "11/12/14 4:42 PM",
      "commitName": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/07/14 11:17 AM",
      "commitNameOld": "ef9e24f826c271f0456cba0077ac60839affd5dd",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 147.27,
      "commitsBetweenForRepo": 1372,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n     private BufferedInputStream readStreamHeader() throws IOException {\n       // We are flexible enough to allow the compressed stream not to\n       // start with the header of BZ. So it works fine either we have\n       // the header or not.\n       if (super.in !\u003d null) {\n         bufferedIn.mark(HEADER_LEN);\n         byte[] headerBytes \u003d new byte[HEADER_LEN];\n         int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n         if (actualRead !\u003d -1) {\n-          String header \u003d new String(headerBytes);\n+          String header \u003d new String(headerBytes, Charsets.UTF_8);\n           if (header.compareTo(HEADER) !\u003d 0) {\n             bufferedIn.reset();\n           } else {\n             this.isHeaderStripped \u003d true;\n             // In case of BYBLOCK mode, we also want to strip off\n             // remaining two character of the header.\n             if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n               actualRead \u003d bufferedIn.read(headerBytes, 0,\n                   SUB_HEADER_LEN);\n               if (actualRead !\u003d -1) {\n                 this.isSubHeaderStripped \u003d true;\n               }\n             }\n           }\n         }\n       }\n \n       if (bufferedIn \u003d\u003d null) {\n         throw new IOException(\"Failed to read bzip2 stream.\");\n       }\n \n       return bufferedIn;\n \n     }// end of method\n\\ No newline at end of file\n",
      "actualSource": "    private BufferedInputStream readStreamHeader() throws IOException {\n      // We are flexible enough to allow the compressed stream not to\n      // start with the header of BZ. So it works fine either we have\n      // the header or not.\n      if (super.in !\u003d null) {\n        bufferedIn.mark(HEADER_LEN);\n        byte[] headerBytes \u003d new byte[HEADER_LEN];\n        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n        if (actualRead !\u003d -1) {\n          String header \u003d new String(headerBytes, Charsets.UTF_8);\n          if (header.compareTo(HEADER) !\u003d 0) {\n            bufferedIn.reset();\n          } else {\n            this.isHeaderStripped \u003d true;\n            // In case of BYBLOCK mode, we also want to strip off\n            // remaining two character of the header.\n            if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n              actualRead \u003d bufferedIn.read(headerBytes, 0,\n                  SUB_HEADER_LEN);\n              if (actualRead !\u003d -1) {\n                this.isSubHeaderStripped \u003d true;\n              }\n            }\n          }\n        }\n      }\n\n      if (bufferedIn \u003d\u003d null) {\n        throw new IOException(\"Failed to read bzip2 stream.\");\n      }\n\n      return bufferedIn;\n\n    }// end of method",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private BufferedInputStream readStreamHeader() throws IOException {\n      // We are flexible enough to allow the compressed stream not to\n      // start with the header of BZ. So it works fine either we have\n      // the header or not.\n      if (super.in !\u003d null) {\n        bufferedIn.mark(HEADER_LEN);\n        byte[] headerBytes \u003d new byte[HEADER_LEN];\n        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n        if (actualRead !\u003d -1) {\n          String header \u003d new String(headerBytes);\n          if (header.compareTo(HEADER) !\u003d 0) {\n            bufferedIn.reset();\n          } else {\n            this.isHeaderStripped \u003d true;\n            // In case of BYBLOCK mode, we also want to strip off\n            // remaining two character of the header.\n            if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n              actualRead \u003d bufferedIn.read(headerBytes, 0,\n                  SUB_HEADER_LEN);\n              if (actualRead !\u003d -1) {\n                this.isSubHeaderStripped \u003d true;\n              }\n            }\n          }\n        }\n      }\n\n      if (bufferedIn \u003d\u003d null) {\n        throw new IOException(\"Failed to read bzip2 stream.\");\n      }\n\n      return bufferedIn;\n\n    }// end of method",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private BufferedInputStream readStreamHeader() throws IOException {\n      // We are flexible enough to allow the compressed stream not to\n      // start with the header of BZ. So it works fine either we have\n      // the header or not.\n      if (super.in !\u003d null) {\n        bufferedIn.mark(HEADER_LEN);\n        byte[] headerBytes \u003d new byte[HEADER_LEN];\n        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n        if (actualRead !\u003d -1) {\n          String header \u003d new String(headerBytes);\n          if (header.compareTo(HEADER) !\u003d 0) {\n            bufferedIn.reset();\n          } else {\n            this.isHeaderStripped \u003d true;\n            // In case of BYBLOCK mode, we also want to strip off\n            // remaining two character of the header.\n            if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n              actualRead \u003d bufferedIn.read(headerBytes, 0,\n                  SUB_HEADER_LEN);\n              if (actualRead !\u003d -1) {\n                this.isSubHeaderStripped \u003d true;\n              }\n            }\n          }\n        }\n      }\n\n      if (bufferedIn \u003d\u003d null) {\n        throw new IOException(\"Failed to read bzip2 stream.\");\n      }\n\n      return bufferedIn;\n\n    }// end of method",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/io/compress/BZip2Codec.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/io/compress/BZip2Codec.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private BufferedInputStream readStreamHeader() throws IOException {\n      // We are flexible enough to allow the compressed stream not to\n      // start with the header of BZ. So it works fine either we have\n      // the header or not.\n      if (super.in !\u003d null) {\n        bufferedIn.mark(HEADER_LEN);\n        byte[] headerBytes \u003d new byte[HEADER_LEN];\n        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n        if (actualRead !\u003d -1) {\n          String header \u003d new String(headerBytes);\n          if (header.compareTo(HEADER) !\u003d 0) {\n            bufferedIn.reset();\n          } else {\n            this.isHeaderStripped \u003d true;\n            // In case of BYBLOCK mode, we also want to strip off\n            // remaining two character of the header.\n            if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n              actualRead \u003d bufferedIn.read(headerBytes, 0,\n                  SUB_HEADER_LEN);\n              if (actualRead !\u003d -1) {\n                this.isSubHeaderStripped \u003d true;\n              }\n            }\n          }\n        }\n      }\n\n      if (bufferedIn \u003d\u003d null) {\n        throw new IOException(\"Failed to read bzip2 stream.\");\n      }\n\n      return bufferedIn;\n\n    }// end of method",
      "path": "common/src/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/io/compress/BZip2Codec.java",
        "newPath": "common/src/java/org/apache/hadoop/io/compress/BZip2Codec.java"
      }
    },
    "86724941c5144a06113090d40c50c289e7ebd290": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-4012. Provide splitting support for bzip2 compressed files. Contributed by Abdul Qadeer\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@813581 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/09 1:51 PM",
      "commitName": "86724941c5144a06113090d40c50c289e7ebd290",
      "commitAuthor": "Christopher Douglas",
      "commitDateOld": "18/05/09 9:20 PM",
      "commitNameOld": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 114.69,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,34 @@\n     private BufferedInputStream readStreamHeader() throws IOException {\n       // We are flexible enough to allow the compressed stream not to\n       // start with the header of BZ. So it works fine either we have\n       // the header or not.\n-      BufferedInputStream bufferedIn \u003d null;\n       if (super.in !\u003d null) {\n-        bufferedIn \u003d new BufferedInputStream(super.in);\n         bufferedIn.mark(HEADER_LEN);\n         byte[] headerBytes \u003d new byte[HEADER_LEN];\n         int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n         if (actualRead !\u003d -1) {\n           String header \u003d new String(headerBytes);\n           if (header.compareTo(HEADER) !\u003d 0) {\n             bufferedIn.reset();\n+          } else {\n+            this.isHeaderStripped \u003d true;\n+            // In case of BYBLOCK mode, we also want to strip off\n+            // remaining two character of the header.\n+            if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n+              actualRead \u003d bufferedIn.read(headerBytes, 0,\n+                  SUB_HEADER_LEN);\n+              if (actualRead !\u003d -1) {\n+                this.isSubHeaderStripped \u003d true;\n+              }\n+            }\n           }\n         }\n       }\n \n       if (bufferedIn \u003d\u003d null) {\n         throw new IOException(\"Failed to read bzip2 stream.\");\n       }\n \n       return bufferedIn;\n \n     }// end of method\n\\ No newline at end of file\n",
      "actualSource": "    private BufferedInputStream readStreamHeader() throws IOException {\n      // We are flexible enough to allow the compressed stream not to\n      // start with the header of BZ. So it works fine either we have\n      // the header or not.\n      if (super.in !\u003d null) {\n        bufferedIn.mark(HEADER_LEN);\n        byte[] headerBytes \u003d new byte[HEADER_LEN];\n        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n        if (actualRead !\u003d -1) {\n          String header \u003d new String(headerBytes);\n          if (header.compareTo(HEADER) !\u003d 0) {\n            bufferedIn.reset();\n          } else {\n            this.isHeaderStripped \u003d true;\n            // In case of BYBLOCK mode, we also want to strip off\n            // remaining two character of the header.\n            if (this.readMode \u003d\u003d READ_MODE.BYBLOCK) {\n              actualRead \u003d bufferedIn.read(headerBytes, 0,\n                  SUB_HEADER_LEN);\n              if (actualRead !\u003d -1) {\n                this.isSubHeaderStripped \u003d true;\n              }\n            }\n          }\n        }\n      }\n\n      if (bufferedIn \u003d\u003d null) {\n        throw new IOException(\"Failed to read bzip2 stream.\");\n      }\n\n      return bufferedIn;\n\n    }// end of method",
      "path": "src/java/org/apache/hadoop/io/compress/BZip2Codec.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,25 @@\n+    private BufferedInputStream readStreamHeader() throws IOException {\n+      // We are flexible enough to allow the compressed stream not to\n+      // start with the header of BZ. So it works fine either we have\n+      // the header or not.\n+      BufferedInputStream bufferedIn \u003d null;\n+      if (super.in !\u003d null) {\n+        bufferedIn \u003d new BufferedInputStream(super.in);\n+        bufferedIn.mark(HEADER_LEN);\n+        byte[] headerBytes \u003d new byte[HEADER_LEN];\n+        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n+        if (actualRead !\u003d -1) {\n+          String header \u003d new String(headerBytes);\n+          if (header.compareTo(HEADER) !\u003d 0) {\n+            bufferedIn.reset();\n+          }\n+        }\n+      }\n+\n+      if (bufferedIn \u003d\u003d null) {\n+        throw new IOException(\"Failed to read bzip2 stream.\");\n+      }\n+\n+      return bufferedIn;\n+\n+    }// end of method\n\\ No newline at end of file\n",
      "actualSource": "    private BufferedInputStream readStreamHeader() throws IOException {\n      // We are flexible enough to allow the compressed stream not to\n      // start with the header of BZ. So it works fine either we have\n      // the header or not.\n      BufferedInputStream bufferedIn \u003d null;\n      if (super.in !\u003d null) {\n        bufferedIn \u003d new BufferedInputStream(super.in);\n        bufferedIn.mark(HEADER_LEN);\n        byte[] headerBytes \u003d new byte[HEADER_LEN];\n        int actualRead \u003d bufferedIn.read(headerBytes, 0, HEADER_LEN);\n        if (actualRead !\u003d -1) {\n          String header \u003d new String(headerBytes);\n          if (header.compareTo(HEADER) !\u003d 0) {\n            bufferedIn.reset();\n          }\n        }\n      }\n\n      if (bufferedIn \u003d\u003d null) {\n        throw new IOException(\"Failed to read bzip2 stream.\");\n      }\n\n      return bufferedIn;\n\n    }// end of method",
      "path": "src/java/org/apache/hadoop/io/compress/BZip2Codec.java"
    }
  }
}