{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "isValidReservation",
  "functionId": "isValidReservation___node-FSSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 1108,
  "functionEndLine": 1113,
  "numCommitsSeen": 76,
  "timeTaken": 2684,
  "changeHistory": [
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7"
  ],
  "changeHistoryShort": {
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ybodychange",
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.68,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,6 +1,6 @@\n   private boolean isValidReservation(FSSchedulerNode node) {\n-    Priority reservedPriority \u003d node.getReservedContainer().\n-        getReservedPriority();\n-    return hasContainerForNode(reservedPriority, node) \u0026\u0026\n+    SchedulerRequestKey schedulerKey \u003d node.getReservedContainer().\n+        getReservedSchedulerKey();\n+    return hasContainerForNode(schedulerKey, node) \u0026\u0026\n         !isOverAMShareLimit();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isValidReservation(FSSchedulerNode node) {\n    SchedulerRequestKey schedulerKey \u003d node.getReservedContainer().\n        getReservedSchedulerKey();\n    return hasContainerForNode(schedulerKey, node) \u0026\u0026\n        !isOverAMShareLimit();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "bd69ea408f8fdd8293836ce1089fe9b01616f2f7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3655. FairScheduler: potential livelock due to maxAMShare limitation and container reservation. (Zhihai Xu via kasha)\n",
      "commitDate": "07/06/15 11:37 AM",
      "commitName": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,6 @@\n+  private boolean isValidReservation(FSSchedulerNode node) {\n+    Priority reservedPriority \u003d node.getReservedContainer().\n+        getReservedPriority();\n+    return hasContainerForNode(reservedPriority, node) \u0026\u0026\n+        !isOverAMShareLimit();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isValidReservation(FSSchedulerNode node) {\n    Priority reservedPriority \u003d node.getReservedContainer().\n        getReservedPriority();\n    return hasContainerForNode(reservedPriority, node) \u0026\u0026\n        !isOverAMShareLimit();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}