{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "addApplicationOnRecovery",
  "functionId": "addApplicationOnRecovery___applicationId-ApplicationId__queueName-String__user-String__priority-Priority__placementContext-ApplicationPlacementContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 809,
  "functionEndLine": 884,
  "numCommitsSeen": 765,
  "timeTaken": 19797,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e40e2d6ad5cbe782c3a067229270738b501ed27e",
    "d9ba6f3656e8dc97d2813181e27d12e52dca4328",
    "9db9cd95bd0348070a286e69e7965c03c9bd39d6",
    "cb87e4dc927731e32b0bbcf678bb5600835ff28d",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23",
    "c39ca541f498712133890961598bbff50d89d68b",
    "0d89859b51157078cc504ac81dc8aa75ce6b1782",
    "b2cd2698028118b6384904732dbf94942f644732",
    "f9680d9a160ee527c8f2c1494584abf1a1f70f82",
    "519c4be95a091a072302e9ae52c2d221d80037a8",
    "7360cec692be5dcc3377ae5082fe22870caac96b",
    "bda23181bf1931c37d2590e03da9acdc6688ad34",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288",
    "1943fdbec613715f3cdc3ca60cbd273115f28299",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
    "1f46b991da9b91585608a0babd3eda39485dce09",
    "0ecba04727b5c31182d29511646c8d3e6441300f",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": "Ybodychange",
    "d9ba6f3656e8dc97d2813181e27d12e52dca4328": "Ybodychange",
    "9db9cd95bd0348070a286e69e7965c03c9bd39d6": "Ybodychange",
    "cb87e4dc927731e32b0bbcf678bb5600835ff28d": "Ymultichange(Yparameterchange,Ybodychange)",
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": "Ybodychange",
    "c39ca541f498712133890961598bbff50d89d68b": "Ymultichange(Yparameterchange,Ybodychange)",
    "0d89859b51157078cc504ac81dc8aa75ce6b1782": "Ybodychange",
    "b2cd2698028118b6384904732dbf94942f644732": "Ybodychange",
    "f9680d9a160ee527c8f2c1494584abf1a1f70f82": "Ybodychange",
    "519c4be95a091a072302e9ae52c2d221d80037a8": "Ybodychange",
    "7360cec692be5dcc3377ae5082fe22870caac96b": "Ybodychange",
    "bda23181bf1931c37d2590e03da9acdc6688ad34": "Ymultichange(Yparameterchange,Ybodychange)",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": "Yrename",
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": "Yrename",
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": "Yrename",
    "1943fdbec613715f3cdc3ca60cbd273115f28299": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ybodychange",
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": "Ybodychange",
    "1f46b991da9b91585608a0babd3eda39485dce09": "Ybodychange",
    "0ecba04727b5c31182d29511646c8d3e6441300f": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,76 @@\n   private void addApplicationOnRecovery(ApplicationId applicationId,\n       String queueName, String user,\n       Priority priority, ApplicationPlacementContext placementContext) {\n     writeLock.lock();\n     try {\n       //check if the queue needs to be auto-created during recovery\n       CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n            queueName, placementContext, true);\n \n       if (queue \u003d\u003d null) {\n         //During a restart, this indicates a queue was removed, which is\n         //not presently supported\n         if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it\"\n                       + \" was submitted to queue \" + queueName\n                       + \" which no longer exists after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n               + \"during application recovery.\"\n               + \" Queue removal during recovery is not presently \"\n               + \"supported by the capacity scheduler, please \"\n               + \"restart with all queues configured\"\n               + \" which were present before shutdown/restart.\";\n           LOG.error(FATAL, queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       if (!(queue instanceof LeafQueue)) {\n         // During RM restart, this means leaf queue was converted to a parent\n         // queue, which is not supported for running apps.\n         if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it was \"\n                       + \"submitted to queue \" + queueName\n                       + \" which is no longer a leaf queue after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName\n               + \" is no longer a leaf queue during application recovery.\"\n               + \" Changing a leaf queue to a parent queue during recovery is\"\n               + \" not presently supported by the capacity scheduler. Please\"\n               + \" restart with leaf queues before shutdown/restart continuing\"\n               + \" as leaf queues.\";\n           LOG.error(FATAL, queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       // When recovering apps in this queue but queue is in STOPPED state,\n       // that means its previous state was DRAINING. So we auto transit\n       // the state to DRAINING for recovery.\n       if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n         ((LeafQueue) queue).recoverDrainingState();\n       }\n       // Submit to the queue\n       try {\n         queue.submitApplication(applicationId, user, queueName);\n       } catch (AccessControlException ace) {\n         // Ignore the exception for recovered app as the app was previously\n         // accepted.\n       }\n       queue.getMetrics().submitApp(user);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n       applications.put(applicationId, application);\n       LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n           + \", in queue: \" + queueName);\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n-      }\n+      LOG.debug(\n+          applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationOnRecovery(ApplicationId applicationId,\n      String queueName, String user,\n      Priority priority, ApplicationPlacementContext placementContext) {\n    writeLock.lock();\n    try {\n      //check if the queue needs to be auto-created during recovery\n      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n           queueName, placementContext, true);\n\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it\"\n                      + \" was submitted to queue \" + queueName\n                      + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n              + \"during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.error(FATAL, queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was \"\n                      + \"submitted to queue \" + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.error(FATAL, queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // When recovering apps in this queue but queue is in STOPPED state,\n      // that means its previous state was DRAINING. So we auto transit\n      // the state to DRAINING for recovery.\n      if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n        ((LeafQueue) queue).recoverDrainingState();\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      LOG.debug(\n          applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   private void addApplicationOnRecovery(ApplicationId applicationId,\n       String queueName, String user,\n       Priority priority, ApplicationPlacementContext placementContext) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       //check if the queue needs to be auto-created during recovery\n       CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n            queueName, placementContext, true);\n \n       if (queue \u003d\u003d null) {\n         //During a restart, this indicates a queue was removed, which is\n         //not presently supported\n         if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it\"\n                       + \" was submitted to queue \" + queueName\n                       + \" which no longer exists after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n               + \"during application recovery.\"\n               + \" Queue removal during recovery is not presently \"\n               + \"supported by the capacity scheduler, please \"\n               + \"restart with all queues configured\"\n               + \" which were present before shutdown/restart.\";\n           LOG.error(FATAL, queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       if (!(queue instanceof LeafQueue)) {\n         // During RM restart, this means leaf queue was converted to a parent\n         // queue, which is not supported for running apps.\n         if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it was \"\n                       + \"submitted to queue \" + queueName\n                       + \" which is no longer a leaf queue after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName\n               + \" is no longer a leaf queue during application recovery.\"\n               + \" Changing a leaf queue to a parent queue during recovery is\"\n               + \" not presently supported by the capacity scheduler. Please\"\n               + \" restart with leaf queues before shutdown/restart continuing\"\n               + \" as leaf queues.\";\n           LOG.error(FATAL, queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       // When recovering apps in this queue but queue is in STOPPED state,\n       // that means its previous state was DRAINING. So we auto transit\n       // the state to DRAINING for recovery.\n       if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n         ((LeafQueue) queue).recoverDrainingState();\n       }\n       // Submit to the queue\n       try {\n         queue.submitApplication(applicationId, user, queueName);\n       } catch (AccessControlException ace) {\n         // Ignore the exception for recovered app as the app was previously\n         // accepted.\n       }\n       queue.getMetrics().submitApp(user);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n       applications.put(applicationId, application);\n       LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n           + \", in queue: \" + queueName);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationOnRecovery(ApplicationId applicationId,\n      String queueName, String user,\n      Priority priority, ApplicationPlacementContext placementContext) {\n    writeLock.lock();\n    try {\n      //check if the queue needs to be auto-created during recovery\n      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n           queueName, placementContext, true);\n\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it\"\n                      + \" was submitted to queue \" + queueName\n                      + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n              + \"during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.error(FATAL, queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was \"\n                      + \"submitted to queue \" + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.error(FATAL, queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // When recovering apps in this queue but queue is in STOPPED state,\n      // that means its previous state was DRAINING. So we auto transit\n      // the state to DRAINING for recovery.\n      if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n        ((LeafQueue) queue).recoverDrainingState();\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7243. Moving logging APIs over to slf4j in hadoop-yarn-server-resourcemanager.\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "04/03/19 9:10 PM",
      "commitName": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "24/02/19 6:17 AM",
      "commitNameOld": "50094d7fefafaf0e88798b43cdce291ae067e3fd",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 8.62,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   private void addApplicationOnRecovery(ApplicationId applicationId,\n       String queueName, String user,\n       Priority priority, ApplicationPlacementContext placementContext) {\n     try {\n       writeLock.lock();\n       //check if the queue needs to be auto-created during recovery\n       CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n            queueName, placementContext, true);\n \n       if (queue \u003d\u003d null) {\n         //During a restart, this indicates a queue was removed, which is\n         //not presently supported\n         if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it\"\n                       + \" was submitted to queue \" + queueName\n                       + \" which no longer exists after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n               + \"during application recovery.\"\n               + \" Queue removal during recovery is not presently \"\n               + \"supported by the capacity scheduler, please \"\n               + \"restart with all queues configured\"\n               + \" which were present before shutdown/restart.\";\n-          LOG.fatal(queueErrorMsg);\n+          LOG.error(FATAL, queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       if (!(queue instanceof LeafQueue)) {\n         // During RM restart, this means leaf queue was converted to a parent\n         // queue, which is not supported for running apps.\n         if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it was \"\n                       + \"submitted to queue \" + queueName\n                       + \" which is no longer a leaf queue after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName\n               + \" is no longer a leaf queue during application recovery.\"\n               + \" Changing a leaf queue to a parent queue during recovery is\"\n               + \" not presently supported by the capacity scheduler. Please\"\n               + \" restart with leaf queues before shutdown/restart continuing\"\n               + \" as leaf queues.\";\n-          LOG.fatal(queueErrorMsg);\n+          LOG.error(FATAL, queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       // When recovering apps in this queue but queue is in STOPPED state,\n       // that means its previous state was DRAINING. So we auto transit\n       // the state to DRAINING for recovery.\n       if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n         ((LeafQueue) queue).recoverDrainingState();\n       }\n       // Submit to the queue\n       try {\n         queue.submitApplication(applicationId, user, queueName);\n       } catch (AccessControlException ace) {\n         // Ignore the exception for recovered app as the app was previously\n         // accepted.\n       }\n       queue.getMetrics().submitApp(user);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n       applications.put(applicationId, application);\n       LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n           + \", in queue: \" + queueName);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationOnRecovery(ApplicationId applicationId,\n      String queueName, String user,\n      Priority priority, ApplicationPlacementContext placementContext) {\n    try {\n      writeLock.lock();\n      //check if the queue needs to be auto-created during recovery\n      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n           queueName, placementContext, true);\n\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it\"\n                      + \" was submitted to queue \" + queueName\n                      + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n              + \"during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.error(FATAL, queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was \"\n                      + \"submitted to queue \" + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.error(FATAL, queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // When recovering apps in this queue but queue is in STOPPED state,\n      // that means its previous state was DRAINING. So we auto transit\n      // the state to DRAINING for recovery.\n      if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n        ((LeafQueue) queue).recoverDrainingState();\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "d9ba6f3656e8dc97d2813181e27d12e52dca4328": {
      "type": "Ybodychange",
      "commitMessage": "yarn.resourcemanager.fail-fast is used inconsistently. Contributed by Yuanbo Liu.\n",
      "commitDate": "02/07/18 11:46 PM",
      "commitName": "d9ba6f3656e8dc97d2813181e27d12e52dca4328",
      "commitAuthor": "Junping Du",
      "commitDateOld": "26/06/18 7:27 PM",
      "commitNameOld": "bedc4fe0799cf3b161100acc521fc62a97793427",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.18,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,78 @@\n   private void addApplicationOnRecovery(ApplicationId applicationId,\n       String queueName, String user,\n       Priority priority, ApplicationPlacementContext placementContext) {\n     try {\n       writeLock.lock();\n       //check if the queue needs to be auto-created during recovery\n       CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n            queueName, placementContext, true);\n \n       if (queue \u003d\u003d null) {\n         //During a restart, this indicates a queue was removed, which is\n         //not presently supported\n-        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it\"\n                       + \" was submitted to queue \" + queueName\n                       + \" which no longer exists after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n               + \"during application recovery.\"\n               + \" Queue removal during recovery is not presently \"\n               + \"supported by the capacity scheduler, please \"\n               + \"restart with all queues configured\"\n               + \" which were present before shutdown/restart.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       if (!(queue instanceof LeafQueue)) {\n         // During RM restart, this means leaf queue was converted to a parent\n         // queue, which is not supported for running apps.\n-        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it was \"\n                       + \"submitted to queue \" + queueName\n                       + \" which is no longer a leaf queue after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName\n               + \" is no longer a leaf queue during application recovery.\"\n               + \" Changing a leaf queue to a parent queue during recovery is\"\n               + \" not presently supported by the capacity scheduler. Please\"\n               + \" restart with leaf queues before shutdown/restart continuing\"\n               + \" as leaf queues.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       // When recovering apps in this queue but queue is in STOPPED state,\n       // that means its previous state was DRAINING. So we auto transit\n       // the state to DRAINING for recovery.\n       if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n         ((LeafQueue) queue).recoverDrainingState();\n       }\n       // Submit to the queue\n       try {\n         queue.submitApplication(applicationId, user, queueName);\n       } catch (AccessControlException ace) {\n         // Ignore the exception for recovered app as the app was previously\n         // accepted.\n       }\n       queue.getMetrics().submitApp(user);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n       applications.put(applicationId, application);\n       LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n           + \", in queue: \" + queueName);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationOnRecovery(ApplicationId applicationId,\n      String queueName, String user,\n      Priority priority, ApplicationPlacementContext placementContext) {\n    try {\n      writeLock.lock();\n      //check if the queue needs to be auto-created during recovery\n      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n           queueName, placementContext, true);\n\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it\"\n                      + \" was submitted to queue \" + queueName\n                      + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n              + \"during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!getConfiguration().shouldAppFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was \"\n                      + \"submitted to queue \" + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // When recovering apps in this queue but queue is in STOPPED state,\n      // that means its previous state was DRAINING. So we auto transit\n      // the state to DRAINING for recovery.\n      if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n        ((LeafQueue) queue).recoverDrainingState();\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "9db9cd95bd0348070a286e69e7965c03c9bd39d6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7003. DRAINING state of queues is not recovered after RM restart. Contributed by Tao Yang.\n",
      "commitDate": "10/05/18 7:47 PM",
      "commitName": "9db9cd95bd0348070a286e69e7965c03c9bd39d6",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "30/04/18 6:47 PM",
      "commitNameOld": "2d319e37937c1e20c6a7dc4477ef88defd1f8464",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 10.04,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,78 @@\n   private void addApplicationOnRecovery(ApplicationId applicationId,\n       String queueName, String user,\n       Priority priority, ApplicationPlacementContext placementContext) {\n     try {\n       writeLock.lock();\n       //check if the queue needs to be auto-created during recovery\n       CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n            queueName, placementContext, true);\n \n       if (queue \u003d\u003d null) {\n         //During a restart, this indicates a queue was removed, which is\n         //not presently supported\n         if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it\"\n                       + \" was submitted to queue \" + queueName\n                       + \" which no longer exists after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n               + \"during application recovery.\"\n               + \" Queue removal during recovery is not presently \"\n               + \"supported by the capacity scheduler, please \"\n               + \"restart with all queues configured\"\n               + \" which were present before shutdown/restart.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       if (!(queue instanceof LeafQueue)) {\n         // During RM restart, this means leaf queue was converted to a parent\n         // queue, which is not supported for running apps.\n         if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n                   \"Application killed on recovery as it was \"\n                       + \"submitted to queue \" + queueName\n                       + \" which is no longer a leaf queue after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName\n               + \" is no longer a leaf queue during application recovery.\"\n               + \" Changing a leaf queue to a parent queue during recovery is\"\n               + \" not presently supported by the capacity scheduler. Please\"\n               + \" restart with leaf queues before shutdown/restart continuing\"\n               + \" as leaf queues.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n+      // When recovering apps in this queue but queue is in STOPPED state,\n+      // that means its previous state was DRAINING. So we auto transit\n+      // the state to DRAINING for recovery.\n+      if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n+        ((LeafQueue) queue).recoverDrainingState();\n+      }\n       // Submit to the queue\n       try {\n         queue.submitApplication(applicationId, user, queueName);\n       } catch (AccessControlException ace) {\n         // Ignore the exception for recovered app as the app was previously\n         // accepted.\n       }\n       queue.getMetrics().submitApp(user);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n       applications.put(applicationId, application);\n       LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n           + \", in queue: \" + queueName);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addApplicationOnRecovery(ApplicationId applicationId,\n      String queueName, String user,\n      Priority priority, ApplicationPlacementContext placementContext) {\n    try {\n      writeLock.lock();\n      //check if the queue needs to be auto-created during recovery\n      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n           queueName, placementContext, true);\n\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it\"\n                      + \" was submitted to queue \" + queueName\n                      + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n              + \"during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was \"\n                      + \"submitted to queue \" + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // When recovering apps in this queue but queue is in STOPPED state,\n      // that means its previous state was DRAINING. So we auto transit\n      // the state to DRAINING for recovery.\n      if (queue.getState() \u003d\u003d QueueState.STOPPED) {\n        ((LeafQueue) queue).recoverDrainingState();\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cb87e4dc927731e32b0bbcf678bb5600835ff28d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7643. Handle recovery of applications in case of auto-created leaf queue mapping. Contributed by Suma Shivaprasad.\n",
      "commitDate": "13/12/17 9:19 AM",
      "commitName": "cb87e4dc927731e32b0bbcf678bb5600835ff28d",
      "commitAuthor": "Sunil G",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7643. Handle recovery of applications in case of auto-created leaf queue mapping. Contributed by Suma Shivaprasad.\n",
          "commitDate": "13/12/17 9:19 AM",
          "commitName": "cb87e4dc927731e32b0bbcf678bb5600835ff28d",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/12/17 3:17 PM",
          "commitNameOld": "adca1a72e4eca2ea634551e9fb8e9b878c36cb5c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 4.75,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,72 @@\n-  private void addApplicationOnRecovery(\n-      ApplicationId applicationId, String queueName, String user,\n-      Priority priority) {\n+  private void addApplicationOnRecovery(ApplicationId applicationId,\n+      String queueName, String user,\n+      Priority priority, ApplicationPlacementContext placementContext) {\n     try {\n       writeLock.lock();\n-      CSQueue queue \u003d getQueue(queueName);\n+      //check if the queue needs to be auto-created during recovery\n+      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n+           queueName, placementContext, true);\n+\n       if (queue \u003d\u003d null) {\n         //During a restart, this indicates a queue was removed, which is\n         //not presently supported\n         if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n-                  \"Application killed on recovery as it was submitted to queue \"\n-                      + queueName + \" which no longer exists after restart.\"));\n+                  \"Application killed on recovery as it\"\n+                      + \" was submitted to queue \" + queueName\n+                      + \" which no longer exists after restart.\"));\n           return;\n         } else{\n-          String queueErrorMsg \u003d \"Queue named \" + queueName\n-              + \" missing during application recovery.\"\n+          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n+              + \"during application recovery.\"\n               + \" Queue removal during recovery is not presently \"\n               + \"supported by the capacity scheduler, please \"\n               + \"restart with all queues configured\"\n               + \" which were present before shutdown/restart.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       if (!(queue instanceof LeafQueue)) {\n         // During RM restart, this means leaf queue was converted to a parent\n         // queue, which is not supported for running apps.\n         if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n-                  \"Application killed on recovery as it was submitted to queue \"\n-                      + queueName\n+                  \"Application killed on recovery as it was \"\n+                      + \"submitted to queue \" + queueName\n                       + \" which is no longer a leaf queue after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName\n               + \" is no longer a leaf queue during application recovery.\"\n               + \" Changing a leaf queue to a parent queue during recovery is\"\n               + \" not presently supported by the capacity scheduler. Please\"\n               + \" restart with leaf queues before shutdown/restart continuing\"\n               + \" as leaf queues.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       // Submit to the queue\n       try {\n         queue.submitApplication(applicationId, user, queueName);\n       } catch (AccessControlException ace) {\n         // Ignore the exception for recovered app as the app was previously\n         // accepted.\n       }\n       queue.getMetrics().submitApp(user);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n       applications.put(applicationId, application);\n       LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n           + \", in queue: \" + queueName);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addApplicationOnRecovery(ApplicationId applicationId,\n      String queueName, String user,\n      Priority priority, ApplicationPlacementContext placementContext) {\n    try {\n      writeLock.lock();\n      //check if the queue needs to be auto-created during recovery\n      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n           queueName, placementContext, true);\n\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it\"\n                      + \" was submitted to queue \" + queueName\n                      + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n              + \"during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was \"\n                      + \"submitted to queue \" + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, queueName-String, user-String, priority-Priority]",
            "newValue": "[applicationId-ApplicationId, queueName-String, user-String, priority-Priority, placementContext-ApplicationPlacementContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7643. Handle recovery of applications in case of auto-created leaf queue mapping. Contributed by Suma Shivaprasad.\n",
          "commitDate": "13/12/17 9:19 AM",
          "commitName": "cb87e4dc927731e32b0bbcf678bb5600835ff28d",
          "commitAuthor": "Sunil G",
          "commitDateOld": "08/12/17 3:17 PM",
          "commitNameOld": "adca1a72e4eca2ea634551e9fb8e9b878c36cb5c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 4.75,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,68 +1,72 @@\n-  private void addApplicationOnRecovery(\n-      ApplicationId applicationId, String queueName, String user,\n-      Priority priority) {\n+  private void addApplicationOnRecovery(ApplicationId applicationId,\n+      String queueName, String user,\n+      Priority priority, ApplicationPlacementContext placementContext) {\n     try {\n       writeLock.lock();\n-      CSQueue queue \u003d getQueue(queueName);\n+      //check if the queue needs to be auto-created during recovery\n+      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n+           queueName, placementContext, true);\n+\n       if (queue \u003d\u003d null) {\n         //During a restart, this indicates a queue was removed, which is\n         //not presently supported\n         if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n-                  \"Application killed on recovery as it was submitted to queue \"\n-                      + queueName + \" which no longer exists after restart.\"));\n+                  \"Application killed on recovery as it\"\n+                      + \" was submitted to queue \" + queueName\n+                      + \" which no longer exists after restart.\"));\n           return;\n         } else{\n-          String queueErrorMsg \u003d \"Queue named \" + queueName\n-              + \" missing during application recovery.\"\n+          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n+              + \"during application recovery.\"\n               + \" Queue removal during recovery is not presently \"\n               + \"supported by the capacity scheduler, please \"\n               + \"restart with all queues configured\"\n               + \" which were present before shutdown/restart.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       if (!(queue instanceof LeafQueue)) {\n         // During RM restart, this means leaf queue was converted to a parent\n         // queue, which is not supported for running apps.\n         if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n           this.rmContext.getDispatcher().getEventHandler().handle(\n               new RMAppEvent(applicationId, RMAppEventType.KILL,\n-                  \"Application killed on recovery as it was submitted to queue \"\n-                      + queueName\n+                  \"Application killed on recovery as it was \"\n+                      + \"submitted to queue \" + queueName\n                       + \" which is no longer a leaf queue after restart.\"));\n           return;\n         } else{\n           String queueErrorMsg \u003d \"Queue named \" + queueName\n               + \" is no longer a leaf queue during application recovery.\"\n               + \" Changing a leaf queue to a parent queue during recovery is\"\n               + \" not presently supported by the capacity scheduler. Please\"\n               + \" restart with leaf queues before shutdown/restart continuing\"\n               + \" as leaf queues.\";\n           LOG.fatal(queueErrorMsg);\n           throw new QueueInvalidException(queueErrorMsg);\n         }\n       }\n       // Submit to the queue\n       try {\n         queue.submitApplication(applicationId, user, queueName);\n       } catch (AccessControlException ace) {\n         // Ignore the exception for recovered app as the app was previously\n         // accepted.\n       }\n       queue.getMetrics().submitApp(user);\n       SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n           new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n       applications.put(applicationId, application);\n       LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n           + \", in queue: \" + queueName);\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addApplicationOnRecovery(ApplicationId applicationId,\n      String queueName, String user,\n      Priority priority, ApplicationPlacementContext placementContext) {\n    try {\n      writeLock.lock();\n      //check if the queue needs to be auto-created during recovery\n      CSQueue queue \u003d getOrCreateQueueFromPlacementContext(applicationId, user,\n           queueName, placementContext, true);\n\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it\"\n                      + \" was submitted to queue \" + queueName\n                      + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName + \" missing \"\n              + \"during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was \"\n                      + \"submitted to queue \" + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
      "commitDate": "04/10/16 5:23 PM",
      "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,68 @@\n-  private synchronized void addApplicationOnRecovery(\n+  private void addApplicationOnRecovery(\n       ApplicationId applicationId, String queueName, String user,\n       Priority priority) {\n-    CSQueue queue \u003d getQueue(queueName);\n-    if (queue \u003d\u003d null) {\n-      //During a restart, this indicates a queue was removed, which is\n-      //not presently supported\n-      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n-        this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMAppEvent(applicationId, RMAppEventType.KILL,\n-            \"Application killed on recovery as it was submitted to queue \" +\n-            queueName + \" which no longer exists after restart.\"));\n-        return;\n-      } else {\n-        String queueErrorMsg \u003d \"Queue named \" + queueName\n-            + \" missing during application recovery.\"\n-            + \" Queue removal during recovery is not presently supported by the\"\n-            + \" capacity scheduler, please restart with all queues configured\"\n-            + \" which were present before shutdown/restart.\";\n-        LOG.fatal(queueErrorMsg);\n-        throw new QueueInvalidException(queueErrorMsg);\n-      }\n-    }\n-    if (!(queue instanceof LeafQueue)) {\n-      // During RM restart, this means leaf queue was converted to a parent\n-      // queue, which is not supported for running apps.\n-      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n-        this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMAppEvent(applicationId, RMAppEventType.KILL,\n-            \"Application killed on recovery as it was submitted to queue \" +\n-            queueName + \" which is no longer a leaf queue after restart.\"));\n-        return;\n-      } else {\n-        String queueErrorMsg \u003d \"Queue named \" + queueName\n-            + \" is no longer a leaf queue during application recovery.\"\n-            + \" Changing a leaf queue to a parent queue during recovery is\"\n-            + \" not presently supported by the capacity scheduler. Please\"\n-            + \" restart with leaf queues before shutdown/restart continuing\"\n-            + \" as leaf queues.\";\n-        LOG.fatal(queueErrorMsg);\n-        throw new QueueInvalidException(queueErrorMsg);\n-      }\n-    }\n-    // Submit to the queue\n     try {\n-      queue.submitApplication(applicationId, user, queueName);\n-    } catch (AccessControlException ace) {\n-      // Ignore the exception for recovered app as the app was previously\n-      // accepted.\n-    }\n-    queue.getMetrics().submitApp(user);\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n-    applications.put(applicationId, application);\n-    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n-        + \", in queue: \" + queueName);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n+      writeLock.lock();\n+      CSQueue queue \u003d getQueue(queueName);\n+      if (queue \u003d\u003d null) {\n+        //During a restart, this indicates a queue was removed, which is\n+        //not presently supported\n+        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.KILL,\n+                  \"Application killed on recovery as it was submitted to queue \"\n+                      + queueName + \" which no longer exists after restart.\"));\n+          return;\n+        } else{\n+          String queueErrorMsg \u003d \"Queue named \" + queueName\n+              + \" missing during application recovery.\"\n+              + \" Queue removal during recovery is not presently \"\n+              + \"supported by the capacity scheduler, please \"\n+              + \"restart with all queues configured\"\n+              + \" which were present before shutdown/restart.\";\n+          LOG.fatal(queueErrorMsg);\n+          throw new QueueInvalidException(queueErrorMsg);\n+        }\n+      }\n+      if (!(queue instanceof LeafQueue)) {\n+        // During RM restart, this means leaf queue was converted to a parent\n+        // queue, which is not supported for running apps.\n+        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.KILL,\n+                  \"Application killed on recovery as it was submitted to queue \"\n+                      + queueName\n+                      + \" which is no longer a leaf queue after restart.\"));\n+          return;\n+        } else{\n+          String queueErrorMsg \u003d \"Queue named \" + queueName\n+              + \" is no longer a leaf queue during application recovery.\"\n+              + \" Changing a leaf queue to a parent queue during recovery is\"\n+              + \" not presently supported by the capacity scheduler. Please\"\n+              + \" restart with leaf queues before shutdown/restart continuing\"\n+              + \" as leaf queues.\";\n+          LOG.fatal(queueErrorMsg);\n+          throw new QueueInvalidException(queueErrorMsg);\n+        }\n+      }\n+      // Submit to the queue\n+      try {\n+        queue.submitApplication(applicationId, user, queueName);\n+      } catch (AccessControlException ace) {\n+        // Ignore the exception for recovered app as the app was previously\n+        // accepted.\n+      }\n+      queue.getMetrics().submitApp(user);\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n+          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n+      applications.put(applicationId, application);\n+      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n+          + \", in queue: \" + queueName);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user,\n      Priority priority) {\n    try {\n      writeLock.lock();\n      CSQueue queue \u003d getQueue(queueName);\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was submitted to queue \"\n                      + queueName + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" missing during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was submitted to queue \"\n                      + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3139. Improve locks in AbstractYarnScheduler/CapacityScheduler/FairScheduler. Contributed by Wangda Tan\n",
          "commitDate": "04/10/16 5:23 PM",
          "commitName": "31f8da22d0b8d2dcce5fbc8e45d832f40acf056f",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 35.06,
          "commitsBetweenForRepo": 195,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,68 @@\n-  private synchronized void addApplicationOnRecovery(\n+  private void addApplicationOnRecovery(\n       ApplicationId applicationId, String queueName, String user,\n       Priority priority) {\n-    CSQueue queue \u003d getQueue(queueName);\n-    if (queue \u003d\u003d null) {\n-      //During a restart, this indicates a queue was removed, which is\n-      //not presently supported\n-      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n-        this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMAppEvent(applicationId, RMAppEventType.KILL,\n-            \"Application killed on recovery as it was submitted to queue \" +\n-            queueName + \" which no longer exists after restart.\"));\n-        return;\n-      } else {\n-        String queueErrorMsg \u003d \"Queue named \" + queueName\n-            + \" missing during application recovery.\"\n-            + \" Queue removal during recovery is not presently supported by the\"\n-            + \" capacity scheduler, please restart with all queues configured\"\n-            + \" which were present before shutdown/restart.\";\n-        LOG.fatal(queueErrorMsg);\n-        throw new QueueInvalidException(queueErrorMsg);\n-      }\n-    }\n-    if (!(queue instanceof LeafQueue)) {\n-      // During RM restart, this means leaf queue was converted to a parent\n-      // queue, which is not supported for running apps.\n-      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n-        this.rmContext.getDispatcher().getEventHandler().handle(\n-            new RMAppEvent(applicationId, RMAppEventType.KILL,\n-            \"Application killed on recovery as it was submitted to queue \" +\n-            queueName + \" which is no longer a leaf queue after restart.\"));\n-        return;\n-      } else {\n-        String queueErrorMsg \u003d \"Queue named \" + queueName\n-            + \" is no longer a leaf queue during application recovery.\"\n-            + \" Changing a leaf queue to a parent queue during recovery is\"\n-            + \" not presently supported by the capacity scheduler. Please\"\n-            + \" restart with leaf queues before shutdown/restart continuing\"\n-            + \" as leaf queues.\";\n-        LOG.fatal(queueErrorMsg);\n-        throw new QueueInvalidException(queueErrorMsg);\n-      }\n-    }\n-    // Submit to the queue\n     try {\n-      queue.submitApplication(applicationId, user, queueName);\n-    } catch (AccessControlException ace) {\n-      // Ignore the exception for recovered app as the app was previously\n-      // accepted.\n-    }\n-    queue.getMetrics().submitApp(user);\n-    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n-    applications.put(applicationId, application);\n-    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n-        + \", in queue: \" + queueName);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n+      writeLock.lock();\n+      CSQueue queue \u003d getQueue(queueName);\n+      if (queue \u003d\u003d null) {\n+        //During a restart, this indicates a queue was removed, which is\n+        //not presently supported\n+        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.KILL,\n+                  \"Application killed on recovery as it was submitted to queue \"\n+                      + queueName + \" which no longer exists after restart.\"));\n+          return;\n+        } else{\n+          String queueErrorMsg \u003d \"Queue named \" + queueName\n+              + \" missing during application recovery.\"\n+              + \" Queue removal during recovery is not presently \"\n+              + \"supported by the capacity scheduler, please \"\n+              + \"restart with all queues configured\"\n+              + \" which were present before shutdown/restart.\";\n+          LOG.fatal(queueErrorMsg);\n+          throw new QueueInvalidException(queueErrorMsg);\n+        }\n+      }\n+      if (!(queue instanceof LeafQueue)) {\n+        // During RM restart, this means leaf queue was converted to a parent\n+        // queue, which is not supported for running apps.\n+        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+          this.rmContext.getDispatcher().getEventHandler().handle(\n+              new RMAppEvent(applicationId, RMAppEventType.KILL,\n+                  \"Application killed on recovery as it was submitted to queue \"\n+                      + queueName\n+                      + \" which is no longer a leaf queue after restart.\"));\n+          return;\n+        } else{\n+          String queueErrorMsg \u003d \"Queue named \" + queueName\n+              + \" is no longer a leaf queue during application recovery.\"\n+              + \" Changing a leaf queue to a parent queue during recovery is\"\n+              + \" not presently supported by the capacity scheduler. Please\"\n+              + \" restart with leaf queues before shutdown/restart continuing\"\n+              + \" as leaf queues.\";\n+          LOG.fatal(queueErrorMsg);\n+          throw new QueueInvalidException(queueErrorMsg);\n+        }\n+      }\n+      // Submit to the queue\n+      try {\n+        queue.submitApplication(applicationId, user, queueName);\n+      } catch (AccessControlException ace) {\n+        // Ignore the exception for recovered app as the app was previously\n+        // accepted.\n+      }\n+      queue.getMetrics().submitApp(user);\n+      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n+          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n+      applications.put(applicationId, application);\n+      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n+          + \", in queue: \" + queueName);\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n+      }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user,\n      Priority priority) {\n    try {\n      writeLock.lock();\n      CSQueue queue \u003d getQueue(queueName);\n      if (queue \u003d\u003d null) {\n        //During a restart, this indicates a queue was removed, which is\n        //not presently supported\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was submitted to queue \"\n                      + queueName + \" which no longer exists after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" missing during application recovery.\"\n              + \" Queue removal during recovery is not presently \"\n              + \"supported by the capacity scheduler, please \"\n              + \"restart with all queues configured\"\n              + \" which were present before shutdown/restart.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      if (!(queue instanceof LeafQueue)) {\n        // During RM restart, this means leaf queue was converted to a parent\n        // queue, which is not supported for running apps.\n        if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n          this.rmContext.getDispatcher().getEventHandler().handle(\n              new RMAppEvent(applicationId, RMAppEventType.KILL,\n                  \"Application killed on recovery as it was submitted to queue \"\n                      + queueName\n                      + \" which is no longer a leaf queue after restart.\"));\n          return;\n        } else{\n          String queueErrorMsg \u003d \"Queue named \" + queueName\n              + \" is no longer a leaf queue during application recovery.\"\n              + \" Changing a leaf queue to a parent queue during recovery is\"\n              + \" not presently supported by the capacity scheduler. Please\"\n              + \" restart with leaf queues before shutdown/restart continuing\"\n              + \" as leaf queues.\";\n          LOG.fatal(queueErrorMsg);\n          throw new QueueInvalidException(queueErrorMsg);\n        }\n      }\n      // Submit to the queue\n      try {\n        queue.submitApplication(applicationId, user, queueName);\n      } catch (AccessControlException ace) {\n        // Ignore the exception for recovered app as the app was previously\n        // accepted.\n      }\n      queue.getMetrics().submitApp(user);\n      SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n          new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n      applications.put(applicationId, application);\n      LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n          + \", in queue: \" + queueName);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
      "commitDate": "15/10/15 5:12 PM",
      "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
          "commitDate": "15/10/15 5:12 PM",
          "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/10/15 11:56 AM",
          "commitNameOld": "29a582ada0fe195989eca25e5a995895e178f4ea",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.22,
          "commitsBetweenForRepo": 87,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,60 @@\n-  private synchronized void addApplication(ApplicationId applicationId,\n-      String queueName, String user, boolean isAppRecovering, Priority priority) {\n-    // sanity checks.\n+  private synchronized void addApplicationOnRecovery(\n+      ApplicationId applicationId, String queueName, String user,\n+      Priority priority) {\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n-      if (isAppRecovering) {\n+      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppEvent(applicationId, RMAppEventType.KILL,\n+            \"Application killed on recovery as it was submitted to queue \" +\n+            queueName + \" which no longer exists after restart.\"));\n+        return;\n+      } else {\n         String queueErrorMsg \u003d \"Queue named \" + queueName\n-           + \" missing during application recovery.\"\n-           + \" Queue removal during recovery is not presently supported by the\"\n-           + \" capacity scheduler, please restart with all queues configured\"\n-           + \" which were present before shutdown/restart.\";\n+            + \" missing during application recovery.\"\n+            + \" Queue removal during recovery is not presently supported by the\"\n+            + \" capacity scheduler, please restart with all queues configured\"\n+            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n-        throw new QueueNotFoundException(queueErrorMsg);\n+        throw new QueueInvalidException(queueErrorMsg);\n       }\n-      String message \u003d \"Application \" + applicationId + \n-      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppRejectedEvent(applicationId, message));\n-      return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationId + \n-          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppRejectedEvent(applicationId, message));\n-      return;\n+      // During RM restart, this means leaf queue was converted to a parent\n+      // queue, which is not supported for running apps.\n+      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppEvent(applicationId, RMAppEventType.KILL,\n+            \"Application killed on recovery as it was submitted to queue \" +\n+            queueName + \" which is no longer a leaf queue after restart.\"));\n+        return;\n+      } else {\n+        String queueErrorMsg \u003d \"Queue named \" + queueName\n+            + \" is no longer a leaf queue during application recovery.\"\n+            + \" Changing a leaf queue to a parent queue during recovery is\"\n+            + \" not presently supported by the capacity scheduler. Please\"\n+            + \" restart with leaf queues before shutdown/restart continuing\"\n+            + \" as leaf queues.\";\n+        LOG.fatal(queueErrorMsg);\n+        throw new QueueInvalidException(queueErrorMsg);\n+      }\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n-      // Ignore the exception for recovered app as the app was previously accepted\n-      if (!isAppRecovering) {\n-        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n-            + queueName + \" from user \" + user, ace);\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n-        return;\n-      }\n+      // Ignore the exception for recovered app as the app was previously\n+      // accepted.\n     }\n-    // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n-    if (isAppRecovering) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n-      }\n-    } else {\n-      rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user,\n      Priority priority) {\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppEvent(applicationId, RMAppEventType.KILL,\n            \"Application killed on recovery as it was submitted to queue \" +\n            queueName + \" which no longer exists after restart.\"));\n        return;\n      } else {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueInvalidException(queueErrorMsg);\n      }\n    }\n    if (!(queue instanceof LeafQueue)) {\n      // During RM restart, this means leaf queue was converted to a parent\n      // queue, which is not supported for running apps.\n      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppEvent(applicationId, RMAppEventType.KILL,\n            \"Application killed on recovery as it was submitted to queue \" +\n            queueName + \" which is no longer a leaf queue after restart.\"));\n        return;\n      } else {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" is no longer a leaf queue during application recovery.\"\n            + \" Changing a leaf queue to a parent queue during recovery is\"\n            + \" not presently supported by the capacity scheduler. Please\"\n            + \" restart with leaf queues before shutdown/restart continuing\"\n            + \" as leaf queues.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueInvalidException(queueErrorMsg);\n      }\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      // Ignore the exception for recovered app as the app was previously\n      // accepted.\n    }\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "addApplication",
            "newValue": "addApplicationOnRecovery"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
          "commitDate": "15/10/15 5:12 PM",
          "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/10/15 11:56 AM",
          "commitNameOld": "29a582ada0fe195989eca25e5a995895e178f4ea",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.22,
          "commitsBetweenForRepo": 87,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,60 @@\n-  private synchronized void addApplication(ApplicationId applicationId,\n-      String queueName, String user, boolean isAppRecovering, Priority priority) {\n-    // sanity checks.\n+  private synchronized void addApplicationOnRecovery(\n+      ApplicationId applicationId, String queueName, String user,\n+      Priority priority) {\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n-      if (isAppRecovering) {\n+      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppEvent(applicationId, RMAppEventType.KILL,\n+            \"Application killed on recovery as it was submitted to queue \" +\n+            queueName + \" which no longer exists after restart.\"));\n+        return;\n+      } else {\n         String queueErrorMsg \u003d \"Queue named \" + queueName\n-           + \" missing during application recovery.\"\n-           + \" Queue removal during recovery is not presently supported by the\"\n-           + \" capacity scheduler, please restart with all queues configured\"\n-           + \" which were present before shutdown/restart.\";\n+            + \" missing during application recovery.\"\n+            + \" Queue removal during recovery is not presently supported by the\"\n+            + \" capacity scheduler, please restart with all queues configured\"\n+            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n-        throw new QueueNotFoundException(queueErrorMsg);\n+        throw new QueueInvalidException(queueErrorMsg);\n       }\n-      String message \u003d \"Application \" + applicationId + \n-      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppRejectedEvent(applicationId, message));\n-      return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationId + \n-          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppRejectedEvent(applicationId, message));\n-      return;\n+      // During RM restart, this means leaf queue was converted to a parent\n+      // queue, which is not supported for running apps.\n+      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppEvent(applicationId, RMAppEventType.KILL,\n+            \"Application killed on recovery as it was submitted to queue \" +\n+            queueName + \" which is no longer a leaf queue after restart.\"));\n+        return;\n+      } else {\n+        String queueErrorMsg \u003d \"Queue named \" + queueName\n+            + \" is no longer a leaf queue during application recovery.\"\n+            + \" Changing a leaf queue to a parent queue during recovery is\"\n+            + \" not presently supported by the capacity scheduler. Please\"\n+            + \" restart with leaf queues before shutdown/restart continuing\"\n+            + \" as leaf queues.\";\n+        LOG.fatal(queueErrorMsg);\n+        throw new QueueInvalidException(queueErrorMsg);\n+      }\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n-      // Ignore the exception for recovered app as the app was previously accepted\n-      if (!isAppRecovering) {\n-        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n-            + queueName + \" from user \" + user, ace);\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n-        return;\n-      }\n+      // Ignore the exception for recovered app as the app was previously\n+      // accepted.\n     }\n-    // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n-    if (isAppRecovering) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n-      }\n-    } else {\n-      rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user,\n      Priority priority) {\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppEvent(applicationId, RMAppEventType.KILL,\n            \"Application killed on recovery as it was submitted to queue \" +\n            queueName + \" which no longer exists after restart.\"));\n        return;\n      } else {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueInvalidException(queueErrorMsg);\n      }\n    }\n    if (!(queue instanceof LeafQueue)) {\n      // During RM restart, this means leaf queue was converted to a parent\n      // queue, which is not supported for running apps.\n      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppEvent(applicationId, RMAppEventType.KILL,\n            \"Application killed on recovery as it was submitted to queue \" +\n            queueName + \" which is no longer a leaf queue after restart.\"));\n        return;\n      } else {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" is no longer a leaf queue during application recovery.\"\n            + \" Changing a leaf queue to a parent queue during recovery is\"\n            + \" not presently supported by the capacity scheduler. Please\"\n            + \" restart with leaf queues before shutdown/restart continuing\"\n            + \" as leaf queues.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueInvalidException(queueErrorMsg);\n      }\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      // Ignore the exception for recovered app as the app was previously\n      // accepted.\n    }\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, queueName-String, user-String, isAppRecovering-boolean, priority-Priority]",
            "newValue": "[applicationId-ApplicationId, queueName-String, user-String, priority-Priority]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4000. RM crashes with NPE if leaf queue becomes parent queue during restart. Contributed by Varun Saxena\n",
          "commitDate": "15/10/15 5:12 PM",
          "commitName": "cf23f2c2b5b4eb9e51de1a66b7aa57dee7ff30b5",
          "commitAuthor": "Jian He",
          "commitDateOld": "06/10/15 11:56 AM",
          "commitNameOld": "29a582ada0fe195989eca25e5a995895e178f4ea",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.22,
          "commitsBetweenForRepo": 87,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,60 @@\n-  private synchronized void addApplication(ApplicationId applicationId,\n-      String queueName, String user, boolean isAppRecovering, Priority priority) {\n-    // sanity checks.\n+  private synchronized void addApplicationOnRecovery(\n+      ApplicationId applicationId, String queueName, String user,\n+      Priority priority) {\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n-      if (isAppRecovering) {\n+      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppEvent(applicationId, RMAppEventType.KILL,\n+            \"Application killed on recovery as it was submitted to queue \" +\n+            queueName + \" which no longer exists after restart.\"));\n+        return;\n+      } else {\n         String queueErrorMsg \u003d \"Queue named \" + queueName\n-           + \" missing during application recovery.\"\n-           + \" Queue removal during recovery is not presently supported by the\"\n-           + \" capacity scheduler, please restart with all queues configured\"\n-           + \" which were present before shutdown/restart.\";\n+            + \" missing during application recovery.\"\n+            + \" Queue removal during recovery is not presently supported by the\"\n+            + \" capacity scheduler, please restart with all queues configured\"\n+            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n-        throw new QueueNotFoundException(queueErrorMsg);\n+        throw new QueueInvalidException(queueErrorMsg);\n       }\n-      String message \u003d \"Application \" + applicationId + \n-      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppRejectedEvent(applicationId, message));\n-      return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationId + \n-          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppRejectedEvent(applicationId, message));\n-      return;\n+      // During RM restart, this means leaf queue was converted to a parent\n+      // queue, which is not supported for running apps.\n+      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n+        this.rmContext.getDispatcher().getEventHandler().handle(\n+            new RMAppEvent(applicationId, RMAppEventType.KILL,\n+            \"Application killed on recovery as it was submitted to queue \" +\n+            queueName + \" which is no longer a leaf queue after restart.\"));\n+        return;\n+      } else {\n+        String queueErrorMsg \u003d \"Queue named \" + queueName\n+            + \" is no longer a leaf queue during application recovery.\"\n+            + \" Changing a leaf queue to a parent queue during recovery is\"\n+            + \" not presently supported by the capacity scheduler. Please\"\n+            + \" restart with leaf queues before shutdown/restart continuing\"\n+            + \" as leaf queues.\";\n+        LOG.fatal(queueErrorMsg);\n+        throw new QueueInvalidException(queueErrorMsg);\n+      }\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n-      // Ignore the exception for recovered app as the app was previously accepted\n-      if (!isAppRecovering) {\n-        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n-            + queueName + \" from user \" + user, ace);\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n-        return;\n-      }\n+      // Ignore the exception for recovered app as the app was previously\n+      // accepted.\n     }\n-    // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n-    if (isAppRecovering) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n-      }\n-    } else {\n-      rmContext.getDispatcher().getEventHandler()\n-        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplicationOnRecovery(\n      ApplicationId applicationId, String queueName, String user,\n      Priority priority) {\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppEvent(applicationId, RMAppEventType.KILL,\n            \"Application killed on recovery as it was submitted to queue \" +\n            queueName + \" which no longer exists after restart.\"));\n        return;\n      } else {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueInvalidException(queueErrorMsg);\n      }\n    }\n    if (!(queue instanceof LeafQueue)) {\n      // During RM restart, this means leaf queue was converted to a parent\n      // queue, which is not supported for running apps.\n      if (!YarnConfiguration.shouldRMFailFast(getConfig())) {\n        this.rmContext.getDispatcher().getEventHandler().handle(\n            new RMAppEvent(applicationId, RMAppEventType.KILL,\n            \"Application killed on recovery as it was submitted to queue \" +\n            queueName + \" which is no longer a leaf queue after restart.\"));\n        return;\n      } else {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" is no longer a leaf queue during application recovery.\"\n            + \" Changing a leaf queue to a parent queue during recovery is\"\n            + \" not presently supported by the capacity scheduler. Please\"\n            + \" restart with leaf queues before shutdown/restart continuing\"\n            + \" as leaf queues.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueInvalidException(queueErrorMsg);\n      }\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      // Ignore the exception for recovered app as the app was previously\n      // accepted.\n    }\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "5468baa80aa2a3e2a02e9a902deebafd734daf23": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3635. Refactored current queue mapping implementation in CapacityScheduler to use a generic PlacementManager framework. Contributed by Wangda Tan\n",
      "commitDate": "15/09/15 12:39 AM",
      "commitName": "5468baa80aa2a3e2a02e9a902deebafd734daf23",
      "commitAuthor": "Jian He",
      "commitDateOld": "13/09/15 5:03 PM",
      "commitNameOld": "81df7b586a16f8226c7b01c139c1c70c060399c3",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 1.32,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,83 +1,58 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n       String queueName, String user, boolean isAppRecovering, Priority priority) {\n-\n-    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n-      try {\n-        String mappedQueue \u003d getMappedQueue(user);\n-        if (mappedQueue !\u003d null) {\n-          // We have a mapping, should we use it?\n-          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n-              || overrideWithQueueMappings) {\n-            LOG.info(\"Application \" + applicationId + \" user \" + user\n-                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n-                + \"] override \" + overrideWithQueueMappings);\n-            queueName \u003d mappedQueue;\n-            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n-            rmApp.setQueue(queueName);\n-          }\n-        }\n-      } catch (IOException ioex) {\n-        String message \u003d \"Failed to submit application \" + applicationId +\n-            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n-        this.rmContext.getDispatcher().getEventHandler()\n-            .handle(new RMAppRejectedEvent(applicationId, message));\n-        return;\n-      }\n-    }\n-\n     // sanity checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n       if (isAppRecovering) {\n         String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n         throw new QueueNotFoundException(queueErrorMsg);\n       }\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       // Ignore the exception for recovered app as the app was previously accepted\n       if (!isAppRecovering) {\n         LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n             + queueName + \" from user \" + user, ace);\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n         return;\n       }\n     }\n     // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering, Priority priority) {\n    // sanity checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (isAppRecovering) {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n           + \" missing during application recovery.\"\n           + \" Queue removal during recovery is not presently supported by the\"\n           + \" capacity scheduler, please restart with all queues configured\"\n           + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueNotFoundException(queueErrorMsg);\n      }\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      // Ignore the exception for recovered app as the app was previously accepted\n      if (!isAppRecovering) {\n        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n            + queueName + \" from user \" + user, ace);\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n        return;\n      }\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "c39ca541f498712133890961598bbff50d89d68b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2003. Support for Application priority : Changes in RM and Capacity Scheduler. (Sunil G via wangda)\n",
      "commitDate": "21/07/15 9:57 AM",
      "commitName": "c39ca541f498712133890961598bbff50d89d68b",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2003. Support for Application priority : Changes in RM and Capacity Scheduler. (Sunil G via wangda)\n",
          "commitDate": "21/07/15 9:57 AM",
          "commitName": "c39ca541f498712133890961598bbff50d89d68b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/07/15 4:31 AM",
          "commitNameOld": "9b272ccae78918e7d756d84920a9322187d61eed",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 4.23,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,83 +1,83 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n-    String queueName, String user, boolean isAppRecovering) {\n+      String queueName, String user, boolean isAppRecovering, Priority priority) {\n \n     if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n       try {\n         String mappedQueue \u003d getMappedQueue(user);\n         if (mappedQueue !\u003d null) {\n           // We have a mapping, should we use it?\n           if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n               || overrideWithQueueMappings) {\n             LOG.info(\"Application \" + applicationId + \" user \" + user\n                 + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                 + \"] override \" + overrideWithQueueMappings);\n             queueName \u003d mappedQueue;\n             RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n             rmApp.setQueue(queueName);\n           }\n         }\n       } catch (IOException ioex) {\n         String message \u003d \"Failed to submit application \" + applicationId +\n             \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, message));\n         return;\n       }\n     }\n \n     // sanity checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n       if (isAppRecovering) {\n         String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n         throw new QueueNotFoundException(queueErrorMsg);\n       }\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       // Ignore the exception for recovered app as the app was previously accepted\n       if (!isAppRecovering) {\n         LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n             + queueName + \" from user \" + user, ace);\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n         return;\n       }\n     }\n     // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n+        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering, Priority priority) {\n\n    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n      try {\n        String mappedQueue \u003d getMappedQueue(user);\n        if (mappedQueue !\u003d null) {\n          // We have a mapping, should we use it?\n          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n              || overrideWithQueueMappings) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                + \"] override \" + overrideWithQueueMappings);\n            queueName \u003d mappedQueue;\n            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n            rmApp.setQueue(queueName);\n          }\n        }\n      } catch (IOException ioex) {\n        String message \u003d \"Failed to submit application \" + applicationId +\n            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return;\n      }\n    }\n\n    // sanity checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (isAppRecovering) {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n           + \" missing during application recovery.\"\n           + \" Queue removal during recovery is not presently supported by the\"\n           + \" capacity scheduler, please restart with all queues configured\"\n           + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueNotFoundException(queueErrorMsg);\n      }\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      // Ignore the exception for recovered app as the app was previously accepted\n      if (!isAppRecovering) {\n        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n            + queueName + \" from user \" + user, ace);\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n        return;\n      }\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, queueName-String, user-String, isAppRecovering-boolean]",
            "newValue": "[applicationId-ApplicationId, queueName-String, user-String, isAppRecovering-boolean, priority-Priority]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2003. Support for Application priority : Changes in RM and Capacity Scheduler. (Sunil G via wangda)\n",
          "commitDate": "21/07/15 9:57 AM",
          "commitName": "c39ca541f498712133890961598bbff50d89d68b",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "17/07/15 4:31 AM",
          "commitNameOld": "9b272ccae78918e7d756d84920a9322187d61eed",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 4.23,
          "commitsBetweenForRepo": 19,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,83 +1,83 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n-    String queueName, String user, boolean isAppRecovering) {\n+      String queueName, String user, boolean isAppRecovering, Priority priority) {\n \n     if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n       try {\n         String mappedQueue \u003d getMappedQueue(user);\n         if (mappedQueue !\u003d null) {\n           // We have a mapping, should we use it?\n           if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n               || overrideWithQueueMappings) {\n             LOG.info(\"Application \" + applicationId + \" user \" + user\n                 + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                 + \"] override \" + overrideWithQueueMappings);\n             queueName \u003d mappedQueue;\n             RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n             rmApp.setQueue(queueName);\n           }\n         }\n       } catch (IOException ioex) {\n         String message \u003d \"Failed to submit application \" + applicationId +\n             \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, message));\n         return;\n       }\n     }\n \n     // sanity checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n       if (isAppRecovering) {\n         String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n         throw new QueueNotFoundException(queueErrorMsg);\n       }\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       // Ignore the exception for recovered app as the app was previously accepted\n       if (!isAppRecovering) {\n         LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n             + queueName + \" from user \" + user, ace);\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n         return;\n       }\n     }\n     // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n-        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n+        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering, Priority priority) {\n\n    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n      try {\n        String mappedQueue \u003d getMappedQueue(user);\n        if (mappedQueue !\u003d null) {\n          // We have a mapping, should we use it?\n          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n              || overrideWithQueueMappings) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                + \"] override \" + overrideWithQueueMappings);\n            queueName \u003d mappedQueue;\n            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n            rmApp.setQueue(queueName);\n          }\n        }\n      } catch (IOException ioex) {\n        String message \u003d \"Failed to submit application \" + applicationId +\n            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return;\n      }\n    }\n\n    // sanity checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (isAppRecovering) {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n           + \" missing during application recovery.\"\n           + \" Queue removal during recovery is not presently supported by the\"\n           + \" capacity scheduler, please restart with all queues configured\"\n           + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueNotFoundException(queueErrorMsg);\n      }\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      // Ignore the exception for recovered app as the app was previously accepted\n      if (!isAppRecovering) {\n        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n            + queueName + \" from user \" + user, ace);\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n        return;\n      }\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user, priority);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "0d89859b51157078cc504ac81dc8aa75ce6b1782": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2340. Fixed NPE when queue is stopped during RM restart. Contributed by Rohith Sharmaks\n",
      "commitDate": "22/12/14 9:53 PM",
      "commitName": "0d89859b51157078cc504ac81dc8aa75ce6b1782",
      "commitAuthor": "Jian He",
      "commitDateOld": "22/12/14 4:51 PM",
      "commitNameOld": "fdf042dfffa4d2474e3cac86cfb8fe9ee4648beb",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,83 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n     String queueName, String user, boolean isAppRecovering) {\n \n     if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n       try {\n         String mappedQueue \u003d getMappedQueue(user);\n         if (mappedQueue !\u003d null) {\n           // We have a mapping, should we use it?\n           if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n               || overrideWithQueueMappings) {\n             LOG.info(\"Application \" + applicationId + \" user \" + user\n                 + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                 + \"] override \" + overrideWithQueueMappings);\n             queueName \u003d mappedQueue;\n             RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n             rmApp.setQueue(queueName);\n           }\n         }\n       } catch (IOException ioex) {\n         String message \u003d \"Failed to submit application \" + applicationId +\n             \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, message));\n         return;\n       }\n     }\n \n     // sanity checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n       if (isAppRecovering) {\n         String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n         throw new QueueNotFoundException(queueErrorMsg);\n       }\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n-      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n-          + queueName + \" from user \" + user, ace);\n-      this.rmContext.getDispatcher().getEventHandler()\n-          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n-      return;\n+      // Ignore the exception for recovered app as the app was previously accepted\n+      if (!isAppRecovering) {\n+        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n+            + queueName + \" from user \" + user, ace);\n+        this.rmContext.getDispatcher().getEventHandler()\n+            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n+        return;\n+      }\n     }\n     // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n    String queueName, String user, boolean isAppRecovering) {\n\n    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n      try {\n        String mappedQueue \u003d getMappedQueue(user);\n        if (mappedQueue !\u003d null) {\n          // We have a mapping, should we use it?\n          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n              || overrideWithQueueMappings) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                + \"] override \" + overrideWithQueueMappings);\n            queueName \u003d mappedQueue;\n            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n            rmApp.setQueue(queueName);\n          }\n        }\n      } catch (IOException ioex) {\n        String message \u003d \"Failed to submit application \" + applicationId +\n            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return;\n      }\n    }\n\n    // sanity checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (isAppRecovering) {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n           + \" missing during application recovery.\"\n           + \" Queue removal during recovery is not presently supported by the\"\n           + \" capacity scheduler, please restart with all queues configured\"\n           + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueNotFoundException(queueErrorMsg);\n      }\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      // Ignore the exception for recovered app as the app was previously accepted\n      if (!isAppRecovering) {\n        LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n            + queueName + \" from user \" + user, ace);\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n        return;\n      }\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "b2cd2698028118b6384904732dbf94942f644732": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2010. Handle app-recovery failures gracefully. (Jian He and Karthik Kambatla via kasha)\n",
      "commitDate": "04/11/14 5:45 PM",
      "commitName": "b2cd2698028118b6384904732dbf94942f644732",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "15/10/14 6:33 PM",
      "commitNameOld": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.01,
      "commitsBetweenForRepo": 189,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,80 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n     String queueName, String user, boolean isAppRecovering) {\n \n     if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n       try {\n         String mappedQueue \u003d getMappedQueue(user);\n         if (mappedQueue !\u003d null) {\n           // We have a mapping, should we use it?\n           if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n               || overrideWithQueueMappings) {\n             LOG.info(\"Application \" + applicationId + \" user \" + user\n                 + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                 + \"] override \" + overrideWithQueueMappings);\n             queueName \u003d mappedQueue;\n             RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n             rmApp.setQueue(queueName);\n           }\n         }\n       } catch (IOException ioex) {\n         String message \u003d \"Failed to submit application \" + applicationId +\n             \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, message));\n         return;\n       }\n     }\n \n     // sanity checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       //During a restart, this indicates a queue was removed, which is\n       //not presently supported\n       if (isAppRecovering) {\n-        //throwing RuntimeException because some other exceptions are caught\n-        //(including YarnRuntimeException) and we want this to force an exit\n-        String queueErrorMsg \u003d \"Queue named \" + queueName \n+        String queueErrorMsg \u003d \"Queue named \" + queueName\n            + \" missing during application recovery.\"\n            + \" Queue removal during recovery is not presently supported by the\"\n            + \" capacity scheduler, please restart with all queues configured\"\n            + \" which were present before shutdown/restart.\";\n         LOG.fatal(queueErrorMsg);\n-        throw new RuntimeException(queueErrorMsg);\n+        throw new QueueNotFoundException(queueErrorMsg);\n       }\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n           + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n     // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n    String queueName, String user, boolean isAppRecovering) {\n\n    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n      try {\n        String mappedQueue \u003d getMappedQueue(user);\n        if (mappedQueue !\u003d null) {\n          // We have a mapping, should we use it?\n          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n              || overrideWithQueueMappings) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                + \"] override \" + overrideWithQueueMappings);\n            queueName \u003d mappedQueue;\n            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n            rmApp.setQueue(queueName);\n          }\n        }\n      } catch (IOException ioex) {\n        String message \u003d \"Failed to submit application \" + applicationId +\n            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return;\n      }\n    }\n\n    // sanity checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (isAppRecovering) {\n        String queueErrorMsg \u003d \"Queue named \" + queueName\n           + \" missing during application recovery.\"\n           + \" Queue removal during recovery is not presently supported by the\"\n           + \" capacity scheduler, please restart with all queues configured\"\n           + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new QueueNotFoundException(queueErrorMsg);\n      }\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "f9680d9a160ee527c8f2c1494584abf1a1f70f82": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2308. Changed CapacityScheduler to explicitly throw exception if the queue\nto which the apps were submitted is changed across RM restart. Contributed by Craig Welch \u0026 Chang Li\n",
      "commitDate": "13/10/14 2:09 PM",
      "commitName": "f9680d9a160ee527c8f2c1494584abf1a1f70f82",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/10/14 3:48 PM",
      "commitNameOld": "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 6.93,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,82 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n     String queueName, String user, boolean isAppRecovering) {\n \n     if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n       try {\n         String mappedQueue \u003d getMappedQueue(user);\n         if (mappedQueue !\u003d null) {\n           // We have a mapping, should we use it?\n           if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n               || overrideWithQueueMappings) {\n             LOG.info(\"Application \" + applicationId + \" user \" + user\n                 + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                 + \"] override \" + overrideWithQueueMappings);\n             queueName \u003d mappedQueue;\n             RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n             rmApp.setQueue(queueName);\n           }\n         }\n       } catch (IOException ioex) {\n         String message \u003d \"Failed to submit application \" + applicationId +\n             \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n         this.rmContext.getDispatcher().getEventHandler()\n             .handle(new RMAppRejectedEvent(applicationId, message));\n         return;\n       }\n     }\n \n     // sanity checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n+      //During a restart, this indicates a queue was removed, which is\n+      //not presently supported\n+      if (isAppRecovering) {\n+        //throwing RuntimeException because some other exceptions are caught\n+        //(including YarnRuntimeException) and we want this to force an exit\n+        String queueErrorMsg \u003d \"Queue named \" + queueName \n+           + \" missing during application recovery.\"\n+           + \" Queue removal during recovery is not presently supported by the\"\n+           + \" capacity scheduler, please restart with all queues configured\"\n+           + \" which were present before shutdown/restart.\";\n+        LOG.fatal(queueErrorMsg);\n+        throw new RuntimeException(queueErrorMsg);\n+      }\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n           + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n     // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n    String queueName, String user, boolean isAppRecovering) {\n\n    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n      try {\n        String mappedQueue \u003d getMappedQueue(user);\n        if (mappedQueue !\u003d null) {\n          // We have a mapping, should we use it?\n          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n              || overrideWithQueueMappings) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                + \"] override \" + overrideWithQueueMappings);\n            queueName \u003d mappedQueue;\n            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n            rmApp.setQueue(queueName);\n          }\n        }\n      } catch (IOException ioex) {\n        String message \u003d \"Failed to submit application \" + applicationId +\n            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return;\n      }\n    }\n\n    // sanity checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      //During a restart, this indicates a queue was removed, which is\n      //not presently supported\n      if (isAppRecovering) {\n        //throwing RuntimeException because some other exceptions are caught\n        //(including YarnRuntimeException) and we want this to force an exit\n        String queueErrorMsg \u003d \"Queue named \" + queueName \n           + \" missing during application recovery.\"\n           + \" Queue removal during recovery is not presently supported by the\"\n           + \" capacity scheduler, please restart with all queues configured\"\n           + \" which were present before shutdown/restart.\";\n        LOG.fatal(queueErrorMsg);\n        throw new RuntimeException(queueErrorMsg);\n      }\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "519c4be95a091a072302e9ae52c2d221d80037a8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2411. Support simple user and group mappings to queues. Contributed by Ram Venkatesh\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/08/14 11:08 PM",
      "commitName": "519c4be95a091a072302e9ae52c2d221d80037a8",
      "commitAuthor": "Jian He",
      "commitDateOld": "14/08/14 11:00 PM",
      "commitNameOld": "7360cec692be5dcc3377ae5082fe22870caac96b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 3.01,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,69 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n-      String queueName, String user, boolean isAppRecovering) {\n-    // santiy checks.\n+    String queueName, String user, boolean isAppRecovering) {\n+\n+    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n+      try {\n+        String mappedQueue \u003d getMappedQueue(user);\n+        if (mappedQueue !\u003d null) {\n+          // We have a mapping, should we use it?\n+          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n+              || overrideWithQueueMappings) {\n+            LOG.info(\"Application \" + applicationId + \" user \" + user\n+                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n+                + \"] override \" + overrideWithQueueMappings);\n+            queueName \u003d mappedQueue;\n+            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n+            rmApp.setQueue(queueName);\n+          }\n+        }\n+      } catch (IOException ioex) {\n+        String message \u003d \"Failed to submit application \" + applicationId +\n+            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n+        this.rmContext.getDispatcher().getEventHandler()\n+            .handle(new RMAppRejectedEvent(applicationId, message));\n+        return;\n+      }\n+    }\n+\n+    // sanity checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n           + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n     // update the metrics\n     queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n    String queueName, String user, boolean isAppRecovering) {\n\n    if (mappings !\u003d null \u0026\u0026 mappings.size() \u003e 0) {\n      try {\n        String mappedQueue \u003d getMappedQueue(user);\n        if (mappedQueue !\u003d null) {\n          // We have a mapping, should we use it?\n          if (queueName.equals(YarnConfiguration.DEFAULT_QUEUE_NAME)\n              || overrideWithQueueMappings) {\n            LOG.info(\"Application \" + applicationId + \" user \" + user\n                + \" mapping [\" + queueName + \"] to [\" + mappedQueue\n                + \"] override \" + overrideWithQueueMappings);\n            queueName \u003d mappedQueue;\n            RMApp rmApp \u003d rmContext.getRMApps().get(applicationId);\n            rmApp.setQueue(queueName);\n          }\n        }\n      } catch (IOException ioex) {\n        String message \u003d \"Failed to submit application \" + applicationId +\n            \" submitted by user \" + user + \" reason: \" + ioex.getMessage();\n        this.rmContext.getDispatcher().getEventHandler()\n            .handle(new RMAppRejectedEvent(applicationId, message));\n        return;\n      }\n    }\n\n    // sanity checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "7360cec692be5dcc3377ae5082fe22870caac96b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2378. Added support for moving applications across queues in CapacityScheduler. Contributed by Subramaniam Venkatraman Krishnan\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1618106 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/08/14 11:00 PM",
      "commitName": "7360cec692be5dcc3377ae5082fe22870caac96b",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/08/14 3:56 AM",
      "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 2.79,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,44 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n       String queueName, String user, boolean isAppRecovering) {\n     // santiy checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n           + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n+    // update the metrics\n+    queue.getMetrics().submitApp(user);\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     if (isAppRecovering) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n       }\n     } else {\n       rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering) {\n    // santiy checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    // update the metrics\n    queue.getMetrics().submitApp(user);\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "bda23181bf1931c37d2590e03da9acdc6688ad34": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/14 5:14 PM",
      "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/14 5:14 PM",
          "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/07/14 2:48 PM",
          "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthorOld": "Mayank Bansal",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,42 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n-      String queueName, String user) {\n+      String queueName, String user, boolean isAppRecovering) {\n     // santiy checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n           + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n-    rmContext.getDispatcher().getEventHandler()\n+    if (isAppRecovering) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n+      }\n+    } else {\n+      rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering) {\n    // santiy checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationId-ApplicationId, queueName-String, user-String]",
            "newValue": "[applicationId-ApplicationId, queueName-String, user-String, isAppRecovering-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2219. Changed ResourceManager to avoid AMs and NMs getting exceptions after RM recovery but before scheduler learns about apps and app-attempts. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611222 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/14 5:14 PM",
          "commitName": "bda23181bf1931c37d2590e03da9acdc6688ad34",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "15/07/14 2:48 PM",
          "commitNameOld": "43589a8df70d4dbaf86609961e27cc4e23dda993",
          "commitAuthorOld": "Mayank Bansal",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,42 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n-      String queueName, String user) {\n+      String queueName, String user, boolean isAppRecovering) {\n     // santiy checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n           + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n     SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n         new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n-    rmContext.getDispatcher().getEventHandler()\n+    if (isAppRecovering) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n+      }\n+    } else {\n+      rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user, boolean isAppRecovering) {\n    // santiy checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    if (isAppRecovering) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(applicationId + \" is recovering. Skip notifying APP_ACCEPTED\");\n      }\n    } else {\n      rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/03/14 7:53 PM",
      "commitNameOld": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 65.11,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   private synchronized void addApplication(ApplicationId applicationId,\n       String queueName, String user) {\n     // santiy checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     // Submit to the queue\n     try {\n       queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n           + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler()\n           .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n-    SchedulerApplication application \u003d\n-        new SchedulerApplication(queue, user);\n+    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n+        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n     applications.put(applicationId, application);\n     LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n         + \", in queue: \" + queueName);\n     rmContext.getDispatcher().getEventHandler()\n         .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user) {\n    // santiy checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    SchedulerApplication\u003cFiCaSchedulerApp\u003e application \u003d\n        new SchedulerApplication\u003cFiCaSchedulerApp\u003e(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/01/14 12:19 PM",
          "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/12/13 5:44 PM",
          "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.77,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,36 @@\n-      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n-          String queueName, String user) {\n-\n-    // Sanity checks\n+  private synchronized void addApplication(ApplicationId applicationId,\n+      String queueName, String user) {\n+    // santiy checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n+      String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n+      String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n-\n-    // TODO: Fix store\n-    FiCaSchedulerApp SchedulerApp \u003d \n-        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n-            queue.getActiveUsersManager(), rmContext);\n-\n     // Submit to the queue\n     try {\n-      queue.submitApplication(SchedulerApp, user, queueName);\n+      queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n-      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n-          \" to queue \" + queueName + \" from user \" + user, ace);\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, \n-              ace.toString()));\n+      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n+          + queueName + \" from user \" + user, ace);\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n-\n-    applications.put(applicationAttemptId, SchedulerApp);\n-\n-    LOG.info(\"Application Submission: \" + applicationAttemptId + \n-        \", user: \" + user +\n-        \" queue: \" + queue +\n-        \", currently active: \" + applications.size());\n-\n-    rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-            RMAppAttemptEventType.APP_ACCEPTED));\n+    SchedulerApplication application \u003d\n+        new SchedulerApplication(queue, user);\n+    applications.put(applicationId, application);\n+    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n+        + \", in queue: \" + queueName);\n+    rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user) {\n    // santiy checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    SchedulerApplication application \u003d\n        new SchedulerApplication(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "addApplicationAttempt",
            "newValue": "addApplication"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/01/14 12:19 PM",
          "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/12/13 5:44 PM",
          "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.77,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,36 @@\n-      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n-          String queueName, String user) {\n-\n-    // Sanity checks\n+  private synchronized void addApplication(ApplicationId applicationId,\n+      String queueName, String user) {\n+    // santiy checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n+      String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n+      String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n-\n-    // TODO: Fix store\n-    FiCaSchedulerApp SchedulerApp \u003d \n-        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n-            queue.getActiveUsersManager(), rmContext);\n-\n     // Submit to the queue\n     try {\n-      queue.submitApplication(SchedulerApp, user, queueName);\n+      queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n-      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n-          \" to queue \" + queueName + \" from user \" + user, ace);\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, \n-              ace.toString()));\n+      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n+          + queueName + \" from user \" + user, ace);\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n-\n-    applications.put(applicationAttemptId, SchedulerApp);\n-\n-    LOG.info(\"Application Submission: \" + applicationAttemptId + \n-        \", user: \" + user +\n-        \" queue: \" + queue +\n-        \", currently active: \" + applications.size());\n-\n-    rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-            RMAppAttemptEventType.APP_ACCEPTED));\n+    SchedulerApplication application \u003d\n+        new SchedulerApplication(queue, user);\n+    applications.put(applicationId, application);\n+    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n+        + \", in queue: \" + queueName);\n+    rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user) {\n    // santiy checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    SchedulerApplication application \u003d\n        new SchedulerApplication(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, queueName-String, user-String]",
            "newValue": "[applicationId-ApplicationId, queueName-String, user-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/01/14 12:19 PM",
          "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/12/13 5:44 PM",
          "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 20.77,
          "commitsBetweenForRepo": 83,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,48 +1,36 @@\n-      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n-          String queueName, String user) {\n-\n-    // Sanity checks\n+  private synchronized void addApplication(ApplicationId applicationId,\n+      String queueName, String user) {\n+    // santiy checks.\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n+      String message \u003d \"Application \" + applicationId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n-      String message \u003d \"Application \" + applicationAttemptId + \n+      String message \u003d \"Application \" + applicationId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, message));\n       return;\n     }\n-\n-    // TODO: Fix store\n-    FiCaSchedulerApp SchedulerApp \u003d \n-        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n-            queue.getActiveUsersManager(), rmContext);\n-\n     // Submit to the queue\n     try {\n-      queue.submitApplication(SchedulerApp, user, queueName);\n+      queue.submitApplication(applicationId, user, queueName);\n     } catch (AccessControlException ace) {\n-      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n-          \" to queue \" + queueName + \" from user \" + user, ace);\n-      this.rmContext.getDispatcher().getEventHandler().handle(\n-          new RMAppAttemptRejectedEvent(applicationAttemptId, \n-              ace.toString()));\n+      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n+          + queueName + \" from user \" + user, ace);\n+      this.rmContext.getDispatcher().getEventHandler()\n+          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n       return;\n     }\n-\n-    applications.put(applicationAttemptId, SchedulerApp);\n-\n-    LOG.info(\"Application Submission: \" + applicationAttemptId + \n-        \", user: \" + user +\n-        \" queue: \" + queue +\n-        \", currently active: \" + applications.size());\n-\n-    rmContext.getDispatcher().getEventHandler().handle(\n-        new RMAppAttemptEvent(applicationAttemptId,\n-            RMAppAttemptEventType.APP_ACCEPTED));\n+    SchedulerApplication application \u003d\n+        new SchedulerApplication(queue, user);\n+    applications.put(applicationId, application);\n+    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n+        + \", in queue: \" + queueName);\n+    rmContext.getDispatcher().getEventHandler()\n+        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void addApplication(ApplicationId applicationId,\n      String queueName, String user) {\n    // santiy checks.\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, message));\n      return;\n    }\n    // Submit to the queue\n    try {\n      queue.submitApplication(applicationId, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationId + \" to queue \"\n          + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler()\n          .handle(new RMAppRejectedEvent(applicationId, ace.toString()));\n      return;\n    }\n    SchedulerApplication application \u003d\n        new SchedulerApplication(queue, user);\n    applications.put(applicationId, application);\n    LOG.info(\"Accepted application \" + applicationId + \" from user: \" + user\n        + \", in queue: \" + queueName);\n    rmContext.getDispatcher().getEventHandler()\n        .handle(new RMAppEvent(applicationId, RMAppEventType.APP_ACCEPTED));\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3": {
      "type": "Yrename",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550613 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 5:44 PM",
      "commitName": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:45 PM",
      "commitNameOld": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-      addApplication(ApplicationAttemptId applicationAttemptId,\n+      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "addApplication",
        "newValue": "addApplicationAttempt"
      }
    },
    "791e43c53b0be23b03d9b3f7d45a0df615eb90da": {
      "type": "Yrename",
      "commitMessage": "Reverting YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550594 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:45 PM",
      "commitName": "791e43c53b0be23b03d9b3f7d45a0df615eb90da",
      "commitAuthor": "Jian He",
      "commitDateOld": "12/12/13 3:07 PM",
      "commitNameOld": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n+      addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "addApplicationAttempt",
        "newValue": "addApplication"
      }
    },
    "38c32ed239d45051f5e4a51e3f29b201c17a4288": {
      "type": "Yrename",
      "commitMessage": "YARN-1311. Fixed app specific scheduler-events\u0027 names to be app-attempt based. Contributed by Vinod Kumar Vavilapalli\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550579 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/12/13 3:07 PM",
      "commitName": "38c32ed239d45051f5e4a51e3f29b201c17a4288",
      "commitAuthor": "Jian He",
      "commitDateOld": "07/12/13 7:09 PM",
      "commitNameOld": "e1d3670f4c233696dc673c37b578ce46b44a6876",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n-      addApplication(ApplicationAttemptId applicationAttemptId,\n+      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplicationAttempt(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldValue": "addApplication",
        "newValue": "addApplicationAttempt"
      }
    },
    "1943fdbec613715f3cdc3ca60cbd273115f28299": {
      "type": "Ybodychange",
      "commitMessage": "YARN-229. Remove old unused RM recovery code. Contributed by Bikas Saha.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415029 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/11/12 5:56 PM",
      "commitName": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "23/10/12 2:06 PM",
      "commitNameOld": "88d326f0a411442b75d1a95425f150621b51da59",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 36.2,
      "commitsBetweenForRepo": 178,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     FiCaSchedulerApp SchedulerApp \u003d \n         new FiCaSchedulerApp(applicationAttemptId, user, queue, \n-            queue.getActiveUsersManager(), rmContext, null);\n+            queue.getActiveUsersManager(), rmContext);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "09/03/12 3:34 PM",
      "commitNameOld": "ed4c222d5c0aeb4a46a2dd8a6342c85e88f31d3b",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 129.09,
      "commitsBetweenForRepo": 802,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n-    SchedulerApp SchedulerApp \u003d \n-        new SchedulerApp(applicationAttemptId, user, queue, \n+    FiCaSchedulerApp SchedulerApp \u003d \n+        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n             queue.getActiveUsersManager(), rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    FiCaSchedulerApp SchedulerApp \u003d \n        new FiCaSchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "5262b7ba4d018562d4e7d60772af4ddc3d770a23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3732. Modified CapacityScheduler to use only users with pending requests for computing user-limits. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1236953 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/12 5:32 PM",
      "commitName": "5262b7ba4d018562d4e7d60772af4ddc3d770a23",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/01/12 1:15 PM",
      "commitNameOld": "78ff0b720e0418785d53802a1b4e72085c1a3556",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 14.18,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     SchedulerApp SchedulerApp \u003d \n-        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n+        new SchedulerApp(applicationAttemptId, user, queue, \n+            queue.getActiveUsersManager(), rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, \n            queue.getActiveUsersManager(), rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "1f46b991da9b91585608a0babd3eda39485dce09": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2908. Fix all findbugs warnings. Contributed by Vinod K V. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166838 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 11:26 AM",
      "commitName": "1f46b991da9b91585608a0babd3eda39485dce09",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 10:54 PM",
      "commitNameOld": "0ecba04727b5c31182d29511646c8d3e6441300f",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 1.52,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n-    Queue queue \u003d getQueue(queueName);\n+    CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     SchedulerApp SchedulerApp \u003d \n         new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n       LOG.info(\"Failed to submit application \" + applicationAttemptId + \n           \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "0ecba04727b5c31182d29511646c8d3e6441300f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2938. Log application submission failure in CapacityScheduler\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166006 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/11 10:54 PM",
      "commitName": "0ecba04727b5c31182d29511646c8d3e6441300f",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "06/09/11 6:24 PM",
      "commitNameOld": "cdfabf5ae289836968b3d296668593b9500b6f26",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n       addApplication(ApplicationAttemptId applicationAttemptId,\n           String queueName, String user) {\n \n     // Sanity checks\n     Queue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       String message \u003d \"Application \" + applicationAttemptId + \n       \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n     if (!(queue instanceof LeafQueue)) {\n       String message \u003d \"Application \" + applicationAttemptId + \n           \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n       return;\n     }\n \n     // TODO: Fix store\n     SchedulerApp SchedulerApp \u003d \n         new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n \n     // Submit to the queue\n     try {\n       queue.submitApplication(SchedulerApp, user, queueName);\n     } catch (AccessControlException ace) {\n+      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n+          \" to queue \" + queueName + \" from user \" + user, ace);\n       this.rmContext.getDispatcher().getEventHandler().handle(\n           new RMAppAttemptRejectedEvent(applicationAttemptId, \n               ace.toString()));\n       return;\n     }\n \n     applications.put(applicationAttemptId, SchedulerApp);\n \n     LOG.info(\"Application Submission: \" + applicationAttemptId + \n         \", user: \" + user +\n         \" queue: \" + queue +\n         \", currently active: \" + applications.size());\n \n     rmContext.getDispatcher().getEventHandler().handle(\n         new RMAppAttemptEvent(applicationAttemptId,\n             RMAppAttemptEventType.APP_ACCEPTED));\n   }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    Queue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      LOG.info(\"Failed to submit application \" + applicationAttemptId + \n          \" to queue \" + queueName + \" from user \" + user, ace);\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    Queue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,45 @@\n+      addApplication(ApplicationAttemptId applicationAttemptId,\n+          String queueName, String user) {\n+\n+    // Sanity checks\n+    Queue queue \u003d getQueue(queueName);\n+    if (queue \u003d\u003d null) {\n+      String message \u003d \"Application \" + applicationAttemptId + \n+      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      return;\n+    }\n+    if (!(queue instanceof LeafQueue)) {\n+      String message \u003d \"Application \" + applicationAttemptId + \n+          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n+      return;\n+    }\n+\n+    // TODO: Fix store\n+    SchedulerApp SchedulerApp \u003d \n+        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n+\n+    // Submit to the queue\n+    try {\n+      queue.submitApplication(SchedulerApp, user, queueName);\n+    } catch (AccessControlException ace) {\n+      this.rmContext.getDispatcher().getEventHandler().handle(\n+          new RMAppAttemptRejectedEvent(applicationAttemptId, \n+              ace.toString()));\n+      return;\n+    }\n+\n+    applications.put(applicationAttemptId, SchedulerApp);\n+\n+    LOG.info(\"Application Submission: \" + applicationAttemptId + \n+        \", user: \" + user +\n+        \" queue: \" + queue +\n+        \", currently active: \" + applications.size());\n+\n+    rmContext.getDispatcher().getEventHandler().handle(\n+        new RMAppAttemptEvent(applicationAttemptId,\n+            RMAppAttemptEventType.APP_ACCEPTED));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "      addApplication(ApplicationAttemptId applicationAttemptId,\n          String queueName, String user) {\n\n    // Sanity checks\n    Queue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      String message \u003d \"Application \" + applicationAttemptId + \n      \" submitted by user \" + user + \" to unknown queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n    if (!(queue instanceof LeafQueue)) {\n      String message \u003d \"Application \" + applicationAttemptId + \n          \" submitted by user \" + user + \" to non-leaf queue: \" + queueName;\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, message));\n      return;\n    }\n\n    // TODO: Fix store\n    SchedulerApp SchedulerApp \u003d \n        new SchedulerApp(applicationAttemptId, user, queue, rmContext, null);\n\n    // Submit to the queue\n    try {\n      queue.submitApplication(SchedulerApp, user, queueName);\n    } catch (AccessControlException ace) {\n      this.rmContext.getDispatcher().getEventHandler().handle(\n          new RMAppAttemptRejectedEvent(applicationAttemptId, \n              ace.toString()));\n      return;\n    }\n\n    applications.put(applicationAttemptId, SchedulerApp);\n\n    LOG.info(\"Application Submission: \" + applicationAttemptId + \n        \", user: \" + user +\n        \" queue: \" + queue +\n        \", currently active: \" + applications.size());\n\n    rmContext.getDispatcher().getEventHandler().handle(\n        new RMAppAttemptEvent(applicationAttemptId,\n            RMAppAttemptEventType.APP_ACCEPTED));\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}