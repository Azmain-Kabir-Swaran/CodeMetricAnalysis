{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ProcessIdFileReader.java",
  "functionName": "getProcessId",
  "functionId": "getProcessId___path-Path",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
  "functionStartLine": 48,
  "functionEndLine": 103,
  "numCommitsSeen": 10,
  "timeTaken": 2705,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "310aa4686eb697f0700a71d33106514c404dab1b",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "1ff27f9d12e8124c1b9a722708264c5b07fd0fde",
    "41a548a916d4248164cb9495320f123ec215d70e",
    "638801cce16fc1dc3259c541dc30a599faaddda1",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "2fe343f96348e894e6ed16c447c8c77ba1611d11"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "310aa4686eb697f0700a71d33106514c404dab1b": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "1ff27f9d12e8124c1b9a722708264c5b07fd0fde": "Ybodychange",
    "41a548a916d4248164cb9495320f123ec215d70e": "Ybodychange",
    "638801cce16fc1dc3259c541dc30a599faaddda1": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "2fe343f96348e894e6ed16c447c8c77ba1611d11": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 570.63,
      "commitsBetweenForRepo": 4960,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,56 @@\n   public static String getProcessId(Path path) throws IOException {\n     if (path \u003d\u003d null) {\n       throw new IOException(\"Trying to access process id from a null path\");\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Accessing pid from pid file \" + path);\n-    }\n+    LOG.debug(\"Accessing pid from pid file {}\", path);\n     String processId \u003d null;\n     BufferedReader bufReader \u003d null;\n \n     try {\n       File file \u003d new File(path.toString());\n       if (file.exists()) {\n         FileInputStream fis \u003d new FileInputStream(file);\n         bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n         while (true) {\n           String line \u003d bufReader.readLine();\n           if (line \u003d\u003d null) {\n             break;\n           }\n           String temp \u003d line.trim(); \n           if (!temp.isEmpty()) {\n             if (Shell.WINDOWS) {\n               // On Windows, pid is expected to be a container ID, so find first\n               // line that parses successfully as a container ID.\n               try {\n                 ContainerId.fromString(temp);\n                 processId \u003d temp;\n                 break;\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n             else {\n               // Otherwise, find first line containing a numeric pid.\n               try {\n                 long pid \u003d Long.parseLong(temp);\n                 if (pid \u003e 0) {\n                   processId \u003d temp;\n                   break;\n                 }\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n           }\n         }\n       }\n     } finally {\n       if (bufReader !\u003d null) {\n         bufReader.close();\n       }\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Got pid \" + (processId !\u003d null ? processId : \"null\")\n-          + \" from path \" + path);\n-    }\n+    LOG.debug(\"Got pid {} from path {}\",\n+        (processId !\u003d null ? processId : \"null\"), path);\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    LOG.debug(\"Accessing pid from pid file {}\", path);\n    String processId \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        FileInputStream fis \u003d new FileInputStream(file);\n        bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            if (Shell.WINDOWS) {\n              // On Windows, pid is expected to be a container ID, so find first\n              // line that parses successfully as a container ID.\n              try {\n                ContainerId.fromString(temp);\n                processId \u003d temp;\n                break;\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n            else {\n              // Otherwise, find first line containing a numeric pid.\n              try {\n                long pid \u003d Long.parseLong(temp);\n                if (pid \u003e 0) {\n                  processId \u003d temp;\n                  break;\n                }\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n          }\n        }\n      }\n    } finally {\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    LOG.debug(\"Got pid {} from path {}\",\n        (processId !\u003d null ? processId : \"null\"), path);\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
      "extendedDetails": {}
    },
    "310aa4686eb697f0700a71d33106514c404dab1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5805. Add isDebugEnabled check for debug logs in nodemanager (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "01/11/16 2:21 AM",
      "commitName": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 139.47,
      "commitsBetweenForRepo": 1105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,60 @@\n   public static String getProcessId(Path path) throws IOException {\n     if (path \u003d\u003d null) {\n       throw new IOException(\"Trying to access process id from a null path\");\n     }\n-    \n-    LOG.debug(\"Accessing pid from pid file \" + path);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Accessing pid from pid file \" + path);\n+    }\n     String processId \u003d null;\n     BufferedReader bufReader \u003d null;\n \n     try {\n       File file \u003d new File(path.toString());\n       if (file.exists()) {\n         FileInputStream fis \u003d new FileInputStream(file);\n         bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n         while (true) {\n           String line \u003d bufReader.readLine();\n           if (line \u003d\u003d null) {\n             break;\n           }\n           String temp \u003d line.trim(); \n           if (!temp.isEmpty()) {\n             if (Shell.WINDOWS) {\n               // On Windows, pid is expected to be a container ID, so find first\n               // line that parses successfully as a container ID.\n               try {\n                 ContainerId.fromString(temp);\n                 processId \u003d temp;\n                 break;\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n             else {\n               // Otherwise, find first line containing a numeric pid.\n               try {\n                 long pid \u003d Long.parseLong(temp);\n                 if (pid \u003e 0) {\n                   processId \u003d temp;\n                   break;\n                 }\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n           }\n         }\n       }\n     } finally {\n       if (bufReader !\u003d null) {\n         bufReader.close();\n       }\n     }\n-    LOG.debug(\"Got pid \" \n-        + (processId !\u003d null? processId : \"null\")  \n-        + \" from path \" + path);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Got pid \" + (processId !\u003d null ? processId : \"null\")\n+          + \" from path \" + path);\n+    }\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Accessing pid from pid file \" + path);\n    }\n    String processId \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        FileInputStream fis \u003d new FileInputStream(file);\n        bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            if (Shell.WINDOWS) {\n              // On Windows, pid is expected to be a container ID, so find first\n              // line that parses successfully as a container ID.\n              try {\n                ContainerId.fromString(temp);\n                processId \u003d temp;\n                break;\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n            else {\n              // Otherwise, find first line containing a numeric pid.\n              try {\n                long pid \u003d Long.parseLong(temp);\n                if (pid \u003e 0) {\n                  processId \u003d temp;\n                  break;\n                }\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n          }\n        }\n      }\n    } finally {\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Got pid \" + (processId !\u003d null ? processId : \"null\")\n          + \" from path \" + path);\n    }\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "10/04/16 10:55 PM",
      "commitNameOld": "1ff27f9d12e8124c1b9a722708264c5b07fd0fde",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 64.67,
      "commitsBetweenForRepo": 422,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public static String getProcessId(Path path) throws IOException {\n     if (path \u003d\u003d null) {\n       throw new IOException(\"Trying to access process id from a null path\");\n     }\n     \n     LOG.debug(\"Accessing pid from pid file \" + path);\n     String processId \u003d null;\n     BufferedReader bufReader \u003d null;\n \n     try {\n       File file \u003d new File(path.toString());\n       if (file.exists()) {\n         FileInputStream fis \u003d new FileInputStream(file);\n         bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n         while (true) {\n           String line \u003d bufReader.readLine();\n           if (line \u003d\u003d null) {\n             break;\n           }\n           String temp \u003d line.trim(); \n           if (!temp.isEmpty()) {\n             if (Shell.WINDOWS) {\n               // On Windows, pid is expected to be a container ID, so find first\n               // line that parses successfully as a container ID.\n               try {\n-                ConverterUtils.toContainerId(temp);\n+                ContainerId.fromString(temp);\n                 processId \u003d temp;\n                 break;\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n             else {\n               // Otherwise, find first line containing a numeric pid.\n               try {\n                 long pid \u003d Long.parseLong(temp);\n                 if (pid \u003e 0) {\n                   processId \u003d temp;\n                   break;\n                 }\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n           }\n         }\n       }\n     } finally {\n       if (bufReader !\u003d null) {\n         bufReader.close();\n       }\n     }\n     LOG.debug(\"Got pid \" \n         + (processId !\u003d null? processId : \"null\")  \n         + \" from path \" + path);\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    \n    LOG.debug(\"Accessing pid from pid file \" + path);\n    String processId \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        FileInputStream fis \u003d new FileInputStream(file);\n        bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            if (Shell.WINDOWS) {\n              // On Windows, pid is expected to be a container ID, so find first\n              // line that parses successfully as a container ID.\n              try {\n                ContainerId.fromString(temp);\n                processId \u003d temp;\n                break;\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n            else {\n              // Otherwise, find first line containing a numeric pid.\n              try {\n                long pid \u003d Long.parseLong(temp);\n                if (pid \u003e 0) {\n                  processId \u003d temp;\n                  break;\n                }\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n          }\n        }\n      }\n    } finally {\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    LOG.debug(\"Got pid \" \n        + (processId !\u003d null? processId : \"null\")  \n        + \" from path \" + path);\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
      "extendedDetails": {}
    },
    "1ff27f9d12e8124c1b9a722708264c5b07fd0fde": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4630. Remove useless boxing/unboxing code. Contributed by Kousuke Saruta.\n",
      "commitDate": "10/04/16 10:55 PM",
      "commitName": "1ff27f9d12e8124c1b9a722708264c5b07fd0fde",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "23/12/14 8:32 PM",
      "commitNameOld": "41a548a916d4248164cb9495320f123ec215d70e",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 474.06,
      "commitsBetweenForRepo": 3617,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   public static String getProcessId(Path path) throws IOException {\n     if (path \u003d\u003d null) {\n       throw new IOException(\"Trying to access process id from a null path\");\n     }\n     \n     LOG.debug(\"Accessing pid from pid file \" + path);\n     String processId \u003d null;\n     BufferedReader bufReader \u003d null;\n \n     try {\n       File file \u003d new File(path.toString());\n       if (file.exists()) {\n         FileInputStream fis \u003d new FileInputStream(file);\n         bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n \n         while (true) {\n           String line \u003d bufReader.readLine();\n           if (line \u003d\u003d null) {\n             break;\n           }\n           String temp \u003d line.trim(); \n           if (!temp.isEmpty()) {\n             if (Shell.WINDOWS) {\n               // On Windows, pid is expected to be a container ID, so find first\n               // line that parses successfully as a container ID.\n               try {\n                 ConverterUtils.toContainerId(temp);\n                 processId \u003d temp;\n                 break;\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n             else {\n               // Otherwise, find first line containing a numeric pid.\n               try {\n-                Long pid \u003d Long.valueOf(temp);\n+                long pid \u003d Long.parseLong(temp);\n                 if (pid \u003e 0) {\n                   processId \u003d temp;\n                   break;\n                 }\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n           }\n         }\n       }\n     } finally {\n       if (bufReader !\u003d null) {\n         bufReader.close();\n       }\n     }\n     LOG.debug(\"Got pid \" \n         + (processId !\u003d null? processId : \"null\")  \n         + \" from path \" + path);\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    \n    LOG.debug(\"Accessing pid from pid file \" + path);\n    String processId \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        FileInputStream fis \u003d new FileInputStream(file);\n        bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            if (Shell.WINDOWS) {\n              // On Windows, pid is expected to be a container ID, so find first\n              // line that parses successfully as a container ID.\n              try {\n                ConverterUtils.toContainerId(temp);\n                processId \u003d temp;\n                break;\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n            else {\n              // Otherwise, find first line containing a numeric pid.\n              try {\n                long pid \u003d Long.parseLong(temp);\n                if (pid \u003e 0) {\n                  processId \u003d temp;\n                  break;\n                }\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n          }\n        }\n      }\n    } finally {\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    LOG.debug(\"Got pid \" \n        + (processId !\u003d null? processId : \"null\")  \n        + \" from path \" + path);\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
      "extendedDetails": {}
    },
    "41a548a916d4248164cb9495320f123ec215d70e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2937. Fixed new findbugs warnings in hadoop-yarn-nodemanager. Contributed by Varun Saxena.\n",
      "commitDate": "23/12/14 8:32 PM",
      "commitName": "41a548a916d4248164cb9495320f123ec215d70e",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "06/03/13 11:15 AM",
      "commitNameOld": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 657.39,
      "commitsBetweenForRepo": 4760,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,58 @@\n   public static String getProcessId(Path path) throws IOException {\n     if (path \u003d\u003d null) {\n       throw new IOException(\"Trying to access process id from a null path\");\n     }\n     \n     LOG.debug(\"Accessing pid from pid file \" + path);\n     String processId \u003d null;\n-    FileReader fileReader \u003d null;\n     BufferedReader bufReader \u003d null;\n \n     try {\n       File file \u003d new File(path.toString());\n       if (file.exists()) {\n-        fileReader \u003d new FileReader(file);\n-        bufReader \u003d new BufferedReader(fileReader);\n+        FileInputStream fis \u003d new FileInputStream(file);\n+        bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n+\n         while (true) {\n           String line \u003d bufReader.readLine();\n           if (line \u003d\u003d null) {\n             break;\n           }\n           String temp \u003d line.trim(); \n           if (!temp.isEmpty()) {\n             if (Shell.WINDOWS) {\n               // On Windows, pid is expected to be a container ID, so find first\n               // line that parses successfully as a container ID.\n               try {\n                 ConverterUtils.toContainerId(temp);\n                 processId \u003d temp;\n                 break;\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n             else {\n               // Otherwise, find first line containing a numeric pid.\n               try {\n                 Long pid \u003d Long.valueOf(temp);\n                 if (pid \u003e 0) {\n                   processId \u003d temp;\n                   break;\n                 }\n               } catch (Exception e) {\n                 // do nothing\n               }\n             }\n           }\n         }\n       }\n     } finally {\n-      if (fileReader !\u003d null) {\n-        fileReader.close();\n-      }\n       if (bufReader !\u003d null) {\n         bufReader.close();\n       }\n     }\n     LOG.debug(\"Got pid \" \n         + (processId !\u003d null? processId : \"null\")  \n         + \" from path \" + path);\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    \n    LOG.debug(\"Accessing pid from pid file \" + path);\n    String processId \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        FileInputStream fis \u003d new FileInputStream(file);\n        bufReader \u003d new BufferedReader(new InputStreamReader(fis, \"UTF-8\"));\n\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            if (Shell.WINDOWS) {\n              // On Windows, pid is expected to be a container ID, so find first\n              // line that parses successfully as a container ID.\n              try {\n                ConverterUtils.toContainerId(temp);\n                processId \u003d temp;\n                break;\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n            else {\n              // Otherwise, find first line containing a numeric pid.\n              try {\n                Long pid \u003d Long.valueOf(temp);\n                if (pid \u003e 0) {\n                  processId \u003d temp;\n                  break;\n                }\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n          }\n        }\n      }\n    } finally {\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    LOG.debug(\"Got pid \" \n        + (processId !\u003d null? processId : \"null\")  \n        + \" from path \" + path);\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
      "extendedDetails": {}
    },
    "638801cce16fc1dc3259c541dc30a599faaddda1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8952. Enhancements to support Hadoop on Windows Server and Windows Azure environments. Contributed by Ivan Mitic, Chuan Liu, Ramya Sunil, Bikas Saha, Kanna Karanam, John Gordon, Brandon Li, Chris Nauroth, David Lao, Sumadhur Reddy Bolli, Arpit Agarwal, Ahmed El Baz, Mike Liddell, Jing Zhao, Thejas Nair, Steve Maine, Ganeshan Iyer, Raja Aluri, Giridharan Kesavan, Ramya Bharathi Nimmagadda.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1453486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/03/13 11:15 AM",
      "commitName": "638801cce16fc1dc3259c541dc30a599faaddda1",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 210.58,
      "commitsBetweenForRepo": 1064,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,61 @@\n   public static String getProcessId(Path path) throws IOException {\n     if (path \u003d\u003d null) {\n       throw new IOException(\"Trying to access process id from a null path\");\n     }\n     \n     LOG.debug(\"Accessing pid from pid file \" + path);\n     String processId \u003d null;\n     FileReader fileReader \u003d null;\n     BufferedReader bufReader \u003d null;\n \n     try {\n       File file \u003d new File(path.toString());\n       if (file.exists()) {\n         fileReader \u003d new FileReader(file);\n         bufReader \u003d new BufferedReader(fileReader);\n         while (true) {\n           String line \u003d bufReader.readLine();\n           if (line \u003d\u003d null) {\n             break;\n           }\n           String temp \u003d line.trim(); \n           if (!temp.isEmpty()) {\n-            try {\n-              Long pid \u003d Long.valueOf(temp);\n-              if (pid \u003e 0) {\n+            if (Shell.WINDOWS) {\n+              // On Windows, pid is expected to be a container ID, so find first\n+              // line that parses successfully as a container ID.\n+              try {\n+                ConverterUtils.toContainerId(temp);\n                 processId \u003d temp;\n                 break;\n+              } catch (Exception e) {\n+                // do nothing\n               }\n-            } catch (Exception e) {\n-              // do nothing\n+            }\n+            else {\n+              // Otherwise, find first line containing a numeric pid.\n+              try {\n+                Long pid \u003d Long.valueOf(temp);\n+                if (pid \u003e 0) {\n+                  processId \u003d temp;\n+                  break;\n+                }\n+              } catch (Exception e) {\n+                // do nothing\n+              }\n             }\n           }\n         }\n       }\n     } finally {\n       if (fileReader !\u003d null) {\n         fileReader.close();\n       }\n       if (bufReader !\u003d null) {\n         bufReader.close();\n       }\n     }\n     LOG.debug(\"Got pid \" \n         + (processId !\u003d null? processId : \"null\")  \n         + \" from path \" + path);\n     return processId;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    \n    LOG.debug(\"Accessing pid from pid file \" + path);\n    String processId \u003d null;\n    FileReader fileReader \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        fileReader \u003d new FileReader(file);\n        bufReader \u003d new BufferedReader(fileReader);\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            if (Shell.WINDOWS) {\n              // On Windows, pid is expected to be a container ID, so find first\n              // line that parses successfully as a container ID.\n              try {\n                ConverterUtils.toContainerId(temp);\n                processId \u003d temp;\n                break;\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n            else {\n              // Otherwise, find first line containing a numeric pid.\n              try {\n                Long pid \u003d Long.valueOf(temp);\n                if (pid \u003e 0) {\n                  processId \u003d temp;\n                  break;\n                }\n              } catch (Exception e) {\n                // do nothing\n              }\n            }\n          }\n        }\n      }\n    } finally {\n      if (fileReader !\u003d null) {\n        fileReader.close();\n      }\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    LOG.debug(\"Got pid \" \n        + (processId !\u003d null? processId : \"null\")  \n        + \" from path \" + path);\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    \n    LOG.debug(\"Accessing pid from pid file \" + path);\n    String processId \u003d null;\n    FileReader fileReader \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        fileReader \u003d new FileReader(file);\n        bufReader \u003d new BufferedReader(fileReader);\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            try {\n              Long pid \u003d Long.valueOf(temp);\n              if (pid \u003e 0) {\n                processId \u003d temp;\n                break;\n              }\n            } catch (Exception e) {\n              // do nothing\n            }\n          }\n        }\n      }\n    } finally {\n      if (fileReader !\u003d null) {\n        fileReader.close();\n      }\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    LOG.debug(\"Got pid \" \n        + (processId !\u003d null? processId : \"null\")  \n        + \" from path \" + path);\n    return processId;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java"
      }
    },
    "2fe343f96348e894e6ed16c447c8c77ba1611d11": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3240. Fixed NodeManager to be able to forcefully cleanup its containers (process-trees) irrespective of whether the container succeeded, or killed. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 5:03 AM",
      "commitName": "2fe343f96348e894e6ed16c447c8c77ba1611d11",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,47 @@\n+  public static String getProcessId(Path path) throws IOException {\n+    if (path \u003d\u003d null) {\n+      throw new IOException(\"Trying to access process id from a null path\");\n+    }\n+    \n+    LOG.debug(\"Accessing pid from pid file \" + path);\n+    String processId \u003d null;\n+    FileReader fileReader \u003d null;\n+    BufferedReader bufReader \u003d null;\n+\n+    try {\n+      File file \u003d new File(path.toString());\n+      if (file.exists()) {\n+        fileReader \u003d new FileReader(file);\n+        bufReader \u003d new BufferedReader(fileReader);\n+        while (true) {\n+          String line \u003d bufReader.readLine();\n+          if (line \u003d\u003d null) {\n+            break;\n+          }\n+          String temp \u003d line.trim(); \n+          if (!temp.isEmpty()) {\n+            try {\n+              Long pid \u003d Long.valueOf(temp);\n+              if (pid \u003e 0) {\n+                processId \u003d temp;\n+                break;\n+              }\n+            } catch (Exception e) {\n+              // do nothing\n+            }\n+          }\n+        }\n+      }\n+    } finally {\n+      if (fileReader !\u003d null) {\n+        fileReader.close();\n+      }\n+      if (bufReader !\u003d null) {\n+        bufReader.close();\n+      }\n+    }\n+    LOG.debug(\"Got pid \" \n+        + (processId !\u003d null? processId : \"null\")  \n+        + \" from path \" + path);\n+    return processId;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getProcessId(Path path) throws IOException {\n    if (path \u003d\u003d null) {\n      throw new IOException(\"Trying to access process id from a null path\");\n    }\n    \n    LOG.debug(\"Accessing pid from pid file \" + path);\n    String processId \u003d null;\n    FileReader fileReader \u003d null;\n    BufferedReader bufReader \u003d null;\n\n    try {\n      File file \u003d new File(path.toString());\n      if (file.exists()) {\n        fileReader \u003d new FileReader(file);\n        bufReader \u003d new BufferedReader(fileReader);\n        while (true) {\n          String line \u003d bufReader.readLine();\n          if (line \u003d\u003d null) {\n            break;\n          }\n          String temp \u003d line.trim(); \n          if (!temp.isEmpty()) {\n            try {\n              Long pid \u003d Long.valueOf(temp);\n              if (pid \u003e 0) {\n                processId \u003d temp;\n                break;\n              }\n            } catch (Exception e) {\n              // do nothing\n            }\n          }\n        }\n      }\n    } finally {\n      if (fileReader !\u003d null) {\n        fileReader.close();\n      }\n      if (bufReader !\u003d null) {\n        bufReader.close();\n      }\n    }\n    LOG.debug(\"Got pid \" \n        + (processId !\u003d null? processId : \"null\")  \n        + \" from path \" + path);\n    return processId;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/util/ProcessIdFileReader.java"
    }
  }
}