{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "InMemoryAliasMap.java",
  "functionName": "list",
  "functionId": "list___marker-Optional__Block__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java",
  "functionStartLine": 130,
  "functionEndLine": 158,
  "numCommitsSeen": 7,
  "timeTaken": 1812,
  "changeHistory": [
    "80c3fec3a13c41051daaae42e5c9a9fedf5c7ee7",
    "9c35be86e17021202823bfd3c2067ff3b312ce5c",
    "352f994b6484524cdcfcda021046c59905b62f31"
  ],
  "changeHistoryShort": {
    "80c3fec3a13c41051daaae42e5c9a9fedf5c7ee7": "Ybodychange",
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": "Ybodychange",
    "352f994b6484524cdcfcda021046c59905b62f31": "Yintroduced"
  },
  "changeHistoryDetails": {
    "80c3fec3a13c41051daaae42e5c9a9fedf5c7ee7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12912. [READ] Fix configuration and implementation of LevelDB-based alias maps\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "80c3fec3a13c41051daaae42e5c9a9fedf5c7ee7",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,29 @@\n   public IterationResult list(Optional\u003cBlock\u003e marker) throws IOException {\n-    return withIterator((DBIterator iterator) -\u003e {\n+    try (DBIterator iterator \u003d levelDb.iterator()) {\n       Integer batchSize \u003d\n           conf.getInt(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE,\n               DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE_DEFAULT);\n       if (marker.isPresent()) {\n         iterator.seek(toProtoBufBytes(marker.get()));\n       } else {\n         iterator.seekToFirst();\n       }\n       int i \u003d 0;\n       ArrayList\u003cFileRegion\u003e batch \u003d\n           Lists.newArrayListWithExpectedSize(batchSize);\n       while (iterator.hasNext() \u0026\u0026 i \u003c batchSize) {\n         Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n         Block block \u003d fromBlockBytes(entry.getKey());\n         ProvidedStorageLocation providedStorageLocation \u003d\n             fromProvidedStorageLocationBytes(entry.getValue());\n         batch.add(new FileRegion(block, providedStorageLocation));\n         ++i;\n       }\n       if (iterator.hasNext()) {\n         Block nextMarker \u003d fromBlockBytes(iterator.next().getKey());\n         return new IterationResult(batch, Optional.of(nextMarker));\n       } else {\n         return new IterationResult(batch, Optional.empty());\n       }\n-\n-    });\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IterationResult list(Optional\u003cBlock\u003e marker) throws IOException {\n    try (DBIterator iterator \u003d levelDb.iterator()) {\n      Integer batchSize \u003d\n          conf.getInt(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE,\n              DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE_DEFAULT);\n      if (marker.isPresent()) {\n        iterator.seek(toProtoBufBytes(marker.get()));\n      } else {\n        iterator.seekToFirst();\n      }\n      int i \u003d 0;\n      ArrayList\u003cFileRegion\u003e batch \u003d\n          Lists.newArrayListWithExpectedSize(batchSize);\n      while (iterator.hasNext() \u0026\u0026 i \u003c batchSize) {\n        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n        Block block \u003d fromBlockBytes(entry.getKey());\n        ProvidedStorageLocation providedStorageLocation \u003d\n            fromProvidedStorageLocationBytes(entry.getValue());\n        batch.add(new FileRegion(block, providedStorageLocation));\n        ++i;\n      }\n      if (iterator.hasNext()) {\n        Block nextMarker \u003d fromBlockBytes(iterator.next().getKey());\n        return new IterationResult(batch, Optional.of(nextMarker));\n      } else {\n        return new IterationResult(batch, Optional.empty());\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java",
      "extendedDetails": {}
    },
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12713. [READ] Refactor FileRegion and BlockAliasMap to separate out HDFS metadata and PROVIDED storage metadata. Contributed by Ewan Higgs\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "a027055dd2bf5009fe272e9ceb08305bd0a8cc31",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public IterationResult list(Optional\u003cBlock\u003e marker) throws IOException {\n     return withIterator((DBIterator iterator) -\u003e {\n       Integer batchSize \u003d\n           conf.getInt(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE,\n               DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE_DEFAULT);\n       if (marker.isPresent()) {\n         iterator.seek(toProtoBufBytes(marker.get()));\n       } else {\n         iterator.seekToFirst();\n       }\n       int i \u003d 0;\n       ArrayList\u003cFileRegion\u003e batch \u003d\n           Lists.newArrayListWithExpectedSize(batchSize);\n       while (iterator.hasNext() \u0026\u0026 i \u003c batchSize) {\n         Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n         Block block \u003d fromBlockBytes(entry.getKey());\n         ProvidedStorageLocation providedStorageLocation \u003d\n             fromProvidedStorageLocationBytes(entry.getValue());\n-        batch.add(new FileRegion(block, providedStorageLocation, null));\n+        batch.add(new FileRegion(block, providedStorageLocation));\n         ++i;\n       }\n       if (iterator.hasNext()) {\n         Block nextMarker \u003d fromBlockBytes(iterator.next().getKey());\n         return new IterationResult(batch, Optional.of(nextMarker));\n       } else {\n         return new IterationResult(batch, Optional.empty());\n       }\n \n     });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public IterationResult list(Optional\u003cBlock\u003e marker) throws IOException {\n    return withIterator((DBIterator iterator) -\u003e {\n      Integer batchSize \u003d\n          conf.getInt(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE,\n              DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE_DEFAULT);\n      if (marker.isPresent()) {\n        iterator.seek(toProtoBufBytes(marker.get()));\n      } else {\n        iterator.seekToFirst();\n      }\n      int i \u003d 0;\n      ArrayList\u003cFileRegion\u003e batch \u003d\n          Lists.newArrayListWithExpectedSize(batchSize);\n      while (iterator.hasNext() \u0026\u0026 i \u003c batchSize) {\n        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n        Block block \u003d fromBlockBytes(entry.getKey());\n        ProvidedStorageLocation providedStorageLocation \u003d\n            fromProvidedStorageLocationBytes(entry.getValue());\n        batch.add(new FileRegion(block, providedStorageLocation));\n        ++i;\n      }\n      if (iterator.hasNext()) {\n        Block nextMarker \u003d fromBlockBytes(iterator.next().getKey());\n        return new IterationResult(batch, Optional.of(nextMarker));\n      } else {\n        return new IterationResult(batch, Optional.empty());\n      }\n\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java",
      "extendedDetails": {}
    },
    "352f994b6484524cdcfcda021046c59905b62f31": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12665. [AliasMap] Create a version of the AliasMap that runs in memory in the Namenode (leveldb). Contributed by Ewan Higgs.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "352f994b6484524cdcfcda021046c59905b62f31",
      "commitAuthor": "Virajith Jalaparti",
      "diff": "@@ -0,0 +1,30 @@\n+  public IterationResult list(Optional\u003cBlock\u003e marker) throws IOException {\n+    return withIterator((DBIterator iterator) -\u003e {\n+      Integer batchSize \u003d\n+          conf.getInt(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE,\n+              DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE_DEFAULT);\n+      if (marker.isPresent()) {\n+        iterator.seek(toProtoBufBytes(marker.get()));\n+      } else {\n+        iterator.seekToFirst();\n+      }\n+      int i \u003d 0;\n+      ArrayList\u003cFileRegion\u003e batch \u003d\n+          Lists.newArrayListWithExpectedSize(batchSize);\n+      while (iterator.hasNext() \u0026\u0026 i \u003c batchSize) {\n+        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n+        Block block \u003d fromBlockBytes(entry.getKey());\n+        ProvidedStorageLocation providedStorageLocation \u003d\n+            fromProvidedStorageLocationBytes(entry.getValue());\n+        batch.add(new FileRegion(block, providedStorageLocation, null));\n+        ++i;\n+      }\n+      if (iterator.hasNext()) {\n+        Block nextMarker \u003d fromBlockBytes(iterator.next().getKey());\n+        return new IterationResult(batch, Optional.of(nextMarker));\n+      } else {\n+        return new IterationResult(batch, Optional.empty());\n+      }\n+\n+    });\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public IterationResult list(Optional\u003cBlock\u003e marker) throws IOException {\n    return withIterator((DBIterator iterator) -\u003e {\n      Integer batchSize \u003d\n          conf.getInt(DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE,\n              DFSConfigKeys.DFS_PROVIDED_ALIASMAP_INMEMORY_BATCH_SIZE_DEFAULT);\n      if (marker.isPresent()) {\n        iterator.seek(toProtoBufBytes(marker.get()));\n      } else {\n        iterator.seekToFirst();\n      }\n      int i \u003d 0;\n      ArrayList\u003cFileRegion\u003e batch \u003d\n          Lists.newArrayListWithExpectedSize(batchSize);\n      while (iterator.hasNext() \u0026\u0026 i \u003c batchSize) {\n        Map.Entry\u003cbyte[], byte[]\u003e entry \u003d iterator.next();\n        Block block \u003d fromBlockBytes(entry.getKey());\n        ProvidedStorageLocation providedStorageLocation \u003d\n            fromProvidedStorageLocationBytes(entry.getValue());\n        batch.add(new FileRegion(block, providedStorageLocation, null));\n        ++i;\n      }\n      if (iterator.hasNext()) {\n        Block nextMarker \u003d fromBlockBytes(iterator.next().getKey());\n        return new IterationResult(batch, Optional.of(nextMarker));\n      } else {\n        return new IterationResult(batch, Optional.empty());\n      }\n\n    });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/aliasmap/InMemoryAliasMap.java"
    }
  }
}