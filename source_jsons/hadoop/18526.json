{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Modular.java",
  "functionName": "mod",
  "functionId": "mod___e-long__n-long",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/math/Modular.java",
  "functionStartLine": 25,
  "functionEndLine": 71,
  "numCommitsSeen": 5,
  "timeTaken": 4564,
  "changeHistory": [
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static long mod(long e, long n) {\n    final int HALF \u003d (63 - Long.numberOfLeadingZeros(n)) \u003e\u003e 1;\n    final int FULL \u003d HALF \u003c\u003c 1;\n    final long ONES \u003d (1 \u003c\u003c HALF) - 1; \n\n    long r \u003d 2;\n    for (long mask \u003d Long.highestOneBit(e) \u003e\u003e 1; mask \u003e 0; mask \u003e\u003e\u003d 1) {\n      if (r \u003c\u003d MAX_SQRT_LONG) {\n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n      } else {\n        // r^2 will overflow\n        final long high \u003d r \u003e\u003e\u003e HALF;\n        final long low  \u003d r \u0026\u003d ONES;\n        \n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n\n        if (high !\u003d 0) {\n          long s \u003d high * high;\n          if (s \u003e\u003d n) s %\u003d n;\n          for(int i \u003d 0; i \u003c FULL; i++)\n            if ((s \u003c\u003c\u003d 1) \u003e\u003d n) s -\u003d n;\n          \n          if (low \u003d\u003d 0)\n            r \u003d s;\n          else {\n            long t \u003d high * low;\n            if (t \u003e\u003d n) t %\u003d n;\n            for(int i \u003d -1; i \u003c HALF; i++)\n              if ((t \u003c\u003c\u003d 1) \u003e\u003d n) t -\u003d n;\n            \n            r +\u003d s;\n            if (r \u003e\u003d n) r -\u003d n;\n            r +\u003d t;\n            if (r \u003e\u003d n) r -\u003d n;\n          }\n        }\n      }\n\n      if ((e \u0026 mask) !\u003d 0) {\n        r \u003c\u003c\u003d 1;\n        if (r \u003e\u003d n) r -\u003d n;\n      }\n    }\n    return r;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/math/Modular.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/pi/math/Modular.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/pi/math/Modular.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static long mod(long e, long n) {\n    final int HALF \u003d (63 - Long.numberOfLeadingZeros(n)) \u003e\u003e 1;\n    final int FULL \u003d HALF \u003c\u003c 1;\n    final long ONES \u003d (1 \u003c\u003c HALF) - 1; \n\n    long r \u003d 2;\n    for (long mask \u003d Long.highestOneBit(e) \u003e\u003e 1; mask \u003e 0; mask \u003e\u003e\u003d 1) {\n      if (r \u003c\u003d MAX_SQRT_LONG) {\n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n      } else {\n        // r^2 will overflow\n        final long high \u003d r \u003e\u003e\u003e HALF;\n        final long low  \u003d r \u0026\u003d ONES;\n        \n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n\n        if (high !\u003d 0) {\n          long s \u003d high * high;\n          if (s \u003e\u003d n) s %\u003d n;\n          for(int i \u003d 0; i \u003c FULL; i++)\n            if ((s \u003c\u003c\u003d 1) \u003e\u003d n) s -\u003d n;\n          \n          if (low \u003d\u003d 0)\n            r \u003d s;\n          else {\n            long t \u003d high * low;\n            if (t \u003e\u003d n) t %\u003d n;\n            for(int i \u003d -1; i \u003c HALF; i++)\n              if ((t \u003c\u003c\u003d 1) \u003e\u003d n) t -\u003d n;\n            \n            r +\u003d s;\n            if (r \u003e\u003d n) r -\u003d n;\n            r +\u003d t;\n            if (r \u003e\u003d n) r -\u003d n;\n          }\n        }\n      }\n\n      if ((e \u0026 mask) !\u003d 0) {\n        r \u003c\u003c\u003d 1;\n        if (r \u003e\u003d n) r -\u003d n;\n      }\n    }\n    return r;\n  }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/pi/math/Modular.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/pi/math/Modular.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/pi/math/Modular.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static long mod(long e, long n) {\n    final int HALF \u003d (63 - Long.numberOfLeadingZeros(n)) \u003e\u003e 1;\n    final int FULL \u003d HALF \u003c\u003c 1;\n    final long ONES \u003d (1 \u003c\u003c HALF) - 1; \n\n    long r \u003d 2;\n    for (long mask \u003d Long.highestOneBit(e) \u003e\u003e 1; mask \u003e 0; mask \u003e\u003e\u003d 1) {\n      if (r \u003c\u003d MAX_SQRT_LONG) {\n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n      } else {\n        // r^2 will overflow\n        final long high \u003d r \u003e\u003e\u003e HALF;\n        final long low  \u003d r \u0026\u003d ONES;\n        \n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n\n        if (high !\u003d 0) {\n          long s \u003d high * high;\n          if (s \u003e\u003d n) s %\u003d n;\n          for(int i \u003d 0; i \u003c FULL; i++)\n            if ((s \u003c\u003c\u003d 1) \u003e\u003d n) s -\u003d n;\n          \n          if (low \u003d\u003d 0)\n            r \u003d s;\n          else {\n            long t \u003d high * low;\n            if (t \u003e\u003d n) t %\u003d n;\n            for(int i \u003d -1; i \u003c HALF; i++)\n              if ((t \u003c\u003c\u003d 1) \u003e\u003d n) t -\u003d n;\n            \n            r +\u003d s;\n            if (r \u003e\u003d n) r -\u003d n;\n            r +\u003d t;\n            if (r \u003e\u003d n) r -\u003d n;\n          }\n        }\n      }\n\n      if ((e \u0026 mask) !\u003d 0) {\n        r \u003c\u003c\u003d 1;\n        if (r \u003e\u003d n) r -\u003d n;\n      }\n    }\n    return r;\n  }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/pi/math/Modular.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/pi/math/Modular.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/pi/math/Modular.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,47 @@\n+  public static long mod(long e, long n) {\n+    final int HALF \u003d (63 - Long.numberOfLeadingZeros(n)) \u003e\u003e 1;\n+    final int FULL \u003d HALF \u003c\u003c 1;\n+    final long ONES \u003d (1 \u003c\u003c HALF) - 1; \n+\n+    long r \u003d 2;\n+    for (long mask \u003d Long.highestOneBit(e) \u003e\u003e 1; mask \u003e 0; mask \u003e\u003e\u003d 1) {\n+      if (r \u003c\u003d MAX_SQRT_LONG) {\n+        r *\u003d r;\n+        if (r \u003e\u003d n) r %\u003d n;\n+      } else {\n+        // r^2 will overflow\n+        final long high \u003d r \u003e\u003e\u003e HALF;\n+        final long low  \u003d r \u0026\u003d ONES;\n+        \n+        r *\u003d r;\n+        if (r \u003e\u003d n) r %\u003d n;\n+\n+        if (high !\u003d 0) {\n+          long s \u003d high * high;\n+          if (s \u003e\u003d n) s %\u003d n;\n+          for(int i \u003d 0; i \u003c FULL; i++)\n+            if ((s \u003c\u003c\u003d 1) \u003e\u003d n) s -\u003d n;\n+          \n+          if (low \u003d\u003d 0)\n+            r \u003d s;\n+          else {\n+            long t \u003d high * low;\n+            if (t \u003e\u003d n) t %\u003d n;\n+            for(int i \u003d -1; i \u003c HALF; i++)\n+              if ((t \u003c\u003c\u003d 1) \u003e\u003d n) t -\u003d n;\n+            \n+            r +\u003d s;\n+            if (r \u003e\u003d n) r -\u003d n;\n+            r +\u003d t;\n+            if (r \u003e\u003d n) r -\u003d n;\n+          }\n+        }\n+      }\n+\n+      if ((e \u0026 mask) !\u003d 0) {\n+        r \u003c\u003c\u003d 1;\n+        if (r \u003e\u003d n) r -\u003d n;\n+      }\n+    }\n+    return r;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static long mod(long e, long n) {\n    final int HALF \u003d (63 - Long.numberOfLeadingZeros(n)) \u003e\u003e 1;\n    final int FULL \u003d HALF \u003c\u003c 1;\n    final long ONES \u003d (1 \u003c\u003c HALF) - 1; \n\n    long r \u003d 2;\n    for (long mask \u003d Long.highestOneBit(e) \u003e\u003e 1; mask \u003e 0; mask \u003e\u003e\u003d 1) {\n      if (r \u003c\u003d MAX_SQRT_LONG) {\n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n      } else {\n        // r^2 will overflow\n        final long high \u003d r \u003e\u003e\u003e HALF;\n        final long low  \u003d r \u0026\u003d ONES;\n        \n        r *\u003d r;\n        if (r \u003e\u003d n) r %\u003d n;\n\n        if (high !\u003d 0) {\n          long s \u003d high * high;\n          if (s \u003e\u003d n) s %\u003d n;\n          for(int i \u003d 0; i \u003c FULL; i++)\n            if ((s \u003c\u003c\u003d 1) \u003e\u003d n) s -\u003d n;\n          \n          if (low \u003d\u003d 0)\n            r \u003d s;\n          else {\n            long t \u003d high * low;\n            if (t \u003e\u003d n) t %\u003d n;\n            for(int i \u003d -1; i \u003c HALF; i++)\n              if ((t \u003c\u003c\u003d 1) \u003e\u003d n) t -\u003d n;\n            \n            r +\u003d s;\n            if (r \u003e\u003d n) r -\u003d n;\n            r +\u003d t;\n            if (r \u003e\u003d n) r -\u003d n;\n          }\n        }\n      }\n\n      if ((e \u0026 mask) !\u003d 0) {\n        r \u003c\u003c\u003d 1;\n        if (r \u003e\u003d n) r -\u003d n;\n      }\n    }\n    return r;\n  }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/pi/math/Modular.java"
    }
  }
}