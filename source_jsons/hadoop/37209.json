{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IterativePlanner.java",
  "functionName": "isNonPreemptiveAllocation",
  "functionId": "isNonPreemptiveAllocation___curAlloc-Map__ReservationInterval,Resource__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
  "functionStartLine": 264,
  "functionEndLine": 305,
  "numCommitsSeen": 6,
  "timeTaken": 1667,
  "changeHistory": [
    "a3a615eeab8c14ccdc548311097e62a916963dc5",
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97"
  ],
  "changeHistoryShort": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Ymodifierchange",
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "10/02/16 9:11 AM",
      "commitNameOld": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 446.24,
      "commitsBetweenForRepo": 2940,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n-  private boolean isNonPreemptiveAllocation(\n+  private static boolean isNonPreemptiveAllocation(\n       Map\u003cReservationInterval, Resource\u003e curAlloc) {\n \n     // Checks whether a stage allocation is non preemptive or not.\n     // Assumption: the intervals are non-intersecting (as returned by\n     // computeStageAllocation()).\n     // For a non-preemptive allocation, only two end points appear exactly once\n \n     Set\u003cLong\u003e endPoints \u003d new HashSet\u003cLong\u003e(2 * curAlloc.size());\n     for (Entry\u003cReservationInterval, Resource\u003e entry : curAlloc.entrySet()) {\n \n       ReservationInterval interval \u003d entry.getKey();\n       Resource resource \u003d entry.getValue();\n \n       // Ignore intervals with no allocation\n       if (Resources.equals(resource, Resource.newInstance(0, 0))) {\n         continue;\n       }\n \n       // Get endpoints\n       Long left \u003d interval.getStartTime();\n       Long right \u003d interval.getEndTime();\n \n       // Add left endpoint if we haven\u0027t seen it before, remove otherwise\n       if (!endPoints.contains(left)) {\n         endPoints.add(left);\n       } else {\n         endPoints.remove(left);\n       }\n \n       // Add right endpoint if we haven\u0027t seen it before, remove otherwise\n       if (!endPoints.contains(right)) {\n         endPoints.add(right);\n       } else {\n         endPoints.remove(right);\n       }\n     }\n \n     // Non-preemptive only if endPoints is of size 2\n     return (endPoints.size() \u003d\u003d 2);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean isNonPreemptiveAllocation(\n      Map\u003cReservationInterval, Resource\u003e curAlloc) {\n\n    // Checks whether a stage allocation is non preemptive or not.\n    // Assumption: the intervals are non-intersecting (as returned by\n    // computeStageAllocation()).\n    // For a non-preemptive allocation, only two end points appear exactly once\n\n    Set\u003cLong\u003e endPoints \u003d new HashSet\u003cLong\u003e(2 * curAlloc.size());\n    for (Entry\u003cReservationInterval, Resource\u003e entry : curAlloc.entrySet()) {\n\n      ReservationInterval interval \u003d entry.getKey();\n      Resource resource \u003d entry.getValue();\n\n      // Ignore intervals with no allocation\n      if (Resources.equals(resource, Resource.newInstance(0, 0))) {\n        continue;\n      }\n\n      // Get endpoints\n      Long left \u003d interval.getStartTime();\n      Long right \u003d interval.getEndTime();\n\n      // Add left endpoint if we haven\u0027t seen it before, remove otherwise\n      if (!endPoints.contains(left)) {\n        endPoints.add(left);\n      } else {\n        endPoints.remove(left);\n      }\n\n      // Add right endpoint if we haven\u0027t seen it before, remove otherwise\n      if (!endPoints.contains(right)) {\n        endPoints.add(right);\n      } else {\n        endPoints.remove(right);\n      }\n    }\n\n    // Non-preemptive only if endPoints is of size 2\n    return (endPoints.size() \u003d\u003d 2);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "5cf5c41a895f5ab8bf6270089f8cfdea50573a97": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4360. Improve GreedyReservationAgent to support \"early\" allocations, and performance improvements (curino via asuresh)\n",
      "commitDate": "10/02/16 9:11 AM",
      "commitName": "5cf5c41a895f5ab8bf6270089f8cfdea50573a97",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,42 @@\n+  private boolean isNonPreemptiveAllocation(\n+      Map\u003cReservationInterval, Resource\u003e curAlloc) {\n+\n+    // Checks whether a stage allocation is non preemptive or not.\n+    // Assumption: the intervals are non-intersecting (as returned by\n+    // computeStageAllocation()).\n+    // For a non-preemptive allocation, only two end points appear exactly once\n+\n+    Set\u003cLong\u003e endPoints \u003d new HashSet\u003cLong\u003e(2 * curAlloc.size());\n+    for (Entry\u003cReservationInterval, Resource\u003e entry : curAlloc.entrySet()) {\n+\n+      ReservationInterval interval \u003d entry.getKey();\n+      Resource resource \u003d entry.getValue();\n+\n+      // Ignore intervals with no allocation\n+      if (Resources.equals(resource, Resource.newInstance(0, 0))) {\n+        continue;\n+      }\n+\n+      // Get endpoints\n+      Long left \u003d interval.getStartTime();\n+      Long right \u003d interval.getEndTime();\n+\n+      // Add left endpoint if we haven\u0027t seen it before, remove otherwise\n+      if (!endPoints.contains(left)) {\n+        endPoints.add(left);\n+      } else {\n+        endPoints.remove(left);\n+      }\n+\n+      // Add right endpoint if we haven\u0027t seen it before, remove otherwise\n+      if (!endPoints.contains(right)) {\n+        endPoints.add(right);\n+      } else {\n+        endPoints.remove(right);\n+      }\n+    }\n+\n+    // Non-preemptive only if endPoints is of size 2\n+    return (endPoints.size() \u003d\u003d 2);\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isNonPreemptiveAllocation(\n      Map\u003cReservationInterval, Resource\u003e curAlloc) {\n\n    // Checks whether a stage allocation is non preemptive or not.\n    // Assumption: the intervals are non-intersecting (as returned by\n    // computeStageAllocation()).\n    // For a non-preemptive allocation, only two end points appear exactly once\n\n    Set\u003cLong\u003e endPoints \u003d new HashSet\u003cLong\u003e(2 * curAlloc.size());\n    for (Entry\u003cReservationInterval, Resource\u003e entry : curAlloc.entrySet()) {\n\n      ReservationInterval interval \u003d entry.getKey();\n      Resource resource \u003d entry.getValue();\n\n      // Ignore intervals with no allocation\n      if (Resources.equals(resource, Resource.newInstance(0, 0))) {\n        continue;\n      }\n\n      // Get endpoints\n      Long left \u003d interval.getStartTime();\n      Long right \u003d interval.getEndTime();\n\n      // Add left endpoint if we haven\u0027t seen it before, remove otherwise\n      if (!endPoints.contains(left)) {\n        endPoints.add(left);\n      } else {\n        endPoints.remove(left);\n      }\n\n      // Add right endpoint if we haven\u0027t seen it before, remove otherwise\n      if (!endPoints.contains(right)) {\n        endPoints.add(right);\n      } else {\n        endPoints.remove(right);\n      }\n    }\n\n    // Non-preemptive only if endPoints is of size 2\n    return (endPoints.size() \u003d\u003d 2);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java"
    }
  }
}