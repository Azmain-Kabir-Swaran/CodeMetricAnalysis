{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobHistoryEventHandler.java",
  "functionName": "setupEventWriter",
  "functionId": "setupEventWriter___jobId-JobId__amStartedEvent-AMStartedEvent",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
  "functionStartLine": 516,
  "functionEndLine": 584,
  "numCommitsSeen": 135,
  "timeTaken": 9319,
  "changeHistory": [
    "4aba858750900de25940c16211c21de4addd1926",
    "bf70c5ae2824a9139c1aa9d7c14020018881cec2",
    "8d41b363b85105630623b07b909b83775ffda384",
    "6015e9594180f157472a88030c85c5599fdc289c",
    "74697f231772a556884feaf1c986631d02a9ae4e",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "4aba858750900de25940c16211c21de4addd1926": "Ybodychange",
    "bf70c5ae2824a9139c1aa9d7c14020018881cec2": "Ymultichange(Yparameterchange,Ybodychange)",
    "8d41b363b85105630623b07b909b83775ffda384": "Ybodychange",
    "6015e9594180f157472a88030c85c5599fdc289c": "Ymultichange(Yparameterchange,Ybodychange)",
    "74697f231772a556884feaf1c986631d02a9ae4e": "Ybodychange",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4aba858750900de25940c16211c21de4addd1926": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6741. Add MR support to redact job conf properties. Contributed by Haibo Chen\n",
      "commitDate": "09/08/16 8:55 AM",
      "commitName": "4aba858750900de25940c16211c21de4addd1926",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "6cf6ab7b780de2b0c2c9ea730e1f366965a0d682",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 30.01,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,69 @@\n   protected void setupEventWriter(JobId jobId, AMStartedEvent amStartedEvent)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n     Path logDirConfPath \u003d\n         JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         writer \u003d createEventWriter(historyFile);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n       \n       //Write out conf only if the writer isn\u0027t already setup.\n       if (conf !\u003d null) {\n         // TODO Ideally this should be written out to the job dir\n         // (.staging/jobid/files - RecoveryService will need to be patched)\n-        FSDataOutputStream jobFileOut \u003d null;\n-        try {\n-          if (logDirConfPath !\u003d null) {\n-            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n-            conf.writeXml(jobFileOut);\n-            jobFileOut.close();\n+        if (logDirConfPath !\u003d null) {\n+          Configuration redactedConf \u003d new Configuration(conf);\n+          MRJobConfUtil.redact(redactedConf);\n+          try (FSDataOutputStream jobFileOut \u003d stagingDirFS\n+              .create(logDirConfPath, true)) {\n+            redactedConf.writeXml(jobFileOut);\n+          } catch (IOException e) {\n+            LOG.info(\"Failed to write the job configuration file\", e);\n+            throw e;\n           }\n-        } catch (IOException e) {\n-          LOG.info(\"Failed to write the job configuration file\", e);\n-          throw e;\n         }\n       }\n     }\n \n     String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n     if (conf !\u003d null) {\n       queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n     }\n \n     MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n         user, jobName, jobId, amStartedEvent.getForcedJobStateOnShutDown(),\n         queueName);\n     fi.getJobSummary().setJobId(jobId);\n     fi.getJobSummary().setJobLaunchTime(amStartedEvent.getStartTime());\n     fi.getJobSummary().setJobSubmitTime(amStartedEvent.getSubmitTime());\n     fi.getJobIndexInfo().setJobStartTime(amStartedEvent.getStartTime());\n     fi.getJobIndexInfo().setSubmitTime(amStartedEvent.getSubmitTime());\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setupEventWriter(JobId jobId, AMStartedEvent amStartedEvent)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        writer \u003d createEventWriter(historyFile);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        if (logDirConfPath !\u003d null) {\n          Configuration redactedConf \u003d new Configuration(conf);\n          MRJobConfUtil.redact(redactedConf);\n          try (FSDataOutputStream jobFileOut \u003d stagingDirFS\n              .create(logDirConfPath, true)) {\n            redactedConf.writeXml(jobFileOut);\n          } catch (IOException e) {\n            LOG.info(\"Failed to write the job configuration file\", e);\n            throw e;\n          }\n        }\n      }\n    }\n\n    String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n    if (conf !\u003d null) {\n      queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId, amStartedEvent.getForcedJobStateOnShutDown(),\n        queueName);\n    fi.getJobSummary().setJobId(jobId);\n    fi.getJobSummary().setJobLaunchTime(amStartedEvent.getStartTime());\n    fi.getJobSummary().setJobSubmitTime(amStartedEvent.getSubmitTime());\n    fi.getJobIndexInfo().setJobStartTime(amStartedEvent.getStartTime());\n    fi.getJobIndexInfo().setSubmitTime(amStartedEvent.getSubmitTime());\n    fileMap.put(jobId, fi);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "bf70c5ae2824a9139c1aa9d7c14020018881cec2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-6259. IllegalArgumentException due to missing job submit time. Contributed by zhihai xu\n",
      "commitDate": "04/05/15 1:39 PM",
      "commitName": "bf70c5ae2824a9139c1aa9d7c14020018881cec2",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-6259. IllegalArgumentException due to missing job submit time. Contributed by zhihai xu\n",
          "commitDate": "04/05/15 1:39 PM",
          "commitName": "bf70c5ae2824a9139c1aa9d7c14020018881cec2",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "30/04/15 12:03 AM",
          "commitNameOld": "f5b38477f9d0827b238fadd260c1dd2889531fd4",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 4.57,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,69 @@\n-  protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n+  protected void setupEventWriter(JobId jobId, AMStartedEvent amStartedEvent)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n     Path logDirConfPath \u003d\n         JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         writer \u003d createEventWriter(historyFile);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n       \n       //Write out conf only if the writer isn\u0027t already setup.\n       if (conf !\u003d null) {\n         // TODO Ideally this should be written out to the job dir\n         // (.staging/jobid/files - RecoveryService will need to be patched)\n         FSDataOutputStream jobFileOut \u003d null;\n         try {\n           if (logDirConfPath !\u003d null) {\n             jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n             conf.writeXml(jobFileOut);\n             jobFileOut.close();\n           }\n         } catch (IOException e) {\n           LOG.info(\"Failed to write the job configuration file\", e);\n           throw e;\n         }\n       }\n     }\n \n     String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n     if (conf !\u003d null) {\n       queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n     }\n \n     MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n-        user, jobName, jobId, forcedJobStateOnShutDown, queueName);\n+        user, jobName, jobId, amStartedEvent.getForcedJobStateOnShutDown(),\n+        queueName);\n     fi.getJobSummary().setJobId(jobId);\n+    fi.getJobSummary().setJobLaunchTime(amStartedEvent.getStartTime());\n+    fi.getJobSummary().setJobSubmitTime(amStartedEvent.getSubmitTime());\n+    fi.getJobIndexInfo().setJobStartTime(amStartedEvent.getStartTime());\n+    fi.getJobIndexInfo().setSubmitTime(amStartedEvent.getSubmitTime());\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupEventWriter(JobId jobId, AMStartedEvent amStartedEvent)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        writer \u003d createEventWriter(historyFile);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n    if (conf !\u003d null) {\n      queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId, amStartedEvent.getForcedJobStateOnShutDown(),\n        queueName);\n    fi.getJobSummary().setJobId(jobId);\n    fi.getJobSummary().setJobLaunchTime(amStartedEvent.getStartTime());\n    fi.getJobSummary().setJobSubmitTime(amStartedEvent.getSubmitTime());\n    fi.getJobIndexInfo().setJobStartTime(amStartedEvent.getStartTime());\n    fi.getJobIndexInfo().setSubmitTime(amStartedEvent.getSubmitTime());\n    fileMap.put(jobId, fi);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "[jobId-JobId, forcedJobStateOnShutDown-String]",
            "newValue": "[jobId-JobId, amStartedEvent-AMStartedEvent]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-6259. IllegalArgumentException due to missing job submit time. Contributed by zhihai xu\n",
          "commitDate": "04/05/15 1:39 PM",
          "commitName": "bf70c5ae2824a9139c1aa9d7c14020018881cec2",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "30/04/15 12:03 AM",
          "commitNameOld": "f5b38477f9d0827b238fadd260c1dd2889531fd4",
          "commitAuthorOld": "Devaraj K",
          "daysBetweenCommits": 4.57,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,69 @@\n-  protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n+  protected void setupEventWriter(JobId jobId, AMStartedEvent amStartedEvent)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n     Path logDirConfPath \u003d\n         JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         writer \u003d createEventWriter(historyFile);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n       \n       //Write out conf only if the writer isn\u0027t already setup.\n       if (conf !\u003d null) {\n         // TODO Ideally this should be written out to the job dir\n         // (.staging/jobid/files - RecoveryService will need to be patched)\n         FSDataOutputStream jobFileOut \u003d null;\n         try {\n           if (logDirConfPath !\u003d null) {\n             jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n             conf.writeXml(jobFileOut);\n             jobFileOut.close();\n           }\n         } catch (IOException e) {\n           LOG.info(\"Failed to write the job configuration file\", e);\n           throw e;\n         }\n       }\n     }\n \n     String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n     if (conf !\u003d null) {\n       queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n     }\n \n     MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n-        user, jobName, jobId, forcedJobStateOnShutDown, queueName);\n+        user, jobName, jobId, amStartedEvent.getForcedJobStateOnShutDown(),\n+        queueName);\n     fi.getJobSummary().setJobId(jobId);\n+    fi.getJobSummary().setJobLaunchTime(amStartedEvent.getStartTime());\n+    fi.getJobSummary().setJobSubmitTime(amStartedEvent.getSubmitTime());\n+    fi.getJobIndexInfo().setJobStartTime(amStartedEvent.getStartTime());\n+    fi.getJobIndexInfo().setSubmitTime(amStartedEvent.getSubmitTime());\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupEventWriter(JobId jobId, AMStartedEvent amStartedEvent)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        writer \u003d createEventWriter(historyFile);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n    if (conf !\u003d null) {\n      queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId, amStartedEvent.getForcedJobStateOnShutDown(),\n        queueName);\n    fi.getJobSummary().setJobId(jobId);\n    fi.getJobSummary().setJobLaunchTime(amStartedEvent.getStartTime());\n    fi.getJobSummary().setJobSubmitTime(amStartedEvent.getSubmitTime());\n    fi.getJobIndexInfo().setJobStartTime(amStartedEvent.getStartTime());\n    fi.getJobIndexInfo().setSubmitTime(amStartedEvent.getSubmitTime());\n    fileMap.put(jobId, fi);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "8d41b363b85105630623b07b909b83775ffda384": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5815. Fixed test-failure of TestMRAppMaster by making MRAppMaster gracefully handle empty-queue names. Contributed by Akira Ajisaka.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586559 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/04/14 9:01 PM",
      "commitName": "8d41b363b85105630623b07b909b83775ffda384",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/03/14 7:00 PM",
      "commitNameOld": "6015e9594180f157472a88030c85c5599fdc289c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 17.08,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,64 @@\n   protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n     Path logDirConfPath \u003d\n         JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         writer \u003d createEventWriter(historyFile);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n       \n       //Write out conf only if the writer isn\u0027t already setup.\n       if (conf !\u003d null) {\n         // TODO Ideally this should be written out to the job dir\n         // (.staging/jobid/files - RecoveryService will need to be patched)\n         FSDataOutputStream jobFileOut \u003d null;\n         try {\n           if (logDirConfPath !\u003d null) {\n             jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n             conf.writeXml(jobFileOut);\n             jobFileOut.close();\n           }\n         } catch (IOException e) {\n           LOG.info(\"Failed to write the job configuration file\", e);\n           throw e;\n         }\n       }\n     }\n \n+    String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n+    if (conf !\u003d null) {\n+      queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n+    }\n+\n     MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n-        user, jobName, jobId, forcedJobStateOnShutDown);\n+        user, jobName, jobId, forcedJobStateOnShutDown, queueName);\n     fi.getJobSummary().setJobId(jobId);\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        writer \u003d createEventWriter(historyFile);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    String queueName \u003d JobConf.DEFAULT_QUEUE_NAME;\n    if (conf !\u003d null) {\n      queueName \u003d conf.get(MRJobConfig.QUEUE_NAME, JobConf.DEFAULT_QUEUE_NAME);\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId, forcedJobStateOnShutDown, queueName);\n    fi.getJobSummary().setJobId(jobId);\n    fileMap.put(jobId, fi);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "6015e9594180f157472a88030c85c5599fdc289c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-5795. Fixed MRAppMaster to record the correct job-state after it recovers from a commit during a previous attempt. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/03/14 7:00 PM",
      "commitName": "6015e9594180f157472a88030c85c5599fdc289c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-5795. Fixed MRAppMaster to record the correct job-state after it recovers from a commit during a previous attempt. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/14 7:00 PM",
          "commitName": "6015e9594180f157472a88030c85c5599fdc289c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "26/02/14 1:32 PM",
          "commitNameOld": "658b1bf561aa1c0f02fc0dbb079011f959709c25",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 26.19,
          "commitsBetweenForRepo": 223,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n-  protected void setupEventWriter(JobId jobId)\n+  protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n     Path logDirConfPath \u003d\n         JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         writer \u003d createEventWriter(historyFile);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n       \n       //Write out conf only if the writer isn\u0027t already setup.\n       if (conf !\u003d null) {\n         // TODO Ideally this should be written out to the job dir\n         // (.staging/jobid/files - RecoveryService will need to be patched)\n         FSDataOutputStream jobFileOut \u003d null;\n         try {\n           if (logDirConfPath !\u003d null) {\n             jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n             conf.writeXml(jobFileOut);\n             jobFileOut.close();\n           }\n         } catch (IOException e) {\n           LOG.info(\"Failed to write the job configuration file\", e);\n           throw e;\n         }\n       }\n     }\n \n     MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n-        user, jobName, jobId);\n+        user, jobName, jobId, forcedJobStateOnShutDown);\n     fi.getJobSummary().setJobId(jobId);\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        writer \u003d createEventWriter(historyFile);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId, forcedJobStateOnShutDown);\n    fi.getJobSummary().setJobId(jobId);\n    fileMap.put(jobId, fi);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "[jobId-JobId]",
            "newValue": "[jobId-JobId, forcedJobStateOnShutDown-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-5795. Fixed MRAppMaster to record the correct job-state after it recovers from a commit during a previous attempt. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581180 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/03/14 7:00 PM",
          "commitName": "6015e9594180f157472a88030c85c5599fdc289c",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "26/02/14 1:32 PM",
          "commitNameOld": "658b1bf561aa1c0f02fc0dbb079011f959709c25",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 26.19,
          "commitsBetweenForRepo": 223,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,59 @@\n-  protected void setupEventWriter(JobId jobId)\n+  protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n     Path logDirConfPath \u003d\n         JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         writer \u003d createEventWriter(historyFile);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n       \n       //Write out conf only if the writer isn\u0027t already setup.\n       if (conf !\u003d null) {\n         // TODO Ideally this should be written out to the job dir\n         // (.staging/jobid/files - RecoveryService will need to be patched)\n         FSDataOutputStream jobFileOut \u003d null;\n         try {\n           if (logDirConfPath !\u003d null) {\n             jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n             conf.writeXml(jobFileOut);\n             jobFileOut.close();\n           }\n         } catch (IOException e) {\n           LOG.info(\"Failed to write the job configuration file\", e);\n           throw e;\n         }\n       }\n     }\n \n     MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n-        user, jobName, jobId);\n+        user, jobName, jobId, forcedJobStateOnShutDown);\n     fi.getJobSummary().setJobId(jobId);\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupEventWriter(JobId jobId, String forcedJobStateOnShutDown)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        writer \u003d createEventWriter(historyFile);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId, forcedJobStateOnShutDown);\n    fi.getJobSummary().setJobId(jobId);\n    fileMap.put(jobId, fi);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "74697f231772a556884feaf1c986631d02a9ae4e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3512. Batching JobHistory flushing to DFS so that we don\u0027t flush for every event slowing down AM. Contributed by Siddarth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1230353 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/01/12 5:42 PM",
      "commitName": "74697f231772a556884feaf1c986631d02a9ae4e",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "09/01/12 1:04 PM",
      "commitNameOld": "e8645636ce1721aa6dc3674fbc553a7bb3522fbe",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.19,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,59 @@\n   protected void setupEventWriter(JobId jobId)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n     Path logDirConfPath \u003d\n         JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n-        FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n-        writer \u003d new EventWriter(out);\n+        writer \u003d createEventWriter(historyFile);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n       \n       //Write out conf only if the writer isn\u0027t already setup.\n       if (conf !\u003d null) {\n         // TODO Ideally this should be written out to the job dir\n         // (.staging/jobid/files - RecoveryService will need to be patched)\n         FSDataOutputStream jobFileOut \u003d null;\n         try {\n           if (logDirConfPath !\u003d null) {\n             jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n             conf.writeXml(jobFileOut);\n             jobFileOut.close();\n           }\n         } catch (IOException e) {\n           LOG.info(\"Failed to write the job configuration file\", e);\n           throw e;\n         }\n       }\n     }\n \n     MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n         user, jobName, jobId);\n     fi.getJobSummary().setJobId(jobId);\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setupEventWriter(JobId jobId)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        writer \u003d createEventWriter(historyFile);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId);\n    fi.getJobSummary().setJobId(jobId);\n    fileMap.put(jobId, fi);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {}
    },
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/11 10:21 PM",
      "commitName": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/10/11 10:21 PM",
          "commitName": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/09/11 12:16 AM",
          "commitNameOld": "61900651b1b85cf235e01142acf2a51727fc5537",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 30.92,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,60 @@\n-  protected void setupEventWriter(JobId jobId, JobSubmittedEvent jse)\n+  protected void setupEventWriter(JobId jobId)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n-    long submitTime \u003d oldFi \u003d\u003d null ? jse.getSubmitTime() : oldFi\n-        .getJobIndexInfo().getSubmitTime();\n-    \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n+    Path logDirConfPath \u003d\n+        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n         writer \u003d new EventWriter(out);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n-    }\n-    \n-    Path logDirConfPath \u003d null;\n-    if (conf !\u003d null) {\n-      // TODO Ideally this should be written out to the job dir\n-      // (.staging/jobid/files - RecoveryService will need to be patched)\n-      logDirConfPath \u003d JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId,\n-          startCount);\n-      FSDataOutputStream jobFileOut \u003d null;\n-      try {\n-        if (logDirConfPath !\u003d null) {\n-          jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n-          conf.writeXml(jobFileOut);\n-          jobFileOut.close();\n+      \n+      //Write out conf only if the writer isn\u0027t already setup.\n+      if (conf !\u003d null) {\n+        // TODO Ideally this should be written out to the job dir\n+        // (.staging/jobid/files - RecoveryService will need to be patched)\n+        FSDataOutputStream jobFileOut \u003d null;\n+        try {\n+          if (logDirConfPath !\u003d null) {\n+            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n+            conf.writeXml(jobFileOut);\n+            jobFileOut.close();\n+          }\n+        } catch (IOException e) {\n+          LOG.info(\"Failed to write the job configuration file\", e);\n+          throw e;\n         }\n-      } catch (IOException e) {\n-        LOG.info(\"Failed to write the job configuration file\", e);\n-        throw e;\n       }\n     }\n-    \n-    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer, submitTime,\n+\n+    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n         user, jobName, jobId);\n     fi.getJobSummary().setJobId(jobId);\n-    fi.getJobSummary().setJobSubmitTime(submitTime);\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupEventWriter(JobId jobId)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n        writer \u003d new EventWriter(out);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId);\n    fi.getJobSummary().setJobId(jobId);\n    fileMap.put(jobId, fi);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {
            "oldValue": "[jobId-JobId, jse-JobSubmittedEvent]",
            "newValue": "[jobId-JobId]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/10/11 10:21 PM",
          "commitName": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/09/11 12:16 AM",
          "commitNameOld": "61900651b1b85cf235e01142acf2a51727fc5537",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 30.92,
          "commitsBetweenForRepo": 230,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,64 +1,60 @@\n-  protected void setupEventWriter(JobId jobId, JobSubmittedEvent jse)\n+  protected void setupEventWriter(JobId jobId)\n       throws IOException {\n     if (stagingDirPath \u003d\u003d null) {\n       LOG.error(\"Log Directory is null, returning\");\n       throw new IOException(\"Missing Log Directory for History\");\n     }\n \n     MetaInfo oldFi \u003d fileMap.get(jobId);\n     Configuration conf \u003d getConfig();\n \n-    long submitTime \u003d oldFi \u003d\u003d null ? jse.getSubmitTime() : oldFi\n-        .getJobIndexInfo().getSubmitTime();\n-    \n     // TODO Ideally this should be written out to the job dir\n     // (.staging/jobid/files - RecoveryService will need to be patched)\n     Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n         stagingDirPath, jobId, startCount);\n     String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n     if (user \u003d\u003d null) {\n       throw new IOException(\n           \"User is null while setting up jobhistory eventwriter\");\n     }\n \n     String jobName \u003d context.getJob(jobId).getName();\n     EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n  \n+    Path logDirConfPath \u003d\n+        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n     if (writer \u003d\u003d null) {\n       try {\n         FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n         writer \u003d new EventWriter(out);\n         LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n             + historyFile);\n       } catch (IOException ioe) {\n         LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n             + \"[\" + jobName + \"]\");\n         throw ioe;\n       }\n-    }\n-    \n-    Path logDirConfPath \u003d null;\n-    if (conf !\u003d null) {\n-      // TODO Ideally this should be written out to the job dir\n-      // (.staging/jobid/files - RecoveryService will need to be patched)\n-      logDirConfPath \u003d JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId,\n-          startCount);\n-      FSDataOutputStream jobFileOut \u003d null;\n-      try {\n-        if (logDirConfPath !\u003d null) {\n-          jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n-          conf.writeXml(jobFileOut);\n-          jobFileOut.close();\n+      \n+      //Write out conf only if the writer isn\u0027t already setup.\n+      if (conf !\u003d null) {\n+        // TODO Ideally this should be written out to the job dir\n+        // (.staging/jobid/files - RecoveryService will need to be patched)\n+        FSDataOutputStream jobFileOut \u003d null;\n+        try {\n+          if (logDirConfPath !\u003d null) {\n+            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n+            conf.writeXml(jobFileOut);\n+            jobFileOut.close();\n+          }\n+        } catch (IOException e) {\n+          LOG.info(\"Failed to write the job configuration file\", e);\n+          throw e;\n         }\n-      } catch (IOException e) {\n-        LOG.info(\"Failed to write the job configuration file\", e);\n-        throw e;\n       }\n     }\n-    \n-    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer, submitTime,\n+\n+    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n         user, jobName, jobId);\n     fi.getJobSummary().setJobId(jobId);\n-    fi.getJobSummary().setJobSubmitTime(submitTime);\n     fileMap.put(jobId, fi);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void setupEventWriter(JobId jobId)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    Path logDirConfPath \u003d\n        JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId, startCount);\n    if (writer \u003d\u003d null) {\n      try {\n        FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n        writer \u003d new EventWriter(out);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n      \n      //Write out conf only if the writer isn\u0027t already setup.\n      if (conf !\u003d null) {\n        // TODO Ideally this should be written out to the job dir\n        // (.staging/jobid/files - RecoveryService will need to be patched)\n        FSDataOutputStream jobFileOut \u003d null;\n        try {\n          if (logDirConfPath !\u003d null) {\n            jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n            conf.writeXml(jobFileOut);\n            jobFileOut.close();\n          }\n        } catch (IOException e) {\n          LOG.info(\"Failed to write the job configuration file\", e);\n          throw e;\n        }\n      }\n    }\n\n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer,\n        user, jobName, jobId);\n    fi.getJobSummary().setJobId(jobId);\n    fileMap.put(jobId, fi);\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected void setupEventWriter(JobId jobId, JobSubmittedEvent jse)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    long submitTime \u003d oldFi \u003d\u003d null ? jse.getSubmitTime() : oldFi\n        .getJobIndexInfo().getSubmitTime();\n    \n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    if (writer \u003d\u003d null) {\n      try {\n        FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n        writer \u003d new EventWriter(out);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n    }\n    \n    Path logDirConfPath \u003d null;\n    if (conf !\u003d null) {\n      // TODO Ideally this should be written out to the job dir\n      // (.staging/jobid/files - RecoveryService will need to be patched)\n      logDirConfPath \u003d JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId,\n          startCount);\n      FSDataOutputStream jobFileOut \u003d null;\n      try {\n        if (logDirConfPath !\u003d null) {\n          jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n          conf.writeXml(jobFileOut);\n          jobFileOut.close();\n        }\n      } catch (IOException e) {\n        LOG.info(\"Failed to write the job configuration file\", e);\n        throw e;\n      }\n    }\n    \n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer, submitTime,\n        user, jobName, jobId);\n    fi.getJobSummary().setJobId(jobId);\n    fi.getJobSummary().setJobSubmitTime(submitTime);\n    fileMap.put(jobId, fi);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,64 @@\n+  protected void setupEventWriter(JobId jobId, JobSubmittedEvent jse)\n+      throws IOException {\n+    if (stagingDirPath \u003d\u003d null) {\n+      LOG.error(\"Log Directory is null, returning\");\n+      throw new IOException(\"Missing Log Directory for History\");\n+    }\n+\n+    MetaInfo oldFi \u003d fileMap.get(jobId);\n+    Configuration conf \u003d getConfig();\n+\n+    long submitTime \u003d oldFi \u003d\u003d null ? jse.getSubmitTime() : oldFi\n+        .getJobIndexInfo().getSubmitTime();\n+    \n+    // TODO Ideally this should be written out to the job dir\n+    // (.staging/jobid/files - RecoveryService will need to be patched)\n+    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n+        stagingDirPath, jobId, startCount);\n+    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n+    if (user \u003d\u003d null) {\n+      throw new IOException(\n+          \"User is null while setting up jobhistory eventwriter\");\n+    }\n+\n+    String jobName \u003d context.getJob(jobId).getName();\n+    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n+ \n+    if (writer \u003d\u003d null) {\n+      try {\n+        FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n+        writer \u003d new EventWriter(out);\n+        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n+            + historyFile);\n+      } catch (IOException ioe) {\n+        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n+            + \"[\" + jobName + \"]\");\n+        throw ioe;\n+      }\n+    }\n+    \n+    Path logDirConfPath \u003d null;\n+    if (conf !\u003d null) {\n+      // TODO Ideally this should be written out to the job dir\n+      // (.staging/jobid/files - RecoveryService will need to be patched)\n+      logDirConfPath \u003d JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId,\n+          startCount);\n+      FSDataOutputStream jobFileOut \u003d null;\n+      try {\n+        if (logDirConfPath !\u003d null) {\n+          jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n+          conf.writeXml(jobFileOut);\n+          jobFileOut.close();\n+        }\n+      } catch (IOException e) {\n+        LOG.info(\"Failed to write the job configuration file\", e);\n+        throw e;\n+      }\n+    }\n+    \n+    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer, submitTime,\n+        user, jobName, jobId);\n+    fi.getJobSummary().setJobId(jobId);\n+    fi.getJobSummary().setJobSubmitTime(submitTime);\n+    fileMap.put(jobId, fi);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected void setupEventWriter(JobId jobId, JobSubmittedEvent jse)\n      throws IOException {\n    if (stagingDirPath \u003d\u003d null) {\n      LOG.error(\"Log Directory is null, returning\");\n      throw new IOException(\"Missing Log Directory for History\");\n    }\n\n    MetaInfo oldFi \u003d fileMap.get(jobId);\n    Configuration conf \u003d getConfig();\n\n    long submitTime \u003d oldFi \u003d\u003d null ? jse.getSubmitTime() : oldFi\n        .getJobIndexInfo().getSubmitTime();\n    \n    // TODO Ideally this should be written out to the job dir\n    // (.staging/jobid/files - RecoveryService will need to be patched)\n    Path historyFile \u003d JobHistoryUtils.getStagingJobHistoryFile(\n        stagingDirPath, jobId, startCount);\n    String user \u003d UserGroupInformation.getCurrentUser().getShortUserName();\n    if (user \u003d\u003d null) {\n      throw new IOException(\n          \"User is null while setting up jobhistory eventwriter\");\n    }\n\n    String jobName \u003d context.getJob(jobId).getName();\n    EventWriter writer \u003d (oldFi \u003d\u003d null) ? null : oldFi.writer;\n \n    if (writer \u003d\u003d null) {\n      try {\n        FSDataOutputStream out \u003d stagingDirFS.create(historyFile, true);\n        writer \u003d new EventWriter(out);\n        LOG.info(\"Event Writer setup for JobId: \" + jobId + \", File: \"\n            + historyFile);\n      } catch (IOException ioe) {\n        LOG.info(\"Could not create log file: [\" + historyFile + \"] + for job \"\n            + \"[\" + jobName + \"]\");\n        throw ioe;\n      }\n    }\n    \n    Path logDirConfPath \u003d null;\n    if (conf !\u003d null) {\n      // TODO Ideally this should be written out to the job dir\n      // (.staging/jobid/files - RecoveryService will need to be patched)\n      logDirConfPath \u003d JobHistoryUtils.getStagingConfFile(stagingDirPath, jobId,\n          startCount);\n      FSDataOutputStream jobFileOut \u003d null;\n      try {\n        if (logDirConfPath !\u003d null) {\n          jobFileOut \u003d stagingDirFS.create(logDirConfPath, true);\n          conf.writeXml(jobFileOut);\n          jobFileOut.close();\n        }\n      } catch (IOException e) {\n        LOG.info(\"Failed to write the job configuration file\", e);\n        throw e;\n      }\n    }\n    \n    MetaInfo fi \u003d new MetaInfo(historyFile, logDirConfPath, writer, submitTime,\n        user, jobName, jobId);\n    fi.getJobSummary().setJobId(jobId);\n    fi.getJobSummary().setJobSubmitTime(submitTime);\n    fileMap.put(jobId, fi);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/jobhistory/JobHistoryEventHandler.java"
    }
  }
}