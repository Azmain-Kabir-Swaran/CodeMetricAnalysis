{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDB.java",
  "functionName": "computeCheckMillis",
  "functionId": "computeCheckMillis___now-long__next-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java",
  "functionStartLine": 378,
  "functionEndLine": 420,
  "numCommitsSeen": 5,
  "timeTaken": 756,
  "changeHistory": [
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,43 @@\n+  private synchronized long computeCheckMillis(long now, boolean next) {\n+    // needs to be called synchronously due to shared Calendar\n+    cal.setTimeInMillis(now);\n+    cal.set(Calendar.SECOND, 0);\n+    cal.set(Calendar.MILLISECOND, 0);\n+\n+    if (rollingPeriod \u003d\u003d RollingPeriod.DAILY) {\n+      cal.set(Calendar.HOUR_OF_DAY, 0);\n+      cal.set(Calendar.MINUTE, 0);\n+      if (next) {\n+        cal.add(Calendar.DATE, 1);\n+      }\n+    } else if (rollingPeriod \u003d\u003d RollingPeriod.HALF_DAILY) {\n+      // round down to 12 hour interval\n+      int hour \u003d (cal.get(Calendar.HOUR) / 12) * 12;\n+      cal.set(Calendar.HOUR, hour);\n+      cal.set(Calendar.MINUTE, 0);\n+      if (next) {\n+        cal.add(Calendar.HOUR_OF_DAY, 12);\n+      }\n+    } else if (rollingPeriod \u003d\u003d RollingPeriod.QUARTER_DAILY) {\n+      // round down to 6 hour interval\n+      int hour \u003d (cal.get(Calendar.HOUR) / 6) * 6;\n+      cal.set(Calendar.HOUR, hour);\n+      cal.set(Calendar.MINUTE, 0);\n+      if (next) {\n+        cal.add(Calendar.HOUR_OF_DAY, 6);\n+      }\n+    } else if (rollingPeriod \u003d\u003d RollingPeriod.HOURLY) {\n+      cal.set(Calendar.MINUTE, 0);\n+      if (next) {\n+        cal.add(Calendar.HOUR_OF_DAY, 1);\n+      }\n+    } else if (rollingPeriod \u003d\u003d RollingPeriod.MINUTELY) {\n+      // round down to 5 minute interval\n+      int minute \u003d (cal.get(Calendar.MINUTE) / 5) * 5;\n+      cal.set(Calendar.MINUTE, minute);\n+      if (next) {\n+        cal.add(Calendar.MINUTE, 5);\n+      }\n+    }\n+    return cal.getTimeInMillis();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized long computeCheckMillis(long now, boolean next) {\n    // needs to be called synchronously due to shared Calendar\n    cal.setTimeInMillis(now);\n    cal.set(Calendar.SECOND, 0);\n    cal.set(Calendar.MILLISECOND, 0);\n\n    if (rollingPeriod \u003d\u003d RollingPeriod.DAILY) {\n      cal.set(Calendar.HOUR_OF_DAY, 0);\n      cal.set(Calendar.MINUTE, 0);\n      if (next) {\n        cal.add(Calendar.DATE, 1);\n      }\n    } else if (rollingPeriod \u003d\u003d RollingPeriod.HALF_DAILY) {\n      // round down to 12 hour interval\n      int hour \u003d (cal.get(Calendar.HOUR) / 12) * 12;\n      cal.set(Calendar.HOUR, hour);\n      cal.set(Calendar.MINUTE, 0);\n      if (next) {\n        cal.add(Calendar.HOUR_OF_DAY, 12);\n      }\n    } else if (rollingPeriod \u003d\u003d RollingPeriod.QUARTER_DAILY) {\n      // round down to 6 hour interval\n      int hour \u003d (cal.get(Calendar.HOUR) / 6) * 6;\n      cal.set(Calendar.HOUR, hour);\n      cal.set(Calendar.MINUTE, 0);\n      if (next) {\n        cal.add(Calendar.HOUR_OF_DAY, 6);\n      }\n    } else if (rollingPeriod \u003d\u003d RollingPeriod.HOURLY) {\n      cal.set(Calendar.MINUTE, 0);\n      if (next) {\n        cal.add(Calendar.HOUR_OF_DAY, 1);\n      }\n    } else if (rollingPeriod \u003d\u003d RollingPeriod.MINUTELY) {\n      // round down to 5 minute interval\n      int minute \u003d (cal.get(Calendar.MINUTE) / 5) * 5;\n      cal.set(Calendar.MINUTE, minute);\n      if (next) {\n        cal.add(Calendar.MINUTE, 5);\n      }\n    }\n    return cal.getTimeInMillis();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDB.java"
    }
  }
}