{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSRunner.java",
  "functionName": "createAMForJob",
  "functionId": "createAMForJob___job-LoggedJob__baselineTimeMs-long",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
  "functionStartLine": 649,
  "functionEndLine": 706,
  "numCommitsSeen": 40,
  "timeTaken": 2257,
  "changeHistory": [
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
    "147df300bf00b5f4ed250426b6ccdd69085466da",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8",
    "3082552b3b991df846caf572b58e44308ddf8eeb",
    "475f933b41276b1bdeeec09e30369120f7eccdb8"
  ],
  "changeHistoryShort": {
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": "Ybodychange",
    "147df300bf00b5f4ed250426b6ccdd69085466da": "Ybodychange",
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": "Ybodychange",
    "3082552b3b991df846caf572b58e44308ddf8eeb": "Ybodychange",
    "475f933b41276b1bdeeec09e30369120f7eccdb8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7798. Refactor SLS Reservation Creation. Contributed by Young Chen.\n",
      "commitDate": "25/01/18 1:06 PM",
      "commitName": "16be42d3097c13b17d704e5b6dc8d66bd5ff6d9a",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "09/11/17 12:09 PM",
      "commitNameOld": "ba8136615ab66c450884614557eddc6509d63b7c",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 77.04,
      "commitsBetweenForRepo": 408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private void createAMForJob(LoggedJob job, long baselineTimeMs)\n       throws YarnException {\n     String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n         job.getUser().getValue();\n     String jobQueue \u003d job.getQueue().getValue();\n     String oldJobId \u003d job.getJobID().toString();\n     long jobStartTimeMS \u003d job.getSubmitTime();\n     long jobFinishTimeMS \u003d job.getFinishTime();\n     if (baselineTimeMs \u003d\u003d 0) {\n       baselineTimeMs \u003d job.getSubmitTime();\n     }\n     jobStartTimeMS -\u003d baselineTimeMs;\n     jobFinishTimeMS -\u003d baselineTimeMs;\n     if (jobStartTimeMS \u003c 0) {\n       LOG.warn(\"Warning: reset job {} start time to 0.\", oldJobId);\n       jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n       jobStartTimeMS \u003d 0;\n     }\n \n     increaseQueueAppNum(jobQueue);\n \n     List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n     // mapper\n     for (LoggedTask mapTask : job.getMapTasks()) {\n       if (mapTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n               containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n     }\n \n     // reducer\n     for (LoggedTask reduceTask : job.getReduceTasks()) {\n       if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\n             \"Invalid reduce task, no attempt for a reducer!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n               containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n     }\n \n     // Only supports the default job type currently\n     runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n-        jobStartTimeMS, jobFinishTimeMS, containerList, null,\n+        jobStartTimeMS, jobFinishTimeMS, containerList,\n         getAMContainerResource(null));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(LoggedJob job, long baselineTimeMs)\n      throws YarnException {\n    String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n        job.getUser().getValue();\n    String jobQueue \u003d job.getQueue().getValue();\n    String oldJobId \u003d job.getJobID().toString();\n    long jobStartTimeMS \u003d job.getSubmitTime();\n    long jobFinishTimeMS \u003d job.getFinishTime();\n    if (baselineTimeMs \u003d\u003d 0) {\n      baselineTimeMs \u003d job.getSubmitTime();\n    }\n    jobStartTimeMS -\u003d baselineTimeMs;\n    jobFinishTimeMS -\u003d baselineTimeMs;\n    if (jobStartTimeMS \u003c 0) {\n      LOG.warn(\"Warning: reset job {} start time to 0.\", oldJobId);\n      jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n      jobStartTimeMS \u003d 0;\n    }\n\n    increaseQueueAppNum(jobQueue);\n\n    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n    // mapper\n    for (LoggedTask mapTask : job.getMapTasks()) {\n      if (mapTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n    }\n\n    // reducer\n    for (LoggedTask reduceTask : job.getReduceTasks()) {\n      if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\n            \"Invalid reduce task, no attempt for a reducer!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n    }\n\n    // Only supports the default job type currently\n    runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n        jobStartTimeMS, jobFinishTimeMS, containerList,\n        getAMContainerResource(null));\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "147df300bf00b5f4ed250426b6ccdd69085466da": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5067 Support specifying resources for AM containers in SLS. (Yufei Gu via Haibo Chen)\n",
      "commitDate": "30/06/17 5:03 PM",
      "commitName": "147df300bf00b5f4ed250426b6ccdd69085466da",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "19/06/17 9:18 PM",
      "commitNameOld": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 10.82,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,58 @@\n   private void createAMForJob(LoggedJob job, long baselineTimeMs)\n       throws YarnException {\n     String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n         job.getUser().getValue();\n     String jobQueue \u003d job.getQueue().getValue();\n     String oldJobId \u003d job.getJobID().toString();\n     long jobStartTimeMS \u003d job.getSubmitTime();\n     long jobFinishTimeMS \u003d job.getFinishTime();\n     if (baselineTimeMs \u003d\u003d 0) {\n       baselineTimeMs \u003d job.getSubmitTime();\n     }\n     jobStartTimeMS -\u003d baselineTimeMs;\n     jobFinishTimeMS -\u003d baselineTimeMs;\n     if (jobStartTimeMS \u003c 0) {\n       LOG.warn(\"Warning: reset job {} start time to 0.\", oldJobId);\n       jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n       jobStartTimeMS \u003d 0;\n     }\n \n     increaseQueueAppNum(jobQueue);\n \n     List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n     // mapper\n     for (LoggedTask mapTask : job.getMapTasks()) {\n       if (mapTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n               containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n     }\n \n     // reducer\n     for (LoggedTask reduceTask : job.getReduceTasks()) {\n       if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\n             \"Invalid reduce task, no attempt for a reducer!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n               containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n     }\n \n     // Only supports the default job type currently\n     runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n-        jobStartTimeMS, jobFinishTimeMS, containerList, null);\n+        jobStartTimeMS, jobFinishTimeMS, containerList, null,\n+        getAMContainerResource(null));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(LoggedJob job, long baselineTimeMs)\n      throws YarnException {\n    String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n        job.getUser().getValue();\n    String jobQueue \u003d job.getQueue().getValue();\n    String oldJobId \u003d job.getJobID().toString();\n    long jobStartTimeMS \u003d job.getSubmitTime();\n    long jobFinishTimeMS \u003d job.getFinishTime();\n    if (baselineTimeMs \u003d\u003d 0) {\n      baselineTimeMs \u003d job.getSubmitTime();\n    }\n    jobStartTimeMS -\u003d baselineTimeMs;\n    jobFinishTimeMS -\u003d baselineTimeMs;\n    if (jobStartTimeMS \u003c 0) {\n      LOG.warn(\"Warning: reset job {} start time to 0.\", oldJobId);\n      jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n      jobStartTimeMS \u003d 0;\n    }\n\n    increaseQueueAppNum(jobQueue);\n\n    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n    // mapper\n    for (LoggedTask mapTask : job.getMapTasks()) {\n      if (mapTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n    }\n\n    // reducer\n    for (LoggedTask reduceTask : job.getReduceTasks()) {\n      if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\n            \"Invalid reduce task, no attempt for a reducer!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n    }\n\n    // Only supports the default job type currently\n    runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n        jobStartTimeMS, jobFinishTimeMS, containerList, null,\n        getAMContainerResource(null));\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "3369540653a41dd0194b65f5ef1d53225fb97ba8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14296. Move logging APIs over to slf4j in hadoop-tools.\n",
      "commitDate": "19/06/17 9:18 PM",
      "commitName": "3369540653a41dd0194b65f5ef1d53225fb97ba8",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "06/06/17 5:19 PM",
      "commitNameOld": "b65100c14bf9134de2bd8248dc62735682bee26c",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 13.17,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private void createAMForJob(LoggedJob job, long baselineTimeMs)\n       throws YarnException {\n     String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n         job.getUser().getValue();\n     String jobQueue \u003d job.getQueue().getValue();\n     String oldJobId \u003d job.getJobID().toString();\n     long jobStartTimeMS \u003d job.getSubmitTime();\n     long jobFinishTimeMS \u003d job.getFinishTime();\n     if (baselineTimeMs \u003d\u003d 0) {\n       baselineTimeMs \u003d job.getSubmitTime();\n     }\n     jobStartTimeMS -\u003d baselineTimeMs;\n     jobFinishTimeMS -\u003d baselineTimeMs;\n     if (jobStartTimeMS \u003c 0) {\n-      LOG.warn(\"Warning: reset job \" + oldJobId + \" start time to 0.\");\n+      LOG.warn(\"Warning: reset job {} start time to 0.\", oldJobId);\n       jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n       jobStartTimeMS \u003d 0;\n     }\n \n     increaseQueueAppNum(jobQueue);\n \n     List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n     // mapper\n     for (LoggedTask mapTask : job.getMapTasks()) {\n       if (mapTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n               containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n     }\n \n     // reducer\n     for (LoggedTask reduceTask : job.getReduceTasks()) {\n       if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\n             \"Invalid reduce task, no attempt for a reducer!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n               containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n     }\n \n     // Only supports the default job type currently\n     runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n         jobStartTimeMS, jobFinishTimeMS, containerList, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(LoggedJob job, long baselineTimeMs)\n      throws YarnException {\n    String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n        job.getUser().getValue();\n    String jobQueue \u003d job.getQueue().getValue();\n    String oldJobId \u003d job.getJobID().toString();\n    long jobStartTimeMS \u003d job.getSubmitTime();\n    long jobFinishTimeMS \u003d job.getFinishTime();\n    if (baselineTimeMs \u003d\u003d 0) {\n      baselineTimeMs \u003d job.getSubmitTime();\n    }\n    jobStartTimeMS -\u003d baselineTimeMs;\n    jobFinishTimeMS -\u003d baselineTimeMs;\n    if (jobStartTimeMS \u003c 0) {\n      LOG.warn(\"Warning: reset job {} start time to 0.\", oldJobId);\n      jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n      jobStartTimeMS \u003d 0;\n    }\n\n    increaseQueueAppNum(jobQueue);\n\n    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n    // mapper\n    for (LoggedTask mapTask : job.getMapTasks()) {\n      if (mapTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n    }\n\n    // reducer\n    for (LoggedTask reduceTask : job.getReduceTasks()) {\n      if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\n            \"Invalid reduce task, no attempt for a reducer!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n    }\n\n    // Only supports the default job type currently\n    runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n        jobStartTimeMS, jobFinishTimeMS, containerList, null);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "3082552b3b991df846caf572b58e44308ddf8eeb": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6522. Make SLS JSON input file format simple and scalable (yufeigu via rkanter)\n",
      "commitDate": "04/05/17 5:21 PM",
      "commitName": "3082552b3b991df846caf572b58e44308ddf8eeb",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "25/04/17 4:26 PM",
      "commitNameOld": "475f933b41276b1bdeeec09e30369120f7eccdb8",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 9.04,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   private void createAMForJob(LoggedJob job, long baselineTimeMs)\n       throws YarnException {\n     String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n         job.getUser().getValue();\n     String jobQueue \u003d job.getQueue().getValue();\n     String oldJobId \u003d job.getJobID().toString();\n     long jobStartTimeMS \u003d job.getSubmitTime();\n     long jobFinishTimeMS \u003d job.getFinishTime();\n     if (baselineTimeMs \u003d\u003d 0) {\n       baselineTimeMs \u003d job.getSubmitTime();\n     }\n     jobStartTimeMS -\u003d baselineTimeMs;\n     jobFinishTimeMS -\u003d baselineTimeMs;\n     if (jobStartTimeMS \u003c 0) {\n       LOG.warn(\"Warning: reset job \" + oldJobId + \" start time to 0.\");\n       jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n       jobStartTimeMS \u003d 0;\n     }\n \n     increaseQueueAppNum(jobQueue);\n \n     List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n     // mapper\n     for (LoggedTask mapTask : job.getMapTasks()) {\n       if (mapTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n-              containerLifeTime, hostname, 10, \"map\"));\n+              containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n     }\n \n     // reducer\n     for (LoggedTask reduceTask : job.getReduceTasks()) {\n       if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n         throw new YarnException(\n             \"Invalid reduce task, no attempt for a reducer!\");\n       }\n       LoggedTaskAttempt taskAttempt \u003d\n           reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n       String hostname \u003d taskAttempt.getHostName().getValue();\n       long containerLifeTime \u003d taskAttempt.getFinishTime() -\n           taskAttempt.getStartTime();\n       containerList.add(\n           new ContainerSimulator(getDefaultContainerResource(),\n-              containerLifeTime, hostname, 20, \"reduce\"));\n+              containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n     }\n \n     // Only supports the default job type currently\n     runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n         jobStartTimeMS, jobFinishTimeMS, containerList, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(LoggedJob job, long baselineTimeMs)\n      throws YarnException {\n    String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n        job.getUser().getValue();\n    String jobQueue \u003d job.getQueue().getValue();\n    String oldJobId \u003d job.getJobID().toString();\n    long jobStartTimeMS \u003d job.getSubmitTime();\n    long jobFinishTimeMS \u003d job.getFinishTime();\n    if (baselineTimeMs \u003d\u003d 0) {\n      baselineTimeMs \u003d job.getSubmitTime();\n    }\n    jobStartTimeMS -\u003d baselineTimeMs;\n    jobFinishTimeMS -\u003d baselineTimeMs;\n    if (jobStartTimeMS \u003c 0) {\n      LOG.warn(\"Warning: reset job \" + oldJobId + \" start time to 0.\");\n      jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n      jobStartTimeMS \u003d 0;\n    }\n\n    increaseQueueAppNum(jobQueue);\n\n    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n    // mapper\n    for (LoggedTask mapTask : job.getMapTasks()) {\n      if (mapTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_MAPPER_PRIORITY, \"map\"));\n    }\n\n    // reducer\n    for (LoggedTask reduceTask : job.getReduceTasks()) {\n      if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\n            \"Invalid reduce task, no attempt for a reducer!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, DEFAULT_REDUCER_PRIORITY, \"reduce\"));\n    }\n\n    // Only supports the default job type currently\n    runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n        jobStartTimeMS, jobFinishTimeMS, containerList, null);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java",
      "extendedDetails": {}
    },
    "475f933b41276b1bdeeec09e30369120f7eccdb8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6423. Queue metrics doesn\u0027t work for Fair Scheduler in SLS (yufeigu via rkanter)\n",
      "commitDate": "25/04/17 4:26 PM",
      "commitName": "475f933b41276b1bdeeec09e30369120f7eccdb8",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,57 @@\n+  private void createAMForJob(LoggedJob job, long baselineTimeMs)\n+      throws YarnException {\n+    String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n+        job.getUser().getValue();\n+    String jobQueue \u003d job.getQueue().getValue();\n+    String oldJobId \u003d job.getJobID().toString();\n+    long jobStartTimeMS \u003d job.getSubmitTime();\n+    long jobFinishTimeMS \u003d job.getFinishTime();\n+    if (baselineTimeMs \u003d\u003d 0) {\n+      baselineTimeMs \u003d job.getSubmitTime();\n+    }\n+    jobStartTimeMS -\u003d baselineTimeMs;\n+    jobFinishTimeMS -\u003d baselineTimeMs;\n+    if (jobStartTimeMS \u003c 0) {\n+      LOG.warn(\"Warning: reset job \" + oldJobId + \" start time to 0.\");\n+      jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n+      jobStartTimeMS \u003d 0;\n+    }\n+\n+    increaseQueueAppNum(jobQueue);\n+\n+    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n+    // mapper\n+    for (LoggedTask mapTask : job.getMapTasks()) {\n+      if (mapTask.getAttempts().size() \u003d\u003d 0) {\n+        throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n+      }\n+      LoggedTaskAttempt taskAttempt \u003d\n+          mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n+      String hostname \u003d taskAttempt.getHostName().getValue();\n+      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n+          taskAttempt.getStartTime();\n+      containerList.add(\n+          new ContainerSimulator(getDefaultContainerResource(),\n+              containerLifeTime, hostname, 10, \"map\"));\n+    }\n+\n+    // reducer\n+    for (LoggedTask reduceTask : job.getReduceTasks()) {\n+      if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n+        throw new YarnException(\n+            \"Invalid reduce task, no attempt for a reducer!\");\n+      }\n+      LoggedTaskAttempt taskAttempt \u003d\n+          reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n+      String hostname \u003d taskAttempt.getHostName().getValue();\n+      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n+          taskAttempt.getStartTime();\n+      containerList.add(\n+          new ContainerSimulator(getDefaultContainerResource(),\n+              containerLifeTime, hostname, 20, \"reduce\"));\n+    }\n+\n+    // Only supports the default job type currently\n+    runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n+        jobStartTimeMS, jobFinishTimeMS, containerList, null);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void createAMForJob(LoggedJob job, long baselineTimeMs)\n      throws YarnException {\n    String user \u003d job.getUser() \u003d\u003d null ? \"default\" :\n        job.getUser().getValue();\n    String jobQueue \u003d job.getQueue().getValue();\n    String oldJobId \u003d job.getJobID().toString();\n    long jobStartTimeMS \u003d job.getSubmitTime();\n    long jobFinishTimeMS \u003d job.getFinishTime();\n    if (baselineTimeMs \u003d\u003d 0) {\n      baselineTimeMs \u003d job.getSubmitTime();\n    }\n    jobStartTimeMS -\u003d baselineTimeMs;\n    jobFinishTimeMS -\u003d baselineTimeMs;\n    if (jobStartTimeMS \u003c 0) {\n      LOG.warn(\"Warning: reset job \" + oldJobId + \" start time to 0.\");\n      jobFinishTimeMS \u003d jobFinishTimeMS - jobStartTimeMS;\n      jobStartTimeMS \u003d 0;\n    }\n\n    increaseQueueAppNum(jobQueue);\n\n    List\u003cContainerSimulator\u003e containerList \u003d new ArrayList\u003c\u003e();\n    // mapper\n    for (LoggedTask mapTask : job.getMapTasks()) {\n      if (mapTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\"Invalid map task, no attempt for a mapper!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          mapTask.getAttempts().get(mapTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, 10, \"map\"));\n    }\n\n    // reducer\n    for (LoggedTask reduceTask : job.getReduceTasks()) {\n      if (reduceTask.getAttempts().size() \u003d\u003d 0) {\n        throw new YarnException(\n            \"Invalid reduce task, no attempt for a reducer!\");\n      }\n      LoggedTaskAttempt taskAttempt \u003d\n          reduceTask.getAttempts().get(reduceTask.getAttempts().size() - 1);\n      String hostname \u003d taskAttempt.getHostName().getValue();\n      long containerLifeTime \u003d taskAttempt.getFinishTime() -\n          taskAttempt.getStartTime();\n      containerList.add(\n          new ContainerSimulator(getDefaultContainerResource(),\n              containerLifeTime, hostname, 20, \"reduce\"));\n    }\n\n    // Only supports the default job type currently\n    runNewAM(SLSUtils.DEFAULT_JOB_TYPE, user, jobQueue, oldJobId,\n        jobStartTimeMS, jobFinishTimeMS, containerList, null);\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/SLSRunner.java"
    }
  }
}