{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AbstractCSQueue.java",
  "functionName": "isQueueHierarchyPreemptionDisabled",
  "functionId": "isQueueHierarchyPreemptionDisabled___q-CSQueue__configuration-CapacitySchedulerConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
  "functionStartLine": 879,
  "functionEndLine": 904,
  "numCommitsSeen": 135,
  "timeTaken": 5141,
  "changeHistory": [
    "bddfe42e2ccda2e6cc9d149461640ba36eca5922",
    "c5e6e3de1c31eda052f89eddd7bba288625936b9",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
    "18741adf97f4fda5f8743318b59c440928e51297"
  ],
  "changeHistoryShort": {
    "bddfe42e2ccda2e6cc9d149461640ba36eca5922": "Ybodychange",
    "c5e6e3de1c31eda052f89eddd7bba288625936b9": "Ybodychange",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Ymultichange(Yparameterchange,Ybodychange)",
    "18741adf97f4fda5f8743318b59c440928e51297": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bddfe42e2ccda2e6cc9d149461640ba36eca5922": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"YARN-7813: Capacity Scheduler Intra-queue Preemption should be configurable for each queue\"\n\nThis reverts commit c5e6e3de1c31eda052f89eddd7bba288625936b9.\n",
      "commitDate": "14/02/18 12:29 PM",
      "commitName": "bddfe42e2ccda2e6cc9d149461640ba36eca5922",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "13/02/18 8:11 AM",
      "commitNameOld": "c5e6e3de1c31eda052f89eddd7bba288625936b9",
      "commitAuthorOld": "Eric Payne",
      "daysBetweenCommits": 1.18,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n       CapacitySchedulerConfiguration configuration) {\n     boolean systemWidePreemption \u003d\n-        configuration\n+        csContext.getConfiguration()\n             .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                        YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n     CSQueue parentQ \u003d q.getParent();\n \n     // If the system-wide preemption switch is turned off, all of the queues in\n     // the qPath hierarchy have preemption disabled, so return true.\n     if (!systemWidePreemption) return true;\n \n     // If q is the root queue and the system-wide preemption switch is turned\n     // on, then q does not have preemption disabled (default\u003dfalse, below)\n     // unless the preemption_disabled property is explicitly set.\n     if (parentQ \u003d\u003d null) {\n       return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n     }\n \n     // If this is not the root queue, inherit the default value for the\n     // preemption_disabled property from the parent. Preemptability will be\n     // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n     // this level.\n     return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                         parentQ.getPreemptionDisabled());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n      CapacitySchedulerConfiguration configuration) {\n    boolean systemWidePreemption \u003d\n        csContext.getConfiguration()\n            .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                       YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n    CSQueue parentQ \u003d q.getParent();\n\n    // If the system-wide preemption switch is turned off, all of the queues in\n    // the qPath hierarchy have preemption disabled, so return true.\n    if (!systemWidePreemption) return true;\n\n    // If q is the root queue and the system-wide preemption switch is turned\n    // on, then q does not have preemption disabled (default\u003dfalse, below)\n    // unless the preemption_disabled property is explicitly set.\n    if (parentQ \u003d\u003d null) {\n      return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n    }\n\n    // If this is not the root queue, inherit the default value for the\n    // preemption_disabled property from the parent. Preemptability will be\n    // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n    // this level.\n    return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                        parentQ.getPreemptionDisabled());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "c5e6e3de1c31eda052f89eddd7bba288625936b9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7813: Capacity Scheduler Intra-queue Preemption should be configurable for each queue\n",
      "commitDate": "13/02/18 8:11 AM",
      "commitName": "c5e6e3de1c31eda052f89eddd7bba288625936b9",
      "commitAuthor": "Eric Payne",
      "commitDateOld": "13/12/17 9:19 AM",
      "commitNameOld": "cb87e4dc927731e32b0bbcf678bb5600835ff28d",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 61.95,
      "commitsBetweenForRepo": 362,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n       CapacitySchedulerConfiguration configuration) {\n     boolean systemWidePreemption \u003d\n-        csContext.getConfiguration()\n+        configuration\n             .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                        YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n     CSQueue parentQ \u003d q.getParent();\n \n     // If the system-wide preemption switch is turned off, all of the queues in\n     // the qPath hierarchy have preemption disabled, so return true.\n     if (!systemWidePreemption) return true;\n \n     // If q is the root queue and the system-wide preemption switch is turned\n     // on, then q does not have preemption disabled (default\u003dfalse, below)\n     // unless the preemption_disabled property is explicitly set.\n     if (parentQ \u003d\u003d null) {\n       return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n     }\n \n     // If this is not the root queue, inherit the default value for the\n     // preemption_disabled property from the parent. Preemptability will be\n     // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n     // this level.\n     return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                         parentQ.getPreemptionDisabled());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n      CapacitySchedulerConfiguration configuration) {\n    boolean systemWidePreemption \u003d\n        configuration\n            .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                       YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n    CSQueue parentQ \u003d q.getParent();\n\n    // If the system-wide preemption switch is turned off, all of the queues in\n    // the qPath hierarchy have preemption disabled, so return true.\n    if (!systemWidePreemption) return true;\n\n    // If q is the root queue and the system-wide preemption switch is turned\n    // on, then q does not have preemption disabled (default\u003dfalse, below)\n    // unless the preemption_disabled property is explicitly set.\n    if (parentQ \u003d\u003d null) {\n      return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n    }\n\n    // If this is not the root queue, inherit the default value for the\n    // preemption_disabled property from the parent. Preemptability will be\n    // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n    // this level.\n    return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                        parentQ.getPreemptionDisabled());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
      "extendedDetails": {}
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
          "commitDate": "08/12/17 3:10 PM",
          "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "07/12/17 6:56 PM",
          "commitNameOld": "b7b8cd53242da8d47ba4a6d99d906bdb2a1a3494",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.84,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n-  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q) {\n-    CapacitySchedulerConfiguration csConf \u003d csContext.getConfiguration();\n+  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n+      CapacitySchedulerConfiguration configuration) {\n     boolean systemWidePreemption \u003d\n-        csConf.getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n+        csContext.getConfiguration()\n+            .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                        YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n     CSQueue parentQ \u003d q.getParent();\n \n     // If the system-wide preemption switch is turned off, all of the queues in\n     // the qPath hierarchy have preemption disabled, so return true.\n     if (!systemWidePreemption) return true;\n \n     // If q is the root queue and the system-wide preemption switch is turned\n     // on, then q does not have preemption disabled (default\u003dfalse, below)\n     // unless the preemption_disabled property is explicitly set.\n     if (parentQ \u003d\u003d null) {\n-      return csConf.getPreemptionDisabled(q.getQueuePath(), false);\n+      return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n     }\n \n     // If this is not the root queue, inherit the default value for the\n     // preemption_disabled property from the parent. Preemptability will be\n     // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n     // this level.\n-    return csConf.getPreemptionDisabled(q.getQueuePath(),\n+    return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                         parentQ.getPreemptionDisabled());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n      CapacitySchedulerConfiguration configuration) {\n    boolean systemWidePreemption \u003d\n        csContext.getConfiguration()\n            .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                       YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n    CSQueue parentQ \u003d q.getParent();\n\n    // If the system-wide preemption switch is turned off, all of the queues in\n    // the qPath hierarchy have preemption disabled, so return true.\n    if (!systemWidePreemption) return true;\n\n    // If q is the root queue and the system-wide preemption switch is turned\n    // on, then q does not have preemption disabled (default\u003dfalse, below)\n    // unless the preemption_disabled property is explicitly set.\n    if (parentQ \u003d\u003d null) {\n      return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n    }\n\n    // If this is not the root queue, inherit the default value for the\n    // preemption_disabled property from the parent. Preemptability will be\n    // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n    // this level.\n    return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                        parentQ.getPreemptionDisabled());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
          "extendedDetails": {
            "oldValue": "[q-CSQueue]",
            "newValue": "[q-CSQueue, configuration-CapacitySchedulerConfiguration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
          "commitDate": "08/12/17 3:10 PM",
          "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "07/12/17 6:56 PM",
          "commitNameOld": "b7b8cd53242da8d47ba4a6d99d906bdb2a1a3494",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 0.84,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,26 @@\n-  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q) {\n-    CapacitySchedulerConfiguration csConf \u003d csContext.getConfiguration();\n+  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n+      CapacitySchedulerConfiguration configuration) {\n     boolean systemWidePreemption \u003d\n-        csConf.getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n+        csContext.getConfiguration()\n+            .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                        YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n     CSQueue parentQ \u003d q.getParent();\n \n     // If the system-wide preemption switch is turned off, all of the queues in\n     // the qPath hierarchy have preemption disabled, so return true.\n     if (!systemWidePreemption) return true;\n \n     // If q is the root queue and the system-wide preemption switch is turned\n     // on, then q does not have preemption disabled (default\u003dfalse, below)\n     // unless the preemption_disabled property is explicitly set.\n     if (parentQ \u003d\u003d null) {\n-      return csConf.getPreemptionDisabled(q.getQueuePath(), false);\n+      return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n     }\n \n     // If this is not the root queue, inherit the default value for the\n     // preemption_disabled property from the parent. Preemptability will be\n     // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n     // this level.\n-    return csConf.getPreemptionDisabled(q.getQueuePath(),\n+    return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                         parentQ.getPreemptionDisabled());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q,\n      CapacitySchedulerConfiguration configuration) {\n    boolean systemWidePreemption \u003d\n        csContext.getConfiguration()\n            .getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                       YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n    CSQueue parentQ \u003d q.getParent();\n\n    // If the system-wide preemption switch is turned off, all of the queues in\n    // the qPath hierarchy have preemption disabled, so return true.\n    if (!systemWidePreemption) return true;\n\n    // If q is the root queue and the system-wide preemption switch is turned\n    // on, then q does not have preemption disabled (default\u003dfalse, below)\n    // unless the preemption_disabled property is explicitly set.\n    if (parentQ \u003d\u003d null) {\n      return configuration.getPreemptionDisabled(q.getQueuePath(), false);\n    }\n\n    // If this is not the root queue, inherit the default value for the\n    // preemption_disabled property from the parent. Preemptability will be\n    // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n    // this level.\n    return configuration.getPreemptionDisabled(q.getQueuePath(),\n                                        parentQ.getPreemptionDisabled());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "18741adf97f4fda5f8743318b59c440928e51297": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2932. Add entry for preemptable status (enabled/disabled) to scheduler web UI and queue initialize/refresh logging. (Eric Payne via wangda)\n",
      "commitDate": "27/01/15 3:36 PM",
      "commitName": "18741adf97f4fda5f8743318b59c440928e51297",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,25 @@\n+  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q) {\n+    CapacitySchedulerConfiguration csConf \u003d csContext.getConfiguration();\n+    boolean systemWidePreemption \u003d\n+        csConf.getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n+                       YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n+    CSQueue parentQ \u003d q.getParent();\n+\n+    // If the system-wide preemption switch is turned off, all of the queues in\n+    // the qPath hierarchy have preemption disabled, so return true.\n+    if (!systemWidePreemption) return true;\n+\n+    // If q is the root queue and the system-wide preemption switch is turned\n+    // on, then q does not have preemption disabled (default\u003dfalse, below)\n+    // unless the preemption_disabled property is explicitly set.\n+    if (parentQ \u003d\u003d null) {\n+      return csConf.getPreemptionDisabled(q.getQueuePath(), false);\n+    }\n+\n+    // If this is not the root queue, inherit the default value for the\n+    // preemption_disabled property from the parent. Preemptability will be\n+    // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n+    // this level.\n+    return csConf.getPreemptionDisabled(q.getQueuePath(),\n+                                        parentQ.getPreemptionDisabled());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isQueueHierarchyPreemptionDisabled(CSQueue q) {\n    CapacitySchedulerConfiguration csConf \u003d csContext.getConfiguration();\n    boolean systemWidePreemption \u003d\n        csConf.getBoolean(YarnConfiguration.RM_SCHEDULER_ENABLE_MONITORS,\n                       YarnConfiguration.DEFAULT_RM_SCHEDULER_ENABLE_MONITORS);\n    CSQueue parentQ \u003d q.getParent();\n\n    // If the system-wide preemption switch is turned off, all of the queues in\n    // the qPath hierarchy have preemption disabled, so return true.\n    if (!systemWidePreemption) return true;\n\n    // If q is the root queue and the system-wide preemption switch is turned\n    // on, then q does not have preemption disabled (default\u003dfalse, below)\n    // unless the preemption_disabled property is explicitly set.\n    if (parentQ \u003d\u003d null) {\n      return csConf.getPreemptionDisabled(q.getQueuePath(), false);\n    }\n\n    // If this is not the root queue, inherit the default value for the\n    // preemption_disabled property from the parent. Preemptability will be\n    // inherited from the parent\u0027s hierarchy unless explicitly overridden at\n    // this level.\n    return csConf.getPreemptionDisabled(q.getQueuePath(),\n                                        parentQ.getPreemptionDisabled());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/AbstractCSQueue.java"
    }
  }
}