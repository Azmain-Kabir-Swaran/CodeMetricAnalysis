{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AMRMClientImpl.java",
  "functionName": "requestContainerUpdate",
  "functionId": "requestContainerUpdate___container-Container__updateContainerRequest-UpdateContainerRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
  "functionStartLine": 634,
  "functionEndLine": 676,
  "numCommitsSeen": 91,
  "timeTaken": 3108,
  "changeHistory": [
    "aaf106fde35ec97e2e2ea4d7a67434038c4273ac",
    "7ff280fca9af45b98cee2336e78803da46b0f8a5"
  ],
  "changeHistoryShort": {
    "aaf106fde35ec97e2e2ea4d7a67434038c4273ac": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "7ff280fca9af45b98cee2336e78803da46b0f8a5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aaf106fde35ec97e2e2ea4d7a67434038c4273ac": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5966. AMRMClient changes to support ExecutionType update. (asuresh)\n",
      "commitDate": "14/02/17 6:09 AM",
      "commitName": "aaf106fde35ec97e2e2ea4d7a67434038c4273ac",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5966. AMRMClient changes to support ExecutionType update. (asuresh)\n",
          "commitDate": "14/02/17 6:09 AM",
          "commitName": "aaf106fde35ec97e2e2ea4d7a67434038c4273ac",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/11/16 1:34 PM",
          "commitNameOld": "ede1a473f5061cf40f6affc1c8c30a645c1fef6c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 94.69,
          "commitsBetweenForRepo": 465,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,43 @@\n-  public synchronized void requestContainerResourceChange(\n-      Container container, Resource capability) {\n-    validateContainerResourceChangeRequest(\n-        container.getId(), container.getResource(), capability);\n+  public synchronized void requestContainerUpdate(\n+      Container container, UpdateContainerRequest updateContainerRequest) {\n+    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\n+    Preconditions.checkNotNull(updateContainerRequest,\n+        \"UpdateContainerRequest cannot be null!!\");\n+    LOG.info(\"Requesting Container update : \" +\n+        \"container\u003d\" + container + \", \" +\n+        \"updateType\u003d\" + updateContainerRequest.getContainerUpdateType() + \", \" +\n+        \"targetCapability\u003d\" + updateContainerRequest.getCapability() + \", \" +\n+        \"targetExecType\u003d\" + updateContainerRequest.getExecutionType());\n+    if (updateContainerRequest.getCapability() !\u003d null \u0026\u0026\n+        updateContainerRequest.getExecutionType() \u003d\u003d null) {\n+      validateContainerResourceChangeRequest(\n+          updateContainerRequest.getContainerUpdateType(),\n+          container.getId(), container.getResource(),\n+          updateContainerRequest.getCapability());\n+    } else if (updateContainerRequest.getExecutionType() !\u003d null \u0026\u0026\n+        updateContainerRequest.getCapability() \u003d\u003d null) {\n+      validateContainerExecTypeChangeRequest(\n+          updateContainerRequest.getContainerUpdateType(),\n+          container.getId(), container.getExecutionType(),\n+          updateContainerRequest.getExecutionType());\n+    } else if (updateContainerRequest.getExecutionType() \u003d\u003d null \u0026\u0026\n+        updateContainerRequest.getCapability() \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"Both target Capability and\" +\n+          \"target Execution Type are null\");\n+    } else {\n+      throw new IllegalArgumentException(\"Support currently exists only for\" +\n+          \" EITHER update of Capability OR update of Execution Type NOT both\");\n+    }\n     if (change.get(container.getId()) \u003d\u003d null) {\n       change.put(container.getId(),\n-          new SimpleEntry\u003c\u003e(container, capability));\n+          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n     } else {\n-      change.get(container.getId()).setValue(capability);\n+      change.get(container.getId()).setValue(updateContainerRequest);\n     }\n     if (pendingChange.get(container.getId()) \u003d\u003d null) {\n       pendingChange.put(container.getId(),\n-          new SimpleEntry\u003c\u003e(container, capability));\n+          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n     } else {\n-      pendingChange.get(container.getId()).setValue(capability);\n+      pendingChange.get(container.getId()).setValue(updateContainerRequest);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void requestContainerUpdate(\n      Container container, UpdateContainerRequest updateContainerRequest) {\n    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\n    Preconditions.checkNotNull(updateContainerRequest,\n        \"UpdateContainerRequest cannot be null!!\");\n    LOG.info(\"Requesting Container update : \" +\n        \"container\u003d\" + container + \", \" +\n        \"updateType\u003d\" + updateContainerRequest.getContainerUpdateType() + \", \" +\n        \"targetCapability\u003d\" + updateContainerRequest.getCapability() + \", \" +\n        \"targetExecType\u003d\" + updateContainerRequest.getExecutionType());\n    if (updateContainerRequest.getCapability() !\u003d null \u0026\u0026\n        updateContainerRequest.getExecutionType() \u003d\u003d null) {\n      validateContainerResourceChangeRequest(\n          updateContainerRequest.getContainerUpdateType(),\n          container.getId(), container.getResource(),\n          updateContainerRequest.getCapability());\n    } else if (updateContainerRequest.getExecutionType() !\u003d null \u0026\u0026\n        updateContainerRequest.getCapability() \u003d\u003d null) {\n      validateContainerExecTypeChangeRequest(\n          updateContainerRequest.getContainerUpdateType(),\n          container.getId(), container.getExecutionType(),\n          updateContainerRequest.getExecutionType());\n    } else if (updateContainerRequest.getExecutionType() \u003d\u003d null \u0026\u0026\n        updateContainerRequest.getCapability() \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Both target Capability and\" +\n          \"target Execution Type are null\");\n    } else {\n      throw new IllegalArgumentException(\"Support currently exists only for\" +\n          \" EITHER update of Capability OR update of Execution Type NOT both\");\n    }\n    if (change.get(container.getId()) \u003d\u003d null) {\n      change.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n    } else {\n      change.get(container.getId()).setValue(updateContainerRequest);\n    }\n    if (pendingChange.get(container.getId()) \u003d\u003d null) {\n      pendingChange.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n    } else {\n      pendingChange.get(container.getId()).setValue(updateContainerRequest);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "requestContainerResourceChange",
            "newValue": "requestContainerUpdate"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5966. AMRMClient changes to support ExecutionType update. (asuresh)\n",
          "commitDate": "14/02/17 6:09 AM",
          "commitName": "aaf106fde35ec97e2e2ea4d7a67434038c4273ac",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/11/16 1:34 PM",
          "commitNameOld": "ede1a473f5061cf40f6affc1c8c30a645c1fef6c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 94.69,
          "commitsBetweenForRepo": 465,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,43 @@\n-  public synchronized void requestContainerResourceChange(\n-      Container container, Resource capability) {\n-    validateContainerResourceChangeRequest(\n-        container.getId(), container.getResource(), capability);\n+  public synchronized void requestContainerUpdate(\n+      Container container, UpdateContainerRequest updateContainerRequest) {\n+    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\n+    Preconditions.checkNotNull(updateContainerRequest,\n+        \"UpdateContainerRequest cannot be null!!\");\n+    LOG.info(\"Requesting Container update : \" +\n+        \"container\u003d\" + container + \", \" +\n+        \"updateType\u003d\" + updateContainerRequest.getContainerUpdateType() + \", \" +\n+        \"targetCapability\u003d\" + updateContainerRequest.getCapability() + \", \" +\n+        \"targetExecType\u003d\" + updateContainerRequest.getExecutionType());\n+    if (updateContainerRequest.getCapability() !\u003d null \u0026\u0026\n+        updateContainerRequest.getExecutionType() \u003d\u003d null) {\n+      validateContainerResourceChangeRequest(\n+          updateContainerRequest.getContainerUpdateType(),\n+          container.getId(), container.getResource(),\n+          updateContainerRequest.getCapability());\n+    } else if (updateContainerRequest.getExecutionType() !\u003d null \u0026\u0026\n+        updateContainerRequest.getCapability() \u003d\u003d null) {\n+      validateContainerExecTypeChangeRequest(\n+          updateContainerRequest.getContainerUpdateType(),\n+          container.getId(), container.getExecutionType(),\n+          updateContainerRequest.getExecutionType());\n+    } else if (updateContainerRequest.getExecutionType() \u003d\u003d null \u0026\u0026\n+        updateContainerRequest.getCapability() \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"Both target Capability and\" +\n+          \"target Execution Type are null\");\n+    } else {\n+      throw new IllegalArgumentException(\"Support currently exists only for\" +\n+          \" EITHER update of Capability OR update of Execution Type NOT both\");\n+    }\n     if (change.get(container.getId()) \u003d\u003d null) {\n       change.put(container.getId(),\n-          new SimpleEntry\u003c\u003e(container, capability));\n+          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n     } else {\n-      change.get(container.getId()).setValue(capability);\n+      change.get(container.getId()).setValue(updateContainerRequest);\n     }\n     if (pendingChange.get(container.getId()) \u003d\u003d null) {\n       pendingChange.put(container.getId(),\n-          new SimpleEntry\u003c\u003e(container, capability));\n+          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n     } else {\n-      pendingChange.get(container.getId()).setValue(capability);\n+      pendingChange.get(container.getId()).setValue(updateContainerRequest);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void requestContainerUpdate(\n      Container container, UpdateContainerRequest updateContainerRequest) {\n    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\n    Preconditions.checkNotNull(updateContainerRequest,\n        \"UpdateContainerRequest cannot be null!!\");\n    LOG.info(\"Requesting Container update : \" +\n        \"container\u003d\" + container + \", \" +\n        \"updateType\u003d\" + updateContainerRequest.getContainerUpdateType() + \", \" +\n        \"targetCapability\u003d\" + updateContainerRequest.getCapability() + \", \" +\n        \"targetExecType\u003d\" + updateContainerRequest.getExecutionType());\n    if (updateContainerRequest.getCapability() !\u003d null \u0026\u0026\n        updateContainerRequest.getExecutionType() \u003d\u003d null) {\n      validateContainerResourceChangeRequest(\n          updateContainerRequest.getContainerUpdateType(),\n          container.getId(), container.getResource(),\n          updateContainerRequest.getCapability());\n    } else if (updateContainerRequest.getExecutionType() !\u003d null \u0026\u0026\n        updateContainerRequest.getCapability() \u003d\u003d null) {\n      validateContainerExecTypeChangeRequest(\n          updateContainerRequest.getContainerUpdateType(),\n          container.getId(), container.getExecutionType(),\n          updateContainerRequest.getExecutionType());\n    } else if (updateContainerRequest.getExecutionType() \u003d\u003d null \u0026\u0026\n        updateContainerRequest.getCapability() \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Both target Capability and\" +\n          \"target Execution Type are null\");\n    } else {\n      throw new IllegalArgumentException(\"Support currently exists only for\" +\n          \" EITHER update of Capability OR update of Execution Type NOT both\");\n    }\n    if (change.get(container.getId()) \u003d\u003d null) {\n      change.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n    } else {\n      change.get(container.getId()).setValue(updateContainerRequest);\n    }\n    if (pendingChange.get(container.getId()) \u003d\u003d null) {\n      pendingChange.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n    } else {\n      pendingChange.get(container.getId()).setValue(updateContainerRequest);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[container-Container, capability-Resource]",
            "newValue": "[container-Container, updateContainerRequest-UpdateContainerRequest]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5966. AMRMClient changes to support ExecutionType update. (asuresh)\n",
          "commitDate": "14/02/17 6:09 AM",
          "commitName": "aaf106fde35ec97e2e2ea4d7a67434038c4273ac",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/11/16 1:34 PM",
          "commitNameOld": "ede1a473f5061cf40f6affc1c8c30a645c1fef6c",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 94.69,
          "commitsBetweenForRepo": 465,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,43 @@\n-  public synchronized void requestContainerResourceChange(\n-      Container container, Resource capability) {\n-    validateContainerResourceChangeRequest(\n-        container.getId(), container.getResource(), capability);\n+  public synchronized void requestContainerUpdate(\n+      Container container, UpdateContainerRequest updateContainerRequest) {\n+    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\n+    Preconditions.checkNotNull(updateContainerRequest,\n+        \"UpdateContainerRequest cannot be null!!\");\n+    LOG.info(\"Requesting Container update : \" +\n+        \"container\u003d\" + container + \", \" +\n+        \"updateType\u003d\" + updateContainerRequest.getContainerUpdateType() + \", \" +\n+        \"targetCapability\u003d\" + updateContainerRequest.getCapability() + \", \" +\n+        \"targetExecType\u003d\" + updateContainerRequest.getExecutionType());\n+    if (updateContainerRequest.getCapability() !\u003d null \u0026\u0026\n+        updateContainerRequest.getExecutionType() \u003d\u003d null) {\n+      validateContainerResourceChangeRequest(\n+          updateContainerRequest.getContainerUpdateType(),\n+          container.getId(), container.getResource(),\n+          updateContainerRequest.getCapability());\n+    } else if (updateContainerRequest.getExecutionType() !\u003d null \u0026\u0026\n+        updateContainerRequest.getCapability() \u003d\u003d null) {\n+      validateContainerExecTypeChangeRequest(\n+          updateContainerRequest.getContainerUpdateType(),\n+          container.getId(), container.getExecutionType(),\n+          updateContainerRequest.getExecutionType());\n+    } else if (updateContainerRequest.getExecutionType() \u003d\u003d null \u0026\u0026\n+        updateContainerRequest.getCapability() \u003d\u003d null) {\n+      throw new IllegalArgumentException(\"Both target Capability and\" +\n+          \"target Execution Type are null\");\n+    } else {\n+      throw new IllegalArgumentException(\"Support currently exists only for\" +\n+          \" EITHER update of Capability OR update of Execution Type NOT both\");\n+    }\n     if (change.get(container.getId()) \u003d\u003d null) {\n       change.put(container.getId(),\n-          new SimpleEntry\u003c\u003e(container, capability));\n+          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n     } else {\n-      change.get(container.getId()).setValue(capability);\n+      change.get(container.getId()).setValue(updateContainerRequest);\n     }\n     if (pendingChange.get(container.getId()) \u003d\u003d null) {\n       pendingChange.put(container.getId(),\n-          new SimpleEntry\u003c\u003e(container, capability));\n+          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n     } else {\n-      pendingChange.get(container.getId()).setValue(capability);\n+      pendingChange.get(container.getId()).setValue(updateContainerRequest);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void requestContainerUpdate(\n      Container container, UpdateContainerRequest updateContainerRequest) {\n    Preconditions.checkNotNull(container, \"Container cannot be null!!\");\n    Preconditions.checkNotNull(updateContainerRequest,\n        \"UpdateContainerRequest cannot be null!!\");\n    LOG.info(\"Requesting Container update : \" +\n        \"container\u003d\" + container + \", \" +\n        \"updateType\u003d\" + updateContainerRequest.getContainerUpdateType() + \", \" +\n        \"targetCapability\u003d\" + updateContainerRequest.getCapability() + \", \" +\n        \"targetExecType\u003d\" + updateContainerRequest.getExecutionType());\n    if (updateContainerRequest.getCapability() !\u003d null \u0026\u0026\n        updateContainerRequest.getExecutionType() \u003d\u003d null) {\n      validateContainerResourceChangeRequest(\n          updateContainerRequest.getContainerUpdateType(),\n          container.getId(), container.getResource(),\n          updateContainerRequest.getCapability());\n    } else if (updateContainerRequest.getExecutionType() !\u003d null \u0026\u0026\n        updateContainerRequest.getCapability() \u003d\u003d null) {\n      validateContainerExecTypeChangeRequest(\n          updateContainerRequest.getContainerUpdateType(),\n          container.getId(), container.getExecutionType(),\n          updateContainerRequest.getExecutionType());\n    } else if (updateContainerRequest.getExecutionType() \u003d\u003d null \u0026\u0026\n        updateContainerRequest.getCapability() \u003d\u003d null) {\n      throw new IllegalArgumentException(\"Both target Capability and\" +\n          \"target Execution Type are null\");\n    } else {\n      throw new IllegalArgumentException(\"Support currently exists only for\" +\n          \" EITHER update of Capability OR update of Execution Type NOT both\");\n    }\n    if (change.get(container.getId()) \u003d\u003d null) {\n      change.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n    } else {\n      change.get(container.getId()).setValue(updateContainerRequest);\n    }\n    if (pendingChange.get(container.getId()) \u003d\u003d null) {\n      pendingChange.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, updateContainerRequest));\n    } else {\n      pendingChange.get(container.getId()).setValue(updateContainerRequest);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7ff280fca9af45b98cee2336e78803da46b0f8a5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1509. Make AMRMClient support send increase container request and get increased/decreased containers. (Meng Ding via wangda)\n",
      "commitDate": "12/11/15 11:50 AM",
      "commitName": "7ff280fca9af45b98cee2336e78803da46b0f8a5",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,17 @@\n+  public synchronized void requestContainerResourceChange(\n+      Container container, Resource capability) {\n+    validateContainerResourceChangeRequest(\n+        container.getId(), container.getResource(), capability);\n+    if (change.get(container.getId()) \u003d\u003d null) {\n+      change.put(container.getId(),\n+          new SimpleEntry\u003c\u003e(container, capability));\n+    } else {\n+      change.get(container.getId()).setValue(capability);\n+    }\n+    if (pendingChange.get(container.getId()) \u003d\u003d null) {\n+      pendingChange.put(container.getId(),\n+          new SimpleEntry\u003c\u003e(container, capability));\n+    } else {\n+      pendingChange.get(container.getId()).setValue(capability);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void requestContainerResourceChange(\n      Container container, Resource capability) {\n    validateContainerResourceChangeRequest(\n        container.getId(), container.getResource(), capability);\n    if (change.get(container.getId()) \u003d\u003d null) {\n      change.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, capability));\n    } else {\n      change.get(container.getId()).setValue(capability);\n    }\n    if (pendingChange.get(container.getId()) \u003d\u003d null) {\n      pendingChange.put(container.getId(),\n          new SimpleEntry\u003c\u003e(container, capability));\n    } else {\n      pendingChange.get(container.getId()).setValue(capability);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/AMRMClientImpl.java"
    }
  }
}