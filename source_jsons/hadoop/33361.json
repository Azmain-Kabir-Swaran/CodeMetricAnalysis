{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainersMonitorImpl.java",
  "functionName": "initializeProcessTrees",
  "functionId": "initializeProcessTrees___entry-Entry__ContainerId,ProcessTreeInfo__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
  "functionStartLine": 572,
  "functionEndLine": 621,
  "numCommitsSeen": 66,
  "timeTaken": 4108,
  "changeHistory": [
    "221089760910743eae58eb2cbd5ac86c4ee96a17",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
    "b0b535d9d5727cd84fd6368c6d1b38363616504e",
    "62b42ef5dd04d516d33bf0890ac5cd49f8184a73",
    "310aa4686eb697f0700a71d33106514c404dab1b",
    "9449519a2503c55d9eac8fd7519df28aa0760059"
  ],
  "changeHistoryShort": {
    "221089760910743eae58eb2cbd5ac86c4ee96a17": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf": "Ybodychange",
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": "Ybodychange",
    "b0b535d9d5727cd84fd6368c6d1b38363616504e": "Yexceptionschange",
    "62b42ef5dd04d516d33bf0890ac5cd49f8184a73": "Ybodychange",
    "310aa4686eb697f0700a71d33106514c404dab1b": "Ybodychange",
    "9449519a2503c55d9eac8fd7519df28aa0760059": "Yintroduced"
  },
  "changeHistoryDetails": {
    "221089760910743eae58eb2cbd5ac86c4ee96a17": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9592. Use Logger format in ContainersMonitorImpl. Contributed by Inigo Goiri.\n",
      "commitDate": "31/05/19 5:35 PM",
      "commitName": "221089760910743eae58eb2cbd5ac86c4ee96a17",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 77.05,
      "commitsBetweenForRepo": 469,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,50 @@\n     private void initializeProcessTrees(\n             Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n         throws ContainerExecutionException {\n       ContainerId containerId \u003d entry.getKey();\n       ProcessTreeInfo ptInfo \u003d entry.getValue();\n       String pId \u003d ptInfo.getPID();\n \n       // Initialize any uninitialized processTrees\n       if (pId \u003d\u003d null) {\n         // get pid from ContainerId\n         pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n         if (pId !\u003d null) {\n           // pId will be null, either if the container is not spawned yet\n           // or if the container\u0027s pid is removed from ContainerExecutor\n           LOG.debug(\"Tracking ProcessTree {} for the first time\", pId);\n           ResourceCalculatorProcessTree pt \u003d\n               getResourceCalculatorProcessTree(pId);\n           ptInfo.setPid(pId);\n           ptInfo.setProcessTree(pt);\n \n           if (containerMetricsEnabled) {\n             ContainerMetrics usageMetrics \u003d ContainerMetrics\n                     .forContainer(containerId, containerMetricsPeriodMs,\n                       containerMetricsUnregisterDelayMs);\n             usageMetrics.recordProcessId(pId);\n           }\n \n           Container container \u003d context.getContainers().get(containerId);\n \n           if (container !\u003d null) {\n             String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n \n             if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                 (ipAndHost[1] !\u003d null)) {\n               container.setIpAndHost(ipAndHost);\n-              LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n-                  + \", and hostname \u003d \" + ipAndHost[1]);\n+              LOG.info(\"{}\u0027s ip \u003d {}, and hostname \u003d {}\",\n+                  containerId, ipAndHost[0], ipAndHost[1]);\n             } else {\n-              LOG.info(\"Can not get both ip and hostname: \"\n-                  + Arrays.toString(ipAndHost));\n+              LOG.info(\"Can not get both ip and hostname: {}\",\n+                  Arrays.toString(ipAndHost));\n             }\n             String exposedPorts \u003d containerExecutor.getExposedPorts(container);\n             container.setExposedPorts(exposedPorts);\n           } else {\n-            LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n+            LOG.info(\"{} is missing. Not setting ip and hostname\", containerId);\n           }\n         }\n       }\n       // End of initializing any uninitialized processTrees\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n        throws ContainerExecutionException {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          LOG.debug(\"Tracking ProcessTree {} for the first time\", pId);\n          ResourceCalculatorProcessTree pt \u003d\n              getResourceCalculatorProcessTree(pId);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n\n          if (container !\u003d null) {\n            String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n\n            if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                (ipAndHost[1] !\u003d null)) {\n              container.setIpAndHost(ipAndHost);\n              LOG.info(\"{}\u0027s ip \u003d {}, and hostname \u003d {}\",\n                  containerId, ipAndHost[0], ipAndHost[1]);\n            } else {\n              LOG.info(\"Can not get both ip and hostname: {}\",\n                  Arrays.toString(ipAndHost));\n            }\n            String exposedPorts \u003d containerExecutor.getExposedPorts(container);\n            container.setExposedPorts(exposedPorts);\n          } else {\n            LOG.info(\"{} is missing. Not setting ip and hostname\", containerId);\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "21/12/18 4:44 PM",
      "commitNameOld": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 83.94,
      "commitsBetweenForRepo": 649,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,50 @@\n     private void initializeProcessTrees(\n             Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n         throws ContainerExecutionException {\n       ContainerId containerId \u003d entry.getKey();\n       ProcessTreeInfo ptInfo \u003d entry.getValue();\n       String pId \u003d ptInfo.getPID();\n \n       // Initialize any uninitialized processTrees\n       if (pId \u003d\u003d null) {\n         // get pid from ContainerId\n         pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n         if (pId !\u003d null) {\n           // pId will be null, either if the container is not spawned yet\n           // or if the container\u0027s pid is removed from ContainerExecutor\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n-          }\n+          LOG.debug(\"Tracking ProcessTree {} for the first time\", pId);\n           ResourceCalculatorProcessTree pt \u003d\n               getResourceCalculatorProcessTree(pId);\n           ptInfo.setPid(pId);\n           ptInfo.setProcessTree(pt);\n \n           if (containerMetricsEnabled) {\n             ContainerMetrics usageMetrics \u003d ContainerMetrics\n                     .forContainer(containerId, containerMetricsPeriodMs,\n                       containerMetricsUnregisterDelayMs);\n             usageMetrics.recordProcessId(pId);\n           }\n \n           Container container \u003d context.getContainers().get(containerId);\n \n           if (container !\u003d null) {\n             String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n \n             if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                 (ipAndHost[1] !\u003d null)) {\n               container.setIpAndHost(ipAndHost);\n               LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                   + \", and hostname \u003d \" + ipAndHost[1]);\n             } else {\n               LOG.info(\"Can not get both ip and hostname: \"\n                   + Arrays.toString(ipAndHost));\n             }\n             String exposedPorts \u003d containerExecutor.getExposedPorts(container);\n             container.setExposedPorts(exposedPorts);\n           } else {\n             LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n           }\n         }\n       }\n       // End of initializing any uninitialized processTrees\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n        throws ContainerExecutionException {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          LOG.debug(\"Tracking ProcessTree {} for the first time\", pId);\n          ResourceCalculatorProcessTree pt \u003d\n              getResourceCalculatorProcessTree(pId);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n\n          if (container !\u003d null) {\n            String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n\n            if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                (ipAndHost[1] !\u003d null)) {\n              container.setIpAndHost(ipAndHost);\n              LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                  + \", and hostname \u003d \" + ipAndHost[1]);\n            } else {\n              LOG.info(\"Can not get both ip and hostname: \"\n                  + Arrays.toString(ipAndHost));\n            }\n            String exposedPorts \u003d containerExecutor.getExposedPorts(container);\n            container.setExposedPorts(exposedPorts);\n          } else {\n            LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "f82922dcfae0b7e3e68ce970c441d8b7edc59acf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5168. Added exposed port information for Docker container.\n           Contributed by Xun Liu\n",
      "commitDate": "21/12/18 4:44 PM",
      "commitName": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/12/18 2:00 PM",
      "commitNameOld": "1b790f4dd1f682423d5dbb8e70c6225cbddce989",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.11,
      "commitsBetweenForRepo": 92,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,52 @@\n     private void initializeProcessTrees(\n             Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n         throws ContainerExecutionException {\n       ContainerId containerId \u003d entry.getKey();\n       ProcessTreeInfo ptInfo \u003d entry.getValue();\n       String pId \u003d ptInfo.getPID();\n \n       // Initialize any uninitialized processTrees\n       if (pId \u003d\u003d null) {\n         // get pid from ContainerId\n         pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n         if (pId !\u003d null) {\n           // pId will be null, either if the container is not spawned yet\n           // or if the container\u0027s pid is removed from ContainerExecutor\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n           }\n           ResourceCalculatorProcessTree pt \u003d\n               getResourceCalculatorProcessTree(pId);\n           ptInfo.setPid(pId);\n           ptInfo.setProcessTree(pt);\n \n           if (containerMetricsEnabled) {\n             ContainerMetrics usageMetrics \u003d ContainerMetrics\n                     .forContainer(containerId, containerMetricsPeriodMs,\n                       containerMetricsUnregisterDelayMs);\n             usageMetrics.recordProcessId(pId);\n           }\n \n           Container container \u003d context.getContainers().get(containerId);\n \n           if (container !\u003d null) {\n             String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n \n             if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                 (ipAndHost[1] !\u003d null)) {\n               container.setIpAndHost(ipAndHost);\n               LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                   + \", and hostname \u003d \" + ipAndHost[1]);\n             } else {\n               LOG.info(\"Can not get both ip and hostname: \"\n                   + Arrays.toString(ipAndHost));\n             }\n+            String exposedPorts \u003d containerExecutor.getExposedPorts(container);\n+            container.setExposedPorts(exposedPorts);\n           } else {\n             LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n           }\n         }\n       }\n       // End of initializing any uninitialized processTrees\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n        throws ContainerExecutionException {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n          }\n          ResourceCalculatorProcessTree pt \u003d\n              getResourceCalculatorProcessTree(pId);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n\n          if (container !\u003d null) {\n            String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n\n            if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                (ipAndHost[1] !\u003d null)) {\n              container.setIpAndHost(ipAndHost);\n              LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                  + \", and hostname \u003d \" + ipAndHost[1]);\n            } else {\n              LOG.info(\"Can not get both ip and hostname: \"\n                  + Arrays.toString(ipAndHost));\n            }\n            String exposedPorts \u003d containerExecutor.getExposedPorts(container);\n            container.setExposedPorts(exposedPorts);\n          } else {\n            LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7064. Use cgroup to get container resource utilization. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "26/01/18 4:27 PM",
      "commitName": "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "04/01/18 8:15 AM",
      "commitNameOld": "d795661868e330ac55d6ac7b0ee62fb658e03ff7",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 22.34,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,50 @@\n     private void initializeProcessTrees(\n             Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n         throws ContainerExecutionException {\n       ContainerId containerId \u003d entry.getKey();\n       ProcessTreeInfo ptInfo \u003d entry.getValue();\n       String pId \u003d ptInfo.getPID();\n \n       // Initialize any uninitialized processTrees\n       if (pId \u003d\u003d null) {\n         // get pid from ContainerId\n         pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n         if (pId !\u003d null) {\n           // pId will be null, either if the container is not spawned yet\n           // or if the container\u0027s pid is removed from ContainerExecutor\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n           }\n           ResourceCalculatorProcessTree pt \u003d\n-                  ResourceCalculatorProcessTree.\n-                        getResourceCalculatorProcessTree(\n-                            pId, processTreeClass, conf);\n+              getResourceCalculatorProcessTree(pId);\n           ptInfo.setPid(pId);\n           ptInfo.setProcessTree(pt);\n \n           if (containerMetricsEnabled) {\n             ContainerMetrics usageMetrics \u003d ContainerMetrics\n                     .forContainer(containerId, containerMetricsPeriodMs,\n                       containerMetricsUnregisterDelayMs);\n             usageMetrics.recordProcessId(pId);\n           }\n \n           Container container \u003d context.getContainers().get(containerId);\n \n           if (container !\u003d null) {\n             String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n \n             if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                 (ipAndHost[1] !\u003d null)) {\n               container.setIpAndHost(ipAndHost);\n               LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                   + \", and hostname \u003d \" + ipAndHost[1]);\n             } else {\n               LOG.info(\"Can not get both ip and hostname: \"\n                   + Arrays.toString(ipAndHost));\n             }\n           } else {\n             LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n           }\n         }\n       }\n       // End of initializing any uninitialized processTrees\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n        throws ContainerExecutionException {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n          }\n          ResourceCalculatorProcessTree pt \u003d\n              getResourceCalculatorProcessTree(pId);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n\n          if (container !\u003d null) {\n            String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n\n            if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                (ipAndHost[1] !\u003d null)) {\n              container.setIpAndHost(ipAndHost);\n              LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                  + \", and hostname \u003d \" + ipAndHost[1]);\n            } else {\n              LOG.info(\"Can not get both ip and hostname: \"\n                  + Arrays.toString(ipAndHost));\n            }\n          } else {\n            LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "b0b535d9d5727cd84fd6368c6d1b38363616504e": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-6930. Admins should be able to explicitly enable specific LinuxContainerRuntime in the NodeManager. Contributed by Shane Kumpf\n",
      "commitDate": "07/09/17 2:17 PM",
      "commitName": "b0b535d9d5727cd84fd6368c6d1b38363616504e",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "22/08/17 1:14 AM",
      "commitNameOld": "d5ff57a08fac983f8b5d201064ce07945f0f216e",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 16.54,
      "commitsBetweenForRepo": 165,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n     private void initializeProcessTrees(\n-            Entry\u003cContainerId, ProcessTreeInfo\u003e entry) {\n+            Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n+        throws ContainerExecutionException {\n       ContainerId containerId \u003d entry.getKey();\n       ProcessTreeInfo ptInfo \u003d entry.getValue();\n       String pId \u003d ptInfo.getPID();\n \n       // Initialize any uninitialized processTrees\n       if (pId \u003d\u003d null) {\n         // get pid from ContainerId\n         pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n         if (pId !\u003d null) {\n           // pId will be null, either if the container is not spawned yet\n           // or if the container\u0027s pid is removed from ContainerExecutor\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n           }\n           ResourceCalculatorProcessTree pt \u003d\n                   ResourceCalculatorProcessTree.\n                         getResourceCalculatorProcessTree(\n                             pId, processTreeClass, conf);\n           ptInfo.setPid(pId);\n           ptInfo.setProcessTree(pt);\n \n           if (containerMetricsEnabled) {\n             ContainerMetrics usageMetrics \u003d ContainerMetrics\n                     .forContainer(containerId, containerMetricsPeriodMs,\n                       containerMetricsUnregisterDelayMs);\n             usageMetrics.recordProcessId(pId);\n           }\n \n           Container container \u003d context.getContainers().get(containerId);\n \n           if (container !\u003d null) {\n             String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n \n             if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                 (ipAndHost[1] !\u003d null)) {\n               container.setIpAndHost(ipAndHost);\n               LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                   + \", and hostname \u003d \" + ipAndHost[1]);\n             } else {\n               LOG.info(\"Can not get both ip and hostname: \"\n                   + Arrays.toString(ipAndHost));\n             }\n           } else {\n             LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n           }\n         }\n       }\n       // End of initializing any uninitialized processTrees\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry)\n        throws ContainerExecutionException {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n          }\n          ResourceCalculatorProcessTree pt \u003d\n                  ResourceCalculatorProcessTree.\n                        getResourceCalculatorProcessTree(\n                            pId, processTreeClass, conf);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n\n          if (container !\u003d null) {\n            String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n\n            if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                (ipAndHost[1] !\u003d null)) {\n              container.setIpAndHost(ipAndHost);\n              LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                  + \", and hostname \u003d \" + ipAndHost[1]);\n            } else {\n              LOG.info(\"Can not get both ip and hostname: \"\n                  + Arrays.toString(ipAndHost));\n            }\n          } else {\n            LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[ContainerExecutionException]"
      }
    },
    "62b42ef5dd04d516d33bf0890ac5cd49f8184a73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5725. Test uncaught exception in TestContainersMonitorResourceChange.testContainersResourceChange\nwhen setting IP and host (Contributed by Miklos Szegedi via Daniel Templeton)\n",
      "commitDate": "28/11/16 3:19 PM",
      "commitName": "62b42ef5dd04d516d33bf0890ac5cd49f8184a73",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "23/11/16 12:42 AM",
      "commitNameOld": "3541ed80685f25486f33ef0f553854ccbdeb51d4",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 5.61,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,51 @@\n     private void initializeProcessTrees(\n             Entry\u003cContainerId, ProcessTreeInfo\u003e entry) {\n       ContainerId containerId \u003d entry.getKey();\n       ProcessTreeInfo ptInfo \u003d entry.getValue();\n       String pId \u003d ptInfo.getPID();\n \n       // Initialize any uninitialized processTrees\n       if (pId \u003d\u003d null) {\n         // get pid from ContainerId\n         pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n         if (pId !\u003d null) {\n           // pId will be null, either if the container is not spawned yet\n           // or if the container\u0027s pid is removed from ContainerExecutor\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n           }\n           ResourceCalculatorProcessTree pt \u003d\n                   ResourceCalculatorProcessTree.\n                         getResourceCalculatorProcessTree(\n                             pId, processTreeClass, conf);\n           ptInfo.setPid(pId);\n           ptInfo.setProcessTree(pt);\n \n           if (containerMetricsEnabled) {\n             ContainerMetrics usageMetrics \u003d ContainerMetrics\n                     .forContainer(containerId, containerMetricsPeriodMs,\n                       containerMetricsUnregisterDelayMs);\n             usageMetrics.recordProcessId(pId);\n           }\n \n           Container container \u003d context.getContainers().get(containerId);\n-          String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n-          if (ipAndHost !\u003d null \u0026\u0026 ipAndHost[0] !\u003d null\n-                  \u0026\u0026 ipAndHost[1] !\u003d null) {\n-            container.setIpAndHost(ipAndHost);\n-            LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n-                    + \", and hostname \u003d \" + ipAndHost[1]);\n+\n+          if (container !\u003d null) {\n+            String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n+\n+            if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n+                (ipAndHost[1] !\u003d null)) {\n+              container.setIpAndHost(ipAndHost);\n+              LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n+                  + \", and hostname \u003d \" + ipAndHost[1]);\n+            } else {\n+              LOG.info(\"Can not get both ip and hostname: \"\n+                  + Arrays.toString(ipAndHost));\n+            }\n           } else {\n-            LOG.info(\"Can not get both ip and hostname: \" + Arrays\n-                    .toString(ipAndHost));\n+            LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n           }\n         }\n       }\n       // End of initializing any uninitialized processTrees\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry) {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n          }\n          ResourceCalculatorProcessTree pt \u003d\n                  ResourceCalculatorProcessTree.\n                        getResourceCalculatorProcessTree(\n                            pId, processTreeClass, conf);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n\n          if (container !\u003d null) {\n            String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n\n            if ((ipAndHost !\u003d null) \u0026\u0026 (ipAndHost[0] !\u003d null) \u0026\u0026\n                (ipAndHost[1] !\u003d null)) {\n              container.setIpAndHost(ipAndHost);\n              LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                  + \", and hostname \u003d \" + ipAndHost[1]);\n            } else {\n              LOG.info(\"Can not get both ip and hostname: \"\n                  + Arrays.toString(ipAndHost));\n            }\n          } else {\n            LOG.info(containerId + \" is missing. Not setting ip and hostname\");\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "310aa4686eb697f0700a71d33106514c404dab1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5805. Add isDebugEnabled check for debug logs in nodemanager (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "01/11/16 2:21 AM",
      "commitName": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "27/10/16 2:36 PM",
      "commitNameOld": "9449519a2503c55d9eac8fd7519df28aa0760059",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 4.49,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n     private void initializeProcessTrees(\n             Entry\u003cContainerId, ProcessTreeInfo\u003e entry) {\n       ContainerId containerId \u003d entry.getKey();\n       ProcessTreeInfo ptInfo \u003d entry.getValue();\n       String pId \u003d ptInfo.getPID();\n \n       // Initialize any uninitialized processTrees\n       if (pId \u003d\u003d null) {\n         // get pid from ContainerId\n         pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n         if (pId !\u003d null) {\n           // pId will be null, either if the container is not spawned yet\n           // or if the container\u0027s pid is removed from ContainerExecutor\n-          LOG.debug(\"Tracking ProcessTree \" + pId\n-                  + \" for the first time\");\n-\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n+          }\n           ResourceCalculatorProcessTree pt \u003d\n                   ResourceCalculatorProcessTree.\n                         getResourceCalculatorProcessTree(\n                             pId, processTreeClass, conf);\n           ptInfo.setPid(pId);\n           ptInfo.setProcessTree(pt);\n \n           if (containerMetricsEnabled) {\n             ContainerMetrics usageMetrics \u003d ContainerMetrics\n                     .forContainer(containerId, containerMetricsPeriodMs,\n                       containerMetricsUnregisterDelayMs);\n             usageMetrics.recordProcessId(pId);\n           }\n \n           Container container \u003d context.getContainers().get(containerId);\n           String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n           if (ipAndHost !\u003d null \u0026\u0026 ipAndHost[0] !\u003d null\n                   \u0026\u0026 ipAndHost[1] !\u003d null) {\n             container.setIpAndHost(ipAndHost);\n             LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                     + \", and hostname \u003d \" + ipAndHost[1]);\n           } else {\n             LOG.info(\"Can not get both ip and hostname: \" + Arrays\n                     .toString(ipAndHost));\n           }\n         }\n       }\n       // End of initializing any uninitialized processTrees\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry) {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Tracking ProcessTree \" + pId + \" for the first time\");\n          }\n          ResourceCalculatorProcessTree pt \u003d\n                  ResourceCalculatorProcessTree.\n                        getResourceCalculatorProcessTree(\n                            pId, processTreeClass, conf);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n          String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n          if (ipAndHost !\u003d null \u0026\u0026 ipAndHost[0] !\u003d null\n                  \u0026\u0026 ipAndHost[1] !\u003d null) {\n            container.setIpAndHost(ipAndHost);\n            LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                    + \", and hostname \u003d \" + ipAndHost[1]);\n          } else {\n            LOG.info(\"Can not get both ip and hostname: \" + Arrays\n                    .toString(ipAndHost));\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java",
      "extendedDetails": {}
    },
    "9449519a2503c55d9eac8fd7519df28aa0760059": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5776. Checkstyle: MonitoringThread.Run method length is too long (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "27/10/16 2:36 PM",
      "commitName": "9449519a2503c55d9eac8fd7519df28aa0760059",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,45 @@\n+    private void initializeProcessTrees(\n+            Entry\u003cContainerId, ProcessTreeInfo\u003e entry) {\n+      ContainerId containerId \u003d entry.getKey();\n+      ProcessTreeInfo ptInfo \u003d entry.getValue();\n+      String pId \u003d ptInfo.getPID();\n+\n+      // Initialize any uninitialized processTrees\n+      if (pId \u003d\u003d null) {\n+        // get pid from ContainerId\n+        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n+        if (pId !\u003d null) {\n+          // pId will be null, either if the container is not spawned yet\n+          // or if the container\u0027s pid is removed from ContainerExecutor\n+          LOG.debug(\"Tracking ProcessTree \" + pId\n+                  + \" for the first time\");\n+\n+          ResourceCalculatorProcessTree pt \u003d\n+                  ResourceCalculatorProcessTree.\n+                        getResourceCalculatorProcessTree(\n+                            pId, processTreeClass, conf);\n+          ptInfo.setPid(pId);\n+          ptInfo.setProcessTree(pt);\n+\n+          if (containerMetricsEnabled) {\n+            ContainerMetrics usageMetrics \u003d ContainerMetrics\n+                    .forContainer(containerId, containerMetricsPeriodMs,\n+                      containerMetricsUnregisterDelayMs);\n+            usageMetrics.recordProcessId(pId);\n+          }\n+\n+          Container container \u003d context.getContainers().get(containerId);\n+          String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n+          if (ipAndHost !\u003d null \u0026\u0026 ipAndHost[0] !\u003d null\n+                  \u0026\u0026 ipAndHost[1] !\u003d null) {\n+            container.setIpAndHost(ipAndHost);\n+            LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n+                    + \", and hostname \u003d \" + ipAndHost[1]);\n+          } else {\n+            LOG.info(\"Can not get both ip and hostname: \" + Arrays\n+                    .toString(ipAndHost));\n+          }\n+        }\n+      }\n+      // End of initializing any uninitialized processTrees\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void initializeProcessTrees(\n            Entry\u003cContainerId, ProcessTreeInfo\u003e entry) {\n      ContainerId containerId \u003d entry.getKey();\n      ProcessTreeInfo ptInfo \u003d entry.getValue();\n      String pId \u003d ptInfo.getPID();\n\n      // Initialize any uninitialized processTrees\n      if (pId \u003d\u003d null) {\n        // get pid from ContainerId\n        pId \u003d containerExecutor.getProcessId(ptInfo.getContainerId());\n        if (pId !\u003d null) {\n          // pId will be null, either if the container is not spawned yet\n          // or if the container\u0027s pid is removed from ContainerExecutor\n          LOG.debug(\"Tracking ProcessTree \" + pId\n                  + \" for the first time\");\n\n          ResourceCalculatorProcessTree pt \u003d\n                  ResourceCalculatorProcessTree.\n                        getResourceCalculatorProcessTree(\n                            pId, processTreeClass, conf);\n          ptInfo.setPid(pId);\n          ptInfo.setProcessTree(pt);\n\n          if (containerMetricsEnabled) {\n            ContainerMetrics usageMetrics \u003d ContainerMetrics\n                    .forContainer(containerId, containerMetricsPeriodMs,\n                      containerMetricsUnregisterDelayMs);\n            usageMetrics.recordProcessId(pId);\n          }\n\n          Container container \u003d context.getContainers().get(containerId);\n          String[] ipAndHost \u003d containerExecutor.getIpAndHost(container);\n          if (ipAndHost !\u003d null \u0026\u0026 ipAndHost[0] !\u003d null\n                  \u0026\u0026 ipAndHost[1] !\u003d null) {\n            container.setIpAndHost(ipAndHost);\n            LOG.info(containerId + \"\u0027s ip \u003d \" + ipAndHost[0]\n                    + \", and hostname \u003d \" + ipAndHost[1]);\n          } else {\n            LOG.info(\"Can not get both ip and hostname: \" + Arrays\n                    .toString(ipAndHost));\n          }\n        }\n      }\n      // End of initializing any uninitialized processTrees\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/monitor/ContainersMonitorImpl.java"
    }
  }
}