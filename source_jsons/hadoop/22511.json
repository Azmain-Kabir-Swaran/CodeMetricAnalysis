{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileInputFormat.java",
  "functionName": "getPathStrings",
  "functionId": "getPathStrings___commaSeparatedPaths-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java",
  "functionStartLine": 586,
  "functionEndLine": 624,
  "numCommitsSeen": 23,
  "timeTaken": 4641,
  "changeHistory": [
    "905b17876c44634545a68300ff2f2d73fb86d3b7",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "905b17876c44634545a68300ff2f2d73fb86d3b7": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "905b17876c44634545a68300ff2f2d73fb86d3b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4723. Fix warnings found by findbugs 2. Contributed by Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:16 PM",
      "commitName": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "24/01/12 1:29 PM",
      "commitNameOld": "dc615c312b81d2bff17821b59fba1b76aa24f585",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 295.12,
      "commitsBetweenForRepo": 1918,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,39 @@\n   private static String[] getPathStrings(String commaSeparatedPaths) {\n     int length \u003d commaSeparatedPaths.length();\n     int curlyOpen \u003d 0;\n     int pathStart \u003d 0;\n     boolean globPattern \u003d false;\n     List\u003cString\u003e pathStrings \u003d new ArrayList\u003cString\u003e();\n     \n     for (int i\u003d0; i\u003clength; i++) {\n       char ch \u003d commaSeparatedPaths.charAt(i);\n       switch(ch) {\n         case \u0027{\u0027 : {\n           curlyOpen++;\n           if (!globPattern) {\n             globPattern \u003d true;\n           }\n           break;\n         }\n         case \u0027}\u0027 : {\n           curlyOpen--;\n           if (curlyOpen \u003d\u003d 0 \u0026\u0026 globPattern) {\n             globPattern \u003d false;\n           }\n           break;\n         }\n         case \u0027,\u0027 : {\n           if (!globPattern) {\n             pathStrings.add(commaSeparatedPaths.substring(pathStart, i));\n             pathStart \u003d i + 1 ;\n           }\n           break;\n         }\n+        default:\n+          continue; // nothing special to do for this character\n       }\n     }\n     pathStrings.add(commaSeparatedPaths.substring(pathStart, length));\n     \n     return pathStrings.toArray(new String[0]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static String[] getPathStrings(String commaSeparatedPaths) {\n    int length \u003d commaSeparatedPaths.length();\n    int curlyOpen \u003d 0;\n    int pathStart \u003d 0;\n    boolean globPattern \u003d false;\n    List\u003cString\u003e pathStrings \u003d new ArrayList\u003cString\u003e();\n    \n    for (int i\u003d0; i\u003clength; i++) {\n      char ch \u003d commaSeparatedPaths.charAt(i);\n      switch(ch) {\n        case \u0027{\u0027 : {\n          curlyOpen++;\n          if (!globPattern) {\n            globPattern \u003d true;\n          }\n          break;\n        }\n        case \u0027}\u0027 : {\n          curlyOpen--;\n          if (curlyOpen \u003d\u003d 0 \u0026\u0026 globPattern) {\n            globPattern \u003d false;\n          }\n          break;\n        }\n        case \u0027,\u0027 : {\n          if (!globPattern) {\n            pathStrings.add(commaSeparatedPaths.substring(pathStart, i));\n            pathStart \u003d i + 1 ;\n          }\n          break;\n        }\n        default:\n          continue; // nothing special to do for this character\n      }\n    }\n    pathStrings.add(commaSeparatedPaths.substring(pathStart, length));\n    \n    return pathStrings.toArray(new String[0]);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static String[] getPathStrings(String commaSeparatedPaths) {\n    int length \u003d commaSeparatedPaths.length();\n    int curlyOpen \u003d 0;\n    int pathStart \u003d 0;\n    boolean globPattern \u003d false;\n    List\u003cString\u003e pathStrings \u003d new ArrayList\u003cString\u003e();\n    \n    for (int i\u003d0; i\u003clength; i++) {\n      char ch \u003d commaSeparatedPaths.charAt(i);\n      switch(ch) {\n        case \u0027{\u0027 : {\n          curlyOpen++;\n          if (!globPattern) {\n            globPattern \u003d true;\n          }\n          break;\n        }\n        case \u0027}\u0027 : {\n          curlyOpen--;\n          if (curlyOpen \u003d\u003d 0 \u0026\u0026 globPattern) {\n            globPattern \u003d false;\n          }\n          break;\n        }\n        case \u0027,\u0027 : {\n          if (!globPattern) {\n            pathStrings.add(commaSeparatedPaths.substring(pathStart, i));\n            pathStart \u003d i + 1 ;\n          }\n          break;\n        }\n      }\n    }\n    pathStrings.add(commaSeparatedPaths.substring(pathStart, length));\n    \n    return pathStrings.toArray(new String[0]);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private static String[] getPathStrings(String commaSeparatedPaths) {\n    int length \u003d commaSeparatedPaths.length();\n    int curlyOpen \u003d 0;\n    int pathStart \u003d 0;\n    boolean globPattern \u003d false;\n    List\u003cString\u003e pathStrings \u003d new ArrayList\u003cString\u003e();\n    \n    for (int i\u003d0; i\u003clength; i++) {\n      char ch \u003d commaSeparatedPaths.charAt(i);\n      switch(ch) {\n        case \u0027{\u0027 : {\n          curlyOpen++;\n          if (!globPattern) {\n            globPattern \u003d true;\n          }\n          break;\n        }\n        case \u0027}\u0027 : {\n          curlyOpen--;\n          if (curlyOpen \u003d\u003d 0 \u0026\u0026 globPattern) {\n            globPattern \u003d false;\n          }\n          break;\n        }\n        case \u0027,\u0027 : {\n          if (!globPattern) {\n            pathStrings.add(commaSeparatedPaths.substring(pathStart, i));\n            pathStart \u003d i + 1 ;\n          }\n          break;\n        }\n      }\n    }\n    pathStrings.add(commaSeparatedPaths.substring(pathStart, length));\n    \n    return pathStrings.toArray(new String[0]);\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,37 @@\n+  private static String[] getPathStrings(String commaSeparatedPaths) {\n+    int length \u003d commaSeparatedPaths.length();\n+    int curlyOpen \u003d 0;\n+    int pathStart \u003d 0;\n+    boolean globPattern \u003d false;\n+    List\u003cString\u003e pathStrings \u003d new ArrayList\u003cString\u003e();\n+    \n+    for (int i\u003d0; i\u003clength; i++) {\n+      char ch \u003d commaSeparatedPaths.charAt(i);\n+      switch(ch) {\n+        case \u0027{\u0027 : {\n+          curlyOpen++;\n+          if (!globPattern) {\n+            globPattern \u003d true;\n+          }\n+          break;\n+        }\n+        case \u0027}\u0027 : {\n+          curlyOpen--;\n+          if (curlyOpen \u003d\u003d 0 \u0026\u0026 globPattern) {\n+            globPattern \u003d false;\n+          }\n+          break;\n+        }\n+        case \u0027,\u0027 : {\n+          if (!globPattern) {\n+            pathStrings.add(commaSeparatedPaths.substring(pathStart, i));\n+            pathStart \u003d i + 1 ;\n+          }\n+          break;\n+        }\n+      }\n+    }\n+    pathStrings.add(commaSeparatedPaths.substring(pathStart, length));\n+    \n+    return pathStrings.toArray(new String[0]);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static String[] getPathStrings(String commaSeparatedPaths) {\n    int length \u003d commaSeparatedPaths.length();\n    int curlyOpen \u003d 0;\n    int pathStart \u003d 0;\n    boolean globPattern \u003d false;\n    List\u003cString\u003e pathStrings \u003d new ArrayList\u003cString\u003e();\n    \n    for (int i\u003d0; i\u003clength; i++) {\n      char ch \u003d commaSeparatedPaths.charAt(i);\n      switch(ch) {\n        case \u0027{\u0027 : {\n          curlyOpen++;\n          if (!globPattern) {\n            globPattern \u003d true;\n          }\n          break;\n        }\n        case \u0027}\u0027 : {\n          curlyOpen--;\n          if (curlyOpen \u003d\u003d 0 \u0026\u0026 globPattern) {\n            globPattern \u003d false;\n          }\n          break;\n        }\n        case \u0027,\u0027 : {\n          if (!globPattern) {\n            pathStrings.add(commaSeparatedPaths.substring(pathStart, i));\n            pathStart \u003d i + 1 ;\n          }\n          break;\n        }\n      }\n    }\n    pathStrings.add(commaSeparatedPaths.substring(pathStart, length));\n    \n    return pathStrings.toArray(new String[0]);\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/input/FileInputFormat.java"
    }
  }
}