{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLinkResolver.java",
  "functionName": "resolve",
  "functionId": "resolve___fc-FileContext(modifiers-final)__path-Path(modifiers-final)",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
  "functionStartLine": 79,
  "functionEndLine": 112,
  "numCommitsSeen": 55,
  "timeTaken": 2781,
  "changeHistory": [
    "26971e52ae65590e618a23621be244e588845adc",
    "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b",
    "33fe54a25f04673048f0f0db4abaa42535f043ec",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0"
  ],
  "changeHistoryShort": {
    "26971e52ae65590e618a23621be244e588845adc": "Ybodychange",
    "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b": "Ybodychange",
    "33fe54a25f04673048f0f0db4abaa42535f043ec": "Ybodychange",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "26971e52ae65590e618a23621be244e588845adc": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11852. Disable symlinks in trunk.\n",
      "commitDate": "23/04/15 11:47 AM",
      "commitName": "26971e52ae65590e618a23621be244e588845adc",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "31/07/13 6:04 PM",
      "commitNameOld": "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 630.74,
      "commitsBetweenForRepo": 4805,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,34 @@\n   public T resolve(final FileContext fc, final Path path) throws IOException {\n     int count \u003d 0;\n     T in \u003d null;\n     Path p \u003d path;\n     // NB: More than one AbstractFileSystem can match a scheme, eg \n     // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n     AbstractFileSystem fs \u003d fc.getFSofPath(p);\n \n     // Loop until all symlinks are resolved or the limit is reached\n     for (boolean isLink \u003d true; isLink;) {\n       try {\n         in \u003d next(fs, p);\n         isLink \u003d false;\n       } catch (UnresolvedLinkException e) {\n         if (!fc.resolveSymlinks) {\n           throw new IOException(\"Path \" + path + \" contains a symlink\"\n               + \" and symlink resolution is disabled (\"\n               + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY + \").\", e);\n         }\n+        if (!FileSystem.areSymlinksEnabled()) {\n+          throw new IOException(\"Symlink resolution is disabled in\"\n+              + \" this version of Hadoop.\");\n+        }\n         if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n           throw new IOException(\"Possible cyclic loop while \" +\n                                 \"following symbolic link \" + path);\n         }\n         // Resolve the first unresolved path component\n         p \u003d qualifySymlinkTarget(fs.getUri(), p, fs.getLinkTarget(p));\n         fs \u003d fc.getFSofPath(p);\n       }\n     }\n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public T resolve(final FileContext fc, final Path path) throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // NB: More than one AbstractFileSystem can match a scheme, eg \n    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n\n    // Loop until all symlinks are resolved or the limit is reached\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d next(fs, p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (!fc.resolveSymlinks) {\n          throw new IOException(\"Path \" + path + \" contains a symlink\"\n              + \" and symlink resolution is disabled (\"\n              + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY + \").\", e);\n        }\n        if (!FileSystem.areSymlinksEnabled()) {\n          throw new IOException(\"Symlink resolution is disabled in\"\n              + \" this version of Hadoop.\");\n        }\n        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d qualifySymlinkTarget(fs.getUri(), p, fs.getLinkTarget(p));\n        fs \u003d fc.getFSofPath(p);\n      }\n    }\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
      "extendedDetails": {}
    },
    "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9758.  Provide configuration option for FS/FC symlink resolution.  (Andrew Wang via Colin Patrick McCabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509064 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/07/13 6:04 PM",
      "commitName": "9ad19eec6f20530c9f2b9b80ee858ac9ca02827b",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "03/07/13 4:29 PM",
      "commitNameOld": "33fe54a25f04673048f0f0db4abaa42535f043ec",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 28.07,
      "commitsBetweenForRepo": 166,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n   public T resolve(final FileContext fc, final Path path) throws IOException {\n     int count \u003d 0;\n     T in \u003d null;\n     Path p \u003d path;\n     // NB: More than one AbstractFileSystem can match a scheme, eg \n     // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n     AbstractFileSystem fs \u003d fc.getFSofPath(p);\n \n     // Loop until all symlinks are resolved or the limit is reached\n     for (boolean isLink \u003d true; isLink;) {\n       try {\n         in \u003d next(fs, p);\n         isLink \u003d false;\n       } catch (UnresolvedLinkException e) {\n+        if (!fc.resolveSymlinks) {\n+          throw new IOException(\"Path \" + path + \" contains a symlink\"\n+              + \" and symlink resolution is disabled (\"\n+              + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY + \").\", e);\n+        }\n         if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n           throw new IOException(\"Possible cyclic loop while \" +\n                                 \"following symbolic link \" + path);\n         }\n         // Resolve the first unresolved path component\n         p \u003d qualifySymlinkTarget(fs.getUri(), p, fs.getLinkTarget(p));\n         fs \u003d fc.getFSofPath(p);\n       }\n     }\n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public T resolve(final FileContext fc, final Path path) throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // NB: More than one AbstractFileSystem can match a scheme, eg \n    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n\n    // Loop until all symlinks are resolved or the limit is reached\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d next(fs, p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (!fc.resolveSymlinks) {\n          throw new IOException(\"Path \" + path + \" contains a symlink\"\n              + \" and symlink resolution is disabled (\"\n              + CommonConfigurationKeys.FS_CLIENT_RESOLVE_REMOTE_SYMLINKS_KEY + \").\", e);\n        }\n        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d qualifySymlinkTarget(fs.getUri(), p, fs.getLinkTarget(p));\n        fs \u003d fc.getFSofPath(p);\n      }\n    }\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
      "extendedDetails": {}
    },
    "33fe54a25f04673048f0f0db4abaa42535f043ec": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9416.  Add new symlink resolution methods in FileSystem and FileSystemLinkResolver.  (awang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1499602 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/13 4:29 PM",
      "commitName": "33fe54a25f04673048f0f0db4abaa42535f043ec",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "01/07/13 3:09 PM",
      "commitNameOld": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 2.06,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public T resolve(final FileContext fc, final Path path) throws IOException {\n     int count \u003d 0;\n     T in \u003d null;\n     Path p \u003d path;\n     // NB: More than one AbstractFileSystem can match a scheme, eg \n     // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n     AbstractFileSystem fs \u003d fc.getFSofPath(p);\n \n     // Loop until all symlinks are resolved or the limit is reached\n     for (boolean isLink \u003d true; isLink;) {\n       try {\n         in \u003d next(fs, p);\n         isLink \u003d false;\n       } catch (UnresolvedLinkException e) {\n-        if (count++ \u003e MAX_PATH_LINKS) {\n+        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n           throw new IOException(\"Possible cyclic loop while \" +\n                                 \"following symbolic link \" + path);\n         }\n         // Resolve the first unresolved path component\n-        p \u003d FSLinkResolver.qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n+        p \u003d qualifySymlinkTarget(fs.getUri(), p, fs.getLinkTarget(p));\n         fs \u003d fc.getFSofPath(p);\n       }\n     }\n     return in;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public T resolve(final FileContext fc, final Path path) throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // NB: More than one AbstractFileSystem can match a scheme, eg \n    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n\n    // Loop until all symlinks are resolved or the limit is reached\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d next(fs, p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (count++ \u003e FsConstants.MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d qualifySymlinkTarget(fs.getUri(), p, fs.getLinkTarget(p));\n        fs \u003d fc.getFSofPath(p);\n      }\n    }\n    return in;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
      "extendedDetails": {}
    },
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/13 3:09 PM",
      "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/13 3:09 PM",
          "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/07/13 1:20 PM",
          "commitNameOld": "ead7fa0413fd8aacd6d93697cf398ed17c30930f",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    public T resolve(final FileContext fc, Path p) throws IOException {\n-      int count \u003d 0;\n-      T in \u003d null;\n-      Path first \u003d p;\n-      // NB: More than one AbstractFileSystem can match a scheme, eg \n-      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n-      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n+  public T resolve(final FileContext fc, final Path path) throws IOException {\n+    int count \u003d 0;\n+    T in \u003d null;\n+    Path p \u003d path;\n+    // NB: More than one AbstractFileSystem can match a scheme, eg \n+    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n+    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n \n-      // Loop until all symlinks are resolved or the limit is reached\n-      for (boolean isLink \u003d true; isLink;) {\n-        try {\n-          in \u003d next(fs, p);\n-          isLink \u003d false;\n-        } catch (UnresolvedLinkException e) {\n-          if (count++ \u003e MAX_PATH_LINKS) {\n-            throw new IOException(\"Possible cyclic loop while \" +\n-                                  \"following symbolic link \" + first);\n-          }\n-          // Resolve the first unresolved path component\n-          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n-          fs \u003d fc.getFSofPath(p);\n+    // Loop until all symlinks are resolved or the limit is reached\n+    for (boolean isLink \u003d true; isLink;) {\n+      try {\n+        in \u003d next(fs, p);\n+        isLink \u003d false;\n+      } catch (UnresolvedLinkException e) {\n+        if (count++ \u003e MAX_PATH_LINKS) {\n+          throw new IOException(\"Possible cyclic loop while \" +\n+                                \"following symbolic link \" + path);\n         }\n+        // Resolve the first unresolved path component\n+        p \u003d FSLinkResolver.qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n+        fs \u003d fc.getFSofPath(p);\n       }\n-      return in;\n-    }\n\\ No newline at end of file\n+    }\n+    return in;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public T resolve(final FileContext fc, final Path path) throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // NB: More than one AbstractFileSystem can match a scheme, eg \n    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n\n    // Loop until all symlinks are resolved or the limit is reached\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d next(fs, p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (count++ \u003e MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d FSLinkResolver.qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n        fs \u003d fc.getFSofPath(p);\n      }\n    }\n    return in;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
            "oldMethodName": "resolve",
            "newMethodName": "resolve"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/13 3:09 PM",
          "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/07/13 1:20 PM",
          "commitNameOld": "ead7fa0413fd8aacd6d93697cf398ed17c30930f",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    public T resolve(final FileContext fc, Path p) throws IOException {\n-      int count \u003d 0;\n-      T in \u003d null;\n-      Path first \u003d p;\n-      // NB: More than one AbstractFileSystem can match a scheme, eg \n-      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n-      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n+  public T resolve(final FileContext fc, final Path path) throws IOException {\n+    int count \u003d 0;\n+    T in \u003d null;\n+    Path p \u003d path;\n+    // NB: More than one AbstractFileSystem can match a scheme, eg \n+    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n+    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n \n-      // Loop until all symlinks are resolved or the limit is reached\n-      for (boolean isLink \u003d true; isLink;) {\n-        try {\n-          in \u003d next(fs, p);\n-          isLink \u003d false;\n-        } catch (UnresolvedLinkException e) {\n-          if (count++ \u003e MAX_PATH_LINKS) {\n-            throw new IOException(\"Possible cyclic loop while \" +\n-                                  \"following symbolic link \" + first);\n-          }\n-          // Resolve the first unresolved path component\n-          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n-          fs \u003d fc.getFSofPath(p);\n+    // Loop until all symlinks are resolved or the limit is reached\n+    for (boolean isLink \u003d true; isLink;) {\n+      try {\n+        in \u003d next(fs, p);\n+        isLink \u003d false;\n+      } catch (UnresolvedLinkException e) {\n+        if (count++ \u003e MAX_PATH_LINKS) {\n+          throw new IOException(\"Possible cyclic loop while \" +\n+                                \"following symbolic link \" + path);\n         }\n+        // Resolve the first unresolved path component\n+        p \u003d FSLinkResolver.qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n+        fs \u003d fc.getFSofPath(p);\n       }\n-      return in;\n-    }\n\\ No newline at end of file\n+    }\n+    return in;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public T resolve(final FileContext fc, final Path path) throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // NB: More than one AbstractFileSystem can match a scheme, eg \n    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n\n    // Loop until all symlinks are resolved or the limit is reached\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d next(fs, p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (count++ \u003e MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d FSLinkResolver.qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n        fs \u003d fc.getFSofPath(p);\n      }\n    }\n    return in;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/07/13 3:09 PM",
          "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "01/07/13 1:20 PM",
          "commitNameOld": "ead7fa0413fd8aacd6d93697cf398ed17c30930f",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-    public T resolve(final FileContext fc, Path p) throws IOException {\n-      int count \u003d 0;\n-      T in \u003d null;\n-      Path first \u003d p;\n-      // NB: More than one AbstractFileSystem can match a scheme, eg \n-      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n-      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n+  public T resolve(final FileContext fc, final Path path) throws IOException {\n+    int count \u003d 0;\n+    T in \u003d null;\n+    Path p \u003d path;\n+    // NB: More than one AbstractFileSystem can match a scheme, eg \n+    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n+    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n \n-      // Loop until all symlinks are resolved or the limit is reached\n-      for (boolean isLink \u003d true; isLink;) {\n-        try {\n-          in \u003d next(fs, p);\n-          isLink \u003d false;\n-        } catch (UnresolvedLinkException e) {\n-          if (count++ \u003e MAX_PATH_LINKS) {\n-            throw new IOException(\"Possible cyclic loop while \" +\n-                                  \"following symbolic link \" + first);\n-          }\n-          // Resolve the first unresolved path component\n-          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n-          fs \u003d fc.getFSofPath(p);\n+    // Loop until all symlinks are resolved or the limit is reached\n+    for (boolean isLink \u003d true; isLink;) {\n+      try {\n+        in \u003d next(fs, p);\n+        isLink \u003d false;\n+      } catch (UnresolvedLinkException e) {\n+        if (count++ \u003e MAX_PATH_LINKS) {\n+          throw new IOException(\"Possible cyclic loop while \" +\n+                                \"following symbolic link \" + path);\n         }\n+        // Resolve the first unresolved path component\n+        p \u003d FSLinkResolver.qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n+        fs \u003d fc.getFSofPath(p);\n       }\n-      return in;\n-    }\n\\ No newline at end of file\n+    }\n+    return in;\n+  }\n\\ No newline at end of file\n",
          "actualSource": "  public T resolve(final FileContext fc, final Path path) throws IOException {\n    int count \u003d 0;\n    T in \u003d null;\n    Path p \u003d path;\n    // NB: More than one AbstractFileSystem can match a scheme, eg \n    // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n    AbstractFileSystem fs \u003d fc.getFSofPath(p);\n\n    // Loop until all symlinks are resolved or the limit is reached\n    for (boolean isLink \u003d true; isLink;) {\n      try {\n        in \u003d next(fs, p);\n        isLink \u003d false;\n      } catch (UnresolvedLinkException e) {\n        if (count++ \u003e MAX_PATH_LINKS) {\n          throw new IOException(\"Possible cyclic loop while \" +\n                                \"following symbolic link \" + path);\n        }\n        // Resolve the first unresolved path component\n        p \u003d FSLinkResolver.qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n        fs \u003d fc.getFSofPath(p);\n      }\n    }\n    return in;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FSLinkResolver.java",
          "extendedDetails": {
            "oldValue": "[fc-FileContext(modifiers-final), p-Path]",
            "newValue": "[fc-FileContext(modifiers-final), path-Path(modifiers-final)]"
          }
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public T resolve(final FileContext fc, Path p) throws IOException {\n      int count \u003d 0;\n      T in \u003d null;\n      Path first \u003d p;\n      // NB: More than one AbstractFileSystem can match a scheme, eg \n      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n\n      // Loop until all symlinks are resolved or the limit is reached\n      for (boolean isLink \u003d true; isLink;) {\n        try {\n          in \u003d next(fs, p);\n          isLink \u003d false;\n        } catch (UnresolvedLinkException e) {\n          if (count++ \u003e MAX_PATH_LINKS) {\n            throw new IOException(\"Possible cyclic loop while \" +\n                                  \"following symbolic link \" + first);\n          }\n          // Resolve the first unresolved path component\n          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n          fs \u003d fc.getFSofPath(p);\n        }\n      }\n      return in;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public T resolve(final FileContext fc, Path p) throws IOException {\n      int count \u003d 0;\n      T in \u003d null;\n      Path first \u003d p;\n      // NB: More than one AbstractFileSystem can match a scheme, eg \n      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n\n      // Loop until all symlinks are resolved or the limit is reached\n      for (boolean isLink \u003d true; isLink;) {\n        try {\n          in \u003d next(fs, p);\n          isLink \u003d false;\n        } catch (UnresolvedLinkException e) {\n          if (count++ \u003e MAX_PATH_LINKS) {\n            throw new IOException(\"Possible cyclic loop while \" +\n                                  \"following symbolic link \" + first);\n          }\n          // Resolve the first unresolved path component\n          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n          fs \u003d fc.getFSofPath(p);\n        }\n      }\n      return in;\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public T resolve(final FileContext fc, Path p) throws IOException {\n      int count \u003d 0;\n      T in \u003d null;\n      Path first \u003d p;\n      // NB: More than one AbstractFileSystem can match a scheme, eg \n      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n\n      // Loop until all symlinks are resolved or the limit is reached\n      for (boolean isLink \u003d true; isLink;) {\n        try {\n          in \u003d next(fs, p);\n          isLink \u003d false;\n        } catch (UnresolvedLinkException e) {\n          if (count++ \u003e MAX_PATH_LINKS) {\n            throw new IOException(\"Possible cyclic loop while \" +\n                                  \"following symbolic link \" + first);\n          }\n          // Resolve the first unresolved path component\n          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n          fs \u003d fc.getFSofPath(p);\n        }\n      }\n      return in;\n    }",
      "path": "common/src/java/org/apache/hadoop/fs/FileContext.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/FileContext.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/FileContext.java"
      }
    },
    "ea605b8cd79163444feead75d7b55dbd4ab537a0": {
      "type": "Yintroduced",
      "commitMessage": "    HADOOP-6421 Adds Symbolic links to FileContext, AbstractFileSystem.\n    It also adds a limited implementation for the local file system\n     (RawLocalFs) that allows local symlinks. (Eli Collins via Sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@910706 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/02/10 1:43 PM",
      "commitName": "ea605b8cd79163444feead75d7b55dbd4ab537a0",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,25 @@\n+    public T resolve(final FileContext fc, Path p) throws IOException {\n+      int count \u003d 0;\n+      T in \u003d null;\n+      Path first \u003d p;\n+      // NB: More than one AbstractFileSystem can match a scheme, eg \n+      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n+      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n+      \n+      // Loop until all symlinks are resolved or the limit is reached\n+      for (boolean isLink \u003d true; isLink;) {\n+        try {\n+          in \u003d next(fs, p);\n+          isLink \u003d false;\n+        } catch (UnresolvedLinkException e) {\n+          if (count++ \u003e MAX_PATH_LINKS) {\n+            throw new IOException(\"Possible cyclic loop while \" +\n+                                  \"following symbolic link \" + first);\n+          }\n+          // Resolve the first unresolved path component\n+          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n+          fs \u003d fc.getFSofPath(p);\n+        }\n+      }\n+      return in;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public T resolve(final FileContext fc, Path p) throws IOException {\n      int count \u003d 0;\n      T in \u003d null;\n      Path first \u003d p;\n      // NB: More than one AbstractFileSystem can match a scheme, eg \n      // \"file\" resolves to LocalFs but could have come by RawLocalFs.\n      AbstractFileSystem fs \u003d fc.getFSofPath(p);      \n      \n      // Loop until all symlinks are resolved or the limit is reached\n      for (boolean isLink \u003d true; isLink;) {\n        try {\n          in \u003d next(fs, p);\n          isLink \u003d false;\n        } catch (UnresolvedLinkException e) {\n          if (count++ \u003e MAX_PATH_LINKS) {\n            throw new IOException(\"Possible cyclic loop while \" +\n                                  \"following symbolic link \" + first);\n          }\n          // Resolve the first unresolved path component\n          p \u003d qualifySymlinkTarget(fs, p, fs.getLinkTarget(p));\n          fs \u003d fc.getFSofPath(p);\n        }\n      }\n      return in;\n    }",
      "path": "src/java/org/apache/hadoop/fs/FileContext.java"
    }
  }
}