{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "processResponse",
  "functionId": "processResponse___responseQueue-LinkedList__RpcCall____inHandler-boolean",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 1621,
  "functionEndLine": 1704,
  "numCommitsSeen": 553,
  "timeTaken": 9221,
  "changeHistory": [
    "be77231452baee2c3dd68f7c0991411cae2eea1b",
    "f96a2df38d889f29314c57f4d94227b2e419a11f",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
    "763f073f41e3eaa9ecd11c6ec0b76234739272aa",
    "7ec67c5118e8d13e2cb0ab09d04f0609b645a676",
    "12eb3b8abc0ac056922040ff935ef299849ca557",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "be77231452baee2c3dd68f7c0991411cae2eea1b": "Ybodychange",
    "f96a2df38d889f29314c57f4d94227b2e419a11f": "Ybodychange",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": "Ymultichange(Yparameterchange,Ybodychange)",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": "Ymultichange(Yparameterchange,Ybodychange)",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": "Ymultichange(Yparameterchange,Ybodychange)",
    "763f073f41e3eaa9ecd11c6ec0b76234739272aa": "Ybodychange",
    "7ec67c5118e8d13e2cb0ab09d04f0609b645a676": "Ybodychange",
    "12eb3b8abc0ac056922040ff935ef299849ca557": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "be77231452baee2c3dd68f7c0991411cae2eea1b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16700. Track response time separately in Server.Call to avoid negative RpcQueueTime values. Contributed by xuzq.\n",
      "commitDate": "20/11/19 7:56 AM",
      "commitName": "be77231452baee2c3dd68f7c0991411cae2eea1b",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "18/11/19 6:31 PM",
      "commitNameOld": "4050471b45da569d7dc4f724b613ee2879c0ec2a",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 1.56,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n     private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n       RpcCall call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n-              call.timestampNanos \u003d Time.monotonicNowNanos();\n+              call.responseTimestampNanos \u003d Time.monotonicNowNanos();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      RpcCall call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.responseTimestampNanos \u003d Time.monotonicNowNanos();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "f96a2df38d889f29314c57f4d94227b2e419a11f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16266. Add more fine-grained processing time metrics to the RPC layer. Contributed by Christopher Gregorian.\n",
      "commitDate": "23/05/19 10:28 AM",
      "commitName": "f96a2df38d889f29314c57f4d94227b2e419a11f",
      "commitAuthor": "Christopher Gregorian",
      "commitDateOld": "07/05/19 5:48 PM",
      "commitNameOld": "713e8a27aea03f302b7a7d58769c967958f6e46a",
      "commitAuthorOld": "Peter Bacsko",
      "daysBetweenCommits": 15.69,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n     private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n       RpcCall call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n-              call.timestamp \u003d Time.now();\n+              call.timestampNanos \u003d Time.monotonicNowNanos();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      RpcCall call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestampNanos \u003d Time.monotonicNowNanos();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "01/09/16 1:44 PM",
      "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "01/09/16 1:44 PM",
          "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 2:04 PM",
          "commitNameOld": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,84 +1,84 @@\n-    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n+    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n-      Call call \u003d null;\n+      RpcCall call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      RpcCall call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[responseQueue-LinkedList\u003cCall\u003e, inHandler-boolean]",
            "newValue": "[responseQueue-LinkedList\u003cRpcCall\u003e, inHandler-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "01/09/16 1:44 PM",
          "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 2:04 PM",
          "commitNameOld": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 6.99,
          "commitsBetweenForRepo": 39,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,84 +1,84 @@\n-    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n+    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n-      Call call \u003d null;\n+      RpcCall call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      RpcCall call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
      "commitDate": "25/08/16 2:04 PM",
      "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
          "commitDate": "25/08/16 2:04 PM",
          "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:44 AM",
          "commitNameOld": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,84 +1,84 @@\n-    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n+    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n-      RpcCall call \u003d null;\n+      Call call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[responseQueue-LinkedList\u003cRpcCall\u003e, inHandler-boolean]",
            "newValue": "[responseQueue-LinkedList\u003cCall\u003e, inHandler-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
          "commitDate": "25/08/16 2:04 PM",
          "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "25/08/16 9:44 AM",
          "commitNameOld": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.18,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,84 +1,84 @@\n-    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n+    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n-      RpcCall call \u003d null;\n+      Call call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "25/08/16 9:44 AM",
      "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "25/08/16 9:44 AM",
          "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "03/08/16 11:22 AM",
          "commitNameOld": "580a8334963709e728ed677c815fb7fef9bca70e",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 21.93,
          "commitsBetweenForRepo": 167,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,84 +1,84 @@\n-    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n+    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n-      Call call \u003d null;\n+      RpcCall call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      RpcCall call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[responseQueue-LinkedList\u003cCall\u003e, inHandler-boolean]",
            "newValue": "[responseQueue-LinkedList\u003cRpcCall\u003e, inHandler-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
          "commitDate": "25/08/16 9:44 AM",
          "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "03/08/16 11:22 AM",
          "commitNameOld": "580a8334963709e728ed677c815fb7fef9bca70e",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 21.93,
          "commitsBetweenForRepo": 167,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,84 +1,84 @@\n-    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n+    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n-      Call call \u003d null;\n+      RpcCall call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processResponse(LinkedList\u003cRpcCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      RpcCall call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "763f073f41e3eaa9ecd11c6ec0b76234739272aa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10106. Incorrect thread name in RPC log messages. Contributed by Ming Ma.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1551369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/12/13 1:57 PM",
      "commitName": "763f073f41e3eaa9ecd11c6ec0b76234739272aa",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "12/12/13 10:56 AM",
      "commitNameOld": "a4819e70dbf88b0905a6669078afa1ff0924ad4f",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 4.13,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n     private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n       Call call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(getName() + \": responding to \" + call);\n+            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(getName() + \": responding to \" + call\n+              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(getName() + \": responding to \" + call\n+              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                   + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n-          LOG.warn(getName()+\", call \" + call + \": output error\");\n+          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(Thread.currentThread().getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(Thread.currentThread().getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(Thread.currentThread().getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "7ec67c5118e8d13e2cb0ab09d04f0609b645a676": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9716. Rpc retries should use the same call ID as the original call.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1504362 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/07/13 9:42 PM",
      "commitName": "7ec67c5118e8d13e2cb0ab09d04f0609b645a676",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "16/07/13 10:59 AM",
      "commitNameOld": "a3a9d72e98a9cc0f94af7c832dd13c408856636d",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 1.45,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,86 +1,84 @@\n     private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n       Call call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n-                      call.connection);\n+            LOG.debug(getName() + \": responding to \" + call);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             //Clear out the response buffer so it can be collected\n             call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n-                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n+              LOG.debug(getName() + \": responding to \" + call\n+                  + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n-                        call.connection + \" Wrote partial \" + numBytes + \n-                        \" bytes.\");\n+              LOG.debug(getName() + \": responding to \" + call\n+                  + \" Wrote partial \" + numBytes + \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to \" + call);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to \" + call\n                  + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to \" + call\n                  + \" Wrote partial \" + numBytes + \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "12eb3b8abc0ac056922040ff935ef299849ca557": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8986. Server$Call object is never released after it is sent (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403745 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/10/12 8:46 AM",
      "commitName": "12eb3b8abc0ac056922040ff935ef299849ca557",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/10/12 6:43 AM",
      "commitNameOld": "a7d4f30131b374baaa1efba22c7ae8e80c000f45",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 27.08,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,86 @@\n     private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n       Call call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                       call.connection);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n+            //Clear out the response buffer so it can be collected\n+            call.rpcResponse \u003d null;\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                         call.connection + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                         call.connection + \" Wrote partial \" + numBytes + \n                         \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                      call.connection);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            //Clear out the response buffer so it can be collected\n            call.rpcResponse \u003d null;\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                        call.connection + \" Wrote partial \" + numBytes + \n                        \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "11/05/12 9:56 AM",
      "commitNameOld": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 62.09,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n     private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n       Call call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                       call.connection);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n           int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n           if (!call.rpcResponse.hasRemaining()) {\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                         call.connection + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n-              call.timestamp \u003d System.currentTimeMillis();\n+              call.timestamp \u003d Time.now();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n               LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                         call.connection + \" Wrote partial \" + numBytes + \n                         \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                      call.connection);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d Time.now();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                        call.connection + \" Wrote partial \" + numBytes + \n                        \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": {
      "type": "Ybodychange",
      "commitMessage": "\t\tHADOOP-7776 Make the Ipc-Header in a RPC-Payload an explicit header (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1197885 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/11/11 10:06 PM",
      "commitName": "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "24/10/11 11:07 PM",
      "commitNameOld": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 10.96,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,84 +1,84 @@\n     private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                     boolean inHandler) throws IOException {\n       boolean error \u003d true;\n       boolean done \u003d false;       // there is more data for this channel.\n       int numElements \u003d 0;\n       Call call \u003d null;\n       try {\n         synchronized (responseQueue) {\n           //\n           // If there are no items for this channel, then we are done\n           //\n           numElements \u003d responseQueue.size();\n           if (numElements \u003d\u003d 0) {\n             error \u003d false;\n             return true;              // no more data for this channel.\n           }\n           //\n           // Extract the first call\n           //\n           call \u003d responseQueue.removeFirst();\n           SocketChannel channel \u003d call.connection.channel;\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n+            LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                       call.connection);\n           }\n           //\n           // Send as much data as we can in the non-blocking fashion\n           //\n-          int numBytes \u003d channelWrite(channel, call.response);\n+          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n           if (numBytes \u003c 0) {\n             return true;\n           }\n-          if (!call.response.hasRemaining()) {\n+          if (!call.rpcResponse.hasRemaining()) {\n             call.connection.decRpcCount();\n             if (numElements \u003d\u003d 1) {    // last call fully processes.\n               done \u003d true;             // no more data for this channel.\n             } else {\n               done \u003d false;            // more calls pending to be sent.\n             }\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n+              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                         call.connection + \" Wrote \" + numBytes + \" bytes.\");\n             }\n           } else {\n             //\n             // If we were unable to write the entire response out, then \n             // insert in Selector queue. \n             //\n             call.connection.responseQueue.addFirst(call);\n             \n             if (inHandler) {\n               // set the serve time when the response has to be sent later\n               call.timestamp \u003d System.currentTimeMillis();\n               \n               incPending();\n               try {\n                 // Wakeup the thread blocked on select, only then can the call \n                 // to channel.register() complete.\n                 writeSelector.wakeup();\n                 channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n               } catch (ClosedChannelException e) {\n                 //Its ok. channel might be closed else where.\n                 done \u003d true;\n               } finally {\n                 decPending();\n               }\n             }\n             if (LOG.isDebugEnabled()) {\n-              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n+              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                         call.connection + \" Wrote partial \" + numBytes + \n                         \" bytes.\");\n             }\n           }\n           error \u003d false;              // everything went off well\n         }\n       } finally {\n         if (error \u0026\u0026 call !\u003d null) {\n           LOG.warn(getName()+\", call \" + call + \": output error\");\n           done \u003d true;               // error. no more data for this channel.\n           closeConnection(call.connection);\n         }\n       }\n       return done;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                      call.connection);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.rpcResponse);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.rpcResponse.hasRemaining()) {\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d System.currentTimeMillis();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.callId + \" from \" +\n                        call.connection + \" Wrote partial \" + numBytes + \n                        \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                      call.connection);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.response);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.response.hasRemaining()) {\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d System.currentTimeMillis();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote partial \" + numBytes + \n                        \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                      call.connection);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.response);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.response.hasRemaining()) {\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d System.currentTimeMillis();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote partial \" + numBytes + \n                        \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                      call.connection);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.response);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.response.hasRemaining()) {\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d System.currentTimeMillis();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote partial \" + numBytes + \n                        \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "common/src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,84 @@\n+    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n+                                    boolean inHandler) throws IOException {\n+      boolean error \u003d true;\n+      boolean done \u003d false;       // there is more data for this channel.\n+      int numElements \u003d 0;\n+      Call call \u003d null;\n+      try {\n+        synchronized (responseQueue) {\n+          //\n+          // If there are no items for this channel, then we are done\n+          //\n+          numElements \u003d responseQueue.size();\n+          if (numElements \u003d\u003d 0) {\n+            error \u003d false;\n+            return true;              // no more data for this channel.\n+          }\n+          //\n+          // Extract the first call\n+          //\n+          call \u003d responseQueue.removeFirst();\n+          SocketChannel channel \u003d call.connection.channel;\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n+                      call.connection);\n+          }\n+          //\n+          // Send as much data as we can in the non-blocking fashion\n+          //\n+          int numBytes \u003d channelWrite(channel, call.response);\n+          if (numBytes \u003c 0) {\n+            return true;\n+          }\n+          if (!call.response.hasRemaining()) {\n+            call.connection.decRpcCount();\n+            if (numElements \u003d\u003d 1) {    // last call fully processes.\n+              done \u003d true;             // no more data for this channel.\n+            } else {\n+              done \u003d false;            // more calls pending to be sent.\n+            }\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n+                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n+            }\n+          } else {\n+            //\n+            // If we were unable to write the entire response out, then \n+            // insert in Selector queue. \n+            //\n+            call.connection.responseQueue.addFirst(call);\n+            \n+            if (inHandler) {\n+              // set the serve time when the response has to be sent later\n+              call.timestamp \u003d System.currentTimeMillis();\n+              \n+              incPending();\n+              try {\n+                // Wakeup the thread blocked on select, only then can the call \n+                // to channel.register() complete.\n+                writeSelector.wakeup();\n+                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n+              } catch (ClosedChannelException e) {\n+                //Its ok. channel might be closed else where.\n+                done \u003d true;\n+              } finally {\n+                decPending();\n+              }\n+            }\n+            if (LOG.isDebugEnabled()) {\n+              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n+                        call.connection + \" Wrote partial \" + numBytes + \n+                        \" bytes.\");\n+            }\n+          }\n+          error \u003d false;              // everything went off well\n+        }\n+      } finally {\n+        if (error \u0026\u0026 call !\u003d null) {\n+          LOG.warn(getName()+\", call \" + call + \": output error\");\n+          done \u003d true;               // error. no more data for this channel.\n+          closeConnection(call.connection);\n+        }\n+      }\n+      return done;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processResponse(LinkedList\u003cCall\u003e responseQueue,\n                                    boolean inHandler) throws IOException {\n      boolean error \u003d true;\n      boolean done \u003d false;       // there is more data for this channel.\n      int numElements \u003d 0;\n      Call call \u003d null;\n      try {\n        synchronized (responseQueue) {\n          //\n          // If there are no items for this channel, then we are done\n          //\n          numElements \u003d responseQueue.size();\n          if (numElements \u003d\u003d 0) {\n            error \u003d false;\n            return true;              // no more data for this channel.\n          }\n          //\n          // Extract the first call\n          //\n          call \u003d responseQueue.removeFirst();\n          SocketChannel channel \u003d call.connection.channel;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                      call.connection);\n          }\n          //\n          // Send as much data as we can in the non-blocking fashion\n          //\n          int numBytes \u003d channelWrite(channel, call.response);\n          if (numBytes \u003c 0) {\n            return true;\n          }\n          if (!call.response.hasRemaining()) {\n            call.connection.decRpcCount();\n            if (numElements \u003d\u003d 1) {    // last call fully processes.\n              done \u003d true;             // no more data for this channel.\n            } else {\n              done \u003d false;            // more calls pending to be sent.\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote \" + numBytes + \" bytes.\");\n            }\n          } else {\n            //\n            // If we were unable to write the entire response out, then \n            // insert in Selector queue. \n            //\n            call.connection.responseQueue.addFirst(call);\n            \n            if (inHandler) {\n              // set the serve time when the response has to be sent later\n              call.timestamp \u003d System.currentTimeMillis();\n              \n              incPending();\n              try {\n                // Wakeup the thread blocked on select, only then can the call \n                // to channel.register() complete.\n                writeSelector.wakeup();\n                channel.register(writeSelector, SelectionKey.OP_WRITE, call);\n              } catch (ClosedChannelException e) {\n                //Its ok. channel might be closed else where.\n                done \u003d true;\n              } finally {\n                decPending();\n              }\n            }\n            if (LOG.isDebugEnabled()) {\n              LOG.debug(getName() + \": responding to #\" + call.id + \" from \" +\n                        call.connection + \" Wrote partial \" + numBytes + \n                        \" bytes.\");\n            }\n          }\n          error \u003d false;              // everything went off well\n        }\n      } finally {\n        if (error \u0026\u0026 call !\u003d null) {\n          LOG.warn(getName()+\", call \" + call + \": output error\");\n          done \u003d true;               // error. no more data for this channel.\n          closeConnection(call.connection);\n        }\n      }\n      return done;\n    }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}