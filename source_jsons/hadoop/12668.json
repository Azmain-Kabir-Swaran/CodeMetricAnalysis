{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Mover.java",
  "functionName": "scheduleMoves4Block",
  "functionId": "scheduleMoves4Block___diff-StorageTypeDiff__lb-LocatedBlock__ecPolicy-ErasureCodingPolicy",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
  "functionStartLine": 437,
  "functionEndLine": 457,
  "numCommitsSeen": 106,
  "timeTaken": 3943,
  "changeHistory": [
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
    "673280df24f0228bf01777035ceeab8807da8c40",
    "84a0a629d3c63589b9aed7889e2a764538676471",
    "a26aa6bd0716da89853566961390d711511084e3",
    "8ea20b53a861a2771c206afaacf8e7783568c4b1",
    "5d5aae0694bc27df5b9fa50819854cd3050a8658"
  ],
  "changeHistoryShort": {
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed": "Ymultichange(Yparameterchange,Ybodychange)",
    "673280df24f0228bf01777035ceeab8807da8c40": "Ymultichange(Yparameterchange,Ybodychange)",
    "84a0a629d3c63589b9aed7889e2a764538676471": "Ybodychange",
    "a26aa6bd0716da89853566961390d711511084e3": "Ymultichange(Yreturntypechange,Ybodychange)",
    "8ea20b53a861a2771c206afaacf8e7783568c4b1": "Ybodychange",
    "5d5aae0694bc27df5b9fa50819854cd3050a8658": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1d37a8812160bb030244a1e6b1c753f962d8d2ed": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
      "commitDate": "13/08/15 10:04 AM",
      "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
          "commitDate": "13/08/15 10:04 AM",
          "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "21/07/15 3:47 PM",
          "commitNameOld": "f8f7a923b76abcd1d0242c15a536b20af1c1695e",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 22.76,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n     boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n-                                ECSchema ecSchema) {\n+                                ErasureCodingPolicy ecPolicy) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n       if (!(lb instanceof LocatedStripedBlock)) {\n         Collections.shuffle(locations);\n       }\n-      final DBlock db \u003d newDBlock(lb, locations, ecSchema);\n+      final DBlock db \u003d newDBlock(lb, locations, ecPolicy);\n \n       for (final StorageType t : diff.existing) {\n         for (final MLocation ml : locations) {\n           final Source source \u003d storages.getSource(ml);\n           if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n             // try to schedule one replica move.\n             if (scheduleMoveReplica(db, source, diff.expected)) {\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n                                ErasureCodingPolicy ecPolicy) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      if (!(lb instanceof LocatedStripedBlock)) {\n        Collections.shuffle(locations);\n      }\n      final DBlock db \u003d newDBlock(lb, locations, ecPolicy);\n\n      for (final StorageType t : diff.existing) {\n        for (final MLocation ml : locations) {\n          final Source source \u003d storages.getSource(ml);\n          if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n            // try to schedule one replica move.\n            if (scheduleMoveReplica(db, source, diff.expected)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {
            "oldValue": "[diff-StorageTypeDiff, lb-LocatedBlock, ecSchema-ECSchema]",
            "newValue": "[diff-StorageTypeDiff, lb-LocatedBlock, ecPolicy-ErasureCodingPolicy]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8854. Erasure coding: add ECPolicy to replace schema+cellSize in hadoop-hdfs. Contributed by Walter Su.\n",
          "commitDate": "13/08/15 10:04 AM",
          "commitName": "1d37a8812160bb030244a1e6b1c753f962d8d2ed",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "21/07/15 3:47 PM",
          "commitNameOld": "f8f7a923b76abcd1d0242c15a536b20af1c1695e",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 22.76,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,21 @@\n     boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n-                                ECSchema ecSchema) {\n+                                ErasureCodingPolicy ecPolicy) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n       if (!(lb instanceof LocatedStripedBlock)) {\n         Collections.shuffle(locations);\n       }\n-      final DBlock db \u003d newDBlock(lb, locations, ecSchema);\n+      final DBlock db \u003d newDBlock(lb, locations, ecPolicy);\n \n       for (final StorageType t : diff.existing) {\n         for (final MLocation ml : locations) {\n           final Source source \u003d storages.getSource(ml);\n           if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n             // try to schedule one replica move.\n             if (scheduleMoveReplica(db, source, diff.expected)) {\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n                                ErasureCodingPolicy ecPolicy) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      if (!(lb instanceof LocatedStripedBlock)) {\n        Collections.shuffle(locations);\n      }\n      final DBlock db \u003d newDBlock(lb, locations, ecPolicy);\n\n      for (final StorageType t : diff.existing) {\n        for (final MLocation ml : locations) {\n          final Source source \u003d storages.getSource(ml);\n          if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n            // try to schedule one replica move.\n            if (scheduleMoveReplica(db, source, diff.expected)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {}
        }
      ]
    },
    "673280df24f0228bf01777035ceeab8807da8c40": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7621. Erasure Coding: update the Balancer/Mover data migration logic. Contributed by Walter Su.\n",
      "commitDate": "03/06/15 11:51 AM",
      "commitName": "673280df24f0228bf01777035ceeab8807da8c40",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7621. Erasure Coding: update the Balancer/Mover data migration logic. Contributed by Walter Su.\n",
          "commitDate": "03/06/15 11:51 AM",
          "commitName": "673280df24f0228bf01777035ceeab8807da8c40",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "18/05/15 11:36 AM",
          "commitNameOld": "a2190bf15d25e01fb4b220ba6401ce2f787a5c61",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 16.01,
          "commitsBetweenForRepo": 202,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n+    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n+                                ECSchema ecSchema) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n-      Collections.shuffle(locations);\n-      final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n+      if (!(lb instanceof LocatedStripedBlock)) {\n+        Collections.shuffle(locations);\n+      }\n+      final DBlock db \u003d newDBlock(lb, locations, ecSchema);\n \n       for (final StorageType t : diff.existing) {\n         for (final MLocation ml : locations) {\n           final Source source \u003d storages.getSource(ml);\n           if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n             // try to schedule one replica move.\n             if (scheduleMoveReplica(db, source, diff.expected)) {\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n                                ECSchema ecSchema) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      if (!(lb instanceof LocatedStripedBlock)) {\n        Collections.shuffle(locations);\n      }\n      final DBlock db \u003d newDBlock(lb, locations, ecSchema);\n\n      for (final StorageType t : diff.existing) {\n        for (final MLocation ml : locations) {\n          final Source source \u003d storages.getSource(ml);\n          if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n            // try to schedule one replica move.\n            if (scheduleMoveReplica(db, source, diff.expected)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {
            "oldValue": "[diff-StorageTypeDiff, lb-LocatedBlock]",
            "newValue": "[diff-StorageTypeDiff, lb-LocatedBlock, ecSchema-ECSchema]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7621. Erasure Coding: update the Balancer/Mover data migration logic. Contributed by Walter Su.\n",
          "commitDate": "03/06/15 11:51 AM",
          "commitName": "673280df24f0228bf01777035ceeab8807da8c40",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "18/05/15 11:36 AM",
          "commitNameOld": "a2190bf15d25e01fb4b220ba6401ce2f787a5c61",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 16.01,
          "commitsBetweenForRepo": 202,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n+    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n+                                ECSchema ecSchema) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n-      Collections.shuffle(locations);\n-      final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n+      if (!(lb instanceof LocatedStripedBlock)) {\n+        Collections.shuffle(locations);\n+      }\n+      final DBlock db \u003d newDBlock(lb, locations, ecSchema);\n \n       for (final StorageType t : diff.existing) {\n         for (final MLocation ml : locations) {\n           final Source source \u003d storages.getSource(ml);\n           if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n             // try to schedule one replica move.\n             if (scheduleMoveReplica(db, source, diff.expected)) {\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb,\n                                ECSchema ecSchema) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      if (!(lb instanceof LocatedStripedBlock)) {\n        Collections.shuffle(locations);\n      }\n      final DBlock db \u003d newDBlock(lb, locations, ecSchema);\n\n      for (final StorageType t : diff.existing) {\n        for (final MLocation ml : locations) {\n          final Source source \u003d storages.getSource(ml);\n          if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n            // try to schedule one replica move.\n            if (scheduleMoveReplica(db, source, diff.expected)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {}
        }
      ]
    },
    "84a0a629d3c63589b9aed7889e2a764538676471": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7095. Archival Storage: TestStorageMover often fails in Jenkins. Contributed by Jing Zhao.\n",
      "commitDate": "20/09/14 1:44 PM",
      "commitName": "84a0a629d3c63589b9aed7889e2a764538676471",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "17/09/14 9:40 AM",
      "commitNameOld": "b014e83bc5899ec135b1e7a54ca1902c970047a5",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 3.17,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n     boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n       Collections.shuffle(locations);\n       final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n \n       for (final StorageType t : diff.existing) {\n         for (final MLocation ml : locations) {\n           final Source source \u003d storages.getSource(ml);\n-          if (ml.storageType \u003d\u003d t) {\n+          if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n             // try to schedule one replica move.\n             if (scheduleMoveReplica(db, source, diff.expected)) {\n               return true;\n             }\n           }\n         }\n       }\n       return false;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      Collections.shuffle(locations);\n      final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n\n      for (final StorageType t : diff.existing) {\n        for (final MLocation ml : locations) {\n          final Source source \u003d storages.getSource(ml);\n          if (ml.storageType \u003d\u003d t \u0026\u0026 source !\u003d null) {\n            // try to schedule one replica move.\n            if (scheduleMoveReplica(db, source, diff.expected)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
      "extendedDetails": {}
    },
    "a26aa6bd0716da89853566961390d711511084e3": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
      "commitDate": "27/08/14 2:20 PM",
      "commitName": "a26aa6bd0716da89853566961390d711511084e3",
      "commitAuthor": "Jing Zhao",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/14 2:20 PM",
          "commitName": "a26aa6bd0716da89853566961390d711511084e3",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 10:38 AM",
          "commitNameOld": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,18 @@\n-    void scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n+    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n       Collections.shuffle(locations);\n       final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n \n-      for(final Iterator\u003cStorageType\u003e i \u003d diff.existing.iterator(); i.hasNext(); ) {\n-        final StorageType t \u003d i.next();\n-        for(final Iterator\u003cMLocation\u003e j \u003d locations.iterator(); j.hasNext(); ) {\n-          final MLocation ml \u003d j.next();\n-          final Source source \u003d storages.getSource(ml); \n+      for (final StorageType t : diff.existing) {\n+        for (final MLocation ml : locations) {\n+          final Source source \u003d storages.getSource(ml);\n           if (ml.storageType \u003d\u003d t) {\n-            // try to schedule replica move.\n-            if (scheduleMoveReplica(db, ml, source, diff.expected)) {\n-              i.remove();\n-              j.remove();\n-              return;\n+            // try to schedule one replica move.\n+            if (scheduleMoveReplica(db, source, diff.expected)) {\n+              return true;\n             }\n           }\n         }\n       }\n+      return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      Collections.shuffle(locations);\n      final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n\n      for (final StorageType t : diff.existing) {\n        for (final MLocation ml : locations) {\n          final Source source \u003d storages.getSource(ml);\n          if (ml.storageType \u003d\u003d t) {\n            // try to schedule one replica move.\n            if (scheduleMoveReplica(db, source, diff.expected)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "boolean"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6944. Archival Storage: add retry and termination logic for Mover. Contributed by Jing Zhao.\n",
          "commitDate": "27/08/14 2:20 PM",
          "commitName": "a26aa6bd0716da89853566961390d711511084e3",
          "commitAuthor": "Jing Zhao",
          "commitDateOld": "27/08/14 10:38 AM",
          "commitNameOld": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 0.15,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,18 @@\n-    void scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n+    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n       Collections.shuffle(locations);\n       final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n \n-      for(final Iterator\u003cStorageType\u003e i \u003d diff.existing.iterator(); i.hasNext(); ) {\n-        final StorageType t \u003d i.next();\n-        for(final Iterator\u003cMLocation\u003e j \u003d locations.iterator(); j.hasNext(); ) {\n-          final MLocation ml \u003d j.next();\n-          final Source source \u003d storages.getSource(ml); \n+      for (final StorageType t : diff.existing) {\n+        for (final MLocation ml : locations) {\n+          final Source source \u003d storages.getSource(ml);\n           if (ml.storageType \u003d\u003d t) {\n-            // try to schedule replica move.\n-            if (scheduleMoveReplica(db, ml, source, diff.expected)) {\n-              i.remove();\n-              j.remove();\n-              return;\n+            // try to schedule one replica move.\n+            if (scheduleMoveReplica(db, source, diff.expected)) {\n+              return true;\n             }\n           }\n         }\n       }\n+      return false;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    boolean scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      Collections.shuffle(locations);\n      final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n\n      for (final StorageType t : diff.existing) {\n        for (final MLocation ml : locations) {\n          final Source source \u003d storages.getSource(ml);\n          if (ml.storageType \u003d\u003d t) {\n            // try to schedule one replica move.\n            if (scheduleMoveReplica(db, source, diff.expected)) {\n              return true;\n            }\n          }\n        }\n      }\n      return false;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
          "extendedDetails": {}
        }
      ]
    },
    "8ea20b53a861a2771c206afaacf8e7783568c4b1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6911. Archival Storage: check if a block is already scheduled in Mover. Contributed by Tsz Wo Nicholas Sze.\n",
      "commitDate": "27/08/14 10:38 AM",
      "commitName": "8ea20b53a861a2771c206afaacf8e7783568c4b1",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/08/14 4:41 PM",
      "commitNameOld": "603cbe5eead655a56cbb6bdbfa1414c9b05e2bbc",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 5.75,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,21 @@\n     void scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n       final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n       Collections.shuffle(locations);\n-      \n-      final DBlock db \u003d new DBlock(lb.getBlock().getLocalBlock());\n-      for(MLocation ml : locations) {\n-        db.addLocation(storages.getTarget(ml));\n-      }\n+      final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n \n       for(final Iterator\u003cStorageType\u003e i \u003d diff.existing.iterator(); i.hasNext(); ) {\n         final StorageType t \u003d i.next();\n         for(final Iterator\u003cMLocation\u003e j \u003d locations.iterator(); j.hasNext(); ) {\n           final MLocation ml \u003d j.next();\n           final Source source \u003d storages.getSource(ml); \n           if (ml.storageType \u003d\u003d t) {\n             // try to schedule replica move.\n             if (scheduleMoveReplica(db, ml, source, diff.expected)) {\n               i.remove();\n               j.remove();\n+              return;\n             }\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    void scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      Collections.shuffle(locations);\n      final DBlock db \u003d newDBlock(lb.getBlock().getLocalBlock(), locations);\n\n      for(final Iterator\u003cStorageType\u003e i \u003d diff.existing.iterator(); i.hasNext(); ) {\n        final StorageType t \u003d i.next();\n        for(final Iterator\u003cMLocation\u003e j \u003d locations.iterator(); j.hasNext(); ) {\n          final MLocation ml \u003d j.next();\n          final Source source \u003d storages.getSource(ml); \n          if (ml.storageType \u003d\u003d t) {\n            // try to schedule replica move.\n            if (scheduleMoveReplica(db, ml, source, diff.expected)) {\n              i.remove();\n              j.remove();\n              return;\n            }\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java",
      "extendedDetails": {}
    },
    "5d5aae0694bc27df5b9fa50819854cd3050a8658": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6801. Archival Storage: Add a new data migration tool. Contributed by Tsz Wo Nicholas Sze.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1618675 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/14 10:51 AM",
      "commitName": "5d5aae0694bc27df5b9fa50819854cd3050a8658",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,24 @@\n+    void scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n+      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n+      Collections.shuffle(locations);\n+      \n+      final DBlock db \u003d new DBlock(lb.getBlock().getLocalBlock());\n+      for(MLocation ml : locations) {\n+        db.addLocation(storages.getTarget(ml));\n+      }\n+\n+      for(final Iterator\u003cStorageType\u003e i \u003d diff.existing.iterator(); i.hasNext(); ) {\n+        final StorageType t \u003d i.next();\n+        for(final Iterator\u003cMLocation\u003e j \u003d locations.iterator(); j.hasNext(); ) {\n+          final MLocation ml \u003d j.next();\n+          final Source source \u003d storages.getSource(ml); \n+          if (ml.storageType \u003d\u003d t) {\n+            // try to schedule replica move.\n+            if (scheduleMoveReplica(db, ml, source, diff.expected)) {\n+              i.remove();\n+              j.remove();\n+            }\n+          }\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    void scheduleMoves4Block(StorageTypeDiff diff, LocatedBlock lb) {\n      final List\u003cMLocation\u003e locations \u003d MLocation.toLocations(lb);\n      Collections.shuffle(locations);\n      \n      final DBlock db \u003d new DBlock(lb.getBlock().getLocalBlock());\n      for(MLocation ml : locations) {\n        db.addLocation(storages.getTarget(ml));\n      }\n\n      for(final Iterator\u003cStorageType\u003e i \u003d diff.existing.iterator(); i.hasNext(); ) {\n        final StorageType t \u003d i.next();\n        for(final Iterator\u003cMLocation\u003e j \u003d locations.iterator(); j.hasNext(); ) {\n          final MLocation ml \u003d j.next();\n          final Source source \u003d storages.getSource(ml); \n          if (ml.storageType \u003d\u003d t) {\n            // try to schedule replica move.\n            if (scheduleMoveReplica(db, ml, source, diff.expected)) {\n              i.remove();\n              j.remove();\n            }\n          }\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/mover/Mover.java"
    }
  }
}