{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultAMSProcessor.java",
  "functionName": "registerApplicationMaster",
  "functionId": "registerApplicationMaster___applicationAttemptId-ApplicationAttemptId__request-RegisterApplicationMasterRequest__response-RegisterApplicationMasterResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
  "functionStartLine": 138,
  "functionEndLine": 214,
  "numCommitsSeen": 22,
  "timeTaken": 3862,
  "changeHistory": [
    "36e158ae98ef8b72a7a9f63102b714e025cafcc5",
    "d4d2fd1acd2fdddf04f45e67897804eea30d79a1",
    "39240b61a163b127eec385decd30ffd96e694c28",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
    "077fcf6a96e420e7f36350931722b8603d010cf1",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0"
  ],
  "changeHistoryShort": {
    "36e158ae98ef8b72a7a9f63102b714e025cafcc5": "Ybodychange",
    "d4d2fd1acd2fdddf04f45e67897804eea30d79a1": "Ybodychange",
    "39240b61a163b127eec385decd30ffd96e694c28": "Yexceptionschange",
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": "Ybodychange",
    "077fcf6a96e420e7f36350931722b8603d010cf1": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "36e158ae98ef8b72a7a9f63102b714e025cafcc5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7307. Allow client/AM update supported resource types via YARN APIs. (Sunil G via wangda)\n\nChange-Id: I14c5ea7252b7c17e86ab38f692b5f9d43196dbe0\n",
      "commitDate": "26/10/17 8:15 PM",
      "commitName": "36e158ae98ef8b72a7a9f63102b714e025cafcc5",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/10/17 6:14 PM",
      "commitNameOld": "d4d2fd1acd2fdddf04f45e67897804eea30d79a1",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 24.08,
      "commitsBetweenForRepo": 186,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,77 @@\n   public void registerApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n       RegisterApplicationMasterRequest request,\n       RegisterApplicationMasterResponse response)\n       throws IOException, YarnException {\n \n     RMApp app \u003d getRmContext().getRMApps().get(\n         applicationAttemptId.getApplicationId());\n     LOG.info(\"AM registration \" + applicationAttemptId);\n     getRmContext().getDispatcher().getEventHandler()\n         .handle(\n             new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                 .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n     RMAuditLogger.logSuccess(app.getUser(),\n         RMAuditLogger.AuditConstants.REGISTER_AM,\n         \"ApplicationMasterService\", app.getApplicationId(),\n         applicationAttemptId);\n     response.setMaximumResourceCapability(getScheduler()\n         .getMaximumResourceCapability(app.getQueue()));\n     response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n         .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n     response.setQueue(app.getQueue());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Setting client token master key\");\n       response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n           getRmContext().getClientToAMTokenSecretManager()\n           .getMasterKey(applicationAttemptId).getEncoded()));\n     }\n \n     // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n     // and corresponding NM tokens.\n     if (app.getApplicationSubmissionContext()\n         .getKeepContainersAcrossApplicationAttempts()) {\n       List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n           .getTransferredContainers(applicationAttemptId);\n       if (!transferredContainers.isEmpty()) {\n         response.setContainersFromPreviousAttempts(transferredContainers);\n         // Clear the node set remembered by the secret manager. Necessary\n         // for UAM restart because we use the same attemptId.\n         rmContext.getNMTokenSecretManager()\n             .clearNodeSetForAttempt(applicationAttemptId);\n \n         List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n         for (Container container : transferredContainers) {\n           try {\n             NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                 .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                     container);\n             if (null !\u003d token) {\n               nmTokens.add(token);\n             }\n           } catch (IllegalArgumentException e) {\n             // if it\u0027s a DNS issue, throw UnknowHostException directly and\n             // that\n             // will be automatically retried by RMProxy in RPC layer.\n             if (e.getCause() instanceof UnknownHostException) {\n               throw (UnknownHostException) e.getCause();\n             }\n           }\n         }\n         response.setNMTokensFromPreviousAttempts(nmTokens);\n         LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n             + transferredContainers.size() + \" containers from previous\"\n             + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n       }\n     }\n \n     response.setSchedulerResourceTypes(getScheduler()\n         .getSchedulingResourceTypes());\n+    response.setResourceTypes(ResourceUtils.getResourcesTypeInfo());\n     if (getRmContext().getYarnConfiguration().getBoolean(\n         YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n       response.setResourceProfiles(\n           resourceProfilesManager.getResourceProfiles());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request,\n      RegisterApplicationMasterResponse response)\n      throws IOException, YarnException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        // Clear the node set remembered by the secret manager. Necessary\n        // for UAM restart because we use the same attemptId.\n        rmContext.getNMTokenSecretManager()\n            .clearNodeSetForAttempt(applicationAttemptId);\n\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n    response.setResourceTypes(ResourceUtils.getResourcesTypeInfo());\n    if (getRmContext().getYarnConfiguration().getBoolean(\n        YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n      response.setResourceProfiles(\n          resourceProfilesManager.getResourceProfiles());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
      "extendedDetails": {}
    },
    "d4d2fd1acd2fdddf04f45e67897804eea30d79a1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2037. Add work preserving restart support for Unmanaged AMs. (Botong Huang via Subru).\n",
      "commitDate": "02/10/17 6:14 PM",
      "commitName": "d4d2fd1acd2fdddf04f45e67897804eea30d79a1",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 20.37,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,76 @@\n   public void registerApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n       RegisterApplicationMasterRequest request,\n       RegisterApplicationMasterResponse response)\n       throws IOException, YarnException {\n \n     RMApp app \u003d getRmContext().getRMApps().get(\n         applicationAttemptId.getApplicationId());\n     LOG.info(\"AM registration \" + applicationAttemptId);\n     getRmContext().getDispatcher().getEventHandler()\n         .handle(\n             new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                 .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n     RMAuditLogger.logSuccess(app.getUser(),\n         RMAuditLogger.AuditConstants.REGISTER_AM,\n         \"ApplicationMasterService\", app.getApplicationId(),\n         applicationAttemptId);\n     response.setMaximumResourceCapability(getScheduler()\n         .getMaximumResourceCapability(app.getQueue()));\n     response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n         .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n     response.setQueue(app.getQueue());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Setting client token master key\");\n       response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n           getRmContext().getClientToAMTokenSecretManager()\n           .getMasterKey(applicationAttemptId).getEncoded()));\n     }\n \n     // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n     // and corresponding NM tokens.\n     if (app.getApplicationSubmissionContext()\n         .getKeepContainersAcrossApplicationAttempts()) {\n       List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n           .getTransferredContainers(applicationAttemptId);\n       if (!transferredContainers.isEmpty()) {\n         response.setContainersFromPreviousAttempts(transferredContainers);\n+        // Clear the node set remembered by the secret manager. Necessary\n+        // for UAM restart because we use the same attemptId.\n+        rmContext.getNMTokenSecretManager()\n+            .clearNodeSetForAttempt(applicationAttemptId);\n+\n         List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n         for (Container container : transferredContainers) {\n           try {\n             NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                 .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                     container);\n             if (null !\u003d token) {\n               nmTokens.add(token);\n             }\n           } catch (IllegalArgumentException e) {\n             // if it\u0027s a DNS issue, throw UnknowHostException directly and\n             // that\n             // will be automatically retried by RMProxy in RPC layer.\n             if (e.getCause() instanceof UnknownHostException) {\n               throw (UnknownHostException) e.getCause();\n             }\n           }\n         }\n         response.setNMTokensFromPreviousAttempts(nmTokens);\n         LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n             + transferredContainers.size() + \" containers from previous\"\n             + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n       }\n     }\n \n     response.setSchedulerResourceTypes(getScheduler()\n         .getSchedulingResourceTypes());\n     if (getRmContext().getYarnConfiguration().getBoolean(\n         YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n       response.setResourceProfiles(\n           resourceProfilesManager.getResourceProfiles());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request,\n      RegisterApplicationMasterResponse response)\n      throws IOException, YarnException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        // Clear the node set remembered by the secret manager. Necessary\n        // for UAM restart because we use the same attemptId.\n        rmContext.getNMTokenSecretManager()\n            .clearNodeSetForAttempt(applicationAttemptId);\n\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n    if (getRmContext().getYarnConfiguration().getBoolean(\n        YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n      response.setResourceProfiles(\n          resourceProfilesManager.getResourceProfiles());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
      "extendedDetails": {}
    },
    "39240b61a163b127eec385decd30ffd96e694c28": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-7043. Cleanup ResourceProfileManager. (wangda)\n\nChange-Id: I463356f37bf1f6a3f1fc3c594c79916e8c0ab913\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,71 @@\n   public void registerApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n       RegisterApplicationMasterRequest request,\n-      RegisterApplicationMasterResponse response) throws IOException {\n+      RegisterApplicationMasterResponse response)\n+      throws IOException, YarnException {\n \n     RMApp app \u003d getRmContext().getRMApps().get(\n         applicationAttemptId.getApplicationId());\n     LOG.info(\"AM registration \" + applicationAttemptId);\n     getRmContext().getDispatcher().getEventHandler()\n         .handle(\n             new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                 .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n     RMAuditLogger.logSuccess(app.getUser(),\n         RMAuditLogger.AuditConstants.REGISTER_AM,\n         \"ApplicationMasterService\", app.getApplicationId(),\n         applicationAttemptId);\n     response.setMaximumResourceCapability(getScheduler()\n         .getMaximumResourceCapability(app.getQueue()));\n     response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n         .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n     response.setQueue(app.getQueue());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Setting client token master key\");\n       response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n           getRmContext().getClientToAMTokenSecretManager()\n           .getMasterKey(applicationAttemptId).getEncoded()));\n     }\n \n     // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n     // and corresponding NM tokens.\n     if (app.getApplicationSubmissionContext()\n         .getKeepContainersAcrossApplicationAttempts()) {\n       List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n           .getTransferredContainers(applicationAttemptId);\n       if (!transferredContainers.isEmpty()) {\n         response.setContainersFromPreviousAttempts(transferredContainers);\n         List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n         for (Container container : transferredContainers) {\n           try {\n             NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                 .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                     container);\n             if (null !\u003d token) {\n               nmTokens.add(token);\n             }\n           } catch (IllegalArgumentException e) {\n             // if it\u0027s a DNS issue, throw UnknowHostException directly and\n             // that\n             // will be automatically retried by RMProxy in RPC layer.\n             if (e.getCause() instanceof UnknownHostException) {\n               throw (UnknownHostException) e.getCause();\n             }\n           }\n         }\n         response.setNMTokensFromPreviousAttempts(nmTokens);\n         LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n             + transferredContainers.size() + \" containers from previous\"\n             + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n       }\n     }\n \n     response.setSchedulerResourceTypes(getScheduler()\n         .getSchedulingResourceTypes());\n-    if (getRmContext().getYarnConfiguration().getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n-          YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n-      response\n-          .setResourceProfiles(resourceProfilesManager.getResourceProfiles());\n+    if (getRmContext().getYarnConfiguration().getBoolean(\n+        YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n+        YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n+      response.setResourceProfiles(\n+          resourceProfilesManager.getResourceProfiles());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request,\n      RegisterApplicationMasterResponse response)\n      throws IOException, YarnException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n    if (getRmContext().getYarnConfiguration().getBoolean(\n        YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n      response.setResourceProfiles(\n          resourceProfilesManager.getResourceProfiles());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[IOException, YarnException]"
      }
    },
    "6708ac330147b2d3816a31f2ee83e09c41fe0dd9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5587. Add support for resource profiles. (vvasudev via asuresh)\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "6708ac330147b2d3816a31f2ee83e09c41fe0dd9",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "7594d1de7bbc34cd2e64202095a5e1757154d7d0",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.43,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,69 @@\n   public void registerApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n       RegisterApplicationMasterRequest request,\n       RegisterApplicationMasterResponse response) throws IOException {\n \n     RMApp app \u003d getRmContext().getRMApps().get(\n         applicationAttemptId.getApplicationId());\n     LOG.info(\"AM registration \" + applicationAttemptId);\n     getRmContext().getDispatcher().getEventHandler()\n         .handle(\n             new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                 .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n     RMAuditLogger.logSuccess(app.getUser(),\n         RMAuditLogger.AuditConstants.REGISTER_AM,\n         \"ApplicationMasterService\", app.getApplicationId(),\n         applicationAttemptId);\n     response.setMaximumResourceCapability(getScheduler()\n         .getMaximumResourceCapability(app.getQueue()));\n     response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n         .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n     response.setQueue(app.getQueue());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Setting client token master key\");\n       response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n           getRmContext().getClientToAMTokenSecretManager()\n           .getMasterKey(applicationAttemptId).getEncoded()));\n     }\n \n     // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n     // and corresponding NM tokens.\n     if (app.getApplicationSubmissionContext()\n         .getKeepContainersAcrossApplicationAttempts()) {\n       List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n           .getTransferredContainers(applicationAttemptId);\n       if (!transferredContainers.isEmpty()) {\n         response.setContainersFromPreviousAttempts(transferredContainers);\n         List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n         for (Container container : transferredContainers) {\n           try {\n             NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                 .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                     container);\n             if (null !\u003d token) {\n               nmTokens.add(token);\n             }\n           } catch (IllegalArgumentException e) {\n             // if it\u0027s a DNS issue, throw UnknowHostException directly and\n             // that\n             // will be automatically retried by RMProxy in RPC layer.\n             if (e.getCause() instanceof UnknownHostException) {\n               throw (UnknownHostException) e.getCause();\n             }\n           }\n         }\n         response.setNMTokensFromPreviousAttempts(nmTokens);\n         LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n             + transferredContainers.size() + \" containers from previous\"\n             + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n       }\n     }\n \n     response.setSchedulerResourceTypes(getScheduler()\n         .getSchedulingResourceTypes());\n+    if (getRmContext().getYarnConfiguration().getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n+          YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n+      response\n+          .setResourceProfiles(resourceProfilesManager.getResourceProfiles());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request,\n      RegisterApplicationMasterResponse response) throws IOException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n    if (getRmContext().getYarnConfiguration().getBoolean(YarnConfiguration.RM_RESOURCE_PROFILES_ENABLED,\n          YarnConfiguration.DEFAULT_RM_RESOURCE_PROFILES_ENABLED)) {\n      response\n          .setResourceProfiles(resourceProfilesManager.getResourceProfiles());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
      "extendedDetails": {}
    },
    "077fcf6a96e420e7f36350931722b8603d010cf1": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
      "commitDate": "19/07/17 12:26 PM",
      "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,64 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster(\n+  public void registerApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n-      RegisterApplicationMasterRequest request) throws IOException {\n+      RegisterApplicationMasterRequest request,\n+      RegisterApplicationMasterResponse response) throws IOException {\n \n     RMApp app \u003d getRmContext().getRMApps().get(\n         applicationAttemptId.getApplicationId());\n     LOG.info(\"AM registration \" + applicationAttemptId);\n     getRmContext().getDispatcher().getEventHandler()\n         .handle(\n             new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                 .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n     RMAuditLogger.logSuccess(app.getUser(),\n         RMAuditLogger.AuditConstants.REGISTER_AM,\n         \"ApplicationMasterService\", app.getApplicationId(),\n         applicationAttemptId);\n-    RegisterApplicationMasterResponse response \u003d recordFactory\n-        .newRecordInstance(RegisterApplicationMasterResponse.class);\n     response.setMaximumResourceCapability(getScheduler()\n         .getMaximumResourceCapability(app.getQueue()));\n     response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n         .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n     response.setQueue(app.getQueue());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Setting client token master key\");\n       response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n           getRmContext().getClientToAMTokenSecretManager()\n           .getMasterKey(applicationAttemptId).getEncoded()));\n     }\n \n     // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n     // and corresponding NM tokens.\n     if (app.getApplicationSubmissionContext()\n         .getKeepContainersAcrossApplicationAttempts()) {\n       List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n           .getTransferredContainers(applicationAttemptId);\n       if (!transferredContainers.isEmpty()) {\n         response.setContainersFromPreviousAttempts(transferredContainers);\n         List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n         for (Container container : transferredContainers) {\n           try {\n             NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                 .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                     container);\n             if (null !\u003d token) {\n               nmTokens.add(token);\n             }\n           } catch (IllegalArgumentException e) {\n             // if it\u0027s a DNS issue, throw UnknowHostException directly and\n             // that\n             // will be automatically retried by RMProxy in RPC layer.\n             if (e.getCause() instanceof UnknownHostException) {\n               throw (UnknownHostException) e.getCause();\n             }\n           }\n         }\n         response.setNMTokensFromPreviousAttempts(nmTokens);\n         LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n             + transferredContainers.size() + \" containers from previous\"\n             + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n       }\n     }\n \n     response.setSchedulerResourceTypes(getScheduler()\n         .getSchedulingResourceTypes());\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request,\n      RegisterApplicationMasterResponse response) throws IOException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, request-RegisterApplicationMasterRequest]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, request-RegisterApplicationMasterRequest, response-RegisterApplicationMasterResponse]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,64 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster(\n+  public void registerApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n-      RegisterApplicationMasterRequest request) throws IOException {\n+      RegisterApplicationMasterRequest request,\n+      RegisterApplicationMasterResponse response) throws IOException {\n \n     RMApp app \u003d getRmContext().getRMApps().get(\n         applicationAttemptId.getApplicationId());\n     LOG.info(\"AM registration \" + applicationAttemptId);\n     getRmContext().getDispatcher().getEventHandler()\n         .handle(\n             new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                 .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n     RMAuditLogger.logSuccess(app.getUser(),\n         RMAuditLogger.AuditConstants.REGISTER_AM,\n         \"ApplicationMasterService\", app.getApplicationId(),\n         applicationAttemptId);\n-    RegisterApplicationMasterResponse response \u003d recordFactory\n-        .newRecordInstance(RegisterApplicationMasterResponse.class);\n     response.setMaximumResourceCapability(getScheduler()\n         .getMaximumResourceCapability(app.getQueue()));\n     response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n         .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n     response.setQueue(app.getQueue());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Setting client token master key\");\n       response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n           getRmContext().getClientToAMTokenSecretManager()\n           .getMasterKey(applicationAttemptId).getEncoded()));\n     }\n \n     // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n     // and corresponding NM tokens.\n     if (app.getApplicationSubmissionContext()\n         .getKeepContainersAcrossApplicationAttempts()) {\n       List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n           .getTransferredContainers(applicationAttemptId);\n       if (!transferredContainers.isEmpty()) {\n         response.setContainersFromPreviousAttempts(transferredContainers);\n         List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n         for (Container container : transferredContainers) {\n           try {\n             NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                 .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                     container);\n             if (null !\u003d token) {\n               nmTokens.add(token);\n             }\n           } catch (IllegalArgumentException e) {\n             // if it\u0027s a DNS issue, throw UnknowHostException directly and\n             // that\n             // will be automatically retried by RMProxy in RPC layer.\n             if (e.getCause() instanceof UnknownHostException) {\n               throw (UnknownHostException) e.getCause();\n             }\n           }\n         }\n         response.setNMTokensFromPreviousAttempts(nmTokens);\n         LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n             + transferredContainers.size() + \" containers from previous\"\n             + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n       }\n     }\n \n     response.setSchedulerResourceTypes(getScheduler()\n         .getSchedulingResourceTypes());\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request,\n      RegisterApplicationMasterResponse response) throws IOException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {
            "oldValue": "RegisterApplicationMasterResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,66 +1,64 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster(\n+  public void registerApplicationMaster(\n       ApplicationAttemptId applicationAttemptId,\n-      RegisterApplicationMasterRequest request) throws IOException {\n+      RegisterApplicationMasterRequest request,\n+      RegisterApplicationMasterResponse response) throws IOException {\n \n     RMApp app \u003d getRmContext().getRMApps().get(\n         applicationAttemptId.getApplicationId());\n     LOG.info(\"AM registration \" + applicationAttemptId);\n     getRmContext().getDispatcher().getEventHandler()\n         .handle(\n             new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                 .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n     RMAuditLogger.logSuccess(app.getUser(),\n         RMAuditLogger.AuditConstants.REGISTER_AM,\n         \"ApplicationMasterService\", app.getApplicationId(),\n         applicationAttemptId);\n-    RegisterApplicationMasterResponse response \u003d recordFactory\n-        .newRecordInstance(RegisterApplicationMasterResponse.class);\n     response.setMaximumResourceCapability(getScheduler()\n         .getMaximumResourceCapability(app.getQueue()));\n     response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n         .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n     response.setQueue(app.getQueue());\n     if (UserGroupInformation.isSecurityEnabled()) {\n       LOG.info(\"Setting client token master key\");\n       response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n           getRmContext().getClientToAMTokenSecretManager()\n           .getMasterKey(applicationAttemptId).getEncoded()));\n     }\n \n     // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n     // and corresponding NM tokens.\n     if (app.getApplicationSubmissionContext()\n         .getKeepContainersAcrossApplicationAttempts()) {\n       List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n           .getTransferredContainers(applicationAttemptId);\n       if (!transferredContainers.isEmpty()) {\n         response.setContainersFromPreviousAttempts(transferredContainers);\n         List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n         for (Container container : transferredContainers) {\n           try {\n             NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                 .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                     container);\n             if (null !\u003d token) {\n               nmTokens.add(token);\n             }\n           } catch (IllegalArgumentException e) {\n             // if it\u0027s a DNS issue, throw UnknowHostException directly and\n             // that\n             // will be automatically retried by RMProxy in RPC layer.\n             if (e.getCause() instanceof UnknownHostException) {\n               throw (UnknownHostException) e.getCause();\n             }\n           }\n         }\n         response.setNMTokensFromPreviousAttempts(nmTokens);\n         LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n             + transferredContainers.size() + \" containers from previous\"\n             + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n       }\n     }\n \n     response.setSchedulerResourceTypes(getScheduler()\n         .getSchedulingResourceTypes());\n-    return response;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request,\n      RegisterApplicationMasterResponse response) throws IOException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java",
          "extendedDetails": {}
        }
      ]
    },
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
      "commitDate": "10/07/17 2:34 PM",
      "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,66 @@\n+  public RegisterApplicationMasterResponse registerApplicationMaster(\n+      ApplicationAttemptId applicationAttemptId,\n+      RegisterApplicationMasterRequest request) throws IOException {\n+\n+    RMApp app \u003d getRmContext().getRMApps().get(\n+        applicationAttemptId.getApplicationId());\n+    LOG.info(\"AM registration \" + applicationAttemptId);\n+    getRmContext().getDispatcher().getEventHandler()\n+        .handle(\n+            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n+                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n+    RMAuditLogger.logSuccess(app.getUser(),\n+        RMAuditLogger.AuditConstants.REGISTER_AM,\n+        \"ApplicationMasterService\", app.getApplicationId(),\n+        applicationAttemptId);\n+    RegisterApplicationMasterResponse response \u003d recordFactory\n+        .newRecordInstance(RegisterApplicationMasterResponse.class);\n+    response.setMaximumResourceCapability(getScheduler()\n+        .getMaximumResourceCapability(app.getQueue()));\n+    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n+        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n+    response.setQueue(app.getQueue());\n+    if (UserGroupInformation.isSecurityEnabled()) {\n+      LOG.info(\"Setting client token master key\");\n+      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n+          getRmContext().getClientToAMTokenSecretManager()\n+          .getMasterKey(applicationAttemptId).getEncoded()));\n+    }\n+\n+    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n+    // and corresponding NM tokens.\n+    if (app.getApplicationSubmissionContext()\n+        .getKeepContainersAcrossApplicationAttempts()) {\n+      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n+          .getTransferredContainers(applicationAttemptId);\n+      if (!transferredContainers.isEmpty()) {\n+        response.setContainersFromPreviousAttempts(transferredContainers);\n+        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n+        for (Container container : transferredContainers) {\n+          try {\n+            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n+                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n+                    container);\n+            if (null !\u003d token) {\n+              nmTokens.add(token);\n+            }\n+          } catch (IllegalArgumentException e) {\n+            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n+            // that\n+            // will be automatically retried by RMProxy in RPC layer.\n+            if (e.getCause() instanceof UnknownHostException) {\n+              throw (UnknownHostException) e.getCause();\n+            }\n+          }\n+        }\n+        response.setNMTokensFromPreviousAttempts(nmTokens);\n+        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n+            + transferredContainers.size() + \" containers from previous\"\n+            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n+      }\n+    }\n+\n+    response.setSchedulerResourceTypes(getScheduler()\n+        .getSchedulingResourceTypes());\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster(\n      ApplicationAttemptId applicationAttemptId,\n      RegisterApplicationMasterRequest request) throws IOException {\n\n    RMApp app \u003d getRmContext().getRMApps().get(\n        applicationAttemptId.getApplicationId());\n    LOG.info(\"AM registration \" + applicationAttemptId);\n    getRmContext().getDispatcher().getEventHandler()\n        .handle(\n            new RMAppAttemptRegistrationEvent(applicationAttemptId, request\n                .getHost(), request.getRpcPort(), request.getTrackingUrl()));\n    RMAuditLogger.logSuccess(app.getUser(),\n        RMAuditLogger.AuditConstants.REGISTER_AM,\n        \"ApplicationMasterService\", app.getApplicationId(),\n        applicationAttemptId);\n    RegisterApplicationMasterResponse response \u003d recordFactory\n        .newRecordInstance(RegisterApplicationMasterResponse.class);\n    response.setMaximumResourceCapability(getScheduler()\n        .getMaximumResourceCapability(app.getQueue()));\n    response.setApplicationACLs(app.getRMAppAttempt(applicationAttemptId)\n        .getSubmissionContext().getAMContainerSpec().getApplicationACLs());\n    response.setQueue(app.getQueue());\n    if (UserGroupInformation.isSecurityEnabled()) {\n      LOG.info(\"Setting client token master key\");\n      response.setClientToAMTokenMasterKey(java.nio.ByteBuffer.wrap(\n          getRmContext().getClientToAMTokenSecretManager()\n          .getMasterKey(applicationAttemptId).getEncoded()));\n    }\n\n    // For work-preserving AM restart, retrieve previous attempts\u0027 containers\n    // and corresponding NM tokens.\n    if (app.getApplicationSubmissionContext()\n        .getKeepContainersAcrossApplicationAttempts()) {\n      List\u003cContainer\u003e transferredContainers \u003d getScheduler()\n          .getTransferredContainers(applicationAttemptId);\n      if (!transferredContainers.isEmpty()) {\n        response.setContainersFromPreviousAttempts(transferredContainers);\n        List\u003cNMToken\u003e nmTokens \u003d new ArrayList\u003cNMToken\u003e();\n        for (Container container : transferredContainers) {\n          try {\n            NMToken token \u003d getRmContext().getNMTokenSecretManager()\n                .createAndGetNMToken(app.getUser(), applicationAttemptId,\n                    container);\n            if (null !\u003d token) {\n              nmTokens.add(token);\n            }\n          } catch (IllegalArgumentException e) {\n            // if it\u0027s a DNS issue, throw UnknowHostException directly and\n            // that\n            // will be automatically retried by RMProxy in RPC layer.\n            if (e.getCause() instanceof UnknownHostException) {\n              throw (UnknownHostException) e.getCause();\n            }\n          }\n        }\n        response.setNMTokensFromPreviousAttempts(nmTokens);\n        LOG.info(\"Application \" + app.getApplicationId() + \" retrieved \"\n            + transferredContainers.size() + \" containers from previous\"\n            + \" attempts and \" + nmTokens.size() + \" NM tokens.\");\n      }\n    }\n\n    response.setSchedulerResourceTypes(getScheduler()\n        .getSchedulingResourceTypes());\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DefaultAMSProcessor.java"
    }
  }
}