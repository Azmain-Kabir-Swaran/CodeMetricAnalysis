{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RollingLevelDBTimelineStore.java",
  "functionName": "getEntities",
  "functionId": "getEntities___entityType-String__limit-Long__windowStart-Long__windowEnd-Long__fromId-String__fromTs-Long__primaryFilter-NameValuePair__secondaryFilters-Collection__NameValuePair____fields-EnumSet__Field____checkAcl-CheckAcl",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java",
  "functionStartLine": 628,
  "functionEndLine": 647,
  "numCommitsSeen": 12,
  "timeTaken": 1007,
  "changeHistory": [
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f"
  ],
  "changeHistoryShort": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "daf3e4ef8bf73cbe4a799d51b4765809cd81089f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-3448. Added a rolling time-to-live LevelDB timeline store implementation. Contributed by Jonathan Eagles.\n",
      "commitDate": "07/05/15 10:01 AM",
      "commitName": "daf3e4ef8bf73cbe4a799d51b4765809cd81089f",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,20 @@\n+  public TimelineEntities getEntities(String entityType, Long limit,\n+      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n+      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n+      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n+    if (primaryFilter \u003d\u003d null) {\n+      // if no primary filter is specified, prefix the lookup with\n+      // ENTITY_ENTRY_PREFIX\n+      return getEntityByTime(EMPTY_BYTES, entityType, limit, windowStart,\n+          windowEnd, fromId, fromTs, secondaryFilters, fields, checkAcl, false);\n+    } else {\n+      // if a primary filter is specified, prefix the lookup with\n+      // INDEXED_ENTRY_PREFIX + primaryFilterName + primaryFilterValue +\n+      // ENTITY_ENTRY_PREFIX\n+      byte[] base \u003d KeyBuilder.newInstance().add(primaryFilter.getName())\n+          .add(fstConf.asByteArray(primaryFilter.getValue()), true)\n+          .getBytesForLookup();\n+      return getEntityByTime(base, entityType, limit, windowStart, windowEnd,\n+          fromId, fromTs, secondaryFilters, fields, checkAcl, true);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntities getEntities(String entityType, Long limit,\n      Long windowStart, Long windowEnd, String fromId, Long fromTs,\n      NameValuePair primaryFilter, Collection\u003cNameValuePair\u003e secondaryFilters,\n      EnumSet\u003cField\u003e fields, CheckAcl checkAcl) throws IOException {\n    if (primaryFilter \u003d\u003d null) {\n      // if no primary filter is specified, prefix the lookup with\n      // ENTITY_ENTRY_PREFIX\n      return getEntityByTime(EMPTY_BYTES, entityType, limit, windowStart,\n          windowEnd, fromId, fromTs, secondaryFilters, fields, checkAcl, false);\n    } else {\n      // if a primary filter is specified, prefix the lookup with\n      // INDEXED_ENTRY_PREFIX + primaryFilterName + primaryFilterValue +\n      // ENTITY_ENTRY_PREFIX\n      byte[] base \u003d KeyBuilder.newInstance().add(primaryFilter.getName())\n          .add(fstConf.asByteArray(primaryFilter.getValue()), true)\n          .getBytesForLookup();\n      return getEntityByTime(base, entityType, limit, windowStart, windowEnd,\n          fromId, fromTs, secondaryFilters, fields, checkAcl, true);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/RollingLevelDBTimelineStore.java"
    }
  }
}