{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CryptoOutputStream.java",
  "functionName": "encrypt",
  "functionId": "encrypt",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoOutputStream.java",
  "functionStartLine": 174,
  "functionEndLine": 213,
  "numCommitsSeen": 12,
  "timeTaken": 778,
  "changeHistory": [
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d"
  ],
  "changeHistoryShort": {
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": "Ybodychange",
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10628. Javadoc and few code style improvement for Crypto input and output streams. (yliu via clamb)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1598429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/05/14 3:09 PM",
      "commitName": "2e5ae1aad74575cd35f47bd5f0f789d7056ef77d",
      "commitAuthor": "Charles Lamb",
      "commitDateOld": "23/05/14 6:19 PM",
      "commitNameOld": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthorOld": "Yi Liu",
      "daysBetweenCommits": 5.87,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private void encrypt() throws IOException {\n     Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n     if (inBuffer.position() \u003d\u003d padding) {\n       // There is no real data in the inBuffer.\n       return;\n     }\n     inBuffer.flip();\n     outBuffer.clear();\n     encryptor.encrypt(inBuffer, outBuffer);\n     inBuffer.clear();\n     outBuffer.flip();\n     if (padding \u003e 0) {\n-      /**\n-       * The plain text and cipher text have 1:1 mapping, they start at same \n-       * position.\n+      /*\n+       * The plain text and cipher text have a 1:1 mapping, they start at the \n+       * same position.\n        */\n       outBuffer.position(padding);\n       padding \u003d 0;\n     }\n-    int len \u003d outBuffer.remaining();\n-    /**\n+    final int len \u003d outBuffer.remaining();\n+    \n+    /*\n      * If underlying stream supports {@link ByteBuffer} write in future, needs\n      * refine here. \n      */\n     final byte[] tmp \u003d getTmpBuf();\n     outBuffer.get(tmp, 0, len);\n     out.write(tmp, 0, len);\n     \n     streamOffset +\u003d len;\n     if (encryptor.isContextReset()) {\n-      /**\n-       * We will generally not get here.  For CTR mode, to improve\n-       * performance, we rely on the encryptor maintaining context, for\n-       * example to calculate the counter.  But some bad implementations\n-       * can\u0027t maintain context, and need us to re-init after doing\n-       * encryption.\n+      /*\n+       * This code is generally not executed since the encryptor usually\n+       * maintains encryption context (e.g. the counter) internally. However,\n+       * some implementations can\u0027t maintain context so a re-init is necessary\n+       * after each encryption call.\n        */\n       updateEncryptor();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void encrypt() throws IOException {\n    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n    if (inBuffer.position() \u003d\u003d padding) {\n      // There is no real data in the inBuffer.\n      return;\n    }\n    inBuffer.flip();\n    outBuffer.clear();\n    encryptor.encrypt(inBuffer, outBuffer);\n    inBuffer.clear();\n    outBuffer.flip();\n    if (padding \u003e 0) {\n      /*\n       * The plain text and cipher text have a 1:1 mapping, they start at the \n       * same position.\n       */\n      outBuffer.position(padding);\n      padding \u003d 0;\n    }\n    final int len \u003d outBuffer.remaining();\n    \n    /*\n     * If underlying stream supports {@link ByteBuffer} write in future, needs\n     * refine here. \n     */\n    final byte[] tmp \u003d getTmpBuf();\n    outBuffer.get(tmp, 0, len);\n    out.write(tmp, 0, len);\n    \n    streamOffset +\u003d len;\n    if (encryptor.isContextReset()) {\n      /*\n       * This code is generally not executed since the encryptor usually\n       * maintains encryption context (e.g. the counter) internally. However,\n       * some implementations can\u0027t maintain context so a re-init is necessary\n       * after each encryption call.\n       */\n      updateEncryptor();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoOutputStream.java",
      "extendedDetails": {}
    },
    "b20180ffa6c89396d9fcfec8b029b9c600503c3d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10603. Crypto input and output streams implementing Hadoop stream interfaces. Contributed by Yi Liu and Charles Lamb.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/fs-encryption@1597230 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 6:19 PM",
      "commitName": "b20180ffa6c89396d9fcfec8b029b9c600503c3d",
      "commitAuthor": "Yi Liu",
      "diff": "@@ -0,0 +1,40 @@\n+  private void encrypt() throws IOException {\n+    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n+    if (inBuffer.position() \u003d\u003d padding) {\n+      // There is no real data in the inBuffer.\n+      return;\n+    }\n+    inBuffer.flip();\n+    outBuffer.clear();\n+    encryptor.encrypt(inBuffer, outBuffer);\n+    inBuffer.clear();\n+    outBuffer.flip();\n+    if (padding \u003e 0) {\n+      /**\n+       * The plain text and cipher text have 1:1 mapping, they start at same \n+       * position.\n+       */\n+      outBuffer.position(padding);\n+      padding \u003d 0;\n+    }\n+    int len \u003d outBuffer.remaining();\n+    /**\n+     * If underlying stream supports {@link ByteBuffer} write in future, needs\n+     * refine here. \n+     */\n+    final byte[] tmp \u003d getTmpBuf();\n+    outBuffer.get(tmp, 0, len);\n+    out.write(tmp, 0, len);\n+    \n+    streamOffset +\u003d len;\n+    if (encryptor.isContextReset()) {\n+      /**\n+       * We will generally not get here.  For CTR mode, to improve\n+       * performance, we rely on the encryptor maintaining context, for\n+       * example to calculate the counter.  But some bad implementations\n+       * can\u0027t maintain context, and need us to re-init after doing\n+       * encryption.\n+       */\n+      updateEncryptor();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void encrypt() throws IOException {\n    Preconditions.checkState(inBuffer.position() \u003e\u003d padding);\n    if (inBuffer.position() \u003d\u003d padding) {\n      // There is no real data in the inBuffer.\n      return;\n    }\n    inBuffer.flip();\n    outBuffer.clear();\n    encryptor.encrypt(inBuffer, outBuffer);\n    inBuffer.clear();\n    outBuffer.flip();\n    if (padding \u003e 0) {\n      /**\n       * The plain text and cipher text have 1:1 mapping, they start at same \n       * position.\n       */\n      outBuffer.position(padding);\n      padding \u003d 0;\n    }\n    int len \u003d outBuffer.remaining();\n    /**\n     * If underlying stream supports {@link ByteBuffer} write in future, needs\n     * refine here. \n     */\n    final byte[] tmp \u003d getTmpBuf();\n    outBuffer.get(tmp, 0, len);\n    out.write(tmp, 0, len);\n    \n    streamOffset +\u003d len;\n    if (encryptor.isContextReset()) {\n      /**\n       * We will generally not get here.  For CTR mode, to improve\n       * performance, we rely on the encryptor maintaining context, for\n       * example to calculate the counter.  But some bad implementations\n       * can\u0027t maintain context, and need us to re-init after doing\n       * encryption.\n       */\n      updateEncryptor();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/CryptoOutputStream.java"
    }
  }
}