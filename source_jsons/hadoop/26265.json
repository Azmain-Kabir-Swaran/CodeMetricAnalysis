{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SimpleExponentialTaskRuntimeEstimator.java",
  "functionName": "estimatedRuntime",
  "functionId": "estimatedRuntime___id-TaskAttemptId(modifiers-final)",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java",
  "functionStartLine": 126,
  "functionEndLine": 140,
  "numCommitsSeen": 3,
  "timeTaken": 1947,
  "changeHistory": [
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
    "ed302f1fed6d124d682486d24dae958946dba9be"
  ],
  "changeHistoryShort": {
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37": "Ymultichange(Ybodychange,Yparametermetachange)",
    "ed302f1fed6d124d682486d24dae958946dba9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdd6efd3ab6917e30b4c5c7b261f61838901bb37": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
      "commitDate": "08/01/20 9:08 AM",
      "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
      "commitAuthor": "Ahmed Hussein",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
          "commitDate": "08/01/20 9:08 AM",
          "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
          "commitAuthor": "Ahmed Hussein",
          "commitDateOld": "05/11/19 12:55 PM",
          "commitNameOld": "ed302f1fed6d124d682486d24dae958946dba9be",
          "commitAuthorOld": "Ahmed Hussein",
          "daysBetweenCommits": 63.84,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,15 @@\n-  public long estimatedRuntime(TaskAttemptId id) {\n+  public long estimatedRuntime(final TaskAttemptId id) {\n     SimpleExponentialSmoothing foreCastEntry \u003d getForecastEntry(id);\n     if (foreCastEntry \u003d\u003d null) {\n       return DEFAULT_ESTIMATE_RUNTIME;\n     }\n-    // TODO: What should we do when estimate is zero\n-    double remainingWork \u003d Math.min(1.0, 1.0 - foreCastEntry.getRawData());\n-    double forecast \u003d foreCastEntry.getForecast();\n-    if (forecast \u003c\u003d 0.0) {\n-      return DEFAULT_ESTIMATE_RUNTIME;\n-    }\n-    long remainingTime \u003d (long)(remainingWork / forecast);\n+    double remainingWork \u003d Math\n+        .max(0.0, Math.min(1.0, 1.0 - foreCastEntry.getRawData()));\n+    double forecast \u003d Math\n+        .max(DEFAULT_PROGRESS_VALUE, foreCastEntry.getForecast());\n+    long remainingTime \u003d (long) (remainingWork / forecast);\n     long estimatedRuntime \u003d remainingTime\n         + foreCastEntry.getTimeStamp()\n         - foreCastEntry.getStartTime();\n     return estimatedRuntime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long estimatedRuntime(final TaskAttemptId id) {\n    SimpleExponentialSmoothing foreCastEntry \u003d getForecastEntry(id);\n    if (foreCastEntry \u003d\u003d null) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    double remainingWork \u003d Math\n        .max(0.0, Math.min(1.0, 1.0 - foreCastEntry.getRawData()));\n    double forecast \u003d Math\n        .max(DEFAULT_PROGRESS_VALUE, foreCastEntry.getForecast());\n    long remainingTime \u003d (long) (remainingWork / forecast);\n    long estimatedRuntime \u003d remainingTime\n        + foreCastEntry.getTimeStamp()\n        - foreCastEntry.getStartTime();\n    return estimatedRuntime;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "MAPREDUCE-7252. Handling 0 progress in SimpleExponential task runtime estimator\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
          "commitDate": "08/01/20 9:08 AM",
          "commitName": "cdd6efd3ab6917e30b4c5c7b261f61838901bb37",
          "commitAuthor": "Ahmed Hussein",
          "commitDateOld": "05/11/19 12:55 PM",
          "commitNameOld": "ed302f1fed6d124d682486d24dae958946dba9be",
          "commitAuthorOld": "Ahmed Hussein",
          "daysBetweenCommits": 63.84,
          "commitsBetweenForRepo": 225,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,15 @@\n-  public long estimatedRuntime(TaskAttemptId id) {\n+  public long estimatedRuntime(final TaskAttemptId id) {\n     SimpleExponentialSmoothing foreCastEntry \u003d getForecastEntry(id);\n     if (foreCastEntry \u003d\u003d null) {\n       return DEFAULT_ESTIMATE_RUNTIME;\n     }\n-    // TODO: What should we do when estimate is zero\n-    double remainingWork \u003d Math.min(1.0, 1.0 - foreCastEntry.getRawData());\n-    double forecast \u003d foreCastEntry.getForecast();\n-    if (forecast \u003c\u003d 0.0) {\n-      return DEFAULT_ESTIMATE_RUNTIME;\n-    }\n-    long remainingTime \u003d (long)(remainingWork / forecast);\n+    double remainingWork \u003d Math\n+        .max(0.0, Math.min(1.0, 1.0 - foreCastEntry.getRawData()));\n+    double forecast \u003d Math\n+        .max(DEFAULT_PROGRESS_VALUE, foreCastEntry.getForecast());\n+    long remainingTime \u003d (long) (remainingWork / forecast);\n     long estimatedRuntime \u003d remainingTime\n         + foreCastEntry.getTimeStamp()\n         - foreCastEntry.getStartTime();\n     return estimatedRuntime;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public long estimatedRuntime(final TaskAttemptId id) {\n    SimpleExponentialSmoothing foreCastEntry \u003d getForecastEntry(id);\n    if (foreCastEntry \u003d\u003d null) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    double remainingWork \u003d Math\n        .max(0.0, Math.min(1.0, 1.0 - foreCastEntry.getRawData()));\n    double forecast \u003d Math\n        .max(DEFAULT_PROGRESS_VALUE, foreCastEntry.getForecast());\n    long remainingTime \u003d (long) (remainingWork / forecast);\n    long estimatedRuntime \u003d remainingTime\n        + foreCastEntry.getTimeStamp()\n        - foreCastEntry.getStartTime();\n    return estimatedRuntime;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java",
          "extendedDetails": {
            "oldValue": "[id-TaskAttemptId]",
            "newValue": "[id-TaskAttemptId(modifiers-final)]"
          }
        }
      ]
    },
    "ed302f1fed6d124d682486d24dae958946dba9be": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-7208. Tuning TaskRuntimeEstimator. (Ahmed Hussein via jeagles)\n\nSigned-off-by: Jonathan Eagles \u003cjeagles@gmail.com\u003e\n",
      "commitDate": "05/11/19 12:55 PM",
      "commitName": "ed302f1fed6d124d682486d24dae958946dba9be",
      "commitAuthor": "Ahmed Hussein",
      "diff": "@@ -0,0 +1,17 @@\n+  public long estimatedRuntime(TaskAttemptId id) {\n+    SimpleExponentialSmoothing foreCastEntry \u003d getForecastEntry(id);\n+    if (foreCastEntry \u003d\u003d null) {\n+      return DEFAULT_ESTIMATE_RUNTIME;\n+    }\n+    // TODO: What should we do when estimate is zero\n+    double remainingWork \u003d Math.min(1.0, 1.0 - foreCastEntry.getRawData());\n+    double forecast \u003d foreCastEntry.getForecast();\n+    if (forecast \u003c\u003d 0.0) {\n+      return DEFAULT_ESTIMATE_RUNTIME;\n+    }\n+    long remainingTime \u003d (long)(remainingWork / forecast);\n+    long estimatedRuntime \u003d remainingTime\n+        + foreCastEntry.getTimeStamp()\n+        - foreCastEntry.getStartTime();\n+    return estimatedRuntime;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public long estimatedRuntime(TaskAttemptId id) {\n    SimpleExponentialSmoothing foreCastEntry \u003d getForecastEntry(id);\n    if (foreCastEntry \u003d\u003d null) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    // TODO: What should we do when estimate is zero\n    double remainingWork \u003d Math.min(1.0, 1.0 - foreCastEntry.getRawData());\n    double forecast \u003d foreCastEntry.getForecast();\n    if (forecast \u003c\u003d 0.0) {\n      return DEFAULT_ESTIMATE_RUNTIME;\n    }\n    long remainingTime \u003d (long)(remainingWork / forecast);\n    long estimatedRuntime \u003d remainingTime\n        + foreCastEntry.getTimeStamp()\n        - foreCastEntry.getStartTime();\n    return estimatedRuntime;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/speculate/SimpleExponentialTaskRuntimeEstimator.java"
    }
  }
}