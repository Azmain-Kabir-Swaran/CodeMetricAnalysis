{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPOfferService.java",
  "functionName": "verifyAndSetNamespaceInfo",
  "functionId": "verifyAndSetNamespaceInfo___actor-BPServiceActor__nsInfo-NamespaceInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
  "functionStartLine": 374,
  "functionEndLine": 406,
  "numCommitsSeen": 300,
  "timeTaken": 6020,
  "changeHistory": [
    "e7d187a1b6a826edd5bd0f708184d48f3674d489",
    "ac0d402c6a3af784aa8bdceecf3293c30760346f",
    "9f8344db502b833efe0f2c554b67098e77063d20",
    "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39",
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
    "9678020e59cf073f74cce70ac57d1f6869349a36"
  ],
  "changeHistoryShort": {
    "e7d187a1b6a826edd5bd0f708184d48f3674d489": "Ybodychange",
    "ac0d402c6a3af784aa8bdceecf3293c30760346f": "Ymultichange(Yparameterchange,Ybodychange)",
    "9f8344db502b833efe0f2c554b67098e77063d20": "Ymultichange(Yparameterchange,Ybodychange)",
    "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39": "Ymultichange(Yparameterchange,Ybodychange)",
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45": "Ymultichange(Ymodifierchange,Ybodychange)",
    "9678020e59cf073f74cce70ac57d1f6869349a36": "Ybodychange"
  },
  "changeHistoryDetails": {
    "e7d187a1b6a826edd5bd0f708184d48f3674d489": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12140. Remove BPOfferService lock contention to get block pool id. Contributed by Daryn Sharp.\n",
      "commitDate": "14/07/17 2:07 PM",
      "commitName": "e7d187a1b6a826edd5bd0f708184d48f3674d489",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "12/06/17 6:45 PM",
      "commitNameOld": "bec79ca2495abdc347d64628151c90f5ce777046",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 31.81,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,33 @@\n   void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n     throws IOException {\n     writeLock();\n \n     if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n         \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n       LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n       bpServiceToActive \u003d actor;\n     }\n \n     try {\n-      if (this.bpNSInfo \u003d\u003d null) {\n-        this.bpNSInfo \u003d nsInfo;\n+      if (setNamespaceInfo(nsInfo) \u003d\u003d null) {\n         boolean success \u003d false;\n \n         // Now that we know the namespace ID, etc, we can pass this to the DN.\n         // The DN can now initialize its local storage if we are the\n         // first BP to handshake, etc.\n         try {\n           dn.initBlockPool(this);\n           success \u003d true;\n         } finally {\n           if (!success) {\n             // The datanode failed to initialize the BP. We need to reset\n             // the namespace info so that other BPService actors still have\n             // a chance to set it, and re-initialize the datanode.\n-            this.bpNSInfo \u003d null;\n+            setNamespaceInfo(null);\n           }\n         }\n-      } else {\n-        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n-            \"Blockpool ID\");\n-        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n-            \"Namespace ID\");\n-        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n-            \"Cluster ID\");\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n    throws IOException {\n    writeLock();\n\n    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n      bpServiceToActive \u003d actor;\n    }\n\n    try {\n      if (setNamespaceInfo(nsInfo) \u003d\u003d null) {\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            setNamespaceInfo(null);\n          }\n        }\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    },
    "ac0d402c6a3af784aa8bdceecf3293c30760346f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\n",
      "commitDate": "15/12/16 2:53 PM",
      "commitName": "ac0d402c6a3af784aa8bdceecf3293c30760346f",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\n",
          "commitDate": "15/12/16 2:53 PM",
          "commitName": "ac0d402c6a3af784aa8bdceecf3293c30760346f",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "08/12/16 1:36 PM",
          "commitNameOld": "9f8344db502b833efe0f2c554b67098e77063d20",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 7.05,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n+  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n+    throws IOException {\n     writeLock();\n+\n+    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n+        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n+      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n+      bpServiceToActive \u003d actor;\n+    }\n+\n     try {\n       if (this.bpNSInfo \u003d\u003d null) {\n         this.bpNSInfo \u003d nsInfo;\n         boolean success \u003d false;\n \n         // Now that we know the namespace ID, etc, we can pass this to the DN.\n         // The DN can now initialize its local storage if we are the\n         // first BP to handshake, etc.\n         try {\n           dn.initBlockPool(this);\n           success \u003d true;\n         } finally {\n           if (!success) {\n             // The datanode failed to initialize the BP. We need to reset\n             // the namespace info so that other BPService actors still have\n             // a chance to set it, and re-initialize the datanode.\n             this.bpNSInfo \u003d null;\n           }\n         }\n       } else {\n         checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n             \"Blockpool ID\");\n         checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n             \"Namespace ID\");\n         checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n             \"Cluster ID\");\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n    throws IOException {\n    writeLock();\n\n    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n      bpServiceToActive \u003d actor;\n    }\n\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {
            "oldValue": "[nsInfo-NamespaceInfo]",
            "newValue": "[actor-BPServiceActor, nsInfo-NamespaceInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\n",
          "commitDate": "15/12/16 2:53 PM",
          "commitName": "ac0d402c6a3af784aa8bdceecf3293c30760346f",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "08/12/16 1:36 PM",
          "commitNameOld": "9f8344db502b833efe0f2c554b67098e77063d20",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 7.05,
          "commitsBetweenForRepo": 34,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n+  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n+    throws IOException {\n     writeLock();\n+\n+    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n+        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n+      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n+      bpServiceToActive \u003d actor;\n+    }\n+\n     try {\n       if (this.bpNSInfo \u003d\u003d null) {\n         this.bpNSInfo \u003d nsInfo;\n         boolean success \u003d false;\n \n         // Now that we know the namespace ID, etc, we can pass this to the DN.\n         // The DN can now initialize its local storage if we are the\n         // first BP to handshake, etc.\n         try {\n           dn.initBlockPool(this);\n           success \u003d true;\n         } finally {\n           if (!success) {\n             // The datanode failed to initialize the BP. We need to reset\n             // the namespace info so that other BPService actors still have\n             // a chance to set it, and re-initialize the datanode.\n             this.bpNSInfo \u003d null;\n           }\n         }\n       } else {\n         checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n             \"Blockpool ID\");\n         checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n             \"Namespace ID\");\n         checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n             \"Cluster ID\");\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n    throws IOException {\n    writeLock();\n\n    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n      bpServiceToActive \u003d actor;\n    }\n\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {}
        }
      ]
    },
    "9f8344db502b833efe0f2c554b67098e77063d20": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Revert \"HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\"\n\nThis reverts commit 8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39.\n",
      "commitDate": "08/12/16 1:36 PM",
      "commitName": "9f8344db502b833efe0f2c554b67098e77063d20",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Revert \"HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\"\n\nThis reverts commit 8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39.\n",
          "commitDate": "08/12/16 1:36 PM",
          "commitName": "9f8344db502b833efe0f2c554b67098e77063d20",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "05/12/16 11:48 AM",
          "commitNameOld": "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 3.07,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n-    throws IOException {\n+  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n     writeLock();\n-\n-    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n-        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n-      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n-      bpServiceToActive \u003d actor;\n-    }\n-\n     try {\n       if (this.bpNSInfo \u003d\u003d null) {\n         this.bpNSInfo \u003d nsInfo;\n         boolean success \u003d false;\n \n         // Now that we know the namespace ID, etc, we can pass this to the DN.\n         // The DN can now initialize its local storage if we are the\n         // first BP to handshake, etc.\n         try {\n           dn.initBlockPool(this);\n           success \u003d true;\n         } finally {\n           if (!success) {\n             // The datanode failed to initialize the BP. We need to reset\n             // the namespace info so that other BPService actors still have\n             // a chance to set it, and re-initialize the datanode.\n             this.bpNSInfo \u003d null;\n           }\n         }\n       } else {\n         checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n             \"Blockpool ID\");\n         checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n             \"Namespace ID\");\n         checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n             \"Cluster ID\");\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n    writeLock();\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {
            "oldValue": "[actor-BPServiceActor, nsInfo-NamespaceInfo]",
            "newValue": "[nsInfo-NamespaceInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Revert \"HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\"\n\nThis reverts commit 8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39.\n",
          "commitDate": "08/12/16 1:36 PM",
          "commitName": "9f8344db502b833efe0f2c554b67098e77063d20",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "05/12/16 11:48 AM",
          "commitNameOld": "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39",
          "commitAuthorOld": "Mingliang Liu",
          "daysBetweenCommits": 3.07,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,33 @@\n-  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n-    throws IOException {\n+  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n     writeLock();\n-\n-    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n-        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n-      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n-      bpServiceToActive \u003d actor;\n-    }\n-\n     try {\n       if (this.bpNSInfo \u003d\u003d null) {\n         this.bpNSInfo \u003d nsInfo;\n         boolean success \u003d false;\n \n         // Now that we know the namespace ID, etc, we can pass this to the DN.\n         // The DN can now initialize its local storage if we are the\n         // first BP to handshake, etc.\n         try {\n           dn.initBlockPool(this);\n           success \u003d true;\n         } finally {\n           if (!success) {\n             // The datanode failed to initialize the BP. We need to reset\n             // the namespace info so that other BPService actors still have\n             // a chance to set it, and re-initialize the datanode.\n             this.bpNSInfo \u003d null;\n           }\n         }\n       } else {\n         checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n             \"Blockpool ID\");\n         checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n             \"Namespace ID\");\n         checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n             \"Cluster ID\");\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n    writeLock();\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {}
        }
      ]
    },
    "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\n",
      "commitDate": "05/12/16 11:48 AM",
      "commitName": "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39",
      "commitAuthor": "Mingliang Liu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\n",
          "commitDate": "05/12/16 11:48 AM",
          "commitName": "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "04/03/16 3:29 PM",
          "commitNameOld": "2759689d7d23001f007cb0dbe2521de90734dd5c",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 275.85,
          "commitsBetweenForRepo": 1984,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n+  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n+    throws IOException {\n     writeLock();\n+\n+    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n+        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n+      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n+      bpServiceToActive \u003d actor;\n+    }\n+\n     try {\n       if (this.bpNSInfo \u003d\u003d null) {\n         this.bpNSInfo \u003d nsInfo;\n         boolean success \u003d false;\n \n         // Now that we know the namespace ID, etc, we can pass this to the DN.\n         // The DN can now initialize its local storage if we are the\n         // first BP to handshake, etc.\n         try {\n           dn.initBlockPool(this);\n           success \u003d true;\n         } finally {\n           if (!success) {\n             // The datanode failed to initialize the BP. We need to reset\n             // the namespace info so that other BPService actors still have\n             // a chance to set it, and re-initialize the datanode.\n             this.bpNSInfo \u003d null;\n           }\n         }\n       } else {\n         checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n             \"Blockpool ID\");\n         checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n             \"Namespace ID\");\n         checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n             \"Cluster ID\");\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n    throws IOException {\n    writeLock();\n\n    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n      bpServiceToActive \u003d actor;\n    }\n\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {
            "oldValue": "[nsInfo-NamespaceInfo]",
            "newValue": "[actor-BPServiceActor, nsInfo-NamespaceInfo]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-11094. Send back HAState along with NamespaceInfo during a versionRequest as an optional parameter. Contributed by Eric Badger\n",
          "commitDate": "05/12/16 11:48 AM",
          "commitName": "8c4680852b20ad0e65e77dd123c9ba5bb6f2fa39",
          "commitAuthor": "Mingliang Liu",
          "commitDateOld": "04/03/16 3:29 PM",
          "commitNameOld": "2759689d7d23001f007cb0dbe2521de90734dd5c",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 275.85,
          "commitsBetweenForRepo": 1984,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,41 @@\n-  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n+  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n+    throws IOException {\n     writeLock();\n+\n+    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n+        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n+      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n+      bpServiceToActive \u003d actor;\n+    }\n+\n     try {\n       if (this.bpNSInfo \u003d\u003d null) {\n         this.bpNSInfo \u003d nsInfo;\n         boolean success \u003d false;\n \n         // Now that we know the namespace ID, etc, we can pass this to the DN.\n         // The DN can now initialize its local storage if we are the\n         // first BP to handshake, etc.\n         try {\n           dn.initBlockPool(this);\n           success \u003d true;\n         } finally {\n           if (!success) {\n             // The datanode failed to initialize the BP. We need to reset\n             // the namespace info so that other BPService actors still have\n             // a chance to set it, and re-initialize the datanode.\n             this.bpNSInfo \u003d null;\n           }\n         }\n       } else {\n         checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n             \"Blockpool ID\");\n         checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n             \"Namespace ID\");\n         checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n             \"Cluster ID\");\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(BPServiceActor actor, NamespaceInfo nsInfo)\n    throws IOException {\n    writeLock();\n\n    if(nsInfo.getState() \u003d\u003d HAServiceState.ACTIVE\n        \u0026\u0026 bpServiceToActive \u003d\u003d null) {\n      LOG.info(\"Acknowledging ACTIVE Namenode during handshake\" + actor);\n      bpServiceToActive \u003d actor;\n    }\n\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {}
        }
      ]
    },
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 11:56 AM",
      "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:56 AM",
          "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 12:41 AM",
          "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 10.47,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,33 @@\n-  synchronized void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n-    if (this.bpNSInfo \u003d\u003d null) {\n-      this.bpNSInfo \u003d nsInfo;\n-      boolean success \u003d false;\n+  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n+    writeLock();\n+    try {\n+      if (this.bpNSInfo \u003d\u003d null) {\n+        this.bpNSInfo \u003d nsInfo;\n+        boolean success \u003d false;\n \n-      // Now that we know the namespace ID, etc, we can pass this to the DN.\n-      // The DN can now initialize its local storage if we are the\n-      // first BP to handshake, etc.\n-      try {\n-        dn.initBlockPool(this);\n-        success \u003d true;\n-      } finally {\n-        if (!success) {\n-          // The datanode failed to initialize the BP. We need to reset\n-          // the namespace info so that other BPService actors still have\n-          // a chance to set it, and re-initialize the datanode.\n-          this.bpNSInfo \u003d null;\n+        // Now that we know the namespace ID, etc, we can pass this to the DN.\n+        // The DN can now initialize its local storage if we are the\n+        // first BP to handshake, etc.\n+        try {\n+          dn.initBlockPool(this);\n+          success \u003d true;\n+        } finally {\n+          if (!success) {\n+            // The datanode failed to initialize the BP. We need to reset\n+            // the namespace info so that other BPService actors still have\n+            // a chance to set it, and re-initialize the datanode.\n+            this.bpNSInfo \u003d null;\n+          }\n         }\n+      } else {\n+        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n+            \"Blockpool ID\");\n+        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n+            \"Namespace ID\");\n+        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n+            \"Cluster ID\");\n       }\n-    } else {\n-      checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n-          \"Blockpool ID\");\n-      checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n-          \"Namespace ID\");\n-      checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n-          \"Cluster ID\");\n+    } finally {\n+      writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n    writeLock();\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:56 AM",
          "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 12:41 AM",
          "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 10.47,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,33 @@\n-  synchronized void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n-    if (this.bpNSInfo \u003d\u003d null) {\n-      this.bpNSInfo \u003d nsInfo;\n-      boolean success \u003d false;\n+  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n+    writeLock();\n+    try {\n+      if (this.bpNSInfo \u003d\u003d null) {\n+        this.bpNSInfo \u003d nsInfo;\n+        boolean success \u003d false;\n \n-      // Now that we know the namespace ID, etc, we can pass this to the DN.\n-      // The DN can now initialize its local storage if we are the\n-      // first BP to handshake, etc.\n-      try {\n-        dn.initBlockPool(this);\n-        success \u003d true;\n-      } finally {\n-        if (!success) {\n-          // The datanode failed to initialize the BP. We need to reset\n-          // the namespace info so that other BPService actors still have\n-          // a chance to set it, and re-initialize the datanode.\n-          this.bpNSInfo \u003d null;\n+        // Now that we know the namespace ID, etc, we can pass this to the DN.\n+        // The DN can now initialize its local storage if we are the\n+        // first BP to handshake, etc.\n+        try {\n+          dn.initBlockPool(this);\n+          success \u003d true;\n+        } finally {\n+          if (!success) {\n+            // The datanode failed to initialize the BP. We need to reset\n+            // the namespace info so that other BPService actors still have\n+            // a chance to set it, and re-initialize the datanode.\n+            this.bpNSInfo \u003d null;\n+          }\n         }\n+      } else {\n+        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n+            \"Blockpool ID\");\n+        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n+            \"Namespace ID\");\n+        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n+            \"Cluster ID\");\n       }\n-    } else {\n-      checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n-          \"Blockpool ID\");\n-      checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n-          \"Namespace ID\");\n-      checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n-          \"Cluster ID\");\n+    } finally {\n+      writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n    writeLock();\n    try {\n      if (this.bpNSInfo \u003d\u003d null) {\n        this.bpNSInfo \u003d nsInfo;\n        boolean success \u003d false;\n\n        // Now that we know the namespace ID, etc, we can pass this to the DN.\n        // The DN can now initialize its local storage if we are the\n        // first BP to handshake, etc.\n        try {\n          dn.initBlockPool(this);\n          success \u003d true;\n        } finally {\n          if (!success) {\n            // The datanode failed to initialize the BP. We need to reset\n            // the namespace info so that other BPService actors still have\n            // a chance to set it, and re-initialize the datanode.\n            this.bpNSInfo \u003d null;\n          }\n        }\n      } else {\n        checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n            \"Blockpool ID\");\n        checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n            \"Namespace ID\");\n        checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n            \"Cluster ID\");\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {}
        }
      ]
    },
    "9678020e59cf073f74cce70ac57d1f6869349a36": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4201. NPE in BPServiceActor#sendHeartBeat (jxiang via cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1550269 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/12/13 1:30 PM",
      "commitName": "9678020e59cf073f74cce70ac57d1f6869349a36",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "20/11/13 1:31 PM",
      "commitNameOld": "916ab9286b6006571649d21c74d9ae70273a3ddc",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 21.0,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,28 @@\n   synchronized void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n     if (this.bpNSInfo \u003d\u003d null) {\n       this.bpNSInfo \u003d nsInfo;\n-      \n+      boolean success \u003d false;\n+\n       // Now that we know the namespace ID, etc, we can pass this to the DN.\n       // The DN can now initialize its local storage if we are the\n       // first BP to handshake, etc.\n-      dn.initBlockPool(this);\n-      return;\n+      try {\n+        dn.initBlockPool(this);\n+        success \u003d true;\n+      } finally {\n+        if (!success) {\n+          // The datanode failed to initialize the BP. We need to reset\n+          // the namespace info so that other BPService actors still have\n+          // a chance to set it, and re-initialize the datanode.\n+          this.bpNSInfo \u003d null;\n+        }\n+      }\n     } else {\n       checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n           \"Blockpool ID\");\n       checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n           \"Namespace ID\");\n       checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n           \"Cluster ID\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void verifyAndSetNamespaceInfo(NamespaceInfo nsInfo) throws IOException {\n    if (this.bpNSInfo \u003d\u003d null) {\n      this.bpNSInfo \u003d nsInfo;\n      boolean success \u003d false;\n\n      // Now that we know the namespace ID, etc, we can pass this to the DN.\n      // The DN can now initialize its local storage if we are the\n      // first BP to handshake, etc.\n      try {\n        dn.initBlockPool(this);\n        success \u003d true;\n      } finally {\n        if (!success) {\n          // The datanode failed to initialize the BP. We need to reset\n          // the namespace info so that other BPService actors still have\n          // a chance to set it, and re-initialize the datanode.\n          this.bpNSInfo \u003d null;\n        }\n      }\n    } else {\n      checkNSEquality(bpNSInfo.getBlockPoolID(), nsInfo.getBlockPoolID(),\n          \"Blockpool ID\");\n      checkNSEquality(bpNSInfo.getNamespaceID(), nsInfo.getNamespaceID(),\n          \"Namespace ID\");\n      checkNSEquality(bpNSInfo.getClusterID(), nsInfo.getClusterID(),\n          \"Cluster ID\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    }
  }
}