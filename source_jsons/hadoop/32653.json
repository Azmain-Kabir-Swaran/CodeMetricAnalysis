{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeStatusUpdaterImpl.java",
  "functionName": "serviceInit",
  "functionId": "serviceInit___conf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
  "functionStartLine": 191,
  "functionEndLine": 260,
  "numCommitsSeen": 155,
  "timeTaken": 13045,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "ed13cf84068ad50a78e66211132c1f08238fb65b",
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
    "3f93ac0733058238a2c8f23960c986c71dca0e02",
    "30ac69c6bd3db363248d6c742561371576006dab",
    "500a1d9c76ec612b4e737888f4be79951c11591d",
    "5c2f05cd9bad9bf9beb0f4ca18f4ae1bc3e84499",
    "92431c961741747b5d6442f4025016d48d9a6863",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19",
    "710a5eea62a9c49ebe2b795e9e44f8ab0706a606",
    "0928502029ef141759008997335ea2cd836a7154",
    "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "45a8e8c5a46535287de97fd6609c0743eef888ee",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "32d511065a2612d37591f09e53eed8ec1488587d",
    "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b",
    "237154982bd5853c6a374cb265520e0602adc52f",
    "ed7eda00cb1f509ebe7f967cb65bdb1ece06334c",
    "fafe8cd28e726566509c679e19d7da622f29f90d",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "ed13cf84068ad50a78e66211132c1f08238fb65b": "Ybodychange",
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a": "Ybodychange",
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": "Ybodychange",
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": "Ybodychange",
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": "Ybodychange",
    "3f93ac0733058238a2c8f23960c986c71dca0e02": "Ybodychange",
    "30ac69c6bd3db363248d6c742561371576006dab": "Ybodychange",
    "500a1d9c76ec612b4e737888f4be79951c11591d": "Ybodychange",
    "5c2f05cd9bad9bf9beb0f4ca18f4ae1bc3e84499": "Ybodychange",
    "92431c961741747b5d6442f4025016d48d9a6863": "Ybodychange",
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": "Ybodychange",
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7": "Ybodychange",
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": "Ybodychange",
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": "Ybodychange",
    "710a5eea62a9c49ebe2b795e9e44f8ab0706a606": "Ybodychange",
    "0928502029ef141759008997335ea2cd836a7154": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
    "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "45a8e8c5a46535287de97fd6609c0743eef888ee": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "32d511065a2612d37591f09e53eed8ec1488587d": "Ybodychange",
    "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b": "Ybodychange",
    "237154982bd5853c6a374cb265520e0602adc52f": "Ybodychange",
    "ed7eda00cb1f509ebe7f967cb65bdb1ece06334c": "Ybodychange",
    "fafe8cd28e726566509c679e19d7da622f29f90d": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "22/02/19 7:31 AM",
      "commitNameOld": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 21.33,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,70 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n     long memoryMb \u003d totalResource.getMemorySize();\n     float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO,\n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n     int virtualCores \u003d totalResource.getVirtualCores();\n \n     // Update configured resources via plugins.\n     updateConfiguredResourcesViaPlugins(totalResource);\n \n     LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n \n     metrics.addResource(totalResource);\n \n     // Get actual node physical resources\n     long physicalMemoryMb \u003d memoryMb;\n     int physicalCores \u003d virtualCores;\n     ResourceCalculatorPlugin rcp \u003d\n         ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n     if (rcp !\u003d null) {\n       physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n       physicalCores \u003d rcp.getNumProcessors();\n     }\n     this.physicalResource \u003d\n         Resource.newInstance(physicalMemoryMb, physicalCores);\n \n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n \n     nodeLabelsHandler \u003d\n         createNMNodeLabelsHandler(nodeLabelsProvider);\n     nodeAttributesHandler \u003d\n         createNMNodeAttributesHandler(nodeAttributesProvider);\n \n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n-        + durationToTrackStoppedContainers);\n-    }\n+    LOG.debug(\"{} :{}\", YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n+        durationToTrackStoppedContainers);\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n     this.timelineServiceV2Enabled \u003d YarnConfiguration.\n         timelineServiceV2Enabled(conf);\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n    long memoryMb \u003d totalResource.getMemorySize();\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO,\n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n    int virtualCores \u003d totalResource.getVirtualCores();\n\n    // Update configured resources via plugins.\n    updateConfiguredResourcesViaPlugins(totalResource);\n\n    LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n\n    metrics.addResource(totalResource);\n\n    // Get actual node physical resources\n    long physicalMemoryMb \u003d memoryMb;\n    int physicalCores \u003d virtualCores;\n    ResourceCalculatorPlugin rcp \u003d\n        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n    if (rcp !\u003d null) {\n      physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n      physicalCores \u003d rcp.getNumProcessors();\n    }\n    this.physicalResource \u003d\n        Resource.newInstance(physicalMemoryMb, physicalCores);\n\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d\n        createNMNodeLabelsHandler(nodeLabelsProvider);\n    nodeAttributesHandler \u003d\n        createNMNodeAttributesHandler(nodeAttributesProvider);\n\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    LOG.debug(\"{} :{}\", YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n        durationToTrackStoppedContainers);\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n        timelineServiceV2Enabled(conf);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "ed13cf84068ad50a78e66211132c1f08238fb65b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9317. Avoid repeated YarnConfiguration#timelineServiceV2Enabled check. Contributed by Prabhu Joseph\n",
      "commitDate": "22/02/19 7:31 AM",
      "commitName": "ed13cf84068ad50a78e66211132c1f08238fb65b",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "28/01/19 6:34 PM",
      "commitNameOld": "4f63ffe444286dac91ed36fd647d8ce69e75b0f0",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 24.54,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,72 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n     long memoryMb \u003d totalResource.getMemorySize();\n     float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO,\n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n     int virtualCores \u003d totalResource.getVirtualCores();\n \n     // Update configured resources via plugins.\n     updateConfiguredResourcesViaPlugins(totalResource);\n \n     LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n \n     metrics.addResource(totalResource);\n \n     // Get actual node physical resources\n     long physicalMemoryMb \u003d memoryMb;\n     int physicalCores \u003d virtualCores;\n     ResourceCalculatorPlugin rcp \u003d\n         ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n     if (rcp !\u003d null) {\n       physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n       physicalCores \u003d rcp.getNumProcessors();\n     }\n     this.physicalResource \u003d\n         Resource.newInstance(physicalMemoryMb, physicalCores);\n \n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n \n     nodeLabelsHandler \u003d\n         createNMNodeLabelsHandler(nodeLabelsProvider);\n     nodeAttributesHandler \u003d\n         createNMNodeAttributesHandler(nodeAttributesProvider);\n \n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n+    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n+        timelineServiceV2Enabled(conf);\n+\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n    long memoryMb \u003d totalResource.getMemorySize();\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO,\n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n    int virtualCores \u003d totalResource.getVirtualCores();\n\n    // Update configured resources via plugins.\n    updateConfiguredResourcesViaPlugins(totalResource);\n\n    LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n\n    metrics.addResource(totalResource);\n\n    // Get actual node physical resources\n    long physicalMemoryMb \u003d memoryMb;\n    int physicalCores \u003d virtualCores;\n    ResourceCalculatorPlugin rcp \u003d\n        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n    if (rcp !\u003d null) {\n      physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n      physicalCores \u003d rcp.getNumProcessors();\n    }\n    this.physicalResource \u003d\n        Resource.newInstance(physicalMemoryMb, physicalCores);\n\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d\n        createNMNodeLabelsHandler(nodeLabelsProvider);\n    nodeAttributesHandler \u003d\n        createNMNodeAttributesHandler(nodeAttributesProvider);\n\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n    this.timelineServiceV2Enabled \u003d YarnConfiguration.\n        timelineServiceV2Enabled(conf);\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "3b3b6efe2103244febfe6b4f61989e92bd7bb08a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7871. Node attributes reporting from NM to RM. Contributed by Weiwei Yang.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "3b3b6efe2103244febfe6b4f61989e92bd7bb08a",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "2f7712be09d5b68978547f95b1be2352cdd46266",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,69 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n     long memoryMb \u003d totalResource.getMemorySize();\n     float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO,\n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n     int virtualCores \u003d totalResource.getVirtualCores();\n \n     // Update configured resources via plugins.\n     updateConfiguredResourcesViaPlugins(totalResource);\n \n     LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n \n     metrics.addResource(totalResource);\n \n     // Get actual node physical resources\n     long physicalMemoryMb \u003d memoryMb;\n     int physicalCores \u003d virtualCores;\n     ResourceCalculatorPlugin rcp \u003d\n         ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n     if (rcp !\u003d null) {\n       physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n       physicalCores \u003d rcp.getNumProcessors();\n     }\n     this.physicalResource \u003d\n         Resource.newInstance(physicalMemoryMb, physicalCores);\n \n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n \n-    nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n+    nodeLabelsHandler \u003d\n+        createNMNodeLabelsHandler(nodeLabelsProvider);\n+    nodeAttributesHandler \u003d\n+        createNMNodeAttributesHandler(nodeAttributesProvider);\n+\n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n    long memoryMb \u003d totalResource.getMemorySize();\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO,\n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n    int virtualCores \u003d totalResource.getVirtualCores();\n\n    // Update configured resources via plugins.\n    updateConfiguredResourcesViaPlugins(totalResource);\n\n    LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n\n    metrics.addResource(totalResource);\n\n    // Get actual node physical resources\n    long physicalMemoryMb \u003d memoryMb;\n    int physicalCores \u003d virtualCores;\n    ResourceCalculatorPlugin rcp \u003d\n        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n    if (rcp !\u003d null) {\n      physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n      physicalCores \u003d rcp.getNumProcessors();\n    }\n    this.physicalResource \u003d\n        Resource.newInstance(physicalMemoryMb, physicalCores);\n\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d\n        createNMNodeLabelsHandler(nodeLabelsProvider);\n    nodeAttributesHandler \u003d\n        createNMNodeAttributesHandler(nodeAttributesProvider);\n\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6620. Add support in NodeManager to isolate GPU devices by using CGroups. Contributed by Wangda Tan.\n",
      "commitDate": "11/10/17 11:14 AM",
      "commitName": "fa5cfc68f37c78b6cf26ce13247b9ff34da806cd",
      "commitAuthor": "Sunil G",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 29.08,
      "commitsBetweenForRepo": 269,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,65 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n     long memoryMb \u003d totalResource.getMemorySize();\n     float vMemToPMem \u003d\n         conf.getFloat(\n-            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n-            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n+            YarnConfiguration.NM_VMEM_PMEM_RATIO,\n+            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n     long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n-    \n     int virtualCores \u003d totalResource.getVirtualCores();\n-    LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n-    LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n-    LOG.info(\"Nodemanager resources: \" + totalResource);\n+\n+    // Update configured resources via plugins.\n+    updateConfiguredResourcesViaPlugins(totalResource);\n+\n+    LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n \n     metrics.addResource(totalResource);\n \n     // Get actual node physical resources\n     long physicalMemoryMb \u003d memoryMb;\n     int physicalCores \u003d virtualCores;\n     ResourceCalculatorPlugin rcp \u003d\n         ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n     if (rcp !\u003d null) {\n       physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n       physicalCores \u003d rcp.getNumProcessors();\n     }\n     this.physicalResource \u003d\n         Resource.newInstance(physicalMemoryMb, physicalCores);\n \n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n \n     nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n    long memoryMb \u003d totalResource.getMemorySize();\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO,\n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO);\n    long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n    int virtualCores \u003d totalResource.getVirtualCores();\n\n    // Update configured resources via plugins.\n    updateConfiguredResourcesViaPlugins(totalResource);\n\n    LOG.info(\"Nodemanager resources is set to: \" + totalResource);\n\n    metrics.addResource(totalResource);\n\n    // Get actual node physical resources\n    long physicalMemoryMb \u003d memoryMb;\n    int physicalCores \u003d virtualCores;\n    ResourceCalculatorPlugin rcp \u003d\n        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n    if (rcp !\u003d null) {\n      physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n      physicalCores \u003d rcp.getNumProcessors();\n    }\n    this.physicalResource \u003d\n        Resource.newInstance(physicalMemoryMb, physicalCores);\n\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "e490602e9b306d5b8a543b93fb15a7395bb9a03d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7039. Fix javac and javadoc errors in YARN-3926 branch. (Sunil G via wangda)\n\nChange-Id: I442bf6d838b3aba83f1f6779cf9dcf8596a2102d\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "e490602e9b306d5b8a543b93fb15a7395bb9a03d",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/09/17 9:19 AM",
      "commitNameOld": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,64 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n-    int memoryMb \u003d totalResource.getMemory();\n+    long memoryMb \u003d totalResource.getMemorySize();\n     float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n-    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n+    long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d totalResource.getVirtualCores();\n     LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n     LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n     LOG.info(\"Nodemanager resources: \" + totalResource);\n \n     metrics.addResource(totalResource);\n \n     // Get actual node physical resources\n-    int physicalMemoryMb \u003d memoryMb;\n+    long physicalMemoryMb \u003d memoryMb;\n     int physicalCores \u003d virtualCores;\n     ResourceCalculatorPlugin rcp \u003d\n         ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n     if (rcp !\u003d null) {\n-      physicalMemoryMb \u003d (int) (rcp.getPhysicalMemorySize() / (1024 * 1024));\n+      physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n       physicalCores \u003d rcp.getNumProcessors();\n     }\n     this.physicalResource \u003d\n         Resource.newInstance(physicalMemoryMb, physicalCores);\n \n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n \n     nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n    long memoryMb \u003d totalResource.getMemorySize();\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    long virtualMemoryMb \u003d (long)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d totalResource.getVirtualCores();\n    LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n    LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n    LOG.info(\"Nodemanager resources: \" + totalResource);\n\n    metrics.addResource(totalResource);\n\n    // Get actual node physical resources\n    long physicalMemoryMb \u003d memoryMb;\n    int physicalCores \u003d virtualCores;\n    ResourceCalculatorPlugin rcp \u003d\n        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n    if (rcp !\u003d null) {\n      physicalMemoryMb \u003d rcp.getPhysicalMemorySize() / (1024 * 1024);\n      physicalCores \u003d rcp.getNumProcessors();\n    }\n    this.physicalResource \u003d\n        Resource.newInstance(physicalMemoryMb, physicalCores);\n\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "759114b0063907d4c07ea6ee261e861bf5cc3a9a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4830. Add support for resource types in the nodemanager. Contributed by Varun Vasudev.\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "759114b0063907d4c07ea6ee261e861bf5cc3a9a",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "7594d1de7bbc34cd2e64202095a5e1757154d7d0",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.43,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    int memoryMb \u003d NodeManagerHardwareUtils.getContainerMemoryMB(conf);\n+    this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n+    int memoryMb \u003d totalResource.getMemory();\n     float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n-    int virtualCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n+    int virtualCores \u003d totalResource.getVirtualCores();\n     LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n     LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n+    LOG.info(\"Nodemanager resources: \" + totalResource);\n \n-    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n     metrics.addResource(totalResource);\n \n     // Get actual node physical resources\n     int physicalMemoryMb \u003d memoryMb;\n     int physicalCores \u003d virtualCores;\n     ResourceCalculatorPlugin rcp \u003d\n         ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n     if (rcp !\u003d null) {\n       physicalMemoryMb \u003d (int) (rcp.getPhysicalMemorySize() / (1024 * 1024));\n       physicalCores \u003d rcp.getNumProcessors();\n     }\n     this.physicalResource \u003d\n         Resource.newInstance(physicalMemoryMb, physicalCores);\n \n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n \n     nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.totalResource \u003d NodeManagerHardwareUtils.getNodeResources(conf);\n    int memoryMb \u003d totalResource.getMemory();\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d totalResource.getVirtualCores();\n    LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n    LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n    LOG.info(\"Nodemanager resources: \" + totalResource);\n\n    metrics.addResource(totalResource);\n\n    // Get actual node physical resources\n    int physicalMemoryMb \u003d memoryMb;\n    int physicalCores \u003d virtualCores;\n    ResourceCalculatorPlugin rcp \u003d\n        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n    if (rcp !\u003d null) {\n      physicalMemoryMb \u003d (int) (rcp.getPhysicalMemorySize() / (1024 * 1024));\n      physicalCores \u003d rcp.getNumProcessors();\n    }\n    this.physicalResource \u003d\n        Resource.newInstance(physicalMemoryMb, physicalCores);\n\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "3f93ac0733058238a2c8f23960c986c71dca0e02": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5356. NodeManager should communicate physical resource capability to ResourceManager. Contributed by Inigo Goiri\n",
      "commitDate": "08/11/16 2:01 PM",
      "commitName": "3f93ac0733058238a2c8f23960c986c71dca0e02",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "04/11/16 7:31 AM",
      "commitNameOld": "0aafc122d401a2f49d0f9ca556343f9ba871e979",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 4.31,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,63 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int memoryMb \u003d NodeManagerHardwareUtils.getContainerMemoryMB(conf);\n     float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n     LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n     LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n \n     this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n     metrics.addResource(totalResource);\n+\n+    // Get actual node physical resources\n+    int physicalMemoryMb \u003d memoryMb;\n+    int physicalCores \u003d virtualCores;\n+    ResourceCalculatorPlugin rcp \u003d\n+        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n+    if (rcp !\u003d null) {\n+      physicalMemoryMb \u003d (int) (rcp.getPhysicalMemorySize() / (1024 * 1024));\n+      physicalCores \u003d rcp.getNumProcessors();\n+    }\n+    this.physicalResource \u003d\n+        Resource.newInstance(physicalMemoryMb, physicalCores);\n+\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n \n     nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d NodeManagerHardwareUtils.getContainerMemoryMB(conf);\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n    LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n    LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n\n    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n    metrics.addResource(totalResource);\n\n    // Get actual node physical resources\n    int physicalMemoryMb \u003d memoryMb;\n    int physicalCores \u003d virtualCores;\n    ResourceCalculatorPlugin rcp \u003d\n        ResourceCalculatorPlugin.getNodeResourceMonitorPlugin(conf);\n    if (rcp !\u003d null) {\n      physicalMemoryMb \u003d (int) (rcp.getPhysicalMemorySize() / (1024 * 1024));\n      physicalCores \u003d rcp.getNumProcessors();\n    }\n    this.physicalResource \u003d\n        Resource.newInstance(physicalMemoryMb, physicalCores);\n\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "30ac69c6bd3db363248d6c742561371576006dab": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4176. Resync NM nodelabels with RM periodically for distributed nodelabels. (Bibin A Chundatt via wangda)\n",
      "commitDate": "05/10/15 3:47 PM",
      "commitName": "30ac69c6bd3db363248d6c742561371576006dab",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "02/10/15 6:50 PM",
      "commitNameOld": "8f08532bde153811368e1b8336446fba4743f9d2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 2.87,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,50 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int memoryMb \u003d NodeManagerHardwareUtils.getContainerMemoryMB(conf);\n     float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n     LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n     LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n \n     this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n-    \n+\n+    nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d NodeManagerHardwareUtils.getContainerMemoryMB(conf);\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n    LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n    LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n\n    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n\n    nodeLabelsHandler \u003d createNMNodeLabelsHandler(nodeLabelsProvider);\n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "500a1d9c76ec612b4e737888f4be79951c11591d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-160. Enhanced NodeManager to automatically obtain cpu/memory values from underlying OS when configured to do so. Contributed by Varun Vasudev.\n",
      "commitDate": "26/05/15 11:38 AM",
      "commitName": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/05/15 4:34 PM",
      "commitNameOld": "b37da52a1c4fb3da2bd21bfadc5ec61c5f953a59",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.79,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,49 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    int memoryMb \u003d \n-        conf.getInt(\n-            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n-    float vMemToPMem \u003d             \n+    int memoryMb \u003d NodeManagerHardwareUtils.getContainerMemoryMB(conf);\n+    float vMemToPMem \u003d\n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n-    int virtualCores \u003d\n-        conf.getInt(\n-            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n+    int virtualCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n+    LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n+    LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n \n     this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n     \n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d NodeManagerHardwareUtils.getContainerMemoryMB(conf);\n    float vMemToPMem \u003d\n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d NodeManagerHardwareUtils.getVCores(conf);\n    LOG.info(\"Nodemanager resources: memory set to \" + memoryMb + \"MB.\");\n    LOG.info(\"Nodemanager resources: vcores set to \" + virtualCores + \".\");\n\n    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n    \n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "5c2f05cd9bad9bf9beb0f4ca18f4ae1bc3e84499": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3629. NodeID is always printed as \"null\" in node manager\ninitialization log. Contributed by nijel.\n",
      "commitDate": "12/05/15 9:50 AM",
      "commitName": "5c2f05cd9bad9bf9beb0f4ca18f4ae1bc3e84499",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "10/04/15 8:56 AM",
      "commitNameOld": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 32.04,
      "commitsBetweenForRepo": 340,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n \n     this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n     \n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n-    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n+    LOG.info(\"Initialized nodemanager with :\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n \n     this.logAggregationEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n           YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n\n    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n    \n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager with :\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "92431c961741747b5d6442f4025016d48d9a6863": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1376. NM need to notify the log aggregation status to RM through Node heartbeat. Contributed by Xuan Gong.\n",
      "commitDate": "10/04/15 8:56 AM",
      "commitName": "92431c961741747b5d6442f4025016d48d9a6863",
      "commitAuthor": "Junping Du",
      "commitDateOld": "30/03/15 12:05 PM",
      "commitNameOld": "2a945d24f7de1a7ae6e7bd6636188ce3b55c7f52",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 10.87,
      "commitsBetweenForRepo": 105,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,51 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n \n     this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n     \n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n+\n+    this.logAggregationEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n+          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n\n    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n    \n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n\n    this.logAggregationEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n          YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "cfa783141fa69c2cf154d1d9e5393353d14ce5e1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1210. Changed RM to start new app-attempts on RM restart only after ensuring that previous AM exited or after expiry time. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543310 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/13 9:17 PM",
      "commitName": "cfa783141fa69c2cf154d1d9e5393353d14ce5e1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/10/13 5:54 PM",
      "commitNameOld": "defa7af4d3ef327c7c05807f640974e29c6d045b",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 21.18,
      "commitsBetweenForRepo": 114,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,47 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n \n-    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n-    this.totalResource.setMemory(memoryMb);\n-    this.totalResource.setVirtualCores(virtualCores);\n+    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n \n     this.minimumResourceManagerVersion \u003d conf.get(\n         YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n         YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n     \n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n\n    this.totalResource \u003d Resource.newInstance(memoryMb, virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n    \n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "5a15c392a1a18c5720dbe630bc07e58268c8e6a7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-819. ResourceManager and NodeManager should check for a minimum allowed version (Robert Parker via jeagles)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526660 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/13 12:55 PM",
      "commitName": "5a15c392a1a18c5720dbe630bc07e58268c8e6a7",
      "commitAuthor": "Jonathan Turner Eagles",
      "commitDateOld": "01/08/13 11:54 PM",
      "commitNameOld": "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 55.54,
      "commitsBetweenForRepo": 300,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,49 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n+\n+    this.minimumResourceManagerVersion \u003d conf.get(\n+        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n+        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n     \n     // Default duration to track stopped containers on nodemanager is 10Min.\n     // This should not be assigned very large value as it will remember all the\n     // containers stopped during that time.\n     durationToTrackStoppedContainers \u003d\n         conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n           600000);\n     if (durationToTrackStoppedContainers \u003c 0) {\n       String message \u003d \"Invalid configuration for \"\n         + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n           + \"value is 10Min(600000).\";\n       LOG.error(message);\n       throw new YarnException(message);\n     }\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n         + durationToTrackStoppedContainers);\n     }\n     super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n\n    this.minimumResourceManagerVersion \u003d conf.get(\n        YarnConfiguration.NM_RESOURCEMANAGER_MINIMUM_VERSION,\n        YarnConfiguration.DEFAULT_NM_RESOURCEMANAGER_MINIMUM_VERSION);\n    \n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-903. Changed ContainerManager to suppress unnecessary warnings when stopping already stopped containers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1509560 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/13 11:54 PM",
      "commitName": "5b7889f9a7dea81bbb3c8be6944419b59ca4bed1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/07/13 8:06 PM",
      "commitNameOld": "3ca892dc0a24f95e9bbd00d3235ca6eb6b7fc329",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.16,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,45 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n+    // Default duration to track stopped containers on nodemanager is 10Min.\n+    // This should not be assigned very large value as it will remember all the\n+    // containers stopped during that time.\n+    durationToTrackStoppedContainers \u003d\n+        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n+          600000);\n+    if (durationToTrackStoppedContainers \u003c 0) {\n+      String message \u003d \"Invalid configuration for \"\n+        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n+          + \"value is 10Min(600000).\";\n+      LOG.error(message);\n+      throw new YarnException(message);\n+    }\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n+        + durationToTrackStoppedContainers);\n+    }\n+    super.serviceInit(conf);\n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n-    \n-    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    // Default duration to track stopped containers on nodemanager is 10Min.\n    // This should not be assigned very large value as it will remember all the\n    // containers stopped during that time.\n    durationToTrackStoppedContainers \u003d\n        conf.getLong(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS,\n          600000);\n    if (durationToTrackStoppedContainers \u003c 0) {\n      String message \u003d \"Invalid configuration for \"\n        + YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" default \"\n          + \"value is 10Min(600000).\";\n      LOG.error(message);\n      throw new YarnException(message);\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(YARN_NODEMANAGER_DURATION_TO_TRACK_STOPPED_CONTAINERS + \" :\"\n        + durationToTrackStoppedContainers);\n    }\n    super.serviceInit(conf);\n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "33b5a81509ed08e88bb692682e75fb779f8e2e19": {
      "type": "Ybodychange",
      "commitMessage": "YARN-513. Create common proxy client for communicating with RM (Xuan Gong \u0026 Jian He via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1503933 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/13 3:47 PM",
      "commitName": "33b5a81509ed08e88bb692682e75fb779f8e2e19",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 29.67,
      "commitsBetweenForRepo": 156,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,29 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n-    this.rmAddress \u003d conf.getSocketAddr(\n-        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n-        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n-\n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int virtualCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" virtual-cores\u003d\" + virtualCores);\n     \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n    \n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "710a5eea62a9c49ebe2b795e9e44f8ab0706a606": {
      "type": "Ybodychange",
      "commitMessage": "YARN-782. vcores-pcores ratio functions differently from vmem-pmem ratio in misleading way. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493064 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 6:41 AM",
      "commitName": "710a5eea62a9c49ebe2b795e9e44f8ab0706a606",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/06/13 8:17 PM",
      "commitNameOld": "e9f753a11e2aebeb611ff6c85037628394c412c2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,34 @@\n   protected void serviceInit(Configuration conf) throws Exception {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n-    int cpuCores \u003d\n+    int virtualCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n-    float vCoresToPCores \u003d             \n-        conf.getFloat(\n-            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n-            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n-    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n-        \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n+        \" virtual-cores\u003d\" + virtualCores);\n     \n     super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int virtualCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" virtual-cores\u003d\" + virtualCores);\n    \n    super.serviceInit(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "0928502029ef141759008997335ea2cd836a7154": {
      "type": "Ymultichange(Yrename,Ymodifierchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 8:54 AM",
      "commitName": "0928502029ef141759008997335ea2cd836a7154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 9:20 AM",
          "commitNameOld": "a8c330fd338f755acc619aff88e55739d6ee0528",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int cpuCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n     float vCoresToPCores \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VCORES_PCORES_RATIO, \n             YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n     int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int cpuCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n    float vCoresToPCores \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "init",
            "newValue": "serviceInit"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 9:20 AM",
          "commitNameOld": "a8c330fd338f755acc619aff88e55739d6ee0528",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int cpuCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n     float vCoresToPCores \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VCORES_PCORES_RATIO, \n             YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n     int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int cpuCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n    float vCoresToPCores \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 9:20 AM",
          "commitNameOld": "a8c330fd338f755acc619aff88e55739d6ee0528",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int cpuCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n     float vCoresToPCores \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VCORES_PCORES_RATIO, \n             YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n     int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int cpuCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n    float vCoresToPCores \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[Exception]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-530. Defined Service model strictly, implemented AbstractService for robust subclassing and migrated yarn-common services. Contributed by Steve Loughran.\nYARN-117. Migrated rest of YARN to the new service model. Contributed by Steve Louhran.\nMAPREDUCE-5298. Moved MapReduce services to YARN-530 stricter lifecycle. Contributed by Steve Loughran.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492718 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/06/13 8:54 AM",
          "commitName": "0928502029ef141759008997335ea2cd836a7154",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "07/06/13 9:20 AM",
          "commitNameOld": "a8c330fd338f755acc619aff88e55739d6ee0528",
          "commitAuthorOld": "Jason Darrell Lowe",
          "daysBetweenCommits": 5.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,39 +1,39 @@\n-  public synchronized void init(Configuration conf) {\n+  protected void serviceInit(Configuration conf) throws Exception {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n \n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int cpuCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n     float vCoresToPCores \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VCORES_PCORES_RATIO, \n             YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n     int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n         \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n         \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n     \n-    super.init(conf);\n+    super.serviceInit(conf);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected void serviceInit(Configuration conf) throws Exception {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int cpuCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n    float vCoresToPCores \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n        \" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n        \" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n    \n    super.serviceInit(conf);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-309. Changed NodeManager to obtain heart-beat interval from the ResourceManager. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1463346 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/13 6:04 PM",
      "commitName": "7ca9fe73a0f5047ff0279f3e29a29c8447cbb81a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "26/03/13 11:20 AM",
      "commitNameOld": "66e90b205a079c7056bd85e6c5e3dbb2a96e7461",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 6.28,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,39 @@\n   public synchronized void init(Configuration conf) {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n-    this.heartBeatInterval \u003d\n-        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n-            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n+\n     int memoryMb \u003d \n         conf.getInt(\n             YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     float vMemToPMem \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VMEM_PMEM_RATIO, \n             YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n     int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n     \n     int cpuCores \u003d\n         conf.getInt(\n             YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n     float vCoresToPCores \u003d             \n         conf.getFloat(\n             YarnConfiguration.NM_VCORES_PCORES_RATIO, \n             YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n     int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n \n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     \n     LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n     \t\t\" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n     \t\t\" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n     \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int cpuCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n    float vCoresToPCores \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n    \t\t\" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n    \t\t\" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n    \n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/01/13 5:43 AM",
      "commitNameOld": "2cd41855d51fd18955a1ab187900ba02c6a6cfa9",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.64,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,41 @@\n   public synchronized void init(Configuration conf) {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n     this.heartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n-    int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n+    int memoryMb \u003d \n+        conf.getInt(\n+            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n+    float vMemToPMem \u003d             \n+        conf.getFloat(\n+            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n+            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n+    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n+    \n+    int cpuCores \u003d\n+        conf.getInt(\n+            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n+    float vCoresToPCores \u003d             \n+        conf.getFloat(\n+            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n+            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n+    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n+\n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n+    this.totalResource.setVirtualCores(virtualCores);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n+    \n+    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n+    \t\t\" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n+    \t\t\" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n+    \n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memoryMb \u003d \n        conf.getInt(\n            YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    float vMemToPMem \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VMEM_PMEM_RATIO, \n            YarnConfiguration.DEFAULT_NM_VMEM_PMEM_RATIO); \n    int virtualMemoryMb \u003d (int)Math.ceil(memoryMb * vMemToPMem);\n    \n    int cpuCores \u003d\n        conf.getInt(\n            YarnConfiguration.NM_VCORES, YarnConfiguration.DEFAULT_NM_VCORES);\n    float vCoresToPCores \u003d             \n        conf.getFloat(\n            YarnConfiguration.NM_VCORES_PCORES_RATIO, \n            YarnConfiguration.DEFAULT_NM_VCORES_PCORES_RATIO); \n    int virtualCores \u003d (int)Math.ceil(cpuCores * vCoresToPCores); \n\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    this.totalResource.setVirtualCores(virtualCores);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    \n    LOG.info(\"Initialized nodemanager for \" + nodeId + \":\" +\n    \t\t\" physical-memory\u003d\" + memoryMb + \" virtual-memory\u003d\" + virtualMemoryMb +\n    \t\t\" physical-cores\u003d\" + cpuCores + \" virtual-cores\u003d\" + virtualCores);\n    \n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "45a8e8c5a46535287de97fd6609c0743eef888ee": {
      "type": "Ybodychange",
      "commitMessage": "YARN-60. Fixed a bug in ResourceManager which causes all NMs to get NPEs and thus causes all containers to be rejected. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1379550 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/08/12 12:11 PM",
      "commitName": "45a8e8c5a46535287de97fd6609c0743eef888ee",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/08/12 7:18 PM",
      "commitNameOld": "ffd2e01604be814fa3db1dded7cd7cff26a79b1e",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 6.7,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,18 @@\n   public synchronized void init(Configuration conf) {\n     this.rmAddress \u003d conf.getSocketAddr(\n         YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n         YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n     this.heartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n     int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     metrics.addResource(totalResource);\n-    this.tokenKeepAliveEnabled \u003d\n-        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n-            YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)\n-            \u0026\u0026 isSecurityEnabled();\n+    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d isTokenKeepAliveEnabled(conf);\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n            YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)\n            \u0026\u0026 isSecurityEnabled();\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    super.init(conf);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
      }
    },
    "32d511065a2612d37591f09e53eed8ec1488587d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4161. create sockets consistently (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327621 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/12 11:46 AM",
      "commitName": "32d511065a2612d37591f09e53eed8ec1488587d",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "05/03/12 4:52 PM",
      "commitNameOld": "b9fd9e17598c606d0acd54a68b4693f482ffb3ac",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 43.75,
      "commitsBetweenForRepo": 316,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   public synchronized void init(Configuration conf) {\n-    this.rmAddress \u003d\n-        conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n-            YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n+    this.rmAddress \u003d conf.getSocketAddr(\n+        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n+        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n     this.heartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n     int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     metrics.addResource(totalResource);\n     this.tokenKeepAliveEnabled \u003d\n         conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n             YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)\n             \u0026\u0026 isSecurityEnabled();\n     this.tokenRemovalDelayMs \u003d\n         conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d conf.getSocketAddr(\n        YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS,\n        YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_PORT);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n            YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)\n            \u0026\u0026 isSecurityEnabled();\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3398. Fixed log aggregation to work correctly in secure mode. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1214429 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/12/11 11:55 AM",
      "commitName": "50fa9b89f42bd3fe6aad5086b0df14a00dadb24b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/11/11 3:17 PM",
      "commitNameOld": "ea17da82f7fc4b7fcc05bba82d141e27289fd7cb",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 14.86,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,20 @@\n   public synchronized void init(Configuration conf) {\n     this.rmAddress \u003d\n         conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n     this.heartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n     int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memoryMb);\n     metrics.addResource(totalResource);\n+    this.tokenKeepAliveEnabled \u003d\n+        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n+            YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)\n+            \u0026\u0026 isSecurityEnabled();\n+    this.tokenRemovalDelayMs \u003d\n+        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    metrics.addResource(totalResource);\n    this.tokenKeepAliveEnabled \u003d\n        conf.getBoolean(YarnConfiguration.LOG_AGGREGATION_ENABLED,\n            YarnConfiguration.DEFAULT_LOG_AGGREGATION_ENABLED)\n            \u0026\u0026 isSecurityEnabled();\n    this.tokenRemovalDelayMs \u003d\n        conf.getInt(YarnConfiguration.RM_NM_EXPIRY_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_RM_NM_EXPIRY_INTERVAL_MS);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "237154982bd5853c6a374cb265520e0602adc52f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3205. Fix memory specifications to be physical rather than virtual, allowing for a ratio between the two to be configurable. Contributed by Todd Lipcon. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1189542 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/10/11 4:58 PM",
      "commitName": "237154982bd5853c6a374cb265520e0602adc52f",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "21/10/11 2:36 PM",
      "commitNameOld": "4186121c08cb3d86f775d333c637459a4fb19d1b",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public synchronized void init(Configuration conf) {\n     this.rmAddress \u003d\n         conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n             YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n     this.heartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n-    int memory \u003d conf.getInt(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n+    int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n-    this.totalResource.setMemory(memory * 1024);\n+    this.totalResource.setMemory(memoryMb);\n     metrics.addResource(totalResource);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memoryMb \u003d conf.getInt(YarnConfiguration.NM_PMEM_MB, YarnConfiguration.DEFAULT_NM_PMEM_MB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memoryMb);\n    metrics.addResource(totalResource);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "ed7eda00cb1f509ebe7f967cb65bdb1ece06334c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3066. Fixed default ResourceTracker address for the NodeManager. Contributed by Chris Riccomini.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173904 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 4:32 PM",
      "commitName": "ed7eda00cb1f509ebe7f967cb65bdb1ece06334c",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/09/11 12:11 AM",
      "commitNameOld": "6b2f2efe4de4e709a2b9c64b7b3b3138e1939668",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public synchronized void init(Configuration conf) {\n     this.rmAddress \u003d\n         conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n-            YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n+            YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n     this.heartBeatInterval \u003d\n         conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n             YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n     int memory \u003d conf.getInt(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memory * 1024);\n     metrics.addResource(totalResource);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n            YarnConfiguration.DEFAULT_RM_RESOURCE_TRACKER_ADDRESS);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memory \u003d conf.getInt(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memory * 1024);\n    metrics.addResource(totalResource);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "fafe8cd28e726566509c679e19d7da622f29f90d": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2864. Normalize configuration variable names for YARN. Contributed by Robert Evans.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1166955 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/09/11 6:44 PM",
      "commitName": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 86,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   public synchronized void init(Configuration conf) {\n     this.rmAddress \u003d\n-        conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n-            YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n+        conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n+            YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n     this.heartBeatInterval \u003d\n-        conf.getLong(NMConfig.HEARTBEAT_INTERVAL,\n-            NMConfig.DEFAULT_HEARTBEAT_INTERVAL);\n-    int memory \u003d conf.getInt(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n+        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n+            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n+    int memory \u003d conf.getInt(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n     this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n     this.totalResource.setMemory(memory * 1024);\n     metrics.addResource(totalResource);\n     super.init(conf);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d\n        conf.get(YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS,\n            YarnConfiguration.RM_RESOURCE_TRACKER_ADDRESS);\n    this.heartBeatInterval \u003d\n        conf.getLong(YarnConfiguration.NM_TO_RM_HEARTBEAT_INTERVAL_MS,\n            YarnConfiguration.DEFAULT_NM_TO_RM_HEARTBEAT_INTERVAL_MS);\n    int memory \u003d conf.getInt(YarnConfiguration.NM_VMEM_GB, YarnConfiguration.DEFAULT_NM_VMEM_GB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memory * 1024);\n    metrics.addResource(totalResource);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d\n        conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n            YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n    this.heartBeatInterval \u003d\n        conf.getLong(NMConfig.HEARTBEAT_INTERVAL,\n            NMConfig.DEFAULT_HEARTBEAT_INTERVAL);\n    int memory \u003d conf.getInt(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memory * 1024);\n    metrics.addResource(totalResource);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,13 @@\n+  public synchronized void init(Configuration conf) {\n+    this.rmAddress \u003d\n+        conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n+            YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n+    this.heartBeatInterval \u003d\n+        conf.getLong(NMConfig.HEARTBEAT_INTERVAL,\n+            NMConfig.DEFAULT_HEARTBEAT_INTERVAL);\n+    int memory \u003d conf.getInt(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n+    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n+    this.totalResource.setMemory(memory * 1024);\n+    metrics.addResource(totalResource);\n+    super.init(conf);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void init(Configuration conf) {\n    this.rmAddress \u003d\n        conf.get(YarnServerConfig.RESOURCETRACKER_ADDRESS,\n            YarnServerConfig.DEFAULT_RESOURCETRACKER_BIND_ADDRESS);\n    this.heartBeatInterval \u003d\n        conf.getLong(NMConfig.HEARTBEAT_INTERVAL,\n            NMConfig.DEFAULT_HEARTBEAT_INTERVAL);\n    int memory \u003d conf.getInt(NMConfig.NM_VMEM_GB, NMConfig.DEFAULT_NM_VMEM_GB);\n    this.totalResource \u003d recordFactory.newRecordInstance(Resource.class);\n    this.totalResource.setMemory(memory * 1024);\n    metrics.addResource(totalResource);\n    super.init(conf);\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/NodeStatusUpdaterImpl.java"
    }
  }
}