{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "PlacementConstraintsUtil.java",
  "functionName": "getNodeConstraintEvaluatedResult",
  "functionId": "getNodeConstraintEvaluatedResult___schedulerNode-SchedulerNode__opCode-NodeAttributeOpCode__requestAttribute-NodeAttribute",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
  "functionStartLine": 149,
  "functionEndLine": 196,
  "numCommitsSeen": 19,
  "timeTaken": 1564,
  "changeHistory": [
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "52194351e7df33b8438569c3a032f73d696c534d"
  ],
  "changeHistoryShort": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "52194351e7df33b8438569c3a032f73d696c534d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 2.78,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,48 @@\n   private static boolean getNodeConstraintEvaluatedResult(\n       SchedulerNode schedulerNode,\n       NodeAttributeOpCode opCode, NodeAttribute requestAttribute) {\n     // In case, attributes in a node is empty or incoming attributes doesn\u0027t\n     // exist on given node, accept such nodes for scheduling if opCode is\n     // equals to NE. (for eg. java !\u003d 1.8 could be scheduled on a node\n     // where java is not configured.)\n     if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n         !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n       if (opCode \u003d\u003d NodeAttributeOpCode.NE) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n-              + \"is not present in \" + schedulerNode.getNodeID()\n-              + \", however opcode is NE. Hence accept this node.\");\n-        }\n+        LOG.debug(\"Incoming requestAttribute:{} is not present in {},\"\n+            + \" however opcode is NE. Hence accept this node.\",\n+            requestAttribute, schedulerNode.getNodeID());\n         return true;\n       }\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n-            + \"is not present in \" + schedulerNode.getNodeID()\n-            + \", skip such node.\");\n-      }\n+      LOG.debug(\"Incoming requestAttribute:{} is not present in {},\"\n+          + \" skip such node.\", requestAttribute, schedulerNode.getNodeID());\n       return false;\n     }\n \n     boolean found \u003d false;\n     for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n         .iterator(); it.hasNext();) {\n       NodeAttribute nodeAttribute \u003d it.next();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n             + requestAttribute\n             + \" with requestAttribute value\u003d \" + requestAttribute\n             .getAttributeValue()\n             + \", stored nodeAttribute value\u003d\" + nodeAttribute\n             .getAttributeValue());\n       }\n       if (requestAttribute.equals(nodeAttribute)) {\n         if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\n-                \"Incoming requestAttribute:\" + requestAttribute\n-                    + \" matches with node:\" + schedulerNode.getNodeID());\n-          }\n+          LOG.debug(\"Incoming requestAttribute:{} matches with node:{}\",\n+              requestAttribute, schedulerNode.getNodeID());\n           found \u003d true;\n           return found;\n         }\n       }\n     }\n     if (!found) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n-            + \" for requestAttribute:\" + requestAttribute);\n-      }\n+      LOG.debug(\"skip this node:{} for requestAttribute:{}\",\n+          schedulerNode.getNodeID(), requestAttribute);\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean getNodeConstraintEvaluatedResult(\n      SchedulerNode schedulerNode,\n      NodeAttributeOpCode opCode, NodeAttribute requestAttribute) {\n    // In case, attributes in a node is empty or incoming attributes doesn\u0027t\n    // exist on given node, accept such nodes for scheduling if opCode is\n    // equals to NE. (for eg. java !\u003d 1.8 could be scheduled on a node\n    // where java is not configured.)\n    if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n        !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n      if (opCode \u003d\u003d NodeAttributeOpCode.NE) {\n        LOG.debug(\"Incoming requestAttribute:{} is not present in {},\"\n            + \" however opcode is NE. Hence accept this node.\",\n            requestAttribute, schedulerNode.getNodeID());\n        return true;\n      }\n      LOG.debug(\"Incoming requestAttribute:{} is not present in {},\"\n          + \" skip such node.\", requestAttribute, schedulerNode.getNodeID());\n      return false;\n    }\n\n    boolean found \u003d false;\n    for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n        .iterator(); it.hasNext();) {\n      NodeAttribute nodeAttribute \u003d it.next();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n            + requestAttribute\n            + \" with requestAttribute value\u003d \" + requestAttribute\n            .getAttributeValue()\n            + \", stored nodeAttribute value\u003d\" + nodeAttribute\n            .getAttributeValue());\n      }\n      if (requestAttribute.equals(nodeAttribute)) {\n        if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n          LOG.debug(\"Incoming requestAttribute:{} matches with node:{}\",\n              requestAttribute, schedulerNode.getNodeID());\n          found \u003d true;\n          return found;\n        }\n      }\n    }\n    if (!found) {\n      LOG.debug(\"skip this node:{} for requestAttribute:{}\",\n          schedulerNode.getNodeID(), requestAttribute);\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java",
      "extendedDetails": {}
    },
    "52194351e7df33b8438569c3a032f73d696c534d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8721. Relax NE node-attribute check when attribute doesn\u0027t exist on a node. Contributed by Sunil Govindan.\n",
      "commitDate": "12/09/18 3:31 AM",
      "commitName": "52194351e7df33b8438569c3a032f73d696c534d",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,58 @@\n+  private static boolean getNodeConstraintEvaluatedResult(\n+      SchedulerNode schedulerNode,\n+      NodeAttributeOpCode opCode, NodeAttribute requestAttribute) {\n+    // In case, attributes in a node is empty or incoming attributes doesn\u0027t\n+    // exist on given node, accept such nodes for scheduling if opCode is\n+    // equals to NE. (for eg. java !\u003d 1.8 could be scheduled on a node\n+    // where java is not configured.)\n+    if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n+        !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n+      if (opCode \u003d\u003d NodeAttributeOpCode.NE) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n+              + \"is not present in \" + schedulerNode.getNodeID()\n+              + \", however opcode is NE. Hence accept this node.\");\n+        }\n+        return true;\n+      }\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n+            + \"is not present in \" + schedulerNode.getNodeID()\n+            + \", skip such node.\");\n+      }\n+      return false;\n+    }\n+\n+    boolean found \u003d false;\n+    for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n+        .iterator(); it.hasNext();) {\n+      NodeAttribute nodeAttribute \u003d it.next();\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n+            + requestAttribute\n+            + \" with requestAttribute value\u003d \" + requestAttribute\n+            .getAttributeValue()\n+            + \", stored nodeAttribute value\u003d\" + nodeAttribute\n+            .getAttributeValue());\n+      }\n+      if (requestAttribute.equals(nodeAttribute)) {\n+        if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\n+                \"Incoming requestAttribute:\" + requestAttribute\n+                    + \" matches with node:\" + schedulerNode.getNodeID());\n+          }\n+          found \u003d true;\n+          return found;\n+        }\n+      }\n+    }\n+    if (!found) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n+            + \" for requestAttribute:\" + requestAttribute);\n+      }\n+      return false;\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean getNodeConstraintEvaluatedResult(\n      SchedulerNode schedulerNode,\n      NodeAttributeOpCode opCode, NodeAttribute requestAttribute) {\n    // In case, attributes in a node is empty or incoming attributes doesn\u0027t\n    // exist on given node, accept such nodes for scheduling if opCode is\n    // equals to NE. (for eg. java !\u003d 1.8 could be scheduled on a node\n    // where java is not configured.)\n    if (schedulerNode.getNodeAttributes() \u003d\u003d null ||\n        !schedulerNode.getNodeAttributes().contains(requestAttribute)) {\n      if (opCode \u003d\u003d NodeAttributeOpCode.NE) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n              + \"is not present in \" + schedulerNode.getNodeID()\n              + \", however opcode is NE. Hence accept this node.\");\n        }\n        return true;\n      }\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Incoming requestAttribute:\" + requestAttribute\n            + \"is not present in \" + schedulerNode.getNodeID()\n            + \", skip such node.\");\n      }\n      return false;\n    }\n\n    boolean found \u003d false;\n    for (Iterator\u003cNodeAttribute\u003e it \u003d schedulerNode.getNodeAttributes()\n        .iterator(); it.hasNext();) {\n      NodeAttribute nodeAttribute \u003d it.next();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Starting to compare Incoming requestAttribute :\"\n            + requestAttribute\n            + \" with requestAttribute value\u003d \" + requestAttribute\n            .getAttributeValue()\n            + \", stored nodeAttribute value\u003d\" + nodeAttribute\n            .getAttributeValue());\n      }\n      if (requestAttribute.equals(nodeAttribute)) {\n        if (isOpCodeMatches(requestAttribute, nodeAttribute, opCode)) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\n                \"Incoming requestAttribute:\" + requestAttribute\n                    + \" matches with node:\" + schedulerNode.getNodeID());\n          }\n          found \u003d true;\n          return found;\n        }\n      }\n    }\n    if (!found) {\n      if (LOG.isDebugEnabled()) {\n        LOG.info(\"skip this node:\" + schedulerNode.getNodeID()\n            + \" for requestAttribute:\" + requestAttribute);\n      }\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/PlacementConstraintsUtil.java"
    }
  }
}