{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SLSWebApp.java",
  "functionName": "start",
  "functionId": "start",
  "sourceFilePath": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
  "functionStartLine": 125,
  "functionEndLine": 177,
  "numCommitsSeen": 10,
  "timeTaken": 1457,
  "changeHistory": [
    "7e075a50e37a24399bdae413349762f556293da3",
    "1598fd3b7948b3592775e3be3227c4a336122bc9",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b"
  ],
  "changeHistoryShort": {
    "7e075a50e37a24399bdae413349762f556293da3": "Ybodychange",
    "1598fd3b7948b3592775e3be3227c4a336122bc9": "Ybodychange",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ybodychange",
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7e075a50e37a24399bdae413349762f556293da3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6365. Get static SLS html resources from classpath. Contributed by Yufei Gu.\n",
      "commitDate": "19/04/17 11:08 AM",
      "commitName": "7e075a50e37a24399bdae413349762f556293da3",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "29/03/17 4:18 PM",
      "commitNameOld": "6a5516c2381f107d96b8326939514de3c6e53d3d",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 20.79,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public void start() throws Exception {\n-    // static files\n     final ResourceHandler staticHandler \u003d new ResourceHandler();\n     staticHandler.setMimeTypes(new MimeTypes());\n-    staticHandler.setResourceBase(\"html\");\n+    String webRootDir \u003d getClass().getClassLoader().getResource(\"html\").\n+        toExternalForm();\n+    staticHandler.setResourceBase(webRootDir);\n \n     Handler handler \u003d new AbstractHandler() {\n       @Override\n       public void handle(String target, Request baseRequest,\n                          HttpServletRequest request,\n                          HttpServletResponse response)\n           throws IOException, ServletException {\n         try{\n           // timeunit\n           int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n           String timeunitLabel \u003d \"second\";\n           if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                   request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n             timeunit \u003d 1000 * 60;\n             timeunitLabel \u003d \"minute\";\n           }\n \n           // http request\n           if (target.equals(\"/\")) {\n             printPageIndex(request, response);\n           } else if (target.equals(\"/simulate\")) {\n             printPageSimulate(request, response, timeunit, timeunitLabel);\n           } else if (target.equals(\"/track\")) {\n             printPageTrack(request, response, timeunit, timeunitLabel);\n           } else\n             // js/css request\n             if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n               response.setCharacterEncoding(\"utf-8\");\n               staticHandler.handle(target, baseRequest, request, response);\n             } else\n               // json request\n               if (target.equals(\"/simulateMetrics\")) {\n                 printJsonMetrics(request, response);\n               } else if (target.equals(\"/trackMetrics\")) {\n                 printJsonTrack(request, response);\n               }\n         } catch (Exception e) {\n           e.printStackTrace();\n         }\n       }\n     };\n \n     server \u003d new Server(port);\n     server.setHandler(handler);\n \n     server.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() throws Exception {\n    final ResourceHandler staticHandler \u003d new ResourceHandler();\n    staticHandler.setMimeTypes(new MimeTypes());\n    String webRootDir \u003d getClass().getClassLoader().getResource(\"html\").\n        toExternalForm();\n    staticHandler.setResourceBase(webRootDir);\n\n    Handler handler \u003d new AbstractHandler() {\n      @Override\n      public void handle(String target, Request baseRequest,\n                         HttpServletRequest request,\n                         HttpServletResponse response)\n          throws IOException, ServletException {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, baseRequest, request, response);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    };\n\n    server \u003d new Server(port);\n    server.setHandler(handler);\n\n    server.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
      "extendedDetails": {}
    },
    "1598fd3b7948b3592775e3be3227c4a336122bc9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6275. Fail to show real-time tracking charts in SLS (yufeigu via rkanter)\n",
      "commitDate": "07/03/17 1:47 PM",
      "commitName": "1598fd3b7948b3592775e3be3227c4a336122bc9",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "27/10/16 4:09 PM",
      "commitNameOld": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 130.94,
      "commitsBetweenForRepo": 756,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,52 @@\n   public void start() throws Exception {\n     // static files\n     final ResourceHandler staticHandler \u003d new ResourceHandler();\n+    staticHandler.setMimeTypes(new MimeTypes());\n     staticHandler.setResourceBase(\"html\");\n \n     Handler handler \u003d new AbstractHandler() {\n       @Override\n       public void handle(String target, Request baseRequest,\n                          HttpServletRequest request,\n                          HttpServletResponse response)\n           throws IOException, ServletException {\n         try{\n           // timeunit\n           int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n           String timeunitLabel \u003d \"second\";\n           if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                   request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n             timeunit \u003d 1000 * 60;\n             timeunitLabel \u003d \"minute\";\n           }\n \n           // http request\n           if (target.equals(\"/\")) {\n             printPageIndex(request, response);\n           } else if (target.equals(\"/simulate\")) {\n             printPageSimulate(request, response, timeunit, timeunitLabel);\n           } else if (target.equals(\"/track\")) {\n             printPageTrack(request, response, timeunit, timeunitLabel);\n           } else\n             // js/css request\n             if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n               response.setCharacterEncoding(\"utf-8\");\n               staticHandler.handle(target, baseRequest, request, response);\n             } else\n               // json request\n               if (target.equals(\"/simulateMetrics\")) {\n                 printJsonMetrics(request, response);\n               } else if (target.equals(\"/trackMetrics\")) {\n                 printJsonTrack(request, response);\n               }\n         } catch (Exception e) {\n           e.printStackTrace();\n         }\n       }\n     };\n \n     server \u003d new Server(port);\n     server.setHandler(handler);\n \n     server.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() throws Exception {\n    // static files\n    final ResourceHandler staticHandler \u003d new ResourceHandler();\n    staticHandler.setMimeTypes(new MimeTypes());\n    staticHandler.setResourceBase(\"html\");\n\n    Handler handler \u003d new AbstractHandler() {\n      @Override\n      public void handle(String target, Request baseRequest,\n                         HttpServletRequest request,\n                         HttpServletResponse response)\n          throws IOException, ServletException {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, baseRequest, request, response);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    };\n\n    server \u003d new Server(port);\n    server.setHandler(handler);\n\n    server.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
      "extendedDetails": {}
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "30/04/15 3:34 AM",
      "commitNameOld": "f384a063a653b33d69f7d2c7d4fd45c24b5aa46a",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 546.52,
      "commitsBetweenForRepo": 4082,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,51 @@\n   public void start() throws Exception {\n     // static files\n     final ResourceHandler staticHandler \u003d new ResourceHandler();\n     staticHandler.setResourceBase(\"html\");\n \n     Handler handler \u003d new AbstractHandler() {\n       @Override\n-      public void handle(String target, HttpServletRequest request,\n-                         HttpServletResponse response, int dispatch) {\n+      public void handle(String target, Request baseRequest,\n+                         HttpServletRequest request,\n+                         HttpServletResponse response)\n+          throws IOException, ServletException {\n         try{\n           // timeunit\n           int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n           String timeunitLabel \u003d \"second\";\n           if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                   request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n             timeunit \u003d 1000 * 60;\n             timeunitLabel \u003d \"minute\";\n           }\n \n           // http request\n           if (target.equals(\"/\")) {\n             printPageIndex(request, response);\n           } else if (target.equals(\"/simulate\")) {\n             printPageSimulate(request, response, timeunit, timeunitLabel);\n           } else if (target.equals(\"/track\")) {\n             printPageTrack(request, response, timeunit, timeunitLabel);\n           } else\n             // js/css request\n             if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n               response.setCharacterEncoding(\"utf-8\");\n-              staticHandler.handle(target, request, response, dispatch);\n+              staticHandler.handle(target, baseRequest, request, response);\n             } else\n               // json request\n               if (target.equals(\"/simulateMetrics\")) {\n                 printJsonMetrics(request, response);\n               } else if (target.equals(\"/trackMetrics\")) {\n                 printJsonTrack(request, response);\n               }\n         } catch (Exception e) {\n           e.printStackTrace();\n         }\n       }\n     };\n \n     server \u003d new Server(port);\n     server.setHandler(handler);\n \n     server.start();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() throws Exception {\n    // static files\n    final ResourceHandler staticHandler \u003d new ResourceHandler();\n    staticHandler.setResourceBase(\"html\");\n\n    Handler handler \u003d new AbstractHandler() {\n      @Override\n      public void handle(String target, Request baseRequest,\n                         HttpServletRequest request,\n                         HttpServletResponse response)\n          throws IOException, ServletException {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, baseRequest, request, response);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    };\n\n    server \u003d new Server(port);\n    server.setHandler(handler);\n\n    server.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java",
      "extendedDetails": {}
    },
    "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1021. Yarn Scheduler Load Simulator. (ywskycn via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1527059 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 1:23 PM",
      "commitName": "58b08e11b9f04c9190ab4a07473f0ee04e01ec6b",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,49 @@\n+  public void start() throws Exception {\n+    // static files\n+    final ResourceHandler staticHandler \u003d new ResourceHandler();\n+    staticHandler.setResourceBase(\"html\");\n+\n+    Handler handler \u003d new AbstractHandler() {\n+      @Override\n+      public void handle(String target, HttpServletRequest request,\n+                         HttpServletResponse response, int dispatch) {\n+        try{\n+          // timeunit\n+          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n+          String timeunitLabel \u003d \"second\";\n+          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n+                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n+            timeunit \u003d 1000 * 60;\n+            timeunitLabel \u003d \"minute\";\n+          }\n+\n+          // http request\n+          if (target.equals(\"/\")) {\n+            printPageIndex(request, response);\n+          } else if (target.equals(\"/simulate\")) {\n+            printPageSimulate(request, response, timeunit, timeunitLabel);\n+          } else if (target.equals(\"/track\")) {\n+            printPageTrack(request, response, timeunit, timeunitLabel);\n+          } else\n+            // js/css request\n+            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n+              response.setCharacterEncoding(\"utf-8\");\n+              staticHandler.handle(target, request, response, dispatch);\n+            } else\n+              // json request\n+              if (target.equals(\"/simulateMetrics\")) {\n+                printJsonMetrics(request, response);\n+              } else if (target.equals(\"/trackMetrics\")) {\n+                printJsonTrack(request, response);\n+              }\n+        } catch (Exception e) {\n+          e.printStackTrace();\n+        }\n+      }\n+    };\n+\n+    server \u003d new Server(port);\n+    server.setHandler(handler);\n+\n+    server.start();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void start() throws Exception {\n    // static files\n    final ResourceHandler staticHandler \u003d new ResourceHandler();\n    staticHandler.setResourceBase(\"html\");\n\n    Handler handler \u003d new AbstractHandler() {\n      @Override\n      public void handle(String target, HttpServletRequest request,\n                         HttpServletResponse response, int dispatch) {\n        try{\n          // timeunit\n          int timeunit \u003d 1000;   // second, divide millionsecond / 1000\n          String timeunitLabel \u003d \"second\";\n          if (request.getParameter(\"u\")!\u003d null \u0026\u0026\n                  request.getParameter(\"u\").equalsIgnoreCase(\"m\")) {\n            timeunit \u003d 1000 * 60;\n            timeunitLabel \u003d \"minute\";\n          }\n\n          // http request\n          if (target.equals(\"/\")) {\n            printPageIndex(request, response);\n          } else if (target.equals(\"/simulate\")) {\n            printPageSimulate(request, response, timeunit, timeunitLabel);\n          } else if (target.equals(\"/track\")) {\n            printPageTrack(request, response, timeunit, timeunitLabel);\n          } else\n            // js/css request\n            if (target.startsWith(\"/js\") || target.startsWith(\"/css\")) {\n              response.setCharacterEncoding(\"utf-8\");\n              staticHandler.handle(target, request, response, dispatch);\n            } else\n              // json request\n              if (target.equals(\"/simulateMetrics\")) {\n                printJsonMetrics(request, response);\n              } else if (target.equals(\"/trackMetrics\")) {\n                printJsonTrack(request, response);\n              }\n        } catch (Exception e) {\n          e.printStackTrace();\n        }\n      }\n    };\n\n    server \u003d new Server(port);\n    server.setHandler(handler);\n\n    server.start();\n  }",
      "path": "hadoop-tools/hadoop-sls/src/main/java/org/apache/hadoop/yarn/sls/web/SLSWebApp.java"
    }
  }
}