{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "updateDemand",
  "functionId": "updateDemand",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 1351,
  "functionEndLine": 1367,
  "numCommitsSeen": 76,
  "timeTaken": 4055,
  "changeHistory": [
    "87590090c887829e874a7132be9cf8de061437d6",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "6d043aa4cf14bc88b1a19991e3bb0752499312b8",
    "5205a330b387d2e133ee790b9fe7d5af3cd8bccc",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "87590090c887829e874a7132be9cf8de061437d6": "Ybodychange",
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ybodychange",
    "6d043aa4cf14bc88b1a19991e3bb0752499312b8": "Ybodychange",
    "5205a330b387d2e133ee790b9fe7d5af3cd8bccc": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "87590090c887829e874a7132be9cf8de061437d6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6582. FSAppAttempt demand can be updated atomically in updateDemand(). (Karthik Kambatla via Yufei Gu)\n",
      "commitDate": "25/05/17 2:22 PM",
      "commitName": "87590090c887829e874a7132be9cf8de061437d6",
      "commitAuthor": "Yufei Gu",
      "commitDateOld": "11/05/17 1:47 PM",
      "commitNameOld": "90cb5b4635b7a0849912458afad052f569131a59",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 14.02,
      "commitsBetweenForRepo": 71,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,17 @@\n   public void updateDemand() {\n-    demand \u003d Resources.createResource(0);\n     // Demand is current consumption plus outstanding requests\n-    Resources.addTo(demand, getCurrentConsumption());\n+    Resource tmpDemand \u003d Resources.clone(getCurrentConsumption());\n \n     // Add up outstanding resource requests\n-    try {\n-      writeLock.lock();\n-      for (SchedulerRequestKey k : getSchedulerKeys()) {\n-        PendingAsk pendingAsk \u003d getPendingAsk(k, ResourceRequest.ANY);\n-        if (pendingAsk.getCount() \u003e 0) {\n-          Resources.multiplyAndAddTo(demand,\n-              pendingAsk.getPerAllocationResource(),\n-              pendingAsk.getCount());\n-        }\n+    for (SchedulerRequestKey k : getSchedulerKeys()) {\n+      PendingAsk pendingAsk \u003d getPendingAsk(k, ResourceRequest.ANY);\n+      if (pendingAsk.getCount() \u003e 0) {\n+        Resources.multiplyAndAddTo(tmpDemand,\n+            pendingAsk.getPerAllocationResource(),\n+            pendingAsk.getCount());\n       }\n-    } finally {\n-      writeLock.unlock();\n     }\n+\n+    // Update demand\n+    demand \u003d tmpDemand;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    // Demand is current consumption plus outstanding requests\n    Resource tmpDemand \u003d Resources.clone(getCurrentConsumption());\n\n    // Add up outstanding resource requests\n    for (SchedulerRequestKey k : getSchedulerKeys()) {\n      PendingAsk pendingAsk \u003d getPendingAsk(k, ResourceRequest.ANY);\n      if (pendingAsk.getCount() \u003e 0) {\n        Resources.multiplyAndAddTo(tmpDemand,\n            pendingAsk.getPerAllocationResource(),\n            pendingAsk.getCount());\n      }\n    }\n\n    // Update demand\n    demand \u003d tmpDemand;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "2977bc6a141041ef7579efc416e93fc55e0c2a1a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6040. Introduce api independent PendingAsk to replace usage of ResourceRequest within Scheduler classes. (Wangda Tan via asuresh)\n",
      "commitDate": "06/01/17 9:59 AM",
      "commitName": "2977bc6a141041ef7579efc416e93fc55e0c2a1a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/01/17 10:31 AM",
      "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   public void updateDemand() {\n     demand \u003d Resources.createResource(0);\n     // Demand is current consumption plus outstanding requests\n     Resources.addTo(demand, getCurrentConsumption());\n \n     // Add up outstanding resource requests\n     try {\n       writeLock.lock();\n       for (SchedulerRequestKey k : getSchedulerKeys()) {\n-        ResourceRequest r \u003d getResourceRequest(k, ResourceRequest.ANY);\n-        if (r !\u003d null) {\n-          Resources.multiplyAndAddTo(demand, r.getCapability(),\n-              r.getNumContainers());\n+        PendingAsk pendingAsk \u003d getPendingAsk(k, ResourceRequest.ANY);\n+        if (pendingAsk.getCount() \u003e 0) {\n+          Resources.multiplyAndAddTo(demand,\n+              pendingAsk.getPerAllocationResource(),\n+              pendingAsk.getCount());\n         }\n       }\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    // Demand is current consumption plus outstanding requests\n    Resources.addTo(demand, getCurrentConsumption());\n\n    // Add up outstanding resource requests\n    try {\n      writeLock.lock();\n      for (SchedulerRequestKey k : getSchedulerKeys()) {\n        PendingAsk pendingAsk \u003d getPendingAsk(k, ResourceRequest.ANY);\n        if (pendingAsk.getCount() \u003e 0) {\n          Resources.multiplyAndAddTo(demand,\n              pendingAsk.getPerAllocationResource(),\n              pendingAsk.getCount());\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "commitDateOld": "05/08/16 10:43 AM",
      "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 44.64,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,19 @@\n   public void updateDemand() {\n     demand \u003d Resources.createResource(0);\n     // Demand is current consumption plus outstanding requests\n     Resources.addTo(demand, getCurrentConsumption());\n \n     // Add up outstanding resource requests\n-    synchronized (this) {\n+    try {\n+      writeLock.lock();\n       for (SchedulerRequestKey k : getSchedulerKeys()) {\n         ResourceRequest r \u003d getResourceRequest(k, ResourceRequest.ANY);\n         if (r !\u003d null) {\n-          Resources.multiplyAndAddTo(demand,\n-              r.getCapability(), r.getNumContainers());\n+          Resources.multiplyAndAddTo(demand, r.getCapability(),\n+              r.getNumContainers());\n         }\n       }\n+    } finally {\n+      writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    // Demand is current consumption plus outstanding requests\n    Resources.addTo(demand, getCurrentConsumption());\n\n    // Add up outstanding resource requests\n    try {\n      writeLock.lock();\n      for (SchedulerRequestKey k : getSchedulerKeys()) {\n        ResourceRequest r \u003d getResourceRequest(k, ResourceRequest.ANY);\n        if (r !\u003d null) {\n          Resources.multiplyAndAddTo(demand, r.getCapability(),\n              r.getNumContainers());\n        }\n      }\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "11/07/16 10:36 PM",
      "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 14.68,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,16 @@\n   public void updateDemand() {\n     demand \u003d Resources.createResource(0);\n     // Demand is current consumption plus outstanding requests\n     Resources.addTo(demand, getCurrentConsumption());\n \n     // Add up outstanding resource requests\n     synchronized (this) {\n-      for (Priority p : getPriorities()) {\n-        ResourceRequest r \u003d getResourceRequest(p, ResourceRequest.ANY);\n+      for (SchedulerRequestKey k : getSchedulerKeys()) {\n+        ResourceRequest r \u003d getResourceRequest(k, ResourceRequest.ANY);\n         if (r !\u003d null) {\n           Resources.multiplyAndAddTo(demand,\n               r.getCapability(), r.getNumContainers());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    // Demand is current consumption plus outstanding requests\n    Resources.addTo(demand, getCurrentConsumption());\n\n    // Add up outstanding resource requests\n    synchronized (this) {\n      for (SchedulerRequestKey k : getSchedulerKeys()) {\n        ResourceRequest r \u003d getResourceRequest(k, ResourceRequest.ANY);\n        if (r !\u003d null) {\n          Resources.multiplyAndAddTo(demand,\n              r.getCapability(), r.getNumContainers());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "6d043aa4cf14bc88b1a19991e3bb0752499312b8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4979. FSAppAttempt demand calculation considers demands at multiple locality levels different. (Zhihai Xu via kasha)\n",
      "commitDate": "23/05/16 2:29 PM",
      "commitName": "6d043aa4cf14bc88b1a19991e3bb0752499312b8",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "05/05/16 12:56 PM",
      "commitNameOld": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 18.06,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,16 @@\n   public void updateDemand() {\n     demand \u003d Resources.createResource(0);\n     // Demand is current consumption plus outstanding requests\n     Resources.addTo(demand, getCurrentConsumption());\n \n     // Add up outstanding resource requests\n     synchronized (this) {\n       for (Priority p : getPriorities()) {\n-        for (ResourceRequest r : getResourceRequests(p).values()) {\n+        ResourceRequest r \u003d getResourceRequest(p, ResourceRequest.ANY);\n+        if (r !\u003d null) {\n           Resources.multiplyAndAddTo(demand,\n               r.getCapability(), r.getNumContainers());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    // Demand is current consumption plus outstanding requests\n    Resources.addTo(demand, getCurrentConsumption());\n\n    // Add up outstanding resource requests\n    synchronized (this) {\n      for (Priority p : getPriorities()) {\n        ResourceRequest r \u003d getResourceRequest(p, ResourceRequest.ANY);\n        if (r !\u003d null) {\n          Resources.multiplyAndAddTo(demand,\n              r.getCapability(), r.getNumContainers());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "5205a330b387d2e133ee790b9fe7d5af3cd8bccc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2768. Avoid cloning Resource in FSAppAttempt#updateDemand. (Hong Zhiguo via kasha)\n",
      "commitDate": "29/07/15 9:42 AM",
      "commitName": "5205a330b387d2e133ee790b9fe7d5af3cd8bccc",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "07/06/15 11:37 AM",
      "commitNameOld": "bd69ea408f8fdd8293836ce1089fe9b01616f2f7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 51.92,
      "commitsBetweenForRepo": 333,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,15 @@\n   public void updateDemand() {\n     demand \u003d Resources.createResource(0);\n     // Demand is current consumption plus outstanding requests\n     Resources.addTo(demand, getCurrentConsumption());\n \n     // Add up outstanding resource requests\n     synchronized (this) {\n       for (Priority p : getPriorities()) {\n         for (ResourceRequest r : getResourceRequests(p).values()) {\n-          Resource total \u003d Resources.multiply(r.getCapability(), r.getNumContainers());\n-          Resources.addTo(demand, total);\n+          Resources.multiplyAndAddTo(demand,\n+              r.getCapability(), r.getNumContainers());\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    // Demand is current consumption plus outstanding requests\n    Resources.addTo(demand, getCurrentConsumption());\n\n    // Add up outstanding resource requests\n    synchronized (this) {\n      for (Priority p : getPriorities()) {\n        for (ResourceRequest r : getResourceRequests(p).values()) {\n          Resources.multiplyAndAddTo(demand,\n              r.getCapability(), r.getNumContainers());\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,15 @@\n+  public void updateDemand() {\n+    demand \u003d Resources.createResource(0);\n+    // Demand is current consumption plus outstanding requests\n+    Resources.addTo(demand, getCurrentConsumption());\n+\n+    // Add up outstanding resource requests\n+    synchronized (this) {\n+      for (Priority p : getPriorities()) {\n+        for (ResourceRequest r : getResourceRequests(p).values()) {\n+          Resource total \u003d Resources.multiply(r.getCapability(), r.getNumContainers());\n+          Resources.addTo(demand, total);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void updateDemand() {\n    demand \u003d Resources.createResource(0);\n    // Demand is current consumption plus outstanding requests\n    Resources.addTo(demand, getCurrentConsumption());\n\n    // Add up outstanding resource requests\n    synchronized (this) {\n      for (Priority p : getPriorities()) {\n        for (ResourceRequest r : getResourceRequests(p).values()) {\n          Resource total \u003d Resources.multiply(r.getCapability(), r.getNumContainers());\n          Resources.addTo(demand, total);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}