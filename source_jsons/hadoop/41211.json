{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AllocationFileParser.java",
  "functionName": "parse",
  "functionId": "parse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/allocation/AllocationFileParser.java",
  "functionStartLine": 100,
  "functionEndLine": 123,
  "numCommitsSeen": 1,
  "timeTaken": 748,
  "changeHistory": [
    "814d701d46b4ff87f6ec94ba39667c80475c38d7"
  ],
  "changeHistoryShort": {
    "814d701d46b4ff87f6ec94ba39667c80475c38d7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "814d701d46b4ff87f6ec94ba39667c80475c38d7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7841. Cleanup AllocationFileLoaderService\u0027s reloadAllocations method (snemeth via rkanter)\n",
      "commitDate": "06/02/18 2:36 PM",
      "commitName": "814d701d46b4ff87f6ec94ba39667c80475c38d7",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,24 @@\n+  public void parse() throws AllocationConfigurationException {\n+    for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n+      Node node \u003d elements.item(i);\n+      if (node instanceof Element) {\n+        Element element \u003d (Element) node;\n+        final String tagName \u003d element.getTagName();\n+        if (VALID_TAG_NAMES.contains(tagName)) {\n+          if (tagName.equals(QUEUE_PLACEMENT_POLICY)) {\n+            queuePlacementPolicyElement \u003d element;\n+          } else if (isSchedulingPolicy(element)) {\n+            defaultSchedulingPolicy \u003d extractSchedulingPolicy(element);\n+          } else if (isQueue(element)) {\n+            queueElements.add(element);\n+          } else if (tagName.equals(USER)) {\n+            extractUserData(element);\n+          } else {\n+            textValues.put(tagName, getTrimmedTextData(element));\n+          }\n+        } else {\n+          LOG.warn(\"Bad element in allocations file: \" + tagName);\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void parse() throws AllocationConfigurationException {\n    for (int i \u003d 0; i \u003c elements.getLength(); i++) {\n      Node node \u003d elements.item(i);\n      if (node instanceof Element) {\n        Element element \u003d (Element) node;\n        final String tagName \u003d element.getTagName();\n        if (VALID_TAG_NAMES.contains(tagName)) {\n          if (tagName.equals(QUEUE_PLACEMENT_POLICY)) {\n            queuePlacementPolicyElement \u003d element;\n          } else if (isSchedulingPolicy(element)) {\n            defaultSchedulingPolicy \u003d extractSchedulingPolicy(element);\n          } else if (isQueue(element)) {\n            queueElements.add(element);\n          } else if (tagName.equals(USER)) {\n            extractUserData(element);\n          } else {\n            textValues.put(tagName, getTrimmedTextData(element));\n          }\n        } else {\n          LOG.warn(\"Bad element in allocations file: \" + tagName);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/allocation/AllocationFileParser.java"
    }
  }
}