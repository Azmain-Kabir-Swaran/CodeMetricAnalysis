{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FrameworkUploader.java",
  "functionName": "checkSymlink",
  "functionId": "checkSymlink___jar-File",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
  "functionStartLine": 454,
  "functionEndLine": 480,
  "numCommitsSeen": 12,
  "timeTaken": 1763,
  "changeHistory": [
    "ae055622edeb3cbf82baa6ed952fc2abc84c021e",
    "e404650f489727d2df9a8813fddc4e0d682fbbee"
  ],
  "changeHistoryShort": {
    "ae055622edeb3cbf82baa6ed952fc2abc84c021e": "Ybodychange",
    "e404650f489727d2df9a8813fddc4e0d682fbbee": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ae055622edeb3cbf82baa6ed952fc2abc84c021e": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7114. Make FrameworkUploader symlink ignore improvement. Contributed by Gergo Repas.\n",
      "commitDate": "22/06/18 1:05 PM",
      "commitName": "ae055622edeb3cbf82baa6ed952fc2abc84c021e",
      "commitAuthor": "Miklos Szegedi",
      "commitDateOld": "19/01/18 5:57 PM",
      "commitNameOld": "836643d793c68bf1bee883abece84f024591da7c",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 153.76,
      "commitsBetweenForRepo": 1700,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   boolean checkSymlink(File jar) {\n     if (Files.isSymbolicLink(jar.toPath())) {\n       try {\n         java.nio.file.Path link \u003d Files.readSymbolicLink(jar.toPath());\n         java.nio.file.Path jarPath \u003d Paths.get(jar.getAbsolutePath());\n         String linkString \u003d link.toString();\n         java.nio.file.Path jarParent \u003d jarPath.getParent();\n         java.nio.file.Path linkPath \u003d\n             jarParent \u003d\u003d null ? null : jarParent.resolve(linkString);\n         java.nio.file.Path linkPathParent \u003d\n             linkPath \u003d\u003d null ? null : linkPath.getParent();\n         java.nio.file.Path normalizedLinkPath \u003d\n             linkPathParent \u003d\u003d null ? null : linkPathParent.normalize();\n-        if (normalizedLinkPath !\u003d null \u0026\u0026 jarParent.equals(\n+        if (normalizedLinkPath !\u003d null \u0026\u0026 jarParent.normalize().equals(\n             normalizedLinkPath)) {\n           LOG.info(String.format(\"Ignoring same directory link %s to %s\",\n               jarPath.toString(), link.toString()));\n           return true;\n         }\n       } catch (NotLinkException ex) {\n         LOG.debug(\"Not a link\", jar);\n       } catch (IOException ex) {\n         LOG.warn(\"Cannot read symbolic link on\", jar);\n       }\n     }\n     return false;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean checkSymlink(File jar) {\n    if (Files.isSymbolicLink(jar.toPath())) {\n      try {\n        java.nio.file.Path link \u003d Files.readSymbolicLink(jar.toPath());\n        java.nio.file.Path jarPath \u003d Paths.get(jar.getAbsolutePath());\n        String linkString \u003d link.toString();\n        java.nio.file.Path jarParent \u003d jarPath.getParent();\n        java.nio.file.Path linkPath \u003d\n            jarParent \u003d\u003d null ? null : jarParent.resolve(linkString);\n        java.nio.file.Path linkPathParent \u003d\n            linkPath \u003d\u003d null ? null : linkPath.getParent();\n        java.nio.file.Path normalizedLinkPath \u003d\n            linkPathParent \u003d\u003d null ? null : linkPathParent.normalize();\n        if (normalizedLinkPath !\u003d null \u0026\u0026 jarParent.normalize().equals(\n            normalizedLinkPath)) {\n          LOG.info(String.format(\"Ignoring same directory link %s to %s\",\n              jarPath.toString(), link.toString()));\n          return true;\n        }\n      } catch (NotLinkException ex) {\n        LOG.debug(\"Not a link\", jar);\n      } catch (IOException ex) {\n        LOG.warn(\"Cannot read symbolic link on\", jar);\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "e404650f489727d2df9a8813fddc4e0d682fbbee": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-7030. Uploader tool should ignore symlinks to the same directory (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "12/01/18 2:18 PM",
      "commitName": "e404650f489727d2df9a8813fddc4e0d682fbbee",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,27 @@\n+  boolean checkSymlink(File jar) {\n+    if (Files.isSymbolicLink(jar.toPath())) {\n+      try {\n+        java.nio.file.Path link \u003d Files.readSymbolicLink(jar.toPath());\n+        java.nio.file.Path jarPath \u003d Paths.get(jar.getAbsolutePath());\n+        String linkString \u003d link.toString();\n+        java.nio.file.Path jarParent \u003d jarPath.getParent();\n+        java.nio.file.Path linkPath \u003d\n+            jarParent \u003d\u003d null ? null : jarParent.resolve(linkString);\n+        java.nio.file.Path linkPathParent \u003d\n+            linkPath \u003d\u003d null ? null : linkPath.getParent();\n+        java.nio.file.Path normalizedLinkPath \u003d\n+            linkPathParent \u003d\u003d null ? null : linkPathParent.normalize();\n+        if (normalizedLinkPath !\u003d null \u0026\u0026 jarParent.equals(\n+            normalizedLinkPath)) {\n+          LOG.info(String.format(\"Ignoring same directory link %s to %s\",\n+              jarPath.toString(), link.toString()));\n+          return true;\n+        }\n+      } catch (NotLinkException ex) {\n+        LOG.debug(\"Not a link\", jar);\n+      } catch (IOException ex) {\n+        LOG.warn(\"Cannot read symbolic link on\", jar);\n+      }\n+    }\n+    return false;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  boolean checkSymlink(File jar) {\n    if (Files.isSymbolicLink(jar.toPath())) {\n      try {\n        java.nio.file.Path link \u003d Files.readSymbolicLink(jar.toPath());\n        java.nio.file.Path jarPath \u003d Paths.get(jar.getAbsolutePath());\n        String linkString \u003d link.toString();\n        java.nio.file.Path jarParent \u003d jarPath.getParent();\n        java.nio.file.Path linkPath \u003d\n            jarParent \u003d\u003d null ? null : jarParent.resolve(linkString);\n        java.nio.file.Path linkPathParent \u003d\n            linkPath \u003d\u003d null ? null : linkPath.getParent();\n        java.nio.file.Path normalizedLinkPath \u003d\n            linkPathParent \u003d\u003d null ? null : linkPathParent.normalize();\n        if (normalizedLinkPath !\u003d null \u0026\u0026 jarParent.equals(\n            normalizedLinkPath)) {\n          LOG.info(String.format(\"Ignoring same directory link %s to %s\",\n              jarPath.toString(), link.toString()));\n          return true;\n        }\n      } catch (NotLinkException ex) {\n        LOG.debug(\"Not a link\", jar);\n      } catch (IOException ex) {\n        LOG.warn(\"Cannot read symbolic link on\", jar);\n      }\n    }\n    return false;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java"
    }
  }
}