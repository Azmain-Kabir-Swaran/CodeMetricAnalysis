{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPOfferService.java",
  "functionName": "updateActorStatesFromHeartbeat",
  "functionId": "updateActorStatesFromHeartbeat___actor-BPServiceActor__nnHaState-NNHAStatusHeartbeat",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
  "functionStartLine": 565,
  "functionEndLine": 610,
  "numCommitsSeen": 87,
  "timeTaken": 1970,
  "changeHistory": [
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
    "8bb0dc34e4f14698bea104be6294acb4954358ca"
  ],
  "changeHistoryShort": {
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45": "Ymultichange(Ymodifierchange,Ybodychange)",
    "8bb0dc34e4f14698bea104be6294acb4954358ca": "Ybodychange"
  },
  "changeHistoryDetails": {
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 11:56 AM",
      "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:56 AM",
          "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 12:41 AM",
          "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 10.47,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,46 @@\n-  synchronized void updateActorStatesFromHeartbeat(\n+  void updateActorStatesFromHeartbeat(\n       BPServiceActor actor,\n       NNHAStatusHeartbeat nnHaState) {\n-    final long txid \u003d nnHaState.getTxId();\n-    \n-    final boolean nnClaimsActive \u003d\n-      nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n-    final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n-    final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId; \n-    \n-    if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n-      LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n-          \"txid\u003d\" + txid);\n-      if (!isMoreRecentClaim) {\n-        // Split-brain scenario - an NN is trying to claim active\n-        // state when a different NN has already claimed it with a higher\n-        // txid.\n-        LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n-            txid + \" but there was already a more recent claim at txid\u003d\" +\n-            lastActiveClaimTxId);\n-        return;\n-      } else {\n-        if (bpServiceToActive \u003d\u003d null) {\n-          LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n+    writeLock();\n+    try {\n+      final long txid \u003d nnHaState.getTxId();\n+\n+      final boolean nnClaimsActive \u003d\n+          nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n+      final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n+      final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId;\n+\n+      if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n+        LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n+            \"txid\u003d\" + txid);\n+        if (!isMoreRecentClaim) {\n+          // Split-brain scenario - an NN is trying to claim active\n+          // state when a different NN has already claimed it with a higher\n+          // txid.\n+          LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n+              txid + \" but there was already a more recent claim at txid\u003d\" +\n+              lastActiveClaimTxId);\n+          return;\n         } else {\n-          LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n-              bpServiceToActive + \" at higher txid\u003d\" + txid);\n+          if (bpServiceToActive \u003d\u003d null) {\n+            LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n+          } else {\n+            LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n+                bpServiceToActive + \" at higher txid\u003d\" + txid);\n+          }\n+          bpServiceToActive \u003d actor;\n         }\n-        bpServiceToActive \u003d actor;\n+      } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n+        LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n+            \"txid\u003d\" + nnHaState.getTxId());\n+        bpServiceToActive \u003d null;\n       }\n-    } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n-      LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n-          \"txid\u003d\" + nnHaState.getTxId());\n-      bpServiceToActive \u003d null;\n-    }\n-    \n-    if (bpServiceToActive \u003d\u003d actor) {\n-      assert txid \u003e\u003d lastActiveClaimTxId;\n-      lastActiveClaimTxId \u003d txid;\n+\n+      if (bpServiceToActive \u003d\u003d actor) {\n+        assert txid \u003e\u003d lastActiveClaimTxId;\n+        lastActiveClaimTxId \u003d txid;\n+      }\n+    } finally {\n+      writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateActorStatesFromHeartbeat(\n      BPServiceActor actor,\n      NNHAStatusHeartbeat nnHaState) {\n    writeLock();\n    try {\n      final long txid \u003d nnHaState.getTxId();\n\n      final boolean nnClaimsActive \u003d\n          nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n      final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n      final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId;\n\n      if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n        LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n            \"txid\u003d\" + txid);\n        if (!isMoreRecentClaim) {\n          // Split-brain scenario - an NN is trying to claim active\n          // state when a different NN has already claimed it with a higher\n          // txid.\n          LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n              txid + \" but there was already a more recent claim at txid\u003d\" +\n              lastActiveClaimTxId);\n          return;\n        } else {\n          if (bpServiceToActive \u003d\u003d null) {\n            LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n          } else {\n            LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n                bpServiceToActive + \" at higher txid\u003d\" + txid);\n          }\n          bpServiceToActive \u003d actor;\n        }\n      } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n        LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n            \"txid\u003d\" + nnHaState.getTxId());\n        bpServiceToActive \u003d null;\n      }\n\n      if (bpServiceToActive \u003d\u003d actor) {\n        assert txid \u003e\u003d lastActiveClaimTxId;\n        lastActiveClaimTxId \u003d txid;\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:56 AM",
          "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 12:41 AM",
          "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 10.47,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,46 @@\n-  synchronized void updateActorStatesFromHeartbeat(\n+  void updateActorStatesFromHeartbeat(\n       BPServiceActor actor,\n       NNHAStatusHeartbeat nnHaState) {\n-    final long txid \u003d nnHaState.getTxId();\n-    \n-    final boolean nnClaimsActive \u003d\n-      nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n-    final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n-    final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId; \n-    \n-    if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n-      LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n-          \"txid\u003d\" + txid);\n-      if (!isMoreRecentClaim) {\n-        // Split-brain scenario - an NN is trying to claim active\n-        // state when a different NN has already claimed it with a higher\n-        // txid.\n-        LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n-            txid + \" but there was already a more recent claim at txid\u003d\" +\n-            lastActiveClaimTxId);\n-        return;\n-      } else {\n-        if (bpServiceToActive \u003d\u003d null) {\n-          LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n+    writeLock();\n+    try {\n+      final long txid \u003d nnHaState.getTxId();\n+\n+      final boolean nnClaimsActive \u003d\n+          nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n+      final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n+      final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId;\n+\n+      if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n+        LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n+            \"txid\u003d\" + txid);\n+        if (!isMoreRecentClaim) {\n+          // Split-brain scenario - an NN is trying to claim active\n+          // state when a different NN has already claimed it with a higher\n+          // txid.\n+          LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n+              txid + \" but there was already a more recent claim at txid\u003d\" +\n+              lastActiveClaimTxId);\n+          return;\n         } else {\n-          LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n-              bpServiceToActive + \" at higher txid\u003d\" + txid);\n+          if (bpServiceToActive \u003d\u003d null) {\n+            LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n+          } else {\n+            LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n+                bpServiceToActive + \" at higher txid\u003d\" + txid);\n+          }\n+          bpServiceToActive \u003d actor;\n         }\n-        bpServiceToActive \u003d actor;\n+      } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n+        LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n+            \"txid\u003d\" + nnHaState.getTxId());\n+        bpServiceToActive \u003d null;\n       }\n-    } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n-      LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n-          \"txid\u003d\" + nnHaState.getTxId());\n-      bpServiceToActive \u003d null;\n-    }\n-    \n-    if (bpServiceToActive \u003d\u003d actor) {\n-      assert txid \u003e\u003d lastActiveClaimTxId;\n-      lastActiveClaimTxId \u003d txid;\n+\n+      if (bpServiceToActive \u003d\u003d actor) {\n+        assert txid \u003e\u003d lastActiveClaimTxId;\n+        lastActiveClaimTxId \u003d txid;\n+      }\n+    } finally {\n+      writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void updateActorStatesFromHeartbeat(\n      BPServiceActor actor,\n      NNHAStatusHeartbeat nnHaState) {\n    writeLock();\n    try {\n      final long txid \u003d nnHaState.getTxId();\n\n      final boolean nnClaimsActive \u003d\n          nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n      final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n      final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId;\n\n      if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n        LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n            \"txid\u003d\" + txid);\n        if (!isMoreRecentClaim) {\n          // Split-brain scenario - an NN is trying to claim active\n          // state when a different NN has already claimed it with a higher\n          // txid.\n          LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n              txid + \" but there was already a more recent claim at txid\u003d\" +\n              lastActiveClaimTxId);\n          return;\n        } else {\n          if (bpServiceToActive \u003d\u003d null) {\n            LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n          } else {\n            LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n                bpServiceToActive + \" at higher txid\u003d\" + txid);\n          }\n          bpServiceToActive \u003d actor;\n        }\n      } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n        LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n            \"txid\u003d\" + nnHaState.getTxId());\n        bpServiceToActive \u003d null;\n      }\n\n      if (bpServiceToActive \u003d\u003d actor) {\n        assert txid \u003e\u003d lastActiveClaimTxId;\n        lastActiveClaimTxId \u003d txid;\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {}
        }
      ]
    },
    "8bb0dc34e4f14698bea104be6294acb4954358ca": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4268. Remove redundant enum NNHAStatusHeartbeat.State. Contributed by Konstantin Shvachko.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1417752 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/12/12 11:20 PM",
      "commitName": "8bb0dc34e4f14698bea104be6294acb4954358ca",
      "commitAuthor": "Konstantin Shvachko",
      "commitDateOld": "22/08/12 9:59 AM",
      "commitNameOld": "380870d54453c1113d46d0f070f4e19b6cea7b8c",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 105.6,
      "commitsBetweenForRepo": 590,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   synchronized void updateActorStatesFromHeartbeat(\n       BPServiceActor actor,\n       NNHAStatusHeartbeat nnHaState) {\n     final long txid \u003d nnHaState.getTxId();\n     \n     final boolean nnClaimsActive \u003d\n-      nnHaState.getState() \u003d\u003d NNHAStatusHeartbeat.State.ACTIVE;\n+      nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n     final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n     final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId; \n     \n     if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n       LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n           \"txid\u003d\" + txid);\n       if (!isMoreRecentClaim) {\n         // Split-brain scenario - an NN is trying to claim active\n         // state when a different NN has already claimed it with a higher\n         // txid.\n         LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n             txid + \" but there was already a more recent claim at txid\u003d\" +\n             lastActiveClaimTxId);\n         return;\n       } else {\n         if (bpServiceToActive \u003d\u003d null) {\n           LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n         } else {\n           LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n               bpServiceToActive + \" at higher txid\u003d\" + txid);\n         }\n         bpServiceToActive \u003d actor;\n       }\n     } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n       LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n           \"txid\u003d\" + nnHaState.getTxId());\n       bpServiceToActive \u003d null;\n     }\n     \n     if (bpServiceToActive \u003d\u003d actor) {\n       assert txid \u003e\u003d lastActiveClaimTxId;\n       lastActiveClaimTxId \u003d txid;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void updateActorStatesFromHeartbeat(\n      BPServiceActor actor,\n      NNHAStatusHeartbeat nnHaState) {\n    final long txid \u003d nnHaState.getTxId();\n    \n    final boolean nnClaimsActive \u003d\n      nnHaState.getState() \u003d\u003d HAServiceState.ACTIVE;\n    final boolean bposThinksActive \u003d bpServiceToActive \u003d\u003d actor;\n    final boolean isMoreRecentClaim \u003d txid \u003e lastActiveClaimTxId; \n    \n    if (nnClaimsActive \u0026\u0026 !bposThinksActive) {\n      LOG.info(\"Namenode \" + actor + \" trying to claim ACTIVE state with \" +\n          \"txid\u003d\" + txid);\n      if (!isMoreRecentClaim) {\n        // Split-brain scenario - an NN is trying to claim active\n        // state when a different NN has already claimed it with a higher\n        // txid.\n        LOG.warn(\"NN \" + actor + \" tried to claim ACTIVE state at txid\u003d\" +\n            txid + \" but there was already a more recent claim at txid\u003d\" +\n            lastActiveClaimTxId);\n        return;\n      } else {\n        if (bpServiceToActive \u003d\u003d null) {\n          LOG.info(\"Acknowledging ACTIVE Namenode \" + actor);\n        } else {\n          LOG.info(\"Namenode \" + actor + \" taking over ACTIVE state from \" +\n              bpServiceToActive + \" at higher txid\u003d\" + txid);\n        }\n        bpServiceToActive \u003d actor;\n      }\n    } else if (!nnClaimsActive \u0026\u0026 bposThinksActive) {\n      LOG.info(\"Namenode \" + actor + \" relinquishing ACTIVE state with \" +\n          \"txid\u003d\" + nnHaState.getTxId());\n      bpServiceToActive \u003d null;\n    }\n    \n    if (bpServiceToActive \u003d\u003d actor) {\n      assert txid \u003e\u003d lastActiveClaimTxId;\n      lastActiveClaimTxId \u003d txid;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    }
  }
}