{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyWithUpgradeDomain.java",
  "functionName": "isGoodDatanode",
  "functionId": "isGoodDatanode___node-DatanodeDescriptor__maxTargetPerRack-int__considerLoad-boolean__results-List__DatanodeStorageInfo____avoidStaleNodes-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithUpgradeDomain.java",
  "functionStartLine": 65,
  "functionEndLine": 81,
  "numCommitsSeen": 4,
  "timeTaken": 905,
  "changeHistory": [
    "0f5f9846edab3ea7e80f35000072136f998bcd46"
  ],
  "changeHistoryShort": {
    "0f5f9846edab3ea7e80f35000072136f998bcd46": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0f5f9846edab3ea7e80f35000072136f998bcd46": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9006. Provide BlockPlacementPolicy that supports upgrade domain. (Ming Ma via lei)\n",
      "commitDate": "12/10/15 4:24 PM",
      "commitName": "0f5f9846edab3ea7e80f35000072136f998bcd46",
      "commitAuthor": "Lei Xu",
      "diff": "@@ -0,0 +1,17 @@\n+  protected boolean isGoodDatanode(DatanodeDescriptor node,\n+      int maxTargetPerRack, boolean considerLoad,\n+      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes) {\n+    boolean isGoodTarget \u003d super.isGoodDatanode(node,\n+        maxTargetPerRack, considerLoad, results, avoidStaleNodes);\n+    if (isGoodTarget) {\n+      if (results.size() \u003e 0 \u0026\u0026 results.size() \u003c upgradeDomainFactor) {\n+        // Each node in \"results\" has a different upgrade domain. Make sure\n+        // the candidate node introduces a new upgrade domain.\n+        Set\u003cString\u003e upgradeDomains \u003d getUpgradeDomains(results);\n+        if (upgradeDomains.contains(node.getUpgradeDomain())) {\n+          isGoodTarget \u003d false;\n+        }\n+      }\n+    }\n+    return isGoodTarget;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected boolean isGoodDatanode(DatanodeDescriptor node,\n      int maxTargetPerRack, boolean considerLoad,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes) {\n    boolean isGoodTarget \u003d super.isGoodDatanode(node,\n        maxTargetPerRack, considerLoad, results, avoidStaleNodes);\n    if (isGoodTarget) {\n      if (results.size() \u003e 0 \u0026\u0026 results.size() \u003c upgradeDomainFactor) {\n        // Each node in \"results\" has a different upgrade domain. Make sure\n        // the candidate node introduces a new upgrade domain.\n        Set\u003cString\u003e upgradeDomains \u003d getUpgradeDomains(results);\n        if (upgradeDomains.contains(node.getUpgradeDomain())) {\n          isGoodTarget \u003d false;\n        }\n      }\n    }\n    return isGoodTarget;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithUpgradeDomain.java"
    }
  }
}