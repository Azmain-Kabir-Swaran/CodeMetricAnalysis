{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TextSplitter.java",
  "functionName": "split",
  "functionId": "split___conf-Configuration__results-ResultSet__colName-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java",
  "functionStartLine": 63,
  "functionEndLine": 142,
  "numCommitsSeen": 4,
  "timeTaken": 4294,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n      throws SQLException {\n\n    LOG.warn(\"Generating splits for a textual index column.\");\n    LOG.warn(\"If your database sorts in a case-insensitive order, \"\n        + \"this may result in a partial import or duplicate records.\");\n    LOG.warn(\"You are strongly encouraged to choose an integral split column.\");\n\n    String minString \u003d results.getString(1);\n    String maxString \u003d results.getString(2);\n\n    boolean minIsNull \u003d false;\n\n    // If the min value is null, switch it to an empty string instead for purposes\n    // of interpolation. Then add [null, null] as a special case split.\n    if (null \u003d\u003d minString) {\n      minString \u003d \"\";\n      minIsNull \u003d true;\n    }\n\n    if (null \u003d\u003d maxString) {\n      // If the max string is null, then the min string has to be null too.\n      // Just return a special split for this case.\n      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n      return splits;\n    }\n\n    // Use this as a hint. May need an extra task if the size doesn\u0027t\n    // divide cleanly.\n    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n\n    String lowClausePrefix \u003d colName + \" \u003e\u003d \u0027\";\n    String highClausePrefix \u003d colName + \" \u003c \u0027\";\n\n    // If there is a common prefix between minString and maxString, establish it\n    // and pull it out of minString and maxString.\n    int maxPrefixLen \u003d Math.min(minString.length(), maxString.length());\n    int sharedLen;\n    for (sharedLen \u003d 0; sharedLen \u003c maxPrefixLen; sharedLen++) {\n      char c1 \u003d minString.charAt(sharedLen);\n      char c2 \u003d maxString.charAt(sharedLen);\n      if (c1 !\u003d c2) {\n        break;\n      }\n    }\n\n    // The common prefix has length \u0027sharedLen\u0027. Extract it from both.\n    String commonPrefix \u003d minString.substring(0, sharedLen);\n    minString \u003d minString.substring(sharedLen);\n    maxString \u003d maxString.substring(sharedLen);\n\n    List\u003cString\u003e splitStrings \u003d split(numSplits, minString, maxString, commonPrefix);\n    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n\n    // Convert the list of split point strings into an actual set of InputSplits.\n    String start \u003d splitStrings.get(0);\n    for (int i \u003d 1; i \u003c splitStrings.size(); i++) {\n      String end \u003d splitStrings.get(i);\n\n      if (i \u003d\u003d splitStrings.size() - 1) {\n        // This is the last one; use a closed interval.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + start + \"\u0027\", colName + \" \u003c\u003d \u0027\" + end + \"\u0027\"));\n      } else {\n        // Normal open-interval case.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + start + \"\u0027\", highClausePrefix + end + \"\u0027\"));\n      }\n    }\n\n    if (minIsNull) {\n      // Add the special null split at the end.\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n    }\n\n    return splits;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n      throws SQLException {\n\n    LOG.warn(\"Generating splits for a textual index column.\");\n    LOG.warn(\"If your database sorts in a case-insensitive order, \"\n        + \"this may result in a partial import or duplicate records.\");\n    LOG.warn(\"You are strongly encouraged to choose an integral split column.\");\n\n    String minString \u003d results.getString(1);\n    String maxString \u003d results.getString(2);\n\n    boolean minIsNull \u003d false;\n\n    // If the min value is null, switch it to an empty string instead for purposes\n    // of interpolation. Then add [null, null] as a special case split.\n    if (null \u003d\u003d minString) {\n      minString \u003d \"\";\n      minIsNull \u003d true;\n    }\n\n    if (null \u003d\u003d maxString) {\n      // If the max string is null, then the min string has to be null too.\n      // Just return a special split for this case.\n      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n      return splits;\n    }\n\n    // Use this as a hint. May need an extra task if the size doesn\u0027t\n    // divide cleanly.\n    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n\n    String lowClausePrefix \u003d colName + \" \u003e\u003d \u0027\";\n    String highClausePrefix \u003d colName + \" \u003c \u0027\";\n\n    // If there is a common prefix between minString and maxString, establish it\n    // and pull it out of minString and maxString.\n    int maxPrefixLen \u003d Math.min(minString.length(), maxString.length());\n    int sharedLen;\n    for (sharedLen \u003d 0; sharedLen \u003c maxPrefixLen; sharedLen++) {\n      char c1 \u003d minString.charAt(sharedLen);\n      char c2 \u003d maxString.charAt(sharedLen);\n      if (c1 !\u003d c2) {\n        break;\n      }\n    }\n\n    // The common prefix has length \u0027sharedLen\u0027. Extract it from both.\n    String commonPrefix \u003d minString.substring(0, sharedLen);\n    minString \u003d minString.substring(sharedLen);\n    maxString \u003d maxString.substring(sharedLen);\n\n    List\u003cString\u003e splitStrings \u003d split(numSplits, minString, maxString, commonPrefix);\n    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n\n    // Convert the list of split point strings into an actual set of InputSplits.\n    String start \u003d splitStrings.get(0);\n    for (int i \u003d 1; i \u003c splitStrings.size(); i++) {\n      String end \u003d splitStrings.get(i);\n\n      if (i \u003d\u003d splitStrings.size() - 1) {\n        // This is the last one; use a closed interval.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + start + \"\u0027\", colName + \" \u003c\u003d \u0027\" + end + \"\u0027\"));\n      } else {\n        // Normal open-interval case.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + start + \"\u0027\", highClausePrefix + end + \"\u0027\"));\n      }\n    }\n\n    if (minIsNull) {\n      // Add the special null split at the end.\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n    }\n\n    return splits;\n  }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java",
        "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-core/src/main/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,80 @@\n+  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n+      throws SQLException {\n+\n+    LOG.warn(\"Generating splits for a textual index column.\");\n+    LOG.warn(\"If your database sorts in a case-insensitive order, \"\n+        + \"this may result in a partial import or duplicate records.\");\n+    LOG.warn(\"You are strongly encouraged to choose an integral split column.\");\n+\n+    String minString \u003d results.getString(1);\n+    String maxString \u003d results.getString(2);\n+\n+    boolean minIsNull \u003d false;\n+\n+    // If the min value is null, switch it to an empty string instead for purposes\n+    // of interpolation. Then add [null, null] as a special case split.\n+    if (null \u003d\u003d minString) {\n+      minString \u003d \"\";\n+      minIsNull \u003d true;\n+    }\n+\n+    if (null \u003d\u003d maxString) {\n+      // If the max string is null, then the min string has to be null too.\n+      // Just return a special split for this case.\n+      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n+      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+          colName + \" IS NULL\", colName + \" IS NULL\"));\n+      return splits;\n+    }\n+\n+    // Use this as a hint. May need an extra task if the size doesn\u0027t\n+    // divide cleanly.\n+    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n+\n+    String lowClausePrefix \u003d colName + \" \u003e\u003d \u0027\";\n+    String highClausePrefix \u003d colName + \" \u003c \u0027\";\n+\n+    // If there is a common prefix between minString and maxString, establish it\n+    // and pull it out of minString and maxString.\n+    int maxPrefixLen \u003d Math.min(minString.length(), maxString.length());\n+    int sharedLen;\n+    for (sharedLen \u003d 0; sharedLen \u003c maxPrefixLen; sharedLen++) {\n+      char c1 \u003d minString.charAt(sharedLen);\n+      char c2 \u003d maxString.charAt(sharedLen);\n+      if (c1 !\u003d c2) {\n+        break;\n+      }\n+    }\n+\n+    // The common prefix has length \u0027sharedLen\u0027. Extract it from both.\n+    String commonPrefix \u003d minString.substring(0, sharedLen);\n+    minString \u003d minString.substring(sharedLen);\n+    maxString \u003d maxString.substring(sharedLen);\n+\n+    List\u003cString\u003e splitStrings \u003d split(numSplits, minString, maxString, commonPrefix);\n+    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n+\n+    // Convert the list of split point strings into an actual set of InputSplits.\n+    String start \u003d splitStrings.get(0);\n+    for (int i \u003d 1; i \u003c splitStrings.size(); i++) {\n+      String end \u003d splitStrings.get(i);\n+\n+      if (i \u003d\u003d splitStrings.size() - 1) {\n+        // This is the last one; use a closed interval.\n+        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+            lowClausePrefix + start + \"\u0027\", colName + \" \u003c\u003d \u0027\" + end + \"\u0027\"));\n+      } else {\n+        // Normal open-interval case.\n+        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+            lowClausePrefix + start + \"\u0027\", highClausePrefix + end + \"\u0027\"));\n+      }\n+    }\n+\n+    if (minIsNull) {\n+      // Add the special null split at the end.\n+      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n+          colName + \" IS NULL\", colName + \" IS NULL\"));\n+    }\n+\n+    return splits;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cInputSplit\u003e split(Configuration conf, ResultSet results, String colName)\n      throws SQLException {\n\n    LOG.warn(\"Generating splits for a textual index column.\");\n    LOG.warn(\"If your database sorts in a case-insensitive order, \"\n        + \"this may result in a partial import or duplicate records.\");\n    LOG.warn(\"You are strongly encouraged to choose an integral split column.\");\n\n    String minString \u003d results.getString(1);\n    String maxString \u003d results.getString(2);\n\n    boolean minIsNull \u003d false;\n\n    // If the min value is null, switch it to an empty string instead for purposes\n    // of interpolation. Then add [null, null] as a special case split.\n    if (null \u003d\u003d minString) {\n      minString \u003d \"\";\n      minIsNull \u003d true;\n    }\n\n    if (null \u003d\u003d maxString) {\n      // If the max string is null, then the min string has to be null too.\n      // Just return a special split for this case.\n      List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n      return splits;\n    }\n\n    // Use this as a hint. May need an extra task if the size doesn\u0027t\n    // divide cleanly.\n    int numSplits \u003d conf.getInt(MRJobConfig.NUM_MAPS, 1);\n\n    String lowClausePrefix \u003d colName + \" \u003e\u003d \u0027\";\n    String highClausePrefix \u003d colName + \" \u003c \u0027\";\n\n    // If there is a common prefix between minString and maxString, establish it\n    // and pull it out of minString and maxString.\n    int maxPrefixLen \u003d Math.min(minString.length(), maxString.length());\n    int sharedLen;\n    for (sharedLen \u003d 0; sharedLen \u003c maxPrefixLen; sharedLen++) {\n      char c1 \u003d minString.charAt(sharedLen);\n      char c2 \u003d maxString.charAt(sharedLen);\n      if (c1 !\u003d c2) {\n        break;\n      }\n    }\n\n    // The common prefix has length \u0027sharedLen\u0027. Extract it from both.\n    String commonPrefix \u003d minString.substring(0, sharedLen);\n    minString \u003d minString.substring(sharedLen);\n    maxString \u003d maxString.substring(sharedLen);\n\n    List\u003cString\u003e splitStrings \u003d split(numSplits, minString, maxString, commonPrefix);\n    List\u003cInputSplit\u003e splits \u003d new ArrayList\u003cInputSplit\u003e();\n\n    // Convert the list of split point strings into an actual set of InputSplits.\n    String start \u003d splitStrings.get(0);\n    for (int i \u003d 1; i \u003c splitStrings.size(); i++) {\n      String end \u003d splitStrings.get(i);\n\n      if (i \u003d\u003d splitStrings.size() - 1) {\n        // This is the last one; use a closed interval.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + start + \"\u0027\", colName + \" \u003c\u003d \u0027\" + end + \"\u0027\"));\n      } else {\n        // Normal open-interval case.\n        splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n            lowClausePrefix + start + \"\u0027\", highClausePrefix + end + \"\u0027\"));\n      }\n    }\n\n    if (minIsNull) {\n      // Add the special null split at the end.\n      splits.add(new DataDrivenDBInputFormat.DataDrivenDBInputSplit(\n          colName + \" IS NULL\", colName + \" IS NULL\"));\n    }\n\n    return splits;\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapreduce/lib/db/TextSplitter.java"
    }
  }
}