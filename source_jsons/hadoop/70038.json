{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureBlobFileSystemStore.java",
  "functionName": "convertXmsPropertiesToCommaSeparatedString",
  "functionId": "convertXmsPropertiesToCommaSeparatedString___properties-Hashtable__String,String__(modifiers-final)",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
  "functionStartLine": 1238,
  "functionEndLine": 1266,
  "numCommitsSeen": 49,
  "timeTaken": 2273,
  "changeHistory": [
    "b4c23043d38325aad8af4488caca115eae789f07",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
    "f044deedbbfee0812316d587139cb828f27172e9"
  ],
  "changeHistoryShort": {
    "b4c23043d38325aad8af4488caca115eae789f07": "Ybodychange",
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": "Yfilerename",
    "f044deedbbfee0812316d587139cb828f27172e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4c23043d38325aad8af4488caca115eae789f07": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15757. ABFS: remove dependency on common-codec Base64.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "b4c23043d38325aad8af4488caca115eae789f07",
      "commitAuthor": "Thomas Marquardt",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "e5593cbd8323399359b3e8da46bd58e8364cbf22",
      "commitAuthorOld": "Thomas Marquardt",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private String convertXmsPropertiesToCommaSeparatedString(final Hashtable\u003cString, String\u003e properties) throws\n           CharacterCodingException {\n     StringBuilder commaSeparatedProperties \u003d new StringBuilder();\n \n     final CharsetEncoder encoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newEncoder();\n \n     for (Map.Entry\u003cString, String\u003e propertyEntry : properties.entrySet()) {\n       String key \u003d propertyEntry.getKey();\n       String value \u003d propertyEntry.getValue();\n \n       Boolean canEncodeValue \u003d encoder.canEncode(value);\n       if (!canEncodeValue) {\n         throw new CharacterCodingException();\n       }\n \n-      String encodedPropertyValue \u003d DatatypeConverter.printBase64Binary(encoder.encode(CharBuffer.wrap(value)).array());\n+      String encodedPropertyValue \u003d Base64.encode(encoder.encode(CharBuffer.wrap(value)).array());\n       commaSeparatedProperties.append(key)\n               .append(AbfsHttpConstants.EQUAL)\n               .append(encodedPropertyValue);\n \n       commaSeparatedProperties.append(AbfsHttpConstants.COMMA);\n     }\n \n     if (commaSeparatedProperties.length() !\u003d 0) {\n       commaSeparatedProperties.deleteCharAt(commaSeparatedProperties.length() - 1);\n     }\n \n     return commaSeparatedProperties.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String convertXmsPropertiesToCommaSeparatedString(final Hashtable\u003cString, String\u003e properties) throws\n          CharacterCodingException {\n    StringBuilder commaSeparatedProperties \u003d new StringBuilder();\n\n    final CharsetEncoder encoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newEncoder();\n\n    for (Map.Entry\u003cString, String\u003e propertyEntry : properties.entrySet()) {\n      String key \u003d propertyEntry.getKey();\n      String value \u003d propertyEntry.getValue();\n\n      Boolean canEncodeValue \u003d encoder.canEncode(value);\n      if (!canEncodeValue) {\n        throw new CharacterCodingException();\n      }\n\n      String encodedPropertyValue \u003d Base64.encode(encoder.encode(CharBuffer.wrap(value)).array());\n      commaSeparatedProperties.append(key)\n              .append(AbfsHttpConstants.EQUAL)\n              .append(encodedPropertyValue);\n\n      commaSeparatedProperties.append(AbfsHttpConstants.COMMA);\n    }\n\n    if (commaSeparatedProperties.length() !\u003d 0) {\n      commaSeparatedProperties.deleteCharAt(commaSeparatedProperties.length() - 1);\n    }\n\n    return commaSeparatedProperties.toString();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {}
    },
    "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15560. ABFS: removed dependency injection and unnecessary dependencies.\nContributed by Da Zhou.\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "a271fd0eca75cef8b8ba940cdac8ad4fd21b4462",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "17/09/18 12:54 PM",
      "commitNameOld": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private String convertXmsPropertiesToCommaSeparatedString(final Hashtable\u003cString, String\u003e properties) throws\n-      CharacterCodingException {\n+          CharacterCodingException {\n     StringBuilder commaSeparatedProperties \u003d new StringBuilder();\n \n     final CharsetEncoder encoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newEncoder();\n \n     for (Map.Entry\u003cString, String\u003e propertyEntry : properties.entrySet()) {\n       String key \u003d propertyEntry.getKey();\n       String value \u003d propertyEntry.getValue();\n \n       Boolean canEncodeValue \u003d encoder.canEncode(value);\n       if (!canEncodeValue) {\n         throw new CharacterCodingException();\n       }\n \n       String encodedPropertyValue \u003d DatatypeConverter.printBase64Binary(encoder.encode(CharBuffer.wrap(value)).array());\n       commaSeparatedProperties.append(key)\n               .append(AbfsHttpConstants.EQUAL)\n               .append(encodedPropertyValue);\n \n       commaSeparatedProperties.append(AbfsHttpConstants.COMMA);\n     }\n \n     if (commaSeparatedProperties.length() !\u003d 0) {\n       commaSeparatedProperties.deleteCharAt(commaSeparatedProperties.length() - 1);\n     }\n \n     return commaSeparatedProperties.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String convertXmsPropertiesToCommaSeparatedString(final Hashtable\u003cString, String\u003e properties) throws\n          CharacterCodingException {\n    StringBuilder commaSeparatedProperties \u003d new StringBuilder();\n\n    final CharsetEncoder encoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newEncoder();\n\n    for (Map.Entry\u003cString, String\u003e propertyEntry : properties.entrySet()) {\n      String key \u003d propertyEntry.getKey();\n      String value \u003d propertyEntry.getValue();\n\n      Boolean canEncodeValue \u003d encoder.canEncode(value);\n      if (!canEncodeValue) {\n        throw new CharacterCodingException();\n      }\n\n      String encodedPropertyValue \u003d DatatypeConverter.printBase64Binary(encoder.encode(CharBuffer.wrap(value)).array());\n      commaSeparatedProperties.append(key)\n              .append(AbfsHttpConstants.EQUAL)\n              .append(encodedPropertyValue);\n\n      commaSeparatedProperties.append(AbfsHttpConstants.COMMA);\n    }\n\n    if (commaSeparatedProperties.length() !\u003d 0) {\n      commaSeparatedProperties.deleteCharAt(commaSeparatedProperties.length() - 1);\n    }\n\n    return commaSeparatedProperties.toString();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java",
      "extendedDetails": {
        "oldPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsHttpServiceImpl.java",
        "newPath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/AzureBlobFileSystemStore.java"
      }
    },
    "f044deedbbfee0812316d587139cb828f27172e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15407. HADOOP-15540. Support Windows Azure Storage - Blob file system \"ABFS\" in Hadoop: Core Commit.\n\nContributed by Shane Mainali, Thomas Marquardt, Zichen Sun, Georgi Chalakov, Esfandiar Manii, Amit Singh, Dana Kaban, Da Zhou, Junhua Gu, Saher Ahwal, Saurabh Pant, James Baker, Shaoyu Zhang, Lawrence Chen, Kevin Chen and Steve Loughran\n",
      "commitDate": "17/09/18 12:54 PM",
      "commitName": "f044deedbbfee0812316d587139cb828f27172e9",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,29 @@\n+  private String convertXmsPropertiesToCommaSeparatedString(final Hashtable\u003cString, String\u003e properties) throws\n+      CharacterCodingException {\n+    StringBuilder commaSeparatedProperties \u003d new StringBuilder();\n+\n+    final CharsetEncoder encoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newEncoder();\n+\n+    for (Map.Entry\u003cString, String\u003e propertyEntry : properties.entrySet()) {\n+      String key \u003d propertyEntry.getKey();\n+      String value \u003d propertyEntry.getValue();\n+\n+      Boolean canEncodeValue \u003d encoder.canEncode(value);\n+      if (!canEncodeValue) {\n+        throw new CharacterCodingException();\n+      }\n+\n+      String encodedPropertyValue \u003d DatatypeConverter.printBase64Binary(encoder.encode(CharBuffer.wrap(value)).array());\n+      commaSeparatedProperties.append(key)\n+              .append(AbfsHttpConstants.EQUAL)\n+              .append(encodedPropertyValue);\n+\n+      commaSeparatedProperties.append(AbfsHttpConstants.COMMA);\n+    }\n+\n+    if (commaSeparatedProperties.length() !\u003d 0) {\n+      commaSeparatedProperties.deleteCharAt(commaSeparatedProperties.length() - 1);\n+    }\n+\n+    return commaSeparatedProperties.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String convertXmsPropertiesToCommaSeparatedString(final Hashtable\u003cString, String\u003e properties) throws\n      CharacterCodingException {\n    StringBuilder commaSeparatedProperties \u003d new StringBuilder();\n\n    final CharsetEncoder encoder \u003d Charset.forName(XMS_PROPERTIES_ENCODING).newEncoder();\n\n    for (Map.Entry\u003cString, String\u003e propertyEntry : properties.entrySet()) {\n      String key \u003d propertyEntry.getKey();\n      String value \u003d propertyEntry.getValue();\n\n      Boolean canEncodeValue \u003d encoder.canEncode(value);\n      if (!canEncodeValue) {\n        throw new CharacterCodingException();\n      }\n\n      String encodedPropertyValue \u003d DatatypeConverter.printBase64Binary(encoder.encode(CharBuffer.wrap(value)).array());\n      commaSeparatedProperties.append(key)\n              .append(AbfsHttpConstants.EQUAL)\n              .append(encodedPropertyValue);\n\n      commaSeparatedProperties.append(AbfsHttpConstants.COMMA);\n    }\n\n    if (commaSeparatedProperties.length() !\u003d 0) {\n      commaSeparatedProperties.deleteCharAt(commaSeparatedProperties.length() - 1);\n    }\n\n    return commaSeparatedProperties.toString();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azurebfs/services/AbfsHttpServiceImpl.java"
    }
  }
}