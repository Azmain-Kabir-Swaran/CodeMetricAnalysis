{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerApplicationAttempt.java",
  "functionName": "move",
  "functionId": "move___newQueue-Queue",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
  "functionStartLine": 1192,
  "functionEndLine": 1227,
  "numCommitsSeen": 105,
  "timeTaken": 5179,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "e9c2aa1bc383cb08784846534415bf17667d6e41",
    "1eb81867032b016a59662043cbae50daa52dafa9",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
    "cb5e0787a6fc0b0748753b7e7c4c3fdbfd2714b2",
    "981679e6d7650141fc8737c7e13b16d8b795b408"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "e9c2aa1bc383cb08784846534415bf17667d6e41": "Ybodychange",
    "1eb81867032b016a59662043cbae50daa52dafa9": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": "Ybodychange",
    "cb5e0787a6fc0b0748753b7e7c4c3fdbfd2714b2": "Ymodifierchange",
    "981679e6d7650141fc8737c7e13b16d8b795b408": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "24/09/19 1:51 PM",
      "commitNameOld": "c2731d4b6399f88f76341ed697e80652ed1b61ea",
      "commitAuthorOld": "Jonathan Hung",
      "daysBetweenCommits": 182.6,
      "commitsBetweenForRepo": 717,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,36 @@\n   public void move(Queue newQueue) {\n     writeLock.lock();\n     try {\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-      String newQueueName \u003d newQueue.getQueueName();\n+      String newQueueName \u003d newQueue instanceof CSQueue ?\n+              ((CSQueue) newQueue).getQueuePath() : newQueue.getQueueName();\n       String user \u003d getUser();\n \n       for (RMContainer liveContainer : liveContainers.values()) {\n         Resource resource \u003d liveContainer.getContainer().getResource();\n         ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n         oldMetrics.releaseResources(liveContainer.getNodeLabelExpression(),\n             user, 1, resource);\n         newMetrics.allocateResources(liveContainer.getNodeLabelExpression(),\n             user, 1, resource, false);\n       }\n       for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n         for (RMContainer reservedContainer : map.values()) {\n           ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n           Resource resource \u003d reservedContainer.getReservedResource();\n           oldMetrics.unreserveResource(\n               reservedContainer.getNodeLabelExpression(), user, resource);\n           newMetrics.reserveResource(\n               reservedContainer.getNodeLabelExpression(), user, resource);\n         }\n       }\n \n       if (!isStopped) {\n         appSchedulingInfo.move(newQueue);\n       }\n       this.queue \u003d newQueue;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    writeLock.lock();\n    try {\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      String newQueueName \u003d newQueue instanceof CSQueue ?\n              ((CSQueue) newQueue).getQueuePath() : newQueue.getQueueName();\n      String user \u003d getUser();\n\n      for (RMContainer liveContainer : liveContainers.values()) {\n        Resource resource \u003d liveContainer.getContainer().getResource();\n        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n        oldMetrics.releaseResources(liveContainer.getNodeLabelExpression(),\n            user, 1, resource);\n        newMetrics.allocateResources(liveContainer.getNodeLabelExpression(),\n            user, 1, resource, false);\n      }\n      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n        for (RMContainer reservedContainer : map.values()) {\n          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n          Resource resource \u003d reservedContainer.getReservedResource();\n          oldMetrics.unreserveResource(\n              reservedContainer.getNodeLabelExpression(), user, resource);\n          newMetrics.reserveResource(\n              reservedContainer.getNodeLabelExpression(), user, resource);\n        }\n      }\n\n      if (!isStopped) {\n        appSchedulingInfo.move(newQueue);\n      }\n      this.queue \u003d newQueue;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public void move(Queue newQueue) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       String newQueueName \u003d newQueue.getQueueName();\n       String user \u003d getUser();\n \n       for (RMContainer liveContainer : liveContainers.values()) {\n         Resource resource \u003d liveContainer.getContainer().getResource();\n         ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n         oldMetrics.releaseResources(liveContainer.getNodeLabelExpression(),\n             user, 1, resource);\n         newMetrics.allocateResources(liveContainer.getNodeLabelExpression(),\n             user, 1, resource, false);\n       }\n       for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n         for (RMContainer reservedContainer : map.values()) {\n           ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n           Resource resource \u003d reservedContainer.getReservedResource();\n           oldMetrics.unreserveResource(\n               reservedContainer.getNodeLabelExpression(), user, resource);\n           newMetrics.reserveResource(\n               reservedContainer.getNodeLabelExpression(), user, resource);\n         }\n       }\n \n       if (!isStopped) {\n         appSchedulingInfo.move(newQueue);\n       }\n       this.queue \u003d newQueue;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    writeLock.lock();\n    try {\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      String newQueueName \u003d newQueue.getQueueName();\n      String user \u003d getUser();\n\n      for (RMContainer liveContainer : liveContainers.values()) {\n        Resource resource \u003d liveContainer.getContainer().getResource();\n        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n        oldMetrics.releaseResources(liveContainer.getNodeLabelExpression(),\n            user, 1, resource);\n        newMetrics.allocateResources(liveContainer.getNodeLabelExpression(),\n            user, 1, resource, false);\n      }\n      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n        for (RMContainer reservedContainer : map.values()) {\n          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n          Resource resource \u003d reservedContainer.getReservedResource();\n          oldMetrics.unreserveResource(\n              reservedContainer.getNodeLabelExpression(), user, resource);\n          newMetrics.reserveResource(\n              reservedContainer.getNodeLabelExpression(), user, resource);\n        }\n      }\n\n      if (!isStopped) {\n        appSchedulingInfo.move(newQueue);\n      }\n      this.queue \u003d newQueue;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "e9c2aa1bc383cb08784846534415bf17667d6e41": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6467. CSQueueMetrics needs to update the current metrics for default partition only. Contributed by Manikandan R.\n",
      "commitDate": "19/06/17 9:01 AM",
      "commitName": "e9c2aa1bc383cb08784846534415bf17667d6e41",
      "commitAuthor": "Naganarasimha",
      "commitDateOld": "10/04/17 3:34 PM",
      "commitNameOld": "7999318af12a75b35815461c601d4c25750e8340",
      "commitAuthorOld": "Konstantinos Karanasos",
      "daysBetweenCommits": 69.73,
      "commitsBetweenForRepo": 348,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,35 @@\n   public void move(Queue newQueue) {\n     try {\n       writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       String newQueueName \u003d newQueue.getQueueName();\n       String user \u003d getUser();\n \n       for (RMContainer liveContainer : liveContainers.values()) {\n         Resource resource \u003d liveContainer.getContainer().getResource();\n         ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n-        oldMetrics.releaseResources(user, 1, resource);\n-        newMetrics.allocateResources(user, 1, resource, false);\n+        oldMetrics.releaseResources(liveContainer.getNodeLabelExpression(),\n+            user, 1, resource);\n+        newMetrics.allocateResources(liveContainer.getNodeLabelExpression(),\n+            user, 1, resource, false);\n       }\n       for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n         for (RMContainer reservedContainer : map.values()) {\n           ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n           Resource resource \u003d reservedContainer.getReservedResource();\n-          oldMetrics.unreserveResource(user, resource);\n-          newMetrics.reserveResource(user, resource);\n+          oldMetrics.unreserveResource(\n+              reservedContainer.getNodeLabelExpression(), user, resource);\n+          newMetrics.reserveResource(\n+              reservedContainer.getNodeLabelExpression(), user, resource);\n         }\n       }\n \n       if (!isStopped) {\n         appSchedulingInfo.move(newQueue);\n       }\n       this.queue \u003d newQueue;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      String newQueueName \u003d newQueue.getQueueName();\n      String user \u003d getUser();\n\n      for (RMContainer liveContainer : liveContainers.values()) {\n        Resource resource \u003d liveContainer.getContainer().getResource();\n        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n        oldMetrics.releaseResources(liveContainer.getNodeLabelExpression(),\n            user, 1, resource);\n        newMetrics.allocateResources(liveContainer.getNodeLabelExpression(),\n            user, 1, resource, false);\n      }\n      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n        for (RMContainer reservedContainer : map.values()) {\n          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n          Resource resource \u003d reservedContainer.getReservedResource();\n          oldMetrics.unreserveResource(\n              reservedContainer.getNodeLabelExpression(), user, resource);\n          newMetrics.reserveResource(\n              reservedContainer.getNodeLabelExpression(), user, resource);\n        }\n      }\n\n      if (!isStopped) {\n        appSchedulingInfo.move(newQueue);\n      }\n      this.queue \u003d newQueue;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "1eb81867032b016a59662043cbae50daa52dafa9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6207. Move application across queues should handle delayed event processing. Contributed by Bibin A Chundatt.\n",
      "commitDate": "07/03/17 10:34 PM",
      "commitName": "1eb81867032b016a59662043cbae50daa52dafa9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 10:35 AM",
      "commitNameOld": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 7.5,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,31 @@\n   public void move(Queue newQueue) {\n     try {\n       writeLock.lock();\n       QueueMetrics oldMetrics \u003d queue.getMetrics();\n       QueueMetrics newMetrics \u003d newQueue.getMetrics();\n       String newQueueName \u003d newQueue.getQueueName();\n       String user \u003d getUser();\n+\n       for (RMContainer liveContainer : liveContainers.values()) {\n         Resource resource \u003d liveContainer.getContainer().getResource();\n         ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n         oldMetrics.releaseResources(user, 1, resource);\n         newMetrics.allocateResources(user, 1, resource, false);\n       }\n       for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n         for (RMContainer reservedContainer : map.values()) {\n           ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n           Resource resource \u003d reservedContainer.getReservedResource();\n           oldMetrics.unreserveResource(user, resource);\n           newMetrics.reserveResource(user, resource);\n         }\n       }\n \n-      appSchedulingInfo.move(newQueue);\n+      if (!isStopped) {\n+        appSchedulingInfo.move(newQueue);\n+      }\n       this.queue \u003d newQueue;\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    try {\n      writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      String newQueueName \u003d newQueue.getQueueName();\n      String user \u003d getUser();\n\n      for (RMContainer liveContainer : liveContainers.values()) {\n        Resource resource \u003d liveContainer.getContainer().getResource();\n        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n        oldMetrics.releaseResources(user, 1, resource);\n        newMetrics.allocateResources(user, 1, resource, false);\n      }\n      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n        for (RMContainer reservedContainer : map.values()) {\n          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n          Resource resource \u003d reservedContainer.getReservedResource();\n          oldMetrics.unreserveResource(user, resource);\n          newMetrics.reserveResource(user, resource);\n        }\n      }\n\n      if (!isStopped) {\n        appSchedulingInfo.move(newQueue);\n      }\n      this.queue \u003d newQueue;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  public synchronized void move(Queue newQueue) {\n-    QueueMetrics oldMetrics \u003d queue.getMetrics();\n-    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-    String newQueueName \u003d newQueue.getQueueName();\n-    String user \u003d getUser();\n-    for (RMContainer liveContainer : liveContainers.values()) {\n-      Resource resource \u003d liveContainer.getContainer().getResource();\n-      ((RMContainerImpl)liveContainer).setQueueName(newQueueName);\n-      oldMetrics.releaseResources(user, 1, resource);\n-      newMetrics.allocateResources(user, 1, resource, false);\n-    }\n-    for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n-      for (RMContainer reservedContainer : map.values()) {\n-        ((RMContainerImpl)reservedContainer).setQueueName(newQueueName);\n-        Resource resource \u003d reservedContainer.getReservedResource();\n-        oldMetrics.unreserveResource(user, resource);\n-        newMetrics.reserveResource(user, resource);\n+  public void move(Queue newQueue) {\n+    try {\n+      writeLock.lock();\n+      QueueMetrics oldMetrics \u003d queue.getMetrics();\n+      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n+      String newQueueName \u003d newQueue.getQueueName();\n+      String user \u003d getUser();\n+      for (RMContainer liveContainer : liveContainers.values()) {\n+        Resource resource \u003d liveContainer.getContainer().getResource();\n+        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n+        oldMetrics.releaseResources(user, 1, resource);\n+        newMetrics.allocateResources(user, 1, resource, false);\n       }\n-    }\n+      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n+        for (RMContainer reservedContainer : map.values()) {\n+          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n+          Resource resource \u003d reservedContainer.getReservedResource();\n+          oldMetrics.unreserveResource(user, resource);\n+          newMetrics.reserveResource(user, resource);\n+        }\n+      }\n \n-    appSchedulingInfo.move(newQueue);\n-    this.queue \u003d newQueue;\n+      appSchedulingInfo.move(newQueue);\n+      this.queue \u003d newQueue;\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void move(Queue newQueue) {\n    try {\n      writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      String newQueueName \u003d newQueue.getQueueName();\n      String user \u003d getUser();\n      for (RMContainer liveContainer : liveContainers.values()) {\n        Resource resource \u003d liveContainer.getContainer().getResource();\n        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n        oldMetrics.releaseResources(user, 1, resource);\n        newMetrics.allocateResources(user, 1, resource, false);\n      }\n      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n        for (RMContainer reservedContainer : map.values()) {\n          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n          Resource resource \u003d reservedContainer.getReservedResource();\n          oldMetrics.unreserveResource(user, resource);\n          newMetrics.reserveResource(user, resource);\n        }\n      }\n\n      appSchedulingInfo.move(newQueue);\n      this.queue \u003d newQueue;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "30/08/16 3:52 PM",
          "commitNameOld": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 19.43,
          "commitsBetweenForRepo": 91,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,28 @@\n-  public synchronized void move(Queue newQueue) {\n-    QueueMetrics oldMetrics \u003d queue.getMetrics();\n-    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n-    String newQueueName \u003d newQueue.getQueueName();\n-    String user \u003d getUser();\n-    for (RMContainer liveContainer : liveContainers.values()) {\n-      Resource resource \u003d liveContainer.getContainer().getResource();\n-      ((RMContainerImpl)liveContainer).setQueueName(newQueueName);\n-      oldMetrics.releaseResources(user, 1, resource);\n-      newMetrics.allocateResources(user, 1, resource, false);\n-    }\n-    for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n-      for (RMContainer reservedContainer : map.values()) {\n-        ((RMContainerImpl)reservedContainer).setQueueName(newQueueName);\n-        Resource resource \u003d reservedContainer.getReservedResource();\n-        oldMetrics.unreserveResource(user, resource);\n-        newMetrics.reserveResource(user, resource);\n+  public void move(Queue newQueue) {\n+    try {\n+      writeLock.lock();\n+      QueueMetrics oldMetrics \u003d queue.getMetrics();\n+      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n+      String newQueueName \u003d newQueue.getQueueName();\n+      String user \u003d getUser();\n+      for (RMContainer liveContainer : liveContainers.values()) {\n+        Resource resource \u003d liveContainer.getContainer().getResource();\n+        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n+        oldMetrics.releaseResources(user, 1, resource);\n+        newMetrics.allocateResources(user, 1, resource, false);\n       }\n-    }\n+      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n+        for (RMContainer reservedContainer : map.values()) {\n+          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n+          Resource resource \u003d reservedContainer.getReservedResource();\n+          oldMetrics.unreserveResource(user, resource);\n+          newMetrics.reserveResource(user, resource);\n+        }\n+      }\n \n-    appSchedulingInfo.move(newQueue);\n-    this.queue \u003d newQueue;\n+      appSchedulingInfo.move(newQueue);\n+      this.queue \u003d newQueue;\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void move(Queue newQueue) {\n    try {\n      writeLock.lock();\n      QueueMetrics oldMetrics \u003d queue.getMetrics();\n      QueueMetrics newMetrics \u003d newQueue.getMetrics();\n      String newQueueName \u003d newQueue.getQueueName();\n      String user \u003d getUser();\n      for (RMContainer liveContainer : liveContainers.values()) {\n        Resource resource \u003d liveContainer.getContainer().getResource();\n        ((RMContainerImpl) liveContainer).setQueueName(newQueueName);\n        oldMetrics.releaseResources(user, 1, resource);\n        newMetrics.allocateResources(user, 1, resource, false);\n      }\n      for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n        for (RMContainer reservedContainer : map.values()) {\n          ((RMContainerImpl) reservedContainer).setQueueName(newQueueName);\n          Resource resource \u003d reservedContainer.getReservedResource();\n          oldMetrics.unreserveResource(user, resource);\n          newMetrics.reserveResource(user, resource);\n        }\n      }\n\n      appSchedulingInfo.move(newQueue);\n      this.queue \u003d newQueue;\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "bb62e0592566b2fcae7136b30972aad2d3ac55b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4390. Do surgical preemption based on reserved container in CapacityScheduler. Contributed by Wangda Tan\n",
      "commitDate": "05/05/16 12:56 PM",
      "commitName": "bb62e0592566b2fcae7136b30972aad2d3ac55b0",
      "commitAuthor": "Jian He",
      "commitDateOld": "24/02/16 6:33 PM",
      "commitNameOld": "c684f2b007a4808dafbe1c1d3ce01758e281d329",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 70.72,
      "commitsBetweenForRepo": 421,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,23 @@\n   public synchronized void move(Queue newQueue) {\n     QueueMetrics oldMetrics \u003d queue.getMetrics();\n     QueueMetrics newMetrics \u003d newQueue.getMetrics();\n+    String newQueueName \u003d newQueue.getQueueName();\n     String user \u003d getUser();\n     for (RMContainer liveContainer : liveContainers.values()) {\n       Resource resource \u003d liveContainer.getContainer().getResource();\n+      ((RMContainerImpl)liveContainer).setQueueName(newQueueName);\n       oldMetrics.releaseResources(user, 1, resource);\n       newMetrics.allocateResources(user, 1, resource, false);\n     }\n     for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n       for (RMContainer reservedContainer : map.values()) {\n+        ((RMContainerImpl)reservedContainer).setQueueName(newQueueName);\n         Resource resource \u003d reservedContainer.getReservedResource();\n         oldMetrics.unreserveResource(user, resource);\n         newMetrics.reserveResource(user, resource);\n       }\n     }\n \n     appSchedulingInfo.move(newQueue);\n     this.queue \u003d newQueue;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    String newQueueName \u003d newQueue.getQueueName();\n    String user \u003d getUser();\n    for (RMContainer liveContainer : liveContainers.values()) {\n      Resource resource \u003d liveContainer.getContainer().getResource();\n      ((RMContainerImpl)liveContainer).setQueueName(newQueueName);\n      oldMetrics.releaseResources(user, 1, resource);\n      newMetrics.allocateResources(user, 1, resource, false);\n    }\n    for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n      for (RMContainer reservedContainer : map.values()) {\n        ((RMContainerImpl)reservedContainer).setQueueName(newQueueName);\n        Resource resource \u003d reservedContainer.getReservedResource();\n        oldMetrics.unreserveResource(user, resource);\n        newMetrics.reserveResource(user, resource);\n      }\n    }\n\n    appSchedulingInfo.move(newQueue);\n    this.queue \u003d newQueue;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {}
    },
    "cb5e0787a6fc0b0748753b7e7c4c3fdbfd2714b2": {
      "type": "Ymodifierchange",
      "commitMessage": "YARN-1498 addendum to fix findbugs warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564018 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/02/14 11:30 AM",
      "commitName": "cb5e0787a6fc0b0748753b7e7c4c3fdbfd2714b2",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "30/01/14 4:14 PM",
      "commitNameOld": "981679e6d7650141fc8737c7e13b16d8b795b408",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 3.8,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n-  public void move(Queue newQueue) {\n+  public synchronized void move(Queue newQueue) {\n     QueueMetrics oldMetrics \u003d queue.getMetrics();\n     QueueMetrics newMetrics \u003d newQueue.getMetrics();\n     String user \u003d getUser();\n     for (RMContainer liveContainer : liveContainers.values()) {\n       Resource resource \u003d liveContainer.getContainer().getResource();\n       oldMetrics.releaseResources(user, 1, resource);\n       newMetrics.allocateResources(user, 1, resource, false);\n     }\n     for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n       for (RMContainer reservedContainer : map.values()) {\n         Resource resource \u003d reservedContainer.getReservedResource();\n         oldMetrics.unreserveResource(user, resource);\n         newMetrics.reserveResource(user, resource);\n       }\n     }\n \n     appSchedulingInfo.move(newQueue);\n     this.queue \u003d newQueue;\n   }  \n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    String user \u003d getUser();\n    for (RMContainer liveContainer : liveContainers.values()) {\n      Resource resource \u003d liveContainer.getContainer().getResource();\n      oldMetrics.releaseResources(user, 1, resource);\n      newMetrics.allocateResources(user, 1, resource, false);\n    }\n    for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n      for (RMContainer reservedContainer : map.values()) {\n        Resource resource \u003d reservedContainer.getReservedResource();\n        oldMetrics.unreserveResource(user, resource);\n        newMetrics.reserveResource(user, resource);\n      }\n    }\n\n    appSchedulingInfo.move(newQueue);\n    this.queue \u003d newQueue;\n  }  ",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java",
      "extendedDetails": {
        "oldValue": "[public]",
        "newValue": "[public, synchronized]"
      }
    },
    "981679e6d7650141fc8737c7e13b16d8b795b408": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1498. Common scheduler changes for moving apps between queues (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1563021 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/14 4:14 PM",
      "commitName": "981679e6d7650141fc8737c7e13b16d8b795b408",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,20 @@\n+  public void move(Queue newQueue) {\n+    QueueMetrics oldMetrics \u003d queue.getMetrics();\n+    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n+    String user \u003d getUser();\n+    for (RMContainer liveContainer : liveContainers.values()) {\n+      Resource resource \u003d liveContainer.getContainer().getResource();\n+      oldMetrics.releaseResources(user, 1, resource);\n+      newMetrics.allocateResources(user, 1, resource, false);\n+    }\n+    for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n+      for (RMContainer reservedContainer : map.values()) {\n+        Resource resource \u003d reservedContainer.getReservedResource();\n+        oldMetrics.unreserveResource(user, resource);\n+        newMetrics.reserveResource(user, resource);\n+      }\n+    }\n+\n+    appSchedulingInfo.move(newQueue);\n+    this.queue \u003d newQueue;\n+  }  \n\\ No newline at end of file\n",
      "actualSource": "  public void move(Queue newQueue) {\n    QueueMetrics oldMetrics \u003d queue.getMetrics();\n    QueueMetrics newMetrics \u003d newQueue.getMetrics();\n    String user \u003d getUser();\n    for (RMContainer liveContainer : liveContainers.values()) {\n      Resource resource \u003d liveContainer.getContainer().getResource();\n      oldMetrics.releaseResources(user, 1, resource);\n      newMetrics.allocateResources(user, 1, resource, false);\n    }\n    for (Map\u003cNodeId, RMContainer\u003e map : reservedContainers.values()) {\n      for (RMContainer reservedContainer : map.values()) {\n        Resource resource \u003d reservedContainer.getReservedResource();\n        oldMetrics.unreserveResource(user, resource);\n        newMetrics.reserveResource(user, resource);\n      }\n    }\n\n    appSchedulingInfo.move(newQueue);\n    this.queue \u003d newQueue;\n  }  ",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerApplicationAttempt.java"
    }
  }
}