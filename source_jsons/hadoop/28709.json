{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BuilderUtils.java",
  "functionName": "newContainerToken",
  "functionId": "newContainerToken___nodeId-NodeId__password-byte[]__tokenIdentifier-ContainerTokenIdentifier",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/utils/BuilderUtils.java",
  "functionStartLine": 309,
  "functionEndLine": 320,
  "numCommitsSeen": 104,
  "timeTaken": 8017,
  "changeHistory": [
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
    "a2c42330047bf955a6a585dcddf798920d4c8640",
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "aa60da6c2ec049cc70897afee6c368cb70493773",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": "Yfilerename",
    "a2c42330047bf955a6a585dcddf798920d4c8640": "Ymultichange(Yreturntypechange,Ybodychange)",
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5": "Ymultichange(Yparameterchange,Ybodychange)",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "aa60da6c2ec049cc70897afee6c368cb70493773": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa": "Ymultichange(Yparameterchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d33534c4fb35cb82ff8d56abeeb63a949e72a031": {
      "type": "Yfilerename",
      "commitMessage": "YARN-748. Moved BuilderUtils from yarn-common to yarn-server-common for eventual retirement. Contributed by Jian He.\nMAPREDUCE-5297. Updated MR App since BuilderUtils is no longer public after YARN-748. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489257 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 5:34 PM",
      "commitName": "d33534c4fb35cb82ff8d56abeeb63a949e72a031",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 4:56 PM",
      "commitNameOld": "72e1568be34ff9d8d50dc438ec3f6a86552a2f83",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Token newContainerToken(NodeId nodeId,\n      byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d\n        NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    Token containerToken \u003d\n        newToken(Token.class, tokenIdentifier.getBytes(),\n          ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/utils/BuilderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/utils/BuilderUtils.java"
      }
    },
    "a2c42330047bf955a6a585dcddf798920d4c8640": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/13 2:43 PM",
      "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/06/13 2:43 PM",
          "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "31/05/13 5:14 PM",
          "commitNameOld": "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 0.89,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public static ContainerToken newContainerToken(NodeId nodeId,\n+  public static Token newContainerToken(NodeId nodeId,\n       byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n     // RPC layer client expects ip:port as service for tokens\n     InetSocketAddress addr \u003d\n         NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n     // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n-    ContainerToken containerToken \u003d\n-        newToken(ContainerToken.class, tokenIdentifier.getBytes(),\n+    Token containerToken \u003d\n+        newToken(Token.class, tokenIdentifier.getBytes(),\n           ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n             .buildTokenService(addr).toString());\n     return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Token newContainerToken(NodeId nodeId,\n      byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d\n        NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    Token containerToken \u003d\n        newToken(Token.class, tokenIdentifier.getBytes(),\n          ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {
            "oldValue": "ContainerToken",
            "newValue": "Token"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-717. Put object creation factories for Token in the class itself and remove useless derivations for specific tokens. Contributed by Jian He.\nMAPREDUCE-5289. Updated MR App to use Token directly after YARN-717. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1488616 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/06/13 2:43 PM",
          "commitName": "a2c42330047bf955a6a585dcddf798920d4c8640",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "31/05/13 5:14 PM",
          "commitNameOld": "39f019f41392d9e46ea1dc86ddd5563aabbeda1e",
          "commitAuthorOld": "Siddharth Seth",
          "daysBetweenCommits": 0.89,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,12 @@\n-  public static ContainerToken newContainerToken(NodeId nodeId,\n+  public static Token newContainerToken(NodeId nodeId,\n       byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n     // RPC layer client expects ip:port as service for tokens\n     InetSocketAddress addr \u003d\n         NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n     // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n-    ContainerToken containerToken \u003d\n-        newToken(ContainerToken.class, tokenIdentifier.getBytes(),\n+    Token containerToken \u003d\n+        newToken(Token.class, tokenIdentifier.getBytes(),\n           ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n             .buildTokenService(addr).toString());\n     return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Token newContainerToken(NodeId nodeId,\n      byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d\n        NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    Token containerToken \u003d\n        newToken(Token.class, tokenIdentifier.getBytes(),\n          ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-135. Client tokens should be per app-attempt, and should be unregistered on App-finish. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433570 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/01/13 10:33 AM",
      "commitName": "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
      "commitAuthor": "Siddharth Seth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-135. Client tokens should be per app-attempt, and should be unregistered on App-finish. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433570 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/01/13 10:33 AM",
          "commitName": "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "08/01/13 9:08 PM",
          "commitNameOld": "453926397182078c65a4428eb5de5a90d6af6448",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 6.56,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,12 @@\n   public static ContainerToken newContainerToken(NodeId nodeId,\n-      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n-    ContainerToken containerToken \u003d recordFactory\n-        .newRecordInstance(ContainerToken.class);\n-    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n-    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n-    containerToken.setPassword(password);\n+      byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n     // RPC layer client expects ip:port as service for tokens\n-    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n-        nodeId.getPort());\n-    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token \n-    containerToken.setService(SecurityUtil.buildTokenService(addr).toString());\n+    InetSocketAddress addr \u003d\n+        NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n+    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n+    ContainerToken containerToken \u003d\n+        newToken(ContainerToken.class, tokenIdentifier.getBytes(),\n+          ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n+            .buildTokenService(addr).toString());\n     return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d\n        NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    ContainerToken containerToken \u003d\n        newToken(ContainerToken.class, tokenIdentifier.getBytes(),\n          ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {
            "oldValue": "[nodeId-NodeId, password-ByteBuffer, tokenIdentifier-ContainerTokenIdentifier]",
            "newValue": "[nodeId-NodeId, password-byte[], tokenIdentifier-ContainerTokenIdentifier]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-135. Client tokens should be per app-attempt, and should be unregistered on App-finish. Contributed by Vinod Kumar Vavilapalli\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433570 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "15/01/13 10:33 AM",
          "commitName": "6a2f2551fd13f6d3c932cc9b592e2a23b616a7f5",
          "commitAuthor": "Siddharth Seth",
          "commitDateOld": "08/01/13 9:08 PM",
          "commitNameOld": "453926397182078c65a4428eb5de5a90d6af6448",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 6.56,
          "commitsBetweenForRepo": 52,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,12 @@\n   public static ContainerToken newContainerToken(NodeId nodeId,\n-      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n-    ContainerToken containerToken \u003d recordFactory\n-        .newRecordInstance(ContainerToken.class);\n-    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n-    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n-    containerToken.setPassword(password);\n+      byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n     // RPC layer client expects ip:port as service for tokens\n-    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n-        nodeId.getPort());\n-    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token \n-    containerToken.setService(SecurityUtil.buildTokenService(addr).toString());\n+    InetSocketAddress addr \u003d\n+        NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n+    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n+    ContainerToken containerToken \u003d\n+        newToken(ContainerToken.class, tokenIdentifier.getBytes(),\n+          ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n+            .buildTokenService(addr).toString());\n     return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      byte[] password, ContainerTokenIdentifier tokenIdentifier) {\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d\n        NetUtils.createSocketAddrForHost(nodeId.getHost(), nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token\n    ContainerToken containerToken \u003d\n        newToken(ContainerToken.class, tokenIdentifier.getBytes(),\n          ContainerTokenIdentifier.KIND.toString(), password, SecurityUtil\n            .buildTokenService(addr).toString());\n    return containerToken;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n    ContainerToken containerToken \u003d recordFactory\n        .newRecordInstance(ContainerToken.class);\n    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n    containerToken.setPassword(password);\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n        nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token \n    containerToken.setService(SecurityUtil.buildTokenService(addr).toString());\n    return containerToken;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java"
      }
    },
    "aa60da6c2ec049cc70897afee6c368cb70493773": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4162. Correctly set token service (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1335567 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/05/12 8:07 AM",
      "commitName": "aa60da6c2ec049cc70897afee6c368cb70493773",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "25/03/12 10:45 PM",
      "commitNameOld": "606114d6029758f2be130960b8fc3102457406ba",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 43.39,
      "commitsBetweenForRepo": 333,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n   public static ContainerToken newContainerToken(NodeId nodeId,\n       ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n     ContainerToken containerToken \u003d recordFactory\n         .newRecordInstance(ContainerToken.class);\n     containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n     containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n     containerToken.setPassword(password);\n     // RPC layer client expects ip:port as service for tokens\n-    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n         nodeId.getPort());\n-    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n-        + addr.getPort());\n+    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token \n+    containerToken.setService(SecurityUtil.buildTokenService(addr).toString());\n     return containerToken;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n    ContainerToken containerToken \u003d recordFactory\n        .newRecordInstance(ContainerToken.class);\n    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n    containerToken.setPassword(password);\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddrForHost(nodeId.getHost(),\n        nodeId.getPort());\n    // NOTE: use SecurityUtil.setTokenService if this becomes a \"real\" token \n    containerToken.setService(SecurityUtil.buildTokenService(addr).toString());\n    return containerToken;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ymultichange(Yrename,Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/10/11 4:45 AM",
          "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/10/11 4:29 PM",
          "commitNameOld": "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 7.51,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,14 @@\n-  public static Container newContainer(ContainerId containerId,\n-      NodeId nodeId, String nodeHttpAddress,\n-      Resource resource, Priority priority) {\n-    Container container \u003d recordFactory.newRecordInstance(Container.class);\n-    container.setId(containerId);\n-    container.setNodeId(nodeId);\n-    container.setNodeHttpAddress(nodeHttpAddress);\n-    container.setResource(resource);\n-    container.setPriority(priority);\n-    container.setState(ContainerState.NEW);\n-    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n-    containerStatus.setContainerId(containerId);\n-    containerStatus.setState(ContainerState.NEW);\n-    container.setContainerStatus(containerStatus);\n-    return container;\n+  public static ContainerToken newContainerToken(NodeId nodeId,\n+      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n+    ContainerToken containerToken \u003d recordFactory\n+        .newRecordInstance(ContainerToken.class);\n+    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n+    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n+    containerToken.setPassword(password);\n+    // RPC layer client expects ip:port as service for tokens\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n+        nodeId.getPort());\n+    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n+        + addr.getPort());\n+    return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n    ContainerToken containerToken \u003d recordFactory\n        .newRecordInstance(ContainerToken.class);\n    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n    containerToken.setPassword(password);\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n        nodeId.getPort());\n    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n        + addr.getPort());\n    return containerToken;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {
            "oldValue": "newContainer",
            "newValue": "newContainerToken"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/10/11 4:45 AM",
          "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/10/11 4:29 PM",
          "commitNameOld": "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 7.51,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,14 @@\n-  public static Container newContainer(ContainerId containerId,\n-      NodeId nodeId, String nodeHttpAddress,\n-      Resource resource, Priority priority) {\n-    Container container \u003d recordFactory.newRecordInstance(Container.class);\n-    container.setId(containerId);\n-    container.setNodeId(nodeId);\n-    container.setNodeHttpAddress(nodeHttpAddress);\n-    container.setResource(resource);\n-    container.setPriority(priority);\n-    container.setState(ContainerState.NEW);\n-    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n-    containerStatus.setContainerId(containerId);\n-    containerStatus.setState(ContainerState.NEW);\n-    container.setContainerStatus(containerStatus);\n-    return container;\n+  public static ContainerToken newContainerToken(NodeId nodeId,\n+      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n+    ContainerToken containerToken \u003d recordFactory\n+        .newRecordInstance(ContainerToken.class);\n+    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n+    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n+    containerToken.setPassword(password);\n+    // RPC layer client expects ip:port as service for tokens\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n+        nodeId.getPort());\n+    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n+        + addr.getPort());\n+    return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n    ContainerToken containerToken \u003d recordFactory\n        .newRecordInstance(ContainerToken.class);\n    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n    containerToken.setPassword(password);\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n        nodeId.getPort());\n    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n        + addr.getPort());\n    return containerToken;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, nodeId-NodeId, nodeHttpAddress-String, resource-Resource, priority-Priority]",
            "newValue": "[nodeId-NodeId, password-ByteBuffer, tokenIdentifier-ContainerTokenIdentifier]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/10/11 4:45 AM",
          "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/10/11 4:29 PM",
          "commitNameOld": "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 7.51,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,14 @@\n-  public static Container newContainer(ContainerId containerId,\n-      NodeId nodeId, String nodeHttpAddress,\n-      Resource resource, Priority priority) {\n-    Container container \u003d recordFactory.newRecordInstance(Container.class);\n-    container.setId(containerId);\n-    container.setNodeId(nodeId);\n-    container.setNodeHttpAddress(nodeHttpAddress);\n-    container.setResource(resource);\n-    container.setPriority(priority);\n-    container.setState(ContainerState.NEW);\n-    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n-    containerStatus.setContainerId(containerId);\n-    containerStatus.setState(ContainerState.NEW);\n-    container.setContainerStatus(containerStatus);\n-    return container;\n+  public static ContainerToken newContainerToken(NodeId nodeId,\n+      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n+    ContainerToken containerToken \u003d recordFactory\n+        .newRecordInstance(ContainerToken.class);\n+    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n+    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n+    containerToken.setPassword(password);\n+    // RPC layer client expects ip:port as service for tokens\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n+        nodeId.getPort());\n+    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n+        + addr.getPort());\n+    return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n    ContainerToken containerToken \u003d recordFactory\n        .newRecordInstance(ContainerToken.class);\n    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n    containerToken.setPassword(password);\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n        nodeId.getPort());\n    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n        + addr.getPort());\n    return containerToken;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {
            "oldValue": "Container",
            "newValue": "ContainerToken"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/10/11 4:45 AM",
          "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "12/10/11 4:29 PM",
          "commitNameOld": "26d63ecdae0f1e27606301f90ca93b3a0f62c5d4",
          "commitAuthorOld": "Arun Murthy",
          "daysBetweenCommits": 7.51,
          "commitsBetweenForRepo": 64,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,14 @@\n-  public static Container newContainer(ContainerId containerId,\n-      NodeId nodeId, String nodeHttpAddress,\n-      Resource resource, Priority priority) {\n-    Container container \u003d recordFactory.newRecordInstance(Container.class);\n-    container.setId(containerId);\n-    container.setNodeId(nodeId);\n-    container.setNodeHttpAddress(nodeHttpAddress);\n-    container.setResource(resource);\n-    container.setPriority(priority);\n-    container.setState(ContainerState.NEW);\n-    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n-    containerStatus.setContainerId(containerId);\n-    containerStatus.setState(ContainerState.NEW);\n-    container.setContainerStatus(containerStatus);\n-    return container;\n+  public static ContainerToken newContainerToken(NodeId nodeId,\n+      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n+    ContainerToken containerToken \u003d recordFactory\n+        .newRecordInstance(ContainerToken.class);\n+    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n+    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n+    containerToken.setPassword(password);\n+    // RPC layer client expects ip:port as service for tokens\n+    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n+        nodeId.getPort());\n+    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n+        + addr.getPort());\n+    return containerToken;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static ContainerToken newContainerToken(NodeId nodeId,\n      ByteBuffer password, ContainerTokenIdentifier tokenIdentifier) {\n    ContainerToken containerToken \u003d recordFactory\n        .newRecordInstance(ContainerToken.class);\n    containerToken.setIdentifier(ByteBuffer.wrap(tokenIdentifier.getBytes()));\n    containerToken.setKind(ContainerTokenIdentifier.KIND.toString());\n    containerToken.setPassword(password);\n    // RPC layer client expects ip:port as service for tokens\n    InetSocketAddress addr \u003d NetUtils.createSocketAddr(nodeId.getHost(),\n        nodeId.getPort());\n    containerToken.setService(addr.getAddress().getHostAddress() + \":\"\n        + addr.getPort());\n    return containerToken;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "1e6dfa7472ad78a252d05c8ebffe086d938b61fa": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-2646. Fixed AMRMProtocol to return containers based on priority. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175859 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/11 6:25 AM",
      "commitName": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-2646. Fixed AMRMProtocol to return containers based on priority. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175859 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/11 6:25 AM",
          "commitName": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "25/09/11 7:46 AM",
          "commitNameOld": "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n   public static Container newContainer(ContainerId containerId,\n-      NodeId nodeId, String nodeHttpAddress, Resource resource) {\n+      NodeId nodeId, String nodeHttpAddress, \n+      Resource resource, Priority priority) {\n     Container container \u003d recordFactory.newRecordInstance(Container.class);\n     container.setId(containerId);\n     container.setNodeId(nodeId);\n     container.setNodeHttpAddress(nodeHttpAddress);\n     container.setResource(resource);\n+    container.setPriority(priority);\n     container.setState(ContainerState.NEW);\n     ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n     containerStatus.setContainerId(containerId);\n     containerStatus.setState(ContainerState.NEW);\n     container.setContainerStatus(containerStatus);\n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Container newContainer(ContainerId containerId,\n      NodeId nodeId, String nodeHttpAddress, \n      Resource resource, Priority priority) {\n    Container container \u003d recordFactory.newRecordInstance(Container.class);\n    container.setId(containerId);\n    container.setNodeId(nodeId);\n    container.setNodeHttpAddress(nodeHttpAddress);\n    container.setResource(resource);\n    container.setPriority(priority);\n    container.setState(ContainerState.NEW);\n    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n    containerStatus.setContainerId(containerId);\n    containerStatus.setState(ContainerState.NEW);\n    container.setContainerStatus(containerStatus);\n    return container;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {
            "oldValue": "[containerId-ContainerId, nodeId-NodeId, nodeHttpAddress-String, resource-Resource]",
            "newValue": "[containerId-ContainerId, nodeId-NodeId, nodeHttpAddress-String, resource-Resource, priority-Priority]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-2646. Fixed AMRMProtocol to return containers based on priority. Contributed by Sharad Agarwal and Arun C Murthy.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175859 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "26/09/11 6:25 AM",
          "commitName": "1e6dfa7472ad78a252d05c8ebffe086d938b61fa",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "25/09/11 7:46 AM",
          "commitNameOld": "a5c9ede1433871fcf4e2e802ee2a65950ecd1e72",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.94,
          "commitsBetweenForRepo": 3,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,16 @@\n   public static Container newContainer(ContainerId containerId,\n-      NodeId nodeId, String nodeHttpAddress, Resource resource) {\n+      NodeId nodeId, String nodeHttpAddress, \n+      Resource resource, Priority priority) {\n     Container container \u003d recordFactory.newRecordInstance(Container.class);\n     container.setId(containerId);\n     container.setNodeId(nodeId);\n     container.setNodeHttpAddress(nodeHttpAddress);\n     container.setResource(resource);\n+    container.setPriority(priority);\n     container.setState(ContainerState.NEW);\n     ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n     containerStatus.setContainerId(containerId);\n     containerStatus.setState(ContainerState.NEW);\n     container.setContainerStatus(containerStatus);\n     return container;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static Container newContainer(ContainerId containerId,\n      NodeId nodeId, String nodeHttpAddress, \n      Resource resource, Priority priority) {\n    Container container \u003d recordFactory.newRecordInstance(Container.class);\n    container.setId(containerId);\n    container.setNodeId(nodeId);\n    container.setNodeHttpAddress(nodeHttpAddress);\n    container.setResource(resource);\n    container.setPriority(priority);\n    container.setState(ContainerState.NEW);\n    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n    containerStatus.setContainerId(containerId);\n    containerStatus.setState(ContainerState.NEW);\n    container.setContainerStatus(containerStatus);\n    return container;\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static Container newContainer(ContainerId containerId,\n      NodeId nodeId, String nodeHttpAddress, Resource resource) {\n    Container container \u003d recordFactory.newRecordInstance(Container.class);\n    container.setId(containerId);\n    container.setNodeId(nodeId);\n    container.setNodeHttpAddress(nodeHttpAddress);\n    container.setResource(resource);\n    container.setState(ContainerState.NEW);\n    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n    containerStatus.setContainerId(containerId);\n    containerStatus.setState(ContainerState.NEW);\n    container.setContainerStatus(containerStatus);\n    return container;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,14 @@\n+  public static Container newContainer(ContainerId containerId,\n+      NodeId nodeId, String nodeHttpAddress, Resource resource) {\n+    Container container \u003d recordFactory.newRecordInstance(Container.class);\n+    container.setId(containerId);\n+    container.setNodeId(nodeId);\n+    container.setNodeHttpAddress(nodeHttpAddress);\n+    container.setResource(resource);\n+    container.setState(ContainerState.NEW);\n+    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n+    containerStatus.setContainerId(containerId);\n+    containerStatus.setState(ContainerState.NEW);\n+    container.setContainerStatus(containerStatus);\n+    return container;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Container newContainer(ContainerId containerId,\n      NodeId nodeId, String nodeHttpAddress, Resource resource) {\n    Container container \u003d recordFactory.newRecordInstance(Container.class);\n    container.setId(containerId);\n    container.setNodeId(nodeId);\n    container.setNodeHttpAddress(nodeHttpAddress);\n    container.setResource(resource);\n    container.setState(ContainerState.NEW);\n    ContainerStatus containerStatus \u003d Records.newRecord(ContainerStatus.class);\n    containerStatus.setContainerId(containerId);\n    containerStatus.setState(ContainerState.NEW);\n    container.setContainerStatus(containerStatus);\n    return container;\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/BuilderUtils.java"
    }
  }
}