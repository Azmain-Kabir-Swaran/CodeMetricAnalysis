{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SingleConstraintAppPlacementAllocator.java",
  "functionName": "precheckNode",
  "functionId": "precheckNode___schedulerNode-SchedulerNode__schedulingMode-SchedulingMode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/SingleConstraintAppPlacementAllocator.java",
  "functionStartLine": 387,
  "functionEndLine": 390,
  "numCommitsSeen": 17,
  "timeTaken": 2957,
  "changeHistory": [
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
    "38af23796971193fa529c3d08ffde8fcd6e607b6"
  ],
  "changeHistoryShort": {
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": "Ybodychange",
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "06/05/19 5:00 AM",
      "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 59.59,
      "commitsBetweenForRepo": 383,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,4 @@\n   public boolean precheckNode(SchedulerNode schedulerNode,\n       SchedulingMode schedulingMode) {\n-    // We will only look at node label \u003d nodeLabelToLookAt according to\n-    // schedulingMode and partition of node.\n-    String nodePartitionToLookAt;\n-    if (schedulingMode \u003d\u003d SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY) {\n-      nodePartitionToLookAt \u003d schedulerNode.getPartition();\n-    } else{\n-      nodePartitionToLookAt \u003d RMNodeLabelsManager.NO_LABEL;\n-    }\n-\n-    readLock.lock();\n-    try {\n-      // Check node partition as well as cardinality/pending resources.\n-      return this.targetNodePartition.equals(nodePartitionToLookAt)\n-          \u0026\u0026 checkCardinalityAndPending(schedulerNode);\n-    } finally {\n-      readLock.unlock();\n-    }\n-\n+    return precheckNode(schedulerNode, schedulingMode, Optional.empty());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean precheckNode(SchedulerNode schedulerNode,\n      SchedulingMode schedulingMode) {\n    return precheckNode(schedulerNode, schedulingMode, Optional.empty());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/SingleConstraintAppPlacementAllocator.java",
      "extendedDetails": {}
    },
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,21 @@\n+  public boolean precheckNode(SchedulerNode schedulerNode,\n+      SchedulingMode schedulingMode) {\n+    // We will only look at node label \u003d nodeLabelToLookAt according to\n+    // schedulingMode and partition of node.\n+    String nodePartitionToLookAt;\n+    if (schedulingMode \u003d\u003d SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY) {\n+      nodePartitionToLookAt \u003d schedulerNode.getPartition();\n+    } else{\n+      nodePartitionToLookAt \u003d RMNodeLabelsManager.NO_LABEL;\n+    }\n+\n+    readLock.lock();\n+    try {\n+      // Check node partition as well as cardinality/pending resources.\n+      return this.targetNodePartition.equals(nodePartitionToLookAt)\n+          \u0026\u0026 checkCardinalityAndPending(schedulerNode);\n+    } finally {\n+      readLock.unlock();\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean precheckNode(SchedulerNode schedulerNode,\n      SchedulingMode schedulingMode) {\n    // We will only look at node label \u003d nodeLabelToLookAt according to\n    // schedulingMode and partition of node.\n    String nodePartitionToLookAt;\n    if (schedulingMode \u003d\u003d SchedulingMode.RESPECT_PARTITION_EXCLUSIVITY) {\n      nodePartitionToLookAt \u003d schedulerNode.getPartition();\n    } else{\n      nodePartitionToLookAt \u003d RMNodeLabelsManager.NO_LABEL;\n    }\n\n    readLock.lock();\n    try {\n      // Check node partition as well as cardinality/pending resources.\n      return this.targetNodePartition.equals(nodePartitionToLookAt)\n          \u0026\u0026 checkCardinalityAndPending(schedulerNode);\n    } finally {\n      readLock.unlock();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/placement/SingleConstraintAppPlacementAllocator.java"
    }
  }
}