{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SaslRpcClient.java",
  "functionName": "read",
  "functionId": "read___buf-byte[]__off-int__len-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java",
  "functionStartLine": 574,
  "functionEndLine": 586,
  "numCommitsSeen": 30,
  "timeTaken": 1725,
  "changeHistory": [
    "0bdd263d82a4510f16df49238d57c9f78ac28ae7",
    "3472e3bd6c50558870b86c9ccfea5072385fa991",
    "c03c8fe199429a43c6aa944016566738abd9b193"
  ],
  "changeHistoryShort": {
    "0bdd263d82a4510f16df49238d57c9f78ac28ae7": "Ybodychange",
    "3472e3bd6c50558870b86c9ccfea5072385fa991": "Ymultichange(Ymodifierchange,Ybodychange)",
    "c03c8fe199429a43c6aa944016566738abd9b193": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0bdd263d82a4510f16df49238d57c9f78ac28ae7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13017. Implementations of InputStream.read(buffer, offset, bytes) to exit 0 if bytes\u003d\u003d0. Contributed by Steve Loughran.\n",
      "commitDate": "26/10/16 11:46 PM",
      "commitName": "0bdd263d82a4510f16df49238d57c9f78ac28ae7",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "09/09/16 8:39 AM",
      "commitNameOld": "d4d076876a8d0002bd3a73491d8459d11cb4896c",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 47.63,
      "commitsBetweenForRepo": 331,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,13 @@\n     public synchronized int read(byte[] buf, int off, int len) throws IOException {\n+      if (len \u003d\u003d 0) {\n+        return 0;\n+      }\n       // fill the buffer with the next RPC message\n       if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n         readNextRpcPacket();\n       }\n       // satisfy as much of the request as possible\n       int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n       unwrappedRpcBuffer.get(buf, off, readLen);\n       return readLen;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized int read(byte[] buf, int off, int len) throws IOException {\n      if (len \u003d\u003d 0) {\n        return 0;\n      }\n      // fill the buffer with the next RPC message\n      if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n        readNextRpcPacket();\n      }\n      // satisfy as much of the request as possible\n      int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n      unwrappedRpcBuffer.get(buf, off, readLen);\n      return readLen;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java",
      "extendedDetails": {}
    },
    "3472e3bd6c50558870b86c9ccfea5072385fa991": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-11494. Lock acquisition on WrappedInputStream#unwrappedRpcBuffer may race with another thread. Contributed by Ted Yu.\n",
      "commitDate": "02/02/15 10:34 AM",
      "commitName": "3472e3bd6c50558870b86c9ccfea5072385fa991",
      "commitAuthor": "Benoy Antony",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-11494. Lock acquisition on WrappedInputStream#unwrappedRpcBuffer may race with another thread. Contributed by Ted Yu.\n",
          "commitDate": "02/02/15 10:34 AM",
          "commitName": "3472e3bd6c50558870b86c9ccfea5072385fa991",
          "commitAuthor": "Benoy Antony",
          "commitDateOld": "23/03/14 5:00 PM",
          "commitNameOld": "0710b5890b4795f8f9c57b17b669b6a7190a5d17",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 315.77,
          "commitsBetweenForRepo": 2429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,10 @@\n-    public int read(byte[] buf, int off, int len) throws IOException {\n-      synchronized(unwrappedRpcBuffer) {\n-        // fill the buffer with the next RPC message\n-        if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n-          readNextRpcPacket();\n-        }\n-        // satisfy as much of the request as possible\n-        int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n-        unwrappedRpcBuffer.get(buf, off, readLen);\n-        return readLen;\n+    public synchronized int read(byte[] buf, int off, int len) throws IOException {\n+      // fill the buffer with the next RPC message\n+      if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n+        readNextRpcPacket();\n       }\n+      // satisfy as much of the request as possible\n+      int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n+      unwrappedRpcBuffer.get(buf, off, readLen);\n+      return readLen;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public synchronized int read(byte[] buf, int off, int len) throws IOException {\n      // fill the buffer with the next RPC message\n      if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n        readNextRpcPacket();\n      }\n      // satisfy as much of the request as possible\n      int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n      unwrappedRpcBuffer.get(buf, off, readLen);\n      return readLen;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-11494. Lock acquisition on WrappedInputStream#unwrappedRpcBuffer may race with another thread. Contributed by Ted Yu.\n",
          "commitDate": "02/02/15 10:34 AM",
          "commitName": "3472e3bd6c50558870b86c9ccfea5072385fa991",
          "commitAuthor": "Benoy Antony",
          "commitDateOld": "23/03/14 5:00 PM",
          "commitNameOld": "0710b5890b4795f8f9c57b17b669b6a7190a5d17",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 315.77,
          "commitsBetweenForRepo": 2429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,12 +1,10 @@\n-    public int read(byte[] buf, int off, int len) throws IOException {\n-      synchronized(unwrappedRpcBuffer) {\n-        // fill the buffer with the next RPC message\n-        if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n-          readNextRpcPacket();\n-        }\n-        // satisfy as much of the request as possible\n-        int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n-        unwrappedRpcBuffer.get(buf, off, readLen);\n-        return readLen;\n+    public synchronized int read(byte[] buf, int off, int len) throws IOException {\n+      // fill the buffer with the next RPC message\n+      if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n+        readNextRpcPacket();\n       }\n+      // satisfy as much of the request as possible\n+      int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n+      unwrappedRpcBuffer.get(buf, off, readLen);\n+      return readLen;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public synchronized int read(byte[] buf, int off, int len) throws IOException {\n      // fill the buffer with the next RPC message\n      if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n        readNextRpcPacket();\n      }\n      // satisfy as much of the request as possible\n      int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n      unwrappedRpcBuffer.get(buf, off, readLen);\n      return readLen;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java",
          "extendedDetails": {}
        }
      ]
    },
    "c03c8fe199429a43c6aa944016566738abd9b193": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9820. RPCv9 wire protocol is insufficient to support multiplexing. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1512091 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/08/13 4:02 PM",
      "commitName": "c03c8fe199429a43c6aa944016566738abd9b193",
      "commitAuthor": "Jitendra Nath Pandey",
      "diff": "@@ -0,0 +1,12 @@\n+    public int read(byte[] buf, int off, int len) throws IOException {\n+      synchronized(unwrappedRpcBuffer) {\n+        // fill the buffer with the next RPC message\n+        if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n+          readNextRpcPacket();\n+        }\n+        // satisfy as much of the request as possible\n+        int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n+        unwrappedRpcBuffer.get(buf, off, readLen);\n+        return readLen;\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public int read(byte[] buf, int off, int len) throws IOException {\n      synchronized(unwrappedRpcBuffer) {\n        // fill the buffer with the next RPC message\n        if (unwrappedRpcBuffer.remaining() \u003d\u003d 0) {\n          readNextRpcPacket();\n        }\n        // satisfy as much of the request as possible\n        int readLen \u003d Math.min(len, unwrappedRpcBuffer.remaining());\n        unwrappedRpcBuffer.get(buf, off, readLen);\n        return readLen;\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/SaslRpcClient.java"
    }
  }
}