{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MemoryPlacementConstraintManager.java",
  "functionName": "getMultilevelConstraint",
  "functionId": "getMultilevelConstraint___appId-ApplicationId__sourceTags-Set__String____schedulingRequestConstraint-PlacementConstraint",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/MemoryPlacementConstraintManager.java",
  "functionStartLine": 243,
  "functionEndLine": 279,
  "numCommitsSeen": 5,
  "timeTaken": 824,
  "changeHistory": [
    "50723889cc29e8dadfa6ab6afbb90ac798d66878"
  ],
  "changeHistoryShort": {
    "50723889cc29e8dadfa6ab6afbb90ac798d66878": "Yintroduced"
  },
  "changeHistoryDetails": {
    "50723889cc29e8dadfa6ab6afbb90ac798d66878": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7778. Merging of placement constraints defined at different levels. Contributed by Weiwei Yang.\n",
      "commitDate": "02/02/18 2:46 PM",
      "commitName": "50723889cc29e8dadfa6ab6afbb90ac798d66878",
      "commitAuthor": "Konstantinos Karanasos",
      "diff": "@@ -0,0 +1,37 @@\n+  public PlacementConstraint getMultilevelConstraint(ApplicationId appId,\n+      Set\u003cString\u003e sourceTags, PlacementConstraint schedulingRequestConstraint) {\n+    List\u003cPlacementConstraint\u003e constraints \u003d new ArrayList\u003c\u003e();\n+    // Add scheduling request-level constraint.\n+    if (schedulingRequestConstraint !\u003d null) {\n+      constraints.add(schedulingRequestConstraint);\n+    }\n+    // Add app-level constraint if appId is given.\n+    if (appId !\u003d null \u0026\u0026 sourceTags !\u003d null\n+        \u0026\u0026 !sourceTags.isEmpty()) {\n+      constraints.add(getConstraint(appId, sourceTags));\n+    }\n+    // Add global constraint.\n+    if (sourceTags !\u003d null \u0026\u0026 !sourceTags.isEmpty()) {\n+      constraints.add(getGlobalConstraint(sourceTags));\n+    }\n+\n+    // Remove all null or duplicate constraints.\n+    List\u003cPlacementConstraint.AbstractConstraint\u003e allConstraints \u003d\n+        constraints.stream()\n+            .filter(placementConstraint -\u003e placementConstraint !\u003d null\n+            \u0026\u0026 placementConstraint.getConstraintExpr() !\u003d null)\n+            .map(PlacementConstraint::getConstraintExpr)\n+            .distinct()\n+            .collect(Collectors.toList());\n+\n+    // Compose an AND constraint\n+    // When merge request(RC), app(AC) and global constraint(GC),\n+    // we do a merge on them with CC\u003dAND(GC, AC, RC) and returns a\n+    // composite AND constraint. Subsequently we check if CC could\n+    // be satisfied. This ensures that every level of constraint\n+    // is satisfied.\n+    PlacementConstraint.And andConstraint \u003d PlacementConstraints.and(\n+        allConstraints.toArray(new PlacementConstraint\n+            .AbstractConstraint[allConstraints.size()]));\n+    return andConstraint.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public PlacementConstraint getMultilevelConstraint(ApplicationId appId,\n      Set\u003cString\u003e sourceTags, PlacementConstraint schedulingRequestConstraint) {\n    List\u003cPlacementConstraint\u003e constraints \u003d new ArrayList\u003c\u003e();\n    // Add scheduling request-level constraint.\n    if (schedulingRequestConstraint !\u003d null) {\n      constraints.add(schedulingRequestConstraint);\n    }\n    // Add app-level constraint if appId is given.\n    if (appId !\u003d null \u0026\u0026 sourceTags !\u003d null\n        \u0026\u0026 !sourceTags.isEmpty()) {\n      constraints.add(getConstraint(appId, sourceTags));\n    }\n    // Add global constraint.\n    if (sourceTags !\u003d null \u0026\u0026 !sourceTags.isEmpty()) {\n      constraints.add(getGlobalConstraint(sourceTags));\n    }\n\n    // Remove all null or duplicate constraints.\n    List\u003cPlacementConstraint.AbstractConstraint\u003e allConstraints \u003d\n        constraints.stream()\n            .filter(placementConstraint -\u003e placementConstraint !\u003d null\n            \u0026\u0026 placementConstraint.getConstraintExpr() !\u003d null)\n            .map(PlacementConstraint::getConstraintExpr)\n            .distinct()\n            .collect(Collectors.toList());\n\n    // Compose an AND constraint\n    // When merge request(RC), app(AC) and global constraint(GC),\n    // we do a merge on them with CC\u003dAND(GC, AC, RC) and returns a\n    // composite AND constraint. Subsequently we check if CC could\n    // be satisfied. This ensures that every level of constraint\n    // is satisfied.\n    PlacementConstraint.And andConstraint \u003d PlacementConstraints.and(\n        allConstraints.toArray(new PlacementConstraint\n            .AbstractConstraint[allConstraints.size()]));\n    return andConstraint.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/constraint/MemoryPlacementConstraintManager.java"
    }
  }
}