{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SelfThrottlingIntercept.java",
  "functionName": "sendingRequest",
  "functionId": "sendingRequest___sendEvent-SendingRequestEvent",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SelfThrottlingIntercept.java",
  "functionStartLine": 122,
  "functionEndLine": 173,
  "numCommitsSeen": 3,
  "timeTaken": 397,
  "changeHistory": [
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,52 @@\n+  public void sendingRequest(SendingRequestEvent sendEvent) {\n+    long lastLatency;\n+    boolean operationIsRead; // for logging\n+    synchronized (this) {\n+\n+      lastLatency \u003d this.lastE2Elatency;\n+    }\n+\n+    float sleepMultiple;\n+    HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n+        .getConnectionObject();\n+\n+    // Azure REST API never uses POST, so PUT is a sufficient test for an\n+    // upload.\n+    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"PUT\")) {\n+      operationIsRead \u003d false;\n+      sleepMultiple \u003d (1 / writeFactor) - 1;\n+    } else {\n+      operationIsRead \u003d true;\n+      sleepMultiple \u003d (1 / readFactor) - 1;\n+    }\n+\n+    long sleepDuration \u003d (long) (sleepMultiple * lastLatency);\n+    if (sleepDuration \u003c 0) {\n+      sleepDuration \u003d 0;\n+    }\n+\n+    if (sleepDuration \u003e 0) {\n+      try {\n+        // Thread.sleep() is not exact but it seems sufficiently accurate for\n+        // our needs. If needed this could become a loop of small waits that\n+        // tracks actual\n+        // elapsed time.\n+        Thread.sleep(sleepDuration);\n+      } catch (InterruptedException ie) {\n+        Thread.currentThread().interrupt();\n+      }\n+\n+      // reset to avoid counting the sleep against request latency\n+      sendEvent.getRequestResult().setStartDate(new Date());\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      boolean isFirstRequest \u003d (lastLatency \u003d\u003d 0);\n+      long threadId \u003d Thread.currentThread().getId();\n+      LOG.debug(String\n+          .format(\n+              \" SelfThrottlingIntercept:: SendingRequest:   threadId\u003d%d, requestType\u003d%s, isFirstRequest\u003d%b, sleepDuration\u003d%d\",\n+              threadId, operationIsRead ? \"read \" : \"write\", isFirstRequest,\n+              sleepDuration));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void sendingRequest(SendingRequestEvent sendEvent) {\n    long lastLatency;\n    boolean operationIsRead; // for logging\n    synchronized (this) {\n\n      lastLatency \u003d this.lastE2Elatency;\n    }\n\n    float sleepMultiple;\n    HttpURLConnection urlConnection \u003d (HttpURLConnection) sendEvent\n        .getConnectionObject();\n\n    // Azure REST API never uses POST, so PUT is a sufficient test for an\n    // upload.\n    if (urlConnection.getRequestMethod().equalsIgnoreCase(\"PUT\")) {\n      operationIsRead \u003d false;\n      sleepMultiple \u003d (1 / writeFactor) - 1;\n    } else {\n      operationIsRead \u003d true;\n      sleepMultiple \u003d (1 / readFactor) - 1;\n    }\n\n    long sleepDuration \u003d (long) (sleepMultiple * lastLatency);\n    if (sleepDuration \u003c 0) {\n      sleepDuration \u003d 0;\n    }\n\n    if (sleepDuration \u003e 0) {\n      try {\n        // Thread.sleep() is not exact but it seems sufficiently accurate for\n        // our needs. If needed this could become a loop of small waits that\n        // tracks actual\n        // elapsed time.\n        Thread.sleep(sleepDuration);\n      } catch (InterruptedException ie) {\n        Thread.currentThread().interrupt();\n      }\n\n      // reset to avoid counting the sleep against request latency\n      sendEvent.getRequestResult().setStartDate(new Date());\n    }\n\n    if (LOG.isDebugEnabled()) {\n      boolean isFirstRequest \u003d (lastLatency \u003d\u003d 0);\n      long threadId \u003d Thread.currentThread().getId();\n      LOG.debug(String\n          .format(\n              \" SelfThrottlingIntercept:: SendingRequest:   threadId\u003d%d, requestType\u003d%s, isFirstRequest\u003d%b, sleepDuration\u003d%d\",\n              threadId, operationIsRead ? \"read \" : \"write\", isFirstRequest,\n              sleepDuration));\n    }\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/SelfThrottlingIntercept.java"
    }
  }
}