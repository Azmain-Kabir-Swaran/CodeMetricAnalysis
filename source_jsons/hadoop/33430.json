{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DefaultLinuxContainerRuntime.java",
  "functionName": "writeCommandToTempFile",
  "functionId": "writeCommandToTempFile___ctx-ContainerExecContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java",
  "functionStartLine": 240,
  "functionEndLine": 308,
  "numCommitsSeen": 23,
  "timeTaken": 1441,
  "changeHistory": [
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
    "72e7c6a489858ea48e94dc015752de620f8d6da1"
  ],
  "changeHistoryShort": {
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d": "Ybodychange",
    "72e7c6a489858ea48e94dc015752de620f8d6da1": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ca90b2480ecb9a627914e7a463b6293024ad6e4d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9032. Support sh shell for interactive container shell at command line. Contributed by Eric Yang\n",
      "commitDate": "14/12/18 2:08 PM",
      "commitName": "ca90b2480ecb9a627914e7a463b6293024ad6e4d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "12/12/18 6:18 PM",
      "commitNameOld": "72e7c6a489858ea48e94dc015752de620f8d6da1",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,69 @@\n   private String writeCommandToTempFile(ContainerExecContext ctx)\n       throws ContainerExecutionException {\n     Container container \u003d ctx.getContainer();\n     File cmdDir \u003d null;\n     String appId \u003d container.getContainerId().getApplicationAttemptId()\n         .getApplicationId().toString();\n     String containerId \u003d container.getContainerId().toString();\n     String filePrefix \u003d containerId.toString();\n     try {\n       String cmdDirPath \u003d ctx.getLocalDirsHandlerService().getLocalPathForWrite(\n           ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n           appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n       cmdDir \u003d new File(cmdDirPath);\n       if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n         throw new IOException(\"Cannot create container private directory \"\n             + cmdDir);\n       }\n       File commandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n           TMP_FILE_SUFFIX, cmdDir);\n       try (\n           Writer writer \u003d new OutputStreamWriter(\n               new FileOutputStream(commandFile.toString()), \"UTF-8\");\n           PrintWriter printWriter \u003d new PrintWriter(writer);\n       ) {\n         Map\u003cString, List\u003cString\u003e\u003e cmd \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n         // command \u003d exec\n         List\u003cString\u003e exec \u003d new ArrayList\u003cString\u003e();\n         exec.add(\"exec\");\n         cmd.put(\"command\", exec);\n         // user \u003d foobar\n         List\u003cString\u003e user \u003d new ArrayList\u003cString\u003e();\n         user.add(container.getUser());\n         cmd.put(\"user\", user);\n         // launch-command \u003d bash,-i\n         List\u003cString\u003e commands \u003d new ArrayList\u003cString\u003e();\n-        commands.add(\"/bin/bash\");\n+        StringBuilder sb \u003d new StringBuilder();\n+        sb.append(\"/bin/\");\n+        sb.append(ctx.getShell());\n+        commands.add(sb.toString());\n         commands.add(\"-ir\");\n         cmd.put(\"launch-command\", commands);\n         // workdir \u003d ../nm-local-dir/usercache/appcache/appid/containerid\n         List\u003cString\u003e workdir \u003d new ArrayList\u003cString\u003e();\n         workdir.add(container.getWorkDir());\n         cmd.put(\"workdir\", workdir);\n         // generate cmd file\n         printWriter.println(\"[command-execution]\");\n         for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n             cmd.entrySet()) {\n           if (entry.getKey().contains(\"\u003d\")) {\n             throw new ContainerExecutionException(\n                 \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                     .getKey() + \"; value \u003d \" + entry.getValue());\n           }\n           if (entry.getValue().contains(\"\\n\")) {\n             throw new ContainerExecutionException(\n                 \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                     .getKey() + \"; value \u003d \" + entry.getValue());\n           }\n           printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n               .join(\",\", entry.getValue()));\n         }\n         return commandFile.toString();\n       }\n     } catch (IOException e) {\n       LOG.warn(\"Unable to write command to \" + cmdDir);\n       throw new ContainerExecutionException(e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private String writeCommandToTempFile(ContainerExecContext ctx)\n      throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n    File cmdDir \u003d null;\n    String appId \u003d container.getContainerId().getApplicationAttemptId()\n        .getApplicationId().toString();\n    String containerId \u003d container.getContainerId().toString();\n    String filePrefix \u003d containerId.toString();\n    try {\n      String cmdDirPath \u003d ctx.getLocalDirsHandlerService().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n      cmdDir \u003d new File(cmdDirPath);\n      if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n        throw new IOException(\"Cannot create container private directory \"\n            + cmdDir);\n      }\n      File commandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, cmdDir);\n      try (\n          Writer writer \u003d new OutputStreamWriter(\n              new FileOutputStream(commandFile.toString()), \"UTF-8\");\n          PrintWriter printWriter \u003d new PrintWriter(writer);\n      ) {\n        Map\u003cString, List\u003cString\u003e\u003e cmd \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n        // command \u003d exec\n        List\u003cString\u003e exec \u003d new ArrayList\u003cString\u003e();\n        exec.add(\"exec\");\n        cmd.put(\"command\", exec);\n        // user \u003d foobar\n        List\u003cString\u003e user \u003d new ArrayList\u003cString\u003e();\n        user.add(container.getUser());\n        cmd.put(\"user\", user);\n        // launch-command \u003d bash,-i\n        List\u003cString\u003e commands \u003d new ArrayList\u003cString\u003e();\n        StringBuilder sb \u003d new StringBuilder();\n        sb.append(\"/bin/\");\n        sb.append(ctx.getShell());\n        commands.add(sb.toString());\n        commands.add(\"-ir\");\n        cmd.put(\"launch-command\", commands);\n        // workdir \u003d ../nm-local-dir/usercache/appcache/appid/containerid\n        List\u003cString\u003e workdir \u003d new ArrayList\u003cString\u003e();\n        workdir.add(container.getWorkDir());\n        cmd.put(\"workdir\", workdir);\n        // generate cmd file\n        printWriter.println(\"[command-execution]\");\n        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n            cmd.entrySet()) {\n          if (entry.getKey().contains(\"\u003d\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + entry.getValue());\n          }\n          if (entry.getValue().contains(\"\\n\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + entry.getValue());\n          }\n          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n              .join(\",\", entry.getValue()));\n        }\n        return commandFile.toString();\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "72e7c6a489858ea48e94dc015752de620f8d6da1": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8962. Add ability to use interactive shell with normal yarn container. Contributed by Eric Yang\n",
      "commitDate": "12/12/18 6:18 PM",
      "commitName": "72e7c6a489858ea48e94dc015752de620f8d6da1",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,66 @@\n+  private String writeCommandToTempFile(ContainerExecContext ctx)\n+      throws ContainerExecutionException {\n+    Container container \u003d ctx.getContainer();\n+    File cmdDir \u003d null;\n+    String appId \u003d container.getContainerId().getApplicationAttemptId()\n+        .getApplicationId().toString();\n+    String containerId \u003d container.getContainerId().toString();\n+    String filePrefix \u003d containerId.toString();\n+    try {\n+      String cmdDirPath \u003d ctx.getLocalDirsHandlerService().getLocalPathForWrite(\n+          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n+          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n+      cmdDir \u003d new File(cmdDirPath);\n+      if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n+        throw new IOException(\"Cannot create container private directory \"\n+            + cmdDir);\n+      }\n+      File commandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n+          TMP_FILE_SUFFIX, cmdDir);\n+      try (\n+          Writer writer \u003d new OutputStreamWriter(\n+              new FileOutputStream(commandFile.toString()), \"UTF-8\");\n+          PrintWriter printWriter \u003d new PrintWriter(writer);\n+      ) {\n+        Map\u003cString, List\u003cString\u003e\u003e cmd \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n+        // command \u003d exec\n+        List\u003cString\u003e exec \u003d new ArrayList\u003cString\u003e();\n+        exec.add(\"exec\");\n+        cmd.put(\"command\", exec);\n+        // user \u003d foobar\n+        List\u003cString\u003e user \u003d new ArrayList\u003cString\u003e();\n+        user.add(container.getUser());\n+        cmd.put(\"user\", user);\n+        // launch-command \u003d bash,-i\n+        List\u003cString\u003e commands \u003d new ArrayList\u003cString\u003e();\n+        commands.add(\"/bin/bash\");\n+        commands.add(\"-ir\");\n+        cmd.put(\"launch-command\", commands);\n+        // workdir \u003d ../nm-local-dir/usercache/appcache/appid/containerid\n+        List\u003cString\u003e workdir \u003d new ArrayList\u003cString\u003e();\n+        workdir.add(container.getWorkDir());\n+        cmd.put(\"workdir\", workdir);\n+        // generate cmd file\n+        printWriter.println(\"[command-execution]\");\n+        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n+            cmd.entrySet()) {\n+          if (entry.getKey().contains(\"\u003d\")) {\n+            throw new ContainerExecutionException(\n+                \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n+                    .getKey() + \"; value \u003d \" + entry.getValue());\n+          }\n+          if (entry.getValue().contains(\"\\n\")) {\n+            throw new ContainerExecutionException(\n+                \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n+                    .getKey() + \"; value \u003d \" + entry.getValue());\n+          }\n+          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n+              .join(\",\", entry.getValue()));\n+        }\n+        return commandFile.toString();\n+      }\n+    } catch (IOException e) {\n+      LOG.warn(\"Unable to write command to \" + cmdDir);\n+      throw new ContainerExecutionException(e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private String writeCommandToTempFile(ContainerExecContext ctx)\n      throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n    File cmdDir \u003d null;\n    String appId \u003d container.getContainerId().getApplicationAttemptId()\n        .getApplicationId().toString();\n    String containerId \u003d container.getContainerId().toString();\n    String filePrefix \u003d containerId.toString();\n    try {\n      String cmdDirPath \u003d ctx.getLocalDirsHandlerService().getLocalPathForWrite(\n          ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR +\n          appId + Path.SEPARATOR + filePrefix + Path.SEPARATOR).toString();\n      cmdDir \u003d new File(cmdDirPath);\n      if (!cmdDir.mkdirs() \u0026\u0026 !cmdDir.exists()) {\n        throw new IOException(\"Cannot create container private directory \"\n            + cmdDir);\n      }\n      File commandFile \u003d File.createTempFile(TMP_FILE_PREFIX + filePrefix,\n          TMP_FILE_SUFFIX, cmdDir);\n      try (\n          Writer writer \u003d new OutputStreamWriter(\n              new FileOutputStream(commandFile.toString()), \"UTF-8\");\n          PrintWriter printWriter \u003d new PrintWriter(writer);\n      ) {\n        Map\u003cString, List\u003cString\u003e\u003e cmd \u003d new HashMap\u003cString, List\u003cString\u003e\u003e();\n        // command \u003d exec\n        List\u003cString\u003e exec \u003d new ArrayList\u003cString\u003e();\n        exec.add(\"exec\");\n        cmd.put(\"command\", exec);\n        // user \u003d foobar\n        List\u003cString\u003e user \u003d new ArrayList\u003cString\u003e();\n        user.add(container.getUser());\n        cmd.put(\"user\", user);\n        // launch-command \u003d bash,-i\n        List\u003cString\u003e commands \u003d new ArrayList\u003cString\u003e();\n        commands.add(\"/bin/bash\");\n        commands.add(\"-ir\");\n        cmd.put(\"launch-command\", commands);\n        // workdir \u003d ../nm-local-dir/usercache/appcache/appid/containerid\n        List\u003cString\u003e workdir \u003d new ArrayList\u003cString\u003e();\n        workdir.add(container.getWorkDir());\n        cmd.put(\"workdir\", workdir);\n        // generate cmd file\n        printWriter.println(\"[command-execution]\");\n        for (Map.Entry\u003cString, List\u003cString\u003e\u003e entry :\n            cmd.entrySet()) {\n          if (entry.getKey().contains(\"\u003d\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\u003d\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + entry.getValue());\n          }\n          if (entry.getValue().contains(\"\\n\")) {\n            throw new ContainerExecutionException(\n                \"\u0027\\\\n\u0027 found in entry for docker command file, key \u003d \" + entry\n                    .getKey() + \"; value \u003d \" + entry.getValue());\n          }\n          printWriter.println(\"  \" + entry.getKey() + \"\u003d\" + StringUtils\n              .join(\",\", entry.getValue()));\n        }\n        return commandFile.toString();\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Unable to write command to \" + cmdDir);\n      throw new ContainerExecutionException(e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DefaultLinuxContainerRuntime.java"
    }
  }
}