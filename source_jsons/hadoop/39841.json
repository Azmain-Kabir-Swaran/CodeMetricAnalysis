{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSSchedulerConfigurationStore.java",
  "functionName": "initialize",
  "functionId": "initialize___fsConf-Configuration__vSchedConf-Configuration__rmContext-RMContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java",
  "functionStartLine": 69,
  "functionEndLine": 128,
  "numCommitsSeen": 16,
  "timeTaken": 3523,
  "changeHistory": [
    "155864da006346a500ff35c2f6b69281093195b1",
    "be901f49628a553cfe6a3942478cb528cce2b266",
    "1606dad133de0dbee59175509a22994ec570ea41"
  ],
  "changeHistoryShort": {
    "155864da006346a500ff35c2f6b69281093195b1": "Ymultichange(Yparameterchange,Ybodychange)",
    "be901f49628a553cfe6a3942478cb528cce2b266": "Ybodychange",
    "1606dad133de0dbee59175509a22994ec570ea41": "Yintroduced"
  },
  "changeHistoryDetails": {
    "155864da006346a500ff35c2f6b69281093195b1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9875. Improve fair scheduler configuration store on HDFS.\n           Contributed by Prabhu Joseph\n",
      "commitDate": "18/10/19 5:30 PM",
      "commitName": "155864da006346a500ff35c2f6b69281093195b1",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9875. Improve fair scheduler configuration store on HDFS.\n           Contributed by Prabhu Joseph\n",
          "commitDate": "18/10/19 5:30 PM",
          "commitName": "155864da006346a500ff35c2f6b69281093195b1",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "09/10/19 3:23 AM",
          "commitNameOld": "be901f49628a553cfe6a3942478cb528cce2b266",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 9.59,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,60 @@\n-  public void initialize(Configuration conf, Configuration vSchedConf,\n+  public void initialize(Configuration fsConf, Configuration vSchedConf,\n       RMContext rmContext) throws Exception {\n     this.configFilePathFilter \u003d new PathFilter() {\n       @Override\n       public boolean accept(Path path) {\n         if (path \u003d\u003d null) {\n           return false;\n         }\n         String pathName \u003d path.getName();\n         return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n             \u0026\u0026 !pathName.endsWith(TMP);\n       }\n     };\n \n+    Configuration conf \u003d new Configuration(fsConf);\n     String schedulerConfPathStr \u003d conf.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n     if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n       throw new IOException(\n           YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n               + \" must be set\");\n     }\n     this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n+    String scheme \u003d schedulerConfDir.toUri().getScheme();\n+    if (scheme \u003d\u003d null) {\n+      scheme \u003d FileSystem.getDefaultUri(conf).getScheme();\n+    }\n+    if (scheme !\u003d null) {\n+      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\",\n+          scheme);\n+      conf.setBoolean(disableCacheName, true);\n+    }\n     this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n     this.maxVersion \u003d conf.getInt(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n         YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n     LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n     LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n \n     if (!fileSystem.exists(schedulerConfDir)) {\n       if (!fileSystem.mkdirs(schedulerConfDir)) {\n         throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n       }\n     }\n \n     this.configVersionFile \u003d new Path(schedulerConfPathStr, \"ConfigVersion\");\n     if (!fileSystem.exists(configVersionFile)) {\n       fileSystem.createNewFile(configVersionFile);\n       writeConfigVersion(0L);\n     }\n \n     // create capacity-schedule.xml.ts file if not existing\n     if (this.getConfigFileInputStream() \u003d\u003d null) {\n       writeConfigurationToFileSystem(vSchedConf);\n       long configVersion \u003d getConfigVersion() + 1L;\n       writeConfigVersion(configVersion);\n     }\n \n     this.schedConf \u003d this.getConfigurationFromFileSystem();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration fsConf, Configuration vSchedConf,\n      RMContext rmContext) throws Exception {\n    this.configFilePathFilter \u003d new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        if (path \u003d\u003d null) {\n          return false;\n        }\n        String pathName \u003d path.getName();\n        return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n            \u0026\u0026 !pathName.endsWith(TMP);\n      }\n    };\n\n    Configuration conf \u003d new Configuration(fsConf);\n    String schedulerConfPathStr \u003d conf.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n    if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n      throw new IOException(\n          YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n              + \" must be set\");\n    }\n    this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n    String scheme \u003d schedulerConfDir.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(conf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\",\n          scheme);\n      conf.setBoolean(disableCacheName, true);\n    }\n    this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n    this.maxVersion \u003d conf.getInt(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n        YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n    LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n    LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n\n    if (!fileSystem.exists(schedulerConfDir)) {\n      if (!fileSystem.mkdirs(schedulerConfDir)) {\n        throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n      }\n    }\n\n    this.configVersionFile \u003d new Path(schedulerConfPathStr, \"ConfigVersion\");\n    if (!fileSystem.exists(configVersionFile)) {\n      fileSystem.createNewFile(configVersionFile);\n      writeConfigVersion(0L);\n    }\n\n    // create capacity-schedule.xml.ts file if not existing\n    if (this.getConfigFileInputStream() \u003d\u003d null) {\n      writeConfigurationToFileSystem(vSchedConf);\n      long configVersion \u003d getConfigVersion() + 1L;\n      writeConfigVersion(configVersion);\n    }\n\n    this.schedConf \u003d this.getConfigurationFromFileSystem();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, vSchedConf-Configuration, rmContext-RMContext]",
            "newValue": "[fsConf-Configuration, vSchedConf-Configuration, rmContext-RMContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9875. Improve fair scheduler configuration store on HDFS.\n           Contributed by Prabhu Joseph\n",
          "commitDate": "18/10/19 5:30 PM",
          "commitName": "155864da006346a500ff35c2f6b69281093195b1",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "09/10/19 3:23 AM",
          "commitNameOld": "be901f49628a553cfe6a3942478cb528cce2b266",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 9.59,
          "commitsBetweenForRepo": 46,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,50 +1,60 @@\n-  public void initialize(Configuration conf, Configuration vSchedConf,\n+  public void initialize(Configuration fsConf, Configuration vSchedConf,\n       RMContext rmContext) throws Exception {\n     this.configFilePathFilter \u003d new PathFilter() {\n       @Override\n       public boolean accept(Path path) {\n         if (path \u003d\u003d null) {\n           return false;\n         }\n         String pathName \u003d path.getName();\n         return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n             \u0026\u0026 !pathName.endsWith(TMP);\n       }\n     };\n \n+    Configuration conf \u003d new Configuration(fsConf);\n     String schedulerConfPathStr \u003d conf.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n     if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n       throw new IOException(\n           YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n               + \" must be set\");\n     }\n     this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n+    String scheme \u003d schedulerConfDir.toUri().getScheme();\n+    if (scheme \u003d\u003d null) {\n+      scheme \u003d FileSystem.getDefaultUri(conf).getScheme();\n+    }\n+    if (scheme !\u003d null) {\n+      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\",\n+          scheme);\n+      conf.setBoolean(disableCacheName, true);\n+    }\n     this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n     this.maxVersion \u003d conf.getInt(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n         YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n     LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n     LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n \n     if (!fileSystem.exists(schedulerConfDir)) {\n       if (!fileSystem.mkdirs(schedulerConfDir)) {\n         throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n       }\n     }\n \n     this.configVersionFile \u003d new Path(schedulerConfPathStr, \"ConfigVersion\");\n     if (!fileSystem.exists(configVersionFile)) {\n       fileSystem.createNewFile(configVersionFile);\n       writeConfigVersion(0L);\n     }\n \n     // create capacity-schedule.xml.ts file if not existing\n     if (this.getConfigFileInputStream() \u003d\u003d null) {\n       writeConfigurationToFileSystem(vSchedConf);\n       long configVersion \u003d getConfigVersion() + 1L;\n       writeConfigVersion(configVersion);\n     }\n \n     this.schedConf \u003d this.getConfigurationFromFileSystem();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(Configuration fsConf, Configuration vSchedConf,\n      RMContext rmContext) throws Exception {\n    this.configFilePathFilter \u003d new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        if (path \u003d\u003d null) {\n          return false;\n        }\n        String pathName \u003d path.getName();\n        return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n            \u0026\u0026 !pathName.endsWith(TMP);\n      }\n    };\n\n    Configuration conf \u003d new Configuration(fsConf);\n    String schedulerConfPathStr \u003d conf.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n    if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n      throw new IOException(\n          YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n              + \" must be set\");\n    }\n    this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n    String scheme \u003d schedulerConfDir.toUri().getScheme();\n    if (scheme \u003d\u003d null) {\n      scheme \u003d FileSystem.getDefaultUri(conf).getScheme();\n    }\n    if (scheme !\u003d null) {\n      String disableCacheName \u003d String.format(\"fs.%s.impl.disable.cache\",\n          scheme);\n      conf.setBoolean(disableCacheName, true);\n    }\n    this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n    this.maxVersion \u003d conf.getInt(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n        YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n    LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n    LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n\n    if (!fileSystem.exists(schedulerConfDir)) {\n      if (!fileSystem.mkdirs(schedulerConfDir)) {\n        throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n      }\n    }\n\n    this.configVersionFile \u003d new Path(schedulerConfPathStr, \"ConfigVersion\");\n    if (!fileSystem.exists(configVersionFile)) {\n      fileSystem.createNewFile(configVersionFile);\n      writeConfigVersion(0L);\n    }\n\n    // create capacity-schedule.xml.ts file if not existing\n    if (this.getConfigFileInputStream() \u003d\u003d null) {\n      writeConfigurationToFileSystem(vSchedConf);\n      long configVersion \u003d getConfigVersion() + 1L;\n      writeConfigVersion(configVersion);\n    }\n\n    this.schedConf \u003d this.getConfigurationFromFileSystem();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "be901f49628a553cfe6a3942478cb528cce2b266": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9873. Mutation API Config Change need to update Version Number. Contributed by Prabhu Joseph\n",
      "commitDate": "09/10/19 3:23 AM",
      "commitName": "be901f49628a553cfe6a3942478cb528cce2b266",
      "commitAuthor": "Sunil G",
      "commitDateOld": "04/10/19 8:45 PM",
      "commitNameOld": "fb1ecff6a26875c7f2b86ef07d7b9145c469377e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.28,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,50 @@\n   public void initialize(Configuration conf, Configuration vSchedConf,\n       RMContext rmContext) throws Exception {\n     this.configFilePathFilter \u003d new PathFilter() {\n       @Override\n       public boolean accept(Path path) {\n         if (path \u003d\u003d null) {\n           return false;\n         }\n         String pathName \u003d path.getName();\n         return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n             \u0026\u0026 !pathName.endsWith(TMP);\n       }\n     };\n \n     String schedulerConfPathStr \u003d conf.get(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n     if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n       throw new IOException(\n           YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n               + \" must be set\");\n     }\n     this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n     this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n     this.maxVersion \u003d conf.getInt(\n         YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n         YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n     LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n     LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n \n     if (!fileSystem.exists(schedulerConfDir)) {\n       if (!fileSystem.mkdirs(schedulerConfDir)) {\n         throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n       }\n     }\n \n+    this.configVersionFile \u003d new Path(schedulerConfPathStr, \"ConfigVersion\");\n+    if (!fileSystem.exists(configVersionFile)) {\n+      fileSystem.createNewFile(configVersionFile);\n+      writeConfigVersion(0L);\n+    }\n+\n     // create capacity-schedule.xml.ts file if not existing\n     if (this.getConfigFileInputStream() \u003d\u003d null) {\n       writeConfigurationToFileSystem(vSchedConf);\n+      long configVersion \u003d getConfigVersion() + 1L;\n+      writeConfigVersion(configVersion);\n     }\n \n     this.schedConf \u003d this.getConfigurationFromFileSystem();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Configuration vSchedConf,\n      RMContext rmContext) throws Exception {\n    this.configFilePathFilter \u003d new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        if (path \u003d\u003d null) {\n          return false;\n        }\n        String pathName \u003d path.getName();\n        return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n            \u0026\u0026 !pathName.endsWith(TMP);\n      }\n    };\n\n    String schedulerConfPathStr \u003d conf.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n    if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n      throw new IOException(\n          YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n              + \" must be set\");\n    }\n    this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n    this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n    this.maxVersion \u003d conf.getInt(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n        YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n    LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n    LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n\n    if (!fileSystem.exists(schedulerConfDir)) {\n      if (!fileSystem.mkdirs(schedulerConfDir)) {\n        throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n      }\n    }\n\n    this.configVersionFile \u003d new Path(schedulerConfPathStr, \"ConfigVersion\");\n    if (!fileSystem.exists(configVersionFile)) {\n      fileSystem.createNewFile(configVersionFile);\n      writeConfigVersion(0L);\n    }\n\n    // create capacity-schedule.xml.ts file if not existing\n    if (this.getConfigFileInputStream() \u003d\u003d null) {\n      writeConfigurationToFileSystem(vSchedConf);\n      long configVersion \u003d getConfigVersion() + 1L;\n      writeConfigVersion(configVersion);\n    }\n\n    this.schedConf \u003d this.getConfigurationFromFileSystem();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java",
      "extendedDetails": {}
    },
    "1606dad133de0dbee59175509a22994ec570ea41": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7497. Add file system based scheduler configuration store. Contributed by Jiandan Yang.\n",
      "commitDate": "30/03/18 6:41 AM",
      "commitName": "1606dad133de0dbee59175509a22994ec570ea41",
      "commitAuthor": "Weiwei Yang",
      "diff": "@@ -0,0 +1,42 @@\n+  public void initialize(Configuration conf, Configuration vSchedConf,\n+      RMContext rmContext) throws Exception {\n+    this.configFilePathFilter \u003d new PathFilter() {\n+      @Override\n+      public boolean accept(Path path) {\n+        if (path \u003d\u003d null) {\n+          return false;\n+        }\n+        String pathName \u003d path.getName();\n+        return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n+            \u0026\u0026 !pathName.endsWith(TMP);\n+      }\n+    };\n+\n+    String schedulerConfPathStr \u003d conf.get(\n+        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n+    if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n+      throw new IOException(\n+          YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n+              + \" must be set\");\n+    }\n+    this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n+    this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n+    this.maxVersion \u003d conf.getInt(\n+        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n+        YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n+    LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n+    LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n+\n+    if (!fileSystem.exists(schedulerConfDir)) {\n+      if (!fileSystem.mkdirs(schedulerConfDir)) {\n+        throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n+      }\n+    }\n+\n+    // create capacity-schedule.xml.ts file if not existing\n+    if (this.getConfigFileInputStream() \u003d\u003d null) {\n+      writeConfigurationToFileSystem(vSchedConf);\n+    }\n+\n+    this.schedConf \u003d this.getConfigurationFromFileSystem();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(Configuration conf, Configuration vSchedConf,\n      RMContext rmContext) throws Exception {\n    this.configFilePathFilter \u003d new PathFilter() {\n      @Override\n      public boolean accept(Path path) {\n        if (path \u003d\u003d null) {\n          return false;\n        }\n        String pathName \u003d path.getName();\n        return pathName.startsWith(YarnConfiguration.CS_CONFIGURATION_FILE)\n            \u0026\u0026 !pathName.endsWith(TMP);\n      }\n    };\n\n    String schedulerConfPathStr \u003d conf.get(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH);\n    if (schedulerConfPathStr \u003d\u003d null || schedulerConfPathStr.isEmpty()) {\n      throw new IOException(\n          YarnConfiguration.SCHEDULER_CONFIGURATION_FS_PATH\n              + \" must be set\");\n    }\n    this.schedulerConfDir \u003d new Path(schedulerConfPathStr);\n    this.fileSystem \u003d this.schedulerConfDir.getFileSystem(conf);\n    this.maxVersion \u003d conf.getInt(\n        YarnConfiguration.SCHEDULER_CONFIGURATION_FS_MAX_VERSION,\n        YarnConfiguration.DEFAULT_SCHEDULER_CONFIGURATION_FS_MAX_VERSION);\n    LOG.info(\"schedulerConfDir\u003d\" + schedulerConfPathStr);\n    LOG.info(\"capacity scheduler file max version \u003d \" + maxVersion);\n\n    if (!fileSystem.exists(schedulerConfDir)) {\n      if (!fileSystem.mkdirs(schedulerConfDir)) {\n        throw new IOException(\"mkdir \" + schedulerConfPathStr + \" failed\");\n      }\n    }\n\n    // create capacity-schedule.xml.ts file if not existing\n    if (this.getConfigFileInputStream() \u003d\u003d null) {\n      writeConfigurationToFileSystem(vSchedConf);\n    }\n\n    this.schedConf \u003d this.getConfigurationFromFileSystem();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/conf/FSSchedulerConfigurationStore.java"
    }
  }
}