{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogCLIHelpers.java",
  "functionName": "printAContainerLogMetadata",
  "functionId": "printAContainerLogMetadata___options-ContainerLogsRequest__out-PrintStream__err-PrintStream",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
  "functionStartLine": 257,
  "functionEndLine": 300,
  "numCommitsSeen": 59,
  "timeTaken": 4371,
  "changeHistory": [
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
    "91cc070d67533ebb3325b982eba2135e0d175a82",
    "871dc420f8a4f151189c0925e062c64859a8f275",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
    "eb471632349deac4b62f8dec853c8ceb64c9617a",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835"
  ],
  "changeHistoryShort": {
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": "Ybodychange",
    "91cc070d67533ebb3325b982eba2135e0d175a82": "Ybodychange",
    "871dc420f8a4f151189c0925e062c64859a8f275": "Ybodychange",
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": "Ybodychange",
    "eb471632349deac4b62f8dec853c8ceb64c9617a": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": "Ymultichange(Yparameterchange,Ybodychange)",
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7072. Add a new log aggregation file format controller. Contributed by Xuan Gong.\n",
      "commitDate": "08/09/17 3:16 PM",
      "commitName": "3fddabc2fe4fbdb8ef3f9ce7558955c4f0794dcc",
      "commitAuthor": "Junping Du",
      "commitDateOld": "06/09/17 1:19 PM",
      "commitNameOld": "63231a2a3008794c5ebcbc9d3855638fc5f28216",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 2.08,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,44 @@\n   public int printAContainerLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     List\u003cContainerLogMeta\u003e containersLogMeta;\n     try {\n       containersLogMeta \u003d getFileController(options.getAppId(),\n           options.getAppOwner()).readAggregatedLogsMeta(\n           options);\n     } catch (Exception ex) {\n       err.println(ex.getMessage());\n       return -1;\n     }\n     if (containersLogMeta.isEmpty()) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n       return -1;\n     }\n \n     for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n       String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n           containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n           \"LastModificationTime\", \"LogAggregationType\");\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length() * 2));\n-      for (PerContainerLogFileInfo logMeta : containerLogMeta\n+      for (ContainerLogFileInfo logMeta : containerLogMeta\n           .getContainerLogMeta()) {\n         out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n             logMeta.getFileSize(), logMeta.getLastModifiedTime(), \"AGGREGATED\");\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printAContainerLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    try {\n      containersLogMeta \u003d getFileController(options.getAppId(),\n          options.getAppOwner()).readAggregatedLogsMeta(\n          options);\n    } catch (Exception ex) {\n      err.println(ex.getMessage());\n      return -1;\n    }\n    if (containersLogMeta.isEmpty()) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n      return -1;\n    }\n\n    for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n      String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n          containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n          \"LastModificationTime\", \"LogAggregationType\");\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length() * 2));\n      for (ContainerLogFileInfo logMeta : containerLogMeta\n          .getContainerLogMeta()) {\n        out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n            logMeta.getFileSize(), logMeta.getLastModifiedTime(), \"AGGREGATED\");\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "91cc070d67533ebb3325b982eba2135e0d175a82": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6877. Create an abstract log reader for extendability. Contributed by Xuan Gong.\n",
      "commitDate": "31/08/17 4:41 PM",
      "commitName": "91cc070d67533ebb3325b982eba2135e0d175a82",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/03/17 12:58 PM",
      "commitNameOld": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 170.16,
      "commitsBetweenForRepo": 1032,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,44 @@\n   public int printAContainerLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n-    ApplicationId appId \u003d options.getAppId();\n-    String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     List\u003cContainerLogMeta\u003e containersLogMeta;\n     try {\n-      containersLogMeta \u003d LogToolUtils.getContainerLogMetaFromRemoteFS(\n-          conf, appId, containerIdStr, nodeId, appOwner);\n+      containersLogMeta \u003d getFileController(options.getAppId(),\n+          options.getAppOwner()).readAggregatedLogsMeta(\n+          options);\n     } catch (Exception ex) {\n       err.println(ex.getMessage());\n       return -1;\n     }\n     if (containersLogMeta.isEmpty()) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n       return -1;\n     }\n \n     for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n       String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n           containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n           \"LastModificationTime\", \"LogAggregationType\");\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length() * 2));\n       for (PerContainerLogFileInfo logMeta : containerLogMeta\n           .getContainerLogMeta()) {\n         out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n             logMeta.getFileSize(), logMeta.getLastModifiedTime(), \"AGGREGATED\");\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printAContainerLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    try {\n      containersLogMeta \u003d getFileController(options.getAppId(),\n          options.getAppOwner()).readAggregatedLogsMeta(\n          options);\n    } catch (Exception ex) {\n      err.println(ex.getMessage());\n      return -1;\n    }\n    if (containersLogMeta.isEmpty()) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n      return -1;\n    }\n\n    for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n      String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n          containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n          \"LastModificationTime\", \"LogAggregationType\");\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length() * 2));\n      for (PerContainerLogFileInfo logMeta : containerLogMeta\n          .getContainerLogMeta()) {\n        out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n            logMeta.getFileSize(), logMeta.getLastModifiedTime(), \"AGGREGATED\");\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "871dc420f8a4f151189c0925e062c64859a8f275": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6313. YARN logs cli should provide logs for a completed container even when application is still running. Contributed by Xuan Gong.\n\n(cherry picked from commit b88f5e0f7858d1d89b79dfd325b767c34416052d)\n",
      "commitDate": "14/03/17 12:58 PM",
      "commitName": "871dc420f8a4f151189c0925e062c64859a8f275",
      "commitAuthor": "Junping Du",
      "commitDateOld": "24/01/17 3:26 PM",
      "commitNameOld": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 48.86,
      "commitsBetweenForRepo": 264,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public int printAContainerLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     List\u003cContainerLogMeta\u003e containersLogMeta;\n     try {\n       containersLogMeta \u003d LogToolUtils.getContainerLogMetaFromRemoteFS(\n           conf, appId, containerIdStr, nodeId, appOwner);\n     } catch (Exception ex) {\n       err.println(ex.getMessage());\n       return -1;\n     }\n     if (containersLogMeta.isEmpty()) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n       return -1;\n     }\n \n     for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n       String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n           containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n       out.println(containerString);\n       out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n       out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n-          \"LastModificationTime\");\n-      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+          \"LastModificationTime\", \"LogAggregationType\");\n+      out.println(StringUtils.repeat(\"\u003d\", containerString.length() * 2));\n       for (PerContainerLogFileInfo logMeta : containerLogMeta\n           .getContainerLogMeta()) {\n         out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n-            logMeta.getFileSize(), logMeta.getLastModifiedTime());\n+            logMeta.getFileSize(), logMeta.getLastModifiedTime(), \"AGGREGATED\");\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printAContainerLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    try {\n      containersLogMeta \u003d LogToolUtils.getContainerLogMetaFromRemoteFS(\n          conf, appId, containerIdStr, nodeId, appOwner);\n    } catch (Exception ex) {\n      err.println(ex.getMessage());\n      return -1;\n    }\n    if (containersLogMeta.isEmpty()) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n      return -1;\n    }\n\n    for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n      String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n          containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n          \"LastModificationTime\", \"LogAggregationType\");\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length() * 2));\n      for (PerContainerLogFileInfo logMeta : containerLogMeta\n          .getContainerLogMeta()) {\n        out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n            logMeta.getFileSize(), logMeta.getLastModifiedTime(), \"AGGREGATED\");\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "8528d85a68c0e6ea71026df4d3026e7edc206b2d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6099. Improve webservice to list aggregated log files. Contributed by Xuan Gong.\n",
      "commitDate": "24/01/17 3:26 PM",
      "commitName": "8528d85a68c0e6ea71026df4d3026e7edc206b2d",
      "commitAuthor": "Junping Du",
      "commitDateOld": "25/10/16 12:15 PM",
      "commitNameOld": "c88c1dc50c0ec4521bc93f39726248026e68063a",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 91.17,
      "commitsBetweenForRepo": 591,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,82 +1,45 @@\n   public int printAContainerLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n-    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n-    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n-        : LogAggregationUtils.getNodeString(nodeId);\n-    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n-        appId, appOwner);\n-    if (nodeFiles \u003d\u003d null) {\n+    List\u003cContainerLogMeta\u003e containersLogMeta;\n+    try {\n+      containersLogMeta \u003d LogToolUtils.getContainerLogMetaFromRemoteFS(\n+          conf, appId, containerIdStr, nodeId, appOwner);\n+    } catch (Exception ex) {\n+      err.println(ex.getMessage());\n       return -1;\n     }\n-    boolean foundAnyLogs \u003d false;\n-    while (nodeFiles.hasNext()) {\n-      FileStatus thisNodeFile \u003d nodeFiles.next();\n-      if (nodeIdStr !\u003d null) {\n-        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n-          continue;\n-        }\n-      }\n-      if (!thisNodeFile.getPath().getName()\n-          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n-        AggregatedLogFormat.LogReader reader \u003d\n-            new AggregatedLogFormat.LogReader(getConf(),\n-            thisNodeFile.getPath());\n-        try {\n-          DataInputStream valueStream;\n-          LogKey key \u003d new LogKey();\n-          valueStream \u003d reader.next(key);\n-          while (valueStream !\u003d null) {\n-            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n-              String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n-                  key, thisNodeFile.getPath().getName());\n-              out.println(containerString);\n-              out.println(\"Log Upload Time:\"\n-                  + thisNodeFile.getModificationTime());\n-              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-              out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogType\", \"LogLength\");\n-              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n-              while (true) {\n-                try {\n-                  Pair\u003cString, String\u003e logMeta \u003d\n-                      LogReader.readContainerMetaDataAndSkipData(\n-                          valueStream, out);\n-                  out.printf(PER_LOG_FILE_INFO_PATTERN,\n-                      logMeta.getFirst(), logMeta.getSecond());\n-                } catch (EOFException eof) {\n-                  break;\n-                }\n-              }\n-              foundAnyLogs \u003d true;\n-              if (!getAllContainers) {\n-                break;\n-              }\n-            }\n-            // Next container\n-            key \u003d new LogKey();\n-            valueStream \u003d reader.next(key);\n-          }\n-        } finally {\n-          reader.close();\n-        }\n-      }\n-    }\n-    if (!foundAnyLogs) {\n+    if (containersLogMeta.isEmpty()) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n       return -1;\n     }\n+\n+    for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n+      String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n+          containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n+      out.println(containerString);\n+      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+      out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n+          \"LastModificationTime\");\n+      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+      for (PerContainerLogFileInfo logMeta : containerLogMeta\n+          .getContainerLogMeta()) {\n+        out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n+            logMeta.getFileSize(), logMeta.getLastModifiedTime());\n+      }\n+    }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int printAContainerLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    List\u003cContainerLogMeta\u003e containersLogMeta;\n    try {\n      containersLogMeta \u003d LogToolUtils.getContainerLogMetaFromRemoteFS(\n          conf, appId, containerIdStr, nodeId, appOwner);\n    } catch (Exception ex) {\n      err.println(ex.getMessage());\n      return -1;\n    }\n    if (containersLogMeta.isEmpty()) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n      return -1;\n    }\n\n    for (ContainerLogMeta containerLogMeta : containersLogMeta) {\n      String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n          containerLogMeta.getContainerId(), containerLogMeta.getNodeId());\n      out.println(containerString);\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogFile\", \"LogLength\",\n          \"LastModificationTime\");\n      out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n      for (PerContainerLogFileInfo logMeta : containerLogMeta\n          .getContainerLogMeta()) {\n        out.printf(PER_LOG_FILE_INFO_PATTERN, logMeta.getFileName(),\n            logMeta.getFileSize(), logMeta.getLastModifiedTime());\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
      "extendedDetails": {}
    },
    "eb471632349deac4b62f8dec853c8ceb64c9617a": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
      "commitDate": "13/07/16 10:54 AM",
      "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
          "commitDate": "13/07/16 10:54 AM",
          "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/06/16 9:48 PM",
          "commitNameOld": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 20.55,
          "commitsBetweenForRepo": 266,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,82 @@\n-  public void printLogMetadata(ContainerLogsRequest options,\n+  public int printAContainerLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n     String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n         : LogAggregationUtils.getNodeString(nodeId);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n-      return;\n+      return -1;\n     }\n     boolean foundAnyLogs \u003d false;\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       if (nodeIdStr !\u003d null) {\n         if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n           continue;\n         }\n       }\n       if (!thisNodeFile.getPath().getName()\n           .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d\n             new AggregatedLogFormat.LogReader(getConf(),\n             thisNodeFile.getPath());\n         try {\n           DataInputStream valueStream;\n           LogKey key \u003d new LogKey();\n           valueStream \u003d reader.next(key);\n           while (valueStream !\u003d null) {\n             if (getAllContainers || (key.toString().equals(containerIdStr))) {\n-              String containerString \u003d\n-                  \"\\n\\nContainer: \" + key + \" on \"\n-                  + thisNodeFile.getPath().getName();\n+              String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n+                  key, thisNodeFile.getPath().getName());\n               out.println(containerString);\n               out.println(\"Log Upload Time:\"\n                   + thisNodeFile.getModificationTime());\n               out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+              out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogType\", \"LogLength\");\n+              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n               while (true) {\n                 try {\n-                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n+                  Pair\u003cString, String\u003e logMeta \u003d\n+                      LogReader.readContainerMetaDataAndSkipData(\n+                          valueStream, out);\n+                  out.printf(PER_LOG_FILE_INFO_PATTERN,\n+                      logMeta.getFirst(), logMeta.getSecond());\n                 } catch (EOFException eof) {\n                   break;\n                 }\n               }\n               foundAnyLogs \u003d true;\n               if (!getAllContainers) {\n                 break;\n               }\n             }\n             // Next container\n             key \u003d new LogKey();\n             valueStream \u003d reader.next(key);\n           }\n         } finally {\n           reader.close();\n         }\n       }\n     }\n     if (!foundAnyLogs) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n+      return -1;\n     }\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printAContainerLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return -1;\n    }\n    boolean foundAnyLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n                  key, thisNodeFile.getPath().getName());\n              out.println(containerString);\n              out.println(\"Log Upload Time:\"\n                  + thisNodeFile.getModificationTime());\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogType\", \"LogLength\");\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              while (true) {\n                try {\n                  Pair\u003cString, String\u003e logMeta \u003d\n                      LogReader.readContainerMetaDataAndSkipData(\n                          valueStream, out);\n                  out.printf(PER_LOG_FILE_INFO_PATTERN,\n                      logMeta.getFirst(), logMeta.getSecond());\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              foundAnyLogs \u003d true;\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    if (!foundAnyLogs) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n      return -1;\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "printLogMetadata",
            "newValue": "printAContainerLogMetadata"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
          "commitDate": "13/07/16 10:54 AM",
          "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/06/16 9:48 PM",
          "commitNameOld": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 20.55,
          "commitsBetweenForRepo": 266,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,82 @@\n-  public void printLogMetadata(ContainerLogsRequest options,\n+  public int printAContainerLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n     String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n         : LogAggregationUtils.getNodeString(nodeId);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n-      return;\n+      return -1;\n     }\n     boolean foundAnyLogs \u003d false;\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       if (nodeIdStr !\u003d null) {\n         if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n           continue;\n         }\n       }\n       if (!thisNodeFile.getPath().getName()\n           .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d\n             new AggregatedLogFormat.LogReader(getConf(),\n             thisNodeFile.getPath());\n         try {\n           DataInputStream valueStream;\n           LogKey key \u003d new LogKey();\n           valueStream \u003d reader.next(key);\n           while (valueStream !\u003d null) {\n             if (getAllContainers || (key.toString().equals(containerIdStr))) {\n-              String containerString \u003d\n-                  \"\\n\\nContainer: \" + key + \" on \"\n-                  + thisNodeFile.getPath().getName();\n+              String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n+                  key, thisNodeFile.getPath().getName());\n               out.println(containerString);\n               out.println(\"Log Upload Time:\"\n                   + thisNodeFile.getModificationTime());\n               out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+              out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogType\", \"LogLength\");\n+              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n               while (true) {\n                 try {\n-                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n+                  Pair\u003cString, String\u003e logMeta \u003d\n+                      LogReader.readContainerMetaDataAndSkipData(\n+                          valueStream, out);\n+                  out.printf(PER_LOG_FILE_INFO_PATTERN,\n+                      logMeta.getFirst(), logMeta.getSecond());\n                 } catch (EOFException eof) {\n                   break;\n                 }\n               }\n               foundAnyLogs \u003d true;\n               if (!getAllContainers) {\n                 break;\n               }\n             }\n             // Next container\n             key \u003d new LogKey();\n             valueStream \u003d reader.next(key);\n           }\n         } finally {\n           reader.close();\n         }\n       }\n     }\n     if (!foundAnyLogs) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n+      return -1;\n     }\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printAContainerLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return -1;\n    }\n    boolean foundAnyLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n                  key, thisNodeFile.getPath().getName());\n              out.println(containerString);\n              out.println(\"Log Upload Time:\"\n                  + thisNodeFile.getModificationTime());\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogType\", \"LogLength\");\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              while (true) {\n                try {\n                  Pair\u003cString, String\u003e logMeta \u003d\n                      LogReader.readContainerMetaDataAndSkipData(\n                          valueStream, out);\n                  out.printf(PER_LOG_FILE_INFO_PATTERN,\n                      logMeta.getFirst(), logMeta.getSecond());\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              foundAnyLogs \u003d true;\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    if (!foundAnyLogs) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n      return -1;\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5200. Enhanced \"yarn logs\" to be able to get a list of containers whose logs are aggregated via a \"show_container_log_info\" option. Contributed by Xuan Gong.\n",
          "commitDate": "13/07/16 10:54 AM",
          "commitName": "eb471632349deac4b62f8dec853c8ceb64c9617a",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/06/16 9:48 PM",
          "commitNameOld": "6ab5aa1c1f82f81726c6daa38b3db90d8c3ad856",
          "commitAuthorOld": "Xuan",
          "daysBetweenCommits": 20.55,
          "commitsBetweenForRepo": 266,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,75 +1,82 @@\n-  public void printLogMetadata(ContainerLogsRequest options,\n+  public int printAContainerLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n     ApplicationId appId \u003d options.getAppId();\n     String appOwner \u003d options.getAppOwner();\n     String nodeId \u003d options.getNodeId();\n     String containerIdStr \u003d options.getContainerId();\n     boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n     String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n         : LogAggregationUtils.getNodeString(nodeId);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n-      return;\n+      return -1;\n     }\n     boolean foundAnyLogs \u003d false;\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       if (nodeIdStr !\u003d null) {\n         if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n           continue;\n         }\n       }\n       if (!thisNodeFile.getPath().getName()\n           .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d\n             new AggregatedLogFormat.LogReader(getConf(),\n             thisNodeFile.getPath());\n         try {\n           DataInputStream valueStream;\n           LogKey key \u003d new LogKey();\n           valueStream \u003d reader.next(key);\n           while (valueStream !\u003d null) {\n             if (getAllContainers || (key.toString().equals(containerIdStr))) {\n-              String containerString \u003d\n-                  \"\\n\\nContainer: \" + key + \" on \"\n-                  + thisNodeFile.getPath().getName();\n+              String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n+                  key, thisNodeFile.getPath().getName());\n               out.println(containerString);\n               out.println(\"Log Upload Time:\"\n                   + thisNodeFile.getModificationTime());\n               out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+              out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogType\", \"LogLength\");\n+              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n               while (true) {\n                 try {\n-                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n+                  Pair\u003cString, String\u003e logMeta \u003d\n+                      LogReader.readContainerMetaDataAndSkipData(\n+                          valueStream, out);\n+                  out.printf(PER_LOG_FILE_INFO_PATTERN,\n+                      logMeta.getFirst(), logMeta.getSecond());\n                 } catch (EOFException eof) {\n                   break;\n                 }\n               }\n               foundAnyLogs \u003d true;\n               if (!getAllContainers) {\n                 break;\n               }\n             }\n             // Next container\n             key \u003d new LogKey();\n             valueStream \u003d reader.next(key);\n           }\n         } finally {\n           reader.close();\n         }\n       }\n     }\n     if (!foundAnyLogs) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n+      return -1;\n     }\n+    return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int printAContainerLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return -1;\n    }\n    boolean foundAnyLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              String containerString \u003d String.format(CONTAINER_ON_NODE_PATTERN,\n                  key, thisNodeFile.getPath().getName());\n              out.println(containerString);\n              out.println(\"Log Upload Time:\"\n                  + thisNodeFile.getModificationTime());\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              out.printf(PER_LOG_FILE_INFO_PATTERN, \"LogType\", \"LogLength\");\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              while (true) {\n                try {\n                  Pair\u003cString, String\u003e logMeta \u003d\n                      LogReader.readContainerMetaDataAndSkipData(\n                          valueStream, out);\n                  out.printf(PER_LOG_FILE_INFO_PATTERN,\n                      logMeta.getFirst(), logMeta.getSecond());\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              foundAnyLogs \u003d true;\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    if (!foundAnyLogs) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n      return -1;\n    }\n    return 0;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
      "commitDate": "26/05/16 11:49 PM",
      "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
      "commitAuthor": "Xuan",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,75 @@\n-  public void printLogMetadata(ApplicationId appId,\n-      String containerIdStr, String nodeId, String appOwner,\n+  public void printLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n+    ApplicationId appId \u003d options.getAppId();\n+    String appOwner \u003d options.getAppOwner();\n+    String nodeId \u003d options.getNodeId();\n+    String containerIdStr \u003d options.getContainerId();\n     boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n     String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n         : LogAggregationUtils.getNodeString(nodeId);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n       return;\n     }\n     boolean foundAnyLogs \u003d false;\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       if (nodeIdStr !\u003d null) {\n         if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n           continue;\n         }\n       }\n       if (!thisNodeFile.getPath().getName()\n           .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d\n             new AggregatedLogFormat.LogReader(getConf(),\n             thisNodeFile.getPath());\n         try {\n           DataInputStream valueStream;\n           LogKey key \u003d new LogKey();\n           valueStream \u003d reader.next(key);\n           while (valueStream !\u003d null) {\n             if (getAllContainers || (key.toString().equals(containerIdStr))) {\n               String containerString \u003d\n                   \"\\n\\nContainer: \" + key + \" on \"\n                   + thisNodeFile.getPath().getName();\n               out.println(containerString);\n               out.println(\"Log Upload Time:\"\n                   + thisNodeFile.getModificationTime());\n               out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n               while (true) {\n                 try {\n                   LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n                 } catch (EOFException eof) {\n                   break;\n                 }\n               }\n               foundAnyLogs \u003d true;\n               if (!getAllContainers) {\n                 break;\n               }\n             }\n             // Next container\n             key \u003d new LogKey();\n             valueStream \u003d reader.next(key);\n           }\n         } finally {\n           reader.close();\n         }\n       }\n     }\n     if (!foundAnyLogs) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void printLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundAnyLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              String containerString \u003d\n                  \"\\n\\nContainer: \" + key + \" on \"\n                  + thisNodeFile.getPath().getName();\n              out.println(containerString);\n              out.println(\"Log Upload Time:\"\n                  + thisNodeFile.getModificationTime());\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              while (true) {\n                try {\n                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              foundAnyLogs \u003d true;\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    if (!foundAnyLogs) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, containerIdStr-String, nodeId-String, appOwner-String, out-PrintStream, err-PrintStream]",
            "newValue": "[options-ContainerLogsRequest, out-PrintStream, err-PrintStream]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5089. Improve \"yarn log\" command-line \"logFiles\" option to support\nregex. Contributed by Xuan Gong\n",
          "commitDate": "26/05/16 11:49 PM",
          "commitName": "bde819abbbcea940cfa6426a9e4920e6c8dc9cf1",
          "commitAuthor": "Xuan",
          "commitDateOld": "18/05/16 10:14 AM",
          "commitNameOld": "ef1757790d89cc72f88f5330761b1c8901c59e94",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 8.57,
          "commitsBetweenForRepo": 66,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,72 +1,75 @@\n-  public void printLogMetadata(ApplicationId appId,\n-      String containerIdStr, String nodeId, String appOwner,\n+  public void printLogMetadata(ContainerLogsRequest options,\n       PrintStream out, PrintStream err)\n       throws IOException {\n+    ApplicationId appId \u003d options.getAppId();\n+    String appOwner \u003d options.getAppOwner();\n+    String nodeId \u003d options.getNodeId();\n+    String containerIdStr \u003d options.getContainerId();\n     boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n     String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n         : LogAggregationUtils.getNodeString(nodeId);\n     RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n         appId, appOwner);\n     if (nodeFiles \u003d\u003d null) {\n       return;\n     }\n     boolean foundAnyLogs \u003d false;\n     while (nodeFiles.hasNext()) {\n       FileStatus thisNodeFile \u003d nodeFiles.next();\n       if (nodeIdStr !\u003d null) {\n         if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n           continue;\n         }\n       }\n       if (!thisNodeFile.getPath().getName()\n           .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n         AggregatedLogFormat.LogReader reader \u003d\n             new AggregatedLogFormat.LogReader(getConf(),\n             thisNodeFile.getPath());\n         try {\n           DataInputStream valueStream;\n           LogKey key \u003d new LogKey();\n           valueStream \u003d reader.next(key);\n           while (valueStream !\u003d null) {\n             if (getAllContainers || (key.toString().equals(containerIdStr))) {\n               String containerString \u003d\n                   \"\\n\\nContainer: \" + key + \" on \"\n                   + thisNodeFile.getPath().getName();\n               out.println(containerString);\n               out.println(\"Log Upload Time:\"\n                   + thisNodeFile.getModificationTime());\n               out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n               while (true) {\n                 try {\n                   LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n                 } catch (EOFException eof) {\n                   break;\n                 }\n               }\n               foundAnyLogs \u003d true;\n               if (!getAllContainers) {\n                 break;\n               }\n             }\n             // Next container\n             key \u003d new LogKey();\n             valueStream \u003d reader.next(key);\n           }\n         } finally {\n           reader.close();\n         }\n       }\n     }\n     if (!foundAnyLogs) {\n       if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n         err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n             + \"on the node specified: \" + nodeId);\n       } else if (nodeId !\u003d null) {\n         err.println(\"Can not find log metadata for any containers on \"\n             + nodeId);\n       } else if (containerIdStr !\u003d null) {\n         err.println(\"Can not find log metadata for container: \"\n             + containerIdStr);\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void printLogMetadata(ContainerLogsRequest options,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    ApplicationId appId \u003d options.getAppId();\n    String appOwner \u003d options.getAppOwner();\n    String nodeId \u003d options.getNodeId();\n    String containerIdStr \u003d options.getContainerId();\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundAnyLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              String containerString \u003d\n                  \"\\n\\nContainer: \" + key + \" on \"\n                  + thisNodeFile.getPath().getName();\n              out.println(containerString);\n              out.println(\"Log Upload Time:\"\n                  + thisNodeFile.getModificationTime());\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              while (true) {\n                try {\n                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              foundAnyLogs \u003d true;\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    if (!foundAnyLogs) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java",
          "extendedDetails": {}
        }
      ]
    },
    "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4905. Improved \"yarn logs\" command-line to optionally show log metadata also. Contributed by Xuan Gong.\n",
      "commitDate": "04/05/16 2:16 PM",
      "commitName": "9e37fe3b7a3b5f0a193d228bb5e065f41acd2835",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,72 @@\n+  public void printLogMetadata(ApplicationId appId,\n+      String containerIdStr, String nodeId, String appOwner,\n+      PrintStream out, PrintStream err)\n+      throws IOException {\n+    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n+    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n+        : LogAggregationUtils.getNodeString(nodeId);\n+    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n+        appId, appOwner);\n+    if (nodeFiles \u003d\u003d null) {\n+      return;\n+    }\n+    boolean foundAnyLogs \u003d false;\n+    while (nodeFiles.hasNext()) {\n+      FileStatus thisNodeFile \u003d nodeFiles.next();\n+      if (nodeIdStr !\u003d null) {\n+        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n+          continue;\n+        }\n+      }\n+      if (!thisNodeFile.getPath().getName()\n+          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n+        AggregatedLogFormat.LogReader reader \u003d\n+            new AggregatedLogFormat.LogReader(getConf(),\n+            thisNodeFile.getPath());\n+        try {\n+          DataInputStream valueStream;\n+          LogKey key \u003d new LogKey();\n+          valueStream \u003d reader.next(key);\n+          while (valueStream !\u003d null) {\n+            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n+              String containerString \u003d\n+                  \"\\n\\nContainer: \" + key + \" on \"\n+                  + thisNodeFile.getPath().getName();\n+              out.println(containerString);\n+              out.println(\"Log Upload Time:\"\n+                  + thisNodeFile.getModificationTime());\n+              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n+              while (true) {\n+                try {\n+                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n+                } catch (EOFException eof) {\n+                  break;\n+                }\n+              }\n+              foundAnyLogs \u003d true;\n+              if (!getAllContainers) {\n+                break;\n+              }\n+            }\n+            // Next container\n+            key \u003d new LogKey();\n+            valueStream \u003d reader.next(key);\n+          }\n+        } finally {\n+          reader.close();\n+        }\n+      }\n+    }\n+    if (!foundAnyLogs) {\n+      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n+        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n+            + \"on the node specified: \" + nodeId);\n+      } else if (nodeId !\u003d null) {\n+        err.println(\"Can not find log metadata for any containers on \"\n+            + nodeId);\n+      } else if (containerIdStr !\u003d null) {\n+        err.println(\"Can not find log metadata for container: \"\n+            + containerIdStr);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void printLogMetadata(ApplicationId appId,\n      String containerIdStr, String nodeId, String appOwner,\n      PrintStream out, PrintStream err)\n      throws IOException {\n    boolean getAllContainers \u003d (containerIdStr \u003d\u003d null);\n    String nodeIdStr \u003d (nodeId \u003d\u003d null) ? null\n        : LogAggregationUtils.getNodeString(nodeId);\n    RemoteIterator\u003cFileStatus\u003e nodeFiles \u003d getRemoteNodeFileDir(\n        appId, appOwner);\n    if (nodeFiles \u003d\u003d null) {\n      return;\n    }\n    boolean foundAnyLogs \u003d false;\n    while (nodeFiles.hasNext()) {\n      FileStatus thisNodeFile \u003d nodeFiles.next();\n      if (nodeIdStr !\u003d null) {\n        if (!thisNodeFile.getPath().getName().contains(nodeIdStr)) {\n          continue;\n        }\n      }\n      if (!thisNodeFile.getPath().getName()\n          .endsWith(LogAggregationUtils.TMP_FILE_SUFFIX)) {\n        AggregatedLogFormat.LogReader reader \u003d\n            new AggregatedLogFormat.LogReader(getConf(),\n            thisNodeFile.getPath());\n        try {\n          DataInputStream valueStream;\n          LogKey key \u003d new LogKey();\n          valueStream \u003d reader.next(key);\n          while (valueStream !\u003d null) {\n            if (getAllContainers || (key.toString().equals(containerIdStr))) {\n              String containerString \u003d\n                  \"\\n\\nContainer: \" + key + \" on \"\n                  + thisNodeFile.getPath().getName();\n              out.println(containerString);\n              out.println(\"Log Upload Time:\"\n                  + thisNodeFile.getModificationTime());\n              out.println(StringUtils.repeat(\"\u003d\", containerString.length()));\n              while (true) {\n                try {\n                  LogReader.readContainerMetaDataAndSkipData(valueStream, out);\n                } catch (EOFException eof) {\n                  break;\n                }\n              }\n              foundAnyLogs \u003d true;\n              if (!getAllContainers) {\n                break;\n              }\n            }\n            // Next container\n            key \u003d new LogKey();\n            valueStream \u003d reader.next(key);\n          }\n        } finally {\n          reader.close();\n        }\n      }\n    }\n    if (!foundAnyLogs) {\n      if (containerIdStr !\u003d null \u0026\u0026 nodeId !\u003d null) {\n        err.println(\"The container \" + containerIdStr + \" couldn\u0027t be found \"\n            + \"on the node specified: \" + nodeId);\n      } else if (nodeId !\u003d null) {\n        err.println(\"Can not find log metadata for any containers on \"\n            + nodeId);\n      } else if (containerIdStr !\u003d null) {\n        err.println(\"Can not find log metadata for container: \"\n            + containerIdStr);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/logaggregation/LogCLIHelpers.java"
    }
  }
}