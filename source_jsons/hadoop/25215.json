{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "YARNRunner.java",
  "functionName": "setupAMCommand",
  "functionId": "setupAMCommand___jobConf-Configuration",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java",
  "functionStartLine": 444,
  "functionEndLine": 505,
  "numCommitsSeen": 80,
  "timeTaken": 795,
  "changeHistory": [
    "732ee6f0b58a12500198c0d934cc570c7490b520"
  ],
  "changeHistoryShort": {
    "732ee6f0b58a12500198c0d934cc570c7490b520": "Yintroduced"
  },
  "changeHistoryDetails": {
    "732ee6f0b58a12500198c0d934cc570c7490b520": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6825. YARNRunner#createApplicationSubmissionContext method is longer than 150 lines (Contributed by Gergely Nov√°k via Daniel Templeton)\n",
      "commitDate": "22/02/17 3:38 PM",
      "commitName": "732ee6f0b58a12500198c0d934cc570c7490b520",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,62 @@\n+  private List\u003cString\u003e setupAMCommand(Configuration jobConf) {\n+    List\u003cString\u003e vargs \u003d new ArrayList\u003c\u003e(8);\n+    vargs.add(MRApps.crossPlatformifyMREnv(jobConf, Environment.JAVA_HOME)\n+        + \"/bin/java\");\n+\n+    Path amTmpDir \u003d\n+        new Path(MRApps.crossPlatformifyMREnv(conf, Environment.PWD),\n+            YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR);\n+    vargs.add(\"-Djava.io.tmpdir\u003d\" + amTmpDir);\n+    MRApps.addLog4jSystemProperties(null, vargs, conf);\n+\n+    // Check for Java Lib Path usage in MAP and REDUCE configs\n+    warnForJavaLibPath(conf.get(MRJobConfig.MAP_JAVA_OPTS, \"\"),\n+        \"map\",\n+        MRJobConfig.MAP_JAVA_OPTS,\n+        MRJobConfig.MAP_ENV);\n+    warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS, \"\"),\n+        \"map\",\n+        MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS,\n+        MRJobConfig.MAPRED_ADMIN_USER_ENV);\n+    warnForJavaLibPath(conf.get(MRJobConfig.REDUCE_JAVA_OPTS, \"\"),\n+        \"reduce\",\n+        MRJobConfig.REDUCE_JAVA_OPTS,\n+        MRJobConfig.REDUCE_ENV);\n+    warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS, \"\"),\n+        \"reduce\",\n+        MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS,\n+        MRJobConfig.MAPRED_ADMIN_USER_ENV);\n+\n+    // Add AM admin command opts before user command opts\n+    // so that it can be overridden by user\n+    String mrAppMasterAdminOptions \u003d conf.get(MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS,\n+        MRJobConfig.DEFAULT_MR_AM_ADMIN_COMMAND_OPTS);\n+    warnForJavaLibPath(mrAppMasterAdminOptions, \"app master\",\n+        MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS, MRJobConfig.MR_AM_ADMIN_USER_ENV);\n+    vargs.add(mrAppMasterAdminOptions);\n+\n+    // Add AM user command opts\n+    String mrAppMasterUserOptions \u003d conf.get(MRJobConfig.MR_AM_COMMAND_OPTS,\n+        MRJobConfig.DEFAULT_MR_AM_COMMAND_OPTS);\n+    warnForJavaLibPath(mrAppMasterUserOptions, \"app master\",\n+        MRJobConfig.MR_AM_COMMAND_OPTS, MRJobConfig.MR_AM_ENV);\n+    vargs.add(mrAppMasterUserOptions);\n+\n+    if (jobConf.getBoolean(MRJobConfig.MR_AM_PROFILE,\n+        MRJobConfig.DEFAULT_MR_AM_PROFILE)) {\n+      final String profileParams \u003d jobConf.get(MRJobConfig.MR_AM_PROFILE_PARAMS,\n+          MRJobConfig.DEFAULT_TASK_PROFILE_PARAMS);\n+      if (profileParams !\u003d null) {\n+        vargs.add(String.format(profileParams,\n+            ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR\n+                + TaskLog.LogName.PROFILE));\n+      }\n+    }\n+\n+    vargs.add(MRJobConfig.APPLICATION_MASTER_CLASS);\n+    vargs.add(\"1\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR +\n+        Path.SEPARATOR + ApplicationConstants.STDOUT);\n+    vargs.add(\"2\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR +\n+        Path.SEPARATOR + ApplicationConstants.STDERR);\n+    return vargs;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cString\u003e setupAMCommand(Configuration jobConf) {\n    List\u003cString\u003e vargs \u003d new ArrayList\u003c\u003e(8);\n    vargs.add(MRApps.crossPlatformifyMREnv(jobConf, Environment.JAVA_HOME)\n        + \"/bin/java\");\n\n    Path amTmpDir \u003d\n        new Path(MRApps.crossPlatformifyMREnv(conf, Environment.PWD),\n            YarnConfiguration.DEFAULT_CONTAINER_TEMP_DIR);\n    vargs.add(\"-Djava.io.tmpdir\u003d\" + amTmpDir);\n    MRApps.addLog4jSystemProperties(null, vargs, conf);\n\n    // Check for Java Lib Path usage in MAP and REDUCE configs\n    warnForJavaLibPath(conf.get(MRJobConfig.MAP_JAVA_OPTS, \"\"),\n        \"map\",\n        MRJobConfig.MAP_JAVA_OPTS,\n        MRJobConfig.MAP_ENV);\n    warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS, \"\"),\n        \"map\",\n        MRJobConfig.MAPRED_MAP_ADMIN_JAVA_OPTS,\n        MRJobConfig.MAPRED_ADMIN_USER_ENV);\n    warnForJavaLibPath(conf.get(MRJobConfig.REDUCE_JAVA_OPTS, \"\"),\n        \"reduce\",\n        MRJobConfig.REDUCE_JAVA_OPTS,\n        MRJobConfig.REDUCE_ENV);\n    warnForJavaLibPath(conf.get(MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS, \"\"),\n        \"reduce\",\n        MRJobConfig.MAPRED_REDUCE_ADMIN_JAVA_OPTS,\n        MRJobConfig.MAPRED_ADMIN_USER_ENV);\n\n    // Add AM admin command opts before user command opts\n    // so that it can be overridden by user\n    String mrAppMasterAdminOptions \u003d conf.get(MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS,\n        MRJobConfig.DEFAULT_MR_AM_ADMIN_COMMAND_OPTS);\n    warnForJavaLibPath(mrAppMasterAdminOptions, \"app master\",\n        MRJobConfig.MR_AM_ADMIN_COMMAND_OPTS, MRJobConfig.MR_AM_ADMIN_USER_ENV);\n    vargs.add(mrAppMasterAdminOptions);\n\n    // Add AM user command opts\n    String mrAppMasterUserOptions \u003d conf.get(MRJobConfig.MR_AM_COMMAND_OPTS,\n        MRJobConfig.DEFAULT_MR_AM_COMMAND_OPTS);\n    warnForJavaLibPath(mrAppMasterUserOptions, \"app master\",\n        MRJobConfig.MR_AM_COMMAND_OPTS, MRJobConfig.MR_AM_ENV);\n    vargs.add(mrAppMasterUserOptions);\n\n    if (jobConf.getBoolean(MRJobConfig.MR_AM_PROFILE,\n        MRJobConfig.DEFAULT_MR_AM_PROFILE)) {\n      final String profileParams \u003d jobConf.get(MRJobConfig.MR_AM_PROFILE_PARAMS,\n          MRJobConfig.DEFAULT_TASK_PROFILE_PARAMS);\n      if (profileParams !\u003d null) {\n        vargs.add(String.format(profileParams,\n            ApplicationConstants.LOG_DIR_EXPANSION_VAR + Path.SEPARATOR\n                + TaskLog.LogName.PROFILE));\n      }\n    }\n\n    vargs.add(MRJobConfig.APPLICATION_MASTER_CLASS);\n    vargs.add(\"1\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR +\n        Path.SEPARATOR + ApplicationConstants.STDOUT);\n    vargs.add(\"2\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR +\n        Path.SEPARATOR + ApplicationConstants.STDERR);\n    return vargs;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-jobclient/src/main/java/org/apache/hadoop/mapred/YARNRunner.java"
    }
  }
}