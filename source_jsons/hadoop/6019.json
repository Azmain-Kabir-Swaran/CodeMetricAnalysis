{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSEditLog.java",
  "functionName": "initJournals",
  "functionId": "initJournals___dirs-List__URI__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
  "functionStartLine": 278,
  "functionEndLine": 305,
  "numCommitsSeen": 141,
  "timeTaken": 3412,
  "changeHistory": [
    "faa4455be512e070fa420084be8d1be5c72f3b08",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
    "cb11d68f409b7dabfc1f31c43f026a905810ed01",
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9",
    "e767845c36080dd936f711664dc42ecc570c3561",
    "39661c06f78dab00e296b74199f47d630e5d3845",
    "64ec449010be3e1c37ec9f1c438257348e67f1ba",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e"
  ],
  "changeHistoryShort": {
    "faa4455be512e070fa420084be8d1be5c72f3b08": "Ybodychange",
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": "Ybodychange",
    "cb11d68f409b7dabfc1f31c43f026a905810ed01": "Ybodychange",
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9": "Ybodychange",
    "e767845c36080dd936f711664dc42ecc570c3561": "Ybodychange",
    "39661c06f78dab00e296b74199f47d630e5d3845": "Ybodychange",
    "64ec449010be3e1c37ec9f1c438257348e67f1ba": "Ybodychange",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": "Ymodifierchange"
  },
  "changeHistoryDetails": {
    "faa4455be512e070fa420084be8d1be5c72f3b08": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6634. inotify in HDFS. Contributed by James Thomas.\n",
      "commitDate": "02/09/14 2:02 PM",
      "commitName": "faa4455be512e070fa420084be8d1be5c72f3b08",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "23/07/14 12:05 PM",
      "commitNameOld": "5343b43fd989ec596afed807ddce29ad96c23e2d",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 41.08,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,28 @@\n   private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n-    journalSet \u003d new JournalSet(minimumRedundantJournals);\n+    synchronized(journalSetLock) {\n+      journalSet \u003d new JournalSet(minimumRedundantJournals);\n \n-    for (URI u : dirs) {\n-      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n-          .contains(u);\n-      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n-        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n-        if (sd !\u003d null) {\n-          journalSet.add(new FileJournalManager(conf, sd, storage),\n-              required, sharedEditsDirs.contains(u));\n+      for (URI u : dirs) {\n+        boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n+            .contains(u);\n+        if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n+          StorageDirectory sd \u003d storage.getStorageDirectory(u);\n+          if (sd !\u003d null) {\n+            journalSet.add(new FileJournalManager(conf, sd, storage),\n+                required, sharedEditsDirs.contains(u));\n+          }\n+        } else {\n+          journalSet.add(createJournal(u), required,\n+              sharedEditsDirs.contains(u));\n         }\n-      } else {\n-        journalSet.add(createJournal(u), required,\n-            sharedEditsDirs.contains(u));\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    synchronized(journalSetLock) {\n      journalSet \u003d new JournalSet(minimumRedundantJournals);\n\n      for (URI u : dirs) {\n        boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n            .contains(u);\n        if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n          StorageDirectory sd \u003d storage.getStorageDirectory(u);\n          if (sd !\u003d null) {\n            journalSet.add(new FileJournalManager(conf, sd, storage),\n                required, sharedEditsDirs.contains(u));\n          }\n        } else {\n          journalSet.add(createJournal(u), required,\n              sharedEditsDirs.contains(u));\n        }\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "edb6dc5f303093c2604cd07b0c0dacf12dbce5de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5138. Support HDFS upgrade in HA. Contributed by Aaron T. Myers.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561381 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/14 12:01 PM",
      "commitName": "edb6dc5f303093c2604cd07b0c0dacf12dbce5de",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "14/01/14 5:06 PM",
      "commitNameOld": "578dae9ef39eef046b0a0ff9cd830c753a98afad",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 10.79,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n     journalSet \u003d new JournalSet(minimumRedundantJournals);\n \n     for (URI u : dirs) {\n       boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n           .contains(u);\n       if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n         StorageDirectory sd \u003d storage.getStorageDirectory(u);\n         if (sd !\u003d null) {\n-          journalSet.add(new FileJournalManager(conf, sd, storage), required);\n+          journalSet.add(new FileJournalManager(conf, sd, storage),\n+              required, sharedEditsDirs.contains(u));\n         }\n       } else {\n-        journalSet.add(createJournal(u), required);\n+        journalSet.add(createJournal(u), required,\n+            sharedEditsDirs.contains(u));\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    journalSet \u003d new JournalSet(minimumRedundantJournals);\n\n    for (URI u : dirs) {\n      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n          .contains(u);\n      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n        if (sd !\u003d null) {\n          journalSet.add(new FileJournalManager(conf, sd, storage),\n              required, sharedEditsDirs.contains(u));\n        }\n      } else {\n        journalSet.add(createJournal(u), required,\n            sharedEditsDirs.contains(u));\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "cb11d68f409b7dabfc1f31c43f026a905810ed01": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4677. Editlog should support synchronous writes. Contributed by Ivan Mitic.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1491096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/13 4:28 PM",
      "commitName": "cb11d68f409b7dabfc1f31c43f026a905810ed01",
      "commitAuthor": "Ivan Mitic",
      "commitDateOld": "22/05/13 12:37 PM",
      "commitNameOld": "8c62c46046656c01b327c378e89d57b4bf37e16e",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 17.16,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n     journalSet \u003d new JournalSet(minimumRedundantJournals);\n \n     for (URI u : dirs) {\n       boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n           .contains(u);\n       if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n         StorageDirectory sd \u003d storage.getStorageDirectory(u);\n         if (sd !\u003d null) {\n-          journalSet.add(new FileJournalManager(sd, storage), required);\n+          journalSet.add(new FileJournalManager(conf, sd, storage), required);\n         }\n       } else {\n         journalSet.add(createJournal(u), required);\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    journalSet \u003d new JournalSet(minimumRedundantJournals);\n\n    for (URI u : dirs) {\n      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n          .contains(u);\n      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n        if (sd !\u003d null) {\n          journalSet.add(new FileJournalManager(conf, sd, storage), required);\n        }\n      } else {\n        journalSet.add(createJournal(u), required);\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3582. Hook daemon process exit for testing. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360329 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/12 10:58 AM",
      "commitName": "cdae6953e80e81693bb4c9eb38b62eaba3ac8cf9",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "02/07/12 11:21 AM",
      "commitNameOld": "7accbabdee0b7619ff83514c173e815d290b33bf",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,24 @@\n   private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n     journalSet \u003d new JournalSet(minimumRedundantJournals);\n-    // set runtime so we can test starting with a faulty or unavailable\n-    // shared directory\n-    this.journalSet.setRuntimeForTesting(runtime);\n \n     for (URI u : dirs) {\n       boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n           .contains(u);\n       if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n         StorageDirectory sd \u003d storage.getStorageDirectory(u);\n         if (sd !\u003d null) {\n           journalSet.add(new FileJournalManager(sd, storage), required);\n         }\n       } else {\n         journalSet.add(createJournal(u), required);\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    journalSet \u003d new JournalSet(minimumRedundantJournals);\n\n    for (URI u : dirs) {\n      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n          .contains(u);\n      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n        if (sd !\u003d null) {\n          journalSet.add(new FileJournalManager(sd, storage), required);\n        }\n      } else {\n        journalSet.add(createJournal(u), required);\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "e767845c36080dd936f711664dc42ecc570c3561": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2717. BookKeeper Journal output stream doesn\u0027t check addComplete rc. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342534 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/05/12 1:56 AM",
      "commitName": "e767845c36080dd936f711664dc42ecc570c3561",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "24/05/12 8:56 PM",
      "commitNameOld": "39661c06f78dab00e296b74199f47d630e5d3845",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.21,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n     journalSet \u003d new JournalSet(minimumRedundantJournals);\n+    // set runtime so we can test starting with a faulty or unavailable\n+    // shared directory\n+    this.journalSet.setRuntimeForTesting(runtime);\n+\n     for (URI u : dirs) {\n       boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n           .contains(u);\n       if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n         StorageDirectory sd \u003d storage.getStorageDirectory(u);\n         if (sd !\u003d null) {\n           journalSet.add(new FileJournalManager(sd, storage), required);\n         }\n       } else {\n         journalSet.add(createJournal(u), required);\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    journalSet \u003d new JournalSet(minimumRedundantJournals);\n    // set runtime so we can test starting with a faulty or unavailable\n    // shared directory\n    this.journalSet.setRuntimeForTesting(runtime);\n\n    for (URI u : dirs) {\n      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n          .contains(u);\n      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n        if (sd !\u003d null) {\n          journalSet.add(new FileJournalManager(sd, storage), required);\n        }\n      } else {\n        journalSet.add(createJournal(u), required);\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "39661c06f78dab00e296b74199f47d630e5d3845": {
      "type": "Ybodychange",
      "commitMessage": "Revert HDFS-3058\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342493 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/05/12 8:56 PM",
      "commitName": "39661c06f78dab00e296b74199f47d630e5d3845",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "24/05/12 6:31 PM",
      "commitNameOld": "64ec449010be3e1c37ec9f1c438257348e67f1ba",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,23 @@\n   private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n     journalSet \u003d new JournalSet(minimumRedundantJournals);\n-    // set runtime so we can test starting with a faulty or unavailable\n-    // shared directory\n-    this.journalSet.setRuntimeForTesting(runtime);\n-\n     for (URI u : dirs) {\n       boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n           .contains(u);\n       if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n         StorageDirectory sd \u003d storage.getStorageDirectory(u);\n         if (sd !\u003d null) {\n           journalSet.add(new FileJournalManager(sd, storage), required);\n         }\n       } else {\n         journalSet.add(createJournal(u), required);\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    journalSet \u003d new JournalSet(minimumRedundantJournals);\n    for (URI u : dirs) {\n      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n          .contains(u);\n      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n        if (sd !\u003d null) {\n          journalSet.add(new FileJournalManager(sd, storage), required);\n        }\n      } else {\n        journalSet.add(createJournal(u), required);\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "64ec449010be3e1c37ec9f1c438257348e67f1ba": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3058. HA: Bring BookKeeperJournalManager up to date with HA changes. Contributed by Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1342483 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/05/12 6:31 PM",
      "commitName": "64ec449010be3e1c37ec9f1c438257348e67f1ba",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "23/05/12 1:42 PM",
      "commitNameOld": "74dfa8f1f22d58df64a78c660af111e17ab7053e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.2,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,27 @@\n   private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n     journalSet \u003d new JournalSet(minimumRedundantJournals);\n+    // set runtime so we can test starting with a faulty or unavailable\n+    // shared directory\n+    this.journalSet.setRuntimeForTesting(runtime);\n+\n     for (URI u : dirs) {\n       boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n           .contains(u);\n       if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n         StorageDirectory sd \u003d storage.getStorageDirectory(u);\n         if (sd !\u003d null) {\n           journalSet.add(new FileJournalManager(sd, storage), required);\n         }\n       } else {\n         journalSet.add(createJournal(u), required);\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    journalSet \u003d new JournalSet(minimumRedundantJournals);\n    // set runtime so we can test starting with a faulty or unavailable\n    // shared directory\n    this.journalSet.setRuntimeForTesting(runtime);\n\n    for (URI u : dirs) {\n      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n          .contains(u);\n      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n        if (sd !\u003d null) {\n          journalSet.add(new FileJournalManager(sd, storage), required);\n        }\n      } else {\n        journalSet.add(createJournal(u), required);\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-3039. Address findbugs and javadoc warnings on branch. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1296017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/03/12 5:32 PM",
      "commitName": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "29/02/12 4:37 PM",
      "commitNameOld": "30cffeb388f9065f0c5ce5fa53e127940a8917b6",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n-  private void initJournals(List\u003cURI\u003e dirs) {\n+  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n     int minimumRedundantJournals \u003d conf.getInt(\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n         DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n \n     journalSet \u003d new JournalSet(minimumRedundantJournals);\n     for (URI u : dirs) {\n       boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n           .contains(u);\n       if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n         StorageDirectory sd \u003d storage.getStorageDirectory(u);\n         if (sd !\u003d null) {\n           journalSet.add(new FileJournalManager(sd, storage), required);\n         }\n       } else {\n         journalSet.add(createJournal(u), required);\n       }\n     }\n  \n     if (journalSet.isEmpty()) {\n       LOG.error(\"No edits directories configured!\");\n     } \n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void initJournals(List\u003cURI\u003e dirs) {\n    int minimumRedundantJournals \u003d conf.getInt(\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_KEY,\n        DFSConfigKeys.DFS_NAMENODE_EDITS_DIR_MINIMUM_DEFAULT);\n\n    journalSet \u003d new JournalSet(minimumRedundantJournals);\n    for (URI u : dirs) {\n      boolean required \u003d FSNamesystem.getRequiredNamespaceEditsDirs(conf)\n          .contains(u);\n      if (u.getScheme().equals(NNStorage.LOCAL_URI_SCHEME)) {\n        StorageDirectory sd \u003d storage.getStorageDirectory(u);\n        if (sd !\u003d null) {\n          journalSet.add(new FileJournalManager(sd, storage), required);\n        }\n      } else {\n        journalSet.add(createJournal(u), required);\n      }\n    }\n \n    if (journalSet.isEmpty()) {\n      LOG.error(\"No edits directories configured!\");\n    } \n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, synchronized]"
      }
    }
  }
}