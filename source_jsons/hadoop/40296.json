{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QueueManagementDynamicEditPolicy.java",
  "functionName": "init",
  "functionId": "init___config-Configuration(modifiers-final)__context-RMContext(modifiers-final)__sched-ResourceScheduler(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/QueueManagementDynamicEditPolicy.java",
  "functionStartLine": 92,
  "functionEndLine": 117,
  "numCommitsSeen": 4,
  "timeTaken": 1957,
  "changeHistory": [
    "344c335a920e6f32a35ebace0a118a9dc4a22fb7",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c"
  ],
  "changeHistoryShort": {
    "344c335a920e6f32a35ebace0a118a9dc4a22fb7": "Ybodychange",
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "344c335a920e6f32a35ebace0a118a9dc4a22fb7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8588. Logging improvements for better debuggability. (Suma Shivaprasad via wangda)\n\nChange-Id: I66aa4b0ec031ae5ce0fae558e2f8cbcbbfebc442\n",
      "commitDate": "09/08/18 11:04 AM",
      "commitName": "344c335a920e6f32a35ebace0a118a9dc4a22fb7",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "08/12/17 3:10 PM",
      "commitNameOld": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 243.79,
      "commitsBetweenForRepo": 2240,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public void init(final Configuration config, final RMContext context,\n       final ResourceScheduler sched) {\n-    LOG.info(\"Queue Management Policy monitor:\" + this.\n+    LOG.info(\"Queue Management Policy monitor: {}\" + this.\n         getClass().getCanonicalName());\n     assert null \u003d\u003d scheduler : \"Unexpected duplicate call to init\";\n     if (!(sched instanceof CapacityScheduler)) {\n       throw new YarnRuntimeException(\"Class \" +\n           sched.getClass().getCanonicalName() + \" not instance of \" +\n           CapacityScheduler.class.getCanonicalName());\n     }\n     rmContext \u003d context;\n     scheduler \u003d (CapacityScheduler) sched;\n     clock \u003d scheduler.getClock();\n \n     rc \u003d scheduler.getResourceCalculator();\n     nlm \u003d scheduler.getRMContext().getNodeLabelManager();\n \n     CapacitySchedulerConfiguration csConfig \u003d scheduler.getConfiguration();\n \n     monitoringInterval \u003d csConfig.getLong(\n         CapacitySchedulerConfiguration.QUEUE_MANAGEMENT_MONITORING_INTERVAL,\n         CapacitySchedulerConfiguration.\n             DEFAULT_QUEUE_MANAGEMENT_MONITORING_INTERVAL);\n \n     initQueues();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(final Configuration config, final RMContext context,\n      final ResourceScheduler sched) {\n    LOG.info(\"Queue Management Policy monitor: {}\" + this.\n        getClass().getCanonicalName());\n    assert null \u003d\u003d scheduler : \"Unexpected duplicate call to init\";\n    if (!(sched instanceof CapacityScheduler)) {\n      throw new YarnRuntimeException(\"Class \" +\n          sched.getClass().getCanonicalName() + \" not instance of \" +\n          CapacityScheduler.class.getCanonicalName());\n    }\n    rmContext \u003d context;\n    scheduler \u003d (CapacityScheduler) sched;\n    clock \u003d scheduler.getClock();\n\n    rc \u003d scheduler.getResourceCalculator();\n    nlm \u003d scheduler.getRMContext().getNodeLabelManager();\n\n    CapacitySchedulerConfiguration csConfig \u003d scheduler.getConfiguration();\n\n    monitoringInterval \u003d csConfig.getLong(\n        CapacitySchedulerConfiguration.QUEUE_MANAGEMENT_MONITORING_INTERVAL,\n        CapacitySchedulerConfiguration.\n            DEFAULT_QUEUE_MANAGEMENT_MONITORING_INTERVAL);\n\n    initQueues();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/QueueManagementDynamicEditPolicy.java",
      "extendedDetails": {}
    },
    "b38643c9a8dd2c53024ae830b9565a550d0ec39c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7473. Implement Framework and policy for capacity management of auto created queues. (Suma Shivaprasad via wangda)\n\nChange-Id: Icca7805fe12f6f7fb335effff4b121b6f7f6337b\n",
      "commitDate": "08/12/17 3:10 PM",
      "commitName": "b38643c9a8dd2c53024ae830b9565a550d0ec39c",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,26 @@\n+  public void init(final Configuration config, final RMContext context,\n+      final ResourceScheduler sched) {\n+    LOG.info(\"Queue Management Policy monitor:\" + this.\n+        getClass().getCanonicalName());\n+    assert null \u003d\u003d scheduler : \"Unexpected duplicate call to init\";\n+    if (!(sched instanceof CapacityScheduler)) {\n+      throw new YarnRuntimeException(\"Class \" +\n+          sched.getClass().getCanonicalName() + \" not instance of \" +\n+          CapacityScheduler.class.getCanonicalName());\n+    }\n+    rmContext \u003d context;\n+    scheduler \u003d (CapacityScheduler) sched;\n+    clock \u003d scheduler.getClock();\n+\n+    rc \u003d scheduler.getResourceCalculator();\n+    nlm \u003d scheduler.getRMContext().getNodeLabelManager();\n+\n+    CapacitySchedulerConfiguration csConfig \u003d scheduler.getConfiguration();\n+\n+    monitoringInterval \u003d csConfig.getLong(\n+        CapacitySchedulerConfiguration.QUEUE_MANAGEMENT_MONITORING_INTERVAL,\n+        CapacitySchedulerConfiguration.\n+            DEFAULT_QUEUE_MANAGEMENT_MONITORING_INTERVAL);\n+\n+    initQueues();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void init(final Configuration config, final RMContext context,\n      final ResourceScheduler sched) {\n    LOG.info(\"Queue Management Policy monitor:\" + this.\n        getClass().getCanonicalName());\n    assert null \u003d\u003d scheduler : \"Unexpected duplicate call to init\";\n    if (!(sched instanceof CapacityScheduler)) {\n      throw new YarnRuntimeException(\"Class \" +\n          sched.getClass().getCanonicalName() + \" not instance of \" +\n          CapacityScheduler.class.getCanonicalName());\n    }\n    rmContext \u003d context;\n    scheduler \u003d (CapacityScheduler) sched;\n    clock \u003d scheduler.getClock();\n\n    rc \u003d scheduler.getResourceCalculator();\n    nlm \u003d scheduler.getRMContext().getNodeLabelManager();\n\n    CapacitySchedulerConfiguration csConfig \u003d scheduler.getConfiguration();\n\n    monitoringInterval \u003d csConfig.getLong(\n        CapacitySchedulerConfiguration.QUEUE_MANAGEMENT_MONITORING_INTERVAL,\n        CapacitySchedulerConfiguration.\n            DEFAULT_QUEUE_MANAGEMENT_MONITORING_INTERVAL);\n\n    initQueues();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/QueueManagementDynamicEditPolicy.java"
    }
  }
}