{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "reapContainer",
  "functionId": "reapContainer___ctx-ContainerReapContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 777,
  "functionEndLine": 802,
  "numCommitsSeen": 84,
  "timeTaken": 2884,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d": "Ybodychange",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public boolean reapContainer(ContainerReapContext ctx) throws IOException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     String runAsUser \u003d getRunAsUser(user);\n     ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n         .Builder(container)\n         .setExecutionAttribute(RUN_AS_USER, runAsUser)\n         .setExecutionAttribute(USER, user)\n         .build();\n     try {\n       linuxContainerRuntime.reapContainer(runtimeContext);\n     } catch (ContainerExecutionException e) {\n       int retCode \u003d e.getExitCode();\n       if (retCode !\u003d 0) {\n         return false;\n       }\n-      LOG.warn(\"Error in reaping container \"\n-          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n+      LOG.warn(\"Error in reaping container {} exit \u003d {}\",\n+          container.getContainerId(), retCode, e);\n       logOutput(e.getOutput());\n       throw new IOException(\"Error in reaping container \"\n           + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n     } finally {\n       postComplete(container.getContainerId());\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean reapContainer(ContainerReapContext ctx) throws IOException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    String runAsUser \u003d getRunAsUser(user);\n    ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n        .Builder(container)\n        .setExecutionAttribute(RUN_AS_USER, runAsUser)\n        .setExecutionAttribute(USER, user)\n        .build();\n    try {\n      linuxContainerRuntime.reapContainer(runtimeContext);\n    } catch (ContainerExecutionException e) {\n      int retCode \u003d e.getExitCode();\n      if (retCode !\u003d 0) {\n        return false;\n      }\n      LOG.warn(\"Error in reaping container {} exit \u003d {}\",\n          container.getContainerId(), retCode, e);\n      logOutput(e.getOutput());\n      throw new IOException(\"Error in reaping container \"\n          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n    } finally {\n      postComplete(container.getContainerId());\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8508.  Release GPU resource for killed container.\n            Contributed by Chandni Singh\n",
      "commitDate": "27/07/18 4:33 PM",
      "commitName": "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "20/04/18 10:49 AM",
      "commitNameOld": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 98.24,
      "commitsBetweenForRepo": 1201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public boolean reapContainer(ContainerReapContext ctx) throws IOException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     String runAsUser \u003d getRunAsUser(user);\n     ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n         .Builder(container)\n         .setExecutionAttribute(RUN_AS_USER, runAsUser)\n         .setExecutionAttribute(USER, user)\n         .build();\n     try {\n       linuxContainerRuntime.reapContainer(runtimeContext);\n     } catch (ContainerExecutionException e) {\n       int retCode \u003d e.getExitCode();\n       if (retCode !\u003d 0) {\n         return false;\n       }\n       LOG.warn(\"Error in reaping container \"\n           + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n       logOutput(e.getOutput());\n       throw new IOException(\"Error in reaping container \"\n           + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n+    } finally {\n+      postComplete(container.getContainerId());\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean reapContainer(ContainerReapContext ctx) throws IOException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    String runAsUser \u003d getRunAsUser(user);\n    ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n        .Builder(container)\n        .setExecutionAttribute(RUN_AS_USER, runAsUser)\n        .setExecutionAttribute(USER, user)\n        .build();\n    try {\n      linuxContainerRuntime.reapContainer(runtimeContext);\n    } catch (ContainerExecutionException e) {\n      int retCode \u003d e.getExitCode();\n      if (retCode !\u003d 0) {\n        return false;\n      }\n      LOG.warn(\"Error in reaping container \"\n          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n      logOutput(e.getOutput());\n      throw new IOException(\"Error in reaping container \"\n          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n    } finally {\n      postComplete(container.getContainerId());\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5366. Improve signal handling and delete delay for Docker on Yarn.\n           (Contributed by Shane Kumpf)\n",
      "commitDate": "12/01/18 10:41 AM",
      "commitName": "3d65dbe032e202361d613344ccc6d9c5f99ba395",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,24 @@\n+  public boolean reapContainer(ContainerReapContext ctx) throws IOException {\n+    Container container \u003d ctx.getContainer();\n+    String user \u003d ctx.getUser();\n+    String runAsUser \u003d getRunAsUser(user);\n+    ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n+        .Builder(container)\n+        .setExecutionAttribute(RUN_AS_USER, runAsUser)\n+        .setExecutionAttribute(USER, user)\n+        .build();\n+    try {\n+      linuxContainerRuntime.reapContainer(runtimeContext);\n+    } catch (ContainerExecutionException e) {\n+      int retCode \u003d e.getExitCode();\n+      if (retCode !\u003d 0) {\n+        return false;\n+      }\n+      LOG.warn(\"Error in reaping container \"\n+          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n+      logOutput(e.getOutput());\n+      throw new IOException(\"Error in reaping container \"\n+          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public boolean reapContainer(ContainerReapContext ctx) throws IOException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    String runAsUser \u003d getRunAsUser(user);\n    ContainerRuntimeContext runtimeContext \u003d new ContainerRuntimeContext\n        .Builder(container)\n        .setExecutionAttribute(RUN_AS_USER, runAsUser)\n        .setExecutionAttribute(USER, user)\n        .build();\n    try {\n      linuxContainerRuntime.reapContainer(runtimeContext);\n    } catch (ContainerExecutionException e) {\n      int retCode \u003d e.getExitCode();\n      if (retCode !\u003d 0) {\n        return false;\n      }\n      LOG.warn(\"Error in reaping container \"\n          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n      logOutput(e.getOutput());\n      throw new IOException(\"Error in reaping container \"\n          + container.getContainerId().toString() + \" exit \u003d \" + retCode, e);\n    }\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}