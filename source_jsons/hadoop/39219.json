{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SchedulerUtils.java",
  "functionName": "checkResource",
  "functionId": "checkResource___requestedRI-ResourceInformation__availableResource-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java",
  "functionStartLine": 448,
  "functionEndLine": 487,
  "numCommitsSeen": 51,
  "timeTaken": 1332,
  "changeHistory": [
    "f48fec83d0f2d1a781a141ad7216463c5526321f"
  ],
  "changeHistoryShort": {
    "f48fec83d0f2d1a781a141ad7216463c5526321f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f48fec83d0f2d1a781a141ad7216463c5526321f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8248. Job hangs when a job requests a resource that its queue does not have. (Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "21/05/18 8:10 AM",
      "commitName": "f48fec83d0f2d1a781a141ad7216463c5526321f",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,40 @@\n+  private static boolean checkResource(\n+      ResourceInformation requestedRI, Resource availableResource) {\n+    final ResourceInformation availableRI \u003d\n+        availableResource.getResourceInformation(requestedRI.getName());\n+\n+    long requestedResourceValue \u003d requestedRI.getValue();\n+    long availableResourceValue \u003d availableRI.getValue();\n+    int unitsRelation \u003d UnitsConversionUtil.compareUnits(requestedRI.getUnits(),\n+        availableRI.getUnits());\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Requested resource information: \" + requestedRI);\n+      LOG.debug(\"Available resource information: \" + availableRI);\n+      LOG.debug(\"Relation of units: \" + unitsRelation);\n+    }\n+\n+    // requested resource unit is less than available resource unit\n+    // e.g. requestedUnit: \"m\", availableUnit: \"K\")\n+    if (unitsRelation \u003c 0) {\n+      availableResourceValue \u003d\n+          UnitsConversionUtil.convert(availableRI.getUnits(),\n+              requestedRI.getUnits(), availableRI.getValue());\n+\n+      // requested resource unit is greater than available resource unit\n+      // e.g. requestedUnit: \"G\", availableUnit: \"M\")\n+    } else if (unitsRelation \u003e 0) {\n+      requestedResourceValue \u003d\n+          UnitsConversionUtil.convert(requestedRI.getUnits(),\n+              availableRI.getUnits(), requestedRI.getValue());\n+    }\n+\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Requested resource value after conversion: \"\n+          + requestedResourceValue);\n+      LOG.info(\"Available resource value after conversion: \"\n+          + availableResourceValue);\n+    }\n+\n+    return requestedResourceValue \u003c\u003d availableResourceValue;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static boolean checkResource(\n      ResourceInformation requestedRI, Resource availableResource) {\n    final ResourceInformation availableRI \u003d\n        availableResource.getResourceInformation(requestedRI.getName());\n\n    long requestedResourceValue \u003d requestedRI.getValue();\n    long availableResourceValue \u003d availableRI.getValue();\n    int unitsRelation \u003d UnitsConversionUtil.compareUnits(requestedRI.getUnits(),\n        availableRI.getUnits());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Requested resource information: \" + requestedRI);\n      LOG.debug(\"Available resource information: \" + availableRI);\n      LOG.debug(\"Relation of units: \" + unitsRelation);\n    }\n\n    // requested resource unit is less than available resource unit\n    // e.g. requestedUnit: \"m\", availableUnit: \"K\")\n    if (unitsRelation \u003c 0) {\n      availableResourceValue \u003d\n          UnitsConversionUtil.convert(availableRI.getUnits(),\n              requestedRI.getUnits(), availableRI.getValue());\n\n      // requested resource unit is greater than available resource unit\n      // e.g. requestedUnit: \"G\", availableUnit: \"M\")\n    } else if (unitsRelation \u003e 0) {\n      requestedResourceValue \u003d\n          UnitsConversionUtil.convert(requestedRI.getUnits(),\n              availableRI.getUnits(), requestedRI.getValue());\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Requested resource value after conversion: \"\n          + requestedResourceValue);\n      LOG.info(\"Available resource value after conversion: \"\n          + availableResourceValue);\n    }\n\n    return requestedResourceValue \u003c\u003d availableResourceValue;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/SchedulerUtils.java"
    }
  }
}