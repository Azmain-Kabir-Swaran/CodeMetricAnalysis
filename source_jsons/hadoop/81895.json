{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ComparableVersion.java",
  "functionName": "parseVersion",
  "functionId": "parseVersion___version-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ComparableVersion.java",
  "functionStartLine": 360,
  "functionEndLine": 453,
  "numCommitsSeen": 6,
  "timeTaken": 824,
  "changeHistory": [
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "e21a03f7175dd2c563adc252de2574bd82c9e55e"
  ],
  "changeHistoryShort": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "e21a03f7175dd2c563adc252de2574bd82c9e55e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "28/01/15 5:01 AM",
      "commitNameOld": "9850e1584b7bb47c39d777d6fc4931dd54fbaea7",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 33.68,
      "commitsBetweenForRepo": 339,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,94 +1,94 @@\n     public final void parseVersion( String version )\n     {\n         this.value \u003d version;\n \n         items \u003d new ListItem();\n \n-        version \u003d version.toLowerCase( Locale.ENGLISH );\n+        version \u003d StringUtils.toLowerCase(version);\n \n         ListItem list \u003d items;\n \n         Stack\u003cItem\u003e stack \u003d new Stack\u003cItem\u003e();\n         stack.push( list );\n \n         boolean isDigit \u003d false;\n \n         int startIndex \u003d 0;\n \n         for ( int i \u003d 0; i \u003c version.length(); i++ )\n         {\n             char c \u003d version.charAt( i );\n \n             if ( c \u003d\u003d \u0027.\u0027 )\n             {\n                 if ( i \u003d\u003d startIndex )\n                 {\n                     list.add( IntegerItem.ZERO );\n                 }\n                 else\n                 {\n                     list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n                 }\n                 startIndex \u003d i + 1;\n             }\n             else if ( c \u003d\u003d \u0027-\u0027 )\n             {\n                 if ( i \u003d\u003d startIndex )\n                 {\n                     list.add( IntegerItem.ZERO );\n                 }\n                 else\n                 {\n                     list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n                 }\n                 startIndex \u003d i + 1;\n \n                 if ( isDigit )\n                 {\n                     list.normalize(); // 1.0-* \u003d 1-*\n \n                     if ( ( i + 1 \u003c version.length() ) \u0026\u0026 Character.isDigit( version.charAt( i + 1 ) ) )\n                     {\n                         // new ListItem only if previous were digits and new char is a digit,\n                         // ie need to differentiate only 1.1 from 1-1\n                         list.add( list \u003d new ListItem() );\n \n                         stack.push( list );\n                     }\n                 }\n             }\n             else if ( Character.isDigit( c ) )\n             {\n                 if ( !isDigit \u0026\u0026 i \u003e startIndex )\n                 {\n                     list.add( new StringItem( version.substring( startIndex, i ), true ) );\n                     startIndex \u003d i;\n                 }\n \n                 isDigit \u003d true;\n             }\n             else\n             {\n                 if ( isDigit \u0026\u0026 i \u003e startIndex )\n                 {\n                     list.add( parseItem( true, version.substring( startIndex, i ) ) );\n                     startIndex \u003d i;\n                 }\n \n                 isDigit \u003d false;\n             }\n         }\n \n         if ( version.length() \u003e startIndex )\n         {\n             list.add( parseItem( isDigit, version.substring( startIndex ) ) );\n         }\n \n         while ( !stack.isEmpty() )\n         {\n             list \u003d (ListItem) stack.pop();\n             list.normalize();\n         }\n \n         canonical \u003d items.toString();\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public final void parseVersion( String version )\n    {\n        this.value \u003d version;\n\n        items \u003d new ListItem();\n\n        version \u003d StringUtils.toLowerCase(version);\n\n        ListItem list \u003d items;\n\n        Stack\u003cItem\u003e stack \u003d new Stack\u003cItem\u003e();\n        stack.push( list );\n\n        boolean isDigit \u003d false;\n\n        int startIndex \u003d 0;\n\n        for ( int i \u003d 0; i \u003c version.length(); i++ )\n        {\n            char c \u003d version.charAt( i );\n\n            if ( c \u003d\u003d \u0027.\u0027 )\n            {\n                if ( i \u003d\u003d startIndex )\n                {\n                    list.add( IntegerItem.ZERO );\n                }\n                else\n                {\n                    list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n                }\n                startIndex \u003d i + 1;\n            }\n            else if ( c \u003d\u003d \u0027-\u0027 )\n            {\n                if ( i \u003d\u003d startIndex )\n                {\n                    list.add( IntegerItem.ZERO );\n                }\n                else\n                {\n                    list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n                }\n                startIndex \u003d i + 1;\n\n                if ( isDigit )\n                {\n                    list.normalize(); // 1.0-* \u003d 1-*\n\n                    if ( ( i + 1 \u003c version.length() ) \u0026\u0026 Character.isDigit( version.charAt( i + 1 ) ) )\n                    {\n                        // new ListItem only if previous were digits and new char is a digit,\n                        // ie need to differentiate only 1.1 from 1-1\n                        list.add( list \u003d new ListItem() );\n\n                        stack.push( list );\n                    }\n                }\n            }\n            else if ( Character.isDigit( c ) )\n            {\n                if ( !isDigit \u0026\u0026 i \u003e startIndex )\n                {\n                    list.add( new StringItem( version.substring( startIndex, i ), true ) );\n                    startIndex \u003d i;\n                }\n\n                isDigit \u003d true;\n            }\n            else\n            {\n                if ( isDigit \u0026\u0026 i \u003e startIndex )\n                {\n                    list.add( parseItem( true, version.substring( startIndex, i ) ) );\n                    startIndex \u003d i;\n                }\n\n                isDigit \u003d false;\n            }\n        }\n\n        if ( version.length() \u003e startIndex )\n        {\n            list.add( parseItem( isDigit, version.substring( startIndex ) ) );\n        }\n\n        while ( !stack.isEmpty() )\n        {\n            list \u003d (ListItem) stack.pop();\n            list.normalize();\n        }\n\n        canonical \u003d items.toString();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ComparableVersion.java",
      "extendedDetails": {}
    },
    "e21a03f7175dd2c563adc252de2574bd82c9e55e": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10250. VersionUtil returns wrong value when comparing two versions. Contributed by Yongjun Zhang.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1561860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/01/14 1:36 PM",
      "commitName": "e21a03f7175dd2c563adc252de2574bd82c9e55e",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,94 @@\n+    public final void parseVersion( String version )\n+    {\n+        this.value \u003d version;\n+\n+        items \u003d new ListItem();\n+\n+        version \u003d version.toLowerCase( Locale.ENGLISH );\n+\n+        ListItem list \u003d items;\n+\n+        Stack\u003cItem\u003e stack \u003d new Stack\u003cItem\u003e();\n+        stack.push( list );\n+\n+        boolean isDigit \u003d false;\n+\n+        int startIndex \u003d 0;\n+\n+        for ( int i \u003d 0; i \u003c version.length(); i++ )\n+        {\n+            char c \u003d version.charAt( i );\n+\n+            if ( c \u003d\u003d \u0027.\u0027 )\n+            {\n+                if ( i \u003d\u003d startIndex )\n+                {\n+                    list.add( IntegerItem.ZERO );\n+                }\n+                else\n+                {\n+                    list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n+                }\n+                startIndex \u003d i + 1;\n+            }\n+            else if ( c \u003d\u003d \u0027-\u0027 )\n+            {\n+                if ( i \u003d\u003d startIndex )\n+                {\n+                    list.add( IntegerItem.ZERO );\n+                }\n+                else\n+                {\n+                    list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n+                }\n+                startIndex \u003d i + 1;\n+\n+                if ( isDigit )\n+                {\n+                    list.normalize(); // 1.0-* \u003d 1-*\n+\n+                    if ( ( i + 1 \u003c version.length() ) \u0026\u0026 Character.isDigit( version.charAt( i + 1 ) ) )\n+                    {\n+                        // new ListItem only if previous were digits and new char is a digit,\n+                        // ie need to differentiate only 1.1 from 1-1\n+                        list.add( list \u003d new ListItem() );\n+\n+                        stack.push( list );\n+                    }\n+                }\n+            }\n+            else if ( Character.isDigit( c ) )\n+            {\n+                if ( !isDigit \u0026\u0026 i \u003e startIndex )\n+                {\n+                    list.add( new StringItem( version.substring( startIndex, i ), true ) );\n+                    startIndex \u003d i;\n+                }\n+\n+                isDigit \u003d true;\n+            }\n+            else\n+            {\n+                if ( isDigit \u0026\u0026 i \u003e startIndex )\n+                {\n+                    list.add( parseItem( true, version.substring( startIndex, i ) ) );\n+                    startIndex \u003d i;\n+                }\n+\n+                isDigit \u003d false;\n+            }\n+        }\n+\n+        if ( version.length() \u003e startIndex )\n+        {\n+            list.add( parseItem( isDigit, version.substring( startIndex ) ) );\n+        }\n+\n+        while ( !stack.isEmpty() )\n+        {\n+            list \u003d (ListItem) stack.pop();\n+            list.normalize();\n+        }\n+\n+        canonical \u003d items.toString();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public final void parseVersion( String version )\n    {\n        this.value \u003d version;\n\n        items \u003d new ListItem();\n\n        version \u003d version.toLowerCase( Locale.ENGLISH );\n\n        ListItem list \u003d items;\n\n        Stack\u003cItem\u003e stack \u003d new Stack\u003cItem\u003e();\n        stack.push( list );\n\n        boolean isDigit \u003d false;\n\n        int startIndex \u003d 0;\n\n        for ( int i \u003d 0; i \u003c version.length(); i++ )\n        {\n            char c \u003d version.charAt( i );\n\n            if ( c \u003d\u003d \u0027.\u0027 )\n            {\n                if ( i \u003d\u003d startIndex )\n                {\n                    list.add( IntegerItem.ZERO );\n                }\n                else\n                {\n                    list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n                }\n                startIndex \u003d i + 1;\n            }\n            else if ( c \u003d\u003d \u0027-\u0027 )\n            {\n                if ( i \u003d\u003d startIndex )\n                {\n                    list.add( IntegerItem.ZERO );\n                }\n                else\n                {\n                    list.add( parseItem( isDigit, version.substring( startIndex, i ) ) );\n                }\n                startIndex \u003d i + 1;\n\n                if ( isDigit )\n                {\n                    list.normalize(); // 1.0-* \u003d 1-*\n\n                    if ( ( i + 1 \u003c version.length() ) \u0026\u0026 Character.isDigit( version.charAt( i + 1 ) ) )\n                    {\n                        // new ListItem only if previous were digits and new char is a digit,\n                        // ie need to differentiate only 1.1 from 1-1\n                        list.add( list \u003d new ListItem() );\n\n                        stack.push( list );\n                    }\n                }\n            }\n            else if ( Character.isDigit( c ) )\n            {\n                if ( !isDigit \u0026\u0026 i \u003e startIndex )\n                {\n                    list.add( new StringItem( version.substring( startIndex, i ), true ) );\n                    startIndex \u003d i;\n                }\n\n                isDigit \u003d true;\n            }\n            else\n            {\n                if ( isDigit \u0026\u0026 i \u003e startIndex )\n                {\n                    list.add( parseItem( true, version.substring( startIndex, i ) ) );\n                    startIndex \u003d i;\n                }\n\n                isDigit \u003d false;\n            }\n        }\n\n        if ( version.length() \u003e startIndex )\n        {\n            list.add( parseItem( isDigit, version.substring( startIndex ) ) );\n        }\n\n        while ( !stack.isEmpty() )\n        {\n            list \u003d (ListItem) stack.pop();\n            list.normalize();\n        }\n\n        canonical \u003d items.toString();\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/ComparableVersion.java"
    }
  }
}