{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyWithUpgradeDomain.java",
  "functionName": "pickupReplicaSet",
  "functionId": "pickupReplicaSet___moreThanOne-Collection__DatanodeStorageInfo____exactlyOne-Collection__DatanodeStorageInfo____rackMap-Map__String,List__DatanodeStorageInfo____",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithUpgradeDomain.java",
  "functionStartLine": 245,
  "functionEndLine": 268,
  "numCommitsSeen": 7,
  "timeTaken": 2197,
  "changeHistory": [
    "0e54b164a8d8acf09aca8712116bf7a554cb4846",
    "ec414600ede8e305c584818565b50e055ea5d2b5",
    "0f5f9846edab3ea7e80f35000072136f998bcd46"
  ],
  "changeHistoryShort": {
    "0e54b164a8d8acf09aca8712116bf7a554cb4846": "Ymultichange(Yparameterchange,Ybodychange)",
    "ec414600ede8e305c584818565b50e055ea5d2b5": "Ybodychange",
    "0f5f9846edab3ea7e80f35000072136f998bcd46": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e54b164a8d8acf09aca8712116bf7a554cb4846": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-9314. Improve BlockPlacementPolicyDefault\u0027s picking of excess replicas. (Xiao Chen via mingma)\n",
      "commitDate": "24/11/15 10:30 AM",
      "commitName": "0e54b164a8d8acf09aca8712116bf7a554cb4846",
      "commitAuthor": "Ming Ma",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-9314. Improve BlockPlacementPolicyDefault\u0027s picking of excess replicas. (Xiao Chen via mingma)\n",
          "commitDate": "24/11/15 10:30 AM",
          "commitName": "0e54b164a8d8acf09aca8712116bf7a554cb4846",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "04/11/15 10:22 AM",
          "commitNameOld": "ec414600ede8e305c584818565b50e055ea5d2b5",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 20.01,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n   protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n       Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n-      Collection\u003cDatanodeStorageInfo\u003e exactlyOne) {\n+      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n+      Map\u003cString, List\u003cDatanodeStorageInfo\u003e\u003e rackMap) {\n     // shareUDSet includes DatanodeStorageInfo that share same upgrade\n     // domain with another DatanodeStorageInfo.\n     Collection\u003cDatanodeStorageInfo\u003e all \u003d combine(moreThanOne, exactlyOne);\n     List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(\n         getUpgradeDomainMap(all));\n     // shareRackAndUDSet contains those DatanodeStorageInfo that\n     // share rack and upgrade domain with another DatanodeStorageInfo.\n     List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n     if (shareUDSet.size() \u003d\u003d 0) {\n       // All upgrade domains are unique, use the parent set.\n-      return super.pickupReplicaSet(moreThanOne, exactlyOne);\n+      return super.pickupReplicaSet(moreThanOne, exactlyOne, rackMap);\n     } else if (moreThanOne !\u003d null) {\n       for (DatanodeStorageInfo storage : shareUDSet) {\n         if (moreThanOne.contains(storage)) {\n           shareRackAndUDSet.add(storage);\n         }\n       }\n     }\n     return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n      Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n      Map\u003cString, List\u003cDatanodeStorageInfo\u003e\u003e rackMap) {\n    // shareUDSet includes DatanodeStorageInfo that share same upgrade\n    // domain with another DatanodeStorageInfo.\n    Collection\u003cDatanodeStorageInfo\u003e all \u003d combine(moreThanOne, exactlyOne);\n    List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(\n        getUpgradeDomainMap(all));\n    // shareRackAndUDSet contains those DatanodeStorageInfo that\n    // share rack and upgrade domain with another DatanodeStorageInfo.\n    List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n    if (shareUDSet.size() \u003d\u003d 0) {\n      // All upgrade domains are unique, use the parent set.\n      return super.pickupReplicaSet(moreThanOne, exactlyOne, rackMap);\n    } else if (moreThanOne !\u003d null) {\n      for (DatanodeStorageInfo storage : shareUDSet) {\n        if (moreThanOne.contains(storage)) {\n          shareRackAndUDSet.add(storage);\n        }\n      }\n    }\n    return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithUpgradeDomain.java",
          "extendedDetails": {
            "oldValue": "[moreThanOne-Collection\u003cDatanodeStorageInfo\u003e, exactlyOne-Collection\u003cDatanodeStorageInfo\u003e]",
            "newValue": "[moreThanOne-Collection\u003cDatanodeStorageInfo\u003e, exactlyOne-Collection\u003cDatanodeStorageInfo\u003e, rackMap-Map\u003cString,List\u003cDatanodeStorageInfo\u003e\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9314. Improve BlockPlacementPolicyDefault\u0027s picking of excess replicas. (Xiao Chen via mingma)\n",
          "commitDate": "24/11/15 10:30 AM",
          "commitName": "0e54b164a8d8acf09aca8712116bf7a554cb4846",
          "commitAuthor": "Ming Ma",
          "commitDateOld": "04/11/15 10:22 AM",
          "commitNameOld": "ec414600ede8e305c584818565b50e055ea5d2b5",
          "commitAuthorOld": "Lei Xu",
          "daysBetweenCommits": 20.01,
          "commitsBetweenForRepo": 132,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,24 @@\n   protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n       Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n-      Collection\u003cDatanodeStorageInfo\u003e exactlyOne) {\n+      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n+      Map\u003cString, List\u003cDatanodeStorageInfo\u003e\u003e rackMap) {\n     // shareUDSet includes DatanodeStorageInfo that share same upgrade\n     // domain with another DatanodeStorageInfo.\n     Collection\u003cDatanodeStorageInfo\u003e all \u003d combine(moreThanOne, exactlyOne);\n     List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(\n         getUpgradeDomainMap(all));\n     // shareRackAndUDSet contains those DatanodeStorageInfo that\n     // share rack and upgrade domain with another DatanodeStorageInfo.\n     List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n     if (shareUDSet.size() \u003d\u003d 0) {\n       // All upgrade domains are unique, use the parent set.\n-      return super.pickupReplicaSet(moreThanOne, exactlyOne);\n+      return super.pickupReplicaSet(moreThanOne, exactlyOne, rackMap);\n     } else if (moreThanOne !\u003d null) {\n       for (DatanodeStorageInfo storage : shareUDSet) {\n         if (moreThanOne.contains(storage)) {\n           shareRackAndUDSet.add(storage);\n         }\n       }\n     }\n     return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n      Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n      Collection\u003cDatanodeStorageInfo\u003e exactlyOne,\n      Map\u003cString, List\u003cDatanodeStorageInfo\u003e\u003e rackMap) {\n    // shareUDSet includes DatanodeStorageInfo that share same upgrade\n    // domain with another DatanodeStorageInfo.\n    Collection\u003cDatanodeStorageInfo\u003e all \u003d combine(moreThanOne, exactlyOne);\n    List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(\n        getUpgradeDomainMap(all));\n    // shareRackAndUDSet contains those DatanodeStorageInfo that\n    // share rack and upgrade domain with another DatanodeStorageInfo.\n    List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n    if (shareUDSet.size() \u003d\u003d 0) {\n      // All upgrade domains are unique, use the parent set.\n      return super.pickupReplicaSet(moreThanOne, exactlyOne, rackMap);\n    } else if (moreThanOne !\u003d null) {\n      for (DatanodeStorageInfo storage : shareUDSet) {\n        if (moreThanOne.contains(storage)) {\n          shareRackAndUDSet.add(storage);\n        }\n      }\n    }\n    return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithUpgradeDomain.java",
          "extendedDetails": {}
        }
      ]
    },
    "ec414600ede8e305c584818565b50e055ea5d2b5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9007. Fix HDFS Balancer to honor upgrade domain policy. (Ming Ma via lei)\n",
      "commitDate": "04/11/15 10:22 AM",
      "commitName": "ec414600ede8e305c584818565b50e055ea5d2b5",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "21/10/15 8:06 AM",
      "commitNameOld": "e27c2ae8bafc94f18eb38f5d839dcef5652d424e",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 14.14,
      "commitsBetweenForRepo": 149,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,23 @@\n   protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n       Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n       Collection\u003cDatanodeStorageInfo\u003e exactlyOne) {\n-    List\u003cDatanodeStorageInfo\u003e all \u003d new ArrayList\u003c\u003e();\n-    if (moreThanOne !\u003d null) {\n-      all.addAll(moreThanOne);\n-    }\n-    if (exactlyOne !\u003d null) {\n-      all.addAll(exactlyOne);\n-    }\n-\n-    Map\u003cString, List\u003cDatanodeStorageInfo\u003e\u003e upgradeDomains \u003d\n-        getUpgradeDomainMap(all.toArray(new DatanodeStorageInfo[all.size()]));\n-\n     // shareUDSet includes DatanodeStorageInfo that share same upgrade\n     // domain with another DatanodeStorageInfo.\n-    List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(upgradeDomains);\n+    Collection\u003cDatanodeStorageInfo\u003e all \u003d combine(moreThanOne, exactlyOne);\n+    List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(\n+        getUpgradeDomainMap(all));\n     // shareRackAndUDSet contains those DatanodeStorageInfo that\n     // share rack and upgrade domain with another DatanodeStorageInfo.\n     List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n     if (shareUDSet.size() \u003d\u003d 0) {\n       // All upgrade domains are unique, use the parent set.\n       return super.pickupReplicaSet(moreThanOne, exactlyOne);\n     } else if (moreThanOne !\u003d null) {\n       for (DatanodeStorageInfo storage : shareUDSet) {\n         if (moreThanOne.contains(storage)) {\n           shareRackAndUDSet.add(storage);\n         }\n       }\n     }\n     return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n      Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n      Collection\u003cDatanodeStorageInfo\u003e exactlyOne) {\n    // shareUDSet includes DatanodeStorageInfo that share same upgrade\n    // domain with another DatanodeStorageInfo.\n    Collection\u003cDatanodeStorageInfo\u003e all \u003d combine(moreThanOne, exactlyOne);\n    List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(\n        getUpgradeDomainMap(all));\n    // shareRackAndUDSet contains those DatanodeStorageInfo that\n    // share rack and upgrade domain with another DatanodeStorageInfo.\n    List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n    if (shareUDSet.size() \u003d\u003d 0) {\n      // All upgrade domains are unique, use the parent set.\n      return super.pickupReplicaSet(moreThanOne, exactlyOne);\n    } else if (moreThanOne !\u003d null) {\n      for (DatanodeStorageInfo storage : shareUDSet) {\n        if (moreThanOne.contains(storage)) {\n          shareRackAndUDSet.add(storage);\n        }\n      }\n    }\n    return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithUpgradeDomain.java",
      "extendedDetails": {}
    },
    "0f5f9846edab3ea7e80f35000072136f998bcd46": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-9006. Provide BlockPlacementPolicy that supports upgrade domain. (Ming Ma via lei)\n",
      "commitDate": "12/10/15 4:24 PM",
      "commitName": "0f5f9846edab3ea7e80f35000072136f998bcd46",
      "commitAuthor": "Lei Xu",
      "diff": "@@ -0,0 +1,32 @@\n+  protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n+      Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n+      Collection\u003cDatanodeStorageInfo\u003e exactlyOne) {\n+    List\u003cDatanodeStorageInfo\u003e all \u003d new ArrayList\u003c\u003e();\n+    if (moreThanOne !\u003d null) {\n+      all.addAll(moreThanOne);\n+    }\n+    if (exactlyOne !\u003d null) {\n+      all.addAll(exactlyOne);\n+    }\n+\n+    Map\u003cString, List\u003cDatanodeStorageInfo\u003e\u003e upgradeDomains \u003d\n+        getUpgradeDomainMap(all.toArray(new DatanodeStorageInfo[all.size()]));\n+\n+    // shareUDSet includes DatanodeStorageInfo that share same upgrade\n+    // domain with another DatanodeStorageInfo.\n+    List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(upgradeDomains);\n+    // shareRackAndUDSet contains those DatanodeStorageInfo that\n+    // share rack and upgrade domain with another DatanodeStorageInfo.\n+    List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n+    if (shareUDSet.size() \u003d\u003d 0) {\n+      // All upgrade domains are unique, use the parent set.\n+      return super.pickupReplicaSet(moreThanOne, exactlyOne);\n+    } else if (moreThanOne !\u003d null) {\n+      for (DatanodeStorageInfo storage : shareUDSet) {\n+        if (moreThanOne.contains(storage)) {\n+          shareRackAndUDSet.add(storage);\n+        }\n+      }\n+    }\n+    return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected Collection\u003cDatanodeStorageInfo\u003e pickupReplicaSet(\n      Collection\u003cDatanodeStorageInfo\u003e moreThanOne,\n      Collection\u003cDatanodeStorageInfo\u003e exactlyOne) {\n    List\u003cDatanodeStorageInfo\u003e all \u003d new ArrayList\u003c\u003e();\n    if (moreThanOne !\u003d null) {\n      all.addAll(moreThanOne);\n    }\n    if (exactlyOne !\u003d null) {\n      all.addAll(exactlyOne);\n    }\n\n    Map\u003cString, List\u003cDatanodeStorageInfo\u003e\u003e upgradeDomains \u003d\n        getUpgradeDomainMap(all.toArray(new DatanodeStorageInfo[all.size()]));\n\n    // shareUDSet includes DatanodeStorageInfo that share same upgrade\n    // domain with another DatanodeStorageInfo.\n    List\u003cDatanodeStorageInfo\u003e shareUDSet \u003d getShareUDSet(upgradeDomains);\n    // shareRackAndUDSet contains those DatanodeStorageInfo that\n    // share rack and upgrade domain with another DatanodeStorageInfo.\n    List\u003cDatanodeStorageInfo\u003e shareRackAndUDSet \u003d new ArrayList\u003c\u003e();\n    if (shareUDSet.size() \u003d\u003d 0) {\n      // All upgrade domains are unique, use the parent set.\n      return super.pickupReplicaSet(moreThanOne, exactlyOne);\n    } else if (moreThanOne !\u003d null) {\n      for (DatanodeStorageInfo storage : shareUDSet) {\n        if (moreThanOne.contains(storage)) {\n          shareRackAndUDSet.add(storage);\n        }\n      }\n    }\n    return (shareRackAndUDSet.size() \u003e 0) ? shareRackAndUDSet : shareUDSet;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyWithUpgradeDomain.java"
    }
  }
}