{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AzureNativeFileSystemStore.java",
  "functionName": "initialize",
  "functionId": "initialize___uri-URI__conf-Configuration__instrumentation-AzureFileSystemInstrumentation",
  "sourceFilePath": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
  "functionStartLine": 494,
  "functionEndLine": 577,
  "numCommitsSeen": 55,
  "timeTaken": 5291,
  "changeHistory": [
    "13eda5000304099d1145631f9be13ce8a00b600d",
    "f2921e51f0fe613abce0a9f415a0d8ab6144aa6e",
    "c6bd73c6c5760c3a52203e6a51628587ceec6896",
    "8e15e240597f821968e14893eabfea39815de207",
    "52d7d5aa1a303cf70519a61487641211f4267c6f",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
    "e92a77099b91620cee84513cc879089907468075",
    "c50aad0f854b74ede9668e35db314b0a93be81b2",
    "5f6edb30c2bb648d5564c951edc25645e17e6636",
    "5731c0e0d08c3048fafdf62a14ca7611be4df5d7",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
    "0d91576ec31f63402f2db6107a04155368e2632d",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82"
  ],
  "changeHistoryShort": {
    "13eda5000304099d1145631f9be13ce8a00b600d": "Ybodychange",
    "f2921e51f0fe613abce0a9f415a0d8ab6144aa6e": "Ybodychange",
    "c6bd73c6c5760c3a52203e6a51628587ceec6896": "Ybodychange",
    "8e15e240597f821968e14893eabfea39815de207": "Ybodychange",
    "52d7d5aa1a303cf70519a61487641211f4267c6f": "Ybodychange",
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": "Ybodychange",
    "e92a77099b91620cee84513cc879089907468075": "Ybodychange",
    "c50aad0f854b74ede9668e35db314b0a93be81b2": "Ybodychange",
    "5f6edb30c2bb648d5564c951edc25645e17e6636": "Ybodychange",
    "5731c0e0d08c3048fafdf62a14ca7611be4df5d7": "Ybodychange",
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": "Ymultichange(Yexceptionschange,Ybodychange)",
    "0d91576ec31f63402f2db6107a04155368e2632d": "Ymultichange(Yparameterchange,Ybodychange)",
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13eda5000304099d1145631f9be13ce8a00b600d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14520. WASB: Block compaction for Azure Block Blobs.\nContributed by Georgi Chalakov\n",
      "commitDate": "07/09/17 10:35 AM",
      "commitName": "13eda5000304099d1145631f9be13ce8a00b600d",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "29/08/17 11:03 AM",
      "commitNameOld": "9374f3882044b552b7dbde788ce569452072c6dc",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,84 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if (!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n         DEFAULT_USE_SECURE_MODE);\n     useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n         DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       if (!useSecureMode) {\n         this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n       } else {\n         this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n             useLocalSasKeyMode, conf);\n       }\n     }\n \n     // Configure Azure storage session.\n     configureAzureStorageSession();\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // User-agent\n     userAgentId \u003d conf.get(USER_AGENT_ID_KEY, USER_AGENT_ID_DEFAULT);\n \n+    // Extract the directories that should contain block blobs with compaction\n+    blockBlobWithCompationDirs \u003d getDirectorySet(\n+        KEY_BLOCK_BLOB_WITH_COMPACTION_DIRECTORIES);\n+    LOG.debug(\"Block blobs with compaction directories:  {}\",\n+        setToString(blockBlobWithCompationDirs));\n+\n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       if (hbaseRoot !\u003d null) {\n         atomicRenameDirs.add(hbaseRoot);\n       }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n\n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if (!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n        DEFAULT_USE_SECURE_MODE);\n    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      if (!useSecureMode) {\n        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n      } else {\n        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n            useLocalSasKeyMode, conf);\n      }\n    }\n\n    // Configure Azure storage session.\n    configureAzureStorageSession();\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // User-agent\n    userAgentId \u003d conf.get(USER_AGENT_ID_KEY, USER_AGENT_ID_DEFAULT);\n\n    // Extract the directories that should contain block blobs with compaction\n    blockBlobWithCompationDirs \u003d getDirectorySet(\n        KEY_BLOCK_BLOB_WITH_COMPACTION_DIRECTORIES);\n    LOG.debug(\"Block blobs with compaction directories:  {}\",\n        setToString(blockBlobWithCompationDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "f2921e51f0fe613abce0a9f415a0d8ab6144aa6e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14518. Customize User-Agent header sent in HTTP/HTTPS requests by WASB. Contributed by Georgi Chalakov.\n",
      "commitDate": "24/07/17 11:01 PM",
      "commitName": "f2921e51f0fe613abce0a9f415a0d8ab6144aa6e",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "11/07/17 1:34 PM",
      "commitNameOld": "d670c3a4da7dd80dccf6c6308603bb3bb013b3b0",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 13.39,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,78 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n         DEFAULT_USE_SECURE_MODE);\n     useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n         DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       if (!useSecureMode) {\n         this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n       } else {\n         this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n             useLocalSasKeyMode, conf);\n       }\n     }\n \n     // Configure Azure storage session.\n     configureAzureStorageSession();\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n+    // User-agent\n+    userAgentId \u003d conf.get(USER_AGENT_ID_KEY, USER_AGENT_ID_DEFAULT);\n+\n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       if (hbaseRoot !\u003d null) {\n         atomicRenameDirs.add(hbaseRoot);\n       }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n\n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n        DEFAULT_USE_SECURE_MODE);\n    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      if (!useSecureMode) {\n        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n      } else {\n        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n            useLocalSasKeyMode, conf);\n      }\n    }\n\n    // Configure Azure storage session.\n    configureAzureStorageSession();\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // User-agent\n    userAgentId \u003d conf.get(USER_AGENT_ID_KEY, USER_AGENT_ID_DEFAULT);\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "c6bd73c6c5760c3a52203e6a51628587ceec6896": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14547. [WASB] the configured retry policy is not used for all storage operations.\nContributed by Thomas.\n",
      "commitDate": "23/06/17 1:38 PM",
      "commitName": "c6bd73c6c5760c3a52203e6a51628587ceec6896",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "05/06/17 3:56 PM",
      "commitNameOld": "5fd9742c83fbeae96bf0913bdcdf77fafbf15b2f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 17.9,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,75 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n         DEFAULT_USE_SECURE_MODE);\n     useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n         DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       if (!useSecureMode) {\n         this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n       } else {\n         this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n             useLocalSasKeyMode, conf);\n       }\n     }\n \n+    // Configure Azure storage session.\n+    configureAzureStorageSession();\n+\n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       if (hbaseRoot !\u003d null) {\n         atomicRenameDirs.add(hbaseRoot);\n       }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n\n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n        DEFAULT_USE_SECURE_MODE);\n    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      if (!useSecureMode) {\n        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n      } else {\n        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n            useLocalSasKeyMode, conf);\n      }\n    }\n\n    // Configure Azure storage session.\n    configureAzureStorageSession();\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "8e15e240597f821968e14893eabfea39815de207": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13945. Azure: Add Kerberos and Delegation token support to WASB client. Contributed by Santhosh G Nayak\n\nChange-Id: I39fb0a3b0491bf2160571366939a0502a0045429\n",
      "commitDate": "20/03/17 4:31 PM",
      "commitName": "8e15e240597f821968e14893eabfea39815de207",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "06/03/17 5:16 PM",
      "commitNameOld": "686823529be09bea2a6cecb3503ef722017475bc",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 13.93,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n         DEFAULT_USE_SECURE_MODE);\n     useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n         DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       if (!useSecureMode) {\n         this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n       } else {\n         this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n-            useLocalSasKeyMode, conf, delegationToken);\n+            useLocalSasKeyMode, conf);\n       }\n     }\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       if (hbaseRoot !\u003d null) {\n         atomicRenameDirs.add(hbaseRoot);\n       }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n\n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n        DEFAULT_USE_SECURE_MODE);\n    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      if (!useSecureMode) {\n        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n      } else {\n        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n            useLocalSasKeyMode, conf);\n      }\n    }\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "52d7d5aa1a303cf70519a61487641211f4267c6f": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\"\n\nThis reverts commit 6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f.\n",
      "commitDate": "06/03/17 5:10 PM",
      "commitName": "52d7d5aa1a303cf70519a61487641211f4267c6f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "03/03/17 5:09 PM",
      "commitNameOld": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 3.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n         DEFAULT_USE_SECURE_MODE);\n     useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n         DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       if (!useSecureMode) {\n         this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n       } else {\n         this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n-            useLocalSasKeyMode, conf);\n+            useLocalSasKeyMode, conf, delegationToken);\n       }\n     }\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       if (hbaseRoot !\u003d null) {\n         atomicRenameDirs.add(hbaseRoot);\n       }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n\n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n        DEFAULT_USE_SECURE_MODE);\n    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      if (!useSecureMode) {\n        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n      } else {\n        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n            useLocalSasKeyMode, conf, delegationToken);\n      }\n    }\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13930. Azure: Add Authorization support to WASB. Contributed by Sivaguru Sankaridurg and Dushyanth\n",
      "commitDate": "03/03/17 5:09 PM",
      "commitName": "6b7cd62b8cf12616b13142f2eb2cfc2f25796f0f",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "22/12/16 8:15 PM",
      "commitNameOld": "e92a77099b91620cee84513cc879089907468075",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 70.87,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,72 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n         DEFAULT_USE_SECURE_MODE);\n     useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n         DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       if (!useSecureMode) {\n         this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n       } else {\n         this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n-            useLocalSasKeyMode, conf, delegationToken);\n+            useLocalSasKeyMode, conf);\n       }\n     }\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       if (hbaseRoot !\u003d null) {\n         atomicRenameDirs.add(hbaseRoot);\n       }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n\n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n        DEFAULT_USE_SECURE_MODE);\n    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      if (!useSecureMode) {\n        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n      } else {\n        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n            useLocalSasKeyMode, conf);\n      }\n    }\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "e92a77099b91620cee84513cc879089907468075": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13863. Azure: Add a new SAS key mode for WASB. Contributed by Dushyanth\n",
      "commitDate": "22/12/16 8:15 PM",
      "commitName": "e92a77099b91620cee84513cc879089907468075",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "15/12/16 12:35 PM",
      "commitNameOld": "f92913c35bfda0d565606f9fb9a301ddd4105fd8",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 7.32,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,72 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n-    \n+\n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n-    if (null \u003d\u003d this.storageInteractionLayer) {\n-      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n-    }\n-    \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n+    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n+        DEFAULT_USE_SECURE_MODE);\n+    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n+        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n+\n+    if (null \u003d\u003d this.storageInteractionLayer) {\n+      if (!useSecureMode) {\n+        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n+      } else {\n+        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n+            useLocalSasKeyMode, conf, delegationToken);\n+      }\n+    }\n+\n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       if (hbaseRoot !\u003d null) {\n         atomicRenameDirs.add(hbaseRoot);\n       }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n\n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    useSecureMode \u003d conf.getBoolean(KEY_USE_SECURE_MODE,\n        DEFAULT_USE_SECURE_MODE);\n    useLocalSasKeyMode \u003d conf.getBoolean(KEY_USE_LOCAL_SAS_KEY_MODE,\n        DEFAULT_USE_LOCAL_SAS_KEY_MODE);\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      if (!useSecureMode) {\n        this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n      } else {\n        this.storageInteractionLayer \u003d new SecureStorageInterfaceImpl(\n            useLocalSasKeyMode, conf, delegationToken);\n      }\n    }\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "c50aad0f854b74ede9668e35db314b0a93be81b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12717. NPE when trying to rename a directory in Windows Azure Storage FileSystem. Contributed by Robert Yokota and Gaurav Kanade.\n",
      "commitDate": "04/03/16 10:57 PM",
      "commitName": "c50aad0f854b74ede9668e35db314b0a93be81b2",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "12/02/16 3:50 PM",
      "commitNameOld": "91a96eaa534dbb27e81b6c24bbb8138200a80a83",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 21.3,
      "commitsBetweenForRepo": 138,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,62 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n     \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n     }\n     \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n-      atomicRenameDirs.add(hbaseRoot);\n+      if (hbaseRoot !\u003d null) {\n+        atomicRenameDirs.add(hbaseRoot);\n+      }\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n    \n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n    \n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      if (hbaseRoot !\u003d null) {\n        atomicRenameDirs.add(hbaseRoot);\n      }\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "5f6edb30c2bb648d5564c951edc25645e17e6636": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12350. WASB Logging: Improve WASB Logging around deletes, reads and writes. Contributed by Dushyanth.\n",
      "commitDate": "05/10/15 8:11 PM",
      "commitName": "5f6edb30c2bb648d5564c951edc25645e17e6636",
      "commitAuthor": "cnauroth",
      "commitDateOld": "08/06/15 10:42 PM",
      "commitNameOld": "c45784bc9031353b938f4756473937cca759b3dc",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 118.9,
      "commitsBetweenForRepo": 778,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n     \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n     this.instrumentation \u003d instrumentation;\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n     }\n     \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, conf is null\");\n     }\n \n     if(!conf.getBoolean(\n         NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n       //If not skip azure metrics, create bandwidthGaugeUpdater\n       this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n-    LOG.debug(\"Page blob directories:  \" + setToString(pageBlobDirs));\n+    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       atomicRenameDirs.add(hbaseRoot);\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n-    LOG.debug(\"Atomic rename directories:  \" + setToString(atomicRenameDirs));\n+    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n    \n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n    \n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  {}\", setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      atomicRenameDirs.add(hbaseRoot);\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories: {} \", setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "5731c0e0d08c3048fafdf62a14ca7611be4df5d7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11629. WASB filesystem should not start BandwidthGaugeUpdater if fs.azure.skip.metrics set to true. Contributed by Shanyu Zhao.\n",
      "commitDate": "25/02/15 9:08 AM",
      "commitName": "5731c0e0d08c3048fafdf62a14ca7611be4df5d7",
      "commitAuthor": "cnauroth",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 1.07,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,60 @@\n   public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n       throws IllegalArgumentException, AzureException, IOException  {\n     \n     if (null \u003d\u003d instrumentation) {\n       throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n-\n     this.instrumentation \u003d instrumentation;\n-    this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n+\n     if (null \u003d\u003d this.storageInteractionLayer) {\n       this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n     }\n     \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n-          \"Cannot initialize WASB file system, URI is null\");\n+          \"Cannot initialize WASB file system, conf is null\");\n+    }\n+\n+    if(!conf.getBoolean(\n+        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n+      //If not skip azure metrics, create bandwidthGaugeUpdater\n+      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n \n     // Extract the directories that should contain page blobs\n     pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n     LOG.debug(\"Page blob directories:  \" + setToString(pageBlobDirs));\n \n     // Extract directories that should have atomic rename applied.\n     atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n     String hbaseRoot;\n     try {\n \n       // Add to this the hbase root directory, or /hbase is that is not set.\n       hbaseRoot \u003d verifyAndConvertToStandardFormat(\n           sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n       atomicRenameDirs.add(hbaseRoot);\n     } catch (URISyntaxException e) {\n       LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n     }\n     LOG.debug(\"Atomic rename directories:  \" + setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n    \n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n    this.instrumentation \u003d instrumentation;\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n    \n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, conf is null\");\n    }\n\n    if(!conf.getBoolean(\n        NativeAzureFileSystem.SKIP_AZURE_METRICS_PROPERTY_NAME, false)) {\n      //If not skip azure metrics, create bandwidthGaugeUpdater\n      this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  \" + setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      atomicRenameDirs.add(hbaseRoot);\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories:  \" + setToString(atomicRenameDirs));\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
      "extendedDetails": {}
    },
    "2217e2f8ff418b88eac6ad36cafe3a9795a11f40": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
      "commitDate": "08/10/14 2:20 PM",
      "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "24/06/14 1:52 PM",
          "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 106.02,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,55 @@\n-  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation) throws AzureException {\n-\n-    if (null \u003d\u003d this.storageInteractionLayer) {\n-      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n+  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n+      throws IllegalArgumentException, AzureException, IOException  {\n+    \n+    if (null \u003d\u003d instrumentation) {\n+      throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n \n     this.instrumentation \u003d instrumentation;\n     this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     if (null \u003d\u003d this.storageInteractionLayer) {\n       this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n     }\n     \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n+\n+    // Extract the directories that should contain page blobs\n+    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n+    LOG.debug(\"Page blob directories:  \" + setToString(pageBlobDirs));\n+\n+    // Extract directories that should have atomic rename applied.\n+    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n+    String hbaseRoot;\n+    try {\n+\n+      // Add to this the hbase root directory, or /hbase is that is not set.\n+      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n+          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n+      atomicRenameDirs.add(hbaseRoot);\n+    } catch (URISyntaxException e) {\n+      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n+    }\n+    LOG.debug(\"Atomic rename directories:  \" + setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n    \n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n\n    this.instrumentation \u003d instrumentation;\n    this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n    \n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  \" + setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      atomicRenameDirs.add(hbaseRoot);\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories:  \" + setToString(atomicRenameDirs));\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[AzureException]",
            "newValue": "[IllegalArgumentException, AzureException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10809. hadoop-azure: page blob support. Contributed by Dexter Bradshaw, Mostafa Elhemali, Eric Hanson, and Mike Liddell.\n",
          "commitDate": "08/10/14 2:20 PM",
          "commitName": "2217e2f8ff418b88eac6ad36cafe3a9795a11f40",
          "commitAuthor": "cnauroth",
          "commitDateOld": "24/06/14 1:52 PM",
          "commitNameOld": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 106.02,
          "commitsBetweenForRepo": 1005,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,55 @@\n-  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation) throws AzureException {\n-\n-    if (null \u003d\u003d this.storageInteractionLayer) {\n-      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n+  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n+      throws IllegalArgumentException, AzureException, IOException  {\n+    \n+    if (null \u003d\u003d instrumentation) {\n+      throw new IllegalArgumentException(\"Null instrumentation\");\n     }\n \n     this.instrumentation \u003d instrumentation;\n     this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n     if (null \u003d\u003d this.storageInteractionLayer) {\n       this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n     }\n     \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n+\n+    // Extract the directories that should contain page blobs\n+    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n+    LOG.debug(\"Page blob directories:  \" + setToString(pageBlobDirs));\n+\n+    // Extract directories that should have atomic rename applied.\n+    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n+    String hbaseRoot;\n+    try {\n+\n+      // Add to this the hbase root directory, or /hbase is that is not set.\n+      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n+          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n+      atomicRenameDirs.add(hbaseRoot);\n+    } catch (URISyntaxException e) {\n+      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n+    }\n+    LOG.debug(\"Atomic rename directories:  \" + setToString(atomicRenameDirs));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation)\n      throws IllegalArgumentException, AzureException, IOException  {\n    \n    if (null \u003d\u003d instrumentation) {\n      throw new IllegalArgumentException(\"Null instrumentation\");\n    }\n\n    this.instrumentation \u003d instrumentation;\n    this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n    \n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n\n    // Extract the directories that should contain page blobs\n    pageBlobDirs \u003d getDirectorySet(KEY_PAGE_BLOB_DIRECTORIES);\n    LOG.debug(\"Page blob directories:  \" + setToString(pageBlobDirs));\n\n    // Extract directories that should have atomic rename applied.\n    atomicRenameDirs \u003d getDirectorySet(KEY_ATOMIC_RENAME_DIRECTORIES);\n    String hbaseRoot;\n    try {\n\n      // Add to this the hbase root directory, or /hbase is that is not set.\n      hbaseRoot \u003d verifyAndConvertToStandardFormat(\n          sessionConfiguration.get(\"hbase.rootdir\", \"hbase\"));\n      atomicRenameDirs.add(hbaseRoot);\n    } catch (URISyntaxException e) {\n      LOG.warn(\"Unable to initialize HBase root as an atomic rename directory.\");\n    }\n    LOG.debug(\"Atomic rename directories:  \" + setToString(atomicRenameDirs));\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "0d91576ec31f63402f2db6107a04155368e2632d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/06/14 1:52 PM",
      "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
      "commitAuthor": "Chris Nauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 1:52 PM",
          "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "20/06/14 11:30 AM",
          "commitNameOld": "8300b9fb385b47672d98ea62ab291991424f3cce",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 4.1,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,36 @@\n-  public void initialize(URI uri, Configuration conf) throws AzureException {\n+  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation) throws AzureException {\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n     }\n \n+    this.instrumentation \u003d instrumentation;\n+    this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n+    if (null \u003d\u003d this.storageInteractionLayer) {\n+      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n+    }\n+    \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation) throws AzureException {\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n\n    this.instrumentation \u003d instrumentation;\n    this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n    \n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[uri-URI, conf-Configuration]",
            "newValue": "[uri-URI, conf-Configuration, instrumentation-AzureFileSystemInstrumentation]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10728. Metrics system for Windows Azure Storage Filesystem. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1605187 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "24/06/14 1:52 PM",
          "commitName": "0d91576ec31f63402f2db6107a04155368e2632d",
          "commitAuthor": "Chris Nauroth",
          "commitDateOld": "20/06/14 11:30 AM",
          "commitNameOld": "8300b9fb385b47672d98ea62ab291991424f3cce",
          "commitAuthorOld": "Chris Nauroth",
          "daysBetweenCommits": 4.1,
          "commitsBetweenForRepo": 31,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,36 @@\n-  public void initialize(URI uri, Configuration conf) throws AzureException {\n+  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation) throws AzureException {\n \n     if (null \u003d\u003d this.storageInteractionLayer) {\n       this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n     }\n \n+    this.instrumentation \u003d instrumentation;\n+    this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n+    if (null \u003d\u003d this.storageInteractionLayer) {\n+      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n+    }\n+    \n     // Check that URI exists.\n     //\n     if (null \u003d\u003d uri) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Check that configuration object is non-null.\n     //\n     if (null \u003d\u003d conf) {\n       throw new IllegalArgumentException(\n           \"Cannot initialize WASB file system, URI is null\");\n     }\n \n     // Incoming parameters validated. Capture the URI and the job configuration\n     // object.\n     //\n     sessionUri \u003d uri;\n     sessionConfiguration \u003d conf;\n \n     // Start an Azure storage session.\n     //\n     createAzureStorageSession();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(URI uri, Configuration conf, AzureFileSystemInstrumentation instrumentation) throws AzureException {\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n\n    this.instrumentation \u003d instrumentation;\n    this.bandwidthGaugeUpdater \u003d new BandwidthGaugeUpdater(instrumentation);\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n    \n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n  }",
          "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "81bc395deb3ba00567dc067d6ca71bacf9e3bc82": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-9629. Support Windows Azure Storage - Blob as a file system in Hadoop. Contributed by Dexter Bradshaw, Mostafa Elhemali, Xi Fang, Johannes Klein, David Lao, Mike Liddell, Chuan Liu, Lengning Liu, Ivan Mitic, Michael Rys, Alexander Stojanovic, Brian Swan, and Min Wei.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601781 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 3:26 PM",
      "commitName": "81bc395deb3ba00567dc067d6ca71bacf9e3bc82",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,30 @@\n+  public void initialize(URI uri, Configuration conf) throws AzureException {\n+\n+    if (null \u003d\u003d this.storageInteractionLayer) {\n+      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n+    }\n+\n+    // Check that URI exists.\n+    //\n+    if (null \u003d\u003d uri) {\n+      throw new IllegalArgumentException(\n+          \"Cannot initialize WASB file system, URI is null\");\n+    }\n+\n+    // Check that configuration object is non-null.\n+    //\n+    if (null \u003d\u003d conf) {\n+      throw new IllegalArgumentException(\n+          \"Cannot initialize WASB file system, URI is null\");\n+    }\n+\n+    // Incoming parameters validated. Capture the URI and the job configuration\n+    // object.\n+    //\n+    sessionUri \u003d uri;\n+    sessionConfiguration \u003d conf;\n+\n+    // Start an Azure storage session.\n+    //\n+    createAzureStorageSession();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws AzureException {\n\n    if (null \u003d\u003d this.storageInteractionLayer) {\n      this.storageInteractionLayer \u003d new StorageInterfaceImpl();\n    }\n\n    // Check that URI exists.\n    //\n    if (null \u003d\u003d uri) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Check that configuration object is non-null.\n    //\n    if (null \u003d\u003d conf) {\n      throw new IllegalArgumentException(\n          \"Cannot initialize WASB file system, URI is null\");\n    }\n\n    // Incoming parameters validated. Capture the URI and the job configuration\n    // object.\n    //\n    sessionUri \u003d uri;\n    sessionConfiguration \u003d conf;\n\n    // Start an Azure storage session.\n    //\n    createAzureStorageSession();\n  }",
      "path": "hadoop-tools/hadoop-azure/src/main/java/org/apache/hadoop/fs/azure/AzureNativeFileSystemStore.java"
    }
  }
}