{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegularContainerAllocator.java",
  "functionName": "assignContainers",
  "functionId": "assignContainers___clusterResource-Resource__candidates-CandidateNodeSet__FiCaSchedulerNode____schedulingMode-SchedulingMode__resourceLimits-ResourceLimits__reservedContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
  "functionStartLine": 906,
  "functionEndLine": 952,
  "numCommitsSeen": 78,
  "timeTaken": 6686,
  "changeHistory": [
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "e5003be907acef87c2770e3f2914953f62017b0e"
  ],
  "changeHistoryShort": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": "Ybodychange",
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": "Ybodychange",
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": "Ybodychange",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ymultichange(Yparameterchange,Ybodychange)",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ymultichange(Yparameterchange,Ybodychange)",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ybodychange",
    "e5003be907acef87c2770e3f2914953f62017b0e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9664. Improve response of scheduler/app activities for better understanding. Contributed by Tao Yang.\n",
      "commitDate": "29/08/19 3:14 AM",
      "commitName": "8c0759d02a9a530cfdd25e0a8f410cd74a8ac4c8",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/06/19 6:59 AM",
      "commitNameOld": "09763925025a3709e6098186348e1afd80cb9f71",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 83.84,
      "commitsBetweenForRepo": 744,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n     FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n \n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(candidates.getPartition(),\n           schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n               + schedulingMode.name() + \" node-label\u003d\" + candidates\n               .getPartition());\n         }\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, null,\n-            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n+            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE,\n+            ActivityLevel.APP);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n         ContainerAllocation result \u003d allocate(clusterResource, candidates,\n             schedulingMode, resourceLimits, schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n           allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(candidates.getPartition(),\n          schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + candidates\n              .getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, null,\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE,\n            ActivityLevel.APP);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d allocate(clusterResource, candidates,\n            schedulingMode, resourceLimits, schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9440. Improve diagnostics for scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "06/05/19 5:00 AM",
      "commitName": "12b7059ddc8d8f67dd7131565f03a0e09cb92ca7",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 51.53,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,46 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n     FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n \n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(candidates.getPartition(),\n           schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n               + schedulingMode.name() + \" node-label\u003d\" + candidates\n               .getPartition());\n         }\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n-            activitiesManager, node, application, application.getPriority(),\n+            activitiesManager, node, application, null,\n             ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n         ContainerAllocation result \u003d allocate(clusterResource, candidates,\n             schedulingMode, resourceLimits, schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n-      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n-          activitiesManager, node, application, application.getPriority(),\n-          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n           allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(candidates.getPartition(),\n          schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + candidates\n              .getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, null,\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d allocate(clusterResource, candidates,\n            schedulingMode, resourceLimits, schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6964. Fair scheduler misuses Resources operations. (Daniel Templeton and Szilard Nemeth via Haibo Chen)\n",
      "commitDate": "20/07/18 10:46 AM",
      "commitName": "8a6bb8409c2dc695c0ffc70df0528d7f8bd5d795",
      "commitAuthor": "Haibo Chen",
      "commitDateOld": "20/07/18 7:34 AM",
      "commitNameOld": "cbf20264838f536382a9d8c4cd2144faf6875c3a",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n       CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n       SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n     FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n \n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n-      if (!application.hasPendingResourceRequest(rc,\n-          candidates.getPartition(), clusterResource, schedulingMode)) {\n+      if (!application.hasPendingResourceRequest(candidates.getPartition(),\n+          schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n               + schedulingMode.name() + \" node-label\u003d\" + candidates\n               .getPartition());\n         }\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, application.getPriority(),\n             ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n         ContainerAllocation result \u003d allocate(clusterResource, candidates,\n             schedulingMode, resourceLimits, schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, node, application, application.getPriority(),\n           ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n           allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(candidates.getPartition(),\n          schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + candidates\n              .getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, application.getPriority(),\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d allocate(clusterResource, candidates,\n            schedulingMode, resourceLimits, schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, node, application, application.getPriority(),\n          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
          "commitDate": "09/11/17 1:01 PM",
          "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "17/09/17 9:20 PM",
          "commitNameOld": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 52.69,
          "commitsBetweenForRepo": 485,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n-      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n-      ResourceLimits resourceLimits,\n+      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n+      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n-    FiCaSchedulerNode node \u003d PlacementSetUtils.getSingleNode(ps);\n+    FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n \n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(rc,\n-          ps.getPartition(), clusterResource, schedulingMode)) {\n+          candidates.getPartition(), clusterResource, schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n-              + schedulingMode.name() + \" node-label\u003d\" + ps.getPartition());\n+              + schedulingMode.name() + \" node-label\u003d\" + candidates\n+              .getPartition());\n         }\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, application.getPriority(),\n             ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n-        ContainerAllocation result \u003d\n-            allocate(clusterResource, ps, schedulingMode, resourceLimits,\n-                schedulerKey, null);\n+        ContainerAllocation result \u003d allocate(clusterResource, candidates,\n+            schedulingMode, resourceLimits, schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, node, application, application.getPriority(),\n           ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n-          allocate(clusterResource, ps, schedulingMode, resourceLimits,\n+          allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(rc,\n          candidates.getPartition(), clusterResource, schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + candidates\n              .getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, application.getPriority(),\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d allocate(clusterResource, candidates,\n            schedulingMode, resourceLimits, schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, node, application, application.getPriority(),\n          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, ps-PlacementSet\u003cFiCaSchedulerNode\u003e, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, reservedContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, candidates-CandidateNodeSet\u003cFiCaSchedulerNode\u003e, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, reservedContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
          "commitDate": "09/11/17 1:01 PM",
          "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
          "commitAuthor": "Konstantinos Karanasos",
          "commitDateOld": "17/09/17 9:20 PM",
          "commitNameOld": "e81596d06d226f1cfa44b2390ce3095ed4dee621",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 52.69,
          "commitsBetweenForRepo": 485,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,49 +1,49 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n-      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n-      ResourceLimits resourceLimits,\n+      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n+      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n-    FiCaSchedulerNode node \u003d PlacementSetUtils.getSingleNode(ps);\n+    FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n \n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(rc,\n-          ps.getPartition(), clusterResource, schedulingMode)) {\n+          candidates.getPartition(), clusterResource, schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n-              + schedulingMode.name() + \" node-label\u003d\" + ps.getPartition());\n+              + schedulingMode.name() + \" node-label\u003d\" + candidates\n+              .getPartition());\n         }\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, application.getPriority(),\n             ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n-        ContainerAllocation result \u003d\n-            allocate(clusterResource, ps, schedulingMode, resourceLimits,\n-                schedulerKey, null);\n+        ContainerAllocation result \u003d allocate(clusterResource, candidates,\n+            schedulingMode, resourceLimits, schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, node, application, application.getPriority(),\n           ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n-          allocate(clusterResource, ps, schedulingMode, resourceLimits,\n+          allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      CandidateNodeSet\u003cFiCaSchedulerNode\u003e candidates,\n      SchedulingMode schedulingMode, ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    FiCaSchedulerNode node \u003d CandidateNodeSetUtils.getSingleNode(candidates);\n\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(rc,\n          candidates.getPartition(), clusterResource, schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + candidates\n              .getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, application.getPriority(),\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d allocate(clusterResource, candidates,\n            schedulingMode, resourceLimits, schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, node, application, application.getPriority(),\n          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, candidates, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,49 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n-      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n+      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n+    FiCaSchedulerNode node \u003d PlacementSetUtils.getSingleNode(ps);\n+\n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(rc,\n-          node.getPartition(), clusterResource, schedulingMode)) {\n+          ps.getPartition(), clusterResource, schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n-              + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n+              + schedulingMode.name() + \" node-label\u003d\" + ps.getPartition());\n         }\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, application.getPriority(),\n             ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n         ContainerAllocation result \u003d\n-            allocate(clusterResource, node, schedulingMode, resourceLimits,\n+            allocate(clusterResource, ps, schedulingMode, resourceLimits,\n                 schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, node, application, application.getPriority(),\n           ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n-          allocate(clusterResource, node, schedulingMode, resourceLimits,\n+          allocate(clusterResource, ps, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    FiCaSchedulerNode node \u003d PlacementSetUtils.getSingleNode(ps);\n\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(rc,\n          ps.getPartition(), clusterResource, schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + ps.getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, application.getPriority(),\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d\n            allocate(clusterResource, ps, schedulingMode, resourceLimits,\n                schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, node, application, application.getPriority(),\n          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, ps, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {
            "oldValue": "[clusterResource-Resource, node-FiCaSchedulerNode, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, reservedContainer-RMContainer]",
            "newValue": "[clusterResource-Resource, ps-PlacementSet\u003cFiCaSchedulerNode\u003e, schedulingMode-SchedulingMode, resourceLimits-ResourceLimits, reservedContainer-RMContainer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
          "commitDate": "07/11/16 10:14 AM",
          "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
          "commitAuthor": "Jian He",
          "commitDateOld": "19/09/16 2:08 AM",
          "commitNameOld": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 49.38,
          "commitsBetweenForRepo": 429,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,49 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n-      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n+      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n+    FiCaSchedulerNode node \u003d PlacementSetUtils.getSingleNode(ps);\n+\n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(rc,\n-          node.getPartition(), clusterResource, schedulingMode)) {\n+          ps.getPartition(), clusterResource, schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n-              + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n+              + schedulingMode.name() + \" node-label\u003d\" + ps.getPartition());\n         }\n         ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n             activitiesManager, node, application, application.getPriority(),\n             ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n         ContainerAllocation result \u003d\n-            allocate(clusterResource, node, schedulingMode, resourceLimits,\n+            allocate(clusterResource, ps, schedulingMode, resourceLimits,\n                 schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n       ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n           activitiesManager, node, application, application.getPriority(),\n           ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n-          allocate(clusterResource, node, schedulingMode, resourceLimits,\n+          allocate(clusterResource, ps, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      PlacementSet\u003cFiCaSchedulerNode\u003e ps, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    FiCaSchedulerNode node \u003d PlacementSetUtils.getSingleNode(ps);\n\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(rc,\n          ps.getPartition(), clusterResource, schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + ps.getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, application.getPriority(),\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d\n            allocate(clusterResource, ps, schedulingMode, resourceLimits,\n                schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, node, application, application.getPriority(),\n          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, ps, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
          "extendedDetails": {}
        }
      ]
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "26/07/16 6:14 PM",
      "commitNameOld": "49969b16cdba0f251b9f8bf3d8df9906e38b5c61",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 77,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(rc,\n           node.getPartition(), clusterResource, schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n               + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n         }\n+        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n+            activitiesManager, node, application, application.getPriority(),\n+            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n       for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n         ContainerAllocation result \u003d\n             allocate(clusterResource, node, schedulingMode, resourceLimits,\n                 schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n-            null);\n+            null, node);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n+      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n+          activitiesManager, node, application, application.getPriority(),\n+          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n           allocate(clusterResource, node, schedulingMode, resourceLimits,\n               reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n-          reservedContainer);\n+          reservedContainer, node);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(rc,\n          node.getPartition(), clusterResource, schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n        }\n        ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n            activitiesManager, node, application, application.getPriority(),\n            ActivityDiagnosticConstant.APPLICATION_DO_NOT_NEED_RESOURCE);\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d\n            allocate(clusterResource, node, schedulingMode, resourceLimits,\n                schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null, node);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      ActivitiesLogger.APP.recordSkippedAppActivityWithoutAllocation(\n          activitiesManager, node, application, application.getPriority(),\n          ActivityDiagnosticConstant.SKIPPED_ALL_PRIORITIES);\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, node, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer, node);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 48.99,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,41 @@\n   public CSAssignment assignContainers(Resource clusterResource,\n       FiCaSchedulerNode node, SchedulingMode schedulingMode,\n       ResourceLimits resourceLimits,\n       RMContainer reservedContainer) {\n     if (reservedContainer \u003d\u003d null) {\n       // Check if application needs more resource, skip if it doesn\u0027t need more.\n       if (!application.hasPendingResourceRequest(rc,\n           node.getPartition(), clusterResource, schedulingMode)) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n               + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n               + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n         }\n         return CSAssignment.SKIP_ASSIGNMENT;\n       }\n       \n       // Schedule in priority order\n-      for (Priority priority : application.getPriorities()) {\n+      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n         ContainerAllocation result \u003d\n             allocate(clusterResource, node, schedulingMode, resourceLimits,\n-                priority, null);\n+                schedulerKey, null);\n \n         AllocationState allocationState \u003d result.getAllocationState();\n         if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n           continue;\n         }\n         return getCSAssignmentFromAllocateResult(clusterResource, result,\n             null);\n       }\n \n       // We will reach here if we skipped all priorities of the app, so we will\n       // skip the app.\n       return CSAssignment.SKIP_ASSIGNMENT;\n     } else {\n       ContainerAllocation result \u003d\n           allocate(clusterResource, node, schedulingMode, resourceLimits,\n-              reservedContainer.getReservedPriority(), reservedContainer);\n+              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n       return getCSAssignmentFromAllocateResult(clusterResource, result,\n           reservedContainer);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(rc,\n          node.getPartition(), clusterResource, schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n        }\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (SchedulerRequestKey schedulerKey : application.getSchedulerKeys()) {\n        ContainerAllocation result \u003d\n            allocate(clusterResource, node, schedulingMode, resourceLimits,\n                schedulerKey, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, node, schedulingMode, resourceLimits,\n              reservedContainer.getReservedSchedulerKey(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java",
      "extendedDetails": {}
    },
    "e5003be907acef87c2770e3f2914953f62017b0e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4026. Refactored ContainerAllocator to accept a list of priorites rather than a single priority. Contributed by Wangda Tan\n",
      "commitDate": "12/08/15 3:07 PM",
      "commitName": "e5003be907acef87c2770e3f2914953f62017b0e",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,41 @@\n+  public CSAssignment assignContainers(Resource clusterResource,\n+      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n+      ResourceLimits resourceLimits,\n+      RMContainer reservedContainer) {\n+    if (reservedContainer \u003d\u003d null) {\n+      // Check if application needs more resource, skip if it doesn\u0027t need more.\n+      if (!application.hasPendingResourceRequest(rc,\n+          node.getPartition(), clusterResource, schedulingMode)) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n+              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n+              + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n+        }\n+        return CSAssignment.SKIP_ASSIGNMENT;\n+      }\n+      \n+      // Schedule in priority order\n+      for (Priority priority : application.getPriorities()) {\n+        ContainerAllocation result \u003d\n+            allocate(clusterResource, node, schedulingMode, resourceLimits,\n+                priority, null);\n+\n+        AllocationState allocationState \u003d result.getAllocationState();\n+        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n+          continue;\n+        }\n+        return getCSAssignmentFromAllocateResult(clusterResource, result,\n+            null);\n+      }\n+\n+      // We will reach here if we skipped all priorities of the app, so we will\n+      // skip the app.\n+      return CSAssignment.SKIP_ASSIGNMENT;\n+    } else {\n+      ContainerAllocation result \u003d\n+          allocate(clusterResource, node, schedulingMode, resourceLimits,\n+              reservedContainer.getReservedPriority(), reservedContainer);\n+      return getCSAssignmentFromAllocateResult(clusterResource, result,\n+          reservedContainer);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CSAssignment assignContainers(Resource clusterResource,\n      FiCaSchedulerNode node, SchedulingMode schedulingMode,\n      ResourceLimits resourceLimits,\n      RMContainer reservedContainer) {\n    if (reservedContainer \u003d\u003d null) {\n      // Check if application needs more resource, skip if it doesn\u0027t need more.\n      if (!application.hasPendingResourceRequest(rc,\n          node.getPartition(), clusterResource, schedulingMode)) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Skip app_attempt\u003d\" + application.getApplicationAttemptId()\n              + \", because it doesn\u0027t need more resource, schedulingMode\u003d\"\n              + schedulingMode.name() + \" node-label\u003d\" + node.getPartition());\n        }\n        return CSAssignment.SKIP_ASSIGNMENT;\n      }\n      \n      // Schedule in priority order\n      for (Priority priority : application.getPriorities()) {\n        ContainerAllocation result \u003d\n            allocate(clusterResource, node, schedulingMode, resourceLimits,\n                priority, null);\n\n        AllocationState allocationState \u003d result.getAllocationState();\n        if (allocationState \u003d\u003d AllocationState.PRIORITY_SKIPPED) {\n          continue;\n        }\n        return getCSAssignmentFromAllocateResult(clusterResource, result,\n            null);\n      }\n\n      // We will reach here if we skipped all priorities of the app, so we will\n      // skip the app.\n      return CSAssignment.SKIP_ASSIGNMENT;\n    } else {\n      ContainerAllocation result \u003d\n          allocate(clusterResource, node, schedulingMode, resourceLimits,\n              reservedContainer.getReservedPriority(), reservedContainer);\n      return getCSAssignmentFromAllocateResult(clusterResource, result,\n          reservedContainer);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/allocator/RegularContainerAllocator.java"
    }
  }
}