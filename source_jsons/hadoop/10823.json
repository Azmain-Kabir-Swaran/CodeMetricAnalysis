{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ErasureCodingWorker.java",
  "functionName": "initializeStripedBlkReconstructionThreadPool",
  "functionId": "initializeStripedBlkReconstructionThreadPool___numThreads-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
  "functionStartLine": 106,
  "functionEndLine": 113,
  "numCommitsSeen": 97,
  "timeTaken": 5611,
  "changeHistory": [
    "8dad38c0bed4522b3f90e945f40920d8d9e731c6",
    "77791e4c36ddc9305306c83806bf486d4d32575d",
    "b59206190e6f773fc223bcb81774a09715551367",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
    "ced438a4bf50fe0ac9072c128e18249e6742956a"
  ],
  "changeHistoryShort": {
    "8dad38c0bed4522b3f90e945f40920d8d9e731c6": "Ybodychange",
    "77791e4c36ddc9305306c83806bf486d4d32575d": "Ybodychange",
    "b59206190e6f773fc223bcb81774a09715551367": "Ymultichange(Yparameterchange,Ybodychange)",
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": "Ybodychange",
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": "Ybodychange",
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": "Ymultichange(Yrename,Ybodychange)",
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": "Ybodychange",
    "ced438a4bf50fe0ac9072c128e18249e6742956a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8dad38c0bed4522b3f90e945f40920d8d9e731c6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14367. EC: Parameter maxPoolSize in striped reconstruct thread pool isn\u0027t affecting number of threads. Contributed by Guo Lei.\n",
      "commitDate": "12/05/20 6:04 AM",
      "commitName": "8dad38c0bed4522b3f90e945f40920d8d9e731c6",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "03/05/20 6:39 AM",
      "commitNameOld": "d6fc482a541310d83d9cf1393e8f6ed220ef4c1e",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,8 @@\n   private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n     LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n         numThreads);\n-    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(2,\n+    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(numThreads,\n         numThreads, 60, new LinkedBlockingQueue\u003c\u003e(),\n         \"StripedBlockReconstruction-\", false);\n     stripedReconstructionPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n        numThreads);\n    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(numThreads,\n        numThreads, 60, new LinkedBlockingQueue\u003c\u003e(),\n        \"StripedBlockReconstruction-\", false);\n    stripedReconstructionPool.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "77791e4c36ddc9305306c83806bf486d4d32575d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12044. Mismatch between BlockManager.maxReplicationStreams and ErasureCodingWorker.stripedReconstructionPool pool size causes slow and bursty recovery. (Contributed by Lei (Eddy) Xu)\n",
      "commitDate": "28/07/17 10:50 AM",
      "commitName": "77791e4c36ddc9305306c83806bf486d4d32575d",
      "commitAuthor": "Lei Xu",
      "commitDateOld": "05/05/17 12:01 PM",
      "commitNameOld": "a3954ccab148bddc290cb96528e63ff19799bcc9",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 83.95,
      "commitsBetweenForRepo": 406,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,8 @@\n   private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n     LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n         numThreads);\n     stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(2,\n-        numThreads, 60, \"StripedBlockReconstruction-\", false);\n+        numThreads, 60, new LinkedBlockingQueue\u003c\u003e(),\n+        \"StripedBlockReconstruction-\", false);\n     stripedReconstructionPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n        numThreads);\n    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(2,\n        numThreads, 60, new LinkedBlockingQueue\u003c\u003e(),\n        \"StripedBlockReconstruction-\", false);\n    stripedReconstructionPool.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "b59206190e6f773fc223bcb81774a09715551367": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10909. De-duplicate code in ErasureCodingWorker#initializeStripedReadThreadPool and DFSClient#initThreadsNumForStripedReads. (Manoj Govindassamy via lei)\n",
      "commitDate": "02/11/16 4:45 PM",
      "commitName": "b59206190e6f773fc223bcb81774a09715551367",
      "commitAuthor": "Lei Xu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10909. De-duplicate code in ErasureCodingWorker#initializeStripedReadThreadPool and DFSClient#initThreadsNumForStripedReads. (Manoj Govindassamy via lei)\n",
          "commitDate": "02/11/16 4:45 PM",
          "commitName": "b59206190e6f773fc223bcb81774a09715551367",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "01/06/16 9:56 PM",
          "commitNameOld": "d749cf65e1ab0e0daf5be86931507183f189e855",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 153.78,
          "commitsBetweenForRepo": 1207,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,7 @@\n-  private void initializeStripedBlkReconstructionThreadPool(int num) {\n-    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\", num);\n-    stripedReconstructionPool \u003d new ThreadPoolExecutor(2, num, 60,\n-        TimeUnit.SECONDS,\n-        new LinkedBlockingQueue\u003cRunnable\u003e(),\n-        new Daemon.DaemonFactory() {\n-          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n-\n-          @Override\n-          public Thread newThread(Runnable r) {\n-            Thread t \u003d super.newThread(r);\n-            t.setName(\"stripedBlockReconstruction-\"\n-                + threadIdx.getAndIncrement());\n-            return t;\n-          }\n-        });\n+  private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n+    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n+        numThreads);\n+    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(2,\n+        numThreads, 60, \"StripedBlockReconstruction-\", false);\n     stripedReconstructionPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n        numThreads);\n    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(2,\n        numThreads, 60, \"StripedBlockReconstruction-\", false);\n    stripedReconstructionPool.allowCoreThreadTimeOut(true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "[num-int]",
            "newValue": "[numThreads-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10909. De-duplicate code in ErasureCodingWorker#initializeStripedReadThreadPool and DFSClient#initThreadsNumForStripedReads. (Manoj Govindassamy via lei)\n",
          "commitDate": "02/11/16 4:45 PM",
          "commitName": "b59206190e6f773fc223bcb81774a09715551367",
          "commitAuthor": "Lei Xu",
          "commitDateOld": "01/06/16 9:56 PM",
          "commitNameOld": "d749cf65e1ab0e0daf5be86931507183f189e855",
          "commitAuthorOld": "Kai Zheng",
          "daysBetweenCommits": 153.78,
          "commitsBetweenForRepo": 1207,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,7 @@\n-  private void initializeStripedBlkReconstructionThreadPool(int num) {\n-    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\", num);\n-    stripedReconstructionPool \u003d new ThreadPoolExecutor(2, num, 60,\n-        TimeUnit.SECONDS,\n-        new LinkedBlockingQueue\u003cRunnable\u003e(),\n-        new Daemon.DaemonFactory() {\n-          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n-\n-          @Override\n-          public Thread newThread(Runnable r) {\n-            Thread t \u003d super.newThread(r);\n-            t.setName(\"stripedBlockReconstruction-\"\n-                + threadIdx.getAndIncrement());\n-            return t;\n-          }\n-        });\n+  private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n+    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n+        numThreads);\n+    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(2,\n+        numThreads, 60, \"StripedBlockReconstruction-\", false);\n     stripedReconstructionPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int numThreads) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\",\n        numThreads);\n    stripedReconstructionPool \u003d DFSUtilClient.getThreadPoolExecutor(2,\n        numThreads, 60, \"StripedBlockReconstruction-\", false);\n    stripedReconstructionPool.allowCoreThreadTimeOut(true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "3c18a53cbd2efabb2ad108d63a0b0b558424115f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9719. Refactoring ErasureCodingWorker into smaller reusable constructs. Contributed by Kai Zheng.\n",
      "commitDate": "06/04/16 10:50 PM",
      "commitName": "3c18a53cbd2efabb2ad108d63a0b0b558424115f",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "30/03/16 1:37 PM",
      "commitNameOld": "37e23ce45c592f3c9c48a08a52a5f46787f6c0e9",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 7.38,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private void initializeStripedBlkReconstructionThreadPool(int num) {\n-    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\" + num);\n-    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL \u003d new ThreadPoolExecutor(2, num,\n-        60, TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n+    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\", num);\n+    stripedReconstructionPool \u003d new ThreadPoolExecutor(2, num, 60,\n+        TimeUnit.SECONDS,\n+        new LinkedBlockingQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n-            t.setName(\n-                \"stripedBlockReconstruction-\" + threadIdx.getAndIncrement());\n+            t.setName(\"stripedBlockReconstruction-\"\n+                + threadIdx.getAndIncrement());\n             return t;\n           }\n         });\n-    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL.allowCoreThreadTimeOut(true);\n+    stripedReconstructionPool.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int num) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\", num);\n    stripedReconstructionPool \u003d new ThreadPoolExecutor(2, num, 60,\n        TimeUnit.SECONDS,\n        new LinkedBlockingQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"stripedBlockReconstruction-\"\n                + threadIdx.getAndIncrement());\n            return t;\n          }\n        });\n    stripedReconstructionPool.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "6546d9e7ff73d2c81a803f2c61a1376a8c426987": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9829. Erasure Coding: Improve few exception handling logic of ErasureCodingWorker. Contributed by Rakesh R.\n",
      "commitDate": "19/02/16 10:40 AM",
      "commitName": "6546d9e7ff73d2c81a803f2c61a1376a8c426987",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "02/02/16 12:32 PM",
      "commitNameOld": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthorOld": "zhezhang",
      "daysBetweenCommits": 16.92,
      "commitsBetweenForRepo": 120,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n   private void initializeStripedBlkReconstructionThreadPool(int num) {\n-    LOG.debug(\"Using striped block reconstruction; pool threads\u003d\" + num);\n+    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\" + num);\n     EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL \u003d new ThreadPoolExecutor(2, num,\n         60, TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\n                 \"stripedBlockReconstruction-\" + threadIdx.getAndIncrement());\n             return t;\n           }\n         });\n     EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int num) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d{}\" + num);\n    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL \u003d new ThreadPoolExecutor(2, num,\n        60, TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\n                \"stripedBlockReconstruction-\" + threadIdx.getAndIncrement());\n            return t;\n          }\n        });\n    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
      "commitDate": "02/02/16 12:32 PM",
      "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
      "commitAuthor": "zhezhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
          "commitDate": "02/02/16 12:32 PM",
          "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
          "commitAuthor": "zhezhang",
          "commitDateOld": "22/01/16 9:46 AM",
          "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 11.12,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private void initializeStripedBlkRecoveryThreadPool(int num) {\n-    LOG.debug(\"Using striped block recovery; pool threads\u003d\" + num);\n-    STRIPED_BLK_RECOVERY_THREAD_POOL \u003d new ThreadPoolExecutor(2, num, 60,\n-        TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n+  private void initializeStripedBlkReconstructionThreadPool(int num) {\n+    LOG.debug(\"Using striped block reconstruction; pool threads\u003d\" + num);\n+    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL \u003d new ThreadPoolExecutor(2, num,\n+        60, TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n-            t.setName(\"stripedBlockRecovery-\" + threadIdx.getAndIncrement());\n+            t.setName(\n+                \"stripedBlockReconstruction-\" + threadIdx.getAndIncrement());\n             return t;\n           }\n         });\n-    STRIPED_BLK_RECOVERY_THREAD_POOL.allowCoreThreadTimeOut(true);\n+    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int num) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d\" + num);\n    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL \u003d new ThreadPoolExecutor(2, num,\n        60, TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\n                \"stripedBlockReconstruction-\" + threadIdx.getAndIncrement());\n            return t;\n          }\n        });\n    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {
            "oldValue": "initializeStripedBlkRecoveryThreadPool",
            "newValue": "initializeStripedBlkReconstructionThreadPool"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9731. Erasure Coding: Rename BlockECRecoveryCommand to BlockECReconstructionCommand. Contributed by Rakesh R.\n\nChange-Id: I405365a8395770e494b92bfe9651f4f0366d8f28\n",
          "commitDate": "02/02/16 12:32 PM",
          "commitName": "4ae543fdcd6dcfbe32257b1e72a405df9aa73e17",
          "commitAuthor": "zhezhang",
          "commitDateOld": "22/01/16 9:46 AM",
          "commitNameOld": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
          "commitAuthorOld": "Jing Zhao",
          "daysBetweenCommits": 11.12,
          "commitsBetweenForRepo": 72,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,17 @@\n-  private void initializeStripedBlkRecoveryThreadPool(int num) {\n-    LOG.debug(\"Using striped block recovery; pool threads\u003d\" + num);\n-    STRIPED_BLK_RECOVERY_THREAD_POOL \u003d new ThreadPoolExecutor(2, num, 60,\n-        TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n+  private void initializeStripedBlkReconstructionThreadPool(int num) {\n+    LOG.debug(\"Using striped block reconstruction; pool threads\u003d\" + num);\n+    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL \u003d new ThreadPoolExecutor(2, num,\n+        60, TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n-            t.setName(\"stripedBlockRecovery-\" + threadIdx.getAndIncrement());\n+            t.setName(\n+                \"stripedBlockReconstruction-\" + threadIdx.getAndIncrement());\n             return t;\n           }\n         });\n-    STRIPED_BLK_RECOVERY_THREAD_POOL.allowCoreThreadTimeOut(true);\n+    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void initializeStripedBlkReconstructionThreadPool(int num) {\n    LOG.debug(\"Using striped block reconstruction; pool threads\u003d\" + num);\n    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL \u003d new ThreadPoolExecutor(2, num,\n        60, TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\n                \"stripedBlockReconstruction-\" + threadIdx.getAndIncrement());\n            return t;\n          }\n        });\n    EC_RECONSTRUCTION_STRIPED_BLK_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
          "extendedDetails": {}
        }
      ]
    },
    "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9646. ErasureCodingWorker may fail when recovering data blocks with length less than the first internal block. Contributed by Jing Zhao.\n",
      "commitDate": "22/01/16 9:46 AM",
      "commitName": "95363bcc7dae28ba9ae2cd7ee9a258fcb58cd932",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "21/12/15 10:47 PM",
      "commitNameOld": "70d6f201260086a3f12beaa317fede2a99639fef",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 31.46,
      "commitsBetweenForRepo": 179,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,16 @@\n   private void initializeStripedBlkRecoveryThreadPool(int num) {\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Using striped block recovery; pool threads\u003d\" + num);\n-    }\n+    LOG.debug(\"Using striped block recovery; pool threads\u003d\" + num);\n     STRIPED_BLK_RECOVERY_THREAD_POOL \u003d new ThreadPoolExecutor(2, num, 60,\n         TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n         new Daemon.DaemonFactory() {\n           private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n \n           @Override\n           public Thread newThread(Runnable r) {\n             Thread t \u003d super.newThread(r);\n             t.setName(\"stripedBlockRecovery-\" + threadIdx.getAndIncrement());\n             return t;\n           }\n         });\n     STRIPED_BLK_RECOVERY_THREAD_POOL.allowCoreThreadTimeOut(true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedBlkRecoveryThreadPool(int num) {\n    LOG.debug(\"Using striped block recovery; pool threads\u003d\" + num);\n    STRIPED_BLK_RECOVERY_THREAD_POOL \u003d new ThreadPoolExecutor(2, num, 60,\n        TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"stripedBlockRecovery-\" + threadIdx.getAndIncrement());\n            return t;\n          }\n        });\n    STRIPED_BLK_RECOVERY_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java",
      "extendedDetails": {}
    },
    "ced438a4bf50fe0ac9072c128e18249e6742956a": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-8899. Erasure Coding: use threadpool for EC recovery tasks on DataNode. Contributed by Rakesh R.\n\nChange-Id: I9429706ae3c9b10a9274c07b98da6ed54cce192b\n",
      "commitDate": "15/09/15 10:43 AM",
      "commitName": "ced438a4bf50fe0ac9072c128e18249e6742956a",
      "commitAuthor": "Zhe Zhang",
      "diff": "@@ -0,0 +1,18 @@\n+  private void initializeStripedBlkRecoveryThreadPool(int num) {\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Using striped block recovery; pool threads\u003d\" + num);\n+    }\n+    STRIPED_BLK_RECOVERY_THREAD_POOL \u003d new ThreadPoolExecutor(2, num, 60,\n+        TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n+        new Daemon.DaemonFactory() {\n+          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n+\n+          @Override\n+          public Thread newThread(Runnable r) {\n+            Thread t \u003d super.newThread(r);\n+            t.setName(\"stripedBlockRecovery-\" + threadIdx.getAndIncrement());\n+            return t;\n+          }\n+        });\n+    STRIPED_BLK_RECOVERY_THREAD_POOL.allowCoreThreadTimeOut(true);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void initializeStripedBlkRecoveryThreadPool(int num) {\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Using striped block recovery; pool threads\u003d\" + num);\n    }\n    STRIPED_BLK_RECOVERY_THREAD_POOL \u003d new ThreadPoolExecutor(2, num, 60,\n        TimeUnit.SECONDS, new LinkedBlockingQueue\u003cRunnable\u003e(),\n        new Daemon.DaemonFactory() {\n          private final AtomicInteger threadIdx \u003d new AtomicInteger(0);\n\n          @Override\n          public Thread newThread(Runnable r) {\n            Thread t \u003d super.newThread(r);\n            t.setName(\"stripedBlockRecovery-\" + threadIdx.getAndIncrement());\n            return t;\n          }\n        });\n    STRIPED_BLK_RECOVERY_THREAD_POOL.allowCoreThreadTimeOut(true);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/erasurecode/ErasureCodingWorker.java"
    }
  }
}