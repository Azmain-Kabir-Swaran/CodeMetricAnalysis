{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationImpl.java",
  "functionName": "handle",
  "functionId": "handle___event-ApplicationEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
  "functionStartLine": 636,
  "functionEndLine": 658,
  "numCommitsSeen": 57,
  "timeTaken": 9492,
  "changeHistory": [
    "9cf7401794def0d420876db5db20fcd76c52193f",
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "9262797e86453fc04b7ca3710b73b21fcdf9e6b4",
    "310aa4686eb697f0700a71d33106514c404dab1b",
    "19295b36d90e26616accee73b1f7743aab5df692",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "68615600985dfadf067a4967a5e08c1421e7a1c8",
    "df2991c0cbc3f35c2640b93680667507c4f810dd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "9cf7401794def0d420876db5db20fcd76c52193f": "Ybodychange",
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "9262797e86453fc04b7ca3710b73b21fcdf9e6b4": "Ybodychange",
    "310aa4686eb697f0700a71d33106514c404dab1b": "Ybodychange",
    "19295b36d90e26616accee73b1f7743aab5df692": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "68615600985dfadf067a4967a5e08c1421e7a1c8": "Ybodychange",
    "df2991c0cbc3f35c2640b93680667507c4f810dd": "Ymultichange(Ymodifierchange,Ybodychange)",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9cf7401794def0d420876db5db20fcd76c52193f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Improved log level practices for InvalidStateTransitionException.\n            Contributed by Anuhan Torgonshar\n\n(cherry picked from commit fe2370e039e1ee980d74769ae85d67434e0993cf)\n",
      "commitDate": "16/04/19 4:53 PM",
      "commitName": "9cf7401794def0d420876db5db20fcd76c52193f",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 32.02,
      "commitsBetweenForRepo": 227,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public void handle(ApplicationEvent event) {\n \n     this.writeLock.lock();\n \n     try {\n       ApplicationId applicationID \u003d event.getApplicationID();\n       LOG.debug(\"Processing {} of type {}\", applicationID, event.getType());\n       ApplicationState oldState \u003d stateMachine.getCurrentState();\n       ApplicationState newState \u003d null;\n       try {\n         // queue event requesting init of the same app\n         newState \u003d stateMachine.doTransition(event.getType(), event);\n       } catch (InvalidStateTransitionException e) {\n-        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n+        LOG.error(\"Can\u0027t handle this event at current state\", e);\n       }\n       if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n         LOG.info(\"Application \" + applicationID + \" transitioned from \"\n             + oldState + \" to \" + newState);\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      LOG.debug(\"Processing {} of type {}\", applicationID, event.getType());\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitionException e) {\n        LOG.error(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {}
    },
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "07/03/19 1:47 PM",
      "commitNameOld": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,23 @@\n   public void handle(ApplicationEvent event) {\n \n     this.writeLock.lock();\n \n     try {\n       ApplicationId applicationID \u003d event.getApplicationID();\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\n-            \"Processing \" + applicationID + \" of type \" + event.getType());\n-      }\n+      LOG.debug(\"Processing {} of type {}\", applicationID, event.getType());\n       ApplicationState oldState \u003d stateMachine.getCurrentState();\n       ApplicationState newState \u003d null;\n       try {\n         // queue event requesting init of the same app\n         newState \u003d stateMachine.doTransition(event.getType(), event);\n       } catch (InvalidStateTransitionException e) {\n         LOG.warn(\"Can\u0027t handle this event at current state\", e);\n       }\n       if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n         LOG.info(\"Application \" + applicationID + \" transitioned from \"\n             + oldState + \" to \" + newState);\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      LOG.debug(\"Processing {} of type {}\", applicationID, event.getType());\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitionException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {}
    },
    "9262797e86453fc04b7ca3710b73b21fcdf9e6b4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5257. Fix unreleased resources and null dereferences (yufeigu via rkanter)\n",
      "commitDate": "27/12/16 2:14 PM",
      "commitName": "9262797e86453fc04b7ca3710b73b21fcdf9e6b4",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "01/11/16 2:21 AM",
      "commitNameOld": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 56.54,
      "commitsBetweenForRepo": 364,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public void handle(ApplicationEvent event) {\n \n     this.writeLock.lock();\n \n     try {\n       ApplicationId applicationID \u003d event.getApplicationID();\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"Processing \" + applicationID + \" of type \" + event.getType());\n       }\n       ApplicationState oldState \u003d stateMachine.getCurrentState();\n       ApplicationState newState \u003d null;\n       try {\n         // queue event requesting init of the same app\n         newState \u003d stateMachine.doTransition(event.getType(), event);\n       } catch (InvalidStateTransitionException e) {\n         LOG.warn(\"Can\u0027t handle this event at current state\", e);\n       }\n-      if (oldState !\u003d newState) {\n+      if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n         LOG.info(\"Application \" + applicationID + \" transitioned from \"\n             + oldState + \" to \" + newState);\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Processing \" + applicationID + \" of type \" + event.getType());\n      }\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitionException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {}
    },
    "310aa4686eb697f0700a71d33106514c404dab1b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5805. Add isDebugEnabled check for debug logs in nodemanager (Bibin A Chundatt via Varun Saxena)\n",
      "commitDate": "01/11/16 2:21 AM",
      "commitName": "310aa4686eb697f0700a71d33106514c404dab1b",
      "commitAuthor": "Varun Saxena",
      "commitDateOld": "10/07/16 8:46 AM",
      "commitNameOld": "6d943038f61211594d017f631710e6710ec71372",
      "commitAuthorOld": "Vrushali",
      "daysBetweenCommits": 113.73,
      "commitsBetweenForRepo": 811,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public void handle(ApplicationEvent event) {\n \n     this.writeLock.lock();\n \n     try {\n       ApplicationId applicationID \u003d event.getApplicationID();\n-      LOG.debug(\"Processing \" + applicationID + \" of type \" + event.getType());\n-\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"Processing \" + applicationID + \" of type \" + event.getType());\n+      }\n       ApplicationState oldState \u003d stateMachine.getCurrentState();\n       ApplicationState newState \u003d null;\n       try {\n         // queue event requesting init of the same app\n         newState \u003d stateMachine.doTransition(event.getType(), event);\n       } catch (InvalidStateTransitionException e) {\n         LOG.warn(\"Can\u0027t handle this event at current state\", e);\n       }\n       if (oldState !\u003d newState) {\n         LOG.info(\"Application \" + applicationID + \" transitioned from \"\n             + oldState + \" to \" + newState);\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Processing \" + applicationID + \" of type \" + event.getType());\n      }\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitionException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {}
    },
    "19295b36d90e26616accee73b1f7743aab5df692": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3381. Fix typo InvalidStateTransitonException. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "13/07/15 1:52 AM",
      "commitName": "19295b36d90e26616accee73b1f7743aab5df692",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/02/15 5:58 PM",
      "commitNameOld": "6a49e58cb81e2d0971166a11a79adc2e1a5aae2a",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 150.29,
      "commitsBetweenForRepo": 1275,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void handle(ApplicationEvent event) {\n \n     this.writeLock.lock();\n \n     try {\n       ApplicationId applicationID \u003d event.getApplicationID();\n       LOG.debug(\"Processing \" + applicationID + \" of type \" + event.getType());\n \n       ApplicationState oldState \u003d stateMachine.getCurrentState();\n       ApplicationState newState \u003d null;\n       try {\n         // queue event requesting init of the same app\n         newState \u003d stateMachine.doTransition(event.getType(), event);\n-      } catch (InvalidStateTransitonException e) {\n+      } catch (InvalidStateTransitionException e) {\n         LOG.warn(\"Can\u0027t handle this event at current state\", e);\n       }\n       if (oldState !\u003d newState) {\n         LOG.info(\"Application \" + applicationID + \" transitioned from \"\n             + oldState + \" to \" + newState);\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      LOG.debug(\"Processing \" + applicationID + \" of type \" + event.getType());\n\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitionException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      LOG.debug(\"Processing \" + applicationID + \" of type \" + event.getType());\n\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitonException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java"
      }
    },
    "68615600985dfadf067a4967a5e08c1421e7a1c8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3692. yarn-resourcemanager out and log files can get big. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1233605 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/01/12 2:23 PM",
      "commitName": "68615600985dfadf067a4967a5e08c1421e7a1c8",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "03/11/11 1:02 AM",
      "commitNameOld": "c27601fefebd0af887a12d684bfc6f90d9fc0321",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 77.6,
      "commitsBetweenForRepo": 359,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public void handle(ApplicationEvent event) {\n \n     this.writeLock.lock();\n \n     try {\n       ApplicationId applicationID \u003d event.getApplicationID();\n-      LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n+      LOG.debug(\"Processing \" + applicationID + \" of type \" + event.getType());\n \n       ApplicationState oldState \u003d stateMachine.getCurrentState();\n       ApplicationState newState \u003d null;\n       try {\n         // queue event requesting init of the same app\n         newState \u003d stateMachine.doTransition(event.getType(), event);\n       } catch (InvalidStateTransitonException e) {\n         LOG.warn(\"Can\u0027t handle this event at current state\", e);\n       }\n       if (oldState !\u003d newState) {\n         LOG.info(\"Application \" + applicationID + \" transitioned from \"\n             + oldState + \" to \" + newState);\n       }\n     } finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      LOG.debug(\"Processing \" + applicationID + \" of type \" + event.getType());\n\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitonException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {}
    },
    "df2991c0cbc3f35c2640b93680667507c4f810dd": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/10/11 4:45 AM",
      "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/10/11 4:45 AM",
          "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/10/11 11:40 PM",
          "commitNameOld": "e3bb120e9fefb21168edd7cd06f0cbfb92a5e02b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.21,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  public synchronized void handle(ApplicationEvent event) {\n+  public void handle(ApplicationEvent event) {\n \n-    ApplicationId applicationID \u003d event.getApplicationID();\n-    LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n+    this.writeLock.lock();\n \n-    ApplicationState oldState \u003d stateMachine.getCurrentState();\n-    ApplicationState newState \u003d null;\n     try {\n-      // queue event requesting init of the same app\n-      newState \u003d stateMachine.doTransition(event.getType(), event);\n-    } catch (InvalidStateTransitonException e) {\n-      LOG.warn(\"Can\u0027t handle this event at current state\", e);\n-    }\n-    if (oldState !\u003d newState) {\n-      LOG.info(\"Application \" + applicationID + \" transitioned from \"\n-          + oldState + \" to \" + newState);\n+      ApplicationId applicationID \u003d event.getApplicationID();\n+      LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n+\n+      ApplicationState oldState \u003d stateMachine.getCurrentState();\n+      ApplicationState newState \u003d null;\n+      try {\n+        // queue event requesting init of the same app\n+        newState \u003d stateMachine.doTransition(event.getType(), event);\n+      } catch (InvalidStateTransitonException e) {\n+        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n+      }\n+      if (oldState !\u003d newState) {\n+        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n+            + oldState + \" to \" + newState);\n+      }\n+    } finally {\n+      this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitonException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-3104. Implemented Application-acls. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186748 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "20/10/11 4:45 AM",
          "commitName": "df2991c0cbc3f35c2640b93680667507c4f810dd",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "18/10/11 11:40 PM",
          "commitNameOld": "e3bb120e9fefb21168edd7cd06f0cbfb92a5e02b",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 1.21,
          "commitsBetweenForRepo": 16,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,24 @@\n-  public synchronized void handle(ApplicationEvent event) {\n+  public void handle(ApplicationEvent event) {\n \n-    ApplicationId applicationID \u003d event.getApplicationID();\n-    LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n+    this.writeLock.lock();\n \n-    ApplicationState oldState \u003d stateMachine.getCurrentState();\n-    ApplicationState newState \u003d null;\n     try {\n-      // queue event requesting init of the same app\n-      newState \u003d stateMachine.doTransition(event.getType(), event);\n-    } catch (InvalidStateTransitonException e) {\n-      LOG.warn(\"Can\u0027t handle this event at current state\", e);\n-    }\n-    if (oldState !\u003d newState) {\n-      LOG.info(\"Application \" + applicationID + \" transitioned from \"\n-          + oldState + \" to \" + newState);\n+      ApplicationId applicationID \u003d event.getApplicationID();\n+      LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n+\n+      ApplicationState oldState \u003d stateMachine.getCurrentState();\n+      ApplicationState newState \u003d null;\n+      try {\n+        // queue event requesting init of the same app\n+        newState \u003d stateMachine.doTransition(event.getType(), event);\n+      } catch (InvalidStateTransitonException e) {\n+        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n+      }\n+      if (oldState !\u003d newState) {\n+        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n+            + oldState + \" to \" + newState);\n+      }\n+    } finally {\n+      this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void handle(ApplicationEvent event) {\n\n    this.writeLock.lock();\n\n    try {\n      ApplicationId applicationID \u003d event.getApplicationID();\n      LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n\n      ApplicationState oldState \u003d stateMachine.getCurrentState();\n      ApplicationState newState \u003d null;\n      try {\n        // queue event requesting init of the same app\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitonException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state\", e);\n      }\n      if (oldState !\u003d newState) {\n        LOG.info(\"Application \" + applicationID + \" transitioned from \"\n            + oldState + \" to \" + newState);\n      }\n    } finally {\n      this.writeLock.unlock();\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void handle(ApplicationEvent event) {\n\n    ApplicationId applicationID \u003d event.getApplicationID();\n    LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n\n    ApplicationState oldState \u003d stateMachine.getCurrentState();\n    ApplicationState newState \u003d null;\n    try {\n      // queue event requesting init of the same app\n      newState \u003d stateMachine.doTransition(event.getType(), event);\n    } catch (InvalidStateTransitonException e) {\n      LOG.warn(\"Can\u0027t handle this event at current state\", e);\n    }\n    if (oldState !\u003d newState) {\n      LOG.info(\"Application \" + applicationID + \" transitioned from \"\n          + oldState + \" to \" + newState);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  public synchronized void handle(ApplicationEvent event) {\n+\n+    ApplicationId applicationID \u003d event.getApplicationID();\n+    LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n+\n+    ApplicationState oldState \u003d stateMachine.getCurrentState();\n+    ApplicationState newState \u003d null;\n+    try {\n+      // queue event requesting init of the same app\n+      newState \u003d stateMachine.doTransition(event.getType(), event);\n+    } catch (InvalidStateTransitonException e) {\n+      LOG.warn(\"Can\u0027t handle this event at current state\", e);\n+    }\n+    if (oldState !\u003d newState) {\n+      LOG.info(\"Application \" + applicationID + \" transitioned from \"\n+          + oldState + \" to \" + newState);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void handle(ApplicationEvent event) {\n\n    ApplicationId applicationID \u003d event.getApplicationID();\n    LOG.info(\"Processing \" + applicationID + \" of type \" + event.getType());\n\n    ApplicationState oldState \u003d stateMachine.getCurrentState();\n    ApplicationState newState \u003d null;\n    try {\n      // queue event requesting init of the same app\n      newState \u003d stateMachine.doTransition(event.getType(), event);\n    } catch (InvalidStateTransitonException e) {\n      LOG.warn(\"Can\u0027t handle this event at current state\", e);\n    }\n    if (oldState !\u003d newState) {\n      LOG.info(\"Application \" + applicationID + \" transitioned from \"\n          + oldState + \" to \" + newState);\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/application/ApplicationImpl.java"
    }
  }
}