{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "buildAppProto",
  "functionId": "buildAppProto___appId-ApplicationId__user-String__credentials-Credentials__appAcls-Map__ApplicationAccessType,String____logAggregationContext-LogAggregationContext__flowContext-FlowContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 1025,
  "functionEndLine": 1074,
  "numCommitsSeen": 285,
  "timeTaken": 7369,
  "changeHistory": [
    "47474fffac085e0e5ea46336bf80ccd0677017a3",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f"
  ],
  "changeHistoryShort": {
    "47474fffac085e0e5ea46336bf80ccd0677017a3": "Ymultichange(Yparameterchange,Ybodychange)",
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": "Ymultichange(Yparameterchange,Ybodychange)",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "47474fffac085e0e5ea46336bf80ccd0677017a3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6555. Store application flow context in NM state store for work-preserving restart. (Rohith Sharma K S via Haibo Chen)\n",
      "commitDate": "25/05/17 9:15 PM",
      "commitName": "47474fffac085e0e5ea46336bf80ccd0677017a3",
      "commitAuthor": "Haibo Chen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6555. Store application flow context in NM state store for work-preserving restart. (Rohith Sharma K S via Haibo Chen)\n",
          "commitDate": "25/05/17 9:15 PM",
          "commitName": "47474fffac085e0e5ea46336bf80ccd0677017a3",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "08/05/17 3:14 PM",
          "commitNameOld": "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 17.25,
          "commitsBetweenForRepo": 105,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,50 @@\n   private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n       String user, Credentials credentials,\n       Map\u003cApplicationAccessType, String\u003e appAcls,\n-      LogAggregationContext logAggregationContext) {\n+      LogAggregationContext logAggregationContext, FlowContext flowContext) {\n \n     ContainerManagerApplicationProto.Builder builder \u003d\n         ContainerManagerApplicationProto.newBuilder();\n     builder.setId(((ApplicationIdPBImpl) appId).getProto());\n     builder.setUser(user);\n \n     if (logAggregationContext !\u003d null) {\n       builder.setLogAggregationContext((\n           (LogAggregationContextPBImpl)logAggregationContext).getProto());\n     }\n \n     builder.clearCredentials();\n     if (credentials !\u003d null) {\n       DataOutputBuffer dob \u003d new DataOutputBuffer();\n       try {\n         credentials.writeTokenStorageToStream(dob);\n         builder.setCredentials(ByteString.copyFrom(dob.getData()));\n       } catch (IOException e) {\n         // should not occur\n         LOG.error(\"Cannot serialize credentials\", e);\n       }\n     }\n \n     builder.clearAcls();\n     if (appAcls !\u003d null) {\n       for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n         ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n             .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n             .setAcl(acl.getValue())\n             .build();\n         builder.addAcls(p);\n       }\n     }\n \n+    builder.clearFlowContext();\n+    if (flowContext !\u003d null \u0026\u0026 flowContext.getFlowName() !\u003d null\n+        \u0026\u0026 flowContext.getFlowVersion() !\u003d null) {\n+      FlowContextProto fcp \u003d\n+          FlowContextProto.newBuilder().setFlowName(flowContext.getFlowName())\n+              .setFlowVersion(flowContext.getFlowVersion())\n+              .setFlowRunId(flowContext.getFlowRunId()).build();\n+      builder.setFlowContext(fcp);\n+    }\n+\n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n      String user, Credentials credentials,\n      Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext, FlowContext flowContext) {\n\n    ContainerManagerApplicationProto.Builder builder \u003d\n        ContainerManagerApplicationProto.newBuilder();\n    builder.setId(((ApplicationIdPBImpl) appId).getProto());\n    builder.setUser(user);\n\n    if (logAggregationContext !\u003d null) {\n      builder.setLogAggregationContext((\n          (LogAggregationContextPBImpl)logAggregationContext).getProto());\n    }\n\n    builder.clearCredentials();\n    if (credentials !\u003d null) {\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      try {\n        credentials.writeTokenStorageToStream(dob);\n        builder.setCredentials(ByteString.copyFrom(dob.getData()));\n      } catch (IOException e) {\n        // should not occur\n        LOG.error(\"Cannot serialize credentials\", e);\n      }\n    }\n\n    builder.clearAcls();\n    if (appAcls !\u003d null) {\n      for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n        ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n            .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n            .setAcl(acl.getValue())\n            .build();\n        builder.addAcls(p);\n      }\n    }\n\n    builder.clearFlowContext();\n    if (flowContext !\u003d null \u0026\u0026 flowContext.getFlowName() !\u003d null\n        \u0026\u0026 flowContext.getFlowVersion() !\u003d null) {\n      FlowContextProto fcp \u003d\n          FlowContextProto.newBuilder().setFlowName(flowContext.getFlowName())\n              .setFlowVersion(flowContext.getFlowVersion())\n              .setFlowRunId(flowContext.getFlowRunId()).build();\n      builder.setFlowContext(fcp);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, user-String, credentials-Credentials, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext]",
            "newValue": "[appId-ApplicationId, user-String, credentials-Credentials, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext, flowContext-FlowContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6555. Store application flow context in NM state store for work-preserving restart. (Rohith Sharma K S via Haibo Chen)\n",
          "commitDate": "25/05/17 9:15 PM",
          "commitName": "47474fffac085e0e5ea46336bf80ccd0677017a3",
          "commitAuthor": "Haibo Chen",
          "commitDateOld": "08/05/17 3:14 PM",
          "commitNameOld": "424887ecb7d11a72837f2757ed3ff9e0fe8c5b5d",
          "commitAuthorOld": "Jason Lowe",
          "daysBetweenCommits": 17.25,
          "commitsBetweenForRepo": 105,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,40 +1,50 @@\n   private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n       String user, Credentials credentials,\n       Map\u003cApplicationAccessType, String\u003e appAcls,\n-      LogAggregationContext logAggregationContext) {\n+      LogAggregationContext logAggregationContext, FlowContext flowContext) {\n \n     ContainerManagerApplicationProto.Builder builder \u003d\n         ContainerManagerApplicationProto.newBuilder();\n     builder.setId(((ApplicationIdPBImpl) appId).getProto());\n     builder.setUser(user);\n \n     if (logAggregationContext !\u003d null) {\n       builder.setLogAggregationContext((\n           (LogAggregationContextPBImpl)logAggregationContext).getProto());\n     }\n \n     builder.clearCredentials();\n     if (credentials !\u003d null) {\n       DataOutputBuffer dob \u003d new DataOutputBuffer();\n       try {\n         credentials.writeTokenStorageToStream(dob);\n         builder.setCredentials(ByteString.copyFrom(dob.getData()));\n       } catch (IOException e) {\n         // should not occur\n         LOG.error(\"Cannot serialize credentials\", e);\n       }\n     }\n \n     builder.clearAcls();\n     if (appAcls !\u003d null) {\n       for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n         ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n             .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n             .setAcl(acl.getValue())\n             .build();\n         builder.addAcls(p);\n       }\n     }\n \n+    builder.clearFlowContext();\n+    if (flowContext !\u003d null \u0026\u0026 flowContext.getFlowName() !\u003d null\n+        \u0026\u0026 flowContext.getFlowVersion() !\u003d null) {\n+      FlowContextProto fcp \u003d\n+          FlowContextProto.newBuilder().setFlowName(flowContext.getFlowName())\n+              .setFlowVersion(flowContext.getFlowVersion())\n+              .setFlowRunId(flowContext.getFlowRunId()).build();\n+      builder.setFlowContext(fcp);\n+    }\n+\n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n      String user, Credentials credentials,\n      Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext, FlowContext flowContext) {\n\n    ContainerManagerApplicationProto.Builder builder \u003d\n        ContainerManagerApplicationProto.newBuilder();\n    builder.setId(((ApplicationIdPBImpl) appId).getProto());\n    builder.setUser(user);\n\n    if (logAggregationContext !\u003d null) {\n      builder.setLogAggregationContext((\n          (LogAggregationContextPBImpl)logAggregationContext).getProto());\n    }\n\n    builder.clearCredentials();\n    if (credentials !\u003d null) {\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      try {\n        credentials.writeTokenStorageToStream(dob);\n        builder.setCredentials(ByteString.copyFrom(dob.getData()));\n      } catch (IOException e) {\n        // should not occur\n        LOG.error(\"Cannot serialize credentials\", e);\n      }\n    }\n\n    builder.clearAcls();\n    if (appAcls !\u003d null) {\n      for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n        ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n            .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n            .setAcl(acl.getValue())\n            .build();\n        builder.addAcls(p);\n      }\n    }\n\n    builder.clearFlowContext();\n    if (flowContext !\u003d null \u0026\u0026 flowContext.getFlowName() !\u003d null\n        \u0026\u0026 flowContext.getFlowVersion() !\u003d null) {\n      FlowContextProto fcp \u003d\n          FlowContextProto.newBuilder().setFlowName(flowContext.getFlowName())\n              .setFlowVersion(flowContext.getFlowVersion())\n              .setFlowRunId(flowContext.getFlowRunId()).build();\n      builder.setFlowContext(fcp);\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2581. Passed LogAggregationContext to NM via ContainerTokenIdentifier. Contributed by Xuan Gong.\n",
      "commitDate": "24/09/14 5:50 PM",
      "commitName": "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2581. Passed LogAggregationContext to NM via ContainerTokenIdentifier. Contributed by Xuan Gong.\n",
          "commitDate": "24/09/14 5:50 PM",
          "commitName": "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 43.58,
          "commitsBetweenForRepo": 426,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,40 @@\n   private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n       String user, Credentials credentials,\n-      Map\u003cApplicationAccessType, String\u003e appAcls) {\n+      Map\u003cApplicationAccessType, String\u003e appAcls,\n+      LogAggregationContext logAggregationContext) {\n \n     ContainerManagerApplicationProto.Builder builder \u003d\n         ContainerManagerApplicationProto.newBuilder();\n     builder.setId(((ApplicationIdPBImpl) appId).getProto());\n     builder.setUser(user);\n \n+    if (logAggregationContext !\u003d null) {\n+      builder.setLogAggregationContext((\n+          (LogAggregationContextPBImpl)logAggregationContext).getProto());\n+    }\n+\n     builder.clearCredentials();\n     if (credentials !\u003d null) {\n       DataOutputBuffer dob \u003d new DataOutputBuffer();\n       try {\n         credentials.writeTokenStorageToStream(dob);\n         builder.setCredentials(ByteString.copyFrom(dob.getData()));\n       } catch (IOException e) {\n         // should not occur\n         LOG.error(\"Cannot serialize credentials\", e);\n       }\n     }\n \n     builder.clearAcls();\n     if (appAcls !\u003d null) {\n       for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n         ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n             .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n             .setAcl(acl.getValue())\n             .build();\n         builder.addAcls(p);\n       }\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n      String user, Credentials credentials,\n      Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext) {\n\n    ContainerManagerApplicationProto.Builder builder \u003d\n        ContainerManagerApplicationProto.newBuilder();\n    builder.setId(((ApplicationIdPBImpl) appId).getProto());\n    builder.setUser(user);\n\n    if (logAggregationContext !\u003d null) {\n      builder.setLogAggregationContext((\n          (LogAggregationContextPBImpl)logAggregationContext).getProto());\n    }\n\n    builder.clearCredentials();\n    if (credentials !\u003d null) {\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      try {\n        credentials.writeTokenStorageToStream(dob);\n        builder.setCredentials(ByteString.copyFrom(dob.getData()));\n      } catch (IOException e) {\n        // should not occur\n        LOG.error(\"Cannot serialize credentials\", e);\n      }\n    }\n\n    builder.clearAcls();\n    if (appAcls !\u003d null) {\n      for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n        ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n            .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n            .setAcl(acl.getValue())\n            .build();\n        builder.addAcls(p);\n      }\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {
            "oldValue": "[appId-ApplicationId, user-String, credentials-Credentials, appAcls-Map\u003cApplicationAccessType,String\u003e]",
            "newValue": "[appId-ApplicationId, user-String, credentials-Credentials, appAcls-Map\u003cApplicationAccessType,String\u003e, logAggregationContext-LogAggregationContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2581. Passed LogAggregationContext to NM via ContainerTokenIdentifier. Contributed by Xuan Gong.\n",
          "commitDate": "24/09/14 5:50 PM",
          "commitName": "c86674a3a4d99aa56bb8ed3f6df51e3fef215eba",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "12/08/14 3:56 AM",
          "commitNameOld": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 43.58,
          "commitsBetweenForRepo": 426,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,40 @@\n   private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n       String user, Credentials credentials,\n-      Map\u003cApplicationAccessType, String\u003e appAcls) {\n+      Map\u003cApplicationAccessType, String\u003e appAcls,\n+      LogAggregationContext logAggregationContext) {\n \n     ContainerManagerApplicationProto.Builder builder \u003d\n         ContainerManagerApplicationProto.newBuilder();\n     builder.setId(((ApplicationIdPBImpl) appId).getProto());\n     builder.setUser(user);\n \n+    if (logAggregationContext !\u003d null) {\n+      builder.setLogAggregationContext((\n+          (LogAggregationContextPBImpl)logAggregationContext).getProto());\n+    }\n+\n     builder.clearCredentials();\n     if (credentials !\u003d null) {\n       DataOutputBuffer dob \u003d new DataOutputBuffer();\n       try {\n         credentials.writeTokenStorageToStream(dob);\n         builder.setCredentials(ByteString.copyFrom(dob.getData()));\n       } catch (IOException e) {\n         // should not occur\n         LOG.error(\"Cannot serialize credentials\", e);\n       }\n     }\n \n     builder.clearAcls();\n     if (appAcls !\u003d null) {\n       for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n         ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n             .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n             .setAcl(acl.getValue())\n             .build();\n         builder.addAcls(p);\n       }\n     }\n \n     return builder.build();\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n      String user, Credentials credentials,\n      Map\u003cApplicationAccessType, String\u003e appAcls,\n      LogAggregationContext logAggregationContext) {\n\n    ContainerManagerApplicationProto.Builder builder \u003d\n        ContainerManagerApplicationProto.newBuilder();\n    builder.setId(((ApplicationIdPBImpl) appId).getProto());\n    builder.setUser(user);\n\n    if (logAggregationContext !\u003d null) {\n      builder.setLogAggregationContext((\n          (LogAggregationContextPBImpl)logAggregationContext).getProto());\n    }\n\n    builder.clearCredentials();\n    if (credentials !\u003d null) {\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      try {\n        credentials.writeTokenStorageToStream(dob);\n        builder.setCredentials(ByteString.copyFrom(dob.getData()));\n      } catch (IOException e) {\n        // should not occur\n        LOG.error(\"Cannot serialize credentials\", e);\n      }\n    }\n\n    builder.clearAcls();\n    if (appAcls !\u003d null) {\n      for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n        ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n            .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n            .setAcl(acl.getValue())\n            .build();\n        builder.addAcls(p);\n      }\n    }\n\n    return builder.build();\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1354. Recover applications upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615550 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 6:25 AM",
      "commitName": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,34 @@\n+  private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n+      String user, Credentials credentials,\n+      Map\u003cApplicationAccessType, String\u003e appAcls) {\n+\n+    ContainerManagerApplicationProto.Builder builder \u003d\n+        ContainerManagerApplicationProto.newBuilder();\n+    builder.setId(((ApplicationIdPBImpl) appId).getProto());\n+    builder.setUser(user);\n+\n+    builder.clearCredentials();\n+    if (credentials !\u003d null) {\n+      DataOutputBuffer dob \u003d new DataOutputBuffer();\n+      try {\n+        credentials.writeTokenStorageToStream(dob);\n+        builder.setCredentials(ByteString.copyFrom(dob.getData()));\n+      } catch (IOException e) {\n+        // should not occur\n+        LOG.error(\"Cannot serialize credentials\", e);\n+      }\n+    }\n+\n+    builder.clearAcls();\n+    if (appAcls !\u003d null) {\n+      for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n+        ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n+            .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n+            .setAcl(acl.getValue())\n+            .build();\n+        builder.addAcls(p);\n+      }\n+    }\n+\n+    return builder.build();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private ContainerManagerApplicationProto buildAppProto(ApplicationId appId,\n      String user, Credentials credentials,\n      Map\u003cApplicationAccessType, String\u003e appAcls) {\n\n    ContainerManagerApplicationProto.Builder builder \u003d\n        ContainerManagerApplicationProto.newBuilder();\n    builder.setId(((ApplicationIdPBImpl) appId).getProto());\n    builder.setUser(user);\n\n    builder.clearCredentials();\n    if (credentials !\u003d null) {\n      DataOutputBuffer dob \u003d new DataOutputBuffer();\n      try {\n        credentials.writeTokenStorageToStream(dob);\n        builder.setCredentials(ByteString.copyFrom(dob.getData()));\n      } catch (IOException e) {\n        // should not occur\n        LOG.error(\"Cannot serialize credentials\", e);\n      }\n    }\n\n    builder.clearAcls();\n    if (appAcls !\u003d null) {\n      for (Map.Entry\u003cApplicationAccessType, String\u003e acl : appAcls.entrySet()) {\n        ApplicationACLMapProto p \u003d ApplicationACLMapProto.newBuilder()\n            .setAccessType(ProtoUtils.convertToProtoFormat(acl.getKey()))\n            .setAcl(acl.getValue())\n            .build();\n        builder.addAcls(p);\n      }\n    }\n\n    return builder.build();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}