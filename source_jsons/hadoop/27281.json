{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "getEntities",
  "functionId": "getEntities___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__uId-String(annotations-@PathParam(\"uid\"))__entityType-String(annotations-@PathParam(\"entitytype\"))__limit-String(annotations-@QueryParam(\"limit\"))__createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\"))__createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\"))__relatesTo-String(annotations-@QueryParam(\"relatesto\"))__isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\"))__infofilters-String(annotations-@QueryParam(\"infofilters\"))__conffilters-String(annotations-@QueryParam(\"conffilters\"))__metricfilters-String(annotations-@QueryParam(\"metricfilters\"))__eventfilters-String(annotations-@QueryParam(\"eventfilters\"))__confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\"))__metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\"))__fields-String(annotations-@QueryParam(\"fields\"))__metricsLimit-String(annotations-@QueryParam(\"metricslimit\"))__metricsTimeStart-String(annotations-@QueryParam(\"metricstimestart\"))__metricsTimeEnd-String(annotations-@QueryParam(\"metricstimeend\"))__fromId-String(annotations-@QueryParam(\"fromid\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 333,
  "functionEndLine": 398,
  "numCommitsSeen": 128,
  "timeTaken": 5452,
  "changeHistory": [
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
    "02a9710a099fc9572122d87dd3e90c78522f5836",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7"
  ],
  "changeHistoryShort": {
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65": "Ybodychange",
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": "Ybodychange",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": "Ymultichange(Yparameterchange,Ybodychange)",
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": "Ymultichange(Yparameterchange,Ybodychange)",
    "02a9710a099fc9572122d87dd3e90c78522f5836": "Ymultichange(Yparameterchange,Ybodychange)",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": "Ymultichange(Yparameterchange,Ybodychange)",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": "Ymultichange(Yparameterchange,Ybodychange)",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "1e5e08d83b8dc168e636e0834584fecf5d44cb65": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7627. [ATSv2] When passing a non-number as metricslimit, the error message is wrong. Contributed by Charan Hebri.\n",
      "commitDate": "06/02/19 8:28 PM",
      "commitName": "1e5e08d83b8dc168e636e0834584fecf5d44cb65",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "27/09/18 3:53 PM",
      "commitNameOld": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthorOld": "Vrushali C",
      "daysBetweenCommits": 132.23,
      "commitsBetweenForRepo": 983,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,66 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n               fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n           metricsTimeStart, metricsTimeEnd));\n       checkAccessForGenericEntities(entities, callerUGI, entityType);\n       succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n-          \"createdTime start/end or limit or flowrunid\");\n+          \"Either limit or createdtime start/end or metricslimit or metricstime\"\n+              + \" start/end or fromid\");\n     } finally {\n       long latency \u003d Time.monotonicNow() - startTime;\n       METRICS.addGetEntitiesLatency(latency, succeeded);\n       LOG.info(\"Processed URL \" + url +\n           \" (Took \" + latency + \" ms.)\");\n     }\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n          metricsTimeStart, metricsTimeEnd));\n      checkAccessForGenericEntities(entities, callerUGI, entityType);\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"Either limit or createdtime start/end or metricslimit or metricstime\"\n              + \" start/end or fromid\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "13/09/18 5:17 AM",
      "commitNameOld": "f4bda5e8e9fee6c5a0dda7c79ef14e73aec20e7e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,65 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n               fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n           metricsTimeStart, metricsTimeEnd));\n       checkAccessForGenericEntities(entities, callerUGI, entityType);\n+      succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      METRICS.addGetEntitiesLatency(latency, succeeded);\n+      LOG.info(\"Processed URL \" + url +\n+          \" (Took \" + latency + \" ms.)\");\n     }\n-    long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n-    LOG.info(\"Processed URL \" + url +\n-        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n          metricsTimeStart, metricsTimeEnd));\n      checkAccessForGenericEntities(entities, callerUGI, entityType);\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8455. Add basic ACL check for all ATS v2 REST APIs. Contributed by Rohith Sharma K S.\n",
      "commitDate": "29/06/18 10:02 AM",
      "commitName": "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/06/18 8:59 PM",
      "commitNameOld": "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 27.54,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n       @QueryParam(\"metricstimestart\") String metricsTimeStart,\n       @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n               fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n           metricsTimeStart, metricsTimeEnd));\n+      checkAccessForGenericEntities(entities, callerUGI, entityType);\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n          metricsTimeStart, metricsTimeEnd));\n      checkAccessForGenericEntities(entities, callerUGI, entityType);\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "b87b72b40a3cd4e124d6c941276481747133895f",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,60 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n+      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n               fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n+          metricsTimeStart, metricsTimeEnd));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n          metricsTimeStart, metricsTimeEnd));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromId-String(annotations-@QueryParam(\"fromid\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), metricsTimeStart-String(annotations-@QueryParam(\"metricstimestart\")), metricsTimeEnd-String(annotations-@QueryParam(\"metricstimeend\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "b87b72b40a3cd4e124d6c941276481747133895f",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 8,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,60 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n+      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n               fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n+          metricsTimeStart, metricsTimeEnd));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"metricstimestart\") String metricsTimeStart,\n      @QueryParam(\"metricstimeend\") String metricsTimeEnd,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit,\n          metricsTimeStart, metricsTimeEnd));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "8bb26465956a37d7398818bc0919772e12953725",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n-      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n-              fromIdPrefix, fromId),\n+              fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromIdPrefix-String(annotations-@QueryParam(\"fromidprefix\")), fromId-String(annotations-@QueryParam(\"fromid\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6256. Add FROM_ID info key for timeline entities in reader response (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "c3bd8d6ad3e30c08865cc1a5f374d1d2a485f844",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "8bb26465956a37d7398818bc0919772e12953725",
          "commitAuthorOld": "Varun Saxena",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,58 +1,57 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n       @QueryParam(\"metricslimit\") String metricsLimit,\n-      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n       @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n               infofilters, conffilters, metricfilters, eventfilters,\n-              fromIdPrefix, fromId),\n+              fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "02a9710a099fc9572122d87dd3e90c78522f5836": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
      "commitAuthor": "Varun Saxena",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,58 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n-      @QueryParam(\"metricslimit\") String metricsLimit) {\n+      @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n-          infofilters, conffilters, metricfilters, eventfilters),\n+              infofilters, conffilters, metricfilters, eventfilters,\n+              fromIdPrefix, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromIdPrefix, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\")), fromIdPrefix-String(annotations-@QueryParam(\"fromidprefix\")), fromId-String(annotations-@QueryParam(\"fromid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5585. [Atsv2] Reader side changes for entity prefix and support for pagination via additional filters (Rohith Sharma K S via Varun Saxena)\n",
          "commitDate": "29/08/17 10:59 PM",
          "commitName": "02a9710a099fc9572122d87dd3e90c78522f5836",
          "commitAuthor": "Varun Saxena",
          "commitDateOld": "29/08/17 10:59 PM",
          "commitNameOld": "4481561e4a3433197dd8e73f38856eef84f0fd03",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 4,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,55 +1,58 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields,\n-      @QueryParam(\"metricslimit\") String metricsLimit) {\n+      @QueryParam(\"metricslimit\") String metricsLimit,\n+      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n+      @QueryParam(\"fromid\") String fromId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n-          infofilters, conffilters, metricfilters, eventfilters),\n+              infofilters, conffilters, metricfilters, eventfilters,\n+              fromIdPrefix, fromId),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit,\n      @QueryParam(\"fromidprefix\") String fromIdPrefix,\n      @QueryParam(\"fromid\") String fromId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n              infofilters, conffilters, metricfilters, eventfilters,\n              fromIdPrefix, fromId),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,55 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"fields\") String fields,\n+      @QueryParam(\"metricslimit\") String metricsLimit) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\")), metricsLimit-String(annotations-@QueryParam(\"metricslimit\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:46 AM",
          "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,54 +1,55 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n-      @QueryParam(\"fields\") String fields) {\n+      @QueryParam(\"fields\") String fields,\n+      @QueryParam(\"metricslimit\") String metricsLimit) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          confsToRetrieve, metricsToRetrieve, fields));\n+          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields,\n      @QueryParam(\"metricslimit\") String metricsLimit) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields, metricsLimit));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,54 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n+      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, null, fields));\n+          confsToRetrieve, metricsToRetrieve, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), entityType-String(annotations-@PathParam(\"entitytype\")), limit-String(annotations-@QueryParam(\"limit\")), createdTimeStart-String(annotations-@QueryParam(\"createdtimestart\")), createdTimeEnd-String(annotations-@QueryParam(\"createdtimeend\")), relatesTo-String(annotations-@QueryParam(\"relatesto\")), isRelatedTo-String(annotations-@QueryParam(\"isrelatedto\")), infofilters-String(annotations-@QueryParam(\"infofilters\")), conffilters-String(annotations-@QueryParam(\"conffilters\")), metricfilters-String(annotations-@QueryParam(\"metricfilters\")), eventfilters-String(annotations-@QueryParam(\"eventfilters\")), confsToRetrieve-String(annotations-@QueryParam(\"confstoretrieve\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,52 +1,54 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n+      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(\n           TimelineReaderWebServicesUtils.parseStr(entityType));\n       entities \u003d timelineReaderManager.getEntities(context,\n           TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n           limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n           infofilters, conffilters, metricfilters, eventfilters),\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, null, fields));\n+          confsToRetrieve, metricsToRetrieve, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"confstoretrieve\") String confsToRetrieve,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          confsToRetrieve, metricsToRetrieve, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,52 @@\n   public Set\u003cTimelineEntity\u003e getEntities(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @PathParam(\"entitytype\") String entityType,\n       @QueryParam(\"limit\") String limit,\n       @QueryParam(\"createdtimestart\") String createdTimeStart,\n       @QueryParam(\"createdtimeend\") String createdTimeEnd,\n       @QueryParam(\"relatesto\") String relatesTo,\n       @QueryParam(\"isrelatedto\") String isRelatedTo,\n       @QueryParam(\"infofilters\") String infofilters,\n       @QueryParam(\"conffilters\") String conffilters,\n       @QueryParam(\"metricfilters\") String metricfilters,\n       @QueryParam(\"eventfilters\") String eventfilters,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     Set\u003cTimelineEntity\u003e entities \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n-      entities \u003d timelineReaderManager.getEntities(\n-          TimelineReaderWebServicesUtils.parseStr(context.getUserId()),\n-          TimelineReaderWebServicesUtils.parseStr(context.getClusterId()),\n-          TimelineReaderWebServicesUtils.parseStr(context.getFlowName()),\n-          context.getFlowRunId(),\n-          TimelineReaderWebServicesUtils.parseStr(context.getAppId()),\n-          TimelineReaderWebServicesUtils.parseStr(entityType),\n-          TimelineReaderWebServicesUtils.parseLongStr(limit),\n-          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n-          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n-          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n-          relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n-          isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseKeyStrValueObj(\n-          infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseKeyStrValueStr(\n-          conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseValuesStr(\n-           metricfilters, COMMA_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseValuesStr(\n-          eventfilters, COMMA_DELIMITER),\n-          TimelineReaderWebServicesUtils.parseFieldsStr(\n-          fields, COMMA_DELIMITER));\n+      context.setEntityType(\n+          TimelineReaderWebServicesUtils.parseStr(entityType));\n+      entities \u003d timelineReaderManager.getEntities(context,\n+          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n+          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n+          infofilters, conffilters, metricfilters, eventfilters),\n+          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n+          null, null, fields));\n     } catch (Exception e) {\n       handleException(e, url, startTime,\n           \"createdTime start/end or limit or flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entities \u003d\u003d null) {\n       entities \u003d Collections.emptySet();\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entities;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(\n          TimelineReaderWebServicesUtils.parseStr(entityType));\n      entities \u003d timelineReaderManager.getEntities(context,\n          TimelineReaderWebServicesUtils.createTimelineEntityFilters(\n          limit, createdTimeStart, createdTimeEnd, relatesTo, isRelatedTo,\n          infofilters, conffilters, metricfilters, eventfilters),\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, null, fields));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthor": "Li Lu",
      "diff": "@@ -0,0 +1,68 @@\n+  public Set\u003cTimelineEntity\u003e getEntities(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"uid\") String uId,\n+      @PathParam(\"entitytype\") String entityType,\n+      @QueryParam(\"limit\") String limit,\n+      @QueryParam(\"createdtimestart\") String createdTimeStart,\n+      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n+      @QueryParam(\"relatesto\") String relatesTo,\n+      @QueryParam(\"isrelatedto\") String isRelatedTo,\n+      @QueryParam(\"infofilters\") String infofilters,\n+      @QueryParam(\"conffilters\") String conffilters,\n+      @QueryParam(\"metricfilters\") String metricfilters,\n+      @QueryParam(\"eventfilters\") String eventfilters,\n+      @QueryParam(\"fields\") String fields) {\n+    String url \u003d req.getRequestURI() +\n+        (req.getQueryString() \u003d\u003d null ? \"\" :\n+            QUERY_STRING_SEP + req.getQueryString());\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n+    long startTime \u003d Time.monotonicNow();\n+    init(res);\n+    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    Set\u003cTimelineEntity\u003e entities \u003d null;\n+    try {\n+      TimelineReaderContext context \u003d\n+          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n+      if (context \u003d\u003d null) {\n+        throw new BadRequestException(\"Incorrect UID \" +  uId);\n+      }\n+      entities \u003d timelineReaderManager.getEntities(\n+          TimelineReaderWebServicesUtils.parseStr(context.getUserId()),\n+          TimelineReaderWebServicesUtils.parseStr(context.getClusterId()),\n+          TimelineReaderWebServicesUtils.parseStr(context.getFlowName()),\n+          context.getFlowRunId(),\n+          TimelineReaderWebServicesUtils.parseStr(context.getAppId()),\n+          TimelineReaderWebServicesUtils.parseStr(entityType),\n+          TimelineReaderWebServicesUtils.parseLongStr(limit),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n+          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n+          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n+          relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n+          isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseKeyStrValueObj(\n+          infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseKeyStrValueStr(\n+          conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseValuesStr(\n+           metricfilters, COMMA_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseValuesStr(\n+          eventfilters, COMMA_DELIMITER),\n+          TimelineReaderWebServicesUtils.parseFieldsStr(\n+          fields, COMMA_DELIMITER));\n+    } catch (Exception e) {\n+      handleException(e, url, startTime,\n+          \"createdTime start/end or limit or flowrunid\");\n+    }\n+    long endTime \u003d Time.monotonicNow();\n+    if (entities \u003d\u003d null) {\n+      entities \u003d Collections.emptySet();\n+    }\n+    LOG.info(\"Processed URL \" + url +\n+        \" (Took \" + (endTime - startTime) + \" ms.)\");\n+    return entities;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Set\u003cTimelineEntity\u003e getEntities(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @PathParam(\"entitytype\") String entityType,\n      @QueryParam(\"limit\") String limit,\n      @QueryParam(\"createdtimestart\") String createdTimeStart,\n      @QueryParam(\"createdtimeend\") String createdTimeEnd,\n      @QueryParam(\"relatesto\") String relatesTo,\n      @QueryParam(\"isrelatedto\") String isRelatedTo,\n      @QueryParam(\"infofilters\") String infofilters,\n      @QueryParam(\"conffilters\") String conffilters,\n      @QueryParam(\"metricfilters\") String metricfilters,\n      @QueryParam(\"eventfilters\") String eventfilters,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    Set\u003cTimelineEntity\u003e entities \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.APPLICATION_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      entities \u003d timelineReaderManager.getEntities(\n          TimelineReaderWebServicesUtils.parseStr(context.getUserId()),\n          TimelineReaderWebServicesUtils.parseStr(context.getClusterId()),\n          TimelineReaderWebServicesUtils.parseStr(context.getFlowName()),\n          context.getFlowRunId(),\n          TimelineReaderWebServicesUtils.parseStr(context.getAppId()),\n          TimelineReaderWebServicesUtils.parseStr(entityType),\n          TimelineReaderWebServicesUtils.parseLongStr(limit),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeStart),\n          TimelineReaderWebServicesUtils.parseLongStr(createdTimeEnd),\n          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n          relatesTo, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseKeyStrValuesStr(\n          isRelatedTo, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseKeyStrValueObj(\n          infofilters, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseKeyStrValueStr(\n          conffilters, COMMA_DELIMITER, COLON_DELIMITER),\n          TimelineReaderWebServicesUtils.parseValuesStr(\n           metricfilters, COMMA_DELIMITER),\n          TimelineReaderWebServicesUtils.parseValuesStr(\n          eventfilters, COMMA_DELIMITER),\n          TimelineReaderWebServicesUtils.parseFieldsStr(\n          fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime,\n          \"createdTime start/end or limit or flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entities \u003d\u003d null) {\n      entities \u003d Collections.emptySet();\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entities;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}