{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StageAllocatorLowCostAligned.java",
  "functionName": "computeIntervalEndTimes",
  "functionId": "computeIntervalEndTimes___stageEarliestStart-long__stageDeadline-long__duration-long",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java",
  "functionStartLine": 216,
  "functionEndLine": 234,
  "numCommitsSeen": 8,
  "timeTaken": 2145,
  "changeHistory": [
    "a3a615eeab8c14ccdc548311097e62a916963dc5"
  ],
  "changeHistoryShort": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a3a615eeab8c14ccdc548311097e62a916963dc5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4359. Update LowCost agents logic to take advantage of YARN-4358. (Jonathan Yaniv and Ishai Menache via Subru).\n",
      "commitDate": "01/05/17 4:01 PM",
      "commitName": "a3a615eeab8c14ccdc548311097e62a916963dc5",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,19 @@\n+  private List\u003cLong\u003e computeIntervalEndTimes(long stageEarliestStart,\n+      long stageDeadline, long duration) {\n+\n+    List\u003cLong\u003e intervalEndTimes \u003d new ArrayList\u003cLong\u003e();\n+    if (!allocateLeft) {\n+      for (long intervalEnd \u003d stageDeadline; intervalEnd \u003e\u003d stageEarliestStart\n+          + duration; intervalEnd -\u003d duration) {\n+        intervalEndTimes.add(intervalEnd);\n+      }\n+    } else {\n+      for (long intervalStart \u003d\n+          stageEarliestStart; intervalStart \u003c\u003d stageDeadline\n+              - duration; intervalStart +\u003d duration) {\n+        intervalEndTimes.add(intervalStart + duration);\n+      }\n+    }\n+\n+    return intervalEndTimes;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private List\u003cLong\u003e computeIntervalEndTimes(long stageEarliestStart,\n      long stageDeadline, long duration) {\n\n    List\u003cLong\u003e intervalEndTimes \u003d new ArrayList\u003cLong\u003e();\n    if (!allocateLeft) {\n      for (long intervalEnd \u003d stageDeadline; intervalEnd \u003e\u003d stageEarliestStart\n          + duration; intervalEnd -\u003d duration) {\n        intervalEndTimes.add(intervalEnd);\n      }\n    } else {\n      for (long intervalStart \u003d\n          stageEarliestStart; intervalStart \u003c\u003d stageDeadline\n              - duration; intervalStart +\u003d duration) {\n        intervalEndTimes.add(intervalStart + duration);\n      }\n    }\n\n    return intervalEndTimes;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/StageAllocatorLowCostAligned.java"
    }
  }
}