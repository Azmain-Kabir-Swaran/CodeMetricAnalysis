{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "cleanup",
  "functionId": "cleanup",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java",
  "functionStartLine": 412,
  "functionEndLine": 456,
  "numCommitsSeen": 2,
  "timeTaken": 411,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,45 @@\n+  private boolean cleanup() {\n+    // Join all launched threads\n+    // needed for when we time out\n+    // and we need to release containers\n+    for (Thread launchThread : launchThreads) {\n+      try {\n+        launchThread.join(10000);\n+      } catch (InterruptedException e) {\n+        LOG.info(\"Exception thrown in thread join: \" + e.getMessage());\n+        e.printStackTrace();\n+      }\n+    }\n+\n+    // When the application completes, it should stop all running containers\n+    LOG.info(\"Application completed. Stopping running containers\");\n+    nmClientAsync.stop();\n+\n+    // When the application completes, it should send a finish application\n+    // signal to the RM\n+    LOG.info(\"Application completed. Signalling finish to RM\");\n+\n+    FinalApplicationStatus appStatus;\n+    String appMessage \u003d null;\n+    boolean success;\n+    if (numFailedDataNodeContainers.get() \u003d\u003d 0\n+        \u0026\u0026 numCompletedDataNodeContainers.get() \u003d\u003d numTotalDataNodes) {\n+      appStatus \u003d FinalApplicationStatus.SUCCEEDED;\n+      success \u003d true;\n+    } else {\n+      appStatus \u003d FinalApplicationStatus.FAILED;\n+      appMessage \u003d \"Diagnostics: total\u003d\" + numTotalDataNodeContainers\n+          + \", completed\u003d\" + numCompletedDataNodeContainers.get()\n+          + \", allocated\u003d\" + numAllocatedDataNodeContainers.get()\n+          + \", failed\u003d\" + numFailedDataNodeContainers.get();\n+      success \u003d false;\n+    }\n+    try {\n+      amRMClient.unregisterApplicationMaster(appStatus, appMessage, null);\n+    } catch (YarnException|IOException ex) {\n+      LOG.error(\"Failed to unregister application\", ex);\n+    }\n+\n+    amRMClient.stop();\n+    return success;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean cleanup() {\n    // Join all launched threads\n    // needed for when we time out\n    // and we need to release containers\n    for (Thread launchThread : launchThreads) {\n      try {\n        launchThread.join(10000);\n      } catch (InterruptedException e) {\n        LOG.info(\"Exception thrown in thread join: \" + e.getMessage());\n        e.printStackTrace();\n      }\n    }\n\n    // When the application completes, it should stop all running containers\n    LOG.info(\"Application completed. Stopping running containers\");\n    nmClientAsync.stop();\n\n    // When the application completes, it should send a finish application\n    // signal to the RM\n    LOG.info(\"Application completed. Signalling finish to RM\");\n\n    FinalApplicationStatus appStatus;\n    String appMessage \u003d null;\n    boolean success;\n    if (numFailedDataNodeContainers.get() \u003d\u003d 0\n        \u0026\u0026 numCompletedDataNodeContainers.get() \u003d\u003d numTotalDataNodes) {\n      appStatus \u003d FinalApplicationStatus.SUCCEEDED;\n      success \u003d true;\n    } else {\n      appStatus \u003d FinalApplicationStatus.FAILED;\n      appMessage \u003d \"Diagnostics: total\u003d\" + numTotalDataNodeContainers\n          + \", completed\u003d\" + numCompletedDataNodeContainers.get()\n          + \", allocated\u003d\" + numAllocatedDataNodeContainers.get()\n          + \", failed\u003d\" + numFailedDataNodeContainers.get();\n      success \u003d false;\n    }\n    try {\n      amRMClient.unregisterApplicationMaster(appStatus, appMessage, null);\n    } catch (YarnException|IOException ex) {\n      LOG.error(\"Failed to unregister application\", ex);\n    }\n\n    amRMClient.stop();\n    return success;\n  }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java"
    }
  }
}