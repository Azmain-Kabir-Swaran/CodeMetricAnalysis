{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LogAggregationService.java",
  "functionName": "stopAggregators",
  "functionId": "stopAggregators",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
  "functionStartLine": 181,
  "functionEndLine": 214,
  "numCommitsSeen": 36,
  "timeTaken": 1673,
  "changeHistory": [
    "088156de43abb07bec590a3fcd1a5af2feb02cd2",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b",
    "726b48f51ab8f48e69a0b6bc2e8a73234aaea07a"
  ],
  "changeHistoryShort": {
    "088156de43abb07bec590a3fcd1a5af2feb02cd2": "Ybodychange",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Ybodychange",
    "726b48f51ab8f48e69a0b6bc2e8a73234aaea07a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "088156de43abb07bec590a3fcd1a5af2feb02cd2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2331. Distinguish shutdown during supervision vs. shutdown for\nrolling upgrade. Contributed by Jason Lowe\n",
      "commitDate": "08/05/15 3:10 PM",
      "commitName": "088156de43abb07bec590a3fcd1a5af2feb02cd2",
      "commitAuthor": "Xuan",
      "commitDateOld": "20/03/15 1:41 PM",
      "commitNameOld": "d81109e588493cef31e68508a3d671203bd23e12",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 49.06,
      "commitsBetweenForRepo": 484,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,34 @@\n   private void stopAggregators() {\n     threadPool.shutdown();\n+    boolean supervised \u003d getConfig().getBoolean(\n+        YarnConfiguration.NM_RECOVERY_SUPERVISED,\n+        YarnConfiguration.DEFAULT_NM_RECOVERY_SUPERVISED);\n     // if recovery on restart is supported then leave outstanding aggregations\n     // to the next restart\n     boolean shouldAbort \u003d context.getNMStateStore().canRecover()\n-        \u0026\u0026 !context.getDecommissioned();\n+        \u0026\u0026 !context.getDecommissioned() \u0026\u0026 supervised;\n     // politely ask to finish\n     for (AppLogAggregator aggregator : appLogAggregators.values()) {\n       if (shouldAbort) {\n         aggregator.abortLogAggregation();\n       } else {\n         aggregator.finishLogAggregation();\n       }\n     }\n     while (!threadPool.isTerminated()) { // wait for all threads to finish\n       for (ApplicationId appId : appLogAggregators.keySet()) {\n         LOG.info(\"Waiting for aggregation to complete for \" + appId);\n       }\n       try {\n         if (!threadPool.awaitTermination(30, TimeUnit.SECONDS)) {\n           threadPool.shutdownNow(); // send interrupt to hurry them along\n         }\n       } catch (InterruptedException e) {\n         LOG.warn(\"Aggregation stop interrupted!\");\n         break;\n       }\n     }\n     for (ApplicationId appId : appLogAggregators.keySet()) {\n       LOG.warn(\"Some logs may not have been aggregated for \" + appId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopAggregators() {\n    threadPool.shutdown();\n    boolean supervised \u003d getConfig().getBoolean(\n        YarnConfiguration.NM_RECOVERY_SUPERVISED,\n        YarnConfiguration.DEFAULT_NM_RECOVERY_SUPERVISED);\n    // if recovery on restart is supported then leave outstanding aggregations\n    // to the next restart\n    boolean shouldAbort \u003d context.getNMStateStore().canRecover()\n        \u0026\u0026 !context.getDecommissioned() \u0026\u0026 supervised;\n    // politely ask to finish\n    for (AppLogAggregator aggregator : appLogAggregators.values()) {\n      if (shouldAbort) {\n        aggregator.abortLogAggregation();\n      } else {\n        aggregator.finishLogAggregation();\n      }\n    }\n    while (!threadPool.isTerminated()) { // wait for all threads to finish\n      for (ApplicationId appId : appLogAggregators.keySet()) {\n        LOG.info(\"Waiting for aggregation to complete for \" + appId);\n      }\n      try {\n        if (!threadPool.awaitTermination(30, TimeUnit.SECONDS)) {\n          threadPool.shutdownNow(); // send interrupt to hurry them along\n        }\n      } catch (InterruptedException e) {\n        LOG.warn(\"Aggregation stop interrupted!\");\n        break;\n      }\n    }\n    for (ApplicationId appId : appLogAggregators.keySet()) {\n      LOG.warn(\"Some logs may not have been aggregated for \" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "commitDateOld": "16/06/13 11:39 PM",
      "commitNameOld": "b9efe6bd4a1277b4067ecde715a7713a85968886",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 421.18,
      "commitsBetweenForRepo": 2782,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,31 @@\n   private void stopAggregators() {\n     threadPool.shutdown();\n+    // if recovery on restart is supported then leave outstanding aggregations\n+    // to the next restart\n+    boolean shouldAbort \u003d context.getNMStateStore().canRecover()\n+        \u0026\u0026 !context.getDecommissioned();\n     // politely ask to finish\n     for (AppLogAggregator aggregator : appLogAggregators.values()) {\n-      aggregator.finishLogAggregation();\n+      if (shouldAbort) {\n+        aggregator.abortLogAggregation();\n+      } else {\n+        aggregator.finishLogAggregation();\n+      }\n     }\n     while (!threadPool.isTerminated()) { // wait for all threads to finish\n       for (ApplicationId appId : appLogAggregators.keySet()) {\n         LOG.info(\"Waiting for aggregation to complete for \" + appId);\n       }\n       try {\n         if (!threadPool.awaitTermination(30, TimeUnit.SECONDS)) {\n           threadPool.shutdownNow(); // send interrupt to hurry them along\n         }\n       } catch (InterruptedException e) {\n         LOG.warn(\"Aggregation stop interrupted!\");\n         break;\n       }\n     }\n     for (ApplicationId appId : appLogAggregators.keySet()) {\n       LOG.warn(\"Some logs may not have been aggregated for \" + appId);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopAggregators() {\n    threadPool.shutdown();\n    // if recovery on restart is supported then leave outstanding aggregations\n    // to the next restart\n    boolean shouldAbort \u003d context.getNMStateStore().canRecover()\n        \u0026\u0026 !context.getDecommissioned();\n    // politely ask to finish\n    for (AppLogAggregator aggregator : appLogAggregators.values()) {\n      if (shouldAbort) {\n        aggregator.abortLogAggregation();\n      } else {\n        aggregator.finishLogAggregation();\n      }\n    }\n    while (!threadPool.isTerminated()) { // wait for all threads to finish\n      for (ApplicationId appId : appLogAggregators.keySet()) {\n        LOG.info(\"Waiting for aggregation to complete for \" + appId);\n      }\n      try {\n        if (!threadPool.awaitTermination(30, TimeUnit.SECONDS)) {\n          threadPool.shutdownNow(); // send interrupt to hurry them along\n        }\n      } catch (InterruptedException e) {\n        LOG.warn(\"Aggregation stop interrupted!\");\n        break;\n      }\n    }\n    for (ApplicationId appId : appLogAggregators.keySet()) {\n      LOG.warn(\"Some logs may not have been aggregated for \" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java",
      "extendedDetails": {}
    },
    "726b48f51ab8f48e69a0b6bc2e8a73234aaea07a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-68. NodeManager will refuse to shutdown indefinitely due to container log aggregation (daryn via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1381317 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/09/12 12:39 PM",
      "commitName": "726b48f51ab8f48e69a0b6bc2e8a73234aaea07a",
      "commitAuthor": "Robert Joseph Evans",
      "diff": "@@ -0,0 +1,23 @@\n+  private void stopAggregators() {\n+    threadPool.shutdown();\n+    // politely ask to finish\n+    for (AppLogAggregator aggregator : appLogAggregators.values()) {\n+      aggregator.finishLogAggregation();\n+    }\n+    while (!threadPool.isTerminated()) { // wait for all threads to finish\n+      for (ApplicationId appId : appLogAggregators.keySet()) {\n+        LOG.info(\"Waiting for aggregation to complete for \" + appId);\n+      }\n+      try {\n+        if (!threadPool.awaitTermination(30, TimeUnit.SECONDS)) {\n+          threadPool.shutdownNow(); // send interrupt to hurry them along\n+        }\n+      } catch (InterruptedException e) {\n+        LOG.warn(\"Aggregation stop interrupted!\");\n+        break;\n+      }\n+    }\n+    for (ApplicationId appId : appLogAggregators.keySet()) {\n+      LOG.warn(\"Some logs may not have been aggregated for \" + appId);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void stopAggregators() {\n    threadPool.shutdown();\n    // politely ask to finish\n    for (AppLogAggregator aggregator : appLogAggregators.values()) {\n      aggregator.finishLogAggregation();\n    }\n    while (!threadPool.isTerminated()) { // wait for all threads to finish\n      for (ApplicationId appId : appLogAggregators.keySet()) {\n        LOG.info(\"Waiting for aggregation to complete for \" + appId);\n      }\n      try {\n        if (!threadPool.awaitTermination(30, TimeUnit.SECONDS)) {\n          threadPool.shutdownNow(); // send interrupt to hurry them along\n        }\n      } catch (InterruptedException e) {\n        LOG.warn(\"Aggregation stop interrupted!\");\n        break;\n      }\n    }\n    for (ApplicationId appId : appLogAggregators.keySet()) {\n      LOG.warn(\"Some logs may not have been aggregated for \" + appId);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/logaggregation/LogAggregationService.java"
    }
  }
}