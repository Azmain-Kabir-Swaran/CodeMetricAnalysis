{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LinuxContainerExecutor.java",
  "functionName": "handleLaunchForLaunchType",
  "functionId": "handleLaunchForLaunchType___ctx-ContainerStartContext__type-ApplicationConstants.ContainerLaunchType",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
  "functionStartLine": 508,
  "functionEndLine": 598,
  "numCommitsSeen": 84,
  "timeTaken": 2458,
  "changeHistory": [
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d",
    "c467f311d0c7155c09052d93fac12045af925583"
  ],
  "changeHistoryShort": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d": "Ybodychange",
    "c467f311d0c7155c09052d93fac12045af925583": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 87.73,
      "commitsBetweenForRepo": 542,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,91 @@\n   private int handleLaunchForLaunchType(ContainerStartContext ctx,\n       ApplicationConstants.ContainerLaunchType type) throws IOException,\n       ConfigurationException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n \n     verifyUsernamePattern(user);\n \n     ContainerId containerId \u003d container.getContainerId();\n \n     resourcesHandler.preExecute(containerId,\n             container.getResource());\n     String resourcesOptions \u003d resourcesHandler.getResourcesOption(containerId);\n     String tcCommandFile \u003d null;\n     List\u003cString\u003e numaArgs \u003d null;\n \n     try {\n       if (resourceHandlerChain !\u003d null) {\n         List\u003cPrivilegedOperation\u003e ops \u003d resourceHandlerChain\n             .preStart(container);\n \n         if (ops !\u003d null) {\n           List\u003cPrivilegedOperation\u003e resourceOps \u003d new ArrayList\u003c\u003e();\n \n           resourceOps.add(new PrivilegedOperation(\n               PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n                   resourcesOptions));\n \n           for (PrivilegedOperation op : ops) {\n             switch (op.getOperationType()) {\n             case ADD_PID_TO_CGROUP:\n               resourceOps.add(op);\n               break;\n             case TC_MODIFY_STATE:\n               tcCommandFile \u003d op.getArguments().get(0);\n               break;\n             case ADD_NUMA_PARAMS:\n               numaArgs \u003d op.getArguments();\n               break;\n             default:\n-              LOG.warn(\"PrivilegedOperation type unsupported in launch: \"\n-                  + op.getOperationType());\n+              LOG.warn(\"PrivilegedOperation type unsupported in launch: {}\",\n+                  op.getOperationType());\n             }\n           }\n \n           if (resourceOps.size() \u003e 1) {\n             //squash resource operations\n             try {\n               PrivilegedOperation operation \u003d PrivilegedOperationExecutor\n                   .squashCGroupOperations(resourceOps);\n               resourcesOptions \u003d operation.getArguments().get(0);\n             } catch (PrivilegedOperationException e) {\n               LOG.error(\"Failed to squash cgroup operations!\", e);\n               throw new ResourceHandlerException(\n                   \"Failed to squash cgroup operations!\");\n             }\n           }\n         }\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"ResourceHandlerChain.preStart() failed!\", e);\n       throw new IOException(\"ResourceHandlerChain.preStart() failed!\", e);\n     }\n \n     try {\n       Path pidFilePath \u003d getPidFilePath(containerId);\n       if (pidFilePath !\u003d null) {\n \n         ContainerRuntimeContext runtimeContext \u003d buildContainerRuntimeContext(\n             ctx, pidFilePath, resourcesOptions, tcCommandFile, numaArgs);\n \n         if (type.equals(ApplicationConstants.ContainerLaunchType.RELAUNCH)) {\n           linuxContainerRuntime.relaunchContainer(runtimeContext);\n         } else {\n           linuxContainerRuntime.launchContainer(runtimeContext);\n         }\n \n       } else {\n         LOG.info(\n             \"Container was marked as inactive. Returning terminated error\");\n         return ContainerExecutor.ExitCode.TERMINATED.getExitCode();\n       }\n     } catch (ContainerExecutionException e) {\n       return handleExitCode(e, container, containerId);\n     } finally {\n       resourcesHandler.postExecute(containerId);\n       postComplete(containerId);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleLaunchForLaunchType(ContainerStartContext ctx,\n      ApplicationConstants.ContainerLaunchType type) throws IOException,\n      ConfigurationException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n\n    verifyUsernamePattern(user);\n\n    ContainerId containerId \u003d container.getContainerId();\n\n    resourcesHandler.preExecute(containerId,\n            container.getResource());\n    String resourcesOptions \u003d resourcesHandler.getResourcesOption(containerId);\n    String tcCommandFile \u003d null;\n    List\u003cString\u003e numaArgs \u003d null;\n\n    try {\n      if (resourceHandlerChain !\u003d null) {\n        List\u003cPrivilegedOperation\u003e ops \u003d resourceHandlerChain\n            .preStart(container);\n\n        if (ops !\u003d null) {\n          List\u003cPrivilegedOperation\u003e resourceOps \u003d new ArrayList\u003c\u003e();\n\n          resourceOps.add(new PrivilegedOperation(\n              PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n                  resourcesOptions));\n\n          for (PrivilegedOperation op : ops) {\n            switch (op.getOperationType()) {\n            case ADD_PID_TO_CGROUP:\n              resourceOps.add(op);\n              break;\n            case TC_MODIFY_STATE:\n              tcCommandFile \u003d op.getArguments().get(0);\n              break;\n            case ADD_NUMA_PARAMS:\n              numaArgs \u003d op.getArguments();\n              break;\n            default:\n              LOG.warn(\"PrivilegedOperation type unsupported in launch: {}\",\n                  op.getOperationType());\n            }\n          }\n\n          if (resourceOps.size() \u003e 1) {\n            //squash resource operations\n            try {\n              PrivilegedOperation operation \u003d PrivilegedOperationExecutor\n                  .squashCGroupOperations(resourceOps);\n              resourcesOptions \u003d operation.getArguments().get(0);\n            } catch (PrivilegedOperationException e) {\n              LOG.error(\"Failed to squash cgroup operations!\", e);\n              throw new ResourceHandlerException(\n                  \"Failed to squash cgroup operations!\");\n            }\n          }\n        }\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"ResourceHandlerChain.preStart() failed!\", e);\n      throw new IOException(\"ResourceHandlerChain.preStart() failed!\", e);\n    }\n\n    try {\n      Path pidFilePath \u003d getPidFilePath(containerId);\n      if (pidFilePath !\u003d null) {\n\n        ContainerRuntimeContext runtimeContext \u003d buildContainerRuntimeContext(\n            ctx, pidFilePath, resourcesOptions, tcCommandFile, numaArgs);\n\n        if (type.equals(ApplicationConstants.ContainerLaunchType.RELAUNCH)) {\n          linuxContainerRuntime.relaunchContainer(runtimeContext);\n        } else {\n          linuxContainerRuntime.launchContainer(runtimeContext);\n        }\n\n      } else {\n        LOG.info(\n            \"Container was marked as inactive. Returning terminated error\");\n        return ContainerExecutor.ExitCode.TERMINATED.getExitCode();\n      }\n    } catch (ContainerExecutionException e) {\n      return handleExitCode(e, container, containerId);\n    } finally {\n      resourcesHandler.postExecute(containerId);\n      postComplete(containerId);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8508.  Release GPU resource for killed container.\n            Contributed by Chandni Singh\n",
      "commitDate": "27/07/18 4:33 PM",
      "commitName": "ed9d60e888d0acfd748fda7f66249f5b79a3ed6d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "20/04/18 10:49 AM",
      "commitNameOld": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 98.24,
      "commitsBetweenForRepo": 1201,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,91 @@\n   private int handleLaunchForLaunchType(ContainerStartContext ctx,\n       ApplicationConstants.ContainerLaunchType type) throws IOException,\n       ConfigurationException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n \n     verifyUsernamePattern(user);\n \n     ContainerId containerId \u003d container.getContainerId();\n \n     resourcesHandler.preExecute(containerId,\n             container.getResource());\n     String resourcesOptions \u003d resourcesHandler.getResourcesOption(containerId);\n     String tcCommandFile \u003d null;\n     List\u003cString\u003e numaArgs \u003d null;\n \n     try {\n       if (resourceHandlerChain !\u003d null) {\n         List\u003cPrivilegedOperation\u003e ops \u003d resourceHandlerChain\n             .preStart(container);\n \n         if (ops !\u003d null) {\n           List\u003cPrivilegedOperation\u003e resourceOps \u003d new ArrayList\u003c\u003e();\n \n           resourceOps.add(new PrivilegedOperation(\n               PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n                   resourcesOptions));\n \n           for (PrivilegedOperation op : ops) {\n             switch (op.getOperationType()) {\n             case ADD_PID_TO_CGROUP:\n               resourceOps.add(op);\n               break;\n             case TC_MODIFY_STATE:\n               tcCommandFile \u003d op.getArguments().get(0);\n               break;\n             case ADD_NUMA_PARAMS:\n               numaArgs \u003d op.getArguments();\n               break;\n             default:\n               LOG.warn(\"PrivilegedOperation type unsupported in launch: \"\n                   + op.getOperationType());\n             }\n           }\n \n           if (resourceOps.size() \u003e 1) {\n             //squash resource operations\n             try {\n               PrivilegedOperation operation \u003d PrivilegedOperationExecutor\n                   .squashCGroupOperations(resourceOps);\n               resourcesOptions \u003d operation.getArguments().get(0);\n             } catch (PrivilegedOperationException e) {\n               LOG.error(\"Failed to squash cgroup operations!\", e);\n               throw new ResourceHandlerException(\n                   \"Failed to squash cgroup operations!\");\n             }\n           }\n         }\n       }\n     } catch (ResourceHandlerException e) {\n       LOG.error(\"ResourceHandlerChain.preStart() failed!\", e);\n       throw new IOException(\"ResourceHandlerChain.preStart() failed!\", e);\n     }\n \n     try {\n       Path pidFilePath \u003d getPidFilePath(containerId);\n       if (pidFilePath !\u003d null) {\n \n         ContainerRuntimeContext runtimeContext \u003d buildContainerRuntimeContext(\n             ctx, pidFilePath, resourcesOptions, tcCommandFile, numaArgs);\n \n         if (type.equals(ApplicationConstants.ContainerLaunchType.RELAUNCH)) {\n           linuxContainerRuntime.relaunchContainer(runtimeContext);\n         } else {\n           linuxContainerRuntime.launchContainer(runtimeContext);\n         }\n \n       } else {\n         LOG.info(\n             \"Container was marked as inactive. Returning terminated error\");\n         return ContainerExecutor.ExitCode.TERMINATED.getExitCode();\n       }\n     } catch (ContainerExecutionException e) {\n       return handleExitCode(e, container, containerId);\n     } finally {\n       resourcesHandler.postExecute(containerId);\n-\n-      try {\n-        if (resourceHandlerChain !\u003d null) {\n-          resourceHandlerChain.postComplete(containerId);\n-        }\n-      } catch (ResourceHandlerException e) {\n-        LOG.warn(\"ResourceHandlerChain.postComplete failed for \" +\n-            \"containerId: \" + containerId + \". Exception: \" + e);\n-      }\n+      postComplete(containerId);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleLaunchForLaunchType(ContainerStartContext ctx,\n      ApplicationConstants.ContainerLaunchType type) throws IOException,\n      ConfigurationException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n\n    verifyUsernamePattern(user);\n\n    ContainerId containerId \u003d container.getContainerId();\n\n    resourcesHandler.preExecute(containerId,\n            container.getResource());\n    String resourcesOptions \u003d resourcesHandler.getResourcesOption(containerId);\n    String tcCommandFile \u003d null;\n    List\u003cString\u003e numaArgs \u003d null;\n\n    try {\n      if (resourceHandlerChain !\u003d null) {\n        List\u003cPrivilegedOperation\u003e ops \u003d resourceHandlerChain\n            .preStart(container);\n\n        if (ops !\u003d null) {\n          List\u003cPrivilegedOperation\u003e resourceOps \u003d new ArrayList\u003c\u003e();\n\n          resourceOps.add(new PrivilegedOperation(\n              PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n                  resourcesOptions));\n\n          for (PrivilegedOperation op : ops) {\n            switch (op.getOperationType()) {\n            case ADD_PID_TO_CGROUP:\n              resourceOps.add(op);\n              break;\n            case TC_MODIFY_STATE:\n              tcCommandFile \u003d op.getArguments().get(0);\n              break;\n            case ADD_NUMA_PARAMS:\n              numaArgs \u003d op.getArguments();\n              break;\n            default:\n              LOG.warn(\"PrivilegedOperation type unsupported in launch: \"\n                  + op.getOperationType());\n            }\n          }\n\n          if (resourceOps.size() \u003e 1) {\n            //squash resource operations\n            try {\n              PrivilegedOperation operation \u003d PrivilegedOperationExecutor\n                  .squashCGroupOperations(resourceOps);\n              resourcesOptions \u003d operation.getArguments().get(0);\n            } catch (PrivilegedOperationException e) {\n              LOG.error(\"Failed to squash cgroup operations!\", e);\n              throw new ResourceHandlerException(\n                  \"Failed to squash cgroup operations!\");\n            }\n          }\n        }\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"ResourceHandlerChain.preStart() failed!\", e);\n      throw new IOException(\"ResourceHandlerChain.preStart() failed!\", e);\n    }\n\n    try {\n      Path pidFilePath \u003d getPidFilePath(containerId);\n      if (pidFilePath !\u003d null) {\n\n        ContainerRuntimeContext runtimeContext \u003d buildContainerRuntimeContext(\n            ctx, pidFilePath, resourcesOptions, tcCommandFile, numaArgs);\n\n        if (type.equals(ApplicationConstants.ContainerLaunchType.RELAUNCH)) {\n          linuxContainerRuntime.relaunchContainer(runtimeContext);\n        } else {\n          linuxContainerRuntime.launchContainer(runtimeContext);\n        }\n\n      } else {\n        LOG.info(\n            \"Container was marked as inactive. Returning terminated error\");\n        return ContainerExecutor.ExitCode.TERMINATED.getExitCode();\n      }\n    } catch (ContainerExecutionException e) {\n      return handleExitCode(e, container, containerId);\n    } finally {\n      resourcesHandler.postExecute(containerId);\n      postComplete(containerId);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java",
      "extendedDetails": {}
    },
    "c467f311d0c7155c09052d93fac12045af925583": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7973. Added ContainerRelaunch feature for Docker containers.\n           Contributed by Shane Kumpf\n",
      "commitDate": "10/04/18 4:25 PM",
      "commitName": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,99 @@\n+  private int handleLaunchForLaunchType(ContainerStartContext ctx,\n+      ApplicationConstants.ContainerLaunchType type) throws IOException,\n+      ConfigurationException {\n+    Container container \u003d ctx.getContainer();\n+    String user \u003d ctx.getUser();\n+\n+    verifyUsernamePattern(user);\n+\n+    ContainerId containerId \u003d container.getContainerId();\n+\n+    resourcesHandler.preExecute(containerId,\n+            container.getResource());\n+    String resourcesOptions \u003d resourcesHandler.getResourcesOption(containerId);\n+    String tcCommandFile \u003d null;\n+    List\u003cString\u003e numaArgs \u003d null;\n+\n+    try {\n+      if (resourceHandlerChain !\u003d null) {\n+        List\u003cPrivilegedOperation\u003e ops \u003d resourceHandlerChain\n+            .preStart(container);\n+\n+        if (ops !\u003d null) {\n+          List\u003cPrivilegedOperation\u003e resourceOps \u003d new ArrayList\u003c\u003e();\n+\n+          resourceOps.add(new PrivilegedOperation(\n+              PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n+                  resourcesOptions));\n+\n+          for (PrivilegedOperation op : ops) {\n+            switch (op.getOperationType()) {\n+            case ADD_PID_TO_CGROUP:\n+              resourceOps.add(op);\n+              break;\n+            case TC_MODIFY_STATE:\n+              tcCommandFile \u003d op.getArguments().get(0);\n+              break;\n+            case ADD_NUMA_PARAMS:\n+              numaArgs \u003d op.getArguments();\n+              break;\n+            default:\n+              LOG.warn(\"PrivilegedOperation type unsupported in launch: \"\n+                  + op.getOperationType());\n+            }\n+          }\n+\n+          if (resourceOps.size() \u003e 1) {\n+            //squash resource operations\n+            try {\n+              PrivilegedOperation operation \u003d PrivilegedOperationExecutor\n+                  .squashCGroupOperations(resourceOps);\n+              resourcesOptions \u003d operation.getArguments().get(0);\n+            } catch (PrivilegedOperationException e) {\n+              LOG.error(\"Failed to squash cgroup operations!\", e);\n+              throw new ResourceHandlerException(\n+                  \"Failed to squash cgroup operations!\");\n+            }\n+          }\n+        }\n+      }\n+    } catch (ResourceHandlerException e) {\n+      LOG.error(\"ResourceHandlerChain.preStart() failed!\", e);\n+      throw new IOException(\"ResourceHandlerChain.preStart() failed!\", e);\n+    }\n+\n+    try {\n+      Path pidFilePath \u003d getPidFilePath(containerId);\n+      if (pidFilePath !\u003d null) {\n+\n+        ContainerRuntimeContext runtimeContext \u003d buildContainerRuntimeContext(\n+            ctx, pidFilePath, resourcesOptions, tcCommandFile, numaArgs);\n+\n+        if (type.equals(ApplicationConstants.ContainerLaunchType.RELAUNCH)) {\n+          linuxContainerRuntime.relaunchContainer(runtimeContext);\n+        } else {\n+          linuxContainerRuntime.launchContainer(runtimeContext);\n+        }\n+\n+      } else {\n+        LOG.info(\n+            \"Container was marked as inactive. Returning terminated error\");\n+        return ContainerExecutor.ExitCode.TERMINATED.getExitCode();\n+      }\n+    } catch (ContainerExecutionException e) {\n+      return handleExitCode(e, container, containerId);\n+    } finally {\n+      resourcesHandler.postExecute(containerId);\n+\n+      try {\n+        if (resourceHandlerChain !\u003d null) {\n+          resourceHandlerChain.postComplete(containerId);\n+        }\n+      } catch (ResourceHandlerException e) {\n+        LOG.warn(\"ResourceHandlerChain.postComplete failed for \" +\n+            \"containerId: \" + containerId + \". Exception: \" + e);\n+      }\n+    }\n+\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int handleLaunchForLaunchType(ContainerStartContext ctx,\n      ApplicationConstants.ContainerLaunchType type) throws IOException,\n      ConfigurationException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n\n    verifyUsernamePattern(user);\n\n    ContainerId containerId \u003d container.getContainerId();\n\n    resourcesHandler.preExecute(containerId,\n            container.getResource());\n    String resourcesOptions \u003d resourcesHandler.getResourcesOption(containerId);\n    String tcCommandFile \u003d null;\n    List\u003cString\u003e numaArgs \u003d null;\n\n    try {\n      if (resourceHandlerChain !\u003d null) {\n        List\u003cPrivilegedOperation\u003e ops \u003d resourceHandlerChain\n            .preStart(container);\n\n        if (ops !\u003d null) {\n          List\u003cPrivilegedOperation\u003e resourceOps \u003d new ArrayList\u003c\u003e();\n\n          resourceOps.add(new PrivilegedOperation(\n              PrivilegedOperation.OperationType.ADD_PID_TO_CGROUP,\n                  resourcesOptions));\n\n          for (PrivilegedOperation op : ops) {\n            switch (op.getOperationType()) {\n            case ADD_PID_TO_CGROUP:\n              resourceOps.add(op);\n              break;\n            case TC_MODIFY_STATE:\n              tcCommandFile \u003d op.getArguments().get(0);\n              break;\n            case ADD_NUMA_PARAMS:\n              numaArgs \u003d op.getArguments();\n              break;\n            default:\n              LOG.warn(\"PrivilegedOperation type unsupported in launch: \"\n                  + op.getOperationType());\n            }\n          }\n\n          if (resourceOps.size() \u003e 1) {\n            //squash resource operations\n            try {\n              PrivilegedOperation operation \u003d PrivilegedOperationExecutor\n                  .squashCGroupOperations(resourceOps);\n              resourcesOptions \u003d operation.getArguments().get(0);\n            } catch (PrivilegedOperationException e) {\n              LOG.error(\"Failed to squash cgroup operations!\", e);\n              throw new ResourceHandlerException(\n                  \"Failed to squash cgroup operations!\");\n            }\n          }\n        }\n      }\n    } catch (ResourceHandlerException e) {\n      LOG.error(\"ResourceHandlerChain.preStart() failed!\", e);\n      throw new IOException(\"ResourceHandlerChain.preStart() failed!\", e);\n    }\n\n    try {\n      Path pidFilePath \u003d getPidFilePath(containerId);\n      if (pidFilePath !\u003d null) {\n\n        ContainerRuntimeContext runtimeContext \u003d buildContainerRuntimeContext(\n            ctx, pidFilePath, resourcesOptions, tcCommandFile, numaArgs);\n\n        if (type.equals(ApplicationConstants.ContainerLaunchType.RELAUNCH)) {\n          linuxContainerRuntime.relaunchContainer(runtimeContext);\n        } else {\n          linuxContainerRuntime.launchContainer(runtimeContext);\n        }\n\n      } else {\n        LOG.info(\n            \"Container was marked as inactive. Returning terminated error\");\n        return ContainerExecutor.ExitCode.TERMINATED.getExitCode();\n      }\n    } catch (ContainerExecutionException e) {\n      return handleExitCode(e, container, containerId);\n    } finally {\n      resourcesHandler.postExecute(containerId);\n\n      try {\n        if (resourceHandlerChain !\u003d null) {\n          resourceHandlerChain.postComplete(containerId);\n        }\n      } catch (ResourceHandlerException e) {\n        LOG.warn(\"ResourceHandlerChain.postComplete failed for \" +\n            \"containerId: \" + containerId + \". Exception: \" + e);\n      }\n    }\n\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/LinuxContainerExecutor.java"
    }
  }
}