{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpportunisticContainerAllocatorAMService.java",
  "functionName": "registerApplicationMaster",
  "functionId": "registerApplicationMaster___applicationAttemptId-ApplicationAttemptId__request-RegisterApplicationMasterRequest__response-RegisterApplicationMasterResponse",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
  "functionStartLine": 129,
  "functionEndLine": 159,
  "numCommitsSeen": 55,
  "timeTaken": 6844,
  "changeHistory": [
    "39240b61a163b127eec385decd30ffd96e694c28",
    "077fcf6a96e420e7f36350931722b8603d010cf1",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
    "10be45986cdf86a89055065b752959bd6369d54f",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b"
  ],
  "changeHistoryShort": {
    "39240b61a163b127eec385decd30ffd96e694c28": "Yexceptionschange",
    "077fcf6a96e420e7f36350931722b8603d010cf1": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": "Ybodychange",
    "10be45986cdf86a89055065b752959bd6369d54f": "Ybodychange",
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": "Yfilerename",
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": "Yfilerename",
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39240b61a163b127eec385decd30ffd96e694c28": {
      "type": "Yexceptionschange",
      "commitMessage": "YARN-7043. Cleanup ResourceProfileManager. (wangda)\n\nChange-Id: I463356f37bf1f6a3f1fc3c594c79916e8c0ab913\n",
      "commitDate": "12/09/17 9:19 AM",
      "commitName": "39240b61a163b127eec385decd30ffd96e694c28",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/08/17 9:56 AM",
      "commitNameOld": "f49843a9888ad8fe5c1bb4c16bfb5217d693009d",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 19.97,
      "commitsBetweenForRepo": 218,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n     public void registerApplicationMaster(\n         ApplicationAttemptId applicationAttemptId,\n         RegisterApplicationMasterRequest request,\n-        RegisterApplicationMasterResponse response) throws IOException {\n+        RegisterApplicationMasterResponse response)\n+        throws IOException, YarnException {\n       SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n           getScheduler()).getApplicationAttempt(applicationAttemptId);\n       if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n         OpportunisticContainerContext opCtx \u003d\n             new OpportunisticContainerContext();\n         opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n             .ContainerIdGenerator() {\n           @Override\n           public long generateContainerId() {\n             return appAttempt.getAppSchedulingInfo().getNewContainerId();\n           }\n         });\n         int tokenExpiryInterval \u003d getConfig()\n             .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                 YarnConfiguration.\n                     DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n         opCtx.updateAllocationParams(\n             getScheduler().getMinimumResourceCapability(),\n             getScheduler().getMaximumResourceCapability(),\n             getScheduler().getMinimumResourceCapability(),\n             tokenExpiryInterval);\n         appAttempt.setOpportunisticContainerContext(opCtx);\n       }\n       nextProcessor.registerApplicationMaster(\n           applicationAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void registerApplicationMaster(\n        ApplicationAttemptId applicationAttemptId,\n        RegisterApplicationMasterRequest request,\n        RegisterApplicationMasterResponse response)\n        throws IOException, YarnException {\n      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n          getScheduler()).getApplicationAttempt(applicationAttemptId);\n      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n        OpportunisticContainerContext opCtx \u003d\n            new OpportunisticContainerContext();\n        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n            .ContainerIdGenerator() {\n          @Override\n          public long generateContainerId() {\n            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n          }\n        });\n        int tokenExpiryInterval \u003d getConfig()\n            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                YarnConfiguration.\n                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n        opCtx.updateAllocationParams(\n            getScheduler().getMinimumResourceCapability(),\n            getScheduler().getMaximumResourceCapability(),\n            getScheduler().getMinimumResourceCapability(),\n            tokenExpiryInterval);\n        appAttempt.setOpportunisticContainerContext(opCtx);\n      }\n      nextProcessor.registerApplicationMaster(\n          applicationAttemptId, request, response);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {
        "oldValue": "[IOException]",
        "newValue": "[IOException, YarnException]"
      }
    },
    "077fcf6a96e420e7f36350931722b8603d010cf1": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
      "commitDate": "19/07/17 12:26 PM",
      "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n-    public RegisterApplicationMasterResponse registerApplicationMaster(\n+    public void registerApplicationMaster(\n         ApplicationAttemptId applicationAttemptId,\n-        RegisterApplicationMasterRequest request) throws IOException {\n+        RegisterApplicationMasterRequest request,\n+        RegisterApplicationMasterResponse response) throws IOException {\n       SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n           getScheduler()).getApplicationAttempt(applicationAttemptId);\n       if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n         OpportunisticContainerContext opCtx \u003d\n             new OpportunisticContainerContext();\n         opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n             .ContainerIdGenerator() {\n           @Override\n           public long generateContainerId() {\n             return appAttempt.getAppSchedulingInfo().getNewContainerId();\n           }\n         });\n         int tokenExpiryInterval \u003d getConfig()\n             .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                 YarnConfiguration.\n                     DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n         opCtx.updateAllocationParams(\n             getScheduler().getMinimumResourceCapability(),\n             getScheduler().getMaximumResourceCapability(),\n             getScheduler().getMinimumResourceCapability(),\n             tokenExpiryInterval);\n         appAttempt.setOpportunisticContainerContext(opCtx);\n       }\n-      return super.registerApplicationMaster(applicationAttemptId, request);\n+      nextProcessor.registerApplicationMaster(\n+          applicationAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void registerApplicationMaster(\n        ApplicationAttemptId applicationAttemptId,\n        RegisterApplicationMasterRequest request,\n        RegisterApplicationMasterResponse response) throws IOException {\n      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n          getScheduler()).getApplicationAttempt(applicationAttemptId);\n      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n        OpportunisticContainerContext opCtx \u003d\n            new OpportunisticContainerContext();\n        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n            .ContainerIdGenerator() {\n          @Override\n          public long generateContainerId() {\n            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n          }\n        });\n        int tokenExpiryInterval \u003d getConfig()\n            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                YarnConfiguration.\n                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n        opCtx.updateAllocationParams(\n            getScheduler().getMinimumResourceCapability(),\n            getScheduler().getMaximumResourceCapability(),\n            getScheduler().getMinimumResourceCapability(),\n            tokenExpiryInterval);\n        appAttempt.setOpportunisticContainerContext(opCtx);\n      }\n      nextProcessor.registerApplicationMaster(\n          applicationAttemptId, request, response);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[applicationAttemptId-ApplicationAttemptId, request-RegisterApplicationMasterRequest]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, request-RegisterApplicationMasterRequest, response-RegisterApplicationMasterResponse]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n-    public RegisterApplicationMasterResponse registerApplicationMaster(\n+    public void registerApplicationMaster(\n         ApplicationAttemptId applicationAttemptId,\n-        RegisterApplicationMasterRequest request) throws IOException {\n+        RegisterApplicationMasterRequest request,\n+        RegisterApplicationMasterResponse response) throws IOException {\n       SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n           getScheduler()).getApplicationAttempt(applicationAttemptId);\n       if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n         OpportunisticContainerContext opCtx \u003d\n             new OpportunisticContainerContext();\n         opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n             .ContainerIdGenerator() {\n           @Override\n           public long generateContainerId() {\n             return appAttempt.getAppSchedulingInfo().getNewContainerId();\n           }\n         });\n         int tokenExpiryInterval \u003d getConfig()\n             .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                 YarnConfiguration.\n                     DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n         opCtx.updateAllocationParams(\n             getScheduler().getMinimumResourceCapability(),\n             getScheduler().getMaximumResourceCapability(),\n             getScheduler().getMinimumResourceCapability(),\n             tokenExpiryInterval);\n         appAttempt.setOpportunisticContainerContext(opCtx);\n       }\n-      return super.registerApplicationMaster(applicationAttemptId, request);\n+      nextProcessor.registerApplicationMaster(\n+          applicationAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void registerApplicationMaster(\n        ApplicationAttemptId applicationAttemptId,\n        RegisterApplicationMasterRequest request,\n        RegisterApplicationMasterResponse response) throws IOException {\n      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n          getScheduler()).getApplicationAttempt(applicationAttemptId);\n      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n        OpportunisticContainerContext opCtx \u003d\n            new OpportunisticContainerContext();\n        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n            .ContainerIdGenerator() {\n          @Override\n          public long generateContainerId() {\n            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n          }\n        });\n        int tokenExpiryInterval \u003d getConfig()\n            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                YarnConfiguration.\n                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n        opCtx.updateAllocationParams(\n            getScheduler().getMinimumResourceCapability(),\n            getScheduler().getMaximumResourceCapability(),\n            getScheduler().getMinimumResourceCapability(),\n            tokenExpiryInterval);\n        appAttempt.setOpportunisticContainerContext(opCtx);\n      }\n      nextProcessor.registerApplicationMaster(\n          applicationAttemptId, request, response);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "RegisterApplicationMasterResponse",
            "newValue": "void"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6777. Support for ApplicationMasterService processing chain of interceptors. (asuresh)\n",
          "commitDate": "19/07/17 12:26 PM",
          "commitName": "077fcf6a96e420e7f36350931722b8603d010cf1",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "10/07/17 2:34 PM",
          "commitNameOld": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthorOld": "Arun Suresh",
          "daysBetweenCommits": 8.91,
          "commitsBetweenForRepo": 53,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n-    public RegisterApplicationMasterResponse registerApplicationMaster(\n+    public void registerApplicationMaster(\n         ApplicationAttemptId applicationAttemptId,\n-        RegisterApplicationMasterRequest request) throws IOException {\n+        RegisterApplicationMasterRequest request,\n+        RegisterApplicationMasterResponse response) throws IOException {\n       SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n           getScheduler()).getApplicationAttempt(applicationAttemptId);\n       if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n         OpportunisticContainerContext opCtx \u003d\n             new OpportunisticContainerContext();\n         opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n             .ContainerIdGenerator() {\n           @Override\n           public long generateContainerId() {\n             return appAttempt.getAppSchedulingInfo().getNewContainerId();\n           }\n         });\n         int tokenExpiryInterval \u003d getConfig()\n             .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                 YarnConfiguration.\n                     DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n         opCtx.updateAllocationParams(\n             getScheduler().getMinimumResourceCapability(),\n             getScheduler().getMaximumResourceCapability(),\n             getScheduler().getMinimumResourceCapability(),\n             tokenExpiryInterval);\n         appAttempt.setOpportunisticContainerContext(opCtx);\n       }\n-      return super.registerApplicationMaster(applicationAttemptId, request);\n+      nextProcessor.registerApplicationMaster(\n+          applicationAttemptId, request, response);\n     }\n\\ No newline at end of file\n",
          "actualSource": "    public void registerApplicationMaster(\n        ApplicationAttemptId applicationAttemptId,\n        RegisterApplicationMasterRequest request,\n        RegisterApplicationMasterResponse response) throws IOException {\n      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n          getScheduler()).getApplicationAttempt(applicationAttemptId);\n      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n        OpportunisticContainerContext opCtx \u003d\n            new OpportunisticContainerContext();\n        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n            .ContainerIdGenerator() {\n          @Override\n          public long generateContainerId() {\n            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n          }\n        });\n        int tokenExpiryInterval \u003d getConfig()\n            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                YarnConfiguration.\n                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n        opCtx.updateAllocationParams(\n            getScheduler().getMinimumResourceCapability(),\n            getScheduler().getMaximumResourceCapability(),\n            getScheduler().getMinimumResourceCapability(),\n            tokenExpiryInterval);\n        appAttempt.setOpportunisticContainerContext(opCtx);\n      }\n      nextProcessor.registerApplicationMaster(\n          applicationAttemptId, request, response);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
      "commitDate": "10/07/17 2:34 PM",
      "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 186.13,
          "commitsBetweenForRepo": 980,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster\n-      (RegisterApplicationMasterRequest request) throws YarnException,\n-      IOException {\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n-    if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n-      OpportunisticContainerContext opCtx \u003d new OpportunisticContainerContext();\n-      opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n-          .ContainerIdGenerator() {\n-        @Override\n-        public long generateContainerId() {\n-          return appAttempt.getAppSchedulingInfo().getNewContainerId();\n-        }\n-      });\n-      int tokenExpiryInterval \u003d getConfig()\n-          .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n-              YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n-      opCtx.updateAllocationParams(\n-          rmContext.getScheduler().getMinimumResourceCapability(),\n-          rmContext.getScheduler().getMaximumResourceCapability(),\n-          rmContext.getScheduler().getMinimumResourceCapability(),\n-          tokenExpiryInterval);\n-      appAttempt.setOpportunisticContainerContext(opCtx);\n-    }\n-    return super.registerApplicationMaster(request);\n-  }\n\\ No newline at end of file\n+    public RegisterApplicationMasterResponse registerApplicationMaster(\n+        ApplicationAttemptId applicationAttemptId,\n+        RegisterApplicationMasterRequest request) throws IOException {\n+      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n+          getScheduler()).getApplicationAttempt(applicationAttemptId);\n+      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n+        OpportunisticContainerContext opCtx \u003d\n+            new OpportunisticContainerContext();\n+        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n+            .ContainerIdGenerator() {\n+          @Override\n+          public long generateContainerId() {\n+            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n+          }\n+        });\n+        int tokenExpiryInterval \u003d getConfig()\n+            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n+                YarnConfiguration.\n+                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n+        opCtx.updateAllocationParams(\n+            getScheduler().getMinimumResourceCapability(),\n+            getScheduler().getMaximumResourceCapability(),\n+            getScheduler().getMinimumResourceCapability(),\n+            tokenExpiryInterval);\n+        appAttempt.setOpportunisticContainerContext(opCtx);\n+      }\n+      return super.registerApplicationMaster(applicationAttemptId, request);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public RegisterApplicationMasterResponse registerApplicationMaster(\n        ApplicationAttemptId applicationAttemptId,\n        RegisterApplicationMasterRequest request) throws IOException {\n      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n          getScheduler()).getApplicationAttempt(applicationAttemptId);\n      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n        OpportunisticContainerContext opCtx \u003d\n            new OpportunisticContainerContext();\n        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n            .ContainerIdGenerator() {\n          @Override\n          public long generateContainerId() {\n            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n          }\n        });\n        int tokenExpiryInterval \u003d getConfig()\n            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                YarnConfiguration.\n                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n        opCtx.updateAllocationParams(\n            getScheduler().getMinimumResourceCapability(),\n            getScheduler().getMaximumResourceCapability(),\n            getScheduler().getMinimumResourceCapability(),\n            tokenExpiryInterval);\n        appAttempt.setOpportunisticContainerContext(opCtx);\n      }\n      return super.registerApplicationMaster(applicationAttemptId, request);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[request-RegisterApplicationMasterRequest]",
            "newValue": "[applicationAttemptId-ApplicationAttemptId, request-RegisterApplicationMasterRequest]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 186.13,
          "commitsBetweenForRepo": 980,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster\n-      (RegisterApplicationMasterRequest request) throws YarnException,\n-      IOException {\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n-    if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n-      OpportunisticContainerContext opCtx \u003d new OpportunisticContainerContext();\n-      opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n-          .ContainerIdGenerator() {\n-        @Override\n-        public long generateContainerId() {\n-          return appAttempt.getAppSchedulingInfo().getNewContainerId();\n-        }\n-      });\n-      int tokenExpiryInterval \u003d getConfig()\n-          .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n-              YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n-      opCtx.updateAllocationParams(\n-          rmContext.getScheduler().getMinimumResourceCapability(),\n-          rmContext.getScheduler().getMaximumResourceCapability(),\n-          rmContext.getScheduler().getMinimumResourceCapability(),\n-          tokenExpiryInterval);\n-      appAttempt.setOpportunisticContainerContext(opCtx);\n-    }\n-    return super.registerApplicationMaster(request);\n-  }\n\\ No newline at end of file\n+    public RegisterApplicationMasterResponse registerApplicationMaster(\n+        ApplicationAttemptId applicationAttemptId,\n+        RegisterApplicationMasterRequest request) throws IOException {\n+      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n+          getScheduler()).getApplicationAttempt(applicationAttemptId);\n+      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n+        OpportunisticContainerContext opCtx \u003d\n+            new OpportunisticContainerContext();\n+        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n+            .ContainerIdGenerator() {\n+          @Override\n+          public long generateContainerId() {\n+            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n+          }\n+        });\n+        int tokenExpiryInterval \u003d getConfig()\n+            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n+                YarnConfiguration.\n+                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n+        opCtx.updateAllocationParams(\n+            getScheduler().getMinimumResourceCapability(),\n+            getScheduler().getMaximumResourceCapability(),\n+            getScheduler().getMinimumResourceCapability(),\n+            tokenExpiryInterval);\n+        appAttempt.setOpportunisticContainerContext(opCtx);\n+      }\n+      return super.registerApplicationMaster(applicationAttemptId, request);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public RegisterApplicationMasterResponse registerApplicationMaster(\n        ApplicationAttemptId applicationAttemptId,\n        RegisterApplicationMasterRequest request) throws IOException {\n      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n          getScheduler()).getApplicationAttempt(applicationAttemptId);\n      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n        OpportunisticContainerContext opCtx \u003d\n            new OpportunisticContainerContext();\n        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n            .ContainerIdGenerator() {\n          @Override\n          public long generateContainerId() {\n            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n          }\n        });\n        int tokenExpiryInterval \u003d getConfig()\n            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                YarnConfiguration.\n                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n        opCtx.updateAllocationParams(\n            getScheduler().getMinimumResourceCapability(),\n            getScheduler().getMaximumResourceCapability(),\n            getScheduler().getMinimumResourceCapability(),\n            tokenExpiryInterval);\n        appAttempt.setOpportunisticContainerContext(opCtx);\n      }\n      return super.registerApplicationMaster(applicationAttemptId, request);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {
            "oldValue": "[YarnException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6776. Refactor ApplicaitonMasterService to move actual processing logic to a separate class. (asuresh)\n",
          "commitDate": "10/07/17 2:34 PM",
          "commitName": "5496a34c0cb2b1a83cfa6b0aba5a77b05ff2d8f0",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "05/01/17 10:31 AM",
          "commitNameOld": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 186.13,
          "commitsBetweenForRepo": 980,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,27 +1,28 @@\n-  public RegisterApplicationMasterResponse registerApplicationMaster\n-      (RegisterApplicationMasterRequest request) throws YarnException,\n-      IOException {\n-    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n-    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n-        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n-    if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n-      OpportunisticContainerContext opCtx \u003d new OpportunisticContainerContext();\n-      opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n-          .ContainerIdGenerator() {\n-        @Override\n-        public long generateContainerId() {\n-          return appAttempt.getAppSchedulingInfo().getNewContainerId();\n-        }\n-      });\n-      int tokenExpiryInterval \u003d getConfig()\n-          .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n-              YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n-      opCtx.updateAllocationParams(\n-          rmContext.getScheduler().getMinimumResourceCapability(),\n-          rmContext.getScheduler().getMaximumResourceCapability(),\n-          rmContext.getScheduler().getMinimumResourceCapability(),\n-          tokenExpiryInterval);\n-      appAttempt.setOpportunisticContainerContext(opCtx);\n-    }\n-    return super.registerApplicationMaster(request);\n-  }\n\\ No newline at end of file\n+    public RegisterApplicationMasterResponse registerApplicationMaster(\n+        ApplicationAttemptId applicationAttemptId,\n+        RegisterApplicationMasterRequest request) throws IOException {\n+      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n+          getScheduler()).getApplicationAttempt(applicationAttemptId);\n+      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n+        OpportunisticContainerContext opCtx \u003d\n+            new OpportunisticContainerContext();\n+        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n+            .ContainerIdGenerator() {\n+          @Override\n+          public long generateContainerId() {\n+            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n+          }\n+        });\n+        int tokenExpiryInterval \u003d getConfig()\n+            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n+                YarnConfiguration.\n+                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n+        opCtx.updateAllocationParams(\n+            getScheduler().getMinimumResourceCapability(),\n+            getScheduler().getMaximumResourceCapability(),\n+            getScheduler().getMinimumResourceCapability(),\n+            tokenExpiryInterval);\n+        appAttempt.setOpportunisticContainerContext(opCtx);\n+      }\n+      return super.registerApplicationMaster(applicationAttemptId, request);\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public RegisterApplicationMasterResponse registerApplicationMaster(\n        ApplicationAttemptId applicationAttemptId,\n        RegisterApplicationMasterRequest request) throws IOException {\n      SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n          getScheduler()).getApplicationAttempt(applicationAttemptId);\n      if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n        OpportunisticContainerContext opCtx \u003d\n            new OpportunisticContainerContext();\n        opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n            .ContainerIdGenerator() {\n          @Override\n          public long generateContainerId() {\n            return appAttempt.getAppSchedulingInfo().getNewContainerId();\n          }\n        });\n        int tokenExpiryInterval \u003d getConfig()\n            .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n                YarnConfiguration.\n                    DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n        opCtx.updateAllocationParams(\n            getScheduler().getMinimumResourceCapability(),\n            getScheduler().getMaximumResourceCapability(),\n            getScheduler().getMinimumResourceCapability(),\n            tokenExpiryInterval);\n        appAttempt.setOpportunisticContainerContext(opCtx);\n      }\n      return super.registerApplicationMaster(applicationAttemptId, request);\n    }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
          "extendedDetails": {}
        }
      ]
    },
    "b0aace21b1ef3436ba9d516186208fee9a9ceef2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5982. Simplify opportunistic container parameters and metrics. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "09/12/16 4:41 PM",
      "commitName": "b0aace21b1ef3436ba9d516186208fee9a9ceef2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "23/11/16 9:53 AM",
      "commitNameOld": "005850b28feb2f7bb8c2844d11e3f9d21b45d754",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 16.28,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,27 @@\n   public RegisterApplicationMasterResponse registerApplicationMaster\n       (RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n     final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n     SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n         rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n     if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n       OpportunisticContainerContext opCtx \u003d new OpportunisticContainerContext();\n       opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n           .ContainerIdGenerator() {\n         @Override\n         public long generateContainerId() {\n           return appAttempt.getAppSchedulingInfo().getNewContainerId();\n         }\n       });\n       int tokenExpiryInterval \u003d getConfig()\n-          .getInt(YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n-              YarnConfiguration.\n-                  OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT);\n-      opCtx.updateAllocationParams(createMinContainerResource(),\n-          createMaxContainerResource(), createIncrContainerResource(),\n+          .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n+              YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n+      opCtx.updateAllocationParams(\n+          rmContext.getScheduler().getMinimumResourceCapability(),\n+          rmContext.getScheduler().getMaximumResourceCapability(),\n+          rmContext.getScheduler().getMinimumResourceCapability(),\n           tokenExpiryInterval);\n       appAttempt.setOpportunisticContainerContext(opCtx);\n     }\n     return super.registerApplicationMaster(request);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster\n      (RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n    if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n      OpportunisticContainerContext opCtx \u003d new OpportunisticContainerContext();\n      opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n          .ContainerIdGenerator() {\n        @Override\n        public long generateContainerId() {\n          return appAttempt.getAppSchedulingInfo().getNewContainerId();\n        }\n      });\n      int tokenExpiryInterval \u003d getConfig()\n          .getInt(YarnConfiguration.RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS,\n              YarnConfiguration.DEFAULT_RM_CONTAINER_ALLOC_EXPIRY_INTERVAL_MS);\n      opCtx.updateAllocationParams(\n          rmContext.getScheduler().getMinimumResourceCapability(),\n          rmContext.getScheduler().getMaximumResourceCapability(),\n          rmContext.getScheduler().getMinimumResourceCapability(),\n          tokenExpiryInterval);\n      appAttempt.setOpportunisticContainerContext(opCtx);\n    }\n    return super.registerApplicationMaster(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "10be45986cdf86a89055065b752959bd6369d54f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5486. Update OpportunisticContainerAllocatorAMService::allocate method to handle OPPORTUNISTIC container requests. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "29/09/16 3:11 PM",
      "commitName": "10be45986cdf86a89055065b752959bd6369d54f",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "09/08/16 12:42 AM",
      "commitNameOld": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 51.6,
      "commitsBetweenForRepo": 319,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,26 @@\n   public RegisterApplicationMasterResponse registerApplicationMaster\n       (RegisterApplicationMasterRequest request) throws YarnException,\n       IOException {\n+    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n+    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n+        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n+    if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n+      OpportunisticContainerContext opCtx \u003d new OpportunisticContainerContext();\n+      opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n+          .ContainerIdGenerator() {\n+        @Override\n+        public long generateContainerId() {\n+          return appAttempt.getAppSchedulingInfo().getNewContainerId();\n+        }\n+      });\n+      int tokenExpiryInterval \u003d getConfig()\n+          .getInt(YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n+              YarnConfiguration.\n+                  OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT);\n+      opCtx.updateAllocationParams(createMinContainerResource(),\n+          createMaxContainerResource(), createIncrContainerResource(),\n+          tokenExpiryInterval);\n+      appAttempt.setOpportunisticContainerContext(opCtx);\n+    }\n     return super.registerApplicationMaster(request);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster\n      (RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    final ApplicationAttemptId appAttemptId \u003d getAppAttemptId();\n    SchedulerApplicationAttempt appAttempt \u003d ((AbstractYarnScheduler)\n        rmContext.getScheduler()).getApplicationAttempt(appAttemptId);\n    if (appAttempt.getOpportunisticContainerContext() \u003d\u003d null) {\n      OpportunisticContainerContext opCtx \u003d new OpportunisticContainerContext();\n      opCtx.setContainerIdGenerator(new OpportunisticContainerAllocator\n          .ContainerIdGenerator() {\n        @Override\n        public long generateContainerId() {\n          return appAttempt.getAppSchedulingInfo().getNewContainerId();\n        }\n      });\n      int tokenExpiryInterval \u003d getConfig()\n          .getInt(YarnConfiguration.OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS,\n              YarnConfiguration.\n                  OPPORTUNISTIC_CONTAINERS_TOKEN_EXPIRY_MS_DEFAULT);\n      opCtx.updateAllocationParams(createMinContainerResource(),\n          createMaxContainerResource(), createIncrContainerResource(),\n          tokenExpiryInterval);\n      appAttempt.setOpportunisticContainerContext(opCtx);\n    }\n    return super.registerApplicationMaster(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {}
    },
    "82c9e061017c32e633e0b0cbb7978749a6df4fb2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5457. Refactor DistributedScheduling framework to pull out common functionality. (asuresh)\n",
      "commitDate": "09/08/16 12:42 AM",
      "commitName": "82c9e061017c32e633e0b0cbb7978749a6df4fb2",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "08/08/16 5:54 PM",
      "commitNameOld": "8f9b61852bf6600b65e49875fec172bac9e0a85d",
      "commitAuthorOld": "Masatake Iwasaki",
      "daysBetweenCommits": 0.28,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster\n      (RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    return super.registerApplicationMaster(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/OpportunisticContainerAllocatorAMService.java"
      }
    },
    "e5766b1dbee02ae0ef89618e172f3fb227af19e8": {
      "type": "Yfilerename",
      "commitMessage": "YARN-5113. Refactoring and other clean-up for distributed scheduling. (Konstantinos Karanasos via asuresh)\n",
      "commitDate": "31/07/16 11:48 AM",
      "commitName": "e5766b1dbee02ae0ef89618e172f3fb227af19e8",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "30/07/16 7:29 PM",
      "commitNameOld": "3d191cc15244e1e29f837b34a9bd1d029e003064",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster\n      (RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    return super.registerApplicationMaster(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingAMService.java"
      }
    },
    "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2885. Create AMRMProxy request interceptor and ContainerAllocator to distribute OPPORTUNISTIC containers to appropriate Nodes (asuresh)\n\n(cherry picked from commit 2bf025278a318b0452fdc9ece4427b4c42124e39)\n",
      "commitDate": "24/04/16 10:38 PM",
      "commitName": "c282a08f3892e2e8ceb58e1e9a411062fbd1fb2b",
      "commitAuthor": "Arun Suresh",
      "diff": "@@ -0,0 +1,5 @@\n+  public RegisterApplicationMasterResponse registerApplicationMaster\n+      (RegisterApplicationMasterRequest request) throws YarnException,\n+      IOException {\n+    return super.registerApplicationMaster(request);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public RegisterApplicationMasterResponse registerApplicationMaster\n      (RegisterApplicationMasterRequest request) throws YarnException,\n      IOException {\n    return super.registerApplicationMaster(request);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DistributedSchedulingService.java"
    }
  }
}