{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Options.java",
  "functionName": "processChecksumOpt",
  "functionId": "processChecksumOpt___defaultOpt-ChecksumOpt__userOpt-ChecksumOpt__userBytesPerChecksum-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Options.java",
  "functionStartLine": 295,
  "functionEndLine": 321,
  "numCommitsSeen": 12,
  "timeTaken": 1541,
  "changeHistory": [
    "274d9b2ac48547b8d466e5006c233576c1aa7591",
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7"
  ],
  "changeHistoryShort": {
    "274d9b2ac48547b8d466e5006c233576c1aa7591": "Ybodychange",
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "274d9b2ac48547b8d466e5006c233576c1aa7591": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10426. Declare CreateOpts.getOpt(..) with generic type argument, removes unused FileContext.getFileStatus(..) and fixes various javac warnings.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1581437 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/14 11:07 AM",
      "commitName": "274d9b2ac48547b8d466e5006c233576c1aa7591",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "24/08/12 6:03 PM",
      "commitNameOld": "deead78e35b0cb81af875b5a8032cbd06c9a2dae",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 577.71,
      "commitsBetweenForRepo": 3603,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,27 @@\n     public static ChecksumOpt processChecksumOpt(ChecksumOpt defaultOpt, \n         ChecksumOpt userOpt, int userBytesPerChecksum) {\n-      // The following is done to avoid unnecessary creation of new objects.\n-      // tri-state variable: 0 default, 1 userBytesPerChecksum, 2 userOpt\n-      short whichSize;\n-      // true default, false userOpt\n-      boolean useDefaultType;\n-      \n+      final boolean useDefaultType;\n+      final DataChecksum.Type type;\n+      if (userOpt !\u003d null \n+          \u0026\u0026 userOpt.getChecksumType() !\u003d DataChecksum.Type.DEFAULT) {\n+        useDefaultType \u003d false;\n+        type \u003d userOpt.getChecksumType();\n+      } else {\n+        useDefaultType \u003d true;\n+        type \u003d defaultOpt.getChecksumType();\n+      }\n+\n       //  bytesPerChecksum - order of preference\n       //    user specified value in bytesPerChecksum\n       //    user specified value in checksumOpt\n       //    default.\n       if (userBytesPerChecksum \u003e 0) {\n-        whichSize \u003d 1; // userBytesPerChecksum\n-      } else if (userOpt !\u003d null \u0026\u0026 userOpt.getBytesPerChecksum() \u003e 0) {\n-        whichSize \u003d 2; // userOpt\n-      } else {\n-        whichSize \u003d 0; // default\n-      }\n-\n-      // checksum type - order of preference\n-      //   user specified value in checksumOpt\n-      //   default.\n-      if (userOpt !\u003d null \u0026\u0026\n-            userOpt.getChecksumType() !\u003d DataChecksum.Type.DEFAULT) {\n-        useDefaultType \u003d false;\n-      } else {\n-        useDefaultType \u003d true;\n-      }\n-\n-      // Short out the common and easy cases\n-      if (whichSize \u003d\u003d 0 \u0026\u0026 useDefaultType) {\n-        return defaultOpt;\n-      } else if (whichSize \u003d\u003d 2 \u0026\u0026 !useDefaultType) {\n-        return userOpt;\n-      }\n-\n-      // Take care of the rest of combinations\n-      DataChecksum.Type type \u003d useDefaultType ? defaultOpt.getChecksumType() :\n-          userOpt.getChecksumType();\n-      if (whichSize \u003d\u003d 0) {\n-        return new ChecksumOpt(type, defaultOpt.getBytesPerChecksum());\n-      } else if (whichSize \u003d\u003d 1) {\n         return new ChecksumOpt(type, userBytesPerChecksum);\n+      } else if (userOpt !\u003d null \u0026\u0026 userOpt.getBytesPerChecksum() \u003e 0) {\n+        return !useDefaultType? userOpt\n+            : new ChecksumOpt(type, userOpt.getBytesPerChecksum());\n       } else {\n-        return new ChecksumOpt(type, userOpt.getBytesPerChecksum());\n+        return useDefaultType? defaultOpt\n+            : new ChecksumOpt(type, defaultOpt.getBytesPerChecksum());\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static ChecksumOpt processChecksumOpt(ChecksumOpt defaultOpt, \n        ChecksumOpt userOpt, int userBytesPerChecksum) {\n      final boolean useDefaultType;\n      final DataChecksum.Type type;\n      if (userOpt !\u003d null \n          \u0026\u0026 userOpt.getChecksumType() !\u003d DataChecksum.Type.DEFAULT) {\n        useDefaultType \u003d false;\n        type \u003d userOpt.getChecksumType();\n      } else {\n        useDefaultType \u003d true;\n        type \u003d defaultOpt.getChecksumType();\n      }\n\n      //  bytesPerChecksum - order of preference\n      //    user specified value in bytesPerChecksum\n      //    user specified value in checksumOpt\n      //    default.\n      if (userBytesPerChecksum \u003e 0) {\n        return new ChecksumOpt(type, userBytesPerChecksum);\n      } else if (userOpt !\u003d null \u0026\u0026 userOpt.getBytesPerChecksum() \u003e 0) {\n        return !useDefaultType? userOpt\n            : new ChecksumOpt(type, userOpt.getBytesPerChecksum());\n      } else {\n        return useDefaultType? defaultOpt\n            : new ChecksumOpt(type, defaultOpt.getBytesPerChecksum());\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Options.java",
      "extendedDetails": {}
    },
    "b0ea77303ba62a400376ca32c63c5b138f32cbe7": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8240. Add a new API to allow users to specify a checksum type on FileSystem.create(..).  Contributed by Kihwal Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1374696 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/12 10:46 PM",
      "commitName": "b0ea77303ba62a400376ca32c63c5b138f32cbe7",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,48 @@\n+    public static ChecksumOpt processChecksumOpt(ChecksumOpt defaultOpt, \n+        ChecksumOpt userOpt, int userBytesPerChecksum) {\n+      // The following is done to avoid unnecessary creation of new objects.\n+      // tri-state variable: 0 default, 1 userBytesPerChecksum, 2 userOpt\n+      short whichSize;\n+      // true default, false userOpt\n+      boolean useDefaultType;\n+      \n+      //  bytesPerChecksum - order of preference\n+      //    user specified value in bytesPerChecksum\n+      //    user specified value in checksumOpt\n+      //    default.\n+      if (userBytesPerChecksum \u003e 0) {\n+        whichSize \u003d 1; // userBytesPerChecksum\n+      } else if (userOpt !\u003d null \u0026\u0026 userOpt.getBytesPerChecksum() \u003e 0) {\n+        whichSize \u003d 2; // userOpt\n+      } else {\n+        whichSize \u003d 0; // default\n+      }\n+\n+      // checksum type - order of preference\n+      //   user specified value in checksumOpt\n+      //   default.\n+      if (userOpt !\u003d null \u0026\u0026\n+            userOpt.getChecksumType() !\u003d DataChecksum.Type.DEFAULT) {\n+        useDefaultType \u003d false;\n+      } else {\n+        useDefaultType \u003d true;\n+      }\n+\n+      // Short out the common and easy cases\n+      if (whichSize \u003d\u003d 0 \u0026\u0026 useDefaultType) {\n+        return defaultOpt;\n+      } else if (whichSize \u003d\u003d 2 \u0026\u0026 !useDefaultType) {\n+        return userOpt;\n+      }\n+\n+      // Take care of the rest of combinations\n+      DataChecksum.Type type \u003d useDefaultType ? defaultOpt.getChecksumType() :\n+          userOpt.getChecksumType();\n+      if (whichSize \u003d\u003d 0) {\n+        return new ChecksumOpt(type, defaultOpt.getBytesPerChecksum());\n+      } else if (whichSize \u003d\u003d 1) {\n+        return new ChecksumOpt(type, userBytesPerChecksum);\n+      } else {\n+        return new ChecksumOpt(type, userOpt.getBytesPerChecksum());\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static ChecksumOpt processChecksumOpt(ChecksumOpt defaultOpt, \n        ChecksumOpt userOpt, int userBytesPerChecksum) {\n      // The following is done to avoid unnecessary creation of new objects.\n      // tri-state variable: 0 default, 1 userBytesPerChecksum, 2 userOpt\n      short whichSize;\n      // true default, false userOpt\n      boolean useDefaultType;\n      \n      //  bytesPerChecksum - order of preference\n      //    user specified value in bytesPerChecksum\n      //    user specified value in checksumOpt\n      //    default.\n      if (userBytesPerChecksum \u003e 0) {\n        whichSize \u003d 1; // userBytesPerChecksum\n      } else if (userOpt !\u003d null \u0026\u0026 userOpt.getBytesPerChecksum() \u003e 0) {\n        whichSize \u003d 2; // userOpt\n      } else {\n        whichSize \u003d 0; // default\n      }\n\n      // checksum type - order of preference\n      //   user specified value in checksumOpt\n      //   default.\n      if (userOpt !\u003d null \u0026\u0026\n            userOpt.getChecksumType() !\u003d DataChecksum.Type.DEFAULT) {\n        useDefaultType \u003d false;\n      } else {\n        useDefaultType \u003d true;\n      }\n\n      // Short out the common and easy cases\n      if (whichSize \u003d\u003d 0 \u0026\u0026 useDefaultType) {\n        return defaultOpt;\n      } else if (whichSize \u003d\u003d 2 \u0026\u0026 !useDefaultType) {\n        return userOpt;\n      }\n\n      // Take care of the rest of combinations\n      DataChecksum.Type type \u003d useDefaultType ? defaultOpt.getChecksumType() :\n          userOpt.getChecksumType();\n      if (whichSize \u003d\u003d 0) {\n        return new ChecksumOpt(type, defaultOpt.getBytesPerChecksum());\n      } else if (whichSize \u003d\u003d 1) {\n        return new ChecksumOpt(type, userBytesPerChecksum);\n      } else {\n        return new ChecksumOpt(type, userOpt.getBytesPerChecksum());\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/Options.java"
    }
  }
}