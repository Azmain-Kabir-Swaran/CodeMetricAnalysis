{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMContainerAllocator.java",
  "functionName": "getContainerReqToReplace",
  "functionId": "getContainerReqToReplace___allocated-Container",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
  "functionStartLine": 1331,
  "functionEndLine": 1367,
  "numCommitsSeen": 82,
  "timeTaken": 2360,
  "changeHistory": [
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa",
    "74748ec62570f92d57dbad3ba4cca47402990db5"
  ],
  "changeHistoryShort": {
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": "Ybodychange",
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa": "Ybodychange",
    "74748ec62570f92d57dbad3ba4cca47402990db5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ae353ea96993ec664090c5d84f6675c29d9f0f5f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6703. Add flag to allow MapReduce AM to request for OPPORTUNISTIC containers. Contributed by Arun Suresh\n",
      "commitDate": "24/05/16 7:47 PM",
      "commitName": "ae353ea96993ec664090c5d84f6675c29d9f0f5f",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/05/16 3:25 PM",
      "commitNameOld": "c9bb96fa81fc925e33ccc0b02c98cc2d929df120",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 18.18,
      "commitsBetweenForRepo": 128,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,37 @@\n     private ContainerRequest getContainerReqToReplace(Container allocated) {\n       LOG.info(\"Finding containerReq for allocated container: \" + allocated);\n       Priority priority \u003d allocated.getPriority();\n       ContainerRequest toBeReplaced \u003d null;\n       if (PRIORITY_FAST_FAIL_MAP.equals(priority)) {\n         LOG.info(\"Replacing FAST_FAIL_MAP container \" + allocated.getId());\n         Iterator\u003cTaskAttemptId\u003e iter \u003d earlierFailedMaps.iterator();\n         while (toBeReplaced \u003d\u003d null \u0026\u0026 iter.hasNext()) {\n           toBeReplaced \u003d maps.get(iter.next());\n         }\n         LOG.info(\"Found replacement: \" + toBeReplaced);\n         return toBeReplaced;\n       }\n-      else if (PRIORITY_MAP.equals(priority)) {\n+      else if (PRIORITY_MAP.equals(priority)\n+          || PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n         LOG.info(\"Replacing MAP container \" + allocated.getId());\n         // allocated container was for a map\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         if (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           TaskAttemptId tId \u003d list.removeLast();\n           if (maps.containsKey(tId)) {\n             toBeReplaced \u003d maps.remove(tId);\n           }\n         }\n         else {\n           TaskAttemptId tId \u003d maps.keySet().iterator().next();\n           toBeReplaced \u003d maps.remove(tId);          \n         }        \n       }\n       else if (PRIORITY_REDUCE.equals(priority)) {\n         TaskAttemptId tId \u003d reduces.keySet().iterator().next();\n         toBeReplaced \u003d reduces.remove(tId);    \n       }\n       LOG.info(\"Found replacement: \" + toBeReplaced);\n       return toBeReplaced;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ContainerRequest getContainerReqToReplace(Container allocated) {\n      LOG.info(\"Finding containerReq for allocated container: \" + allocated);\n      Priority priority \u003d allocated.getPriority();\n      ContainerRequest toBeReplaced \u003d null;\n      if (PRIORITY_FAST_FAIL_MAP.equals(priority)) {\n        LOG.info(\"Replacing FAST_FAIL_MAP container \" + allocated.getId());\n        Iterator\u003cTaskAttemptId\u003e iter \u003d earlierFailedMaps.iterator();\n        while (toBeReplaced \u003d\u003d null \u0026\u0026 iter.hasNext()) {\n          toBeReplaced \u003d maps.get(iter.next());\n        }\n        LOG.info(\"Found replacement: \" + toBeReplaced);\n        return toBeReplaced;\n      }\n      else if (PRIORITY_MAP.equals(priority)\n          || PRIORITY_OPPORTUNISTIC_MAP.equals(priority)) {\n        LOG.info(\"Replacing MAP container \" + allocated.getId());\n        // allocated container was for a map\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        if (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeLast();\n          if (maps.containsKey(tId)) {\n            toBeReplaced \u003d maps.remove(tId);\n          }\n        }\n        else {\n          TaskAttemptId tId \u003d maps.keySet().iterator().next();\n          toBeReplaced \u003d maps.remove(tId);          \n        }        \n      }\n      else if (PRIORITY_REDUCE.equals(priority)) {\n        TaskAttemptId tId \u003d reduces.keySet().iterator().next();\n        toBeReplaced \u003d reduces.remove(tId);    \n      }\n      LOG.info(\"Found replacement: \" + toBeReplaced);\n      return toBeReplaced;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3460. MR AM can hang if containers are allocated on a node blacklisted by the AM. (Contributed by Hitesh Shah and Robert Joseph Evans)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1209737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/12/11 2:18 PM",
      "commitName": "a3f37e15f75d01bb342480b0b1035ea16c5fd9aa",
      "commitAuthor": "Siddharth Seth",
      "commitDateOld": "27/10/11 6:40 PM",
      "commitNameOld": "b304062f1ffee078ea9575dcee5583d43e33508c",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 35.86,
      "commitsBetweenForRepo": 217,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,36 @@\n     private ContainerRequest getContainerReqToReplace(Container allocated) {\n+      LOG.info(\"Finding containerReq for allocated container: \" + allocated);\n       Priority priority \u003d allocated.getPriority();\n       ContainerRequest toBeReplaced \u003d null;\n-      if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n-          || PRIORITY_MAP.equals(priority)) {\n+      if (PRIORITY_FAST_FAIL_MAP.equals(priority)) {\n+        LOG.info(\"Replacing FAST_FAIL_MAP container \" + allocated.getId());\n+        Iterator\u003cTaskAttemptId\u003e iter \u003d earlierFailedMaps.iterator();\n+        while (toBeReplaced \u003d\u003d null \u0026\u0026 iter.hasNext()) {\n+          toBeReplaced \u003d maps.get(iter.next());\n+        }\n+        LOG.info(\"Found replacement: \" + toBeReplaced);\n+        return toBeReplaced;\n+      }\n+      else if (PRIORITY_MAP.equals(priority)) {\n+        LOG.info(\"Replacing MAP container \" + allocated.getId());\n         // allocated container was for a map\n         String host \u003d allocated.getNodeId().getHost();\n         LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n         if (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n           TaskAttemptId tId \u003d list.removeLast();\n           if (maps.containsKey(tId)) {\n             toBeReplaced \u003d maps.remove(tId);\n           }\n         }\n         else {\n           TaskAttemptId tId \u003d maps.keySet().iterator().next();\n           toBeReplaced \u003d maps.remove(tId);          \n         }        \n       }\n       else if (PRIORITY_REDUCE.equals(priority)) {\n         TaskAttemptId tId \u003d reduces.keySet().iterator().next();\n         toBeReplaced \u003d reduces.remove(tId);    \n       }\n+      LOG.info(\"Found replacement: \" + toBeReplaced);\n       return toBeReplaced;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ContainerRequest getContainerReqToReplace(Container allocated) {\n      LOG.info(\"Finding containerReq for allocated container: \" + allocated);\n      Priority priority \u003d allocated.getPriority();\n      ContainerRequest toBeReplaced \u003d null;\n      if (PRIORITY_FAST_FAIL_MAP.equals(priority)) {\n        LOG.info(\"Replacing FAST_FAIL_MAP container \" + allocated.getId());\n        Iterator\u003cTaskAttemptId\u003e iter \u003d earlierFailedMaps.iterator();\n        while (toBeReplaced \u003d\u003d null \u0026\u0026 iter.hasNext()) {\n          toBeReplaced \u003d maps.get(iter.next());\n        }\n        LOG.info(\"Found replacement: \" + toBeReplaced);\n        return toBeReplaced;\n      }\n      else if (PRIORITY_MAP.equals(priority)) {\n        LOG.info(\"Replacing MAP container \" + allocated.getId());\n        // allocated container was for a map\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        if (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeLast();\n          if (maps.containsKey(tId)) {\n            toBeReplaced \u003d maps.remove(tId);\n          }\n        }\n        else {\n          TaskAttemptId tId \u003d maps.keySet().iterator().next();\n          toBeReplaced \u003d maps.remove(tId);          \n        }        \n      }\n      else if (PRIORITY_REDUCE.equals(priority)) {\n        TaskAttemptId tId \u003d reduces.keySet().iterator().next();\n        toBeReplaced \u003d reduces.remove(tId);    \n      }\n      LOG.info(\"Found replacement: \" + toBeReplaced);\n      return toBeReplaced;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java",
      "extendedDetails": {}
    },
    "74748ec62570f92d57dbad3ba4cca47402990db5": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2693. Fix NPE in job-blacklisting. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1186529 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/10/11 3:02 PM",
      "commitName": "74748ec62570f92d57dbad3ba4cca47402990db5",
      "commitAuthor": "Arun Murthy",
      "diff": "@@ -0,0 +1,25 @@\n+    private ContainerRequest getContainerReqToReplace(Container allocated) {\n+      Priority priority \u003d allocated.getPriority();\n+      ContainerRequest toBeReplaced \u003d null;\n+      if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n+          || PRIORITY_MAP.equals(priority)) {\n+        // allocated container was for a map\n+        String host \u003d allocated.getNodeId().getHost();\n+        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n+        if (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n+          TaskAttemptId tId \u003d list.removeLast();\n+          if (maps.containsKey(tId)) {\n+            toBeReplaced \u003d maps.remove(tId);\n+          }\n+        }\n+        else {\n+          TaskAttemptId tId \u003d maps.keySet().iterator().next();\n+          toBeReplaced \u003d maps.remove(tId);          \n+        }        \n+      }\n+      else if (PRIORITY_REDUCE.equals(priority)) {\n+        TaskAttemptId tId \u003d reduces.keySet().iterator().next();\n+        toBeReplaced \u003d reduces.remove(tId);    \n+      }\n+      return toBeReplaced;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private ContainerRequest getContainerReqToReplace(Container allocated) {\n      Priority priority \u003d allocated.getPriority();\n      ContainerRequest toBeReplaced \u003d null;\n      if (PRIORITY_FAST_FAIL_MAP.equals(priority) \n          || PRIORITY_MAP.equals(priority)) {\n        // allocated container was for a map\n        String host \u003d allocated.getNodeId().getHost();\n        LinkedList\u003cTaskAttemptId\u003e list \u003d mapsHostMapping.get(host);\n        if (list !\u003d null \u0026\u0026 list.size() \u003e 0) {\n          TaskAttemptId tId \u003d list.removeLast();\n          if (maps.containsKey(tId)) {\n            toBeReplaced \u003d maps.remove(tId);\n          }\n        }\n        else {\n          TaskAttemptId tId \u003d maps.keySet().iterator().next();\n          toBeReplaced \u003d maps.remove(tId);          \n        }        \n      }\n      else if (PRIORITY_REDUCE.equals(priority)) {\n        TaskAttemptId tId \u003d reduces.keySet().iterator().next();\n        toBeReplaced \u003d reduces.remove(tId);    \n      }\n      return toBeReplaced;\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/rm/RMContainerAllocator.java"
    }
  }
}