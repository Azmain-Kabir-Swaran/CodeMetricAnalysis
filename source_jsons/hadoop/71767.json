{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MiniKdc.java",
  "functionName": "prepareKdcServer",
  "functionId": "prepareKdcServer",
  "sourceFilePath": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
  "functionStartLine": 297,
  "functionEndLine": 334,
  "numCommitsSeen": 16,
  "timeTaken": 1390,
  "changeHistory": [
    "b1674caa409ca2c616207acb72aeb2767d28b10c",
    "916140604ffef59466ba30832478311d3e6249bd"
  ],
  "changeHistoryShort": {
    "b1674caa409ca2c616207acb72aeb2767d28b10c": "Ybodychange",
    "916140604ffef59466ba30832478311d3e6249bd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b1674caa409ca2c616207acb72aeb2767d28b10c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13255. KMSClientProvider should check and renew tgt when doing delegation token operations. Contributed by Xiao Chen.\n",
      "commitDate": "16/06/16 3:22 PM",
      "commitName": "b1674caa409ca2c616207acb72aeb2767d28b10c",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "27/05/16 11:23 PM",
      "commitNameOld": "916140604ffef59466ba30832478311d3e6249bd",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 19.67,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,38 @@\n   private void prepareKdcServer() throws Exception {\n     // transport\n     simpleKdc.setWorkDir(workDir);\n     simpleKdc.setKdcHost(getHost());\n     simpleKdc.setKdcRealm(realm);\n     if (transport \u003d\u003d null) {\n       transport \u003d conf.getProperty(TRANSPORT);\n     }\n     if (port \u003d\u003d 0) {\n       port \u003d NetworkUtil.getServerPort();\n     }\n     if (transport !\u003d null) {\n       if (transport.trim().equals(\"TCP\")) {\n         simpleKdc.setKdcTcpPort(port);\n         simpleKdc.setAllowUdp(false);\n       } else if (transport.trim().equals(\"UDP\")) {\n         simpleKdc.setKdcUdpPort(port);\n         simpleKdc.setAllowTcp(false);\n       } else {\n         throw new IllegalArgumentException(\"Invalid transport: \" + transport);\n       }\n     } else {\n       throw new IllegalArgumentException(\"Need to set transport!\");\n     }\n     simpleKdc.getKdcConfig().setString(KdcConfigKey.KDC_SERVICE_NAME,\n             conf.getProperty(INSTANCE));\n     if (conf.getProperty(DEBUG) !\u003d null) {\n       krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG, conf.getProperty(DEBUG));\n     }\n+    if (conf.getProperty(MIN_TICKET_LIFETIME) !\u003d null) {\n+      simpleKdc.getKdcConfig().setLong(KdcConfigKey.MINIMUM_TICKET_LIFETIME,\n+          Long.parseLong(conf.getProperty(MIN_TICKET_LIFETIME)));\n+    }\n+    if (conf.getProperty(MAX_TICKET_LIFETIME) !\u003d null) {\n+      simpleKdc.getKdcConfig().setLong(KdcConfigKey.MAXIMUM_TICKET_LIFETIME,\n+          Long.parseLong(conf.getProperty(MiniKdc.MAX_TICKET_LIFETIME)));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void prepareKdcServer() throws Exception {\n    // transport\n    simpleKdc.setWorkDir(workDir);\n    simpleKdc.setKdcHost(getHost());\n    simpleKdc.setKdcRealm(realm);\n    if (transport \u003d\u003d null) {\n      transport \u003d conf.getProperty(TRANSPORT);\n    }\n    if (port \u003d\u003d 0) {\n      port \u003d NetworkUtil.getServerPort();\n    }\n    if (transport !\u003d null) {\n      if (transport.trim().equals(\"TCP\")) {\n        simpleKdc.setKdcTcpPort(port);\n        simpleKdc.setAllowUdp(false);\n      } else if (transport.trim().equals(\"UDP\")) {\n        simpleKdc.setKdcUdpPort(port);\n        simpleKdc.setAllowTcp(false);\n      } else {\n        throw new IllegalArgumentException(\"Invalid transport: \" + transport);\n      }\n    } else {\n      throw new IllegalArgumentException(\"Need to set transport!\");\n    }\n    simpleKdc.getKdcConfig().setString(KdcConfigKey.KDC_SERVICE_NAME,\n            conf.getProperty(INSTANCE));\n    if (conf.getProperty(DEBUG) !\u003d null) {\n      krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG, conf.getProperty(DEBUG));\n    }\n    if (conf.getProperty(MIN_TICKET_LIFETIME) !\u003d null) {\n      simpleKdc.getKdcConfig().setLong(KdcConfigKey.MINIMUM_TICKET_LIFETIME,\n          Long.parseLong(conf.getProperty(MIN_TICKET_LIFETIME)));\n    }\n    if (conf.getProperty(MAX_TICKET_LIFETIME) !\u003d null) {\n      simpleKdc.getKdcConfig().setLong(KdcConfigKey.MAXIMUM_TICKET_LIFETIME,\n          Long.parseLong(conf.getProperty(MiniKdc.MAX_TICKET_LIFETIME)));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java",
      "extendedDetails": {}
    },
    "916140604ffef59466ba30832478311d3e6249bd": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12911. Upgrade Hadoop MiniKDC with Kerby. Contributed by Jiajia Li\n",
      "commitDate": "27/05/16 11:23 PM",
      "commitName": "916140604ffef59466ba30832478311d3e6249bd",
      "commitAuthor": "Kai Zheng",
      "diff": "@@ -0,0 +1,30 @@\n+  private void prepareKdcServer() throws Exception {\n+    // transport\n+    simpleKdc.setWorkDir(workDir);\n+    simpleKdc.setKdcHost(getHost());\n+    simpleKdc.setKdcRealm(realm);\n+    if (transport \u003d\u003d null) {\n+      transport \u003d conf.getProperty(TRANSPORT);\n+    }\n+    if (port \u003d\u003d 0) {\n+      port \u003d NetworkUtil.getServerPort();\n+    }\n+    if (transport !\u003d null) {\n+      if (transport.trim().equals(\"TCP\")) {\n+        simpleKdc.setKdcTcpPort(port);\n+        simpleKdc.setAllowUdp(false);\n+      } else if (transport.trim().equals(\"UDP\")) {\n+        simpleKdc.setKdcUdpPort(port);\n+        simpleKdc.setAllowTcp(false);\n+      } else {\n+        throw new IllegalArgumentException(\"Invalid transport: \" + transport);\n+      }\n+    } else {\n+      throw new IllegalArgumentException(\"Need to set transport!\");\n+    }\n+    simpleKdc.getKdcConfig().setString(KdcConfigKey.KDC_SERVICE_NAME,\n+            conf.getProperty(INSTANCE));\n+    if (conf.getProperty(DEBUG) !\u003d null) {\n+      krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG, conf.getProperty(DEBUG));\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void prepareKdcServer() throws Exception {\n    // transport\n    simpleKdc.setWorkDir(workDir);\n    simpleKdc.setKdcHost(getHost());\n    simpleKdc.setKdcRealm(realm);\n    if (transport \u003d\u003d null) {\n      transport \u003d conf.getProperty(TRANSPORT);\n    }\n    if (port \u003d\u003d 0) {\n      port \u003d NetworkUtil.getServerPort();\n    }\n    if (transport !\u003d null) {\n      if (transport.trim().equals(\"TCP\")) {\n        simpleKdc.setKdcTcpPort(port);\n        simpleKdc.setAllowUdp(false);\n      } else if (transport.trim().equals(\"UDP\")) {\n        simpleKdc.setKdcUdpPort(port);\n        simpleKdc.setAllowTcp(false);\n      } else {\n        throw new IllegalArgumentException(\"Invalid transport: \" + transport);\n      }\n    } else {\n      throw new IllegalArgumentException(\"Need to set transport!\");\n    }\n    simpleKdc.getKdcConfig().setString(KdcConfigKey.KDC_SERVICE_NAME,\n            conf.getProperty(INSTANCE));\n    if (conf.getProperty(DEBUG) !\u003d null) {\n      krb5Debug \u003d getAndSet(SUN_SECURITY_KRB5_DEBUG, conf.getProperty(DEBUG));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-minikdc/src/main/java/org/apache/hadoop/minikdc/MiniKdc.java"
    }
  }
}