{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockManager.java",
  "functionName": "processChosenExcessRedundancy",
  "functionId": "processChosenExcessRedundancy___nonExcess-Collection__DatanodeStorageInfo__(modifiers-final)__chosen-DatanodeStorageInfo(modifiers-final)__storedBlock-BlockInfo",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
  "functionStartLine": 4016,
  "functionEndLine": 4034,
  "numCommitsSeen": 807,
  "timeTaken": 9539,
  "changeHistory": [
    "5865fe2bf01284993572ea60b3ec3bf8b4492818",
    "6979cbfc1f4c28440816b56f5624765872b0be49"
  ],
  "changeHistoryShort": {
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": "Ymultichange(Yrename,Ybodychange)",
    "6979cbfc1f4c28440816b56f5624765872b0be49": "Ybodychange"
  },
  "changeHistoryDetails": {
    "5865fe2bf01284993572ea60b3ec3bf8b4492818": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "HDFS-9869. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-2]. Contributed by Rakesh R.\n",
      "commitDate": "25/04/16 10:01 PM",
      "commitName": "5865fe2bf01284993572ea60b3ec3bf8b4492818",
      "commitAuthor": "Zhe Zhang",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HDFS-9869. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-2]. Contributed by Rakesh R.\n",
          "commitDate": "25/04/16 10:01 PM",
          "commitName": "5865fe2bf01284993572ea60b3ec3bf8b4492818",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "17/04/16 6:28 PM",
          "commitNameOld": "67523ffcf491f4f2db5335899c00a174d0caaa9b",
          "commitAuthorOld": "Walter Su",
          "daysBetweenCommits": 8.15,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  private void processChosenExcessReplica(\n+  private void processChosenExcessRedundancy(\n       final Collection\u003cDatanodeStorageInfo\u003e nonExcess,\n       final DatanodeStorageInfo chosen, BlockInfo storedBlock) {\n     nonExcess.remove(chosen);\n-    excessReplicas.add(chosen.getDatanodeDescriptor(), storedBlock);\n+    excessRedundancyMap.add(chosen.getDatanodeDescriptor(), storedBlock);\n     //\n     // The \u0027excessblocks\u0027 tracks blocks until we get confirmation\n     // that the datanode has deleted them; the only way we remove them\n     // is when we get a \"removeBlock\" message.\n     //\n     // The \u0027invalidate\u0027 list is used to inform the datanode the block\n     // should be deleted.  Items are removed from the invalidate list\n     // upon giving instructions to the datanodes.\n     //\n     final Block blockToInvalidate \u003d getBlockOnStorage(storedBlock, chosen);\n     addToInvalidates(blockToInvalidate, chosen.getDatanodeDescriptor());\n-    blockLog.debug(\"BLOCK* chooseExcessReplicates: \"\n+    blockLog.debug(\"BLOCK* chooseExcessRedundancies: \"\n         + \"({}, {}) is added to invalidated blocks set\", chosen, storedBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void processChosenExcessRedundancy(\n      final Collection\u003cDatanodeStorageInfo\u003e nonExcess,\n      final DatanodeStorageInfo chosen, BlockInfo storedBlock) {\n    nonExcess.remove(chosen);\n    excessRedundancyMap.add(chosen.getDatanodeDescriptor(), storedBlock);\n    //\n    // The \u0027excessblocks\u0027 tracks blocks until we get confirmation\n    // that the datanode has deleted them; the only way we remove them\n    // is when we get a \"removeBlock\" message.\n    //\n    // The \u0027invalidate\u0027 list is used to inform the datanode the block\n    // should be deleted.  Items are removed from the invalidate list\n    // upon giving instructions to the datanodes.\n    //\n    final Block blockToInvalidate \u003d getBlockOnStorage(storedBlock, chosen);\n    addToInvalidates(blockToInvalidate, chosen.getDatanodeDescriptor());\n    blockLog.debug(\"BLOCK* chooseExcessRedundancies: \"\n        + \"({}, {}) is added to invalidated blocks set\", chosen, storedBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {
            "oldValue": "processChosenExcessReplica",
            "newValue": "processChosenExcessRedundancy"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-9869. Erasure Coding: Rename replication-based names in BlockManager to more generic [part-2]. Contributed by Rakesh R.\n",
          "commitDate": "25/04/16 10:01 PM",
          "commitName": "5865fe2bf01284993572ea60b3ec3bf8b4492818",
          "commitAuthor": "Zhe Zhang",
          "commitDateOld": "17/04/16 6:28 PM",
          "commitNameOld": "67523ffcf491f4f2db5335899c00a174d0caaa9b",
          "commitAuthorOld": "Walter Su",
          "daysBetweenCommits": 8.15,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,19 +1,19 @@\n-  private void processChosenExcessReplica(\n+  private void processChosenExcessRedundancy(\n       final Collection\u003cDatanodeStorageInfo\u003e nonExcess,\n       final DatanodeStorageInfo chosen, BlockInfo storedBlock) {\n     nonExcess.remove(chosen);\n-    excessReplicas.add(chosen.getDatanodeDescriptor(), storedBlock);\n+    excessRedundancyMap.add(chosen.getDatanodeDescriptor(), storedBlock);\n     //\n     // The \u0027excessblocks\u0027 tracks blocks until we get confirmation\n     // that the datanode has deleted them; the only way we remove them\n     // is when we get a \"removeBlock\" message.\n     //\n     // The \u0027invalidate\u0027 list is used to inform the datanode the block\n     // should be deleted.  Items are removed from the invalidate list\n     // upon giving instructions to the datanodes.\n     //\n     final Block blockToInvalidate \u003d getBlockOnStorage(storedBlock, chosen);\n     addToInvalidates(blockToInvalidate, chosen.getDatanodeDescriptor());\n-    blockLog.debug(\"BLOCK* chooseExcessReplicates: \"\n+    blockLog.debug(\"BLOCK* chooseExcessRedundancies: \"\n         + \"({}, {}) is added to invalidated blocks set\", chosen, storedBlock);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void processChosenExcessRedundancy(\n      final Collection\u003cDatanodeStorageInfo\u003e nonExcess,\n      final DatanodeStorageInfo chosen, BlockInfo storedBlock) {\n    nonExcess.remove(chosen);\n    excessRedundancyMap.add(chosen.getDatanodeDescriptor(), storedBlock);\n    //\n    // The \u0027excessblocks\u0027 tracks blocks until we get confirmation\n    // that the datanode has deleted them; the only way we remove them\n    // is when we get a \"removeBlock\" message.\n    //\n    // The \u0027invalidate\u0027 list is used to inform the datanode the block\n    // should be deleted.  Items are removed from the invalidate list\n    // upon giving instructions to the datanodes.\n    //\n    final Block blockToInvalidate \u003d getBlockOnStorage(storedBlock, chosen);\n    addToInvalidates(blockToInvalidate, chosen.getDatanodeDescriptor());\n    blockLog.debug(\"BLOCK* chooseExcessRedundancies: \"\n        + \"({}, {}) is added to invalidated blocks set\", chosen, storedBlock);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "6979cbfc1f4c28440816b56f5624765872b0be49": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9838. Refactor the excessReplicateMap to a class.\n",
      "commitDate": "24/02/16 7:42 PM",
      "commitName": "6979cbfc1f4c28440816b56f5624765872b0be49",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "24/02/16 3:13 PM",
      "commitNameOld": "47b92f2b6f2dafc129a41b247f35e77c8e47ffba",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.19,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n   private void processChosenExcessReplica(\n       final Collection\u003cDatanodeStorageInfo\u003e nonExcess,\n       final DatanodeStorageInfo chosen, BlockInfo storedBlock) {\n     nonExcess.remove(chosen);\n-    addToExcessReplicate(chosen.getDatanodeDescriptor(), storedBlock);\n+    excessReplicas.add(chosen.getDatanodeDescriptor(), storedBlock);\n     //\n     // The \u0027excessblocks\u0027 tracks blocks until we get confirmation\n     // that the datanode has deleted them; the only way we remove them\n     // is when we get a \"removeBlock\" message.\n     //\n     // The \u0027invalidate\u0027 list is used to inform the datanode the block\n     // should be deleted.  Items are removed from the invalidate list\n     // upon giving instructions to the datanodes.\n     //\n     final Block blockToInvalidate \u003d getBlockOnStorage(storedBlock, chosen);\n     addToInvalidates(blockToInvalidate, chosen.getDatanodeDescriptor());\n     blockLog.debug(\"BLOCK* chooseExcessReplicates: \"\n         + \"({}, {}) is added to invalidated blocks set\", chosen, storedBlock);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void processChosenExcessReplica(\n      final Collection\u003cDatanodeStorageInfo\u003e nonExcess,\n      final DatanodeStorageInfo chosen, BlockInfo storedBlock) {\n    nonExcess.remove(chosen);\n    excessReplicas.add(chosen.getDatanodeDescriptor(), storedBlock);\n    //\n    // The \u0027excessblocks\u0027 tracks blocks until we get confirmation\n    // that the datanode has deleted them; the only way we remove them\n    // is when we get a \"removeBlock\" message.\n    //\n    // The \u0027invalidate\u0027 list is used to inform the datanode the block\n    // should be deleted.  Items are removed from the invalidate list\n    // upon giving instructions to the datanodes.\n    //\n    final Block blockToInvalidate \u003d getBlockOnStorage(storedBlock, chosen);\n    addToInvalidates(blockToInvalidate, chosen.getDatanodeDescriptor());\n    blockLog.debug(\"BLOCK* chooseExcessReplicates: \"\n        + \"({}, {}) is added to invalidated blocks set\", chosen, storedBlock);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockManager.java",
      "extendedDetails": {}
    }
  }
}