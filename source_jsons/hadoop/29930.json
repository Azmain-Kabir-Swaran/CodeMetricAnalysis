{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "EntityGroupFSTimelineStore.java",
  "functionName": "getCachedStore",
  "functionId": "getCachedStore___groupId-TimelineEntityGroupId__cacheItems-List__EntityCacheItem__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
  "functionStartLine": 1031,
  "functionEndLine": 1060,
  "numCommitsSeen": 21,
  "timeTaken": 2770,
  "changeHistory": [
    "7f3c306e2ed9e865171324898decb9b587d90e73",
    "673e5e02feba9171498a518c06ae70639c5f8854",
    "705286ccaeea36941d97ec1c1700746b74264924",
    "06413da72efed9a50e49efaf7110c220c88a7f4a",
    "02f597c5db36ded385413958bdee793ad7eda40e"
  ],
  "changeHistoryShort": {
    "7f3c306e2ed9e865171324898decb9b587d90e73": "Ybodychange",
    "673e5e02feba9171498a518c06ae70639c5f8854": "Ybodychange",
    "705286ccaeea36941d97ec1c1700746b74264924": "Ymultichange(Yparameterchange,Ybodychange)",
    "06413da72efed9a50e49efaf7110c220c88a7f4a": "Ybodychange",
    "02f597c5db36ded385413958bdee793ad7eda40e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7f3c306e2ed9e865171324898decb9b587d90e73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5432. Lock already held by another process while LevelDB cache store creation for dag. Contributed by Li Lu.\n",
      "commitDate": "28/07/16 6:35 AM",
      "commitName": "7f3c306e2ed9e865171324898decb9b587d90e73",
      "commitAuthor": "Junping Du",
      "commitDateOld": "07/07/16 10:37 PM",
      "commitNameOld": "673e5e02feba9171498a518c06ae70639c5f8854",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.33,
      "commitsBetweenForRepo": 249,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,30 @@\n   private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n       List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n     EntityCacheItem cacheItem;\n     synchronized (this.cachedLogs) {\n       // Note that the content in the cache log storage may be stale.\n       cacheItem \u003d this.cachedLogs.get(groupId);\n       if (cacheItem \u003d\u003d null) {\n         LOG.debug(\"Set up new cache item for id {}\", groupId);\n         cacheItem \u003d new EntityCacheItem(groupId, getConfig());\n         AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n         if (appLogs !\u003d null) {\n           LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n           cacheItem.setAppLogs(appLogs);\n           this.cachedLogs.put(groupId, cacheItem);\n-          // Add the reference by the cache\n-          cacheItem.incrRefs();\n         } else {\n           LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n         }\n       }\n     }\n     TimelineStore store \u003d null;\n     if (cacheItem.getAppLogs() !\u003d null) {\n       AppLogs appLogs \u003d cacheItem.getAppLogs();\n       LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n-      // Add the reference by the store\n-      cacheItem.incrRefs();\n       cacheItems.add(cacheItem);\n       store \u003d cacheItem.refreshCache(aclManager, metrics);\n     } else {\n       LOG.warn(\"AppLogs for group id {} is null\", groupId);\n     }\n     return store;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n    EntityCacheItem cacheItem;\n    synchronized (this.cachedLogs) {\n      // Note that the content in the cache log storage may be stale.\n      cacheItem \u003d this.cachedLogs.get(groupId);\n      if (cacheItem \u003d\u003d null) {\n        LOG.debug(\"Set up new cache item for id {}\", groupId);\n        cacheItem \u003d new EntityCacheItem(groupId, getConfig());\n        AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n        if (appLogs !\u003d null) {\n          LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n          cacheItem.setAppLogs(appLogs);\n          this.cachedLogs.put(groupId, cacheItem);\n        } else {\n          LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n        }\n      }\n    }\n    TimelineStore store \u003d null;\n    if (cacheItem.getAppLogs() !\u003d null) {\n      AppLogs appLogs \u003d cacheItem.getAppLogs();\n      LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n      cacheItems.add(cacheItem);\n      store \u003d cacheItem.refreshCache(aclManager, metrics);\n    } else {\n      LOG.warn(\"AppLogs for group id {} is null\", groupId);\n    }\n    return store;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "673e5e02feba9171498a518c06ae70639c5f8854": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5314. Fixed a ConcurrentModificationException in ATS v1.5 EntityGroupFSTimelineStore. Contributed by Li Lu.\n",
      "commitDate": "07/07/16 10:37 PM",
      "commitName": "673e5e02feba9171498a518c06ae70639c5f8854",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/07/16 4:44 PM",
      "commitNameOld": "8a9d293dd60f6d51e1574e412d40746ba8175fe1",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 1.24,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,34 @@\n   private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n       List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n     EntityCacheItem cacheItem;\n     synchronized (this.cachedLogs) {\n       // Note that the content in the cache log storage may be stale.\n       cacheItem \u003d this.cachedLogs.get(groupId);\n       if (cacheItem \u003d\u003d null) {\n         LOG.debug(\"Set up new cache item for id {}\", groupId);\n-        cacheItem \u003d new EntityCacheItem(groupId, getConfig(), fs);\n+        cacheItem \u003d new EntityCacheItem(groupId, getConfig());\n         AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n         if (appLogs !\u003d null) {\n           LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n           cacheItem.setAppLogs(appLogs);\n           this.cachedLogs.put(groupId, cacheItem);\n           // Add the reference by the cache\n           cacheItem.incrRefs();\n         } else {\n           LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n         }\n       }\n     }\n     TimelineStore store \u003d null;\n     if (cacheItem.getAppLogs() !\u003d null) {\n       AppLogs appLogs \u003d cacheItem.getAppLogs();\n       LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n       // Add the reference by the store\n       cacheItem.incrRefs();\n       cacheItems.add(cacheItem);\n-      store \u003d cacheItem.refreshCache(aclManager, jsonFactory, objMapper,\n-          metrics);\n+      store \u003d cacheItem.refreshCache(aclManager, metrics);\n     } else {\n       LOG.warn(\"AppLogs for group id {} is null\", groupId);\n     }\n     return store;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n    EntityCacheItem cacheItem;\n    synchronized (this.cachedLogs) {\n      // Note that the content in the cache log storage may be stale.\n      cacheItem \u003d this.cachedLogs.get(groupId);\n      if (cacheItem \u003d\u003d null) {\n        LOG.debug(\"Set up new cache item for id {}\", groupId);\n        cacheItem \u003d new EntityCacheItem(groupId, getConfig());\n        AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n        if (appLogs !\u003d null) {\n          LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n          cacheItem.setAppLogs(appLogs);\n          this.cachedLogs.put(groupId, cacheItem);\n          // Add the reference by the cache\n          cacheItem.incrRefs();\n        } else {\n          LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n        }\n      }\n    }\n    TimelineStore store \u003d null;\n    if (cacheItem.getAppLogs() !\u003d null) {\n      AppLogs appLogs \u003d cacheItem.getAppLogs();\n      LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n      // Add the reference by the store\n      cacheItem.incrRefs();\n      cacheItems.add(cacheItem);\n      store \u003d cacheItem.refreshCache(aclManager, metrics);\n    } else {\n      LOG.warn(\"AppLogs for group id {} is null\", groupId);\n    }\n    return store;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "705286ccaeea36941d97ec1c1700746b74264924": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
      "commitDate": "27/05/16 6:58 AM",
      "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
      "commitAuthor": "Junping Du",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
          "commitDate": "27/05/16 6:58 AM",
          "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
          "commitAuthor": "Junping Du",
          "commitDateOld": "03/05/16 4:16 AM",
          "commitNameOld": "06413da72efed9a50e49efaf7110c220c88a7f4a",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 24.11,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,35 @@\n-  private TimelineStore getCachedStore(TimelineEntityGroupId groupId)\n-      throws IOException {\n+  private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n+      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n     EntityCacheItem cacheItem;\n     synchronized (this.cachedLogs) {\n       // Note that the content in the cache log storage may be stale.\n       cacheItem \u003d this.cachedLogs.get(groupId);\n       if (cacheItem \u003d\u003d null) {\n         LOG.debug(\"Set up new cache item for id {}\", groupId);\n-        cacheItem \u003d new EntityCacheItem(getConfig(), fs);\n+        cacheItem \u003d new EntityCacheItem(groupId, getConfig(), fs);\n         AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n         if (appLogs !\u003d null) {\n           LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n           cacheItem.setAppLogs(appLogs);\n           this.cachedLogs.put(groupId, cacheItem);\n+          // Add the reference by the cache\n+          cacheItem.incrRefs();\n         } else {\n           LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n         }\n       }\n     }\n     TimelineStore store \u003d null;\n     if (cacheItem.getAppLogs() !\u003d null) {\n       AppLogs appLogs \u003d cacheItem.getAppLogs();\n       LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n-      store \u003d cacheItem.refreshCache(groupId, aclManager, jsonFactory,\n-          objMapper, metrics);\n+      // Add the reference by the store\n+      cacheItem.incrRefs();\n+      cacheItems.add(cacheItem);\n+      store \u003d cacheItem.refreshCache(aclManager, jsonFactory, objMapper,\n+          metrics);\n     } else {\n       LOG.warn(\"AppLogs for group id {} is null\", groupId);\n     }\n     return store;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n    EntityCacheItem cacheItem;\n    synchronized (this.cachedLogs) {\n      // Note that the content in the cache log storage may be stale.\n      cacheItem \u003d this.cachedLogs.get(groupId);\n      if (cacheItem \u003d\u003d null) {\n        LOG.debug(\"Set up new cache item for id {}\", groupId);\n        cacheItem \u003d new EntityCacheItem(groupId, getConfig(), fs);\n        AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n        if (appLogs !\u003d null) {\n          LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n          cacheItem.setAppLogs(appLogs);\n          this.cachedLogs.put(groupId, cacheItem);\n          // Add the reference by the cache\n          cacheItem.incrRefs();\n        } else {\n          LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n        }\n      }\n    }\n    TimelineStore store \u003d null;\n    if (cacheItem.getAppLogs() !\u003d null) {\n      AppLogs appLogs \u003d cacheItem.getAppLogs();\n      LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n      // Add the reference by the store\n      cacheItem.incrRefs();\n      cacheItems.add(cacheItem);\n      store \u003d cacheItem.refreshCache(aclManager, jsonFactory, objMapper,\n          metrics);\n    } else {\n      LOG.warn(\"AppLogs for group id {} is null\", groupId);\n    }\n    return store;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {
            "oldValue": "[groupId-TimelineEntityGroupId]",
            "newValue": "[groupId-TimelineEntityGroupId, cacheItems-List\u003cEntityCacheItem\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4987. Read cache concurrency issue between read and evict in EntityGroupFS timeline store. Contributed by Li Lu.\n",
          "commitDate": "27/05/16 6:58 AM",
          "commitName": "705286ccaeea36941d97ec1c1700746b74264924",
          "commitAuthor": "Junping Du",
          "commitDateOld": "03/05/16 4:16 AM",
          "commitNameOld": "06413da72efed9a50e49efaf7110c220c88a7f4a",
          "commitAuthorOld": "Junping Du",
          "daysBetweenCommits": 24.11,
          "commitsBetweenForRepo": 182,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,35 @@\n-  private TimelineStore getCachedStore(TimelineEntityGroupId groupId)\n-      throws IOException {\n+  private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n+      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n     EntityCacheItem cacheItem;\n     synchronized (this.cachedLogs) {\n       // Note that the content in the cache log storage may be stale.\n       cacheItem \u003d this.cachedLogs.get(groupId);\n       if (cacheItem \u003d\u003d null) {\n         LOG.debug(\"Set up new cache item for id {}\", groupId);\n-        cacheItem \u003d new EntityCacheItem(getConfig(), fs);\n+        cacheItem \u003d new EntityCacheItem(groupId, getConfig(), fs);\n         AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n         if (appLogs !\u003d null) {\n           LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n           cacheItem.setAppLogs(appLogs);\n           this.cachedLogs.put(groupId, cacheItem);\n+          // Add the reference by the cache\n+          cacheItem.incrRefs();\n         } else {\n           LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n         }\n       }\n     }\n     TimelineStore store \u003d null;\n     if (cacheItem.getAppLogs() !\u003d null) {\n       AppLogs appLogs \u003d cacheItem.getAppLogs();\n       LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n-      store \u003d cacheItem.refreshCache(groupId, aclManager, jsonFactory,\n-          objMapper, metrics);\n+      // Add the reference by the store\n+      cacheItem.incrRefs();\n+      cacheItems.add(cacheItem);\n+      store \u003d cacheItem.refreshCache(aclManager, jsonFactory, objMapper,\n+          metrics);\n     } else {\n       LOG.warn(\"AppLogs for group id {} is null\", groupId);\n     }\n     return store;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private TimelineStore getCachedStore(TimelineEntityGroupId groupId,\n      List\u003cEntityCacheItem\u003e cacheItems) throws IOException {\n    EntityCacheItem cacheItem;\n    synchronized (this.cachedLogs) {\n      // Note that the content in the cache log storage may be stale.\n      cacheItem \u003d this.cachedLogs.get(groupId);\n      if (cacheItem \u003d\u003d null) {\n        LOG.debug(\"Set up new cache item for id {}\", groupId);\n        cacheItem \u003d new EntityCacheItem(groupId, getConfig(), fs);\n        AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n        if (appLogs !\u003d null) {\n          LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n          cacheItem.setAppLogs(appLogs);\n          this.cachedLogs.put(groupId, cacheItem);\n          // Add the reference by the cache\n          cacheItem.incrRefs();\n        } else {\n          LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n        }\n      }\n    }\n    TimelineStore store \u003d null;\n    if (cacheItem.getAppLogs() !\u003d null) {\n      AppLogs appLogs \u003d cacheItem.getAppLogs();\n      LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n      // Add the reference by the store\n      cacheItem.incrRefs();\n      cacheItems.add(cacheItem);\n      store \u003d cacheItem.refreshCache(aclManager, jsonFactory, objMapper,\n          metrics);\n    } else {\n      LOG.warn(\"AppLogs for group id {} is null\", groupId);\n    }\n    return store;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "06413da72efed9a50e49efaf7110c220c88a7f4a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4851. Metric improvements for ATS v1.5 storage components. Li Lu via junping_du.\n",
      "commitDate": "03/05/16 4:16 AM",
      "commitName": "06413da72efed9a50e49efaf7110c220c88a7f4a",
      "commitAuthor": "Junping Du",
      "commitDateOld": "13/04/16 10:38 AM",
      "commitNameOld": "e0cb426758b3d716ff143f723fc16ef2f1e4971b",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 19.73,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   private TimelineStore getCachedStore(TimelineEntityGroupId groupId)\n       throws IOException {\n     EntityCacheItem cacheItem;\n     synchronized (this.cachedLogs) {\n       // Note that the content in the cache log storage may be stale.\n       cacheItem \u003d this.cachedLogs.get(groupId);\n       if (cacheItem \u003d\u003d null) {\n         LOG.debug(\"Set up new cache item for id {}\", groupId);\n         cacheItem \u003d new EntityCacheItem(getConfig(), fs);\n         AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n         if (appLogs !\u003d null) {\n           LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n           cacheItem.setAppLogs(appLogs);\n           this.cachedLogs.put(groupId, cacheItem);\n         } else {\n           LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n         }\n       }\n     }\n     TimelineStore store \u003d null;\n     if (cacheItem.getAppLogs() !\u003d null) {\n       AppLogs appLogs \u003d cacheItem.getAppLogs();\n       LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n       store \u003d cacheItem.refreshCache(groupId, aclManager, jsonFactory,\n-          objMapper);\n+          objMapper, metrics);\n     } else {\n       LOG.warn(\"AppLogs for group id {} is null\", groupId);\n     }\n     return store;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelineStore getCachedStore(TimelineEntityGroupId groupId)\n      throws IOException {\n    EntityCacheItem cacheItem;\n    synchronized (this.cachedLogs) {\n      // Note that the content in the cache log storage may be stale.\n      cacheItem \u003d this.cachedLogs.get(groupId);\n      if (cacheItem \u003d\u003d null) {\n        LOG.debug(\"Set up new cache item for id {}\", groupId);\n        cacheItem \u003d new EntityCacheItem(getConfig(), fs);\n        AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n        if (appLogs !\u003d null) {\n          LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n          cacheItem.setAppLogs(appLogs);\n          this.cachedLogs.put(groupId, cacheItem);\n        } else {\n          LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n        }\n      }\n    }\n    TimelineStore store \u003d null;\n    if (cacheItem.getAppLogs() !\u003d null) {\n      AppLogs appLogs \u003d cacheItem.getAppLogs();\n      LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n      store \u003d cacheItem.refreshCache(groupId, aclManager, jsonFactory,\n          objMapper, metrics);\n    } else {\n      LOG.warn(\"AppLogs for group id {} is null\", groupId);\n    }\n    return store;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java",
      "extendedDetails": {}
    },
    "02f597c5db36ded385413958bdee793ad7eda40e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4265. Provide new timeline plugin storage to support fine-grained entity caching. Contributed by Li Lu and Jason Lowe\n",
      "commitDate": "17/01/16 5:37 PM",
      "commitName": "02f597c5db36ded385413958bdee793ad7eda40e",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,30 @@\n+  private TimelineStore getCachedStore(TimelineEntityGroupId groupId)\n+      throws IOException {\n+    EntityCacheItem cacheItem;\n+    synchronized (this.cachedLogs) {\n+      // Note that the content in the cache log storage may be stale.\n+      cacheItem \u003d this.cachedLogs.get(groupId);\n+      if (cacheItem \u003d\u003d null) {\n+        LOG.debug(\"Set up new cache item for id {}\", groupId);\n+        cacheItem \u003d new EntityCacheItem(getConfig(), fs);\n+        AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n+        if (appLogs !\u003d null) {\n+          LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n+          cacheItem.setAppLogs(appLogs);\n+          this.cachedLogs.put(groupId, cacheItem);\n+        } else {\n+          LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n+        }\n+      }\n+    }\n+    TimelineStore store \u003d null;\n+    if (cacheItem.getAppLogs() !\u003d null) {\n+      AppLogs appLogs \u003d cacheItem.getAppLogs();\n+      LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n+      store \u003d cacheItem.refreshCache(groupId, aclManager, jsonFactory,\n+          objMapper);\n+    } else {\n+      LOG.warn(\"AppLogs for group id {} is null\", groupId);\n+    }\n+    return store;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private TimelineStore getCachedStore(TimelineEntityGroupId groupId)\n      throws IOException {\n    EntityCacheItem cacheItem;\n    synchronized (this.cachedLogs) {\n      // Note that the content in the cache log storage may be stale.\n      cacheItem \u003d this.cachedLogs.get(groupId);\n      if (cacheItem \u003d\u003d null) {\n        LOG.debug(\"Set up new cache item for id {}\", groupId);\n        cacheItem \u003d new EntityCacheItem(getConfig(), fs);\n        AppLogs appLogs \u003d getAndSetAppLogs(groupId.getApplicationId());\n        if (appLogs !\u003d null) {\n          LOG.debug(\"Set applogs {} for group id {}\", appLogs, groupId);\n          cacheItem.setAppLogs(appLogs);\n          this.cachedLogs.put(groupId, cacheItem);\n        } else {\n          LOG.warn(\"AppLogs for groupId {} is set to null!\", groupId);\n        }\n      }\n    }\n    TimelineStore store \u003d null;\n    if (cacheItem.getAppLogs() !\u003d null) {\n      AppLogs appLogs \u003d cacheItem.getAppLogs();\n      LOG.debug(\"try refresh cache {} {}\", groupId, appLogs.getAppId());\n      store \u003d cacheItem.refreshCache(groupId, aclManager, jsonFactory,\n          objMapper);\n    } else {\n      LOG.warn(\"AppLogs for group id {} is null\", groupId);\n    }\n    return store;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timeline-pluginstorage/src/main/java/org/apache/hadoop/yarn/server/timeline/EntityGroupFSTimelineStore.java"
    }
  }
}