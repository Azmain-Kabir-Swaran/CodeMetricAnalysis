{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMAdminCLI.java",
  "functionName": "buildNodeLabelsMapFromStr",
  "functionId": "buildNodeLabelsMapFromStr___args-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
  "functionStartLine": 611,
  "functionEndLine": 658,
  "numCommitsSeen": 66,
  "timeTaken": 4128,
  "changeHistory": [
    "6332a318bc1e2e9d73d7159eab26347bb3f1f9b3",
    "c1afac3a98a4889d30a6ec7574a364fcbb6bb5b0",
    "c1957fef29b07fea70938e971b30532a1e131fd0",
    "fd93e5387b554a78413bc0f14b729e58fea604ea",
    "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab",
    "437322afcaa4b1b260501af160283c97eb589419",
    "0fd97f9c1989a793b882e6678285607472a3f75a",
    "65d95b1a520d4ffdf024dbdfcf11d855a3948056",
    "82567664988b673f1b819a42a4baf31cb0dcb331"
  ],
  "changeHistoryShort": {
    "6332a318bc1e2e9d73d7159eab26347bb3f1f9b3": "Ybodychange",
    "c1afac3a98a4889d30a6ec7574a364fcbb6bb5b0": "Ybodychange",
    "c1957fef29b07fea70938e971b30532a1e131fd0": "Ymultichange(Yexceptionschange,Ybodychange)",
    "fd93e5387b554a78413bc0f14b729e58fea604ea": "Ybodychange",
    "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab": "Ymultichange(Yrename,Ybodychange)",
    "437322afcaa4b1b260501af160283c97eb589419": "Ybodychange",
    "0fd97f9c1989a793b882e6678285607472a3f75a": "Ybodychange",
    "65d95b1a520d4ffdf024dbdfcf11d855a3948056": "Ybodychange",
    "82567664988b673f1b819a42a4baf31cb0dcb331": "Yintroduced"
  },
  "changeHistoryDetails": {
    "6332a318bc1e2e9d73d7159eab26347bb3f1f9b3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6073. Misuse of format specifier in Preconditions.checkArgument (Contributed by Yuanbo Liu via Daniel Templeton)\n",
      "commitDate": "09/01/17 10:12 PM",
      "commitName": "6332a318bc1e2e9d73d7159eab26347bb3f1f9b3",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "07/12/16 3:07 PM",
      "commitNameOld": "72fe54684198b7df5c5fb2114616dff6d17a4402",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 33.3,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       String[] splits \u003d nodeToLabels.split(\"\u003d\");\n       int labelsStartIndex \u003d 0;\n       String nodeIdStr \u003d splits[0];\n \n       if (splits.length \u003d\u003d 2) {\n         splits \u003d splits[1].split(\",\");\n       } else if (nodeToLabels.endsWith(\"\u003d\")) {\n         //case where no labels are mapped to a node\n         splits \u003d new String[0];\n       } else {\n         // \",\" also supported for compatibility\n         splits \u003d nodeToLabels.split(\",\");\n         nodeIdStr \u003d splits[0];\n         labelsStartIndex \u003d 1;\n       }\n \n       Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n           \"node name cannot be empty\");\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d labelsStartIndex; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim());\n         }\n       }\n       \n       int nLabels \u003d map.get(nodeId).size();\n-      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%d labels specified on host\u003d%s\"\n+      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%s labels specified on host\u003d%s\"\n           + \", please note that we do not support specifying multiple\"\n           + \" labels on a single host for now.\", nLabels, nodeIdStr);\n     }\n \n     if (map.isEmpty()) {\n       throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\"\u003d\");\n      int labelsStartIndex \u003d 0;\n      String nodeIdStr \u003d splits[0];\n\n      if (splits.length \u003d\u003d 2) {\n        splits \u003d splits[1].split(\",\");\n      } else if (nodeToLabels.endsWith(\"\u003d\")) {\n        //case where no labels are mapped to a node\n        splits \u003d new String[0];\n      } else {\n        // \",\" also supported for compatibility\n        splits \u003d nodeToLabels.split(\",\");\n        nodeIdStr \u003d splits[0];\n        labelsStartIndex \u003d 1;\n      }\n\n      Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n          \"node name cannot be empty\");\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d labelsStartIndex; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n      \n      int nLabels \u003d map.get(nodeId).size();\n      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%s labels specified on host\u003d%s\"\n          + \", please note that we do not support specifying multiple\"\n          + \" labels on a single host for now.\", nLabels, nodeIdStr);\n    }\n\n    if (map.isEmpty()) {\n      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n    }\n    return map;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "c1afac3a98a4889d30a6ec7574a364fcbb6bb5b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4654. Yarn node label CLI should parse \"\u003d\" correctly when trying to remove all labels on a node. (Naganarasimha G R via rohithsharmaks)\n",
      "commitDate": "18/02/16 12:40 AM",
      "commitName": "c1afac3a98a4889d30a6ec7574a364fcbb6bb5b0",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "13/01/16 8:59 PM",
      "commitNameOld": "62b0d6151362a9860d4d750e6e0d032882af68aa",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 35.15,
      "commitsBetweenForRepo": 252,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,48 @@\n   private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n-      // \",\" also supported for compatibility\n       String[] splits \u003d nodeToLabels.split(\"\u003d\");\n-      int index \u003d 0;\n-      if (splits.length !\u003d 2) {\n+      int labelsStartIndex \u003d 0;\n+      String nodeIdStr \u003d splits[0];\n+\n+      if (splits.length \u003d\u003d 2) {\n+        splits \u003d splits[1].split(\",\");\n+      } else if (nodeToLabels.endsWith(\"\u003d\")) {\n+        //case where no labels are mapped to a node\n+        splits \u003d new String[0];\n+      } else {\n+        // \",\" also supported for compatibility\n         splits \u003d nodeToLabels.split(\",\");\n-        index \u003d 1;\n+        nodeIdStr \u003d splits[0];\n+        labelsStartIndex \u003d 1;\n       }\n \n-      String nodeIdStr \u003d splits[0];\n-      if (index \u003d\u003d 0) {\n-        splits \u003d splits[1].split(\",\");\n-      }\n-      \n       Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n           \"node name cannot be empty\");\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n-      for (int i \u003d index; i \u003c splits.length; i++) {\n+      for (int i \u003d labelsStartIndex; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim());\n         }\n       }\n       \n       int nLabels \u003d map.get(nodeId).size();\n       Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%d labels specified on host\u003d%s\"\n           + \", please note that we do not support specifying multiple\"\n           + \" labels on a single host for now.\", nLabels, nodeIdStr);\n     }\n \n     if (map.isEmpty()) {\n       throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\"\u003d\");\n      int labelsStartIndex \u003d 0;\n      String nodeIdStr \u003d splits[0];\n\n      if (splits.length \u003d\u003d 2) {\n        splits \u003d splits[1].split(\",\");\n      } else if (nodeToLabels.endsWith(\"\u003d\")) {\n        //case where no labels are mapped to a node\n        splits \u003d new String[0];\n      } else {\n        // \",\" also supported for compatibility\n        splits \u003d nodeToLabels.split(\",\");\n        nodeIdStr \u003d splits[0];\n        labelsStartIndex \u003d 1;\n      }\n\n      Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n          \"node name cannot be empty\");\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d labelsStartIndex; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n      \n      int nLabels \u003d map.get(nodeId).size();\n      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%d labels specified on host\u003d%s\"\n          + \", please note that we do not support specifying multiple\"\n          + \" labels on a single host for now.\", nLabels, nodeIdStr);\n    }\n\n    if (map.isEmpty()) {\n      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n    }\n    return map;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "c1957fef29b07fea70938e971b30532a1e131fd0": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-2694. Ensure only single node label specified in ResourceRequest. Contributed by Wangda Tan\n",
      "commitDate": "06/02/15 11:34 AM",
      "commitName": "c1957fef29b07fea70938e971b30532a1e131fd0",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2694. Ensure only single node label specified in ResourceRequest. Contributed by Wangda Tan\n",
          "commitDate": "06/02/15 11:34 AM",
          "commitName": "c1957fef29b07fea70938e971b30532a1e131fd0",
          "commitAuthor": "Jian He",
          "commitDateOld": "27/01/15 3:23 PM",
          "commitNameOld": "fd93e5387b554a78413bc0f14b729e58fea604ea",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.84,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,45 @@\n-  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n-      throws IOException {\n+  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       // \",\" also supported for compatibility\n       String[] splits \u003d nodeToLabels.split(\"\u003d\");\n       int index \u003d 0;\n       if (splits.length !\u003d 2) {\n         splits \u003d nodeToLabels.split(\",\");\n         index \u003d 1;\n       }\n \n       String nodeIdStr \u003d splits[0];\n       if (index \u003d\u003d 0) {\n         splits \u003d splits[1].split(\",\");\n       }\n-\n-      if (nodeIdStr.trim().isEmpty()) {\n-        throw new IOException(\"node name cannot be empty\");\n-      }\n+      \n+      Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n+          \"node name cannot be empty\");\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d index; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim());\n         }\n       }\n+      \n+      int nLabels \u003d map.get(nodeId).size();\n+      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%d labels specified on host\u003d%s\"\n+          + \", please note that we do not support specifying multiple\"\n+          + \" labels on a single host for now.\", nLabels, nodeIdStr);\n     }\n \n     if (map.isEmpty()) {\n       throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      // \",\" also supported for compatibility\n      String[] splits \u003d nodeToLabels.split(\"\u003d\");\n      int index \u003d 0;\n      if (splits.length !\u003d 2) {\n        splits \u003d nodeToLabels.split(\",\");\n        index \u003d 1;\n      }\n\n      String nodeIdStr \u003d splits[0];\n      if (index \u003d\u003d 0) {\n        splits \u003d splits[1].split(\",\");\n      }\n      \n      Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n          \"node name cannot be empty\");\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d index; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n      \n      int nLabels \u003d map.get(nodeId).size();\n      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%d labels specified on host\u003d%s\"\n          + \", please note that we do not support specifying multiple\"\n          + \" labels on a single host for now.\", nLabels, nodeIdStr);\n    }\n\n    if (map.isEmpty()) {\n      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n    }\n    return map;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2694. Ensure only single node label specified in ResourceRequest. Contributed by Wangda Tan\n",
          "commitDate": "06/02/15 11:34 AM",
          "commitName": "c1957fef29b07fea70938e971b30532a1e131fd0",
          "commitAuthor": "Jian He",
          "commitDateOld": "27/01/15 3:23 PM",
          "commitNameOld": "fd93e5387b554a78413bc0f14b729e58fea604ea",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 9.84,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,45 @@\n-  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n-      throws IOException {\n+  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       // \",\" also supported for compatibility\n       String[] splits \u003d nodeToLabels.split(\"\u003d\");\n       int index \u003d 0;\n       if (splits.length !\u003d 2) {\n         splits \u003d nodeToLabels.split(\",\");\n         index \u003d 1;\n       }\n \n       String nodeIdStr \u003d splits[0];\n       if (index \u003d\u003d 0) {\n         splits \u003d splits[1].split(\",\");\n       }\n-\n-      if (nodeIdStr.trim().isEmpty()) {\n-        throw new IOException(\"node name cannot be empty\");\n-      }\n+      \n+      Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n+          \"node name cannot be empty\");\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d index; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim());\n         }\n       }\n+      \n+      int nLabels \u003d map.get(nodeId).size();\n+      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%d labels specified on host\u003d%s\"\n+          + \", please note that we do not support specifying multiple\"\n+          + \" labels on a single host for now.\", nLabels, nodeIdStr);\n     }\n \n     if (map.isEmpty()) {\n       throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args) {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      // \",\" also supported for compatibility\n      String[] splits \u003d nodeToLabels.split(\"\u003d\");\n      int index \u003d 0;\n      if (splits.length !\u003d 2) {\n        splits \u003d nodeToLabels.split(\",\");\n        index \u003d 1;\n      }\n\n      String nodeIdStr \u003d splits[0];\n      if (index \u003d\u003d 0) {\n        splits \u003d splits[1].split(\",\");\n      }\n      \n      Preconditions.checkArgument(!nodeIdStr.trim().isEmpty(),\n          \"node name cannot be empty\");\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d index; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n      \n      int nLabels \u003d map.get(nodeId).size();\n      Preconditions.checkArgument(nLabels \u003c\u003d 1, \"%d labels specified on host\u003d%s\"\n          + \", please note that we do not support specifying multiple\"\n          + \" labels on a single host for now.\", nLabels, nodeIdStr);\n    }\n\n    if (map.isEmpty()) {\n      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n    }\n    return map;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "fd93e5387b554a78413bc0f14b729e58fea604ea": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3028. Better syntax for replaceLabelsOnNode in RMAdmin CLI. Contributed by Rohith Sharmaks\n",
      "commitDate": "27/01/15 3:23 PM",
      "commitName": "fd93e5387b554a78413bc0f14b729e58fea604ea",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "23/12/14 6:23 PM",
      "commitNameOld": "e1ee0d45ea3315e7fbe1d28a7a35a0ce0c54483b",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 34.88,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,42 @@\n   private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n       throws IOException {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n-      String[] splits \u003d nodeToLabels.split(\",\");\n+      // \",\" also supported for compatibility\n+      String[] splits \u003d nodeToLabels.split(\"\u003d\");\n+      int index \u003d 0;\n+      if (splits.length !\u003d 2) {\n+        splits \u003d nodeToLabels.split(\",\");\n+        index \u003d 1;\n+      }\n+\n       String nodeIdStr \u003d splits[0];\n+      if (index \u003d\u003d 0) {\n+        splits \u003d splits[1].split(\",\");\n+      }\n \n       if (nodeIdStr.trim().isEmpty()) {\n         throw new IOException(\"node name cannot be empty\");\n       }\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n-      for (int i \u003d 1; i \u003c splits.length; i++) {\n+      for (int i \u003d index; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim());\n         }\n       }\n     }\n \n     if (map.isEmpty()) {\n       throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n     }\n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n      throws IOException {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      // \",\" also supported for compatibility\n      String[] splits \u003d nodeToLabels.split(\"\u003d\");\n      int index \u003d 0;\n      if (splits.length !\u003d 2) {\n        splits \u003d nodeToLabels.split(\",\");\n        index \u003d 1;\n      }\n\n      String nodeIdStr \u003d splits[0];\n      if (index \u003d\u003d 0) {\n        splits \u003d splits[1].split(\",\");\n      }\n\n      if (nodeIdStr.trim().isEmpty()) {\n        throw new IOException(\"node name cannot be empty\");\n      }\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d index; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n    }\n\n    if (map.isEmpty()) {\n      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n    }\n    return map;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab": {
      "type": "Ymultichange(Yrename,Ybodychange)",
      "commitMessage": "YARN-2762. Fixed RMAdminCLI to trim and check node-label related arguments before sending to RM. Contributed by Rohith Sharmaks\n",
      "commitDate": "16/12/14 11:00 AM",
      "commitName": "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-2762. Fixed RMAdminCLI to trim and check node-label related arguments before sending to RM. Contributed by Rohith Sharmaks\n",
          "commitDate": "16/12/14 11:00 AM",
          "commitName": "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/12/14 5:56 PM",
          "commitNameOld": "437322afcaa4b1b260501af160283c97eb589419",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 6.71,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,32 @@\n-  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n+  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n       throws IOException {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       String[] splits \u003d nodeToLabels.split(\",\");\n       String nodeIdStr \u003d splits[0];\n \n       if (nodeIdStr.trim().isEmpty()) {\n         throw new IOException(\"node name cannot be empty\");\n       }\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d 1; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim());\n         }\n       }\n     }\n \n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n+    }\n     return map;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n      throws IOException {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\",\");\n      String nodeIdStr \u003d splits[0];\n\n      if (nodeIdStr.trim().isEmpty()) {\n        throw new IOException(\"node name cannot be empty\");\n      }\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d 1; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n    }\n\n    if (map.isEmpty()) {\n      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n    }\n    return map;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
          "extendedDetails": {
            "oldValue": "buildNodeLabelsFromStr",
            "newValue": "buildNodeLabelsMapFromStr"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2762. Fixed RMAdminCLI to trim and check node-label related arguments before sending to RM. Contributed by Rohith Sharmaks\n",
          "commitDate": "16/12/14 11:00 AM",
          "commitName": "c65f1b382ec5ec93dccf459dbf8b2c93c3e150ab",
          "commitAuthor": "Jian He",
          "commitDateOld": "09/12/14 5:56 PM",
          "commitNameOld": "437322afcaa4b1b260501af160283c97eb589419",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 6.71,
          "commitsBetweenForRepo": 48,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,29 +1,32 @@\n-  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n+  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n       throws IOException {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       String[] splits \u003d nodeToLabels.split(\",\");\n       String nodeIdStr \u003d splits[0];\n \n       if (nodeIdStr.trim().isEmpty()) {\n         throw new IOException(\"node name cannot be empty\");\n       }\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d 1; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim());\n         }\n       }\n     }\n \n+    if (map.isEmpty()) {\n+      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n+    }\n     return map;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsMapFromStr(String args)\n      throws IOException {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\",\");\n      String nodeIdStr \u003d splits[0];\n\n      if (nodeIdStr.trim().isEmpty()) {\n        throw new IOException(\"node name cannot be empty\");\n      }\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d 1; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n    }\n\n    if (map.isEmpty()) {\n      throw new IllegalArgumentException(NO_MAPPING_ERR_MSG);\n    }\n    return map;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
          "extendedDetails": {}
        }
      ]
    },
    "437322afcaa4b1b260501af160283c97eb589419": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2924. Fixed RMAdminCLI to not convert node labels to lower case. Contributed by Wangda Tan\n",
      "commitDate": "09/12/14 5:56 PM",
      "commitName": "437322afcaa4b1b260501af160283c97eb589419",
      "commitAuthor": "Jian He",
      "commitDateOld": "11/11/14 12:33 PM",
      "commitNameOld": "0fd97f9c1989a793b882e6678285607472a3f75a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 28.22,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n       throws IOException {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       String[] splits \u003d nodeToLabels.split(\",\");\n       String nodeIdStr \u003d splits[0];\n \n       if (nodeIdStr.trim().isEmpty()) {\n         throw new IOException(\"node name cannot be empty\");\n       }\n \n       NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d 1; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n-          map.get(nodeId).add(splits[i].trim().toLowerCase());\n+          map.get(nodeId).add(splits[i].trim());\n         }\n       }\n     }\n \n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n      throws IOException {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\",\");\n      String nodeIdStr \u003d splits[0];\n\n      if (nodeIdStr.trim().isEmpty()) {\n        throw new IOException(\"node name cannot be empty\");\n      }\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d 1; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim());\n        }\n      }\n    }\n\n    return map;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "0fd97f9c1989a793b882e6678285607472a3f75a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2843. Fixed NodeLabelsManager to trim inputs for hosts and labels so as to make them work correctly. Contributed by Wangda Tan.\n",
      "commitDate": "11/11/14 12:33 PM",
      "commitName": "0fd97f9c1989a793b882e6678285607472a3f75a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "30/10/14 10:59 PM",
      "commitNameOld": "e0233c16ebd06bb3aabeb523cd17259008e243ef",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 11.61,
      "commitsBetweenForRepo": 116,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,29 @@\n   private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n       throws IOException {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       String[] splits \u003d nodeToLabels.split(\",\");\n       String nodeIdStr \u003d splits[0];\n \n       if (nodeIdStr.trim().isEmpty()) {\n         throw new IOException(\"node name cannot be empty\");\n       }\n \n-      String nodeName;\n-      int port;\n-      if (nodeIdStr.contains(\":\")) {\n-        nodeName \u003d nodeIdStr.substring(0, nodeIdStr.indexOf(\":\"));\n-        port \u003d Integer.valueOf(nodeIdStr.substring(nodeIdStr.indexOf(\":\") + 1));\n-      } else {\n-        nodeName \u003d nodeIdStr;\n-        port \u003d 0;\n-      }\n-\n-      NodeId nodeId \u003d NodeId.newInstance(nodeName, port);\n-\n+      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d 1; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim().toLowerCase());\n         }\n       }\n     }\n \n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n      throws IOException {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\",\");\n      String nodeIdStr \u003d splits[0];\n\n      if (nodeIdStr.trim().isEmpty()) {\n        throw new IOException(\"node name cannot be empty\");\n      }\n\n      NodeId nodeId \u003d ConverterUtils.toNodeIdWithDefaultPort(nodeIdStr);\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d 1; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim().toLowerCase());\n        }\n      }\n    }\n\n    return map;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "65d95b1a520d4ffdf024dbdfcf11d855a3948056": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2723. Fix rmadmin -replaceLabelsOnNode does not correctly parse\nport. Contributed by Naganarasimha G R\n",
      "commitDate": "25/10/14 12:45 PM",
      "commitName": "65d95b1a520d4ffdf024dbdfcf11d855a3948056",
      "commitAuthor": "Xuan",
      "commitDateOld": "18/10/14 12:07 PM",
      "commitNameOld": "82567664988b673f1b819a42a4baf31cb0dcb331",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.03,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n       throws IOException {\n     Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n \n     for (String nodeToLabels : args.split(\"[ \\n]\")) {\n       nodeToLabels \u003d nodeToLabels.trim();\n       if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n         continue;\n       }\n \n       String[] splits \u003d nodeToLabels.split(\",\");\n       String nodeIdStr \u003d splits[0];\n \n       if (nodeIdStr.trim().isEmpty()) {\n         throw new IOException(\"node name cannot be empty\");\n       }\n \n       String nodeName;\n       int port;\n       if (nodeIdStr.contains(\":\")) {\n         nodeName \u003d nodeIdStr.substring(0, nodeIdStr.indexOf(\":\"));\n-        port \u003d Integer.valueOf(nodeIdStr.substring(nodeIdStr.indexOf(\":\")));\n+        port \u003d Integer.valueOf(nodeIdStr.substring(nodeIdStr.indexOf(\":\") + 1));\n       } else {\n         nodeName \u003d nodeIdStr;\n         port \u003d 0;\n       }\n \n       NodeId nodeId \u003d NodeId.newInstance(nodeName, port);\n \n       map.put(nodeId, new HashSet\u003cString\u003e());\n \n       for (int i \u003d 1; i \u003c splits.length; i++) {\n         if (!splits[i].trim().isEmpty()) {\n           map.get(nodeId).add(splits[i].trim().toLowerCase());\n         }\n       }\n     }\n \n     return map;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n      throws IOException {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\",\");\n      String nodeIdStr \u003d splits[0];\n\n      if (nodeIdStr.trim().isEmpty()) {\n        throw new IOException(\"node name cannot be empty\");\n      }\n\n      String nodeName;\n      int port;\n      if (nodeIdStr.contains(\":\")) {\n        nodeName \u003d nodeIdStr.substring(0, nodeIdStr.indexOf(\":\"));\n        port \u003d Integer.valueOf(nodeIdStr.substring(nodeIdStr.indexOf(\":\") + 1));\n      } else {\n        nodeName \u003d nodeIdStr;\n        port \u003d 0;\n      }\n\n      NodeId nodeId \u003d NodeId.newInstance(nodeName, port);\n\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d 1; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim().toLowerCase());\n        }\n      }\n    }\n\n    return map;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java",
      "extendedDetails": {}
    },
    "82567664988b673f1b819a42a4baf31cb0dcb331": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2504. Enhanced RM Admin CLI to support management of node-labels. Contribyted by Wangda Tan.\n",
      "commitDate": "18/10/14 12:07 PM",
      "commitName": "82567664988b673f1b819a42a4baf31cb0dcb331",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,40 @@\n+  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n+      throws IOException {\n+    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n+\n+    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n+      nodeToLabels \u003d nodeToLabels.trim();\n+      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n+        continue;\n+      }\n+\n+      String[] splits \u003d nodeToLabels.split(\",\");\n+      String nodeIdStr \u003d splits[0];\n+\n+      if (nodeIdStr.trim().isEmpty()) {\n+        throw new IOException(\"node name cannot be empty\");\n+      }\n+\n+      String nodeName;\n+      int port;\n+      if (nodeIdStr.contains(\":\")) {\n+        nodeName \u003d nodeIdStr.substring(0, nodeIdStr.indexOf(\":\"));\n+        port \u003d Integer.valueOf(nodeIdStr.substring(nodeIdStr.indexOf(\":\")));\n+      } else {\n+        nodeName \u003d nodeIdStr;\n+        port \u003d 0;\n+      }\n+\n+      NodeId nodeId \u003d NodeId.newInstance(nodeName, port);\n+\n+      map.put(nodeId, new HashSet\u003cString\u003e());\n+\n+      for (int i \u003d 1; i \u003c splits.length; i++) {\n+        if (!splits[i].trim().isEmpty()) {\n+          map.get(nodeId).add(splits[i].trim().toLowerCase());\n+        }\n+      }\n+    }\n+\n+    return map;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Map\u003cNodeId, Set\u003cString\u003e\u003e buildNodeLabelsFromStr(String args)\n      throws IOException {\n    Map\u003cNodeId, Set\u003cString\u003e\u003e map \u003d new HashMap\u003cNodeId, Set\u003cString\u003e\u003e();\n\n    for (String nodeToLabels : args.split(\"[ \\n]\")) {\n      nodeToLabels \u003d nodeToLabels.trim();\n      if (nodeToLabels.isEmpty() || nodeToLabels.startsWith(\"#\")) {\n        continue;\n      }\n\n      String[] splits \u003d nodeToLabels.split(\",\");\n      String nodeIdStr \u003d splits[0];\n\n      if (nodeIdStr.trim().isEmpty()) {\n        throw new IOException(\"node name cannot be empty\");\n      }\n\n      String nodeName;\n      int port;\n      if (nodeIdStr.contains(\":\")) {\n        nodeName \u003d nodeIdStr.substring(0, nodeIdStr.indexOf(\":\"));\n        port \u003d Integer.valueOf(nodeIdStr.substring(nodeIdStr.indexOf(\":\")));\n      } else {\n        nodeName \u003d nodeIdStr;\n        port \u003d 0;\n      }\n\n      NodeId nodeId \u003d NodeId.newInstance(nodeName, port);\n\n      map.put(nodeId, new HashSet\u003cString\u003e());\n\n      for (int i \u003d 1; i \u003c splits.length; i++) {\n        if (!splits[i].trim().isEmpty()) {\n          map.get(nodeId).add(splits[i].trim().toLowerCase());\n        }\n      }\n    }\n\n    return map;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/RMAdminCLI.java"
    }
  }
}