{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "getIpAndHost",
  "functionId": "getIpAndHost___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 1051,
  "functionEndLine": 1104,
  "numCommitsSeen": 91,
  "timeTaken": 5110,
  "changeHistory": [
    "29465bf169a7e348a4f32265083450faf66d5631",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "f2fa736f0ab139b5251d115fd75b833d1d7d1dcd",
    "ce74e64363abc64561263be70a923ab3e67f043f",
    "ce05c6e9811bca0bdc01152c2a82508a639480f5",
    "e5e1851d803bf8d8b96fec1b5c0058014e9329d0",
    "bfb4d950596d6198e473045dac6eb36c685b0319"
  ],
  "changeHistoryShort": {
    "29465bf169a7e348a4f32265083450faf66d5631": "Ybodychange",
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": "Ybodychange",
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": "Ybodychange",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ybodychange",
    "f2fa736f0ab139b5251d115fd75b833d1d7d1dcd": "Ybodychange",
    "ce74e64363abc64561263be70a923ab3e67f043f": "Ybodychange",
    "ce05c6e9811bca0bdc01152c2a82508a639480f5": "Ybodychange",
    "e5e1851d803bf8d8b96fec1b5c0058014e9329d0": "Ybodychange",
    "bfb4d950596d6198e473045dac6eb36c685b0319": "Yintroduced"
  },
  "changeHistoryDetails": {
    "29465bf169a7e348a4f32265083450faf66d5631": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9560. Restructure DockerLinuxContainerRuntime to extend OCIContainerRuntime.\n           Contributed by Eric Badger, Jim Brennan, Craig Condit\n",
      "commitDate": "28/06/19 2:18 PM",
      "commitName": "29465bf169a7e348a4f32265083450faf66d5631",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "15/04/19 11:24 AM",
      "commitNameOld": "254efc93588beff6b93fd887ddd43a8e14ea4903",
      "commitAuthorOld": "Eric Badger",
      "daysBetweenCommits": 74.12,
      "commitsBetweenForRepo": 531,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public String[] getIpAndHost(Container container) {\n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerIdStr).getIpAndHost();\n     try {\n       String output \u003d executeDockerInspect(containerId, inspectCommand);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n       // strip off quotes if any\n       output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n       if (ips.equals(\"\")) {\n         String network;\n         try {\n           network \u003d container.getLaunchContext().getEnvironment()\n-              .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n+              .get(ENV_DOCKER_CONTAINER_NETWORK);\n           if (network \u003d\u003d null || network.isEmpty()) {\n             network \u003d defaultNetwork;\n           }\n         } catch (NullPointerException e) {\n           network \u003d defaultNetwork;\n         }\n         boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n         if (useHostNetwork) {\n           // Report back node manager IP in the event where docker\n           // inspect reports no IP address.  This is for bridging a gap for\n           // docker environment to run with host network.\n           InetAddress address;\n           try {\n             address \u003d InetAddress.getLocalHost();\n             ips \u003d address.getHostAddress();\n           } catch (UnknownHostException e) {\n             LOG.error(\"Can not determine IP for container:\"\n                 + containerId);\n           }\n         }\n       }\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerIdStr).getIpAndHost();\n    try {\n      String output \u003d executeDockerInspect(containerId, inspectCommand);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      // strip off quotes if any\n      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      if (ips.equals(\"\")) {\n        String network;\n        try {\n          network \u003d container.getLaunchContext().getEnvironment()\n              .get(ENV_DOCKER_CONTAINER_NETWORK);\n          if (network \u003d\u003d null || network.isEmpty()) {\n            network \u003d defaultNetwork;\n          }\n        } catch (NullPointerException e) {\n          network \u003d defaultNetwork;\n        }\n        boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n        if (useHostNetwork) {\n          // Report back node manager IP in the event where docker\n          // inspect reports no IP address.  This is for bridging a gap for\n          // docker environment to run with host network.\n          InetAddress address;\n          try {\n            address \u003d InetAddress.getLocalHost();\n            ips \u003d address.getHostAddress();\n          } catch (UnknownHostException e) {\n            LOG.error(\"Can not determine IP for container:\"\n                + containerId);\n          }\n        }\n      }\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "bf8a1750e99cfbfa76021ce51b6514c74c06f498": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8706. Updated docker container stop logic to avoid double kill.\n           Contributed by Chandni Singh\n",
      "commitDate": "07/09/18 5:18 PM",
      "commitName": "bf8a1750e99cfbfa76021ce51b6514c74c06f498",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "05/09/18 5:47 AM",
      "commitNameOld": "dffb7bfe6cd2292162f08ec0bded736bc5194c3f",
      "commitAuthorOld": "Shane Kumpf",
      "daysBetweenCommits": 2.48,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,54 @@\n   public String[] getIpAndHost(Container container) {\n     ContainerId containerId \u003d container.getContainerId();\n     String containerIdStr \u003d containerId.toString();\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerIdStr).getIpAndHost();\n     try {\n-      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n-          containerId, nmContext);\n-      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n-          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n-      privOp.appendArgs(commandFile);\n-      String output \u003d privilegedOperationExecutor\n-          .executePrivilegedOperation(null, privOp, null,\n-              null, true, false);\n+      String output \u003d executeDockerInspect(containerId, inspectCommand);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n       // strip off quotes if any\n       output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n       if (ips.equals(\"\")) {\n         String network;\n         try {\n           network \u003d container.getLaunchContext().getEnvironment()\n               .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n           if (network \u003d\u003d null || network.isEmpty()) {\n             network \u003d defaultNetwork;\n           }\n         } catch (NullPointerException e) {\n           network \u003d defaultNetwork;\n         }\n         boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n         if (useHostNetwork) {\n           // Report back node manager IP in the event where docker\n           // inspect reports no IP address.  This is for bridging a gap for\n           // docker environment to run with host network.\n           InetAddress address;\n           try {\n             address \u003d InetAddress.getLocalHost();\n             ips \u003d address.getHostAddress();\n           } catch (UnknownHostException e) {\n             LOG.error(\"Can not determine IP for container:\"\n                 + containerId);\n           }\n         }\n       }\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerIdStr).getIpAndHost();\n    try {\n      String output \u003d executeDockerInspect(containerId, inspectCommand);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      // strip off quotes if any\n      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      if (ips.equals(\"\")) {\n        String network;\n        try {\n          network \u003d container.getLaunchContext().getEnvironment()\n              .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n          if (network \u003d\u003d null || network.isEmpty()) {\n            network \u003d defaultNetwork;\n          }\n        } catch (NullPointerException e) {\n          network \u003d defaultNetwork;\n        }\n        boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n        if (useHostNetwork) {\n          // Report back node manager IP in the event where docker\n          // inspect reports no IP address.  This is for bridging a gap for\n          // docker environment to run with host network.\n          InetAddress address;\n          try {\n            address \u003d InetAddress.getLocalHost();\n            ips \u003d address.getHostAddress();\n          } catch (UnknownHostException e) {\n            LOG.error(\"Can not determine IP for container:\"\n                + containerId);\n          }\n        }\n      }\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "883f68222a9cfd06f79a8fcd75ec9fef00abc035": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8209.  Fixed NPE in Yarn Service deletion.\n            Contributed by Eric Badger\n",
      "commitDate": "02/05/18 11:33 AM",
      "commitName": "883f68222a9cfd06f79a8fcd75ec9fef00abc035",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "30/04/18 4:12 PM",
      "commitNameOld": "a966ec6e23b3ac8e233b2cf9b9ddaa6628a8c996",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 1.81,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,61 @@\n   public String[] getIpAndHost(Container container) {\n-    String containerId \u003d container.getContainerId().toString();\n+    ContainerId containerId \u003d container.getContainerId();\n+    String containerIdStr \u003d containerId.toString();\n     DockerInspectCommand inspectCommand \u003d\n-        new DockerInspectCommand(containerId).getIpAndHost();\n+        new DockerInspectCommand(containerIdStr).getIpAndHost();\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n-          container, nmContext);\n+          containerId, nmContext);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n       // strip off quotes if any\n       output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n       if (ips.equals(\"\")) {\n         String network;\n         try {\n           network \u003d container.getLaunchContext().getEnvironment()\n               .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n           if (network \u003d\u003d null || network.isEmpty()) {\n             network \u003d defaultNetwork;\n           }\n         } catch (NullPointerException e) {\n           network \u003d defaultNetwork;\n         }\n         boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n         if (useHostNetwork) {\n           // Report back node manager IP in the event where docker\n           // inspect reports no IP address.  This is for bridging a gap for\n           // docker environment to run with host network.\n           InetAddress address;\n           try {\n             address \u003d InetAddress.getLocalHost();\n             ips \u003d address.getHostAddress();\n           } catch (UnknownHostException e) {\n             LOG.error(\"Can not determine IP for container:\"\n                 + containerId);\n           }\n         }\n       }\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    ContainerId containerId \u003d container.getContainerId();\n    String containerIdStr \u003d containerId.toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerIdStr).getIpAndHost();\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n          containerId, nmContext);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      // strip off quotes if any\n      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      if (ips.equals(\"\")) {\n        String network;\n        try {\n          network \u003d container.getLaunchContext().getEnvironment()\n              .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n          if (network \u003d\u003d null || network.isEmpty()) {\n            network \u003d defaultNetwork;\n          }\n        } catch (NullPointerException e) {\n          network \u003d defaultNetwork;\n        }\n        boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n        if (useHostNetwork) {\n          // Report back node manager IP in the event where docker\n          // inspect reports no IP address.  This is for bridging a gap for\n          // docker environment to run with host network.\n          InetAddress address;\n          try {\n            address \u003d InetAddress.getLocalHost();\n            ips \u003d address.getHostAddress();\n          } catch (UnknownHostException e) {\n            LOG.error(\"Can not determine IP for container:\"\n                + containerId);\n          }\n        }\n      }\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/04/18 11:24 AM",
      "commitNameOld": "933477e9e0526e2ed81ea454f8806de31981822a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,60 @@\n   public String[] getIpAndHost(Container container) {\n     String containerId \u003d container.getContainerId().toString();\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerId).getIpAndHost();\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n-          containerId);\n+          container, nmContext);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n       // strip off quotes if any\n       output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n       if (ips.equals(\"\")) {\n         String network;\n         try {\n           network \u003d container.getLaunchContext().getEnvironment()\n               .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n           if (network \u003d\u003d null || network.isEmpty()) {\n             network \u003d defaultNetwork;\n           }\n         } catch (NullPointerException e) {\n           network \u003d defaultNetwork;\n         }\n         boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n         if (useHostNetwork) {\n           // Report back node manager IP in the event where docker\n           // inspect reports no IP address.  This is for bridging a gap for\n           // docker environment to run with host network.\n           InetAddress address;\n           try {\n             address \u003d InetAddress.getLocalHost();\n             ips \u003d address.getHostAddress();\n           } catch (UnknownHostException e) {\n             LOG.error(\"Can not determine IP for container:\"\n                 + containerId);\n           }\n         }\n       }\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    String containerId \u003d container.getContainerId().toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId).getIpAndHost();\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n          container, nmContext);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      // strip off quotes if any\n      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      if (ips.equals(\"\")) {\n        String network;\n        try {\n          network \u003d container.getLaunchContext().getEnvironment()\n              .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n          if (network \u003d\u003d null || network.isEmpty()) {\n            network \u003d defaultNetwork;\n          }\n        } catch (NullPointerException e) {\n          network \u003d defaultNetwork;\n        }\n        boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n        if (useHostNetwork) {\n          // Report back node manager IP in the event where docker\n          // inspect reports no IP address.  This is for bridging a gap for\n          // docker environment to run with host network.\n          InetAddress address;\n          try {\n            address \u003d InetAddress.getLocalHost();\n            ips \u003d address.getHostAddress();\n          } catch (UnknownHostException e) {\n            LOG.error(\"Can not determine IP for container:\"\n                + containerId);\n          }\n        }\n      }\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "f2fa736f0ab139b5251d115fd75b833d1d7d1dcd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7797. Docker host network can not obtain IP address for RegistryDNS. Contributed by Eric Yang\n",
      "commitDate": "26/01/18 9:32 AM",
      "commitName": "f2fa736f0ab139b5251d115fd75b833d1d7d1dcd",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "25/01/18 5:37 PM",
      "commitNameOld": "2e5865606b7701ee79d0d297238ab58a07a9f61f",
      "commitAuthorOld": "Miklos Szegedi",
      "daysBetweenCommits": 0.66,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,60 @@\n   public String[] getIpAndHost(Container container) {\n     String containerId \u003d container.getContainerId().toString();\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerId).getIpAndHost();\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n           containerId);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n       // strip off quotes if any\n       output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n+      if (ips.equals(\"\")) {\n+        String network;\n+        try {\n+          network \u003d container.getLaunchContext().getEnvironment()\n+              .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n+          if (network \u003d\u003d null || network.isEmpty()) {\n+            network \u003d defaultNetwork;\n+          }\n+        } catch (NullPointerException e) {\n+          network \u003d defaultNetwork;\n+        }\n+        boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n+        if (useHostNetwork) {\n+          // Report back node manager IP in the event where docker\n+          // inspect reports no IP address.  This is for bridging a gap for\n+          // docker environment to run with host network.\n+          InetAddress address;\n+          try {\n+            address \u003d InetAddress.getLocalHost();\n+            ips \u003d address.getHostAddress();\n+          } catch (UnknownHostException e) {\n+            LOG.error(\"Can not determine IP for container:\"\n+                + containerId);\n+          }\n+        }\n+      }\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    String containerId \u003d container.getContainerId().toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId).getIpAndHost();\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n          containerId);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      // strip off quotes if any\n      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      if (ips.equals(\"\")) {\n        String network;\n        try {\n          network \u003d container.getLaunchContext().getEnvironment()\n              .get(\"YARN_CONTAINER_RUNTIME_DOCKER_CONTAINER_NETWORK\");\n          if (network \u003d\u003d null || network.isEmpty()) {\n            network \u003d defaultNetwork;\n          }\n        } catch (NullPointerException e) {\n          network \u003d defaultNetwork;\n        }\n        boolean useHostNetwork \u003d network.equalsIgnoreCase(\"host\");\n        if (useHostNetwork) {\n          // Report back node manager IP in the event where docker\n          // inspect reports no IP address.  This is for bridging a gap for\n          // docker environment to run with host network.\n          InetAddress address;\n          try {\n            address \u003d InetAddress.getLocalHost();\n            ips \u003d address.getHostAddress();\n          } catch (UnknownHostException e) {\n            LOG.error(\"Can not determine IP for container:\"\n                + containerId);\n          }\n        }\n      }\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "ce74e64363abc64561263be70a923ab3e67f043f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7210. Some NPE fixes in Registry DNS. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "8d335e59cf9fa794a379b12f06d2d54f1b781118",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 17,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public String[] getIpAndHost(Container container) {\n     String containerId \u003d container.getContainerId().toString();\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerId).getIpAndHost();\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n           containerId);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n+      // strip off quotes if any\n+      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n-      // strip off quotes if any\n-      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    String containerId \u003d container.getContainerId().toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId).getIpAndHost();\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n          containerId);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      // strip off quotes if any\n      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "ce05c6e9811bca0bdc01152c2a82508a639480f5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6545. Followup fix for YARN-6405. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "ce05c6e9811bca0bdc01152c2a82508a639480f5",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "02/11/17 7:37 AM",
      "commitNameOld": "d00b6f7c1ff2d7569ae9efdc6823ebcfb86ef2d4",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 4.29,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,34 @@\n   public String[] getIpAndHost(Container container) {\n     String containerId \u003d container.getContainerId().toString();\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerId).getIpAndHost();\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n           containerId);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n               null, true, false);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n+      // strip off quotes if any\n+      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    String containerId \u003d container.getContainerId().toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId).getIpAndHost();\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n          containerId);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      // strip off quotes if any\n      output \u003d output.replaceAll(\"[\u0027\\\"]\", \"\");\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "e5e1851d803bf8d8b96fec1b5c0058014e9329d0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7034. DefaultLinuxContainerRuntime and DockerLinuxContainerRuntime sends client environment variables to container-executor. Contributed by Miklos Szegedi.\n",
      "commitDate": "21/09/17 2:01 PM",
      "commitName": "e5e1851d803bf8d8b96fec1b5c0058014e9329d0",
      "commitAuthor": "Junping Du",
      "commitDateOld": "21/09/17 6:38 AM",
      "commitNameOld": "10d7493587643b52cee5fde87eca9ef99c422a70",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 0.31,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public String[] getIpAndHost(Container container) {\n     String containerId \u003d container.getContainerId().toString();\n     DockerInspectCommand inspectCommand \u003d\n         new DockerInspectCommand(containerId).getIpAndHost();\n     try {\n       String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n           containerId);\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n       privOp.appendArgs(commandFile);\n       String output \u003d privilegedOperationExecutor\n           .executePrivilegedOperation(null, privOp, null,\n-              container.getLaunchContext().getEnvironment(), true, false);\n+              null, true, false);\n       LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n       int index \u003d output.lastIndexOf(\u0027,\u0027);\n       if (index \u003d\u003d -1) {\n         LOG.error(\"Incorrect format for ip and host\");\n         return null;\n       }\n       String ips \u003d output.substring(0, index).trim();\n       String host \u003d output.substring(index+1).trim();\n       String[] ipAndHost \u003d new String[2];\n       ipAndHost[0] \u003d ips;\n       ipAndHost[1] \u003d host;\n       return ipAndHost;\n     } catch (ContainerExecutionException e) {\n       LOG.error(\"Error when writing command to temp file\", e);\n     } catch (PrivilegedOperationException e) {\n       LOG.error(\"Error when executing command.\", e);\n     }\n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    String containerId \u003d container.getContainerId().toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId).getIpAndHost();\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n          containerId);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              null, true, false);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "bfb4d950596d6198e473045dac6eb36c685b0319": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5430. Return container\u0027s ip and host from NM ContainerStatus call. Contributed by Jian He.\n",
      "commitDate": "26/08/16 4:00 AM",
      "commitName": "bfb4d950596d6198e473045dac6eb36c685b0319",
      "commitAuthor": "Varun Vasudev",
      "diff": "@@ -0,0 +1,32 @@\n+  public String[] getIpAndHost(Container container) {\n+    String containerId \u003d container.getContainerId().toString();\n+    DockerInspectCommand inspectCommand \u003d\n+        new DockerInspectCommand(containerId).getIpAndHost();\n+    try {\n+      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n+          containerId);\n+      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n+          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n+      privOp.appendArgs(commandFile);\n+      String output \u003d privilegedOperationExecutor\n+          .executePrivilegedOperation(null, privOp, null,\n+              container.getLaunchContext().getEnvironment(), true, false);\n+      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n+      int index \u003d output.lastIndexOf(\u0027,\u0027);\n+      if (index \u003d\u003d -1) {\n+        LOG.error(\"Incorrect format for ip and host\");\n+        return null;\n+      }\n+      String ips \u003d output.substring(0, index).trim();\n+      String host \u003d output.substring(index+1).trim();\n+      String[] ipAndHost \u003d new String[2];\n+      ipAndHost[0] \u003d ips;\n+      ipAndHost[1] \u003d host;\n+      return ipAndHost;\n+    } catch (ContainerExecutionException e) {\n+      LOG.error(\"Error when writing command to temp file\", e);\n+    } catch (PrivilegedOperationException e) {\n+      LOG.error(\"Error when executing command.\", e);\n+    }\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public String[] getIpAndHost(Container container) {\n    String containerId \u003d container.getContainerId().toString();\n    DockerInspectCommand inspectCommand \u003d\n        new DockerInspectCommand(containerId).getIpAndHost();\n    try {\n      String commandFile \u003d dockerClient.writeCommandToTempFile(inspectCommand,\n          containerId);\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.RUN_DOCKER_CMD);\n      privOp.appendArgs(commandFile);\n      String output \u003d privilegedOperationExecutor\n          .executePrivilegedOperation(null, privOp, null,\n              container.getLaunchContext().getEnvironment(), true, false);\n      LOG.info(\"Docker inspect output for \" + containerId + \": \" + output);\n      int index \u003d output.lastIndexOf(\u0027,\u0027);\n      if (index \u003d\u003d -1) {\n        LOG.error(\"Incorrect format for ip and host\");\n        return null;\n      }\n      String ips \u003d output.substring(0, index).trim();\n      String host \u003d output.substring(index+1).trim();\n      String[] ipAndHost \u003d new String[2];\n      ipAndHost[0] \u003d ips;\n      ipAndHost[1] \u003d host;\n      return ipAndHost;\n    } catch (ContainerExecutionException e) {\n      LOG.error(\"Error when writing command to temp file\", e);\n    } catch (PrivilegedOperationException e) {\n      LOG.error(\"Error when executing command.\", e);\n    }\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}