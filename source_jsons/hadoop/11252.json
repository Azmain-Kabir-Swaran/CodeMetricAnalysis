{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPOfferService.java",
  "functionName": "registrationSucceeded",
  "functionId": "registrationSucceeded___bpServiceActor-BPServiceActor__reg-DatanodeRegistration",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
  "functionStartLine": 413,
  "functionEndLine": 434,
  "numCommitsSeen": 87,
  "timeTaken": 2959,
  "changeHistory": [
    "037ec8cfb1406ea3a8225a1b6306c2e78440353b",
    "5652131d2ea68c408dd3cd8bee31723642a8cdde",
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
    "04cf2a768c0fb1c2c5c80d2480aa072ec7e43c3f",
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76",
    "0663dbaac0a19719ddf9cd4290ba893bfca69da2"
  ],
  "changeHistoryShort": {
    "037ec8cfb1406ea3a8225a1b6306c2e78440353b": "Ybodychange",
    "5652131d2ea68c408dd3cd8bee31723642a8cdde": "Ybodychange",
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45": "Ymultichange(Ymodifierchange,Ybodychange)",
    "04cf2a768c0fb1c2c5c80d2480aa072ec7e43c3f": "Ymodifierchange",
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76": "Ybodychange",
    "0663dbaac0a19719ddf9cd4290ba893bfca69da2": "Ybodychange"
  },
  "changeHistoryDetails": {
    "037ec8cfb1406ea3a8225a1b6306c2e78440353b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15068. DataNode could meet deadlock if invoke refreshVolumes when register. Contributed by Aiphago.\n\nSigned-off-by: Masatake Iwasaki \u003ciwasakims@apache.org\u003e\n",
      "commitDate": "03/01/20 8:55 AM",
      "commitName": "037ec8cfb1406ea3a8225a1b6306c2e78440353b",
      "commitAuthor": "Masatake Iwasaki",
      "commitDateOld": "15/11/18 10:58 AM",
      "commitNameOld": "460a94a10f9c314b77a25e14efbf7c4dc3f5d9aa",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 413.91,
      "commitsBetweenForRepo": 2785,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   void registrationSucceeded(BPServiceActor bpServiceActor,\n       DatanodeRegistration reg) throws IOException {\n     writeLock();\n     try {\n       if (bpRegistration !\u003d null) {\n         checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n             reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n         checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n             reg.getStorageInfo().getClusterID(), \"cluster ID\");\n       }\n       bpRegistration \u003d reg;\n-\n+      DataNodeFaultInjector.get().delayWhenOfferServiceHoldLock();\n       dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n       // Add the initial block token secret keys to the DN\u0027s secret manager.\n       if (dn.isBlockTokenEnabled) {\n         dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n             reg.getExportedKeys());\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void registrationSucceeded(BPServiceActor bpServiceActor,\n      DatanodeRegistration reg) throws IOException {\n    writeLock();\n    try {\n      if (bpRegistration !\u003d null) {\n        checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n            reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n        checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n            reg.getStorageInfo().getClusterID(), \"cluster ID\");\n      }\n      bpRegistration \u003d reg;\n      DataNodeFaultInjector.get().delayWhenOfferServiceHoldLock();\n      dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n      // Add the initial block token secret keys to the DN\u0027s secret manager.\n      if (dn.isBlockTokenEnabled) {\n        dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n            reg.getExportedKeys());\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    },
    "5652131d2ea68c408dd3cd8bee31723642a8cdde": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8995. Flaw in registration bookeeping can make DN die on reconnect. (Kihwal Lee via yliu)\n",
      "commitDate": "01/09/15 5:58 PM",
      "commitName": "5652131d2ea68c408dd3cd8bee31723642a8cdde",
      "commitAuthor": "yliu",
      "commitDateOld": "21/04/15 10:58 AM",
      "commitNameOld": "dfc1c4c303cf15afc6c3361ed9d3238562f73cbd",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 133.29,
      "commitsBetweenForRepo": 989,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,22 @@\n   void registrationSucceeded(BPServiceActor bpServiceActor,\n       DatanodeRegistration reg) throws IOException {\n     writeLock();\n     try {\n       if (bpRegistration !\u003d null) {\n         checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n             reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n         checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n             reg.getStorageInfo().getClusterID(), \"cluster ID\");\n-      } else {\n-        bpRegistration \u003d reg;\n       }\n+      bpRegistration \u003d reg;\n \n       dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n       // Add the initial block token secret keys to the DN\u0027s secret manager.\n       if (dn.isBlockTokenEnabled) {\n         dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n             reg.getExportedKeys());\n       }\n     } finally {\n       writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void registrationSucceeded(BPServiceActor bpServiceActor,\n      DatanodeRegistration reg) throws IOException {\n    writeLock();\n    try {\n      if (bpRegistration !\u003d null) {\n        checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n            reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n        checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n            reg.getStorageInfo().getClusterID(), \"cluster ID\");\n      }\n      bpRegistration \u003d reg;\n\n      dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n      // Add the initial block token secret keys to the DN\u0027s secret manager.\n      if (dn.isBlockTokenEnabled) {\n        dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n            reg.getExportedKeys());\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    },
    "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 11:56 AM",
      "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
      "commitAuthor": "Andrew Wang",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:56 AM",
          "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 12:41 AM",
          "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 10.47,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,23 @@\n-  synchronized void registrationSucceeded(BPServiceActor bpServiceActor,\n+  void registrationSucceeded(BPServiceActor bpServiceActor,\n       DatanodeRegistration reg) throws IOException {\n-    if (bpRegistration !\u003d null) {\n-      checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n-          reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n-      checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n-          reg.getStorageInfo().getClusterID(), \"cluster ID\");\n-    } else {\n-      bpRegistration \u003d reg;\n-    }\n-    \n-    dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n-    // Add the initial block token secret keys to the DN\u0027s secret manager.\n-    if (dn.isBlockTokenEnabled) {\n-      dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n-          reg.getExportedKeys());\n+    writeLock();\n+    try {\n+      if (bpRegistration !\u003d null) {\n+        checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n+            reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n+        checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n+            reg.getStorageInfo().getClusterID(), \"cluster ID\");\n+      } else {\n+        bpRegistration \u003d reg;\n+      }\n+\n+      dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n+      // Add the initial block token secret keys to the DN\u0027s secret manager.\n+      if (dn.isBlockTokenEnabled) {\n+        dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n+            reg.getExportedKeys());\n+      }\n+    } finally {\n+      writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void registrationSucceeded(BPServiceActor bpServiceActor,\n      DatanodeRegistration reg) throws IOException {\n    writeLock();\n    try {\n      if (bpRegistration !\u003d null) {\n        checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n            reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n        checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n            reg.getStorageInfo().getClusterID(), \"cluster ID\");\n      } else {\n        bpRegistration \u003d reg;\n      }\n\n      dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n      // Add the initial block token secret keys to the DN\u0027s secret manager.\n      if (dn.isBlockTokenEnabled) {\n        dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n            reg.getExportedKeys());\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6788. Improve synchronization in BPOfferService with read write lock. Contributed by Yongjun Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615190 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "01/08/14 11:56 AM",
          "commitName": "07860b1c9ee3e1d77d39a52d41c3243fdcc10c45",
          "commitAuthor": "Andrew Wang",
          "commitDateOld": "22/07/14 12:41 AM",
          "commitNameOld": "25b0e8471ed744578b2d8e3f0debe5477b268e54",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 10.47,
          "commitsBetweenForRepo": 80,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,23 @@\n-  synchronized void registrationSucceeded(BPServiceActor bpServiceActor,\n+  void registrationSucceeded(BPServiceActor bpServiceActor,\n       DatanodeRegistration reg) throws IOException {\n-    if (bpRegistration !\u003d null) {\n-      checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n-          reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n-      checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n-          reg.getStorageInfo().getClusterID(), \"cluster ID\");\n-    } else {\n-      bpRegistration \u003d reg;\n-    }\n-    \n-    dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n-    // Add the initial block token secret keys to the DN\u0027s secret manager.\n-    if (dn.isBlockTokenEnabled) {\n-      dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n-          reg.getExportedKeys());\n+    writeLock();\n+    try {\n+      if (bpRegistration !\u003d null) {\n+        checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n+            reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n+        checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n+            reg.getStorageInfo().getClusterID(), \"cluster ID\");\n+      } else {\n+        bpRegistration \u003d reg;\n+      }\n+\n+      dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n+      // Add the initial block token secret keys to the DN\u0027s secret manager.\n+      if (dn.isBlockTokenEnabled) {\n+        dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n+            reg.getExportedKeys());\n+      }\n+    } finally {\n+      writeUnlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  void registrationSucceeded(BPServiceActor bpServiceActor,\n      DatanodeRegistration reg) throws IOException {\n    writeLock();\n    try {\n      if (bpRegistration !\u003d null) {\n        checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n            reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n        checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n            reg.getStorageInfo().getClusterID(), \"cluster ID\");\n      } else {\n        bpRegistration \u003d reg;\n      }\n\n      dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n      // Add the initial block token secret keys to the DN\u0027s secret manager.\n      if (dn.isBlockTokenEnabled) {\n        dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n            reg.getExportedKeys());\n      }\n    } finally {\n      writeUnlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
          "extendedDetails": {}
        }
      ]
    },
    "04cf2a768c0fb1c2c5c80d2480aa072ec7e43c3f": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-5014. Process register commands with out holding BPOfferService lock. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1543861 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "20/11/13 8:27 AM",
      "commitName": "04cf2a768c0fb1c2c5c80d2480aa072ec7e43c3f",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "16/10/13 3:15 PM",
      "commitNameOld": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 34.76,
      "commitsBetweenForRepo": 190,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n-  void registrationSucceeded(BPServiceActor bpServiceActor,\n+  synchronized void registrationSucceeded(BPServiceActor bpServiceActor,\n       DatanodeRegistration reg) throws IOException {\n     if (bpRegistration !\u003d null) {\n       checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n           reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n       checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n           reg.getStorageInfo().getClusterID(), \"cluster ID\");\n     } else {\n       bpRegistration \u003d reg;\n     }\n     \n     dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n     // Add the initial block token secret keys to the DN\u0027s secret manager.\n     if (dn.isBlockTokenEnabled) {\n       dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n           reg.getExportedKeys());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void registrationSucceeded(BPServiceActor bpServiceActor,\n      DatanodeRegistration reg) throws IOException {\n    if (bpRegistration !\u003d null) {\n      checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n          reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n      checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n          reg.getStorageInfo().getClusterID(), \"cluster ID\");\n    } else {\n      bpRegistration \u003d reg;\n    }\n    \n    dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n    // Add the initial block token secret keys to the DN\u0027s secret manager.\n    if (dn.isBlockTokenEnabled) {\n      dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n          reg.getExportedKeys());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {
        "oldValue": "[]",
        "newValue": "[synchronized]"
      }
    },
    "fb95fce24056c0b0aa5b77683c684fe1b68c4f76": {
      "type": "Ybodychange",
      "commitMessage": "Fix issue with NN/DN re-registration.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1358347 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/07/12 11:59 AM",
      "commitName": "fb95fce24056c0b0aa5b77683c684fe1b68c4f76",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "25/05/12 12:04 AM",
      "commitNameOld": "befd45fcb193a944dd144a9ebeca006b2b73cb0d",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 42.5,
      "commitsBetweenForRepo": 180,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,18 @@\n   void registrationSucceeded(BPServiceActor bpServiceActor,\n       DatanodeRegistration reg) throws IOException {\n     if (bpRegistration !\u003d null) {\n       checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n           reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n       checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n           reg.getStorageInfo().getClusterID(), \"cluster ID\");\n     } else {\n       bpRegistration \u003d reg;\n     }\n     \n     dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n+    // Add the initial block token secret keys to the DN\u0027s secret manager.\n+    if (dn.isBlockTokenEnabled) {\n+      dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n+          reg.getExportedKeys());\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void registrationSucceeded(BPServiceActor bpServiceActor,\n      DatanodeRegistration reg) throws IOException {\n    if (bpRegistration !\u003d null) {\n      checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n          reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n      checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n          reg.getStorageInfo().getClusterID(), \"cluster ID\");\n    } else {\n      bpRegistration \u003d reg;\n    }\n    \n    dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n    // Add the initial block token secret keys to the DN\u0027s secret manager.\n    if (dn.isBlockTokenEnabled) {\n      dn.blockPoolTokenSecretManager.addKeys(getBlockPoolId(),\n          reg.getExportedKeys());\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    },
    "0663dbaac0a19719ddf9cd4290ba893bfca69da2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3171. The DatanodeID \"name\" field is overloaded. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1308014 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/03/12 8:41 PM",
      "commitName": "0663dbaac0a19719ddf9cd4290ba893bfca69da2",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "13/03/12 3:52 PM",
      "commitNameOld": "3e582c690cb8c29267c8c8a741a21eea918f0145",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 18.2,
      "commitsBetweenForRepo": 115,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,13 +1,13 @@\n   void registrationSucceeded(BPServiceActor bpServiceActor,\n       DatanodeRegistration reg) throws IOException {\n     if (bpRegistration !\u003d null) {\n-      checkNSEquality(bpRegistration.storageInfo.getNamespaceID(),\n-          reg.storageInfo.getNamespaceID(), \"namespace ID\");\n-      checkNSEquality(bpRegistration.storageInfo.getClusterID(),\n-          reg.storageInfo.getClusterID(), \"cluster ID\");\n+      checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n+          reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n+      checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n+          reg.getStorageInfo().getClusterID(), \"cluster ID\");\n     } else {\n       bpRegistration \u003d reg;\n     }\n     \n     dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void registrationSucceeded(BPServiceActor bpServiceActor,\n      DatanodeRegistration reg) throws IOException {\n    if (bpRegistration !\u003d null) {\n      checkNSEquality(bpRegistration.getStorageInfo().getNamespaceID(),\n          reg.getStorageInfo().getNamespaceID(), \"namespace ID\");\n      checkNSEquality(bpRegistration.getStorageInfo().getClusterID(),\n          reg.getStorageInfo().getClusterID(), \"cluster ID\");\n    } else {\n      bpRegistration \u003d reg;\n    }\n    \n    dn.bpRegistrationSucceeded(bpRegistration, getBlockPoolId());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {}
    }
  }
}