{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicySatisfier.java",
  "functionName": "isLowRedundancyBlock",
  "functionId": "isLowRedundancyBlock___blockInfo-LocatedBlock__replication-int__ecPolicy-ErasureCodingPolicy",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java",
  "functionStartLine": 472,
  "functionEndLine": 484,
  "numCommitsSeen": 16,
  "timeTaken": 1209,
  "changeHistory": [
    "8467ec24fb74f30371d5a13e893fc56309ee9372"
  ],
  "changeHistoryShort": {
    "8467ec24fb74f30371d5a13e893fc56309ee9372": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8467ec24fb74f30371d5a13e893fc56309ee9372": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13110: [SPS]: Reduce the number of APIs in NamenodeProtocol used by external satisfier. Contributed by Rakesh R.\n",
      "commitDate": "12/08/18 3:06 AM",
      "commitName": "8467ec24fb74f30371d5a13e893fc56309ee9372",
      "commitAuthor": "Rakesh Radhakrishnan",
      "diff": "@@ -0,0 +1,13 @@\n+  private boolean isLowRedundancyBlock(LocatedBlock blockInfo, int replication,\n+      ErasureCodingPolicy ecPolicy) {\n+    boolean hasLowRedundancyBlock \u003d false;\n+    if (blockInfo.isStriped()) {\n+      // For EC blocks, redundancy is the summation of data + parity blocks.\n+      replication \u003d ecPolicy.getNumDataUnits() + ecPolicy.getNumParityUnits();\n+    }\n+    // block is considered as low redundancy when the block locations length is\n+    // less than expected replication factor.\n+    hasLowRedundancyBlock \u003d blockInfo.getLocations().length \u003c replication ? true\n+        : false;\n+    return hasLowRedundancyBlock;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean isLowRedundancyBlock(LocatedBlock blockInfo, int replication,\n      ErasureCodingPolicy ecPolicy) {\n    boolean hasLowRedundancyBlock \u003d false;\n    if (blockInfo.isStriped()) {\n      // For EC blocks, redundancy is the summation of data + parity blocks.\n      replication \u003d ecPolicy.getNumDataUnits() + ecPolicy.getNumParityUnits();\n    }\n    // block is considered as low redundancy when the block locations length is\n    // less than expected replication factor.\n    hasLowRedundancyBlock \u003d blockInfo.getLocations().length \u003c replication ? true\n        : false;\n    return hasLowRedundancyBlock;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/sps/StoragePolicySatisfier.java"
    }
  }
}