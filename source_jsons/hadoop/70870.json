{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AliyunOSSFileSystemStore.java",
  "functionName": "initialize",
  "functionId": "initialize___uri-URI__conf-Configuration__user-String__stat-FileSystem.Statistics",
  "sourceFilePath": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
  "functionStartLine": 94,
  "functionEndLine": 173,
  "numCommitsSeen": 33,
  "timeTaken": 5028,
  "changeHistory": [
    "f87b3b11c46704dcdb63089dd971e2a5ba1deaac",
    "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
    "040a202b202a37f3b922cd321eb0a8ded457d88b",
    "5ff0cf86a940fd83f1425794921cc075b19f1108",
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9",
    "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
    "6542d17ea460ec222137c4b275b13daf15d3fca3",
    "c326fc89b06a8fe0978306378ba217748c7f2054",
    "267e19a09f366a965b30c8d4dc75e377b0d92fff",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff"
  ],
  "changeHistoryShort": {
    "f87b3b11c46704dcdb63089dd971e2a5ba1deaac": "Ybodychange",
    "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574": "Ybodychange",
    "040a202b202a37f3b922cd321eb0a8ded457d88b": "Ybodychange",
    "5ff0cf86a940fd83f1425794921cc075b19f1108": "Ymultichange(Yparameterchange,Ybodychange)",
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9": "Ybodychange",
    "2b635125fb059fc204ed35bc0e264c42dd3a9fe9": "Ybodychange",
    "6542d17ea460ec222137c4b275b13daf15d3fca3": "Ybodychange",
    "c326fc89b06a8fe0978306378ba217748c7f2054": "Ybodychange",
    "267e19a09f366a965b30c8d4dc75e377b0d92fff": "Ybodychange",
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": "Ybodychange",
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f87b3b11c46704dcdb63089dd971e2a5ba1deaac": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16030. AliyunOSS: bring fixes back from HADOOP-15671. Contributed by wujinhu.\n",
      "commitDate": "06/01/19 11:56 PM",
      "commitName": "f87b3b11c46704dcdb63089dd971e2a5ba1deaac",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "05/01/19 12:35 AM",
      "commitNameOld": "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 1.97,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,80 @@\n   public void initialize(URI uri, Configuration conf, String user,\n                          FileSystem.Statistics stat) throws IOException {\n     this.username \u003d user;\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n           \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n-        AliyunOSSUtils.getCredentialsProvider(conf);\n+        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n \n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n+    bucketName \u003d uri.getHost();\n+\n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n       statistics.incrementWriteOps(1);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n-    bucketName \u003d uri.getHost();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, String user,\n                         FileSystem.Statistics stat) throws IOException {\n    this.username \u003d user;\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    bucketName \u003d uri.getHost();\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n      statistics.incrementWriteOps(1);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-15759. AliyunOSS: Update oss-sdk version to 3.0.0. Contributed by Jinhu Wu.\"\n\nThis reverts commit e4fca6aae46a3c04fc56897986a4ab4e5aa98503.\n\nRevert \"HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\"\n\nThis reverts commit 2b635125fb059fc204ed35bc0e264c42dd3a9fe9.\n",
      "commitDate": "05/01/19 12:35 AM",
      "commitName": "1f425271a73fff1fdbe3fbfdb71e906fd1ac0574",
      "commitAuthor": "Sunil G",
      "commitDateOld": "03/01/19 5:37 AM",
      "commitNameOld": "040a202b202a37f3b922cd321eb0a8ded457d88b",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 1.79,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,80 +1,79 @@\n   public void initialize(URI uri, Configuration conf, String user,\n                          FileSystem.Statistics stat) throws IOException {\n     this.username \u003d user;\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n           \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n-        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n+        AliyunOSSUtils.getCredentialsProvider(conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n \n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n-    bucketName \u003d uri.getHost();\n-\n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n       statistics.incrementWriteOps(1);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n+    bucketName \u003d uri.getHost();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, String user,\n                         FileSystem.Statistics stat) throws IOException {\n    this.username \u003d user;\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n      statistics.incrementWriteOps(1);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    bucketName \u003d uri.getHost();\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "040a202b202a37f3b922cd321eb0a8ded457d88b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15323. AliyunOSS: Improve copy file performance for AliyunOSSFileSystemStore. Contributed wujinhu.\n",
      "commitDate": "03/01/19 5:37 AM",
      "commitName": "040a202b202a37f3b922cd321eb0a8ded457d88b",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "22/11/18 9:56 PM",
      "commitNameOld": "5ff0cf86a940fd83f1425794921cc075b19f1108",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 41.32,
      "commitsBetweenForRepo": 237,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,80 @@\n   public void initialize(URI uri, Configuration conf, String user,\n                          FileSystem.Statistics stat) throws IOException {\n     this.username \u003d user;\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n           \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n         AliyunOSSUtils.getCredentialsProvider(uri, conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n-    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n-        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n+\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n-    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n-      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n-      multipartThreshold \u003d 5 * 1024 * 1024;\n-    }\n-\n-    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n-      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n-      multipartThreshold \u003d 1024 * 1024 * 1024;\n-    }\n-\n     bucketName \u003d uri.getHost();\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n       statistics.incrementWriteOps(1);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf, String user,\n                         FileSystem.Statistics stat) throws IOException {\n    this.username \u003d user;\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    bucketName \u003d uri.getHost();\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n      statistics.incrementWriteOps(1);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "5ff0cf86a940fd83f1425794921cc075b19f1108": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-15943. AliyunOSS: add missing owner \u0026 group attributes for oss FileStatus. Contributed by wujinhu.\n",
      "commitDate": "22/11/18 9:56 PM",
      "commitName": "5ff0cf86a940fd83f1425794921cc075b19f1108",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-15943. AliyunOSS: add missing owner \u0026 group attributes for oss FileStatus. Contributed by wujinhu.\n",
          "commitDate": "22/11/18 9:56 PM",
          "commitName": "5ff0cf86a940fd83f1425794921cc075b19f1108",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "18/11/18 10:00 PM",
          "commitNameOld": "be0708c6eb3c759e43639e0f8df7c9910308fb97",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 4.0,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,90 +1,91 @@\n-  public void initialize(URI uri, Configuration conf,\n+  public void initialize(URI uri, Configuration conf, String user,\n                          FileSystem.Statistics stat) throws IOException {\n+    this.username \u003d user;\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n           \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n         AliyunOSSUtils.getCredentialsProvider(uri, conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n     bucketName \u003d uri.getHost();\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n       statistics.incrementWriteOps(1);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(URI uri, Configuration conf, String user,\n                         FileSystem.Statistics stat) throws IOException {\n    this.username \u003d user;\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    bucketName \u003d uri.getHost();\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n      statistics.incrementWriteOps(1);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
          "extendedDetails": {
            "oldValue": "[uri-URI, conf-Configuration, stat-FileSystem.Statistics]",
            "newValue": "[uri-URI, conf-Configuration, user-String, stat-FileSystem.Statistics]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-15943. AliyunOSS: add missing owner \u0026 group attributes for oss FileStatus. Contributed by wujinhu.\n",
          "commitDate": "22/11/18 9:56 PM",
          "commitName": "5ff0cf86a940fd83f1425794921cc075b19f1108",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "18/11/18 10:00 PM",
          "commitNameOld": "be0708c6eb3c759e43639e0f8df7c9910308fb97",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 4.0,
          "commitsBetweenForRepo": 42,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,90 +1,91 @@\n-  public void initialize(URI uri, Configuration conf,\n+  public void initialize(URI uri, Configuration conf, String user,\n                          FileSystem.Statistics stat) throws IOException {\n+    this.username \u003d user;\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n           \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n         AliyunOSSUtils.getCredentialsProvider(uri, conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n     bucketName \u003d uri.getHost();\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n       statistics.incrementWriteOps(1);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void initialize(URI uri, Configuration conf, String user,\n                         FileSystem.Statistics stat) throws IOException {\n    this.username \u003d user;\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    bucketName \u003d uri.getHost();\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n      statistics.incrementWriteOps(1);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n  }",
          "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15917. AliyunOSS: fix incorrect ReadOps and WriteOps in statistics. Contributed by Jinhu Wu.\n",
      "commitDate": "13/11/18 8:58 PM",
      "commitName": "3fade865ce84dcf68bcd7de5a5ed1c7d904796e9",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "25/09/18 4:48 AM",
      "commitNameOld": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 49.72,
      "commitsBetweenForRepo": 442,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,89 +1,90 @@\n   public void initialize(URI uri, Configuration conf,\n                          FileSystem.Statistics stat) throws IOException {\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n           \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n         AliyunOSSUtils.getCredentialsProvider(uri, conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n     bucketName \u003d uri.getHost();\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n+      statistics.incrementWriteOps(1);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf,\n                         FileSystem.Statistics stat) throws IOException {\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    bucketName \u003d uri.getHost();\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n      statistics.incrementWriteOps(1);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "2b635125fb059fc204ed35bc0e264c42dd3a9fe9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15671. AliyunOSS: Support Assume Roles in AliyunOSS. Contributed by Jinhu Wu.\n",
      "commitDate": "25/09/18 4:48 AM",
      "commitName": "2b635125fb059fc204ed35bc0e264c42dd3a9fe9",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "29/07/18 7:53 PM",
      "commitNameOld": "0857f116b754d83d3c540cd6f989087af24fef27",
      "commitAuthorOld": "Sammi Chen",
      "daysBetweenCommits": 57.37,
      "commitsBetweenForRepo": 533,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,89 @@\n   public void initialize(URI uri, Configuration conf,\n                          FileSystem.Statistics stat) throws IOException {\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n           \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n-        AliyunOSSUtils.getCredentialsProvider(conf);\n+        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n         MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n+    bucketName \u003d uri.getHost();\n+\n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n-    bucketName \u003d uri.getHost();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf,\n                         FileSystem.Statistics stat) throws IOException {\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    bucketName \u003d uri.getHost();\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "6542d17ea460ec222137c4b275b13daf15d3fca3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14999. AliyunOSS: provide one asynchronous multi-part based uploading mechanism. Contributed by Genmao Yu.\n",
      "commitDate": "30/03/18 5:23 AM",
      "commitName": "6542d17ea460ec222137c4b275b13daf15d3fca3",
      "commitAuthor": "Sammi Chen",
      "commitDateOld": "20/11/17 10:56 AM",
      "commitNameOld": "c326fc89b06a8fe0978306378ba217748c7f2054",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 129.73,
      "commitsBetweenForRepo": 922,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,98 +1,88 @@\n   public void initialize(URI uri, Configuration conf,\n                          FileSystem.Statistics stat) throws IOException {\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n     clientConf.setUserAgent(\n         conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n             + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n-        \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n+          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n         AliyunOSSUtils.getCredentialsProvider(conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n-    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n-        MULTIPART_UPLOAD_SIZE_DEFAULT);\n+    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n+        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n-    partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n-        MULTIPART_UPLOAD_SIZE_DEFAULT);\n-    if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n-      partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n-    }\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n-    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n-      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n-      uploadPartSize \u003d 5 * 1024 * 1024;\n-    }\n-\n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n     bucketName \u003d uri.getHost();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf,\n                         FileSystem.Statistics stat) throws IOException {\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n          \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d AliyunOSSUtils.getMultipartSizeProperty(conf,\n        MULTIPART_UPLOAD_PART_SIZE_KEY, MULTIPART_UPLOAD_PART_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    bucketName \u003d uri.getHost();\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "c326fc89b06a8fe0978306378ba217748c7f2054": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15024 Support user agent configuration and include that \u0026 Hadoop version information to oss server.\nContributed by Sammi Chen.\n",
      "commitDate": "20/11/17 10:56 AM",
      "commitName": "c326fc89b06a8fe0978306378ba217748c7f2054",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "14/11/17 1:58 AM",
      "commitNameOld": "18621af7ae8f8ed703245744f8f2a770d07bbfb9",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 6.37,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,95 +1,98 @@\n   public void initialize(URI uri, Configuration conf,\n                          FileSystem.Statistics stat) throws IOException {\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n+    clientConf.setUserAgent(\n+        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n+            + VersionInfo.getVersion());\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     if (StringUtils.isEmpty(endPoint)) {\n       throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n         \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n     }\n     CredentialsProvider provider \u003d\n         AliyunOSSUtils.getCredentialsProvider(conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n         MULTIPART_UPLOAD_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n     partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n         MULTIPART_UPLOAD_SIZE_DEFAULT);\n     if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n       partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n     }\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n     if (uploadPartSize \u003c 5 * 1024 * 1024) {\n       LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n       uploadPartSize \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n     bucketName \u003d uri.getHost();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf,\n                         FileSystem.Statistics stat) throws IOException {\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n    clientConf.setUserAgent(\n        conf.get(USER_AGENT_PREFIX, USER_AGENT_PREFIX_DEFAULT) + \", Hadoop/\"\n            + VersionInfo.getVersion());\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n        \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n      partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n    }\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n      uploadPartSize \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    bucketName \u003d uri.getHost();\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "267e19a09f366a965b30c8d4dc75e377b0d92fff": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14194. Aliyun OSS should not use empty endpoint as default. Contributed by Genmao Yu\n",
      "commitDate": "20/08/17 10:36 PM",
      "commitName": "267e19a09f366a965b30c8d4dc75e377b0d92fff",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "09/02/17 10:53 PM",
      "commitNameOld": "5b151290ae2916dc04d6a4338085fcefafa21982",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 191.95,
      "commitsBetweenForRepo": 1106,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,95 @@\n   public void initialize(URI uri, Configuration conf,\n                          FileSystem.Statistics stat) throws IOException {\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n     if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n+    if (StringUtils.isEmpty(endPoint)) {\n+      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n+        \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n+    }\n     CredentialsProvider provider \u003d\n         AliyunOSSUtils.getCredentialsProvider(conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n         MULTIPART_UPLOAD_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n     partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n         MULTIPART_UPLOAD_SIZE_DEFAULT);\n     if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n       partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n     }\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n     if (uploadPartSize \u003c 5 * 1024 * 1024) {\n       LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n       uploadPartSize \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n     if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n     bucketName \u003d uri.getHost();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf,\n                         FileSystem.Statistics stat) throws IOException {\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    if (StringUtils.isEmpty(endPoint)) {\n      throw new IllegalArgumentException(\"Aliyun OSS endpoint should not be \" +\n        \"null or empty. Please set proper endpoint with \u0027fs.oss.endpoint\u0027.\");\n    }\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n      partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n    }\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n      uploadPartSize \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    bucketName \u003d uri.getHost();\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "08b37603d9c0be67c4e0790c1ad266551ef21f5e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13591. Unit test failure in TestOSSContractGetFileStatus and TestOSSContractRootDir. Contributed by Genmao Yu\n",
      "commitDate": "20/09/16 12:12 AM",
      "commitName": "08b37603d9c0be67c4e0790c1ad266551ef21f5e",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "19/09/16 8:39 PM",
      "commitNameOld": "9cd47602576cd01a905e27642b685905a88eee72",
      "commitAuthorOld": "Kai Zheng",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,91 +1,91 @@\n   public void initialize(URI uri, Configuration conf,\n                          FileSystem.Statistics stat) throws IOException {\n     statistics \u003d stat;\n     ClientConfiguration clientConf \u003d new ClientConfiguration();\n     clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n         MAXIMUM_CONNECTIONS_DEFAULT));\n     boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n         SECURE_CONNECTIONS_DEFAULT);\n     clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n     clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n         MAX_ERROR_RETRIES_DEFAULT));\n     clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n         ESTABLISH_TIMEOUT_DEFAULT));\n     clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n         SOCKET_TIMEOUT_DEFAULT));\n \n     String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n     int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n-    if (!proxyHost.isEmpty()) {\n+    if (StringUtils.isNotEmpty(proxyHost)) {\n       clientConf.setProxyHost(proxyHost);\n       if (proxyPort \u003e\u003d 0) {\n         clientConf.setProxyPort(proxyPort);\n       } else {\n         if (secureConnections) {\n           LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n           clientConf.setProxyPort(443);\n         } else {\n           LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n           clientConf.setProxyPort(80);\n         }\n       }\n       String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n       String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n       if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n         String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n             PROXY_PASSWORD_KEY + \" set without the other.\";\n         LOG.error(msg);\n         throw new IllegalArgumentException(msg);\n       }\n       clientConf.setProxyUsername(proxyUsername);\n       clientConf.setProxyPassword(proxyPassword);\n       clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n       clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n     } else if (proxyPort \u003e\u003d 0) {\n       String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n           PROXY_HOST_KEY;\n       LOG.error(msg);\n       throw new IllegalArgumentException(msg);\n     }\n \n     String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n     CredentialsProvider provider \u003d\n-        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n+        AliyunOSSUtils.getCredentialsProvider(conf);\n     ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n     uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n         MULTIPART_UPLOAD_SIZE_DEFAULT);\n     multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n         MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n     partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n         MULTIPART_UPLOAD_SIZE_DEFAULT);\n     if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n       partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n     }\n     serverSideEncryptionAlgorithm \u003d\n         conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n \n     if (uploadPartSize \u003c 5 * 1024 * 1024) {\n       LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n       uploadPartSize \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003c 5 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n       multipartThreshold \u003d 5 * 1024 * 1024;\n     }\n \n     if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n       LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n       multipartThreshold \u003d 1024 * 1024 * 1024;\n     }\n \n     String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n-    if (!cannedACLName.isEmpty()) {\n+    if (StringUtils.isNotEmpty(cannedACLName)) {\n       CannedAccessControlList cannedACL \u003d\n           CannedAccessControlList.valueOf(cannedACLName);\n       ossClient.setBucketAcl(bucketName, cannedACL);\n     }\n \n     maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n     bucketName \u003d uri.getHost();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf,\n                         FileSystem.Statistics stat) throws IOException {\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (StringUtils.isNotEmpty(proxyHost)) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n      partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n    }\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n      uploadPartSize \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (StringUtils.isNotEmpty(cannedACLName)) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    bucketName \u003d uri.getHost();\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java",
      "extendedDetails": {}
    },
    "d33e928fbeb1764a724c8f3c051bb0d8be82bbff": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-13529. Do some code refactoring. Contributed by Genmao Yu.\n",
      "commitDate": "06/09/16 8:15 PM",
      "commitName": "d33e928fbeb1764a724c8f3c051bb0d8be82bbff",
      "commitAuthor": "Mingfei",
      "diff": "@@ -0,0 +1,91 @@\n+  public void initialize(URI uri, Configuration conf,\n+                         FileSystem.Statistics stat) throws IOException {\n+    statistics \u003d stat;\n+    ClientConfiguration clientConf \u003d new ClientConfiguration();\n+    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n+        MAXIMUM_CONNECTIONS_DEFAULT));\n+    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n+        SECURE_CONNECTIONS_DEFAULT);\n+    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n+    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n+        MAX_ERROR_RETRIES_DEFAULT));\n+    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n+        ESTABLISH_TIMEOUT_DEFAULT));\n+    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n+        SOCKET_TIMEOUT_DEFAULT));\n+\n+    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n+    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n+    if (!proxyHost.isEmpty()) {\n+      clientConf.setProxyHost(proxyHost);\n+      if (proxyPort \u003e\u003d 0) {\n+        clientConf.setProxyPort(proxyPort);\n+      } else {\n+        if (secureConnections) {\n+          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n+          clientConf.setProxyPort(443);\n+        } else {\n+          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n+          clientConf.setProxyPort(80);\n+        }\n+      }\n+      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n+      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n+      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n+        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n+            PROXY_PASSWORD_KEY + \" set without the other.\";\n+        LOG.error(msg);\n+        throw new IllegalArgumentException(msg);\n+      }\n+      clientConf.setProxyUsername(proxyUsername);\n+      clientConf.setProxyPassword(proxyPassword);\n+      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n+      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n+    } else if (proxyPort \u003e\u003d 0) {\n+      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n+          PROXY_HOST_KEY;\n+      LOG.error(msg);\n+      throw new IllegalArgumentException(msg);\n+    }\n+\n+    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n+    CredentialsProvider provider \u003d\n+        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n+    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n+    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n+        MULTIPART_UPLOAD_SIZE_DEFAULT);\n+    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n+        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n+    partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n+        MULTIPART_UPLOAD_SIZE_DEFAULT);\n+    if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n+      partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n+    }\n+    serverSideEncryptionAlgorithm \u003d\n+        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n+\n+    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n+      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n+      uploadPartSize \u003d 5 * 1024 * 1024;\n+    }\n+\n+    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n+      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n+      multipartThreshold \u003d 5 * 1024 * 1024;\n+    }\n+\n+    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n+      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n+      multipartThreshold \u003d 1024 * 1024 * 1024;\n+    }\n+\n+    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n+    if (!cannedACLName.isEmpty()) {\n+      CannedAccessControlList cannedACL \u003d\n+          CannedAccessControlList.valueOf(cannedACLName);\n+      ossClient.setBucketAcl(bucketName, cannedACL);\n+    }\n+\n+    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n+    bucketName \u003d uri.getHost();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf,\n                         FileSystem.Statistics stat) throws IOException {\n    statistics \u003d stat;\n    ClientConfiguration clientConf \u003d new ClientConfiguration();\n    clientConf.setMaxConnections(conf.getInt(MAXIMUM_CONNECTIONS_KEY,\n        MAXIMUM_CONNECTIONS_DEFAULT));\n    boolean secureConnections \u003d conf.getBoolean(SECURE_CONNECTIONS_KEY,\n        SECURE_CONNECTIONS_DEFAULT);\n    clientConf.setProtocol(secureConnections ? Protocol.HTTPS : Protocol.HTTP);\n    clientConf.setMaxErrorRetry(conf.getInt(MAX_ERROR_RETRIES_KEY,\n        MAX_ERROR_RETRIES_DEFAULT));\n    clientConf.setConnectionTimeout(conf.getInt(ESTABLISH_TIMEOUT_KEY,\n        ESTABLISH_TIMEOUT_DEFAULT));\n    clientConf.setSocketTimeout(conf.getInt(SOCKET_TIMEOUT_KEY,\n        SOCKET_TIMEOUT_DEFAULT));\n\n    String proxyHost \u003d conf.getTrimmed(PROXY_HOST_KEY, \"\");\n    int proxyPort \u003d conf.getInt(PROXY_PORT_KEY, -1);\n    if (!proxyHost.isEmpty()) {\n      clientConf.setProxyHost(proxyHost);\n      if (proxyPort \u003e\u003d 0) {\n        clientConf.setProxyPort(proxyPort);\n      } else {\n        if (secureConnections) {\n          LOG.warn(\"Proxy host set without port. Using HTTPS default 443\");\n          clientConf.setProxyPort(443);\n        } else {\n          LOG.warn(\"Proxy host set without port. Using HTTP default 80\");\n          clientConf.setProxyPort(80);\n        }\n      }\n      String proxyUsername \u003d conf.getTrimmed(PROXY_USERNAME_KEY);\n      String proxyPassword \u003d conf.getTrimmed(PROXY_PASSWORD_KEY);\n      if ((proxyUsername \u003d\u003d null) !\u003d (proxyPassword \u003d\u003d null)) {\n        String msg \u003d \"Proxy error: \" + PROXY_USERNAME_KEY + \" or \" +\n            PROXY_PASSWORD_KEY + \" set without the other.\";\n        LOG.error(msg);\n        throw new IllegalArgumentException(msg);\n      }\n      clientConf.setProxyUsername(proxyUsername);\n      clientConf.setProxyPassword(proxyPassword);\n      clientConf.setProxyDomain(conf.getTrimmed(PROXY_DOMAIN_KEY));\n      clientConf.setProxyWorkstation(conf.getTrimmed(PROXY_WORKSTATION_KEY));\n    } else if (proxyPort \u003e\u003d 0) {\n      String msg \u003d \"Proxy error: \" + PROXY_PORT_KEY + \" set without \" +\n          PROXY_HOST_KEY;\n      LOG.error(msg);\n      throw new IllegalArgumentException(msg);\n    }\n\n    String endPoint \u003d conf.getTrimmed(ENDPOINT_KEY, \"\");\n    CredentialsProvider provider \u003d\n        AliyunOSSUtils.getCredentialsProvider(uri, conf);\n    ossClient \u003d new OSSClient(endPoint, provider, clientConf);\n    uploadPartSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    multipartThreshold \u003d conf.getLong(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY,\n        MIN_MULTIPART_UPLOAD_THRESHOLD_DEFAULT);\n    partSize \u003d conf.getLong(MULTIPART_UPLOAD_SIZE_KEY,\n        MULTIPART_UPLOAD_SIZE_DEFAULT);\n    if (partSize \u003c MIN_MULTIPART_UPLOAD_PART_SIZE) {\n      partSize \u003d MIN_MULTIPART_UPLOAD_PART_SIZE;\n    }\n    serverSideEncryptionAlgorithm \u003d\n        conf.get(SERVER_SIDE_ENCRYPTION_ALGORITHM_KEY, \"\");\n\n    if (uploadPartSize \u003c 5 * 1024 * 1024) {\n      LOG.warn(MULTIPART_UPLOAD_SIZE_KEY + \" must be at least 5 MB\");\n      uploadPartSize \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003c 5 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be at least 5 MB\");\n      multipartThreshold \u003d 5 * 1024 * 1024;\n    }\n\n    if (multipartThreshold \u003e 1024 * 1024 * 1024) {\n      LOG.warn(MIN_MULTIPART_UPLOAD_THRESHOLD_KEY + \" must be less than 1 GB\");\n      multipartThreshold \u003d 1024 * 1024 * 1024;\n    }\n\n    String cannedACLName \u003d conf.get(CANNED_ACL_KEY, CANNED_ACL_DEFAULT);\n    if (!cannedACLName.isEmpty()) {\n      CannedAccessControlList cannedACL \u003d\n          CannedAccessControlList.valueOf(cannedACLName);\n      ossClient.setBucketAcl(bucketName, cannedACL);\n    }\n\n    maxKeys \u003d conf.getInt(MAX_PAGING_KEYS_KEY, MAX_PAGING_KEYS_DEFAULT);\n    bucketName \u003d uri.getHost();\n  }",
      "path": "hadoop-tools/hadoop-aliyun/src/main/java/org/apache/hadoop/fs/aliyun/oss/AliyunOSSFileSystemStore.java"
    }
  }
}