{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StateMachineFactory.java",
  "functionName": "generateStateGraph",
  "functionId": "generateStateGraph___name-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/state/StateMachineFactory.java",
  "functionStartLine": 500,
  "functionEndLine": 528,
  "numCommitsSeen": 8,
  "timeTaken": 1150,
  "changeHistory": [
    "21b8d7b1fdb2284cbc079f2d4411cd1a004629f1",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "01fbb0fb4502dfa6bd8f76a4dfe7dfd0033e7d62"
  ],
  "changeHistoryShort": {
    "21b8d7b1fdb2284cbc079f2d4411cd1a004629f1": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "01fbb0fb4502dfa6bd8f76a4dfe7dfd0033e7d62": "Yintroduced"
  },
  "changeHistoryDetails": {
    "21b8d7b1fdb2284cbc079f2d4411cd1a004629f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-161. Fix multiple compiler warnings for unchecked operations in YARN common. Contributed by Chris Nauroth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1399056 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/12 5:31 PM",
      "commitName": "21b8d7b1fdb2284cbc079f2d4411cd1a004629f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "07/08/12 10:22 PM",
      "commitNameOld": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 69.8,
      "commitsBetweenForRepo": 439,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public Graph generateStateGraph(String name) {\n     maybeMakeStateMachineTable();\n     Graph g \u003d new Graph(name);\n     for (STATE startState : stateMachineTable.keySet()) {\n       Map\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e transitions\n           \u003d stateMachineTable.get(startState);\n       for (Entry\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e entry :\n          transitions.entrySet()) {\n         Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e transition \u003d entry.getValue();\n         if (transition instanceof StateMachineFactory.SingleInternalArc) {\n           StateMachineFactory.SingleInternalArc sa\n               \u003d (StateMachineFactory.SingleInternalArc) transition;\n           Graph.Node fromNode \u003d g.getNode(startState.toString());\n           Graph.Node toNode \u003d g.getNode(sa.postState.toString());\n           fromNode.addEdge(toNode, entry.getKey().toString());\n         } else if (transition instanceof StateMachineFactory.MultipleInternalArc) {\n           StateMachineFactory.MultipleInternalArc ma\n               \u003d (StateMachineFactory.MultipleInternalArc) transition;\n-          Iterator\u003cSTATE\u003e iter \u003d ma.validPostStates.iterator();\n+          Iterator iter \u003d ma.validPostStates.iterator();\n           while (iter.hasNext()) {\n             Graph.Node fromNode \u003d g.getNode(startState.toString());\n             Graph.Node toNode \u003d g.getNode(iter.next().toString());\n             fromNode.addEdge(toNode, entry.getKey().toString());\n           }\n         }\n       }\n     }\n     return g;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Graph generateStateGraph(String name) {\n    maybeMakeStateMachineTable();\n    Graph g \u003d new Graph(name);\n    for (STATE startState : stateMachineTable.keySet()) {\n      Map\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e transitions\n          \u003d stateMachineTable.get(startState);\n      for (Entry\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e entry :\n         transitions.entrySet()) {\n        Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e transition \u003d entry.getValue();\n        if (transition instanceof StateMachineFactory.SingleInternalArc) {\n          StateMachineFactory.SingleInternalArc sa\n              \u003d (StateMachineFactory.SingleInternalArc) transition;\n          Graph.Node fromNode \u003d g.getNode(startState.toString());\n          Graph.Node toNode \u003d g.getNode(sa.postState.toString());\n          fromNode.addEdge(toNode, entry.getKey().toString());\n        } else if (transition instanceof StateMachineFactory.MultipleInternalArc) {\n          StateMachineFactory.MultipleInternalArc ma\n              \u003d (StateMachineFactory.MultipleInternalArc) transition;\n          Iterator iter \u003d ma.validPostStates.iterator();\n          while (iter.hasNext()) {\n            Graph.Node fromNode \u003d g.getNode(startState.toString());\n            Graph.Node toNode \u003d g.getNode(iter.next().toString());\n            fromNode.addEdge(toNode, entry.getKey().toString());\n          }\n        }\n      }\n    }\n    return g;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/state/StateMachineFactory.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Graph generateStateGraph(String name) {\n    maybeMakeStateMachineTable();\n    Graph g \u003d new Graph(name);\n    for (STATE startState : stateMachineTable.keySet()) {\n      Map\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e transitions\n          \u003d stateMachineTable.get(startState);\n      for (Entry\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e entry :\n         transitions.entrySet()) {\n        Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e transition \u003d entry.getValue();\n        if (transition instanceof StateMachineFactory.SingleInternalArc) {\n          StateMachineFactory.SingleInternalArc sa\n              \u003d (StateMachineFactory.SingleInternalArc) transition;\n          Graph.Node fromNode \u003d g.getNode(startState.toString());\n          Graph.Node toNode \u003d g.getNode(sa.postState.toString());\n          fromNode.addEdge(toNode, entry.getKey().toString());\n        } else if (transition instanceof StateMachineFactory.MultipleInternalArc) {\n          StateMachineFactory.MultipleInternalArc ma\n              \u003d (StateMachineFactory.MultipleInternalArc) transition;\n          Iterator\u003cSTATE\u003e iter \u003d ma.validPostStates.iterator();\n          while (iter.hasNext()) {\n            Graph.Node fromNode \u003d g.getNode(startState.toString());\n            Graph.Node toNode \u003d g.getNode(iter.next().toString());\n            fromNode.addEdge(toNode, entry.getKey().toString());\n          }\n        }\n      }\n    }\n    return g;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/state/StateMachineFactory.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/state/StateMachineFactory.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/state/StateMachineFactory.java"
      }
    },
    "01fbb0fb4502dfa6bd8f76a4dfe7dfd0033e7d62": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2930. Added the ability to be able to generate graphs from the state-machine definitions. Contributed by Binglin Chang.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173524 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 1:37 AM",
      "commitName": "01fbb0fb4502dfa6bd8f76a4dfe7dfd0033e7d62",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  public Graph generateStateGraph(String name) {\n+    maybeMakeStateMachineTable();\n+    Graph g \u003d new Graph(name);\n+    for (STATE startState : stateMachineTable.keySet()) {\n+      Map\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e transitions\n+          \u003d stateMachineTable.get(startState);\n+      for (Entry\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e entry :\n+         transitions.entrySet()) {\n+        Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e transition \u003d entry.getValue();\n+        if (transition instanceof StateMachineFactory.SingleInternalArc) {\n+          StateMachineFactory.SingleInternalArc sa\n+              \u003d (StateMachineFactory.SingleInternalArc) transition;\n+          Graph.Node fromNode \u003d g.getNode(startState.toString());\n+          Graph.Node toNode \u003d g.getNode(sa.postState.toString());\n+          fromNode.addEdge(toNode, entry.getKey().toString());\n+        } else if (transition instanceof StateMachineFactory.MultipleInternalArc) {\n+          StateMachineFactory.MultipleInternalArc ma\n+              \u003d (StateMachineFactory.MultipleInternalArc) transition;\n+          Iterator\u003cSTATE\u003e iter \u003d ma.validPostStates.iterator();\n+          while (iter.hasNext()) {\n+            Graph.Node fromNode \u003d g.getNode(startState.toString());\n+            Graph.Node toNode \u003d g.getNode(iter.next().toString());\n+            fromNode.addEdge(toNode, entry.getKey().toString());\n+          }\n+        }\n+      }\n+    }\n+    return g;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Graph generateStateGraph(String name) {\n    maybeMakeStateMachineTable();\n    Graph g \u003d new Graph(name);\n    for (STATE startState : stateMachineTable.keySet()) {\n      Map\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e transitions\n          \u003d stateMachineTable.get(startState);\n      for (Entry\u003cEVENTTYPE, Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e\u003e entry :\n         transitions.entrySet()) {\n        Transition\u003cOPERAND, STATE, EVENTTYPE, EVENT\u003e transition \u003d entry.getValue();\n        if (transition instanceof StateMachineFactory.SingleInternalArc) {\n          StateMachineFactory.SingleInternalArc sa\n              \u003d (StateMachineFactory.SingleInternalArc) transition;\n          Graph.Node fromNode \u003d g.getNode(startState.toString());\n          Graph.Node toNode \u003d g.getNode(sa.postState.toString());\n          fromNode.addEdge(toNode, entry.getKey().toString());\n        } else if (transition instanceof StateMachineFactory.MultipleInternalArc) {\n          StateMachineFactory.MultipleInternalArc ma\n              \u003d (StateMachineFactory.MultipleInternalArc) transition;\n          Iterator\u003cSTATE\u003e iter \u003d ma.validPostStates.iterator();\n          while (iter.hasNext()) {\n            Graph.Node fromNode \u003d g.getNode(startState.toString());\n            Graph.Node toNode \u003d g.getNode(iter.next().toString());\n            fromNode.addEdge(toNode, entry.getKey().toString());\n          }\n        }\n      }\n    }\n    return g;\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/state/StateMachineFactory.java"
    }
  }
}