{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSAppAttempt.java",
  "functionName": "unreserveInternal",
  "functionId": "unreserveInternal___schedulerKey-SchedulerRequestKey__node-FSSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
  "functionStartLine": 188,
  "functionEndLine": 215,
  "numCommitsSeen": 106,
  "timeTaken": 4334,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "586348e4cbf197188057d6b843a6701cfffdaff3",
    "486e718fc1f5befd231494e2ec06bb360484f191"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Ymodifierchange,Ybodychange)",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ymultichange(Yparameterchange,Ybodychange)",
    "586348e4cbf197188057d6b843a6701cfffdaff3": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private void unreserveInternal(\n       SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d this.reservedContainers.get(\n           schedulerKey);\n       RMContainer reservedContainer \u003d reservedContainers.remove(\n           node.getNodeID());\n       if (reservedContainers.isEmpty()) {\n         this.reservedContainers.remove(schedulerKey);\n       }\n \n       // Reset the re-reservation count\n       resetReReservations(schedulerKey);\n \n       Resource resource \u003d reservedContainer.getContainer().getResource();\n       this.attemptResourceUsage.decReserved(resource);\n \n       LOG.info(\n           \"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n               + node + \", currently has \" + reservedContainers.size()\n               + \" at priority \" + schedulerKey.getPriority()\n               + \"; currentReservation \" + this.attemptResourceUsage\n               .getReserved());\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void unreserveInternal(\n      SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n    writeLock.lock();\n    try {\n      Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d this.reservedContainers.get(\n          schedulerKey);\n      RMContainer reservedContainer \u003d reservedContainers.remove(\n          node.getNodeID());\n      if (reservedContainers.isEmpty()) {\n        this.reservedContainers.remove(schedulerKey);\n      }\n\n      // Reset the re-reservation count\n      resetReReservations(schedulerKey);\n\n      Resource resource \u003d reservedContainer.getContainer().getResource();\n      this.attemptResourceUsage.decReserved(resource);\n\n      LOG.info(\n          \"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n              + node + \", currently has \" + reservedContainers.size()\n              + \" at priority \" + schedulerKey.getPriority()\n              + \"; currentReservation \" + this.attemptResourceUsage\n              .getReserved());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/16 10:43 AM",
          "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 44.64,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-  private synchronized void unreserveInternal(\n+  private void unreserveInternal(\n       SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n-    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n-        this.reservedContainers.get(schedulerKey);\n-    RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n-    if (reservedContainers.isEmpty()) {\n-      this.reservedContainers.remove(schedulerKey);\n+    try {\n+      writeLock.lock();\n+      Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d this.reservedContainers.get(\n+          schedulerKey);\n+      RMContainer reservedContainer \u003d reservedContainers.remove(\n+          node.getNodeID());\n+      if (reservedContainers.isEmpty()) {\n+        this.reservedContainers.remove(schedulerKey);\n+      }\n+\n+      // Reset the re-reservation count\n+      resetReReservations(schedulerKey);\n+\n+      Resource resource \u003d reservedContainer.getContainer().getResource();\n+      this.attemptResourceUsage.decReserved(resource);\n+\n+      LOG.info(\n+          \"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n+              + node + \", currently has \" + reservedContainers.size()\n+              + \" at priority \" + schedulerKey.getPriority()\n+              + \"; currentReservation \" + this.attemptResourceUsage\n+              .getReserved());\n+    } finally {\n+      writeLock.unlock();\n     }\n-    \n-    // Reset the re-reservation count\n-    resetReReservations(schedulerKey);\n-\n-    Resource resource \u003d reservedContainer.getContainer().getResource();\n-    this.attemptResourceUsage.decReserved(resource);\n-\n-    LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n-        + node + \", currently has \" + reservedContainers.size()\n-        + \" at priority \" + schedulerKey.getPriority() + \"; currentReservation \"\n-        + this.attemptResourceUsage.getReserved());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unreserveInternal(\n      SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n    try {\n      writeLock.lock();\n      Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d this.reservedContainers.get(\n          schedulerKey);\n      RMContainer reservedContainer \u003d reservedContainers.remove(\n          node.getNodeID());\n      if (reservedContainers.isEmpty()) {\n        this.reservedContainers.remove(schedulerKey);\n      }\n\n      // Reset the re-reservation count\n      resetReReservations(schedulerKey);\n\n      Resource resource \u003d reservedContainer.getContainer().getResource();\n      this.attemptResourceUsage.decReserved(resource);\n\n      LOG.info(\n          \"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n              + node + \", currently has \" + reservedContainers.size()\n              + \" at priority \" + schedulerKey.getPriority()\n              + \"; currentReservation \" + this.attemptResourceUsage\n              .getReserved());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[private, synchronized]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "05/08/16 10:43 AM",
          "commitNameOld": "3f100d76ff5df020dbb8ecd4f5b4f9736a0a8270",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 44.64,
          "commitsBetweenForRepo": 264,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,28 @@\n-  private synchronized void unreserveInternal(\n+  private void unreserveInternal(\n       SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n-    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n-        this.reservedContainers.get(schedulerKey);\n-    RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n-    if (reservedContainers.isEmpty()) {\n-      this.reservedContainers.remove(schedulerKey);\n+    try {\n+      writeLock.lock();\n+      Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d this.reservedContainers.get(\n+          schedulerKey);\n+      RMContainer reservedContainer \u003d reservedContainers.remove(\n+          node.getNodeID());\n+      if (reservedContainers.isEmpty()) {\n+        this.reservedContainers.remove(schedulerKey);\n+      }\n+\n+      // Reset the re-reservation count\n+      resetReReservations(schedulerKey);\n+\n+      Resource resource \u003d reservedContainer.getContainer().getResource();\n+      this.attemptResourceUsage.decReserved(resource);\n+\n+      LOG.info(\n+          \"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n+              + node + \", currently has \" + reservedContainers.size()\n+              + \" at priority \" + schedulerKey.getPriority()\n+              + \"; currentReservation \" + this.attemptResourceUsage\n+              .getReserved());\n+    } finally {\n+      writeLock.unlock();\n     }\n-    \n-    // Reset the re-reservation count\n-    resetReReservations(schedulerKey);\n-\n-    Resource resource \u003d reservedContainer.getContainer().getResource();\n-    this.attemptResourceUsage.decReserved(resource);\n-\n-    LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n-        + node + \", currently has \" + reservedContainers.size()\n-        + \" at priority \" + schedulerKey.getPriority() + \"; currentReservation \"\n-        + this.attemptResourceUsage.getReserved());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void unreserveInternal(\n      SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n    try {\n      writeLock.lock();\n      Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d this.reservedContainers.get(\n          schedulerKey);\n      RMContainer reservedContainer \u003d reservedContainers.remove(\n          node.getNodeID());\n      if (reservedContainers.isEmpty()) {\n        this.reservedContainers.remove(schedulerKey);\n      }\n\n      // Reset the re-reservation count\n      resetReReservations(schedulerKey);\n\n      Resource resource \u003d reservedContainer.getContainer().getResource();\n      this.attemptResourceUsage.decReserved(resource);\n\n      LOG.info(\n          \"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n              + node + \", currently has \" + reservedContainers.size()\n              + \" at priority \" + schedulerKey.getPriority()\n              + \"; currentReservation \" + this.attemptResourceUsage\n              .getReserved());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   private synchronized void unreserveInternal(\n-      Priority priority, FSSchedulerNode node) {\n+      SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n-        this.reservedContainers.get(priority);\n+        this.reservedContainers.get(schedulerKey);\n     RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n     if (reservedContainers.isEmpty()) {\n-      this.reservedContainers.remove(priority);\n+      this.reservedContainers.remove(schedulerKey);\n     }\n     \n     // Reset the re-reservation count\n-    resetReReservations(priority);\n+    resetReReservations(schedulerKey);\n \n     Resource resource \u003d reservedContainer.getContainer().getResource();\n     this.attemptResourceUsage.decReserved(resource);\n \n     LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n         + node + \", currently has \" + reservedContainers.size()\n-        + \" at priority \" + priority + \"; currentReservation \"\n+        + \" at priority \" + schedulerKey.getPriority() + \"; currentReservation \"\n         + this.attemptResourceUsage.getReserved());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void unreserveInternal(\n      SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(schedulerKey);\n    RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n    if (reservedContainers.isEmpty()) {\n      this.reservedContainers.remove(schedulerKey);\n    }\n    \n    // Reset the re-reservation count\n    resetReReservations(schedulerKey);\n\n    Resource resource \u003d reservedContainer.getContainer().getResource();\n    this.attemptResourceUsage.decReserved(resource);\n\n    LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n        + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + schedulerKey.getPriority() + \"; currentReservation \"\n        + this.attemptResourceUsage.getReserved());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {
            "oldValue": "[priority-Priority, node-FSSchedulerNode]",
            "newValue": "[schedulerKey-SchedulerRequestKey, node-FSSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
          "commitDate": "26/07/16 2:54 PM",
          "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "11/07/16 10:36 PM",
          "commitNameOld": "819224dcf9c683aa52f58633ac8e13663f1916d8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 14.68,
          "commitsBetweenForRepo": 98,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   private synchronized void unreserveInternal(\n-      Priority priority, FSSchedulerNode node) {\n+      SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n-        this.reservedContainers.get(priority);\n+        this.reservedContainers.get(schedulerKey);\n     RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n     if (reservedContainers.isEmpty()) {\n-      this.reservedContainers.remove(priority);\n+      this.reservedContainers.remove(schedulerKey);\n     }\n     \n     // Reset the re-reservation count\n-    resetReReservations(priority);\n+    resetReReservations(schedulerKey);\n \n     Resource resource \u003d reservedContainer.getContainer().getResource();\n     this.attemptResourceUsage.decReserved(resource);\n \n     LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n         + node + \", currently has \" + reservedContainers.size()\n-        + \" at priority \" + priority + \"; currentReservation \"\n+        + \" at priority \" + schedulerKey.getPriority() + \"; currentReservation \"\n         + this.attemptResourceUsage.getReserved());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private synchronized void unreserveInternal(\n      SchedulerRequestKey schedulerKey, FSSchedulerNode node) {\n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(schedulerKey);\n    RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n    if (reservedContainers.isEmpty()) {\n      this.reservedContainers.remove(schedulerKey);\n    }\n    \n    // Reset the re-reservation count\n    resetReReservations(schedulerKey);\n\n    Resource resource \u003d reservedContainer.getContainer().getResource();\n    this.attemptResourceUsage.decReserved(resource);\n\n    LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n        + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + schedulerKey.getPriority() + \"; currentReservation \"\n        + this.attemptResourceUsage.getReserved());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
          "extendedDetails": {}
        }
      ]
    },
    "586348e4cbf197188057d6b843a6701cfffdaff3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3356. Capacity Scheduler FiCaSchedulerApp should use ResourceUsage to track used-resources-by-label. Contributed by Wangda Tan\n",
      "commitDate": "20/03/15 1:54 PM",
      "commitName": "586348e4cbf197188057d6b843a6701cfffdaff3",
      "commitAuthor": "Jian He",
      "commitDateOld": "18/02/15 5:24 PM",
      "commitNameOld": "b8a14efdf535d42bcafa58d380bd2c7f4d36f8cb",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 29.81,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n   private synchronized void unreserveInternal(\n       Priority priority, FSSchedulerNode node) {\n     Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n         this.reservedContainers.get(priority);\n     RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n     if (reservedContainers.isEmpty()) {\n       this.reservedContainers.remove(priority);\n     }\n     \n     // Reset the re-reservation count\n     resetReReservations(priority);\n \n     Resource resource \u003d reservedContainer.getContainer().getResource();\n-    Resources.subtractFrom(currentReservation, resource);\n+    this.attemptResourceUsage.decReserved(resource);\n \n     LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n-        + node + \", currently has \" + reservedContainers.size() + \" at priority \"\n-        + priority + \"; currentReservation \" + currentReservation);\n+        + node + \", currently has \" + reservedContainers.size()\n+        + \" at priority \" + priority + \"; currentReservation \"\n+        + this.attemptResourceUsage.getReserved());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void unreserveInternal(\n      Priority priority, FSSchedulerNode node) {\n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n    if (reservedContainers.isEmpty()) {\n      this.reservedContainers.remove(priority);\n    }\n    \n    // Reset the re-reservation count\n    resetReReservations(priority);\n\n    Resource resource \u003d reservedContainer.getContainer().getResource();\n    this.attemptResourceUsage.decReserved(resource);\n\n    LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n        + node + \", currently has \" + reservedContainers.size()\n        + \" at priority \" + priority + \"; currentReservation \"\n        + this.attemptResourceUsage.getReserved());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,19 @@\n+  private synchronized void unreserveInternal(\n+      Priority priority, FSSchedulerNode node) {\n+    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n+        this.reservedContainers.get(priority);\n+    RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n+    if (reservedContainers.isEmpty()) {\n+      this.reservedContainers.remove(priority);\n+    }\n+    \n+    // Reset the re-reservation count\n+    resetReReservations(priority);\n+\n+    Resource resource \u003d reservedContainer.getContainer().getResource();\n+    Resources.subtractFrom(currentReservation, resource);\n+\n+    LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n+        + node + \", currently has \" + reservedContainers.size() + \" at priority \"\n+        + priority + \"; currentReservation \" + currentReservation);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private synchronized void unreserveInternal(\n      Priority priority, FSSchedulerNode node) {\n    Map\u003cNodeId, RMContainer\u003e reservedContainers \u003d \n        this.reservedContainers.get(priority);\n    RMContainer reservedContainer \u003d reservedContainers.remove(node.getNodeID());\n    if (reservedContainers.isEmpty()) {\n      this.reservedContainers.remove(priority);\n    }\n    \n    // Reset the re-reservation count\n    resetReReservations(priority);\n\n    Resource resource \u003d reservedContainer.getContainer().getResource();\n    Resources.subtractFrom(currentReservation, resource);\n\n    LOG.info(\"Application \" + getApplicationId() + \" unreserved \" + \" on node \"\n        + node + \", currently has \" + reservedContainers.size() + \" at priority \"\n        + priority + \"; currentReservation \" + currentReservation);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSAppAttempt.java"
    }
  }
}