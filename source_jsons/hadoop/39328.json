{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "getMaximumResourceCapability",
  "functionId": "getMaximumResourceCapability___queueName-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 2602,
  "functionEndLine": 2631,
  "numCommitsSeen": 239,
  "timeTaken": 6578,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "edce866489d83744f3f47a3b884b0c6136885e4a",
    "fd6be5898ad1a650e3bceacb8169a53520da57e5",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "edce866489d83744f3f47a3b884b0c6136885e4a": "Ybodychange",
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": "Ybodychange",
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "19/03/20 12:25 AM",
      "commitNameOld": "f2d3ac2a3f27a849e00f529c5c2df6ef0bd82911",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 6.16,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,30 @@\n   public Resource getMaximumResourceCapability(String queueName) {\n     if(queueName \u003d\u003d null || queueName.isEmpty()) {\n       return getMaximumResourceCapability();\n     }\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n-      LOG.error(\"Unknown queue: \" + queueName);\n+      if (isAmbiguous(queueName)) {\n+        LOG.error(\"Ambiguous queue reference: \" + queueName\n+            + \" please use full queue path instead.\");\n+      } else {\n+        LOG.error(\"Unknown queue: \" + queueName);\n+      }\n       return getMaximumResourceCapability();\n     }\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n       return getMaximumResourceCapability();\n     }\n \n     // queue.getMaxAllocation returns *configured* maximum allocation.\n     // getMaximumResourceCapability() returns maximum allocation considers\n     // per-node maximum resources. So return (component-wise) min of the two.\n \n     Resource queueMaxAllocation \u003d ((LeafQueue)queue).getMaximumAllocation();\n     Resource clusterMaxAllocationConsiderNodeMax \u003d\n         getMaximumResourceCapability();\n \n     return Resources.componentwiseMin(queueMaxAllocation,\n         clusterMaxAllocationConsiderNodeMax);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaximumResourceCapability(String queueName) {\n    if(queueName \u003d\u003d null || queueName.isEmpty()) {\n      return getMaximumResourceCapability();\n    }\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      if (isAmbiguous(queueName)) {\n        LOG.error(\"Ambiguous queue reference: \" + queueName\n            + \" please use full queue path instead.\");\n      } else {\n        LOG.error(\"Unknown queue: \" + queueName);\n      }\n      return getMaximumResourceCapability();\n    }\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n      return getMaximumResourceCapability();\n    }\n\n    // queue.getMaxAllocation returns *configured* maximum allocation.\n    // getMaximumResourceCapability() returns maximum allocation considers\n    // per-node maximum resources. So return (component-wise) min of the two.\n\n    Resource queueMaxAllocation \u003d ((LeafQueue)queue).getMaximumAllocation();\n    Resource clusterMaxAllocationConsiderNodeMax \u003d\n        getMaximumResourceCapability();\n\n    return Resources.componentwiseMin(queueMaxAllocation,\n        clusterMaxAllocationConsiderNodeMax);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "edce866489d83744f3f47a3b884b0c6136885e4a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8858. CapacityScheduler should respect maximum node resource when per-queue maximum-allocation is being used. Contributed by Wangda Tan.\n",
      "commitDate": "09/10/18 6:32 PM",
      "commitName": "edce866489d83744f3f47a3b884b0c6136885e4a",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "29/09/18 2:47 AM",
      "commitNameOld": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 10.66,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,25 @@\n   public Resource getMaximumResourceCapability(String queueName) {\n     if(queueName \u003d\u003d null || queueName.isEmpty()) {\n       return getMaximumResourceCapability();\n     }\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       LOG.error(\"Unknown queue: \" + queueName);\n       return getMaximumResourceCapability();\n     }\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n       return getMaximumResourceCapability();\n     }\n-    return ((LeafQueue)queue).getMaximumAllocation();\n+\n+    // queue.getMaxAllocation returns *configured* maximum allocation.\n+    // getMaximumResourceCapability() returns maximum allocation considers\n+    // per-node maximum resources. So return (component-wise) min of the two.\n+\n+    Resource queueMaxAllocation \u003d ((LeafQueue)queue).getMaximumAllocation();\n+    Resource clusterMaxAllocationConsiderNodeMax \u003d\n+        getMaximumResourceCapability();\n+\n+    return Resources.componentwiseMin(queueMaxAllocation,\n+        clusterMaxAllocationConsiderNodeMax);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaximumResourceCapability(String queueName) {\n    if(queueName \u003d\u003d null || queueName.isEmpty()) {\n      return getMaximumResourceCapability();\n    }\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      LOG.error(\"Unknown queue: \" + queueName);\n      return getMaximumResourceCapability();\n    }\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n      return getMaximumResourceCapability();\n    }\n\n    // queue.getMaxAllocation returns *configured* maximum allocation.\n    // getMaximumResourceCapability() returns maximum allocation considers\n    // per-node maximum resources. So return (component-wise) min of the two.\n\n    Resource queueMaxAllocation \u003d ((LeafQueue)queue).getMaximumAllocation();\n    Resource clusterMaxAllocationConsiderNodeMax \u003d\n        getMaximumResourceCapability();\n\n    return Resources.componentwiseMin(queueMaxAllocation,\n        clusterMaxAllocationConsiderNodeMax);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "fd6be5898ad1a650e3bceacb8169a53520da57e5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8468. Enable the use of queue based maximum container allocation limit and implement it in FairScheduler. Contributed by Antal BÃ¡lint Steinbach.\n",
      "commitDate": "29/09/18 2:47 AM",
      "commitName": "fd6be5898ad1a650e3bceacb8169a53520da57e5",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "52194351e7df33b8438569c3a032f73d696c534d",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 16.97,
      "commitsBetweenForRepo": 192,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,12 +1,15 @@\n   public Resource getMaximumResourceCapability(String queueName) {\n+    if(queueName \u003d\u003d null || queueName.isEmpty()) {\n+      return getMaximumResourceCapability();\n+    }\n     CSQueue queue \u003d getQueue(queueName);\n     if (queue \u003d\u003d null) {\n       LOG.error(\"Unknown queue: \" + queueName);\n       return getMaximumResourceCapability();\n     }\n     if (!(queue instanceof LeafQueue)) {\n       LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n       return getMaximumResourceCapability();\n     }\n     return ((LeafQueue)queue).getMaximumAllocation();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaximumResourceCapability(String queueName) {\n    if(queueName \u003d\u003d null || queueName.isEmpty()) {\n      return getMaximumResourceCapability();\n    }\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      LOG.error(\"Unknown queue: \" + queueName);\n      return getMaximumResourceCapability();\n    }\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n      return getMaximumResourceCapability();\n    }\n    return ((LeafQueue)queue).getMaximumAllocation();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1582. Capacity Scheduler: add a maximum-allocation-mb setting per queue. Contributed by Thomas Graves\n",
      "commitDate": "05/02/15 11:28 AM",
      "commitName": "69c8a7f45be5c0aa6787b07f328d74f1e2ba5628",
      "commitAuthor": "Jason Lowe",
      "diff": "@@ -0,0 +1,12 @@\n+  public Resource getMaximumResourceCapability(String queueName) {\n+    CSQueue queue \u003d getQueue(queueName);\n+    if (queue \u003d\u003d null) {\n+      LOG.error(\"Unknown queue: \" + queueName);\n+      return getMaximumResourceCapability();\n+    }\n+    if (!(queue instanceof LeafQueue)) {\n+      LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n+      return getMaximumResourceCapability();\n+    }\n+    return ((LeafQueue)queue).getMaximumAllocation();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getMaximumResourceCapability(String queueName) {\n    CSQueue queue \u003d getQueue(queueName);\n    if (queue \u003d\u003d null) {\n      LOG.error(\"Unknown queue: \" + queueName);\n      return getMaximumResourceCapability();\n    }\n    if (!(queue instanceof LeafQueue)) {\n      LOG.error(\"queue \" + queueName + \" is not an leaf queue\");\n      return getMaximumResourceCapability();\n    }\n    return ((LeafQueue)queue).getMaximumAllocation();\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}