{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BaileyBorweinPlouffe.java",
  "functionName": "cleanup",
  "functionId": "cleanup___context-Context",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
  "functionStartLine": 135,
  "functionEndLine": 190,
  "numCommitsSeen": 11,
  "timeTaken": 6340,
  "changeHistory": [
    "905b17876c44634545a68300ff2f2d73fb86d3b7",
    "26447229ba2c3d43db978c1b3ce95613669182ee",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "905b17876c44634545a68300ff2f2d73fb86d3b7": "Ybodychange",
    "26447229ba2c3d43db978c1b3ce95613669182ee": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "905b17876c44634545a68300ff2f2d73fb86d3b7": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4723. Fix warnings found by findbugs 2. Contributed by Sandy Ryza\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1409601 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/11/12 4:16 PM",
      "commitName": "905b17876c44634545a68300ff2f2d73fb86d3b7",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "18/11/11 5:24 PM",
      "commitNameOld": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 361.95,
      "commitsBetweenForRepo": 2325,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,56 @@\n     protected void cleanup(Context context\n         ) throws IOException, InterruptedException {\n       final Configuration conf \u003d context.getConfiguration();\n       final Path dir \u003d new Path(conf.get(WORKING_DIR_PROPERTY));\n       final FileSystem fs \u003d dir.getFileSystem(conf);\n \n       // write hex output\n       {\n         final Path hexfile \u003d new Path(conf.get(HEX_FILE_PROPERTY));\n         final OutputStream out \u003d new BufferedOutputStream(fs.create(hexfile));\n         try {\n           for (byte b : hex)\n             out.write(b);\n         } finally {\n           out.close();\n         }\n       }\n \n       // If the starting digit is 1,\n       // the hex value can be converted to decimal value.\n       if (conf.getInt(DIGIT_START_PROPERTY, 1) \u003d\u003d 1) {\n         final Path outfile \u003d new Path(dir, \"pi.txt\");\n         LOG.info(\"Writing text output to \" + outfile);\n         final OutputStream outputstream \u003d fs.create(outfile);\n         try {\n-          final PrintStream out \u003d new PrintStream(outputstream, true);\n+          final PrintWriter out \u003d new PrintWriter(\n+              new OutputStreamWriter(outputstream, Charsets.UTF_8), true);\n           // write hex text\n           print(out, hex.iterator(), \"Pi \u003d 0x3.\", \"%02X\", 5, 5);\n           out.println(\"Total number of hexadecimal digits is \"\n               + 2 * hex.size() + \".\");\n \n           // write decimal text\n           final Fraction dec \u003d new Fraction(hex);\n           final int decDigits \u003d 2 * hex.size(); // TODO: this is conservative.\n           print(out, new Iterator\u003cInteger\u003e() {\n             private int i \u003d 0;\n \n             public boolean hasNext() {\n               return i \u003c decDigits;\n             }\n \n             public Integer next() {\n               i++;\n               return dec.times10();\n             }\n \n             public void remove() {\n             }\n           }, \"Pi \u003d 3.\", \"%d\", 10, 5);\n           out.println(\"Total number of decimal digits is \" + decDigits + \".\");\n         } finally {\n           outputstream.close();\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void cleanup(Context context\n        ) throws IOException, InterruptedException {\n      final Configuration conf \u003d context.getConfiguration();\n      final Path dir \u003d new Path(conf.get(WORKING_DIR_PROPERTY));\n      final FileSystem fs \u003d dir.getFileSystem(conf);\n\n      // write hex output\n      {\n        final Path hexfile \u003d new Path(conf.get(HEX_FILE_PROPERTY));\n        final OutputStream out \u003d new BufferedOutputStream(fs.create(hexfile));\n        try {\n          for (byte b : hex)\n            out.write(b);\n        } finally {\n          out.close();\n        }\n      }\n\n      // If the starting digit is 1,\n      // the hex value can be converted to decimal value.\n      if (conf.getInt(DIGIT_START_PROPERTY, 1) \u003d\u003d 1) {\n        final Path outfile \u003d new Path(dir, \"pi.txt\");\n        LOG.info(\"Writing text output to \" + outfile);\n        final OutputStream outputstream \u003d fs.create(outfile);\n        try {\n          final PrintWriter out \u003d new PrintWriter(\n              new OutputStreamWriter(outputstream, Charsets.UTF_8), true);\n          // write hex text\n          print(out, hex.iterator(), \"Pi \u003d 0x3.\", \"%02X\", 5, 5);\n          out.println(\"Total number of hexadecimal digits is \"\n              + 2 * hex.size() + \".\");\n\n          // write decimal text\n          final Fraction dec \u003d new Fraction(hex);\n          final int decDigits \u003d 2 * hex.size(); // TODO: this is conservative.\n          print(out, new Iterator\u003cInteger\u003e() {\n            private int i \u003d 0;\n\n            public boolean hasNext() {\n              return i \u003c decDigits;\n            }\n\n            public Integer next() {\n              i++;\n              return dec.times10();\n            }\n\n            public void remove() {\n            }\n          }, \"Pi \u003d 3.\", \"%d\", 10, 5);\n          out.println(\"Total number of decimal digits is \" + decDigits + \".\");\n        } finally {\n          outputstream.close();\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {}
    },
    "26447229ba2c3d43db978c1b3ce95613669182ee": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7590. Mavenize streaming and MR examples. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1203941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/11/11 5:24 PM",
      "commitName": "26447229ba2c3d43db978c1b3ce95613669182ee",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "18/11/11 1:04 AM",
      "commitNameOld": "905a127850d5e0cba85c2e075f989fa0f5cf129a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void cleanup(Context context\n        ) throws IOException, InterruptedException {\n      final Configuration conf \u003d context.getConfiguration();\n      final Path dir \u003d new Path(conf.get(WORKING_DIR_PROPERTY));\n      final FileSystem fs \u003d dir.getFileSystem(conf);\n\n      // write hex output\n      {\n        final Path hexfile \u003d new Path(conf.get(HEX_FILE_PROPERTY));\n        final OutputStream out \u003d new BufferedOutputStream(fs.create(hexfile));\n        try {\n          for (byte b : hex)\n            out.write(b);\n        } finally {\n          out.close();\n        }\n      }\n\n      // If the starting digit is 1,\n      // the hex value can be converted to decimal value.\n      if (conf.getInt(DIGIT_START_PROPERTY, 1) \u003d\u003d 1) {\n        final Path outfile \u003d new Path(dir, \"pi.txt\");\n        LOG.info(\"Writing text output to \" + outfile);\n        final OutputStream outputstream \u003d fs.create(outfile);\n        try {\n          final PrintStream out \u003d new PrintStream(outputstream, true);\n          // write hex text\n          print(out, hex.iterator(), \"Pi \u003d 0x3.\", \"%02X\", 5, 5);\n          out.println(\"Total number of hexadecimal digits is \"\n              + 2 * hex.size() + \".\");\n\n          // write decimal text\n          final Fraction dec \u003d new Fraction(hex);\n          final int decDigits \u003d 2 * hex.size(); // TODO: this is conservative.\n          print(out, new Iterator\u003cInteger\u003e() {\n            private int i \u003d 0;\n\n            public boolean hasNext() {\n              return i \u003c decDigits;\n            }\n\n            public Integer next() {\n              i++;\n              return dec.times10();\n            }\n\n            public void remove() {\n            }\n          }, \"Pi \u003d 3.\", \"%d\", 10, 5);\n          out.println(\"Total number of decimal digits is \" + decDigits + \".\");\n        } finally {\n          outputstream.close();\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-examples/src/main/java/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void cleanup(Context context\n        ) throws IOException, InterruptedException {\n      final Configuration conf \u003d context.getConfiguration();\n      final Path dir \u003d new Path(conf.get(WORKING_DIR_PROPERTY));\n      final FileSystem fs \u003d dir.getFileSystem(conf);\n\n      // write hex output\n      {\n        final Path hexfile \u003d new Path(conf.get(HEX_FILE_PROPERTY));\n        final OutputStream out \u003d new BufferedOutputStream(fs.create(hexfile));\n        try {\n          for (byte b : hex)\n            out.write(b);\n        } finally {\n          out.close();\n        }\n      }\n\n      // If the starting digit is 1,\n      // the hex value can be converted to decimal value.\n      if (conf.getInt(DIGIT_START_PROPERTY, 1) \u003d\u003d 1) {\n        final Path outfile \u003d new Path(dir, \"pi.txt\");\n        LOG.info(\"Writing text output to \" + outfile);\n        final OutputStream outputstream \u003d fs.create(outfile);\n        try {\n          final PrintStream out \u003d new PrintStream(outputstream, true);\n          // write hex text\n          print(out, hex.iterator(), \"Pi \u003d 0x3.\", \"%02X\", 5, 5);\n          out.println(\"Total number of hexadecimal digits is \"\n              + 2 * hex.size() + \".\");\n\n          // write decimal text\n          final Fraction dec \u003d new Fraction(hex);\n          final int decDigits \u003d 2 * hex.size(); // TODO: this is conservative.\n          print(out, new Iterator\u003cInteger\u003e() {\n            private int i \u003d 0;\n\n            public boolean hasNext() {\n              return i \u003c decDigits;\n            }\n\n            public Integer next() {\n              i++;\n              return dec.times10();\n            }\n\n            public void remove() {\n            }\n          }, \"Pi \u003d 3.\", \"%d\", 10, 5);\n          out.println(\"Total number of decimal digits is \" + decDigits + \".\");\n        } finally {\n          outputstream.close();\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
        "newPath": "hadoop-mapreduce-project/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void cleanup(Context context\n        ) throws IOException, InterruptedException {\n      final Configuration conf \u003d context.getConfiguration();\n      final Path dir \u003d new Path(conf.get(WORKING_DIR_PROPERTY));\n      final FileSystem fs \u003d dir.getFileSystem(conf);\n\n      // write hex output\n      {\n        final Path hexfile \u003d new Path(conf.get(HEX_FILE_PROPERTY));\n        final OutputStream out \u003d new BufferedOutputStream(fs.create(hexfile));\n        try {\n          for (byte b : hex)\n            out.write(b);\n        } finally {\n          out.close();\n        }\n      }\n\n      // If the starting digit is 1,\n      // the hex value can be converted to decimal value.\n      if (conf.getInt(DIGIT_START_PROPERTY, 1) \u003d\u003d 1) {\n        final Path outfile \u003d new Path(dir, \"pi.txt\");\n        LOG.info(\"Writing text output to \" + outfile);\n        final OutputStream outputstream \u003d fs.create(outfile);\n        try {\n          final PrintStream out \u003d new PrintStream(outputstream, true);\n          // write hex text\n          print(out, hex.iterator(), \"Pi \u003d 0x3.\", \"%02X\", 5, 5);\n          out.println(\"Total number of hexadecimal digits is \"\n              + 2 * hex.size() + \".\");\n\n          // write decimal text\n          final Fraction dec \u003d new Fraction(hex);\n          final int decDigits \u003d 2 * hex.size(); // TODO: this is conservative.\n          print(out, new Iterator\u003cInteger\u003e() {\n            private int i \u003d 0;\n\n            public boolean hasNext() {\n              return i \u003c decDigits;\n            }\n\n            public Integer next() {\n              i++;\n              return dec.times10();\n            }\n\n            public void remove() {\n            }\n          }, \"Pi \u003d 3.\", \"%d\", 10, 5);\n          out.println(\"Total number of decimal digits is \" + decDigits + \".\");\n        } finally {\n          outputstream.close();\n        }\n      }\n    }",
      "path": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java",
        "newPath": "hadoop-mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,55 @@\n+    protected void cleanup(Context context\n+        ) throws IOException, InterruptedException {\n+      final Configuration conf \u003d context.getConfiguration();\n+      final Path dir \u003d new Path(conf.get(WORKING_DIR_PROPERTY));\n+      final FileSystem fs \u003d dir.getFileSystem(conf);\n+\n+      // write hex output\n+      {\n+        final Path hexfile \u003d new Path(conf.get(HEX_FILE_PROPERTY));\n+        final OutputStream out \u003d new BufferedOutputStream(fs.create(hexfile));\n+        try {\n+          for (byte b : hex)\n+            out.write(b);\n+        } finally {\n+          out.close();\n+        }\n+      }\n+\n+      // If the starting digit is 1,\n+      // the hex value can be converted to decimal value.\n+      if (conf.getInt(DIGIT_START_PROPERTY, 1) \u003d\u003d 1) {\n+        final Path outfile \u003d new Path(dir, \"pi.txt\");\n+        LOG.info(\"Writing text output to \" + outfile);\n+        final OutputStream outputstream \u003d fs.create(outfile);\n+        try {\n+          final PrintStream out \u003d new PrintStream(outputstream, true);\n+          // write hex text\n+          print(out, hex.iterator(), \"Pi \u003d 0x3.\", \"%02X\", 5, 5);\n+          out.println(\"Total number of hexadecimal digits is \"\n+              + 2 * hex.size() + \".\");\n+\n+          // write decimal text\n+          final Fraction dec \u003d new Fraction(hex);\n+          final int decDigits \u003d 2 * hex.size(); // TODO: this is conservative.\n+          print(out, new Iterator\u003cInteger\u003e() {\n+            private int i \u003d 0;\n+\n+            public boolean hasNext() {\n+              return i \u003c decDigits;\n+            }\n+\n+            public Integer next() {\n+              i++;\n+              return dec.times10();\n+            }\n+\n+            public void remove() {\n+            }\n+          }, \"Pi \u003d 3.\", \"%d\", 10, 5);\n+          out.println(\"Total number of decimal digits is \" + decDigits + \".\");\n+        } finally {\n+          outputstream.close();\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void cleanup(Context context\n        ) throws IOException, InterruptedException {\n      final Configuration conf \u003d context.getConfiguration();\n      final Path dir \u003d new Path(conf.get(WORKING_DIR_PROPERTY));\n      final FileSystem fs \u003d dir.getFileSystem(conf);\n\n      // write hex output\n      {\n        final Path hexfile \u003d new Path(conf.get(HEX_FILE_PROPERTY));\n        final OutputStream out \u003d new BufferedOutputStream(fs.create(hexfile));\n        try {\n          for (byte b : hex)\n            out.write(b);\n        } finally {\n          out.close();\n        }\n      }\n\n      // If the starting digit is 1,\n      // the hex value can be converted to decimal value.\n      if (conf.getInt(DIGIT_START_PROPERTY, 1) \u003d\u003d 1) {\n        final Path outfile \u003d new Path(dir, \"pi.txt\");\n        LOG.info(\"Writing text output to \" + outfile);\n        final OutputStream outputstream \u003d fs.create(outfile);\n        try {\n          final PrintStream out \u003d new PrintStream(outputstream, true);\n          // write hex text\n          print(out, hex.iterator(), \"Pi \u003d 0x3.\", \"%02X\", 5, 5);\n          out.println(\"Total number of hexadecimal digits is \"\n              + 2 * hex.size() + \".\");\n\n          // write decimal text\n          final Fraction dec \u003d new Fraction(hex);\n          final int decDigits \u003d 2 * hex.size(); // TODO: this is conservative.\n          print(out, new Iterator\u003cInteger\u003e() {\n            private int i \u003d 0;\n\n            public boolean hasNext() {\n              return i \u003c decDigits;\n            }\n\n            public Integer next() {\n              i++;\n              return dec.times10();\n            }\n\n            public void remove() {\n            }\n          }, \"Pi \u003d 3.\", \"%d\", 10, 5);\n          out.println(\"Total number of decimal digits is \" + decDigits + \".\");\n        } finally {\n          outputstream.close();\n        }\n      }\n    }",
      "path": "mapreduce/src/examples/org/apache/hadoop/examples/BaileyBorweinPlouffe.java"
    }
  }
}