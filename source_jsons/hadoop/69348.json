{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TotalHeapUsageEmulatorPlugin.java",
  "functionName": "emulate",
  "functionId": "emulate",
  "sourceFilePath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java",
  "functionStartLine": 210,
  "functionEndLine": 249,
  "numCommitsSeen": 9,
  "timeTaken": 903,
  "changeHistory": [
    "dcf84707ab50662add112bd6b01c0bfd63374853",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a732ab38047299c545cfc978e25f6b2871b5a4b3"
  ],
  "changeHistoryShort": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": "Yfilerename",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yfilerename",
    "a732ab38047299c545cfc978e25f6b2871b5a4b3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "dcf84707ab50662add112bd6b01c0bfd63374853": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-3543. Mavenize Gridmix. (tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1339629 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/05/12 8:06 AM",
      "commitName": "dcf84707ab50662add112bd6b01c0bfd63374853",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "17/05/12 7:20 AM",
      "commitNameOld": "e1f09365ca0bee093f849fcf2e546dd6e2c0a965",
      "commitAuthorOld": "Harsh J",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (prevEmulationProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - prevEmulationProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n\n        long maxHeapSizeInMB \u003d getMaxHeapUsageInMB();\n        long committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n        \n        // Increase committed heap usage, if needed\n        // Using a linear weighing function for computing the expected usage\n        long expectedHeapUsageInMB \u003d \n          Math.min(maxHeapSizeInMB,\n                   (long) (targetHeapUsageInMB * currentProgress));\n        if (expectedHeapUsageInMB \u003c maxHeapSizeInMB\n            \u0026\u0026 committedHeapSizeInMB \u003c expectedHeapUsageInMB) {\n          long bufferInMB \u003d (long)(minFreeHeapRatio * expectedHeapUsageInMB);\n          long currentDifferenceInMB \u003d \n            expectedHeapUsageInMB - committedHeapSizeInMB;\n          long currentIncrementLoadSizeInMB \u003d \n                (long)(currentDifferenceInMB * heapLoadRatio);\n          // Make sure that at least 1 MB is incremented.\n          currentIncrementLoadSizeInMB \u003d \n            Math.max(1, currentIncrementLoadSizeInMB);\n          while (committedHeapSizeInMB + bufferInMB \u003c expectedHeapUsageInMB) {\n            // add blocks in order of X% of the difference, X \u003d 10% by default\n            emulatorCore.load(currentIncrementLoadSizeInMB);\n            committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n          }\n        }\n        \n        // store the emulation progress boundary\n        prevEmulationProgress \u003d currentProgress;\n      }\n      \n      // reset the core so that the garbage is reclaimed\n      emulatorCore.reset();\n    }\n  }",
      "path": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java",
        "newPath": "hadoop-tools/hadoop-gridmix/src/main/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (prevEmulationProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - prevEmulationProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n\n        long maxHeapSizeInMB \u003d getMaxHeapUsageInMB();\n        long committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n        \n        // Increase committed heap usage, if needed\n        // Using a linear weighing function for computing the expected usage\n        long expectedHeapUsageInMB \u003d \n          Math.min(maxHeapSizeInMB,\n                   (long) (targetHeapUsageInMB * currentProgress));\n        if (expectedHeapUsageInMB \u003c maxHeapSizeInMB\n            \u0026\u0026 committedHeapSizeInMB \u003c expectedHeapUsageInMB) {\n          long bufferInMB \u003d (long)(minFreeHeapRatio * expectedHeapUsageInMB);\n          long currentDifferenceInMB \u003d \n            expectedHeapUsageInMB - committedHeapSizeInMB;\n          long currentIncrementLoadSizeInMB \u003d \n                (long)(currentDifferenceInMB * heapLoadRatio);\n          // Make sure that at least 1 MB is incremented.\n          currentIncrementLoadSizeInMB \u003d \n            Math.max(1, currentIncrementLoadSizeInMB);\n          while (committedHeapSizeInMB + bufferInMB \u003c expectedHeapUsageInMB) {\n            // add blocks in order of X% of the difference, X \u003d 10% by default\n            emulatorCore.load(currentIncrementLoadSizeInMB);\n            committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n          }\n        }\n        \n        // store the emulation progress boundary\n        prevEmulationProgress \u003d currentProgress;\n      }\n      \n      // reset the core so that the garbage is reclaimed\n      emulatorCore.reset();\n    }\n  }",
      "path": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java",
        "newPath": "hadoop-mapreduce-project/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yfilerename",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/08/11 8:02 PM",
      "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.34,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (prevEmulationProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - prevEmulationProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n\n        long maxHeapSizeInMB \u003d getMaxHeapUsageInMB();\n        long committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n        \n        // Increase committed heap usage, if needed\n        // Using a linear weighing function for computing the expected usage\n        long expectedHeapUsageInMB \u003d \n          Math.min(maxHeapSizeInMB,\n                   (long) (targetHeapUsageInMB * currentProgress));\n        if (expectedHeapUsageInMB \u003c maxHeapSizeInMB\n            \u0026\u0026 committedHeapSizeInMB \u003c expectedHeapUsageInMB) {\n          long bufferInMB \u003d (long)(minFreeHeapRatio * expectedHeapUsageInMB);\n          long currentDifferenceInMB \u003d \n            expectedHeapUsageInMB - committedHeapSizeInMB;\n          long currentIncrementLoadSizeInMB \u003d \n                (long)(currentDifferenceInMB * heapLoadRatio);\n          // Make sure that at least 1 MB is incremented.\n          currentIncrementLoadSizeInMB \u003d \n            Math.max(1, currentIncrementLoadSizeInMB);\n          while (committedHeapSizeInMB + bufferInMB \u003c expectedHeapUsageInMB) {\n            // add blocks in order of X% of the difference, X \u003d 10% by default\n            emulatorCore.load(currentIncrementLoadSizeInMB);\n            committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n          }\n        }\n        \n        // store the emulation progress boundary\n        prevEmulationProgress \u003d currentProgress;\n      }\n      \n      // reset the core so that the garbage is reclaimed\n      emulatorCore.reset();\n    }\n  }",
      "path": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java",
      "extendedDetails": {
        "oldPath": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java",
        "newPath": "hadoop-mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java"
      }
    },
    "a732ab38047299c545cfc978e25f6b2871b5a4b3": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-2107. [Gridmix] Total heap usage emulation in Gridmix. (Amar Kamat and Ravi Gummadi via amarrk)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1136000 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/06/11 4:37 AM",
      "commitName": "a732ab38047299c545cfc978e25f6b2871b5a4b3",
      "commitAuthor": "Amar Kamat",
      "diff": "@@ -0,0 +1,40 @@\n+  public void emulate() throws IOException, InterruptedException {\n+    if (enabled) {\n+      float currentProgress \u003d progress.getProgress();\n+      if (prevEmulationProgress \u003c currentProgress \n+          \u0026\u0026 ((currentProgress - prevEmulationProgress) \u003e\u003d emulationInterval\n+              || currentProgress \u003d\u003d 1)) {\n+\n+        long maxHeapSizeInMB \u003d getMaxHeapUsageInMB();\n+        long committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n+        \n+        // Increase committed heap usage, if needed\n+        // Using a linear weighing function for computing the expected usage\n+        long expectedHeapUsageInMB \u003d \n+          Math.min(maxHeapSizeInMB,\n+                   (long) (targetHeapUsageInMB * currentProgress));\n+        if (expectedHeapUsageInMB \u003c maxHeapSizeInMB\n+            \u0026\u0026 committedHeapSizeInMB \u003c expectedHeapUsageInMB) {\n+          long bufferInMB \u003d (long)(minFreeHeapRatio * expectedHeapUsageInMB);\n+          long currentDifferenceInMB \u003d \n+            expectedHeapUsageInMB - committedHeapSizeInMB;\n+          long currentIncrementLoadSizeInMB \u003d \n+                (long)(currentDifferenceInMB * heapLoadRatio);\n+          // Make sure that at least 1 MB is incremented.\n+          currentIncrementLoadSizeInMB \u003d \n+            Math.max(1, currentIncrementLoadSizeInMB);\n+          while (committedHeapSizeInMB + bufferInMB \u003c expectedHeapUsageInMB) {\n+            // add blocks in order of X% of the difference, X \u003d 10% by default\n+            emulatorCore.load(currentIncrementLoadSizeInMB);\n+            committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n+          }\n+        }\n+        \n+        // store the emulation progress boundary\n+        prevEmulationProgress \u003d currentProgress;\n+      }\n+      \n+      // reset the core so that the garbage is reclaimed\n+      emulatorCore.reset();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void emulate() throws IOException, InterruptedException {\n    if (enabled) {\n      float currentProgress \u003d progress.getProgress();\n      if (prevEmulationProgress \u003c currentProgress \n          \u0026\u0026 ((currentProgress - prevEmulationProgress) \u003e\u003d emulationInterval\n              || currentProgress \u003d\u003d 1)) {\n\n        long maxHeapSizeInMB \u003d getMaxHeapUsageInMB();\n        long committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n        \n        // Increase committed heap usage, if needed\n        // Using a linear weighing function for computing the expected usage\n        long expectedHeapUsageInMB \u003d \n          Math.min(maxHeapSizeInMB,\n                   (long) (targetHeapUsageInMB * currentProgress));\n        if (expectedHeapUsageInMB \u003c maxHeapSizeInMB\n            \u0026\u0026 committedHeapSizeInMB \u003c expectedHeapUsageInMB) {\n          long bufferInMB \u003d (long)(minFreeHeapRatio * expectedHeapUsageInMB);\n          long currentDifferenceInMB \u003d \n            expectedHeapUsageInMB - committedHeapSizeInMB;\n          long currentIncrementLoadSizeInMB \u003d \n                (long)(currentDifferenceInMB * heapLoadRatio);\n          // Make sure that at least 1 MB is incremented.\n          currentIncrementLoadSizeInMB \u003d \n            Math.max(1, currentIncrementLoadSizeInMB);\n          while (committedHeapSizeInMB + bufferInMB \u003c expectedHeapUsageInMB) {\n            // add blocks in order of X% of the difference, X \u003d 10% by default\n            emulatorCore.load(currentIncrementLoadSizeInMB);\n            committedHeapSizeInMB \u003d getTotalHeapUsageInMB();\n          }\n        }\n        \n        // store the emulation progress boundary\n        prevEmulationProgress \u003d currentProgress;\n      }\n      \n      // reset the core so that the garbage is reclaimed\n      emulatorCore.reset();\n    }\n  }",
      "path": "mapreduce/src/contrib/gridmix/src/java/org/apache/hadoop/mapred/gridmix/emulators/resourceusage/TotalHeapUsageEmulatorPlugin.java"
    }
  }
}