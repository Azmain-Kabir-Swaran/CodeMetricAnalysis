{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApiServer.java",
  "functionName": "flexService",
  "functionId": "flexService___service-Service__ugi-UserGroupInformation",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
  "functionStartLine": 632,
  "functionEndLine": 667,
  "numCommitsSeen": 30,
  "timeTaken": 2163,
  "changeHistory": [
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d"
  ],
  "changeHistoryShort": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": "Ybodychange",
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": "Yfilerename",
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "efc4d91cbeab8a13f6d61cb0e56443adb2d77559": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9067. YARN Resource Manager is running OOM because of leak of Configuration Object. Contributed by Eric Yang.\n",
      "commitDate": "28/11/18 5:34 PM",
      "commitName": "efc4d91cbeab8a13f6d61cb0e56443adb2d77559",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "12/11/18 4:53 PM",
      "commitNameOld": "4c465f5535054dad2ef0b18128fb115129f6939e",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 16.03,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,36 @@\n   private Response flexService(Service service, UserGroupInformation ugi)\n       throws IOException, InterruptedException {\n     String appName \u003d service.getName();\n     Response response \u003d Response.status(Status.BAD_REQUEST).build();\n     Map\u003cString, String\u003e componentCountStrings \u003d new HashMap\u003cString, String\u003e();\n     for (Component c : service.getComponents()) {\n       componentCountStrings.put(c.getName(),\n           c.getNumberOfContainers().toString());\n     }\n     Integer result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n \n       @Override\n       public Integer run() throws YarnException, IOException {\n         int result \u003d 0;\n         ServiceClient sc \u003d new ServiceClient();\n-        sc.init(YARN_CONFIG);\n-        sc.start();\n-        result \u003d sc\n-            .actionFlex(appName, componentCountStrings);\n-        sc.close();\n-        return Integer.valueOf(result);\n+        try {\n+          sc.init(YARN_CONFIG);\n+          sc.start();\n+          result \u003d sc\n+              .actionFlex(appName, componentCountStrings);\n+          return Integer.valueOf(result);\n+        } finally {\n+          sc.close();\n+        }\n       }\n     });\n     if (result \u003d\u003d EXIT_SUCCESS) {\n       String message \u003d \"Service \" + appName + \" is successfully flexed.\";\n       LOG.info(message);\n       ServiceStatus status \u003d new ServiceStatus();\n       status.setDiagnostics(message);\n       status.setState(ServiceState.ACCEPTED);\n       response \u003d formatResponse(Status.ACCEPTED, status);\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response flexService(Service service, UserGroupInformation ugi)\n      throws IOException, InterruptedException {\n    String appName \u003d service.getName();\n    Response response \u003d Response.status(Status.BAD_REQUEST).build();\n    Map\u003cString, String\u003e componentCountStrings \u003d new HashMap\u003cString, String\u003e();\n    for (Component c : service.getComponents()) {\n      componentCountStrings.put(c.getName(),\n          c.getNumberOfContainers().toString());\n    }\n    Integer result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n\n      @Override\n      public Integer run() throws YarnException, IOException {\n        int result \u003d 0;\n        ServiceClient sc \u003d new ServiceClient();\n        try {\n          sc.init(YARN_CONFIG);\n          sc.start();\n          result \u003d sc\n              .actionFlex(appName, componentCountStrings);\n          return Integer.valueOf(result);\n        } finally {\n          sc.close();\n        }\n      }\n    });\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      String message \u003d \"Service \" + appName + \" is successfully flexed.\";\n      LOG.info(message);\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(message);\n      status.setState(ServiceState.ACCEPTED);\n      response \u003d formatResponse(Status.ACCEPTED, status);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {}
    },
    "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7530.  Refactored YARN service API project location.\n            Contributed by Chandni Singh\n",
      "commitDate": "18/05/18 2:29 PM",
      "commitName": "a23ff8d88001ad8e4ac4c36fc1f7691d193dc1d0",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "18/05/18 11:29 AM",
      "commitNameOld": "89f59113927dd886f09d8fe2c05ff2cd5d1390c1",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private Response flexService(Service service, UserGroupInformation ugi)\n      throws IOException, InterruptedException {\n    String appName \u003d service.getName();\n    Response response \u003d Response.status(Status.BAD_REQUEST).build();\n    Map\u003cString, String\u003e componentCountStrings \u003d new HashMap\u003cString, String\u003e();\n    for (Component c : service.getComponents()) {\n      componentCountStrings.put(c.getName(),\n          c.getNumberOfContainers().toString());\n    }\n    Integer result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n\n      @Override\n      public Integer run() throws YarnException, IOException {\n        int result \u003d 0;\n        ServiceClient sc \u003d new ServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        result \u003d sc\n            .actionFlex(appName, componentCountStrings);\n        sc.close();\n        return Integer.valueOf(result);\n      }\n    });\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      String message \u003d \"Service \" + appName + \" is successfully flexed.\";\n      LOG.info(message);\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(message);\n      status.setState(ServiceState.ACCEPTED);\n      response \u003d formatResponse(Status.ACCEPTED, status);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
      }
    },
    "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7540 and YARN-7605. Convert yarn app cli to call yarn api services and implement doAs for Api Service REST API. Contributed by Eric Yang and Jian He\n",
      "commitDate": "23/01/18 5:54 PM",
      "commitName": "e307edcb472207a39d1cbe4be6f7fcddc7b4fd6d",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,33 @@\n+  private Response flexService(Service service, UserGroupInformation ugi)\n+      throws IOException, InterruptedException {\n+    String appName \u003d service.getName();\n+    Response response \u003d Response.status(Status.BAD_REQUEST).build();\n+    Map\u003cString, String\u003e componentCountStrings \u003d new HashMap\u003cString, String\u003e();\n+    for (Component c : service.getComponents()) {\n+      componentCountStrings.put(c.getName(),\n+          c.getNumberOfContainers().toString());\n+    }\n+    Integer result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n+\n+      @Override\n+      public Integer run() throws YarnException, IOException {\n+        int result \u003d 0;\n+        ServiceClient sc \u003d new ServiceClient();\n+        sc.init(YARN_CONFIG);\n+        sc.start();\n+        result \u003d sc\n+            .actionFlex(appName, componentCountStrings);\n+        sc.close();\n+        return Integer.valueOf(result);\n+      }\n+    });\n+    if (result \u003d\u003d EXIT_SUCCESS) {\n+      String message \u003d \"Service \" + appName + \" is successfully flexed.\";\n+      LOG.info(message);\n+      ServiceStatus status \u003d new ServiceStatus();\n+      status.setDiagnostics(message);\n+      status.setState(ServiceState.ACCEPTED);\n+      response \u003d formatResponse(Status.ACCEPTED, status);\n+    }\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response flexService(Service service, UserGroupInformation ugi)\n      throws IOException, InterruptedException {\n    String appName \u003d service.getName();\n    Response response \u003d Response.status(Status.BAD_REQUEST).build();\n    Map\u003cString, String\u003e componentCountStrings \u003d new HashMap\u003cString, String\u003e();\n    for (Component c : service.getComponents()) {\n      componentCountStrings.put(c.getName(),\n          c.getNumberOfContainers().toString());\n    }\n    Integer result \u003d ugi.doAs(new PrivilegedExceptionAction\u003cInteger\u003e() {\n\n      @Override\n      public Integer run() throws YarnException, IOException {\n        int result \u003d 0;\n        ServiceClient sc \u003d new ServiceClient();\n        sc.init(YARN_CONFIG);\n        sc.start();\n        result \u003d sc\n            .actionFlex(appName, componentCountStrings);\n        sc.close();\n        return Integer.valueOf(result);\n      }\n    });\n    if (result \u003d\u003d EXIT_SUCCESS) {\n      String message \u003d \"Service \" + appName + \" is successfully flexed.\";\n      LOG.info(message);\n      ServiceStatus status \u003d new ServiceStatus();\n      status.setDiagnostics(message);\n      status.setState(ServiceState.ACCEPTED);\n      response \u003d formatResponse(Status.ACCEPTED, status);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services-api/src/main/java/org/apache/hadoop/yarn/service/webapp/ApiServer.java"
    }
  }
}