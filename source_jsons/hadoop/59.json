{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "OpenFileCtxCache.java",
  "functionName": "getEntryToEvict",
  "functionId": "getEntryToEvict",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
  "functionStartLine": 69,
  "functionEndLine": 116,
  "numCommitsSeen": 10,
  "timeTaken": 1320,
  "changeHistory": [
    "b4564103e4709caa1135f6ccc2864d90e54f2ac9",
    "42391d260da400593812396c1ffd45d1a371d3cb",
    "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45"
  ],
  "changeHistoryShort": {
    "b4564103e4709caa1135f6ccc2864d90e54f2ac9": "Ybodychange",
    "42391d260da400593812396c1ffd45d1a371d3cb": "Ybodychange",
    "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd": "Ybodychange",
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b4564103e4709caa1135f6ccc2864d90e54f2ac9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10752. Several log refactoring/improvement suggestion in HDFS. Contributed by Hanisha Koneru.\n",
      "commitDate": "19/10/16 5:20 PM",
      "commitName": "b4564103e4709caa1135f6ccc2864d90e54f2ac9",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/10/14 9:27 PM",
      "commitNameOld": "d71d40a63d198991077d5babd70be5e9787a53f1",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 727.83,
      "commitsBetweenForRepo": 5526,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n     Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n         .iterator();\n     if (LOG.isTraceEnabled()) {\n-      LOG.trace(\"openFileMap size:\" + openFileMap.size());\n+      LOG.trace(\"openFileMap size:\" + size());\n     }\n \n     Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n     \n     while (it.hasNext()) {\n       Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n       OpenFileCtx ctx \u003d pairs.getValue();\n       if (!ctx.getActiveState()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Got one inactive stream: \" + ctx);\n         }\n         return pairs;\n       }\n       if (ctx.hasPendingWork()) {\n         // Always skip files with pending work.\n         continue;\n       }\n       if (idlest \u003d\u003d null) {\n         idlest \u003d pairs;\n       } else {\n         if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n           idlest \u003d pairs;\n         }\n       }\n     }\n \n     if (idlest \u003d\u003d null) {\n       LOG.warn(\"No eviction candidate. All streams have pending work.\");\n       return null;\n     } else {\n       long idleTime \u003d Time.monotonicNow()\n           - idlest.getValue().getLastAccessTime();\n       if (idleTime \u003c NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n         }\n         LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n         return null;\n       } else {\n         return idlest;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n    Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n        .iterator();\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"openFileMap size:\" + size());\n    }\n\n    Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n    \n    while (it.hasNext()) {\n      Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n      OpenFileCtx ctx \u003d pairs.getValue();\n      if (!ctx.getActiveState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Got one inactive stream: \" + ctx);\n        }\n        return pairs;\n      }\n      if (ctx.hasPendingWork()) {\n        // Always skip files with pending work.\n        continue;\n      }\n      if (idlest \u003d\u003d null) {\n        idlest \u003d pairs;\n      } else {\n        if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n          idlest \u003d pairs;\n        }\n      }\n    }\n\n    if (idlest \u003d\u003d null) {\n      LOG.warn(\"No eviction candidate. All streams have pending work.\");\n      return null;\n    } else {\n      long idleTime \u003d Time.monotonicNow()\n          - idlest.getValue().getLastAccessTime();\n      if (idleTime \u003c NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n        }\n        LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n        return null;\n      } else {\n        return idlest;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
      "extendedDetails": {}
    },
    "42391d260da400593812396c1ffd45d1a371d3cb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6056. Clean up NFS config settings. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598782 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/05/14 4:53 PM",
      "commitName": "42391d260da400593812396c1ffd45d1a371d3cb",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "27/05/14 1:21 PM",
      "commitNameOld": "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n     Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n         .iterator();\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"openFileMap size:\" + openFileMap.size());\n     }\n \n     Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n     \n     while (it.hasNext()) {\n       Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n       OpenFileCtx ctx \u003d pairs.getValue();\n       if (!ctx.getActiveState()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Got one inactive stream: \" + ctx);\n         }\n         return pairs;\n       }\n       if (ctx.hasPendingWork()) {\n         // Always skip files with pending work.\n         continue;\n       }\n       if (idlest \u003d\u003d null) {\n         idlest \u003d pairs;\n       } else {\n         if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n           idlest \u003d pairs;\n         }\n       }\n     }\n \n     if (idlest \u003d\u003d null) {\n       LOG.warn(\"No eviction candidate. All streams have pending work.\");\n       return null;\n     } else {\n       long idleTime \u003d Time.monotonicNow()\n           - idlest.getValue().getLastAccessTime();\n-      if (idleTime \u003c Nfs3Constant.OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT) {\n+      if (idleTime \u003c NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n         }\n         LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n         return null;\n       } else {\n         return idlest;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n    Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n        .iterator();\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"openFileMap size:\" + openFileMap.size());\n    }\n\n    Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n    \n    while (it.hasNext()) {\n      Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n      OpenFileCtx ctx \u003d pairs.getValue();\n      if (!ctx.getActiveState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Got one inactive stream: \" + ctx);\n        }\n        return pairs;\n      }\n      if (ctx.hasPendingWork()) {\n        // Always skip files with pending work.\n        continue;\n      }\n      if (idlest \u003d\u003d null) {\n        idlest \u003d pairs;\n      } else {\n        if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n          idlest \u003d pairs;\n        }\n      }\n    }\n\n    if (idlest \u003d\u003d null) {\n      LOG.warn(\"No eviction candidate. All streams have pending work.\");\n      return null;\n    } else {\n      long idleTime \u003d Time.monotonicNow()\n          - idlest.getValue().getLastAccessTime();\n      if (idleTime \u003c NfsConfigKeys.DFS_NFS_STREAM_TIMEOUT_MIN_DEFAULT) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n        }\n        LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n        return null;\n      } else {\n        return idlest;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
      "extendedDetails": {}
    },
    "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6416. Use Time#monotonicNow in OpenFileCtx and OpenFileCtxCatch to avoid system clock bugs. Contributed by Abhiraj Butala\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/05/14 1:21 PM",
      "commitName": "1c867b1de8a9f4c6bb118c08c7b714bd2b8356cd",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "07/11/13 1:49 PM",
      "commitNameOld": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
      "commitAuthorOld": "Brandon Li",
      "daysBetweenCommits": 200.94,
      "commitsBetweenForRepo": 1350,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,48 @@\n   Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n     Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n         .iterator();\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(\"openFileMap size:\" + openFileMap.size());\n     }\n \n     Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n     \n     while (it.hasNext()) {\n       Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n       OpenFileCtx ctx \u003d pairs.getValue();\n       if (!ctx.getActiveState()) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Got one inactive stream: \" + ctx);\n         }\n         return pairs;\n       }\n       if (ctx.hasPendingWork()) {\n         // Always skip files with pending work.\n         continue;\n       }\n       if (idlest \u003d\u003d null) {\n         idlest \u003d pairs;\n       } else {\n         if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n           idlest \u003d pairs;\n         }\n       }\n     }\n \n     if (idlest \u003d\u003d null) {\n       LOG.warn(\"No eviction candidate. All streams have pending work.\");\n       return null;\n     } else {\n-      long idleTime \u003d System.currentTimeMillis()\n+      long idleTime \u003d Time.monotonicNow()\n           - idlest.getValue().getLastAccessTime();\n       if (idleTime \u003c Nfs3Constant.OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n         }\n         LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n         return null;\n       } else {\n         return idlest;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n    Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n        .iterator();\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"openFileMap size:\" + openFileMap.size());\n    }\n\n    Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n    \n    while (it.hasNext()) {\n      Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n      OpenFileCtx ctx \u003d pairs.getValue();\n      if (!ctx.getActiveState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Got one inactive stream: \" + ctx);\n        }\n        return pairs;\n      }\n      if (ctx.hasPendingWork()) {\n        // Always skip files with pending work.\n        continue;\n      }\n      if (idlest \u003d\u003d null) {\n        idlest \u003d pairs;\n      } else {\n        if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n          idlest \u003d pairs;\n        }\n      }\n    }\n\n    if (idlest \u003d\u003d null) {\n      LOG.warn(\"No eviction candidate. All streams have pending work.\");\n      return null;\n    } else {\n      long idleTime \u003d Time.monotonicNow()\n          - idlest.getValue().getLastAccessTime();\n      if (idleTime \u003c Nfs3Constant.OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n        }\n        LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n        return null;\n      } else {\n        return idlest;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java",
      "extendedDetails": {}
    },
    "3fccdec6e0a8e9305fc75921211c3745eddb9c45": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5364. Add OpenFileCtx cache. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1539834 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/11/13 1:49 PM",
      "commitName": "3fccdec6e0a8e9305fc75921211c3745eddb9c45",
      "commitAuthor": "Brandon Li",
      "diff": "@@ -0,0 +1,48 @@\n+  Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n+    Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n+        .iterator();\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(\"openFileMap size:\" + openFileMap.size());\n+    }\n+\n+    Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n+    \n+    while (it.hasNext()) {\n+      Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n+      OpenFileCtx ctx \u003d pairs.getValue();\n+      if (!ctx.getActiveState()) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Got one inactive stream: \" + ctx);\n+        }\n+        return pairs;\n+      }\n+      if (ctx.hasPendingWork()) {\n+        // Always skip files with pending work.\n+        continue;\n+      }\n+      if (idlest \u003d\u003d null) {\n+        idlest \u003d pairs;\n+      } else {\n+        if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n+          idlest \u003d pairs;\n+        }\n+      }\n+    }\n+\n+    if (idlest \u003d\u003d null) {\n+      LOG.warn(\"No eviction candidate. All streams have pending work.\");\n+      return null;\n+    } else {\n+      long idleTime \u003d System.currentTimeMillis()\n+          - idlest.getValue().getLastAccessTime();\n+      if (idleTime \u003c Nfs3Constant.OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n+        }\n+        LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n+        return null;\n+      } else {\n+        return idlest;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Entry\u003cFileHandle, OpenFileCtx\u003e getEntryToEvict() {\n    Iterator\u003cEntry\u003cFileHandle, OpenFileCtx\u003e\u003e it \u003d openFileMap.entrySet()\n        .iterator();\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"openFileMap size:\" + openFileMap.size());\n    }\n\n    Entry\u003cFileHandle, OpenFileCtx\u003e idlest \u003d null;\n    \n    while (it.hasNext()) {\n      Entry\u003cFileHandle, OpenFileCtx\u003e pairs \u003d it.next();\n      OpenFileCtx ctx \u003d pairs.getValue();\n      if (!ctx.getActiveState()) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Got one inactive stream: \" + ctx);\n        }\n        return pairs;\n      }\n      if (ctx.hasPendingWork()) {\n        // Always skip files with pending work.\n        continue;\n      }\n      if (idlest \u003d\u003d null) {\n        idlest \u003d pairs;\n      } else {\n        if (ctx.getLastAccessTime() \u003c idlest.getValue().getLastAccessTime()) {\n          idlest \u003d pairs;\n        }\n      }\n    }\n\n    if (idlest \u003d\u003d null) {\n      LOG.warn(\"No eviction candidate. All streams have pending work.\");\n      return null;\n    } else {\n      long idleTime \u003d System.currentTimeMillis()\n          - idlest.getValue().getLastAccessTime();\n      if (idleTime \u003c Nfs3Constant.OUTPUT_STREAM_TIMEOUT_MIN_DEFAULT) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"idlest stream\u0027s idle time:\" + idleTime);\n        }\n        LOG.warn(\"All opened streams are busy, can\u0027t remove any from cache.\");\n        return null;\n      } else {\n        return idlest;\n      }\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-nfs/src/main/java/org/apache/hadoop/hdfs/nfs/nfs3/OpenFileCtxCache.java"
    }
  }
}