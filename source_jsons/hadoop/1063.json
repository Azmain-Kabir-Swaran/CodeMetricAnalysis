{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ShortCircuitCache.java",
  "functionName": "getOrCreateClientMmap",
  "functionId": "getOrCreateClientMmap___replica-ShortCircuitReplica__anchored-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
  "functionStartLine": 832,
  "functionEndLine": 882,
  "numCommitsSeen": 33,
  "timeTaken": 4113,
  "changeHistory": [
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8",
    "6ee0539ede78b640f01c5eac18ded161182a7835",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
    "c992bcf9c136d3df686655a80e636bb7bb0664da",
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
    "297e3c72fb7369d32b1d76482dbff43eb0316edd",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be"
  ],
  "changeHistoryShort": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": "Ybodychange",
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": "Ybodychange",
    "6ee0539ede78b640f01c5eac18ded161182a7835": "Ybodychange",
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": "Ybodychange",
    "c992bcf9c136d3df686655a80e636bb7bb0664da": "Yfilerename",
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f": "Ybodychange",
    "297e3c72fb7369d32b1d76482dbff43eb0316edd": "Ybodychange",
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": "Yfilerename",
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": "Ymultichange(Yparameterchange,Ybodychange)",
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8979. Clean up checkstyle warnings in hadoop-hdfs-client module. Contributed by Mingliang Liu.\n",
      "commitDate": "03/10/15 11:38 AM",
      "commitName": "7136e8c5582dc4061b566cb9f11a0d6a6d08bb93",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:52 PM",
      "commitNameOld": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 3.74,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,51 @@\n   ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n       boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n         if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n           MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n           return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n           if (delta \u003c mmapRetryTimeoutMs) {\n             LOG.trace(\"{}: can\u0027t create client mmap for {} because we failed to\"\n                 + \" create one just {}ms ago.\", this, replica, delta);\n             return null;\n           }\n           LOG.trace(\"{}: retrying client mmap for {}, {} ms after the previous \"\n               + \"failure.\", this, replica, delta);\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n           Preconditions.checkState(false, \"invalid mmapData type %s\",\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n-        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n+        replica.mmapData \u003d Time.monotonicNow();\n         newCond.signalAll();\n         return null;\n       } else {\n         outstandingMmapCount++;\n         replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n         return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c mmapRetryTimeoutMs) {\n            LOG.trace(\"{}: can\u0027t create client mmap for {} because we failed to\"\n                + \" create one just {}ms ago.\", this, replica, delta);\n            return null;\n          }\n          LOG.trace(\"{}: retrying client mmap for {}, {} ms after the previous \"\n              + \"failure.\", this, replica, delta);\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type %s\",\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Time.monotonicNow();\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "39285e6a1978ea5e53bdc1b0aef62421382124a8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8971. Remove guards when calling LOG.debug() and LOG.trace() in client package. Contributed by Mingliang Liu.\n",
      "commitDate": "29/09/15 5:52 PM",
      "commitName": "39285e6a1978ea5e53bdc1b0aef62421382124a8",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:51 PM",
      "commitNameOld": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,51 @@\n   ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n       boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n         if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n           MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n           return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n           if (delta \u003c mmapRetryTimeoutMs) {\n-            if (LOG.isTraceEnabled()) {\n-              LOG.trace(this + \": can\u0027t create client mmap for \" +\n-                  replica + \" because we failed to \" +\n-                  \"create one just \" + delta + \"ms ago.\");\n-            }\n+            LOG.trace(\"{}: can\u0027t create client mmap for {} because we failed to\"\n+                + \" create one just {}ms ago.\", this, replica, delta);\n             return null;\n           }\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": retrying client mmap for \" + replica +\n-                \", \" + delta + \" ms after the previous failure.\");\n-          }\n+          LOG.trace(\"{}: retrying client mmap for {}, {} ms after the previous \"\n+              + \"failure.\", this, replica, delta);\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n           Preconditions.checkState(false, \"invalid mmapData type %s\",\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n         replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n         newCond.signalAll();\n         return null;\n       } else {\n         outstandingMmapCount++;\n         replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n         return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c mmapRetryTimeoutMs) {\n            LOG.trace(\"{}: can\u0027t create client mmap for {} because we failed to\"\n                + \" create one just {}ms ago.\", this, replica, delta);\n            return null;\n          }\n          LOG.trace(\"{}: retrying client mmap for {}, {} ms after the previous \"\n              + \"failure.\", this, replica, delta);\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type %s\",\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "6ee0539ede78b640f01c5eac18ded161182a7835": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\"\n\nThis reverts commit d5a9a3daa0224249221ffa7b8bd5751ab2feca56.\n",
      "commitDate": "29/09/15 5:51 PM",
      "commitName": "6ee0539ede78b640f01c5eac18ded161182a7835",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "29/09/15 5:48 PM",
      "commitNameOld": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,56 @@\n   ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n       boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n         if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n           MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n           return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n           if (delta \u003c mmapRetryTimeoutMs) {\n-            LOG.trace(\"{}: can\u0027t create client mmap for {} because we failed to\"\n-                + \" create one just {}ms ago.\", this, replica, delta);\n+            if (LOG.isTraceEnabled()) {\n+              LOG.trace(this + \": can\u0027t create client mmap for \" +\n+                  replica + \" because we failed to \" +\n+                  \"create one just \" + delta + \"ms ago.\");\n+            }\n             return null;\n           }\n-          LOG.trace(\"{}: retrying client mmap for {}, {} ms after the previous \"\n-              + \"failure.\", this, replica, delta);\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": retrying client mmap for \" + replica +\n+                \", \" + delta + \" ms after the previous failure.\");\n+          }\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n           Preconditions.checkState(false, \"invalid mmapData type %s\",\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n         replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n         newCond.signalAll();\n         return null;\n       } else {\n         outstandingMmapCount++;\n         replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n         return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c mmapRetryTimeoutMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type %s\",\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "d5a9a3daa0224249221ffa7b8bd5751ab2feca56": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9170. Move libhdfs / fuse-dfs / libwebhdfs to hdfs-client. Contributed by Haohui Mai.\n",
      "commitDate": "29/09/15 5:48 PM",
      "commitName": "d5a9a3daa0224249221ffa7b8bd5751ab2feca56",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/08/15 2:02 PM",
      "commitNameOld": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 34.16,
      "commitsBetweenForRepo": 233,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,51 @@\n   ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n       boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n         if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n           MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n           return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n           if (delta \u003c mmapRetryTimeoutMs) {\n-            if (LOG.isTraceEnabled()) {\n-              LOG.trace(this + \": can\u0027t create client mmap for \" +\n-                  replica + \" because we failed to \" +\n-                  \"create one just \" + delta + \"ms ago.\");\n-            }\n+            LOG.trace(\"{}: can\u0027t create client mmap for {} because we failed to\"\n+                + \" create one just {}ms ago.\", this, replica, delta);\n             return null;\n           }\n-          if (LOG.isTraceEnabled()) {\n-            LOG.trace(this + \": retrying client mmap for \" + replica +\n-                \", \" + delta + \" ms after the previous failure.\");\n-          }\n+          LOG.trace(\"{}: retrying client mmap for {}, {} ms after the previous \"\n+              + \"failure.\", this, replica, delta);\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n           Preconditions.checkState(false, \"invalid mmapData type %s\",\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n         replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n         newCond.signalAll();\n         return null;\n       } else {\n         outstandingMmapCount++;\n         replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n         return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c mmapRetryTimeoutMs) {\n            LOG.trace(\"{}: can\u0027t create client mmap for {} because we failed to\"\n                + \" create one just {}ms ago.\", this, replica, delta);\n            return null;\n          }\n          LOG.trace(\"{}: retrying client mmap for {}, {} ms after the previous \"\n              + \"failure.\", this, replica, delta);\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type %s\",\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "c992bcf9c136d3df686655a80e636bb7bb0664da": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8951. Move the shortcircuit package to hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/08/15 2:02 PM",
      "commitName": "c992bcf9c136d3df686655a80e636bb7bb0664da",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/08/15 2:29 PM",
      "commitNameOld": "a4d9acc51d1a977bc333da17780c00c72e8546f1",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 0.98,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c mmapRetryTimeoutMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type %s\",\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6735. A minor optimization to avoid pread() be blocked by read() inside the same DFSInputStream (Lars Hofhansl via stack)\n",
      "commitDate": "02/12/14 8:57 PM",
      "commitName": "7caa3bc98e6880f98c5c32c486a0c539f9fd3f5f",
      "commitAuthor": "stack",
      "commitDateOld": "16/11/14 9:20 PM",
      "commitNameOld": "26d3b7e6ae867596bbced0bfddde22d3c0d976bb",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 15.98,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n       boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n         if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n           MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n           return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n           if (delta \u003c mmapRetryTimeoutMs) {\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(this + \": can\u0027t create client mmap for \" +\n                   replica + \" because we failed to \" +\n                   \"create one just \" + delta + \"ms ago.\");\n             }\n             return null;\n           }\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": retrying client mmap for \" + replica +\n                 \", \" + delta + \" ms after the previous failure.\");\n           }\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n-          Preconditions.checkState(false, \"invalid mmapData type \" +\n+          Preconditions.checkState(false, \"invalid mmapData type %s\",\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n         replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n         newCond.signalAll();\n         return null;\n       } else {\n         outstandingMmapCount++;\n         replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n         return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c mmapRetryTimeoutMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type %s\",\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "297e3c72fb7369d32b1d76482dbff43eb0316edd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6604. The short-circuit cache doesn\u0027t correctly time out replicas that haven\u0027t been used in a while (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607456 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/07/14 12:43 PM",
      "commitName": "297e3c72fb7369d32b1d76482dbff43eb0316edd",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "27/05/14 10:21 AM",
      "commitNameOld": "8d9e8cec9fd10fbeafa4ff38217f3984538b187a",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 36.1,
      "commitsBetweenForRepo": 230,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,56 @@\n   ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n       boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n         if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n           MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n           return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n-          if (delta \u003c staleThresholdMs) {\n+          if (delta \u003c mmapRetryTimeoutMs) {\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(this + \": can\u0027t create client mmap for \" +\n                   replica + \" because we failed to \" +\n                   \"create one just \" + delta + \"ms ago.\");\n             }\n             return null;\n           }\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": retrying client mmap for \" + replica +\n                 \", \" + delta + \" ms after the previous failure.\");\n           }\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n           Preconditions.checkState(false, \"invalid mmapData type \" +\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n         replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n         newCond.signalAll();\n         return null;\n       } else {\n         outstandingMmapCount++;\n         replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n         return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c mmapRetryTimeoutMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type \" +\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {}
    },
    "f93d99990a9a02ce693cd74466c2e5f127c1f560": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-6167. Relocate the non-public API classes in the hdfs.client package.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1583878 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/04/14 10:09 PM",
      "commitName": "f93d99990a9a02ce693cd74466c2e5f127c1f560",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "01/04/14 6:00 PM",
      "commitNameOld": "5c7cb51775bd3d4a6e3e1bd501b3a8d747733fe3",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c staleThresholdMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type \" +\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/shortcircuit/ShortCircuitCache.java"
      }
    },
    "dd049a2f6097da189ccce2f5890a2b9bc77fa73f": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/03/14 7:58 PM",
      "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
      "commitAuthor": "Colin McCabe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/03/14 7:58 PM",
          "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 7:10 PM",
          "commitNameOld": "f0d64a078da7e932b9509734f75170e3e525e68c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 18.03,
          "commitsBetweenForRepo": 129,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,56 @@\n-  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica) {\n+  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n+      boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n-        if (replica.mmapData instanceof ClientMmap) {\n+        if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n-          ClientMmap clientMmap \u003d (ClientMmap)replica.mmapData;\n-          clientMmap.ref();\n-          return clientMmap;\n+          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n+          return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n           if (delta \u003c staleThresholdMs) {\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(this + \": can\u0027t create client mmap for \" +\n                   replica + \" because we failed to \" +\n                   \"create one just \" + delta + \"ms ago.\");\n             }\n             return null;\n           }\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": retrying client mmap for \" + replica +\n                 \", \" + delta + \" ms after the previous failure.\");\n           }\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n           Preconditions.checkState(false, \"invalid mmapData type \" +\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n         replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n         newCond.signalAll();\n         return null;\n       } else {\n-        ClientMmap clientMmap \u003d new ClientMmap(replica, map);\n         outstandingMmapCount++;\n-        replica.mmapData \u003d clientMmap;\n+        replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n-        return clientMmap;\n+        return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c staleThresholdMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type \" +\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {
            "oldValue": "[replica-ShortCircuitReplica]",
            "newValue": "[replica-ShortCircuitReplica, anchored-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-5950. The DFSClient and DataNode should use shared memory segments to communicate short-circuit information (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573433 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "02/03/14 7:58 PM",
          "commitName": "dd049a2f6097da189ccce2f5890a2b9bc77fa73f",
          "commitAuthor": "Colin McCabe",
          "commitDateOld": "12/02/14 7:10 PM",
          "commitNameOld": "f0d64a078da7e932b9509734f75170e3e525e68c",
          "commitAuthorOld": "Colin McCabe",
          "daysBetweenCommits": 18.03,
          "commitsBetweenForRepo": 129,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,57 +1,56 @@\n-  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica) {\n+  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n+      boolean anchored) {\n     Condition newCond;\n     lock.lock();\n     try {\n       while (replica.mmapData !\u003d null) {\n-        if (replica.mmapData instanceof ClientMmap) {\n+        if (replica.mmapData instanceof MappedByteBuffer) {\n           ref(replica);\n-          ClientMmap clientMmap \u003d (ClientMmap)replica.mmapData;\n-          clientMmap.ref();\n-          return clientMmap;\n+          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n+          return new ClientMmap(replica, mmap, anchored);\n         } else if (replica.mmapData instanceof Long) {\n           long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n           long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n           if (delta \u003c staleThresholdMs) {\n             if (LOG.isTraceEnabled()) {\n               LOG.trace(this + \": can\u0027t create client mmap for \" +\n                   replica + \" because we failed to \" +\n                   \"create one just \" + delta + \"ms ago.\");\n             }\n             return null;\n           }\n           if (LOG.isTraceEnabled()) {\n             LOG.trace(this + \": retrying client mmap for \" + replica +\n                 \", \" + delta + \" ms after the previous failure.\");\n           }\n         } else if (replica.mmapData instanceof Condition) {\n           Condition cond \u003d (Condition)replica.mmapData;\n           cond.awaitUninterruptibly();\n         } else {\n           Preconditions.checkState(false, \"invalid mmapData type \" +\n               replica.mmapData.getClass().getName());\n         }\n       }\n       newCond \u003d lock.newCondition();\n       replica.mmapData \u003d newCond;\n     } finally {\n       lock.unlock();\n     }\n     MappedByteBuffer map \u003d replica.loadMmapInternal();\n     lock.lock();\n     try {\n       if (map \u003d\u003d null) {\n         replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n         newCond.signalAll();\n         return null;\n       } else {\n-        ClientMmap clientMmap \u003d new ClientMmap(replica, map);\n         outstandingMmapCount++;\n-        replica.mmapData \u003d clientMmap;\n+        replica.mmapData \u003d map;\n         ref(replica);\n         newCond.signalAll();\n-        return clientMmap;\n+        return new ClientMmap(replica, map, anchored);\n       }\n     } finally {\n       lock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica,\n      boolean anchored) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof MappedByteBuffer) {\n          ref(replica);\n          MappedByteBuffer mmap \u003d (MappedByteBuffer)replica.mmapData;\n          return new ClientMmap(replica, mmap, anchored);\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c staleThresholdMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type \" +\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        outstandingMmapCount++;\n        replica.mmapData \u003d map;\n        ref(replica);\n        newCond.signalAll();\n        return new ClientMmap(replica, map, anchored);\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java",
          "extendedDetails": {}
        }
      ]
    },
    "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5810. Unify mmap cache and short-circuit file descriptor cache (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1567720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/02/14 11:08 AM",
      "commitName": "beb0d25d2a7ba5004c6aabd105546ba9a9fec9be",
      "commitAuthor": "Colin McCabe",
      "diff": "@@ -0,0 +1,57 @@\n+  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica) {\n+    Condition newCond;\n+    lock.lock();\n+    try {\n+      while (replica.mmapData !\u003d null) {\n+        if (replica.mmapData instanceof ClientMmap) {\n+          ref(replica);\n+          ClientMmap clientMmap \u003d (ClientMmap)replica.mmapData;\n+          clientMmap.ref();\n+          return clientMmap;\n+        } else if (replica.mmapData instanceof Long) {\n+          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n+          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n+          if (delta \u003c staleThresholdMs) {\n+            if (LOG.isTraceEnabled()) {\n+              LOG.trace(this + \": can\u0027t create client mmap for \" +\n+                  replica + \" because we failed to \" +\n+                  \"create one just \" + delta + \"ms ago.\");\n+            }\n+            return null;\n+          }\n+          if (LOG.isTraceEnabled()) {\n+            LOG.trace(this + \": retrying client mmap for \" + replica +\n+                \", \" + delta + \" ms after the previous failure.\");\n+          }\n+        } else if (replica.mmapData instanceof Condition) {\n+          Condition cond \u003d (Condition)replica.mmapData;\n+          cond.awaitUninterruptibly();\n+        } else {\n+          Preconditions.checkState(false, \"invalid mmapData type \" +\n+              replica.mmapData.getClass().getName());\n+        }\n+      }\n+      newCond \u003d lock.newCondition();\n+      replica.mmapData \u003d newCond;\n+    } finally {\n+      lock.unlock();\n+    }\n+    MappedByteBuffer map \u003d replica.loadMmapInternal();\n+    lock.lock();\n+    try {\n+      if (map \u003d\u003d null) {\n+        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n+        newCond.signalAll();\n+        return null;\n+      } else {\n+        ClientMmap clientMmap \u003d new ClientMmap(replica, map);\n+        outstandingMmapCount++;\n+        replica.mmapData \u003d clientMmap;\n+        ref(replica);\n+        newCond.signalAll();\n+        return clientMmap;\n+      }\n+    } finally {\n+      lock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  ClientMmap getOrCreateClientMmap(ShortCircuitReplica replica) {\n    Condition newCond;\n    lock.lock();\n    try {\n      while (replica.mmapData !\u003d null) {\n        if (replica.mmapData instanceof ClientMmap) {\n          ref(replica);\n          ClientMmap clientMmap \u003d (ClientMmap)replica.mmapData;\n          clientMmap.ref();\n          return clientMmap;\n        } else if (replica.mmapData instanceof Long) {\n          long lastAttemptTimeMs \u003d (Long)replica.mmapData;\n          long delta \u003d Time.monotonicNow() - lastAttemptTimeMs;\n          if (delta \u003c staleThresholdMs) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(this + \": can\u0027t create client mmap for \" +\n                  replica + \" because we failed to \" +\n                  \"create one just \" + delta + \"ms ago.\");\n            }\n            return null;\n          }\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(this + \": retrying client mmap for \" + replica +\n                \", \" + delta + \" ms after the previous failure.\");\n          }\n        } else if (replica.mmapData instanceof Condition) {\n          Condition cond \u003d (Condition)replica.mmapData;\n          cond.awaitUninterruptibly();\n        } else {\n          Preconditions.checkState(false, \"invalid mmapData type \" +\n              replica.mmapData.getClass().getName());\n        }\n      }\n      newCond \u003d lock.newCondition();\n      replica.mmapData \u003d newCond;\n    } finally {\n      lock.unlock();\n    }\n    MappedByteBuffer map \u003d replica.loadMmapInternal();\n    lock.lock();\n    try {\n      if (map \u003d\u003d null) {\n        replica.mmapData \u003d Long.valueOf(Time.monotonicNow());\n        newCond.signalAll();\n        return null;\n      } else {\n        ClientMmap clientMmap \u003d new ClientMmap(replica, map);\n        outstandingMmapCount++;\n        replica.mmapData \u003d clientMmap;\n        ref(replica);\n        newCond.signalAll();\n        return clientMmap;\n      }\n    } finally {\n      lock.unlock();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/ShortCircuitCache.java"
    }
  }
}