{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSLeafQueue.java",
  "functionName": "assignContainer",
  "functionId": "assignContainer___node-FSSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
  "functionStartLine": 339,
  "functionEndLine": 362,
  "numCommitsSeen": 80,
  "timeTaken": 5319,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
    "10468529a9b858bd945e7ecb063c9c1438efa474",
    "620325e81696fca140195b74929ed9eda2d5eb16",
    "3ae2a625018bc8cf431aa19da5bf8fe4ef8c1ad4",
    "b5a22e983832d4843b5df1d07858988e8bbf37e3",
    "f2d150ea1205b77a75c347ace667b4cd060aaf40",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718",
    "486e718fc1f5befd231494e2ec06bb360484f191",
    "7545d8bf996e5d060d5d613bf769ec52a62d428b",
    "025f1719472282a30aa26ae3e235e404f04ba932",
    "2caa8998829e368af64dcad8a5b08722d4339d83",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
    "72e631098d2db8a9a18c32c9b25b57b7af4d9275",
    "f121d1e3334f39b05e0b2fa6ebc6b366425b404b",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": "Ybodychange",
    "10468529a9b858bd945e7ecb063c9c1438efa474": "Ybodychange",
    "620325e81696fca140195b74929ed9eda2d5eb16": "Ybodychange",
    "3ae2a625018bc8cf431aa19da5bf8fe4ef8c1ad4": "Ybodychange",
    "b5a22e983832d4843b5df1d07858988e8bbf37e3": "Ybodychange",
    "f2d150ea1205b77a75c347ace667b4cd060aaf40": "Ybodychange",
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": "Ybodychange",
    "486e718fc1f5befd231494e2ec06bb360484f191": "Ybodychange",
    "7545d8bf996e5d060d5d613bf769ec52a62d428b": "Ybodychange",
    "025f1719472282a30aa26ae3e235e404f04ba932": "Ybodychange",
    "2caa8998829e368af64dcad8a5b08722d4339d83": "Ybodychange",
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": "Ybodychange",
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": "Ymultichange(Yparameterchange,Ybodychange)",
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3": "Ybodychange",
    "72e631098d2db8a9a18c32c9b25b57b7af4d9275": "Ybodychange",
    "f121d1e3334f39b05e0b2fa6ebc6b366425b404b": "Ybodychange",
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": "Ymultichange(Yfilerename,Ybodychange)",
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Yparameterchange",
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n           getName() + \" fairShare: \" + getFairShare());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     for (FSAppAttempt sched : fetchAppsWithDemand(true)) {\n       if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n         continue;\n       }\n       assigned \u003d sched.assignContainer(node);\n       if (!assigned.equals(none())) {\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n-              \"container:\" + assigned);\n-        }\n+        LOG.debug(\"Assigned container in queue:{} container:{}\",\n+            getName(), assigned);\n         break;\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName() + \" fairShare: \" + getFairShare());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    for (FSAppAttempt sched : fetchAppsWithDemand(true)) {\n      if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n        continue;\n      }\n      assigned \u003d sched.assignContainer(node);\n      if (!assigned.equals(none())) {\n        LOG.debug(\"Assigned container in queue:{} container:{}\",\n            getName(), assigned);\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "6c25dbcdc0517a825b92fb16444aa1d3761e160c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6163. FS Preemption is a trickle for severely starved applications. (kasha)\n",
      "commitDate": "15/02/17 11:16 PM",
      "commitName": "6c25dbcdc0517a825b92fb16444aa1d3761e160c",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "09/02/17 10:23 AM",
      "commitNameOld": "5fb723bb77722d41df6959eee23e1b0cfeb5584e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.54,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n           getName() + \" fairShare: \" + getFairShare());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n-    for (FSAppAttempt sched : fetchAppsWithDemand()) {\n+    for (FSAppAttempt sched : fetchAppsWithDemand(true)) {\n       if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n         continue;\n       }\n       assigned \u003d sched.assignContainer(node);\n       if (!assigned.equals(none())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n               \"container:\" + assigned);\n         }\n         break;\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName() + \" fairShare: \" + getFairShare());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    for (FSAppAttempt sched : fetchAppsWithDemand(true)) {\n      if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n        continue;\n      }\n      assigned \u003d sched.assignContainer(node);\n      if (!assigned.equals(none())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n              \"container:\" + assigned);\n        }\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "10468529a9b858bd945e7ecb063c9c1438efa474": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4752. Improved preemption in FairScheduler. (kasha)\n\nContains:\nYARN-5605. Preempt containers (all on one node) to meet the requirement of starved applications\nYARN-5821. Drop left-over preemption-related code and clean up method visibilities in the Schedulable hierarchy\nYARN-5783. Verify identification of starved applications.\nYARN-5819. Verify fairshare and minshare preemption\nYARN-5885. Cleanup YARN-4752 branch for merge\n\nChange-Id: Iee0962377d019dd64dc69a020725d2eaf360858c\n",
      "commitDate": "23/11/16 9:48 PM",
      "commitName": "10468529a9b858bd945e7ecb063c9c1438efa474",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "09/11/16 11:44 PM",
      "commitNameOld": "86ac1ad9fd65c7dd12278372b369de38dc4616db",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 13.92,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,26 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n-    Resource assigned \u003d Resources.none();\n+    Resource assigned \u003d none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n           getName() + \" fairShare: \" + getFairShare());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n-    // Apps that have resource demands.\n-    TreeSet\u003cFSAppAttempt\u003e pendingForResourceApps \u003d\n-        new TreeSet\u003cFSAppAttempt\u003e(policy.getComparator());\n-    readLock.lock();\n-    try {\n-      for (FSAppAttempt app : runnableApps) {\n-        Resource pending \u003d app.getAppAttemptResourceUsage().getPending();\n-        if (!pending.equals(Resources.none())) {\n-          pendingForResourceApps.add(app);\n-        }\n-      }\n-    } finally {\n-      readLock.unlock();\n-    }\n-    for (FSAppAttempt sched : pendingForResourceApps) {\n+    for (FSAppAttempt sched : fetchAppsWithDemand()) {\n       if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n         continue;\n       }\n       assigned \u003d sched.assignContainer(node);\n-      if (!assigned.equals(Resources.none())) {\n+      if (!assigned.equals(none())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n               \"container:\" + assigned);\n         }\n         break;\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName() + \" fairShare: \" + getFairShare());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    for (FSAppAttempt sched : fetchAppsWithDemand()) {\n      if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n        continue;\n      }\n      assigned \u003d sched.assignContainer(node);\n      if (!assigned.equals(none())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n              \"container:\" + assigned);\n        }\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "620325e81696fca140195b74929ed9eda2d5eb16": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
      "commitDate": "07/06/16 3:06 PM",
      "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "25/05/16 10:13 PM",
      "commitNameOld": "4f513a4a8ed73beec89b7b28c0cd056ee5f4ed0d",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 12.7,
      "commitsBetweenForRepo": 80,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n           getName() + \" fairShare: \" + getFairShare());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     // Apps that have resource demands.\n     TreeSet\u003cFSAppAttempt\u003e pendingForResourceApps \u003d\n         new TreeSet\u003cFSAppAttempt\u003e(policy.getComparator());\n     readLock.lock();\n     try {\n       for (FSAppAttempt app : runnableApps) {\n         Resource pending \u003d app.getAppAttemptResourceUsage().getPending();\n         if (!pending.equals(Resources.none())) {\n           pendingForResourceApps.add(app);\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n     for (FSAppAttempt sched : pendingForResourceApps) {\n-      if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n+      if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n         continue;\n       }\n       assigned \u003d sched.assignContainer(node);\n       if (!assigned.equals(Resources.none())) {\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n               \"container:\" + assigned);\n         }\n         break;\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName() + \" fairShare: \" + getFairShare());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    // Apps that have resource demands.\n    TreeSet\u003cFSAppAttempt\u003e pendingForResourceApps \u003d\n        new TreeSet\u003cFSAppAttempt\u003e(policy.getComparator());\n    readLock.lock();\n    try {\n      for (FSAppAttempt app : runnableApps) {\n        Resource pending \u003d app.getAppAttemptResourceUsage().getPending();\n        if (!pending.equals(Resources.none())) {\n          pendingForResourceApps.add(app);\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    for (FSAppAttempt sched : pendingForResourceApps) {\n      if (SchedulerAppUtils.isPlaceBlacklisted(sched, node, LOG)) {\n        continue;\n      }\n      assigned \u003d sched.assignContainer(node);\n      if (!assigned.equals(Resources.none())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n              \"container:\" + assigned);\n        }\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "3ae2a625018bc8cf431aa19da5bf8fe4ef8c1ad4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3547. FairScheduler: Apps that have no resource demand should not participate scheduling. (Xianyin Xin via kasha)\n",
      "commitDate": "29/05/15 3:17 PM",
      "commitName": "3ae2a625018bc8cf431aa19da5bf8fe4ef8c1ad4",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "02/04/15 1:56 PM",
      "commitNameOld": "6a6a59db7f1bfda47c3c14fb49676a7b22d2eb06",
      "commitAuthorOld": "Sandy Ryza",
      "daysBetweenCommits": 57.06,
      "commitsBetweenForRepo": 556,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,40 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n           getName() + \" fairShare: \" + getFairShare());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n-    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n-    writeLock.lock();\n-    try {\n-      Collections.sort(runnableApps, comparator);\n-    } finally {\n-      writeLock.unlock();\n-    }\n-    // Release write lock here for better performance and avoiding deadlocks.\n-    // runnableApps can be in unsorted state because of this section,\n-    // but we can accept it in practice since the probability is low.\n+    // Apps that have resource demands.\n+    TreeSet\u003cFSAppAttempt\u003e pendingForResourceApps \u003d\n+        new TreeSet\u003cFSAppAttempt\u003e(policy.getComparator());\n     readLock.lock();\n     try {\n-      for (FSAppAttempt sched : runnableApps) {\n-        if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n-          continue;\n-        }\n-\n-        assigned \u003d sched.assignContainer(node);\n-        if (!assigned.equals(Resources.none())) {\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n-                \"container:\" + assigned);\n-          }\n-          break;\n+      for (FSAppAttempt app : runnableApps) {\n+        Resource pending \u003d app.getAppAttemptResourceUsage().getPending();\n+        if (!pending.equals(Resources.none())) {\n+          pendingForResourceApps.add(app);\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n+    for (FSAppAttempt sched : pendingForResourceApps) {\n+      if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n+        continue;\n+      }\n+      assigned \u003d sched.assignContainer(node);\n+      if (!assigned.equals(Resources.none())) {\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n+              \"container:\" + assigned);\n+        }\n+        break;\n+      }\n+    }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName() + \" fairShare: \" + getFairShare());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    // Apps that have resource demands.\n    TreeSet\u003cFSAppAttempt\u003e pendingForResourceApps \u003d\n        new TreeSet\u003cFSAppAttempt\u003e(policy.getComparator());\n    readLock.lock();\n    try {\n      for (FSAppAttempt app : runnableApps) {\n        Resource pending \u003d app.getAppAttemptResourceUsage().getPending();\n        if (!pending.equals(Resources.none())) {\n          pendingForResourceApps.add(app);\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    for (FSAppAttempt sched : pendingForResourceApps) {\n      if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n        continue;\n      }\n      assigned \u003d sched.assignContainer(node);\n      if (!assigned.equals(Resources.none())) {\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n              \"container:\" + assigned);\n        }\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "b5a22e983832d4843b5df1d07858988e8bbf37e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3258. FairScheduler: Need to add more logging to investigate allocations. Contributed by Anubhav Dhoot.\n",
      "commitDate": "31/03/15 1:42 AM",
      "commitName": "b5a22e983832d4843b5df1d07858988e8bbf37e3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "05/01/15 3:12 PM",
      "commitNameOld": "0c4b11267717eb451fa6ed4c586317f2db32fbd5",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 84.4,
      "commitsBetweenForRepo": 746,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,42 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n-          getName());\n+          getName() + \" fairShare: \" + getFairShare());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n     writeLock.lock();\n     try {\n       Collections.sort(runnableApps, comparator);\n     } finally {\n       writeLock.unlock();\n     }\n     // Release write lock here for better performance and avoiding deadlocks.\n     // runnableApps can be in unsorted state because of this section,\n     // but we can accept it in practice since the probability is low.\n     readLock.lock();\n     try {\n       for (FSAppAttempt sched : runnableApps) {\n         if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n           continue;\n         }\n \n         assigned \u003d sched.assignContainer(node);\n         if (!assigned.equals(Resources.none())) {\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n+                \"container:\" + assigned);\n+          }\n           break;\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName() + \" fairShare: \" + getFairShare());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    writeLock.lock();\n    try {\n      Collections.sort(runnableApps, comparator);\n    } finally {\n      writeLock.unlock();\n    }\n    // Release write lock here for better performance and avoiding deadlocks.\n    // runnableApps can be in unsorted state because of this section,\n    // but we can accept it in practice since the probability is low.\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n          continue;\n        }\n\n        assigned \u003d sched.assignContainer(node);\n        if (!assigned.equals(Resources.none())) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Assigned container in queue:\" + getName() + \" \" +\n                \"container:\" + assigned);\n          }\n          break;\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "f2d150ea1205b77a75c347ace667b4cd060aaf40": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2964. FSLeafQueue#assignContainer - document the reason for using both write and read locks. (Tsuyoshi Ozawa via kasha)\n",
      "commitDate": "17/12/14 12:03 PM",
      "commitName": "f2d150ea1205b77a75c347ace667b4cd060aaf40",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "09/12/14 2:00 PM",
      "commitNameOld": "a2e07a54561a57a83b943628ebbc53ed5ba52718",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 7.92,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n           getName());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n     writeLock.lock();\n     try {\n       Collections.sort(runnableApps, comparator);\n     } finally {\n       writeLock.unlock();\n     }\n+    // Release write lock here for better performance and avoiding deadlocks.\n+    // runnableApps can be in unsorted state because of this section,\n+    // but we can accept it in practice since the probability is low.\n     readLock.lock();\n     try {\n       for (FSAppAttempt sched : runnableApps) {\n         if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n           continue;\n         }\n \n         assigned \u003d sched.assignContainer(node);\n         if (!assigned.equals(Resources.none())) {\n           break;\n         }\n       }\n     } finally {\n       readLock.unlock();\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    writeLock.lock();\n    try {\n      Collections.sort(runnableApps, comparator);\n    } finally {\n      writeLock.unlock();\n    }\n    // Release write lock here for better performance and avoiding deadlocks.\n    // runnableApps can be in unsorted state because of this section,\n    // but we can accept it in practice since the probability is low.\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n          continue;\n        }\n\n        assigned \u003d sched.assignContainer(node);\n        if (!assigned.equals(Resources.none())) {\n          break;\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "a2e07a54561a57a83b943628ebbc53ed5ba52718": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2910. FSLeafQueue can throw ConcurrentModificationException. (Wilfred Spiegelenburg via kasha)\n",
      "commitDate": "09/12/14 2:00 PM",
      "commitName": "a2e07a54561a57a83b943628ebbc53ed5ba52718",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "03/09/14 10:27 AM",
      "commitNameOld": "1dcaba9a7aa27f7ca4ba693e3abb56ab3c59c8a7",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 97.19,
      "commitsBetweenForRepo": 917,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,35 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n+      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n+          getName());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n-    Collections.sort(runnableApps, comparator);\n-    for (FSAppAttempt sched : runnableApps) {\n-      if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n-        continue;\n-      }\n+    writeLock.lock();\n+    try {\n+      Collections.sort(runnableApps, comparator);\n+    } finally {\n+      writeLock.unlock();\n+    }\n+    readLock.lock();\n+    try {\n+      for (FSAppAttempt sched : runnableApps) {\n+        if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n+          continue;\n+        }\n \n-      assigned \u003d sched.assignContainer(node);\n-      if (!assigned.equals(Resources.none())) {\n-        break;\n+        assigned \u003d sched.assignContainer(node);\n+        if (!assigned.equals(Resources.none())) {\n+          break;\n+        }\n       }\n+    } finally {\n+      readLock.unlock();\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" +\n          getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    writeLock.lock();\n    try {\n      Collections.sort(runnableApps, comparator);\n    } finally {\n      writeLock.unlock();\n    }\n    readLock.lock();\n    try {\n      for (FSAppAttempt sched : runnableApps) {\n        if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n          continue;\n        }\n\n        assigned \u003d sched.assignContainer(node);\n        if (!assigned.equals(Resources.none())) {\n          break;\n        }\n      }\n    } finally {\n      readLock.unlock();\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "486e718fc1f5befd231494e2ec06bb360484f191": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2399. FairScheduler: Merge AppSchedulable and FSSchedulerApp into FSAppAttempt. (kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617600 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 2:43 PM",
      "commitName": "486e718fc1f5befd231494e2ec06bb360484f191",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "25/07/14 9:13 AM",
      "commitNameOld": "1e553858f930e43fac62986549a178cdcf39384c",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 18.23,
      "commitsBetweenForRepo": 122,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,24 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n-    Collections.sort(runnableAppScheds, comparator);\n-    for (AppSchedulable sched : runnableAppScheds) {\n-      if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {\n+    Collections.sort(runnableApps, comparator);\n+    for (FSAppAttempt sched : runnableApps) {\n+      if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n         continue;\n       }\n \n       assigned \u003d sched.assignContainer(node);\n       if (!assigned.equals(Resources.none())) {\n         break;\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    Collections.sort(runnableApps, comparator);\n    for (FSAppAttempt sched : runnableApps) {\n      if (SchedulerAppUtils.isBlacklisted(sched, node, LOG)) {\n        continue;\n      }\n\n      assigned \u003d sched.assignContainer(node);\n      if (!assigned.equals(Resources.none())) {\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "7545d8bf996e5d060d5d613bf769ec52a62d428b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1241. In Fair Scheduler, maxRunningApps does not work for non-leaf queues. (Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1546623 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/11/13 11:02 AM",
      "commitName": "7545d8bf996e5d060d5d613bf769ec52a62d428b",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "25/10/13 5:27 PM",
      "commitNameOld": "025f1719472282a30aa26ae3e235e404f04ba932",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 34.77,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,24 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n-    Collections.sort(appScheds, comparator);\n-    for (AppSchedulable sched : appScheds) {\n-      if (sched.getRunnable()) {\n-        if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {\n-          continue;\n-        }\n+    Collections.sort(runnableAppScheds, comparator);\n+    for (AppSchedulable sched : runnableAppScheds) {\n+      if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {\n+        continue;\n+      }\n \n-        assigned \u003d sched.assignContainer(node);\n-        if (!assigned.equals(Resources.none())) {\n-          break;\n-        }\n+      assigned \u003d sched.assignContainer(node);\n+      if (!assigned.equals(Resources.none())) {\n+        break;\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    Collections.sort(runnableAppScheds, comparator);\n    for (AppSchedulable sched : runnableAppScheds) {\n      if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {\n        continue;\n      }\n\n      assigned \u003d sched.assignContainer(node);\n      if (!assigned.equals(Resources.none())) {\n        break;\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "025f1719472282a30aa26ae3e235e404f04ba932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1333. Support blacklisting in the Fair Scheduler (Tsuyoshi Ozawa via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/13 5:27 PM",
      "commitName": "025f1719472282a30aa26ae3e235e404f04ba932",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "21/10/13 11:45 AM",
      "commitNameOld": "dc523bd18247df232fe814aed7062a116242ab04",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,26 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n     Collections.sort(appScheds, comparator);\n     for (AppSchedulable sched : appScheds) {\n       if (sched.getRunnable()) {\n+        if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {\n+          continue;\n+        }\n+\n         assigned \u003d sched.assignContainer(node);\n         if (!assigned.equals(Resources.none())) {\n           break;\n         }\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    Collections.sort(appScheds, comparator);\n    for (AppSchedulable sched : appScheds) {\n      if (sched.getRunnable()) {\n        if (SchedulerAppUtils.isBlacklisted(sched.getApp(), node, LOG)) {\n          continue;\n        }\n\n        assigned \u003d sched.assignContainer(node);\n        if (!assigned.equals(Resources.none())) {\n          break;\n        }\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "2caa8998829e368af64dcad8a5b08722d4339d83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-305. Fair scheduler logs too many \"Node offered to app\" messages. (Lohit Vijayarenu via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1531817 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/10/13 1:51 AM",
      "commitName": "2caa8998829e368af64dcad8a5b08722d4339d83",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "21/06/13 11:28 AM",
      "commitNameOld": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 114.6,
      "commitsBetweenForRepo": 656,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Node offered to queue: \" + getName());\n+      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n     Collections.sort(appScheds, comparator);\n     for (AppSchedulable sched : appScheds) {\n       if (sched.getRunnable()) {\n         assigned \u003d sched.assignContainer(node);\n         if (!assigned.equals(Resources.none())) {\n           break;\n         }\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node \" + node.getNodeName() + \" offered to queue: \" + getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    Collections.sort(appScheds, comparator);\n    for (AppSchedulable sched : appScheds) {\n      if (sched.getRunnable()) {\n        assigned \u003d sched.assignContainer(node);\n        if (!assigned.equals(Resources.none())) {\n          break;\n        }\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "a43c344eee888f2a2488c8c9dca7e25a2cce10bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-595. Refactor fair scheduler to use common Resources. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1475670 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/04/13 1:33 AM",
      "commitName": "a43c344eee888f2a2488c8c9dca7e25a2cce10bf",
      "commitAuthor": "Thomas White",
      "commitDateOld": "18/04/13 11:11 AM",
      "commitNameOld": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 6.6,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public Resource assignContainer(FSSchedulerNode node) {\n     Resource assigned \u003d Resources.none();\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Node offered to queue: \" + getName());\n     }\n \n     if (!assignContainerPreCheck(node)) {\n       return assigned;\n     }\n \n     Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n     Collections.sort(appScheds, comparator);\n     for (AppSchedulable sched : appScheds) {\n       if (sched.getRunnable()) {\n         assigned \u003d sched.assignContainer(node);\n-        if (Resources.greaterThan(assigned, Resources.none())) {\n+        if (!assigned.equals(Resources.none())) {\n           break;\n         }\n       }\n     }\n     return assigned;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node offered to queue: \" + getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    Collections.sort(appScheds, comparator);\n    for (AppSchedulable sched : appScheds) {\n      if (sched.getRunnable()) {\n        assigned \u003d sched.assignContainer(node);\n        if (!assigned.equals(Resources.none())) {\n          break;\n        }\n      }\n    }\n    return assigned;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "df55edd5dec9c944a6c38f08d6f1f0fdb901c880": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/04/13 11:11 AM",
      "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
      "commitAuthor": "Alejandro Abdelnur",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "25/03/13 8:25 PM",
          "commitNameOld": "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 23.62,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,22 @@\n-  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n-    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n-    // If this queue is over its limit, reject\n-    if (Resources.greaterThan(getResourceUsage(),\n-        queueMgr.getMaxResources(getName()))) {\n-      return Resources.none();\n+  public Resource assignContainer(FSSchedulerNode node) {\n+    Resource assigned \u003d Resources.none();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Node offered to queue: \" + getName());\n     }\n \n-    // If this node already has reserved resources for an app, first try to\n-    // finish allocating resources for that app.\n-    if (reserved) {\n-      for (AppSchedulable sched : appScheds) {\n-        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n-            node.getReservedContainer().getApplicationAttemptId()) {\n-          return sched.assignContainer(node, reserved);\n+    if (!assignContainerPreCheck(node)) {\n+      return assigned;\n+    }\n+\n+    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n+    Collections.sort(appScheds, comparator);\n+    for (AppSchedulable sched : appScheds) {\n+      if (sched.getRunnable()) {\n+        assigned \u003d sched.assignContainer(node);\n+        if (Resources.greaterThan(assigned, Resources.none())) {\n+          break;\n         }\n       }\n-      return Resources.none(); // We should never get here\n     }\n-\n-    // Otherwise, chose app to schedule based on given policy.\n-    else {\n-      Comparator\u003cSchedulable\u003e comparator \u003d schedulingMode.getComparator();\n-\n-      Collections.sort(appScheds, comparator);\n-      for (AppSchedulable sched: appScheds) {\n-        if (sched.getRunnable()) {\n-          Resource assignedResource \u003d sched.assignContainer(node, reserved);\n-          if (!assignedResource.equals(Resources.none())) {\n-            return assignedResource;\n-          }\n-        }\n-      }\n-\n-      return Resources.none();\n-    }\n+    return assigned;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node offered to queue: \" + getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    Collections.sort(appScheds, comparator);\n    for (AppSchedulable sched : appScheds) {\n      if (sched.getRunnable()) {\n        assigned \u003d sched.assignContainer(node);\n        if (Resources.greaterThan(assigned, Resources.none())) {\n          break;\n        }\n      }\n    }\n    return assigned;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {
            "oldValue": "[node-FSSchedulerNode, reserved-boolean]",
            "newValue": "[node-FSSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-482. FS: Extend SchedulingMode to intermediate queues. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1469506 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/04/13 11:11 AM",
          "commitName": "df55edd5dec9c944a6c38f08d6f1f0fdb901c880",
          "commitAuthor": "Alejandro Abdelnur",
          "commitDateOld": "25/03/13 8:25 PM",
          "commitNameOld": "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
          "commitAuthorOld": "Alejandro Abdelnur",
          "daysBetweenCommits": 23.62,
          "commitsBetweenForRepo": 127,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,22 @@\n-  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n-    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n-    // If this queue is over its limit, reject\n-    if (Resources.greaterThan(getResourceUsage(),\n-        queueMgr.getMaxResources(getName()))) {\n-      return Resources.none();\n+  public Resource assignContainer(FSSchedulerNode node) {\n+    Resource assigned \u003d Resources.none();\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Node offered to queue: \" + getName());\n     }\n \n-    // If this node already has reserved resources for an app, first try to\n-    // finish allocating resources for that app.\n-    if (reserved) {\n-      for (AppSchedulable sched : appScheds) {\n-        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n-            node.getReservedContainer().getApplicationAttemptId()) {\n-          return sched.assignContainer(node, reserved);\n+    if (!assignContainerPreCheck(node)) {\n+      return assigned;\n+    }\n+\n+    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n+    Collections.sort(appScheds, comparator);\n+    for (AppSchedulable sched : appScheds) {\n+      if (sched.getRunnable()) {\n+        assigned \u003d sched.assignContainer(node);\n+        if (Resources.greaterThan(assigned, Resources.none())) {\n+          break;\n         }\n       }\n-      return Resources.none(); // We should never get here\n     }\n-\n-    // Otherwise, chose app to schedule based on given policy.\n-    else {\n-      Comparator\u003cSchedulable\u003e comparator \u003d schedulingMode.getComparator();\n-\n-      Collections.sort(appScheds, comparator);\n-      for (AppSchedulable sched: appScheds) {\n-        if (sched.getRunnable()) {\n-          Resource assignedResource \u003d sched.assignContainer(node, reserved);\n-          if (!assignedResource.equals(Resources.none())) {\n-            return assignedResource;\n-          }\n-        }\n-      }\n-\n-      return Resources.none();\n-    }\n+    return assigned;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource assignContainer(FSSchedulerNode node) {\n    Resource assigned \u003d Resources.none();\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Node offered to queue: \" + getName());\n    }\n\n    if (!assignContainerPreCheck(node)) {\n      return assigned;\n    }\n\n    Comparator\u003cSchedulable\u003e comparator \u003d policy.getComparator();\n    Collections.sort(appScheds, comparator);\n    for (AppSchedulable sched : appScheds) {\n      if (sched.getRunnable()) {\n        assigned \u003d sched.assignContainer(node);\n        if (Resources.greaterThan(assigned, Resources.none())) {\n          break;\n        }\n      }\n    }\n    return assigned;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-469. Make scheduling mode in FS pluggable. (kkambatl via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460961 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 8:25 PM",
      "commitName": "e74d1f0435c2bcdfae2c26f6c340a5a487d20aa3",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "15/01/13 9:09 AM",
      "commitNameOld": "72e631098d2db8a9a18c32c9b25b57b7af4d9275",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 69.43,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,37 @@\n   public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n     LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n     // If this queue is over its limit, reject\n     if (Resources.greaterThan(getResourceUsage(),\n         queueMgr.getMaxResources(getName()))) {\n       return Resources.none();\n     }\n \n     // If this node already has reserved resources for an app, first try to\n     // finish allocating resources for that app.\n     if (reserved) {\n       for (AppSchedulable sched : appScheds) {\n         if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n             node.getReservedContainer().getApplicationAttemptId()) {\n           return sched.assignContainer(node, reserved);\n         }\n       }\n       return Resources.none(); // We should never get here\n     }\n \n-    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n+    // Otherwise, chose app to schedule based on given policy.\n     else {\n-      Comparator\u003cSchedulable\u003e comparator;\n-      if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n-        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n-      } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n-        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n-      } else {\n-        throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n-            schedulingMode);\n-      }\n+      Comparator\u003cSchedulable\u003e comparator \u003d schedulingMode.getComparator();\n \n       Collections.sort(appScheds, comparator);\n       for (AppSchedulable sched: appScheds) {\n         if (sched.getRunnable()) {\n           Resource assignedResource \u003d sched.assignContainer(node, reserved);\n           if (!assignedResource.equals(Resources.none())) {\n             return assignedResource;\n           }\n         }\n       }\n \n       return Resources.none();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy.\n    else {\n      Comparator\u003cSchedulable\u003e comparator \u003d schedulingMode.getComparator();\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        if (sched.getRunnable()) {\n          Resource assignedResource \u003d sched.assignContainer(node, reserved);\n          if (!assignedResource.equals(Resources.none())) {\n            return assignedResource;\n          }\n        }\n      }\n\n      return Resources.none();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "72e631098d2db8a9a18c32c9b25b57b7af4d9275": {
      "type": "Ybodychange",
      "commitMessage": "YARN-336. Fair scheduler FIFO scheduling within a queue only allows 1 app at a time. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1433526 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/01/13 9:09 AM",
      "commitName": "72e631098d2db8a9a18c32c9b25b57b7af4d9275",
      "commitAuthor": "Thomas White",
      "commitDateOld": "08/01/13 9:08 PM",
      "commitNameOld": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 6.5,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,45 @@\n   public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n     LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n     // If this queue is over its limit, reject\n     if (Resources.greaterThan(getResourceUsage(),\n         queueMgr.getMaxResources(getName()))) {\n       return Resources.none();\n     }\n \n     // If this node already has reserved resources for an app, first try to\n     // finish allocating resources for that app.\n     if (reserved) {\n       for (AppSchedulable sched : appScheds) {\n         if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n             node.getReservedContainer().getApplicationAttemptId()) {\n           return sched.assignContainer(node, reserved);\n         }\n       }\n       return Resources.none(); // We should never get here\n     }\n \n     // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n     else {\n       Comparator\u003cSchedulable\u003e comparator;\n       if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n         comparator \u003d new SchedulingAlgorithms.FifoComparator();\n       } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n         comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n       } else {\n         throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n             schedulingMode);\n       }\n \n       Collections.sort(appScheds, comparator);\n       for (AppSchedulable sched: appScheds) {\n         if (sched.getRunnable()) {\n-          return sched.assignContainer(node, reserved);\n+          Resource assignedResource \u003d sched.assignContainer(node, reserved);\n+          if (!assignedResource.equals(Resources.none())) {\n+            return assignedResource;\n+          }\n         }\n       }\n \n       return Resources.none();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      Comparator\u003cSchedulable\u003e comparator;\n      if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n            schedulingMode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        if (sched.getRunnable()) {\n          Resource assignedResource \u003d sched.assignContainer(node, reserved);\n          if (!assignedResource.equals(Resources.none())) {\n            return assignedResource;\n          }\n        }\n      }\n\n      return Resources.none();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "f121d1e3334f39b05e0b2fa6ebc6b366425b404b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-278. Fair scheduler maxRunningApps config causes no apps to make progress. (sandyr via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1424989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/12/12 8:07 AM",
      "commitName": "f121d1e3334f39b05e0b2fa6ebc6b366425b404b",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "30/11/12 4:03 AM",
      "commitNameOld": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 21.17,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,42 @@\n   public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n     LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n     // If this queue is over its limit, reject\n     if (Resources.greaterThan(getResourceUsage(),\n         queueMgr.getMaxResources(getName()))) {\n       return Resources.none();\n     }\n \n     // If this node already has reserved resources for an app, first try to\n     // finish allocating resources for that app.\n     if (reserved) {\n       for (AppSchedulable sched : appScheds) {\n         if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n             node.getReservedContainer().getApplicationAttemptId()) {\n           return sched.assignContainer(node, reserved);\n         }\n       }\n       return Resources.none(); // We should never get here\n     }\n \n     // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n     else {\n       Comparator\u003cSchedulable\u003e comparator;\n       if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n         comparator \u003d new SchedulingAlgorithms.FifoComparator();\n       } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n         comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n       } else {\n         throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n             schedulingMode);\n       }\n \n       Collections.sort(appScheds, comparator);\n       for (AppSchedulable sched: appScheds) {\n-        return sched.assignContainer(node, reserved);\n+        if (sched.getRunnable()) {\n+          return sched.assignContainer(node, reserved);\n+        }\n       }\n \n       return Resources.none();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      Comparator\u003cSchedulable\u003e comparator;\n      if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n            schedulingMode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        if (sched.getRunnable()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n\n      return Resources.none();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
      "extendedDetails": {}
    },
    "ae6f1123f57c09a9cf5eed3e8c4659481417dc21": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/12 4:03 AM",
      "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
      "commitAuthor": "Thomas White",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/12 4:03 AM",
          "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
          "commitAuthor": "Thomas White",
          "commitDateOld": "29/11/12 6:51 PM",
          "commitNameOld": "6b08d7de5f1aa6ee5347903fa7457ef243c1b7cf",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,40 @@\n   public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n     LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n     // If this queue is over its limit, reject\n     if (Resources.greaterThan(getResourceUsage(),\n-        queueMgr.getMaxResources(queue.getName()))) {\n+        queueMgr.getMaxResources(getName()))) {\n       return Resources.none();\n     }\n \n     // If this node already has reserved resources for an app, first try to\n     // finish allocating resources for that app.\n     if (reserved) {\n       for (AppSchedulable sched : appScheds) {\n         if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n             node.getReservedContainer().getApplicationAttemptId()) {\n           return sched.assignContainer(node, reserved);\n         }\n       }\n       return Resources.none(); // We should never get here\n     }\n \n     // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n     else {\n-      SchedulingMode mode \u003d queue.getSchedulingMode();\n-\n       Comparator\u003cSchedulable\u003e comparator;\n-      if (mode \u003d\u003d SchedulingMode.FIFO) {\n+      if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n         comparator \u003d new SchedulingAlgorithms.FifoComparator();\n-      } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n+      } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n         comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n       } else {\n-        throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n+        throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n+            schedulingMode);\n       }\n \n       Collections.sort(appScheds, comparator);\n       for (AppSchedulable sched: appScheds) {\n         return sched.assignContainer(node, reserved);\n       }\n \n       return Resources.none();\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      Comparator\u003cSchedulable\u003e comparator;\n      if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n            schedulingMode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        return sched.assignContainer(node, reserved);\n      }\n\n      return Resources.none();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-187. Add hierarchical queues to the fair scheduler. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1415592 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/12 4:03 AM",
          "commitName": "ae6f1123f57c09a9cf5eed3e8c4659481417dc21",
          "commitAuthor": "Thomas White",
          "commitDateOld": "29/11/12 6:51 PM",
          "commitNameOld": "6b08d7de5f1aa6ee5347903fa7457ef243c1b7cf",
          "commitAuthorOld": "Tsz-wo Sze",
          "daysBetweenCommits": 0.38,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,40 @@\n   public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n     LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n     // If this queue is over its limit, reject\n     if (Resources.greaterThan(getResourceUsage(),\n-        queueMgr.getMaxResources(queue.getName()))) {\n+        queueMgr.getMaxResources(getName()))) {\n       return Resources.none();\n     }\n \n     // If this node already has reserved resources for an app, first try to\n     // finish allocating resources for that app.\n     if (reserved) {\n       for (AppSchedulable sched : appScheds) {\n         if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n             node.getReservedContainer().getApplicationAttemptId()) {\n           return sched.assignContainer(node, reserved);\n         }\n       }\n       return Resources.none(); // We should never get here\n     }\n \n     // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n     else {\n-      SchedulingMode mode \u003d queue.getSchedulingMode();\n-\n       Comparator\u003cSchedulable\u003e comparator;\n-      if (mode \u003d\u003d SchedulingMode.FIFO) {\n+      if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n         comparator \u003d new SchedulingAlgorithms.FifoComparator();\n-      } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n+      } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n         comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n       } else {\n-        throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n+        throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n+            schedulingMode);\n       }\n \n       Collections.sort(appScheds, comparator);\n       for (AppSchedulable sched: appScheds) {\n         return sched.assignContainer(node, reserved);\n       }\n \n       return Resources.none();\n     }\n-\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      Comparator\u003cSchedulable\u003e comparator;\n      if (schedulingMode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (schedulingMode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + \n            schedulingMode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        return sched.assignContainer(node, reserved);\n      }\n\n      return Resources.none();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSLeafQueue.java",
          "extendedDetails": {}
        }
      ]
    },
    "933a6d2c1ec8d3b373674e3e74eb472863fc464d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-183. Clean up fair scheduler code. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1407433 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/11/12 4:38 AM",
      "commitName": "933a6d2c1ec8d3b373674e3e74eb472863fc464d",
      "commitAuthor": "Thomas White",
      "commitDateOld": "04/10/12 4:00 PM",
      "commitNameOld": "b8f81d74c8810c6d2c530880a1d1f4923a5e3591",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 35.57,
      "commitsBetweenForRepo": 203,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n-    LOG.debug(\"Node offered to queue: \" + this.getName() + \" reserved: \" + reserved);\n+    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n     // If this queue is over its limit, reject\n-    if (Resources.greaterThan(this.getResourceUsage(),\n+    if (Resources.greaterThan(getResourceUsage(),\n         queueMgr.getMaxResources(queue.getName()))) {\n       return Resources.none();\n     }\n \n     // If this node already has reserved resources for an app, first try to\n     // finish allocating resources for that app.\n     if (reserved) {\n       for (AppSchedulable sched : appScheds) {\n         if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n             node.getReservedContainer().getApplicationAttemptId()) {\n           return sched.assignContainer(node, reserved);\n         }\n       }\n       return Resources.none(); // We should never get here\n     }\n \n     // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n     else {\n       SchedulingMode mode \u003d queue.getSchedulingMode();\n \n       Comparator\u003cSchedulable\u003e comparator;\n       if (mode \u003d\u003d SchedulingMode.FIFO) {\n         comparator \u003d new SchedulingAlgorithms.FifoComparator();\n       } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n         comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n       } else {\n         throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n       }\n \n       Collections.sort(appScheds, comparator);\n       for (AppSchedulable sched: appScheds) {\n         return sched.assignContainer(node, reserved);\n       }\n \n       return Resources.none();\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(getResourceUsage(),\n        queueMgr.getMaxResources(queue.getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      SchedulingMode mode \u003d queue.getSchedulingMode();\n\n      Comparator\u003cSchedulable\u003e comparator;\n      if (mode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        return sched.assignContainer(node, reserved);\n      }\n\n      return Resources.none();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + this.getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(this.getResourceUsage(),\n        queueMgr.getMaxResources(queue.getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      SchedulingMode mode \u003d queue.getSchedulingMode();\n\n      Comparator\u003cSchedulable\u003e comparator;\n      if (mode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        return sched.assignContainer(node, reserved);\n      }\n\n      return Resources.none();\n    }\n\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Yparameterchange",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "12/07/12 5:43 PM",
      "commitNameOld": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 4.04,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n-  public Resource assignContainer(SchedulerNode node, boolean reserved) {\n+  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n     LOG.debug(\"Node offered to queue: \" + this.getName() + \" reserved: \" + reserved);\n     // If this queue is over its limit, reject\n     if (Resources.greaterThan(this.getResourceUsage(),\n         queueMgr.getMaxResources(queue.getName()))) {\n       return Resources.none();\n     }\n \n     // If this node already has reserved resources for an app, first try to\n     // finish allocating resources for that app.\n     if (reserved) {\n       for (AppSchedulable sched : appScheds) {\n         if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n             node.getReservedContainer().getApplicationAttemptId()) {\n           return sched.assignContainer(node, reserved);\n         }\n       }\n       return Resources.none(); // We should never get here\n     }\n \n     // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n     else {\n       SchedulingMode mode \u003d queue.getSchedulingMode();\n \n       Comparator\u003cSchedulable\u003e comparator;\n       if (mode \u003d\u003d SchedulingMode.FIFO) {\n         comparator \u003d new SchedulingAlgorithms.FifoComparator();\n       } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n         comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n       } else {\n         throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n       }\n \n       Collections.sort(appScheds, comparator);\n       for (AppSchedulable sched: appScheds) {\n         return sched.assignContainer(node, reserved);\n       }\n \n       return Resources.none();\n     }\n \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(FSSchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + this.getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(this.getResourceUsage(),\n        queueMgr.getMaxResources(queue.getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      SchedulingMode mode \u003d queue.getSchedulingMode();\n\n      Comparator\u003cSchedulable\u003e comparator;\n      if (mode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        return sched.assignContainer(node, reserved);\n      }\n\n      return Resources.none();\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java",
      "extendedDetails": {
        "oldValue": "[node-SchedulerNode, reserved-boolean]",
        "newValue": "[node-FSSchedulerNode, reserved-boolean]"
      }
    },
    "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-3451. Port Fair Scheduler to MR2 (pwendell via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361020 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 5:43 PM",
      "commitName": "1ef64e64c05ae5318cd4cb47d03a0494d742fb7c",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,42 @@\n+  public Resource assignContainer(SchedulerNode node, boolean reserved) {\n+    LOG.debug(\"Node offered to queue: \" + this.getName() + \" reserved: \" + reserved);\n+    // If this queue is over its limit, reject\n+    if (Resources.greaterThan(this.getResourceUsage(),\n+        queueMgr.getMaxResources(queue.getName()))) {\n+      return Resources.none();\n+    }\n+\n+    // If this node already has reserved resources for an app, first try to\n+    // finish allocating resources for that app.\n+    if (reserved) {\n+      for (AppSchedulable sched : appScheds) {\n+        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n+            node.getReservedContainer().getApplicationAttemptId()) {\n+          return sched.assignContainer(node, reserved);\n+        }\n+      }\n+      return Resources.none(); // We should never get here\n+    }\n+\n+    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n+    else {\n+      SchedulingMode mode \u003d queue.getSchedulingMode();\n+\n+      Comparator\u003cSchedulable\u003e comparator;\n+      if (mode \u003d\u003d SchedulingMode.FIFO) {\n+        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n+      } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n+        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n+      } else {\n+        throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n+      }\n+\n+      Collections.sort(appScheds, comparator);\n+      for (AppSchedulable sched: appScheds) {\n+        return sched.assignContainer(node, reserved);\n+      }\n+\n+      return Resources.none();\n+    }\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource assignContainer(SchedulerNode node, boolean reserved) {\n    LOG.debug(\"Node offered to queue: \" + this.getName() + \" reserved: \" + reserved);\n    // If this queue is over its limit, reject\n    if (Resources.greaterThan(this.getResourceUsage(),\n        queueMgr.getMaxResources(queue.getName()))) {\n      return Resources.none();\n    }\n\n    // If this node already has reserved resources for an app, first try to\n    // finish allocating resources for that app.\n    if (reserved) {\n      for (AppSchedulable sched : appScheds) {\n        if (sched.getApp().getApplicationAttemptId() \u003d\u003d\n            node.getReservedContainer().getApplicationAttemptId()) {\n          return sched.assignContainer(node, reserved);\n        }\n      }\n      return Resources.none(); // We should never get here\n    }\n\n    // Otherwise, chose app to schedule based on given policy (fair vs fifo).\n    else {\n      SchedulingMode mode \u003d queue.getSchedulingMode();\n\n      Comparator\u003cSchedulable\u003e comparator;\n      if (mode \u003d\u003d SchedulingMode.FIFO) {\n        comparator \u003d new SchedulingAlgorithms.FifoComparator();\n      } else if (mode \u003d\u003d SchedulingMode.FAIR) {\n        comparator \u003d new SchedulingAlgorithms.FairShareComparator();\n      } else {\n        throw new RuntimeException(\"Unsupported queue scheduling mode \" + mode);\n      }\n\n      Collections.sort(appScheds, comparator);\n      for (AppSchedulable sched: appScheds) {\n        return sched.assignContainer(node, reserved);\n      }\n\n      return Resources.none();\n    }\n\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fair/FSQueueSchedulable.java"
    }
  }
}