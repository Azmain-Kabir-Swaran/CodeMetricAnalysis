{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryDNS.java",
  "functionName": "generateReply",
  "functionId": "generateReply___query-Message__s-Socket",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
  "functionStartLine": 1062,
  "functionEndLine": 1126,
  "numCommitsSeen": 15,
  "timeTaken": 2053,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "5cf37418bdc6ff09c0c1ae3ac8ac4b0867de0de4",
    "4fb1f45f21916ca1b1fc6652a2ad562ac996b7b8",
    "501be9b4be7d549b23cc501b26fdfdce0a7aa911",
    "f934f62fc71b4776e88f86d4254de0ea12147511"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "5cf37418bdc6ff09c0c1ae3ac8ac4b0867de0de4": "Ybodychange",
    "4fb1f45f21916ca1b1fc6652a2ad562ac996b7b8": "Ybodychange",
    "501be9b4be7d549b23cc501b26fdfdce0a7aa911": "Ybodychange",
    "f934f62fc71b4776e88f86d4254de0ea12147511": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  byte[] generateReply(Message query, Socket s)\n      throws IOException {\n    Header header;\n    boolean badversion;\n    int maxLength;\n    int flags \u003d 0;\n\n    OPTRecord queryOPT \u003d query.getOPT();\n    maxLength \u003d getMaxLength(s, queryOPT);\n\n    header \u003d query.getHeader();\n    if (header.getFlag(Flags.QR)) {\n      LOG.debug(\"returning null\");\n      return null;\n    }\n    if (header.getRcode() !\u003d Rcode.NOERROR) {\n      return errorMessage(query, Rcode.FORMERR);\n    }\n    if (header.getOpcode() !\u003d Opcode.QUERY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    Record queryRecord \u003d query.getQuestion();\n\n    if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n      flags \u003d FLAG_DNSSECOK;\n    }\n\n    Message response \u003d new Message(query.getHeader().getID());\n    response.getHeader().setFlag(Flags.QR);\n    if (query.getHeader().getFlag(Flags.RD)) {\n      response.getHeader().setFlag(Flags.RD);\n      response.getHeader().setFlag(Flags.RA);\n    }\n    response.addRecord(queryRecord, Section.QUESTION);\n\n    Name name \u003d queryRecord.getName();\n    int type \u003d queryRecord.getType();\n    int dclass \u003d queryRecord.getDClass();\n\n    TSIGRecord queryTSIG \u003d query.getTSIG();\n    if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n      return doAXFR(name, query, null, queryTSIG, s);\n    }\n    if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    LOG.debug(\"calling addAnswer\");\n    byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n    if (rcode !\u003d Rcode.NOERROR) {\n      rcode \u003d remoteLookup(response, name, type, 0);\n      response.getHeader().setRcode(rcode);\n    }\n    addAdditional(response, flags);\n\n    if (queryOPT !\u003d null) {\n      int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n      OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n          optflags);\n      response.addRecord(opt, Section.ADDITIONAL);\n    }\n\n    return response.toWire(maxLength);\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
      }
    },
    "5cf37418bdc6ff09c0c1ae3ac8ac4b0867de0de4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8365.  Set DNS query type according to client request.\n            Contributed by Shane Kumpf\n",
      "commitDate": "04/06/18 4:06 PM",
      "commitName": "5cf37418bdc6ff09c0c1ae3ac8ac4b0867de0de4",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "27/04/18 7:58 AM",
      "commitNameOld": "9ab3f9708923b3429209006a12695f4826a045b9",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 38.34,
      "commitsBetweenForRepo": 305,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   byte[] generateReply(Message query, Socket s)\n       throws IOException {\n     Header header;\n     boolean badversion;\n     int maxLength;\n     int flags \u003d 0;\n \n     OPTRecord queryOPT \u003d query.getOPT();\n     maxLength \u003d getMaxLength(s, queryOPT);\n \n     header \u003d query.getHeader();\n     if (header.getFlag(Flags.QR)) {\n       LOG.debug(\"returning null\");\n       return null;\n     }\n     if (header.getRcode() !\u003d Rcode.NOERROR) {\n       return errorMessage(query, Rcode.FORMERR);\n     }\n     if (header.getOpcode() !\u003d Opcode.QUERY) {\n       return errorMessage(query, Rcode.NOTIMP);\n     }\n \n     Record queryRecord \u003d query.getQuestion();\n \n     if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n       flags \u003d FLAG_DNSSECOK;\n     }\n \n     Message response \u003d new Message(query.getHeader().getID());\n     response.getHeader().setFlag(Flags.QR);\n     if (query.getHeader().getFlag(Flags.RD)) {\n       response.getHeader().setFlag(Flags.RD);\n       response.getHeader().setFlag(Flags.RA);\n     }\n     response.addRecord(queryRecord, Section.QUESTION);\n \n     Name name \u003d queryRecord.getName();\n     int type \u003d queryRecord.getType();\n     int dclass \u003d queryRecord.getDClass();\n \n     TSIGRecord queryTSIG \u003d query.getTSIG();\n     if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n       return doAXFR(name, query, null, queryTSIG, s);\n     }\n     if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n       return errorMessage(query, Rcode.NOTIMP);\n     }\n \n     LOG.debug(\"calling addAnswer\");\n     byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n     if (rcode !\u003d Rcode.NOERROR) {\n-      rcode \u003d remoteLookup(response, name, 0);\n+      rcode \u003d remoteLookup(response, name, type, 0);\n       response.getHeader().setRcode(rcode);\n     }\n     addAdditional(response, flags);\n \n     if (queryOPT !\u003d null) {\n       int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n       OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n           optflags);\n       response.addRecord(opt, Section.ADDITIONAL);\n     }\n \n     return response.toWire(maxLength);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  byte[] generateReply(Message query, Socket s)\n      throws IOException {\n    Header header;\n    boolean badversion;\n    int maxLength;\n    int flags \u003d 0;\n\n    OPTRecord queryOPT \u003d query.getOPT();\n    maxLength \u003d getMaxLength(s, queryOPT);\n\n    header \u003d query.getHeader();\n    if (header.getFlag(Flags.QR)) {\n      LOG.debug(\"returning null\");\n      return null;\n    }\n    if (header.getRcode() !\u003d Rcode.NOERROR) {\n      return errorMessage(query, Rcode.FORMERR);\n    }\n    if (header.getOpcode() !\u003d Opcode.QUERY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    Record queryRecord \u003d query.getQuestion();\n\n    if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n      flags \u003d FLAG_DNSSECOK;\n    }\n\n    Message response \u003d new Message(query.getHeader().getID());\n    response.getHeader().setFlag(Flags.QR);\n    if (query.getHeader().getFlag(Flags.RD)) {\n      response.getHeader().setFlag(Flags.RD);\n      response.getHeader().setFlag(Flags.RA);\n    }\n    response.addRecord(queryRecord, Section.QUESTION);\n\n    Name name \u003d queryRecord.getName();\n    int type \u003d queryRecord.getType();\n    int dclass \u003d queryRecord.getDClass();\n\n    TSIGRecord queryTSIG \u003d query.getTSIG();\n    if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n      return doAXFR(name, query, null, queryTSIG, s);\n    }\n    if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    LOG.debug(\"calling addAnswer\");\n    byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n    if (rcode !\u003d Rcode.NOERROR) {\n      rcode \u003d remoteLookup(response, name, type, 0);\n      response.getHeader().setRcode(rcode);\n    }\n    addAdditional(response, flags);\n\n    if (queryOPT !\u003d null) {\n      int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n      OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n          optflags);\n      response.addRecord(opt, Section.ADDITIONAL);\n    }\n\n    return response.toWire(maxLength);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {}
    },
    "4fb1f45f21916ca1b1fc6652a2ad562ac996b7b8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7731. RegistryDNS should handle upstream DNS returning CNAME. Contributed by Eric Yang\n",
      "commitDate": "12/01/18 9:21 AM",
      "commitName": "4fb1f45f21916ca1b1fc6652a2ad562ac996b7b8",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "04/12/17 12:11 PM",
      "commitNameOld": "d30d57828fddaa8667de49af879cde999907c7f6",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 38.88,
      "commitsBetweenForRepo": 222,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,65 +1,65 @@\n   byte[] generateReply(Message query, Socket s)\n       throws IOException {\n     Header header;\n     boolean badversion;\n     int maxLength;\n     int flags \u003d 0;\n \n     OPTRecord queryOPT \u003d query.getOPT();\n     maxLength \u003d getMaxLength(s, queryOPT);\n \n     header \u003d query.getHeader();\n     if (header.getFlag(Flags.QR)) {\n       LOG.debug(\"returning null\");\n       return null;\n     }\n     if (header.getRcode() !\u003d Rcode.NOERROR) {\n       return errorMessage(query, Rcode.FORMERR);\n     }\n     if (header.getOpcode() !\u003d Opcode.QUERY) {\n       return errorMessage(query, Rcode.NOTIMP);\n     }\n \n     Record queryRecord \u003d query.getQuestion();\n \n     if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n       flags \u003d FLAG_DNSSECOK;\n     }\n \n     Message response \u003d new Message(query.getHeader().getID());\n     response.getHeader().setFlag(Flags.QR);\n     if (query.getHeader().getFlag(Flags.RD)) {\n       response.getHeader().setFlag(Flags.RD);\n       response.getHeader().setFlag(Flags.RA);\n     }\n     response.addRecord(queryRecord, Section.QUESTION);\n \n     Name name \u003d queryRecord.getName();\n     int type \u003d queryRecord.getType();\n     int dclass \u003d queryRecord.getDClass();\n \n     TSIGRecord queryTSIG \u003d query.getTSIG();\n     if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n       return doAXFR(name, query, null, queryTSIG, s);\n     }\n     if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n       return errorMessage(query, Rcode.NOTIMP);\n     }\n \n     LOG.debug(\"calling addAnswer\");\n     byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n     if (rcode !\u003d Rcode.NOERROR) {\n-      rcode \u003d remoteLookup(response, name);\n+      rcode \u003d remoteLookup(response, name, 0);\n       response.getHeader().setRcode(rcode);\n     }\n     addAdditional(response, flags);\n \n     if (queryOPT !\u003d null) {\n       int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n       OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n           optflags);\n       response.addRecord(opt, Section.ADDITIONAL);\n     }\n \n     return response.toWire(maxLength);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  byte[] generateReply(Message query, Socket s)\n      throws IOException {\n    Header header;\n    boolean badversion;\n    int maxLength;\n    int flags \u003d 0;\n\n    OPTRecord queryOPT \u003d query.getOPT();\n    maxLength \u003d getMaxLength(s, queryOPT);\n\n    header \u003d query.getHeader();\n    if (header.getFlag(Flags.QR)) {\n      LOG.debug(\"returning null\");\n      return null;\n    }\n    if (header.getRcode() !\u003d Rcode.NOERROR) {\n      return errorMessage(query, Rcode.FORMERR);\n    }\n    if (header.getOpcode() !\u003d Opcode.QUERY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    Record queryRecord \u003d query.getQuestion();\n\n    if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n      flags \u003d FLAG_DNSSECOK;\n    }\n\n    Message response \u003d new Message(query.getHeader().getID());\n    response.getHeader().setFlag(Flags.QR);\n    if (query.getHeader().getFlag(Flags.RD)) {\n      response.getHeader().setFlag(Flags.RD);\n      response.getHeader().setFlag(Flags.RA);\n    }\n    response.addRecord(queryRecord, Section.QUESTION);\n\n    Name name \u003d queryRecord.getName();\n    int type \u003d queryRecord.getType();\n    int dclass \u003d queryRecord.getDClass();\n\n    TSIGRecord queryTSIG \u003d query.getTSIG();\n    if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n      return doAXFR(name, query, null, queryTSIG, s);\n    }\n    if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    LOG.debug(\"calling addAnswer\");\n    byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n    if (rcode !\u003d Rcode.NOERROR) {\n      rcode \u003d remoteLookup(response, name, 0);\n      response.getHeader().setRcode(rcode);\n    }\n    addAdditional(response, flags);\n\n    if (queryOPT !\u003d null) {\n      int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n      OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n          optflags);\n      response.addRecord(opt, Section.ADDITIONAL);\n    }\n\n    return response.toWire(maxLength);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {}
    },
    "501be9b4be7d549b23cc501b26fdfdce0a7aa911": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7326. Add recursion support and configure RegistryDNS to lookup upstream. Contributed by Eric Yang\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "501be9b4be7d549b23cc501b26fdfdce0a7aa911",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "92734800844b93bb19f3c0fca6be88d2801f7b1b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,65 @@\n   byte[] generateReply(Message query, Socket s)\n       throws IOException {\n     Header header;\n     boolean badversion;\n     int maxLength;\n     int flags \u003d 0;\n \n     OPTRecord queryOPT \u003d query.getOPT();\n     maxLength \u003d getMaxLength(s, queryOPT);\n \n     header \u003d query.getHeader();\n     if (header.getFlag(Flags.QR)) {\n       LOG.debug(\"returning null\");\n       return null;\n     }\n     if (header.getRcode() !\u003d Rcode.NOERROR) {\n       return errorMessage(query, Rcode.FORMERR);\n     }\n     if (header.getOpcode() !\u003d Opcode.QUERY) {\n       return errorMessage(query, Rcode.NOTIMP);\n     }\n \n     Record queryRecord \u003d query.getQuestion();\n \n     if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n       flags \u003d FLAG_DNSSECOK;\n     }\n \n     Message response \u003d new Message(query.getHeader().getID());\n     response.getHeader().setFlag(Flags.QR);\n     if (query.getHeader().getFlag(Flags.RD)) {\n       response.getHeader().setFlag(Flags.RD);\n+      response.getHeader().setFlag(Flags.RA);\n     }\n     response.addRecord(queryRecord, Section.QUESTION);\n \n     Name name \u003d queryRecord.getName();\n     int type \u003d queryRecord.getType();\n     int dclass \u003d queryRecord.getDClass();\n \n     TSIGRecord queryTSIG \u003d query.getTSIG();\n     if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n       return doAXFR(name, query, null, queryTSIG, s);\n     }\n     if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n       return errorMessage(query, Rcode.NOTIMP);\n     }\n \n     LOG.debug(\"calling addAnswer\");\n     byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n-    if (rcode !\u003d Rcode.NOERROR \u0026\u0026 rcode !\u003d Rcode.NXDOMAIN) {\n-      return errorMessage(query, rcode);\n+    if (rcode !\u003d Rcode.NOERROR) {\n+      rcode \u003d remoteLookup(response, name);\n+      response.getHeader().setRcode(rcode);\n     }\n-\n     addAdditional(response, flags);\n \n     if (queryOPT !\u003d null) {\n       int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n       OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n           optflags);\n       response.addRecord(opt, Section.ADDITIONAL);\n     }\n \n     return response.toWire(maxLength);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  byte[] generateReply(Message query, Socket s)\n      throws IOException {\n    Header header;\n    boolean badversion;\n    int maxLength;\n    int flags \u003d 0;\n\n    OPTRecord queryOPT \u003d query.getOPT();\n    maxLength \u003d getMaxLength(s, queryOPT);\n\n    header \u003d query.getHeader();\n    if (header.getFlag(Flags.QR)) {\n      LOG.debug(\"returning null\");\n      return null;\n    }\n    if (header.getRcode() !\u003d Rcode.NOERROR) {\n      return errorMessage(query, Rcode.FORMERR);\n    }\n    if (header.getOpcode() !\u003d Opcode.QUERY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    Record queryRecord \u003d query.getQuestion();\n\n    if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n      flags \u003d FLAG_DNSSECOK;\n    }\n\n    Message response \u003d new Message(query.getHeader().getID());\n    response.getHeader().setFlag(Flags.QR);\n    if (query.getHeader().getFlag(Flags.RD)) {\n      response.getHeader().setFlag(Flags.RD);\n      response.getHeader().setFlag(Flags.RA);\n    }\n    response.addRecord(queryRecord, Section.QUESTION);\n\n    Name name \u003d queryRecord.getName();\n    int type \u003d queryRecord.getType();\n    int dclass \u003d queryRecord.getDClass();\n\n    TSIGRecord queryTSIG \u003d query.getTSIG();\n    if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n      return doAXFR(name, query, null, queryTSIG, s);\n    }\n    if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    LOG.debug(\"calling addAnswer\");\n    byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n    if (rcode !\u003d Rcode.NOERROR) {\n      rcode \u003d remoteLookup(response, name);\n      response.getHeader().setRcode(rcode);\n    }\n    addAdditional(response, flags);\n\n    if (queryOPT !\u003d null) {\n      int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n      OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n          optflags);\n      response.addRecord(opt, Section.ADDITIONAL);\n    }\n\n    return response.toWire(maxLength);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {}
    },
    "f934f62fc71b4776e88f86d4254de0ea12147511": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5218. Initial core change for DNS for YARN. Contributed by Jonathan Maron\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,64 @@\n+  byte[] generateReply(Message query, Socket s)\n+      throws IOException {\n+    Header header;\n+    boolean badversion;\n+    int maxLength;\n+    int flags \u003d 0;\n+\n+    OPTRecord queryOPT \u003d query.getOPT();\n+    maxLength \u003d getMaxLength(s, queryOPT);\n+\n+    header \u003d query.getHeader();\n+    if (header.getFlag(Flags.QR)) {\n+      LOG.debug(\"returning null\");\n+      return null;\n+    }\n+    if (header.getRcode() !\u003d Rcode.NOERROR) {\n+      return errorMessage(query, Rcode.FORMERR);\n+    }\n+    if (header.getOpcode() !\u003d Opcode.QUERY) {\n+      return errorMessage(query, Rcode.NOTIMP);\n+    }\n+\n+    Record queryRecord \u003d query.getQuestion();\n+\n+    if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n+      flags \u003d FLAG_DNSSECOK;\n+    }\n+\n+    Message response \u003d new Message(query.getHeader().getID());\n+    response.getHeader().setFlag(Flags.QR);\n+    if (query.getHeader().getFlag(Flags.RD)) {\n+      response.getHeader().setFlag(Flags.RD);\n+    }\n+    response.addRecord(queryRecord, Section.QUESTION);\n+\n+    Name name \u003d queryRecord.getName();\n+    int type \u003d queryRecord.getType();\n+    int dclass \u003d queryRecord.getDClass();\n+\n+    TSIGRecord queryTSIG \u003d query.getTSIG();\n+    if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n+      return doAXFR(name, query, null, queryTSIG, s);\n+    }\n+    if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n+      return errorMessage(query, Rcode.NOTIMP);\n+    }\n+\n+    LOG.debug(\"calling addAnswer\");\n+    byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n+    if (rcode !\u003d Rcode.NOERROR \u0026\u0026 rcode !\u003d Rcode.NXDOMAIN) {\n+      return errorMessage(query, rcode);\n+    }\n+\n+    addAdditional(response, flags);\n+\n+    if (queryOPT !\u003d null) {\n+      int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n+      OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n+          optflags);\n+      response.addRecord(opt, Section.ADDITIONAL);\n+    }\n+\n+    return response.toWire(maxLength);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  byte[] generateReply(Message query, Socket s)\n      throws IOException {\n    Header header;\n    boolean badversion;\n    int maxLength;\n    int flags \u003d 0;\n\n    OPTRecord queryOPT \u003d query.getOPT();\n    maxLength \u003d getMaxLength(s, queryOPT);\n\n    header \u003d query.getHeader();\n    if (header.getFlag(Flags.QR)) {\n      LOG.debug(\"returning null\");\n      return null;\n    }\n    if (header.getRcode() !\u003d Rcode.NOERROR) {\n      return errorMessage(query, Rcode.FORMERR);\n    }\n    if (header.getOpcode() !\u003d Opcode.QUERY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    Record queryRecord \u003d query.getQuestion();\n\n    if (queryOPT !\u003d null \u0026\u0026 (queryOPT.getFlags() \u0026 ExtendedFlags.DO) !\u003d 0) {\n      flags \u003d FLAG_DNSSECOK;\n    }\n\n    Message response \u003d new Message(query.getHeader().getID());\n    response.getHeader().setFlag(Flags.QR);\n    if (query.getHeader().getFlag(Flags.RD)) {\n      response.getHeader().setFlag(Flags.RD);\n    }\n    response.addRecord(queryRecord, Section.QUESTION);\n\n    Name name \u003d queryRecord.getName();\n    int type \u003d queryRecord.getType();\n    int dclass \u003d queryRecord.getDClass();\n\n    TSIGRecord queryTSIG \u003d query.getTSIG();\n    if (type \u003d\u003d Type.AXFR \u0026\u0026 s !\u003d null) {\n      return doAXFR(name, query, null, queryTSIG, s);\n    }\n    if (!Type.isRR(type) \u0026\u0026 type !\u003d Type.ANY) {\n      return errorMessage(query, Rcode.NOTIMP);\n    }\n\n    LOG.debug(\"calling addAnswer\");\n    byte rcode \u003d addAnswer(response, name, type, dclass, 0, flags);\n    if (rcode !\u003d Rcode.NOERROR \u0026\u0026 rcode !\u003d Rcode.NXDOMAIN) {\n      return errorMessage(query, rcode);\n    }\n\n    addAdditional(response, flags);\n\n    if (queryOPT !\u003d null) {\n      int optflags \u003d (flags \u003d\u003d FLAG_DNSSECOK) ? ExtendedFlags.DO : 0;\n      OPTRecord opt \u003d new OPTRecord((short) 4096, rcode \u003e\u003e\u003e 16, (byte) 0,\n          optflags);\n      response.addRecord(opt, Section.ADDITIONAL);\n    }\n\n    return response.toWire(maxLength);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
    }
  }
}