{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StorageSize.java",
  "functionName": "parse",
  "functionId": "parse___value-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/StorageSize.java",
  "functionStartLine": 50,
  "functionEndLine": 96,
  "numCommitsSeen": 1,
  "timeTaken": 827,
  "changeHistory": [
    "8f66affd6265c9e4231e18d7ca352fb3035dae9a"
  ],
  "changeHistoryShort": {
    "8f66affd6265c9e4231e18d7ca352fb3035dae9a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8f66affd6265c9e4231e18d7ca352fb3035dae9a": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-15204. Add Configuration API for parsing storage sizes. Contributed by Anu Engineer.\n",
      "commitDate": "14/02/18 1:11 PM",
      "commitName": "8f66affd6265c9e4231e18d7ca352fb3035dae9a",
      "commitAuthor": "Anu Engineer",
      "diff": "@@ -0,0 +1,47 @@\n+  public static StorageSize parse(String value) {\n+    checkState(isNotBlank(value), \"value cannot be blank\");\n+    String sanitizedValue \u003d value.trim().toLowerCase(Locale.ENGLISH);\n+    StorageUnit parsedUnit \u003d null;\n+    for (StorageUnit unit : StorageUnit.values()) {\n+      if (sanitizedValue.endsWith(unit.getShortName()) ||\n+          sanitizedValue.endsWith(unit.getLongName()) ||\n+          sanitizedValue.endsWith(unit.getSuffixChar())) {\n+        parsedUnit \u003d unit;\n+        break;\n+      }\n+    }\n+\n+    if (parsedUnit \u003d\u003d null) {\n+      throw new IllegalArgumentException(value + \" is not in expected format.\" +\n+          \"Expected format is \u003cnumber\u003e\u003cunit\u003e. e.g. 1000MB\");\n+    }\n+\n+\n+    String suffix \u003d \"\";\n+    boolean found \u003d false;\n+\n+    // We are trying to get the longest match first, so the order of\n+    // matching is getLongName, getShortName and then getSuffixChar.\n+    if (!found \u0026\u0026 sanitizedValue.endsWith(parsedUnit.getLongName())) {\n+      found \u003d true;\n+      suffix \u003d parsedUnit.getLongName();\n+    }\n+\n+    if (!found \u0026\u0026 sanitizedValue.endsWith(parsedUnit.getShortName())) {\n+      found \u003d true;\n+      suffix \u003d parsedUnit.getShortName();\n+    }\n+\n+    if (!found \u0026\u0026 sanitizedValue.endsWith(parsedUnit.getSuffixChar())) {\n+      found \u003d true;\n+      suffix \u003d parsedUnit.getSuffixChar();\n+    }\n+\n+    checkState(found, \"Something is wrong, we have to find a \" +\n+        \"match. Internal error.\");\n+\n+    String valString \u003d\n+        sanitizedValue.substring(0, value.length() - suffix.length());\n+    return new StorageSize(parsedUnit, Double.parseDouble(valString));\n+\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static StorageSize parse(String value) {\n    checkState(isNotBlank(value), \"value cannot be blank\");\n    String sanitizedValue \u003d value.trim().toLowerCase(Locale.ENGLISH);\n    StorageUnit parsedUnit \u003d null;\n    for (StorageUnit unit : StorageUnit.values()) {\n      if (sanitizedValue.endsWith(unit.getShortName()) ||\n          sanitizedValue.endsWith(unit.getLongName()) ||\n          sanitizedValue.endsWith(unit.getSuffixChar())) {\n        parsedUnit \u003d unit;\n        break;\n      }\n    }\n\n    if (parsedUnit \u003d\u003d null) {\n      throw new IllegalArgumentException(value + \" is not in expected format.\" +\n          \"Expected format is \u003cnumber\u003e\u003cunit\u003e. e.g. 1000MB\");\n    }\n\n\n    String suffix \u003d \"\";\n    boolean found \u003d false;\n\n    // We are trying to get the longest match first, so the order of\n    // matching is getLongName, getShortName and then getSuffixChar.\n    if (!found \u0026\u0026 sanitizedValue.endsWith(parsedUnit.getLongName())) {\n      found \u003d true;\n      suffix \u003d parsedUnit.getLongName();\n    }\n\n    if (!found \u0026\u0026 sanitizedValue.endsWith(parsedUnit.getShortName())) {\n      found \u003d true;\n      suffix \u003d parsedUnit.getShortName();\n    }\n\n    if (!found \u0026\u0026 sanitizedValue.endsWith(parsedUnit.getSuffixChar())) {\n      found \u003d true;\n      suffix \u003d parsedUnit.getSuffixChar();\n    }\n\n    checkState(found, \"Something is wrong, we have to find a \" +\n        \"match. Internal error.\");\n\n    String valString \u003d\n        sanitizedValue.substring(0, value.length() - suffix.length());\n    return new StorageSize(parsedUnit, Double.parseDouble(valString));\n\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/StorageSize.java"
    }
  }
}