{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "QuorumCall.java",
  "functionName": "create",
  "functionId": "create___calls-Map__KEY,? extends ListenableFuture__RESULT______timer-Timer",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java",
  "functionStartLine": 71,
  "functionEndLine": 91,
  "numCommitsSeen": 14,
  "timeTaken": 3956,
  "changeHistory": [
    "eb96a3093ea34a7749410a63c72b6d0a9636d80f",
    "d7979079ea8c6514858b77a78f0119cffc178086",
    "90894c7262df0243e795b675f3ac9f7b322ccd11",
    "74d4573a23db5586c6e47ff2277aa7c35237da34"
  ],
  "changeHistoryShort": {
    "eb96a3093ea34a7749410a63c72b6d0a9636d80f": "Ybodychange",
    "d7979079ea8c6514858b77a78f0119cffc178086": "Ybodychange",
    "90894c7262df0243e795b675f3ac9f7b322ccd11": "Ymultichange(Yparameterchange,Ybodychange)",
    "74d4573a23db5586c6e47ff2277aa7c35237da34": "Yintroduced"
  },
  "changeHistoryDetails": {
    "eb96a3093ea34a7749410a63c72b6d0a9636d80f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14655. [SBN Read] Namenode crashes if one of The JN is down. Contributed by Ayush Saxena.\n",
      "commitDate": "24/09/19 12:46 PM",
      "commitName": "eb96a3093ea34a7749410a63c72b6d0a9636d80f",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "03/04/19 11:59 AM",
      "commitNameOld": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthorOld": "Gabor Bota",
      "daysBetweenCommits": 174.03,
      "commitsBetweenForRepo": 1346,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n       Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n     final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n     for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n       Preconditions.checkArgument(e.getValue() !\u003d null,\n           \"null future for key: \" + e.getKey());\n+      qr.addCall(e.getValue());\n       Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n         @Override\n         public void onFailure(Throwable t) {\n           qr.addException(e.getKey(), t);\n         }\n \n         @Override\n         public void onSuccess(RESULT res) {\n           qr.addResult(e.getKey(), res);\n         }\n       }, MoreExecutors.directExecutor());\n     }\n     return qr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n    for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n      Preconditions.checkArgument(e.getValue() !\u003d null,\n          \"null future for key: \" + e.getKey());\n      qr.addCall(e.getValue());\n      Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n        @Override\n        public void onFailure(Throwable t) {\n          qr.addException(e.getKey(), t);\n        }\n\n        @Override\n        public void onSuccess(RESULT res) {\n          qr.addResult(e.getKey(), res);\n        }\n      }, MoreExecutors.directExecutor());\n    }\n    return qr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java",
      "extendedDetails": {}
    },
    "d7979079ea8c6514858b77a78f0119cffc178086": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16210. Update guava to 27.0-jre in hadoop-project trunk. Contributed by Gabor Bota.\n",
      "commitDate": "03/04/19 11:59 AM",
      "commitName": "d7979079ea8c6514858b77a78f0119cffc178086",
      "commitAuthor": "Gabor Bota",
      "commitDateOld": "15/09/17 1:56 PM",
      "commitNameOld": "90894c7262df0243e795b675f3ac9f7b322ccd11",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 564.92,
      "commitsBetweenForRepo": 4800,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n   static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n       Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n     final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n     for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n       Preconditions.checkArgument(e.getValue() !\u003d null,\n           \"null future for key: \" + e.getKey());\n       Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n         @Override\n         public void onFailure(Throwable t) {\n           qr.addException(e.getKey(), t);\n         }\n \n         @Override\n         public void onSuccess(RESULT res) {\n           qr.addResult(e.getKey(), res);\n         }\n-      });\n+      }, MoreExecutors.directExecutor());\n     }\n     return qr;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n    for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n      Preconditions.checkArgument(e.getValue() !\u003d null,\n          \"null future for key: \" + e.getKey());\n      Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n        @Override\n        public void onFailure(Throwable t) {\n          qr.addException(e.getKey(), t);\n        }\n\n        @Override\n        public void onSuccess(RESULT res) {\n          qr.addResult(e.getKey(), res);\n        }\n      }, MoreExecutors.directExecutor());\n    }\n    return qr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java",
      "extendedDetails": {}
    },
    "90894c7262df0243e795b675f3ac9f7b322ccd11": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-12323. NameNode terminates after full GC thinking QJM unresponsive if full GC is much longer than timeout. Contributed by Erik Krogen.",
      "commitDate": "15/09/17 1:56 PM",
      "commitName": "90894c7262df0243e795b675f3ac9f7b322ccd11",
      "commitAuthor": "Erik Krogen",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-12323. NameNode terminates after full GC thinking QJM unresponsive if full GC is much longer than timeout. Contributed by Erik Krogen.",
          "commitDate": "15/09/17 1:56 PM",
          "commitName": "90894c7262df0243e795b675f3ac9f7b322ccd11",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "18/01/17 12:46 PM",
          "commitNameOld": "8a0fa0f7e88c45a98c6f266d6349cb426dd06495",
          "commitAuthorOld": "Vinitha Reddy Gankidi",
          "daysBetweenCommits": 240.01,
          "commitsBetweenForRepo": 1499,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n-      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls) {\n-    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e();\n+      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n+    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n     for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n       Preconditions.checkArgument(e.getValue() !\u003d null,\n           \"null future for key: \" + e.getKey());\n       Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n         @Override\n         public void onFailure(Throwable t) {\n           qr.addException(e.getKey(), t);\n         }\n \n         @Override\n         public void onSuccess(RESULT res) {\n           qr.addResult(e.getKey(), res);\n         }\n       });\n     }\n     return qr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n    for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n      Preconditions.checkArgument(e.getValue() !\u003d null,\n          \"null future for key: \" + e.getKey());\n      Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n        @Override\n        public void onFailure(Throwable t) {\n          qr.addException(e.getKey(), t);\n        }\n\n        @Override\n        public void onSuccess(RESULT res) {\n          qr.addResult(e.getKey(), res);\n        }\n      });\n    }\n    return qr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java",
          "extendedDetails": {
            "oldValue": "[calls-Map\u003cKEY,? extends ListenableFuture\u003cRESULT\u003e\u003e]",
            "newValue": "[calls-Map\u003cKEY,? extends ListenableFuture\u003cRESULT\u003e\u003e, timer-Timer]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-12323. NameNode terminates after full GC thinking QJM unresponsive if full GC is much longer than timeout. Contributed by Erik Krogen.",
          "commitDate": "15/09/17 1:56 PM",
          "commitName": "90894c7262df0243e795b675f3ac9f7b322ccd11",
          "commitAuthor": "Erik Krogen",
          "commitDateOld": "18/01/17 12:46 PM",
          "commitNameOld": "8a0fa0f7e88c45a98c6f266d6349cb426dd06495",
          "commitAuthorOld": "Vinitha Reddy Gankidi",
          "daysBetweenCommits": 240.01,
          "commitsBetweenForRepo": 1499,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,20 @@\n   static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n-      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls) {\n-    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e();\n+      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n+    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n     for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n       Preconditions.checkArgument(e.getValue() !\u003d null,\n           \"null future for key: \" + e.getKey());\n       Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n         @Override\n         public void onFailure(Throwable t) {\n           qr.addException(e.getKey(), t);\n         }\n \n         @Override\n         public void onSuccess(RESULT res) {\n           qr.addResult(e.getKey(), res);\n         }\n       });\n     }\n     return qr;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls, Timer timer) {\n    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e(timer);\n    for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n      Preconditions.checkArgument(e.getValue() !\u003d null,\n          \"null future for key: \" + e.getKey());\n      Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n        @Override\n        public void onFailure(Throwable t) {\n          qr.addException(e.getKey(), t);\n        }\n\n        @Override\n        public void onSuccess(RESULT res) {\n          qr.addResult(e.getKey(), res);\n        }\n      });\n    }\n    return qr;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java",
          "extendedDetails": {}
        }
      ]
    },
    "74d4573a23db5586c6e47ff2277aa7c35237da34": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3077. Quorum-based protocol for reading and writing edit logs. Contributed by Todd Lipcon based on initial work from Brandon Li and Hari Mankude.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1363596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/12 5:25 PM",
      "commitName": "74d4573a23db5586c6e47ff2277aa7c35237da34",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,20 @@\n+  static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n+      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls) {\n+    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e();\n+    for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n+      Preconditions.checkArgument(e.getValue() !\u003d null,\n+          \"null future for key: \" + e.getKey());\n+      Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n+        @Override\n+        public void onFailure(Throwable t) {\n+          qr.addException(e.getKey(), t);\n+        }\n+\n+        @Override\n+        public void onSuccess(RESULT res) {\n+          qr.addResult(e.getKey(), res);\n+        }\n+      });\n+    }\n+    return qr;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static \u003cKEY, RESULT\u003e QuorumCall\u003cKEY, RESULT\u003e create(\n      Map\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e calls) {\n    final QuorumCall\u003cKEY, RESULT\u003e qr \u003d new QuorumCall\u003cKEY, RESULT\u003e();\n    for (final Entry\u003cKEY, ? extends ListenableFuture\u003cRESULT\u003e\u003e e : calls.entrySet()) {\n      Preconditions.checkArgument(e.getValue() !\u003d null,\n          \"null future for key: \" + e.getKey());\n      Futures.addCallback(e.getValue(), new FutureCallback\u003cRESULT\u003e() {\n        @Override\n        public void onFailure(Throwable t) {\n          qr.addException(e.getKey(), t);\n        }\n\n        @Override\n        public void onSuccess(RESULT res) {\n          qr.addResult(e.getKey(), res);\n        }\n      });\n    }\n    return qr;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/QuorumCall.java"
    }
  }
}