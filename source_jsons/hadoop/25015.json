{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRWebAppUtil.java",
  "functionName": "getApplicationWebURLOnJHSWithoutScheme",
  "functionId": "getApplicationWebURLOnJHSWithoutScheme___conf-Configuration__appId-ApplicationId",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRWebAppUtil.java",
  "functionStartLine": 126,
  "functionEndLine": 161,
  "numCommitsSeen": 8,
  "timeTaken": 1394,
  "changeHistory": [
    "639f98cc9dc9fca034d0d7c26f30d5c588b9d7b8",
    "e1e09052e861926112493d6041aae01ab594b547",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082"
  ],
  "changeHistoryShort": {
    "639f98cc9dc9fca034d0d7c26f30d5c588b9d7b8": "Ybodychange",
    "e1e09052e861926112493d6041aae01ab594b547": "Ybodychange",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": "Yintroduced"
  },
  "changeHistoryDetails": {
    "639f98cc9dc9fca034d0d7c26f30d5c588b9d7b8": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6951. Improve exception message when mapreduce.jobhistory.webapp.address is in wrong format. Contributed by Prabhu Joseph.\n",
      "commitDate": "11/10/17 1:57 AM",
      "commitName": "639f98cc9dc9fca034d0d7c26f30d5c588b9d7b8",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "13/07/17 4:16 PM",
      "commitNameOld": "43f0503286eccbc6bb8ae77584b635bfd0c48e50",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 89.4,
      "commitsBetweenForRepo": 771,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,36 @@\n   public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf,\n       ApplicationId appId)\n       throws UnknownHostException {\n     //construct the history url for job\n     String addr \u003d getJHSWebappURLWithoutScheme(conf);\n-    Iterator\u003cString\u003e it \u003d ADDR_SPLITTER.split(addr).iterator();\n-    it.next(); // ignore the bind host\n-    String port \u003d it.next();\n+    String port;\n+    try{\n+      Iterator\u003cString\u003e it \u003d ADDR_SPLITTER.split(addr).iterator();\n+      it.next(); // ignore the bind host\n+      port \u003d it.next();\n+    } catch(NoSuchElementException e) {\n+      throw new IllegalArgumentException(\"MapReduce JobHistory WebApp Address\"\n+        + \" does not contain a valid host:port authority: \" + addr);\n+    }\n     // Use hs address to figure out the host for webapp\n     addr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     String host \u003d ADDR_SPLITTER.split(addr).iterator().next();\n     String hsAddress \u003d JOINER.join(host, \":\", port);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\n       hsAddress, getDefaultJHSWebappPort(),\n       getDefaultJHSWebappURLWithoutScheme());\n     StringBuffer sb \u003d new StringBuffer();\n     if (address.getAddress() !\u003d null \u0026\u0026\n         (address.getAddress().isAnyLocalAddress() ||\n          address.getAddress().isLoopbackAddress())) {\n       sb.append(InetAddress.getLocalHost().getCanonicalHostName());\n     } else {\n       sb.append(address.getHostName());\n     }\n     sb.append(\":\").append(address.getPort());\n     sb.append(\"/jobhistory/job/\");\n     JobID jobId \u003d TypeConverter.fromYarn(appId);\n     sb.append(jobId.toString());\n     return sb.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf,\n      ApplicationId appId)\n      throws UnknownHostException {\n    //construct the history url for job\n    String addr \u003d getJHSWebappURLWithoutScheme(conf);\n    String port;\n    try{\n      Iterator\u003cString\u003e it \u003d ADDR_SPLITTER.split(addr).iterator();\n      it.next(); // ignore the bind host\n      port \u003d it.next();\n    } catch(NoSuchElementException e) {\n      throw new IllegalArgumentException(\"MapReduce JobHistory WebApp Address\"\n        + \" does not contain a valid host:port authority: \" + addr);\n    }\n    // Use hs address to figure out the host for webapp\n    addr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    String host \u003d ADDR_SPLITTER.split(addr).iterator().next();\n    String hsAddress \u003d JOINER.join(host, \":\", port);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\n      hsAddress, getDefaultJHSWebappPort(),\n      getDefaultJHSWebappURLWithoutScheme());\n    StringBuffer sb \u003d new StringBuffer();\n    if (address.getAddress() !\u003d null \u0026\u0026\n        (address.getAddress().isAnyLocalAddress() ||\n         address.getAddress().isLoopbackAddress())) {\n      sb.append(InetAddress.getLocalHost().getCanonicalHostName());\n    } else {\n      sb.append(address.getHostName());\n    }\n    sb.append(\":\").append(address.getPort());\n    sb.append(\"/jobhistory/job/\");\n    JobID jobId \u003d TypeConverter.fromYarn(appId);\n    sb.append(jobId.toString());\n    return sb.toString();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRWebAppUtil.java",
      "extendedDetails": {}
    },
    "e1e09052e861926112493d6041aae01ab594b547": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6213. NullPointerException caused by job history server addr not resolvable. Contributed by Peng Zhang.\n",
      "commitDate": "21/03/15 2:14 PM",
      "commitName": "e1e09052e861926112493d6041aae01ab594b547",
      "commitAuthor": "Harsh J",
      "commitDateOld": "31/07/14 1:06 PM",
      "commitNameOld": "e52f67e3897a67a0b6d29e557a31cfa881738821",
      "commitAuthorOld": "Xuan Gong",
      "daysBetweenCommits": 233.05,
      "commitsBetweenForRepo": 2021,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf,\n       ApplicationId appId)\n       throws UnknownHostException {\n     //construct the history url for job\n     String addr \u003d getJHSWebappURLWithoutScheme(conf);\n     Iterator\u003cString\u003e it \u003d ADDR_SPLITTER.split(addr).iterator();\n     it.next(); // ignore the bind host\n     String port \u003d it.next();\n     // Use hs address to figure out the host for webapp\n     addr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n         JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n     String host \u003d ADDR_SPLITTER.split(addr).iterator().next();\n     String hsAddress \u003d JOINER.join(host, \":\", port);\n     InetSocketAddress address \u003d NetUtils.createSocketAddr(\n       hsAddress, getDefaultJHSWebappPort(),\n       getDefaultJHSWebappURLWithoutScheme());\n     StringBuffer sb \u003d new StringBuffer();\n-    if (address.getAddress().isAnyLocalAddress() || \n-        address.getAddress().isLoopbackAddress()) {\n+    if (address.getAddress() !\u003d null \u0026\u0026\n+        (address.getAddress().isAnyLocalAddress() ||\n+         address.getAddress().isLoopbackAddress())) {\n       sb.append(InetAddress.getLocalHost().getCanonicalHostName());\n     } else {\n       sb.append(address.getHostName());\n     }\n     sb.append(\":\").append(address.getPort());\n     sb.append(\"/jobhistory/job/\");\n     JobID jobId \u003d TypeConverter.fromYarn(appId);\n     sb.append(jobId.toString());\n     return sb.toString();\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf,\n      ApplicationId appId)\n      throws UnknownHostException {\n    //construct the history url for job\n    String addr \u003d getJHSWebappURLWithoutScheme(conf);\n    Iterator\u003cString\u003e it \u003d ADDR_SPLITTER.split(addr).iterator();\n    it.next(); // ignore the bind host\n    String port \u003d it.next();\n    // Use hs address to figure out the host for webapp\n    addr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    String host \u003d ADDR_SPLITTER.split(addr).iterator().next();\n    String hsAddress \u003d JOINER.join(host, \":\", port);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\n      hsAddress, getDefaultJHSWebappPort(),\n      getDefaultJHSWebappURLWithoutScheme());\n    StringBuffer sb \u003d new StringBuffer();\n    if (address.getAddress() !\u003d null \u0026\u0026\n        (address.getAddress().isAnyLocalAddress() ||\n         address.getAddress().isLoopbackAddress())) {\n      sb.append(InetAddress.getLocalHost().getCanonicalHostName());\n    } else {\n      sb.append(address.getHostName());\n    }\n    sb.append(\":\").append(address.getPort());\n    sb.append(\"/jobhistory/job/\");\n    JobID jobId \u003d TypeConverter.fromYarn(appId);\n    sb.append(jobId.toString());\n    return sb.toString();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRWebAppUtil.java",
      "extendedDetails": {}
    },
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-5536. Fixed MR AM and JHS to respect mapreduce.jobhistory.webapp.https.address. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:52 PM",
      "commitName": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,29 @@\n+  public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf,\n+      ApplicationId appId)\n+      throws UnknownHostException {\n+    //construct the history url for job\n+    String addr \u003d getJHSWebappURLWithoutScheme(conf);\n+    Iterator\u003cString\u003e it \u003d ADDR_SPLITTER.split(addr).iterator();\n+    it.next(); // ignore the bind host\n+    String port \u003d it.next();\n+    // Use hs address to figure out the host for webapp\n+    addr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n+        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n+    String host \u003d ADDR_SPLITTER.split(addr).iterator().next();\n+    String hsAddress \u003d JOINER.join(host, \":\", port);\n+    InetSocketAddress address \u003d NetUtils.createSocketAddr(\n+      hsAddress, getDefaultJHSWebappPort(),\n+      getDefaultJHSWebappURLWithoutScheme());\n+    StringBuffer sb \u003d new StringBuffer();\n+    if (address.getAddress().isAnyLocalAddress() || \n+        address.getAddress().isLoopbackAddress()) {\n+      sb.append(InetAddress.getLocalHost().getCanonicalHostName());\n+    } else {\n+      sb.append(address.getHostName());\n+    }\n+    sb.append(\":\").append(address.getPort());\n+    sb.append(\"/jobhistory/job/\");\n+    JobID jobId \u003d TypeConverter.fromYarn(appId);\n+    sb.append(jobId.toString());\n+    return sb.toString();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static String getApplicationWebURLOnJHSWithoutScheme(Configuration conf,\n      ApplicationId appId)\n      throws UnknownHostException {\n    //construct the history url for job\n    String addr \u003d getJHSWebappURLWithoutScheme(conf);\n    Iterator\u003cString\u003e it \u003d ADDR_SPLITTER.split(addr).iterator();\n    it.next(); // ignore the bind host\n    String port \u003d it.next();\n    // Use hs address to figure out the host for webapp\n    addr \u003d conf.get(JHAdminConfig.MR_HISTORY_ADDRESS,\n        JHAdminConfig.DEFAULT_MR_HISTORY_ADDRESS);\n    String host \u003d ADDR_SPLITTER.split(addr).iterator().next();\n    String hsAddress \u003d JOINER.join(host, \":\", port);\n    InetSocketAddress address \u003d NetUtils.createSocketAddr(\n      hsAddress, getDefaultJHSWebappPort(),\n      getDefaultJHSWebappURLWithoutScheme());\n    StringBuffer sb \u003d new StringBuffer();\n    if (address.getAddress().isAnyLocalAddress() || \n        address.getAddress().isLoopbackAddress()) {\n      sb.append(InetAddress.getLocalHost().getCanonicalHostName());\n    } else {\n      sb.append(address.getHostName());\n    }\n    sb.append(\":\").append(address.getPort());\n    sb.append(\"/jobhistory/job/\");\n    JobID jobId \u003d TypeConverter.fromYarn(appId);\n    sb.append(jobId.toString());\n    return sb.toString();\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapreduce/v2/util/MRWebAppUtil.java"
    }
  }
}