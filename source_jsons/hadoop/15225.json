{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DFSAdmin.java",
  "functionName": "setBalancerBandwidth",
  "functionId": "setBalancerBandwidth___argv-String[]__idx-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
  "functionStartLine": 1031,
  "functionEndLine": 1066,
  "numCommitsSeen": 118,
  "timeTaken": 5588,
  "changeHistory": [
    "01bd6ab18fa48f4c7cac1497905b52e547962599",
    "68dc7c24050951f4709f7fe5363e11a003cf53eb",
    "0bf285413f8fcaadbb2d5817fe8090f5fb0d37d9",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003",
    "9e941d9f99168cae01f8d50622a616fc26c196d9",
    "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "8390152d08306caad31b78abbd509e5ea8580671"
  ],
  "changeHistoryShort": {
    "01bd6ab18fa48f4c7cac1497905b52e547962599": "Ybodychange",
    "68dc7c24050951f4709f7fe5363e11a003cf53eb": "Ybodychange",
    "0bf285413f8fcaadbb2d5817fe8090f5fb0d37d9": "Ybodychange",
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": "Ybodychange",
    "9e941d9f99168cae01f8d50622a616fc26c196d9": "Ybodychange",
    "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "8390152d08306caad31b78abbd509e5ea8580671": "Yintroduced"
  },
  "changeHistoryDetails": {
    "01bd6ab18fa48f4c7cac1497905b52e547962599": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12935. Get ambiguous result for DFSAdmin command in HA mode when only one namenode is up. Contributed by Jianfei Jiang.\n",
      "commitDate": "07/02/18 9:40 AM",
      "commitName": "01bd6ab18fa48f4c7cac1497905b52e547962599",
      "commitAuthor": "Brahma Reddy Battula",
      "commitDateOld": "05/01/18 10:31 PM",
      "commitNameOld": "bf5c94899537011465350d5d999fad9ffaeb605d",
      "commitAuthorOld": "Yiqun Lin",
      "daysBetweenCommits": 32.46,
      "commitsBetweenForRepo": 204,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,36 @@\n   public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n     long bandwidth;\n     int exitCode \u003d -1;\n \n     try {\n       bandwidth \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[idx]);\n     } catch (NumberFormatException nfe) {\n       System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n       System.err.println(\"Usage: hdfs dfsadmin\"\n                   + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n       return exitCode;\n     }\n \n     if (bandwidth \u003c 0) {\n       System.err.println(\"Bandwidth should be a non-negative integer\");\n       return exitCode;\n     }\n \n     FileSystem fs \u003d getFS();\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return exitCode;\n     }\n \n     DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-    Configuration dfsConf \u003d dfs.getConf();\n-    URI dfsUri \u003d dfs.getUri();\n-    boolean isHaEnabled \u003d HAUtilClient.isLogicalUri(dfsConf, dfsUri);\n-\n-    if (isHaEnabled) {\n-      String nsId \u003d dfsUri.getHost();\n-      List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n-          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n-          nsId, ClientProtocol.class);\n-      for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n-        proxy.getProxy().setBalancerBandwidth(bandwidth);\n-        System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n-            \" for \" + proxy.getAddress());\n-      }\n-    } else {\n+    try{\n       dfs.setBalancerBandwidth(bandwidth);\n       System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n+    } catch (IOException ioe){\n+      System.err.println(\"Balancer bandwidth is set failed.\");\n+      throw ioe;\n     }\n     exitCode \u003d 0;\n \n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: hdfs dfsadmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    if (bandwidth \u003c 0) {\n      System.err.println(\"Bandwidth should be a non-negative integer\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    try{\n      dfs.setBalancerBandwidth(bandwidth);\n      System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n    } catch (IOException ioe){\n      System.err.println(\"Balancer bandwidth is set failed.\");\n      throw ioe;\n    }\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "68dc7c24050951f4709f7fe5363e11a003cf53eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12009. Accept human-friendly units in dfsadmin -setBalancerBandwidth and -setQuota. Contributed by Andrew Wang.\n",
      "commitDate": "22/06/17 7:57 PM",
      "commitName": "68dc7c24050951f4709f7fe5363e11a003cf53eb",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "15/06/17 2:46 PM",
      "commitNameOld": "fb68980959f95f0d89e86f91909867724ad01791",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 7.22,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n     long bandwidth;\n     int exitCode \u003d -1;\n \n     try {\n-      bandwidth \u003d Long.parseLong(argv[idx]);\n+      bandwidth \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[idx]);\n     } catch (NumberFormatException nfe) {\n       System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n       System.err.println(\"Usage: hdfs dfsadmin\"\n                   + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n       return exitCode;\n     }\n \n     if (bandwidth \u003c 0) {\n       System.err.println(\"Bandwidth should be a non-negative integer\");\n       return exitCode;\n     }\n \n     FileSystem fs \u003d getFS();\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return exitCode;\n     }\n \n     DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n     Configuration dfsConf \u003d dfs.getConf();\n     URI dfsUri \u003d dfs.getUri();\n     boolean isHaEnabled \u003d HAUtilClient.isLogicalUri(dfsConf, dfsUri);\n \n     if (isHaEnabled) {\n       String nsId \u003d dfsUri.getHost();\n       List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n           HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n           nsId, ClientProtocol.class);\n       for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n         proxy.getProxy().setBalancerBandwidth(bandwidth);\n         System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n             \" for \" + proxy.getAddress());\n       }\n     } else {\n       dfs.setBalancerBandwidth(bandwidth);\n       System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n     }\n     exitCode \u003d 0;\n \n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d StringUtils.TraditionalBinaryPrefix.string2long(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: hdfs dfsadmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    if (bandwidth \u003c 0) {\n      System.err.println(\"Bandwidth should be a non-negative integer\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    Configuration dfsConf \u003d dfs.getConf();\n    URI dfsUri \u003d dfs.getUri();\n    boolean isHaEnabled \u003d HAUtilClient.isLogicalUri(dfsConf, dfsUri);\n\n    if (isHaEnabled) {\n      String nsId \u003d dfsUri.getHost();\n      List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n          nsId, ClientProtocol.class);\n      for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n        proxy.getProxy().setBalancerBandwidth(bandwidth);\n        System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n            \" for \" + proxy.getAddress());\n      }\n    } else {\n      dfs.setBalancerBandwidth(bandwidth);\n      System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n    }\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "0bf285413f8fcaadbb2d5817fe8090f5fb0d37d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2390. dfsadmin -setBalancerBandwidth does not validate -ve value. Contributed by Gautam Gopalakrishnan.\n",
      "commitDate": "27/08/15 3:52 AM",
      "commitName": "0bf285413f8fcaadbb2d5817fe8090f5fb0d37d9",
      "commitAuthor": "Harsh J",
      "commitDateOld": "07/07/15 1:50 PM",
      "commitNameOld": "b68701b7b2a9597b4183e0ba19b1551680d543a1",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 50.58,
      "commitsBetweenForRepo": 276,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,47 @@\n   public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n     long bandwidth;\n     int exitCode \u003d -1;\n \n     try {\n       bandwidth \u003d Long.parseLong(argv[idx]);\n     } catch (NumberFormatException nfe) {\n       System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n       System.err.println(\"Usage: hdfs dfsadmin\"\n                   + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n       return exitCode;\n     }\n \n+    if (bandwidth \u003c 0) {\n+      System.err.println(\"Bandwidth should be a non-negative integer\");\n+      return exitCode;\n+    }\n+\n     FileSystem fs \u003d getFS();\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return exitCode;\n     }\n \n     DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n     Configuration dfsConf \u003d dfs.getConf();\n     URI dfsUri \u003d dfs.getUri();\n     boolean isHaEnabled \u003d HAUtilClient.isLogicalUri(dfsConf, dfsUri);\n \n     if (isHaEnabled) {\n       String nsId \u003d dfsUri.getHost();\n       List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n           HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n           nsId, ClientProtocol.class);\n       for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n         proxy.getProxy().setBalancerBandwidth(bandwidth);\n         System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n             \" for \" + proxy.getAddress());\n       }\n     } else {\n       dfs.setBalancerBandwidth(bandwidth);\n       System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n     }\n     exitCode \u003d 0;\n \n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d Long.parseLong(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: hdfs dfsadmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    if (bandwidth \u003c 0) {\n      System.err.println(\"Bandwidth should be a non-negative integer\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    Configuration dfsConf \u003d dfs.getConf();\n    URI dfsUri \u003d dfs.getUri();\n    boolean isHaEnabled \u003d HAUtilClient.isLogicalUri(dfsConf, dfsUri);\n\n    if (isHaEnabled) {\n      String nsId \u003d dfsUri.getHost();\n      List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n          nsId, ClientProtocol.class);\n      for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n        proxy.getProxy().setBalancerBandwidth(bandwidth);\n        System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n            \" for \" + proxy.getAddress());\n      }\n    } else {\n      dfs.setBalancerBandwidth(bandwidth);\n      System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n    }\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "6f8003dc7bc9e8be7b0512c514d370c303faf003": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8185. Separate client related routines in HAUtil into a new class. Contributed by Haohui Mai.\n",
      "commitDate": "21/04/15 9:59 PM",
      "commitName": "6f8003dc7bc9e8be7b0512c514d370c303faf003",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/03/15 10:38 AM",
      "commitNameOld": "5e21e4ca377f68e030f8f3436cd93fd7a74dc5e0",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 27.47,
      "commitsBetweenForRepo": 221,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n     long bandwidth;\n     int exitCode \u003d -1;\n \n     try {\n       bandwidth \u003d Long.parseLong(argv[idx]);\n     } catch (NumberFormatException nfe) {\n       System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n       System.err.println(\"Usage: hdfs dfsadmin\"\n                   + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n       return exitCode;\n     }\n \n     FileSystem fs \u003d getFS();\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return exitCode;\n     }\n \n     DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n     Configuration dfsConf \u003d dfs.getConf();\n     URI dfsUri \u003d dfs.getUri();\n-    boolean isHaEnabled \u003d HAUtil.isLogicalUri(dfsConf, dfsUri);\n+    boolean isHaEnabled \u003d HAUtilClient.isLogicalUri(dfsConf, dfsUri);\n \n     if (isHaEnabled) {\n       String nsId \u003d dfsUri.getHost();\n       List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n           HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n           nsId, ClientProtocol.class);\n       for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n         proxy.getProxy().setBalancerBandwidth(bandwidth);\n         System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n             \" for \" + proxy.getAddress());\n       }\n     } else {\n       dfs.setBalancerBandwidth(bandwidth);\n       System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n     }\n     exitCode \u003d 0;\n \n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d Long.parseLong(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: hdfs dfsadmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    Configuration dfsConf \u003d dfs.getConf();\n    URI dfsUri \u003d dfs.getUri();\n    boolean isHaEnabled \u003d HAUtilClient.isLogicalUri(dfsConf, dfsUri);\n\n    if (isHaEnabled) {\n      String nsId \u003d dfsUri.getHost();\n      List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n          nsId, ClientProtocol.class);\n      for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n        proxy.getProxy().setBalancerBandwidth(bandwidth);\n        System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n            \" for \" + proxy.getAddress());\n      }\n    } else {\n      dfs.setBalancerBandwidth(bandwidth);\n      System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n    }\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "9e941d9f99168cae01f8d50622a616fc26c196d9": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6831. Inconsistency between \u0027hdfs dfsadmin\u0027 and \u0027hdfs dfsadmin -help\u0027. (Contributed by Xiaoyu Yao)\n",
      "commitDate": "05/09/14 10:45 AM",
      "commitName": "9e941d9f99168cae01f8d50622a616fc26c196d9",
      "commitAuthor": "arp",
      "commitDateOld": "22/08/14 11:14 AM",
      "commitNameOld": "e6c36500705d3d756de82ee0ce9ff226f34b938f",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 13.98,
      "commitsBetweenForRepo": 85,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,42 @@\n   public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n     long bandwidth;\n     int exitCode \u003d -1;\n \n     try {\n       bandwidth \u003d Long.parseLong(argv[idx]);\n     } catch (NumberFormatException nfe) {\n       System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n-      System.err.println(\"Usage: java DFSAdmin\"\n+      System.err.println(\"Usage: hdfs dfsadmin\"\n                   + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n       return exitCode;\n     }\n \n     FileSystem fs \u003d getFS();\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return exitCode;\n     }\n \n     DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n     Configuration dfsConf \u003d dfs.getConf();\n     URI dfsUri \u003d dfs.getUri();\n     boolean isHaEnabled \u003d HAUtil.isLogicalUri(dfsConf, dfsUri);\n \n     if (isHaEnabled) {\n       String nsId \u003d dfsUri.getHost();\n       List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n           HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n           nsId, ClientProtocol.class);\n       for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n         proxy.getProxy().setBalancerBandwidth(bandwidth);\n         System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n             \" for \" + proxy.getAddress());\n       }\n     } else {\n       dfs.setBalancerBandwidth(bandwidth);\n       System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n     }\n     exitCode \u003d 0;\n \n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d Long.parseLong(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: hdfs dfsadmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    Configuration dfsConf \u003d dfs.getConf();\n    URI dfsUri \u003d dfs.getUri();\n    boolean isHaEnabled \u003d HAUtil.isLogicalUri(dfsConf, dfsUri);\n\n    if (isHaEnabled) {\n      String nsId \u003d dfsUri.getHost();\n      List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n          nsId, ClientProtocol.class);\n      for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n        proxy.getProxy().setBalancerBandwidth(bandwidth);\n        System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n            \" for \" + proxy.getAddress());\n      }\n    } else {\n      dfs.setBalancerBandwidth(bandwidth);\n      System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n    }\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6507. Improve DFSAdmin to support HA cluster better. (Contributd by Zesheng Wu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/06/14 10:16 PM",
      "commitName": "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "11/06/14 6:27 PM",
      "commitNameOld": "34e9173c00f7e1ae55dec365850849c793cde8e3",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 11.16,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,42 @@\n   public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n     long bandwidth;\n     int exitCode \u003d -1;\n \n     try {\n       bandwidth \u003d Long.parseLong(argv[idx]);\n     } catch (NumberFormatException nfe) {\n       System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n       System.err.println(\"Usage: java DFSAdmin\"\n                   + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n       return exitCode;\n     }\n \n     FileSystem fs \u003d getFS();\n     if (!(fs instanceof DistributedFileSystem)) {\n       System.err.println(\"FileSystem is \" + fs.getUri());\n       return exitCode;\n     }\n \n     DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-    dfs.setBalancerBandwidth(bandwidth);\n+    Configuration dfsConf \u003d dfs.getConf();\n+    URI dfsUri \u003d dfs.getUri();\n+    boolean isHaEnabled \u003d HAUtil.isLogicalUri(dfsConf, dfsUri);\n+\n+    if (isHaEnabled) {\n+      String nsId \u003d dfsUri.getHost();\n+      List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n+          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n+          nsId, ClientProtocol.class);\n+      for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n+        proxy.getProxy().setBalancerBandwidth(bandwidth);\n+        System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n+            \" for \" + proxy.getAddress());\n+      }\n+    } else {\n+      dfs.setBalancerBandwidth(bandwidth);\n+      System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n+    }\n     exitCode \u003d 0;\n \n     return exitCode;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d Long.parseLong(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: java DFSAdmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    Configuration dfsConf \u003d dfs.getConf();\n    URI dfsUri \u003d dfs.getUri();\n    boolean isHaEnabled \u003d HAUtil.isLogicalUri(dfsConf, dfsUri);\n\n    if (isHaEnabled) {\n      String nsId \u003d dfsUri.getHost();\n      List\u003cProxyAndInfo\u003cClientProtocol\u003e\u003e proxies \u003d\n          HAUtil.getProxiesForAllNameNodesInNameservice(dfsConf,\n          nsId, ClientProtocol.class);\n      for (ProxyAndInfo\u003cClientProtocol\u003e proxy : proxies) {\n        proxy.getProxy().setBalancerBandwidth(bandwidth);\n        System.out.println(\"Balancer bandwidth is set to \" + bandwidth +\n            \" for \" + proxy.getAddress());\n      }\n    } else {\n      dfs.setBalancerBandwidth(bandwidth);\n      System.out.println(\"Balancer bandwidth is set to \" + bandwidth);\n    }\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d Long.parseLong(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: java DFSAdmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    dfs.setBalancerBandwidth(bandwidth);\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d Long.parseLong(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: java DFSAdmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    dfs.setBalancerBandwidth(bandwidth);\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
      }
    },
    "8390152d08306caad31b78abbd509e5ea8580671": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2202. Add a new DFSAdmin command to set balancer bandwidth of datanodes without restarting.  Contributed by Eric Payne\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152401 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 5:10 PM",
      "commitName": "8390152d08306caad31b78abbd509e5ea8580671",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,25 @@\n+  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n+    long bandwidth;\n+    int exitCode \u003d -1;\n+\n+    try {\n+      bandwidth \u003d Long.parseLong(argv[idx]);\n+    } catch (NumberFormatException nfe) {\n+      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n+      System.err.println(\"Usage: java DFSAdmin\"\n+                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n+      return exitCode;\n+    }\n+\n+    FileSystem fs \u003d getFS();\n+    if (!(fs instanceof DistributedFileSystem)) {\n+      System.err.println(\"FileSystem is \" + fs.getUri());\n+      return exitCode;\n+    }\n+\n+    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n+    dfs.setBalancerBandwidth(bandwidth);\n+    exitCode \u003d 0;\n+\n+    return exitCode;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int setBalancerBandwidth(String[] argv, int idx) throws IOException {\n    long bandwidth;\n    int exitCode \u003d -1;\n\n    try {\n      bandwidth \u003d Long.parseLong(argv[idx]);\n    } catch (NumberFormatException nfe) {\n      System.err.println(\"NumberFormatException: \" + nfe.getMessage());\n      System.err.println(\"Usage: java DFSAdmin\"\n                  + \" [-setBalancerBandwidth \u003cbandwidth in bytes per second\u003e]\");\n      return exitCode;\n    }\n\n    FileSystem fs \u003d getFS();\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"FileSystem is \" + fs.getUri());\n      return exitCode;\n    }\n\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n    dfs.setBalancerBandwidth(bandwidth);\n    exitCode \u003d 0;\n\n    return exitCode;\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/tools/DFSAdmin.java"
    }
  }
}