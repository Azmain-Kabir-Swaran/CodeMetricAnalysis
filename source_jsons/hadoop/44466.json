{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "onContainerStatusReceived",
  "functionId": "onContainerStatusReceived___containerId-ContainerId__containerStatus-ContainerStatus",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
  "functionStartLine": 1307,
  "functionEndLine": 1329,
  "numCommitsSeen": 113,
  "timeTaken": 2964,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "928964102029e96406f5482e8900802f38164501",
    "b503b6a07d7210c94657131dcd97239012ecb313"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "928964102029e96406f5482e8900802f38164501": "Ybodychange",
    "b503b6a07d7210c94657131dcd97239012ecb313": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "31/01/19 11:24 AM",
      "commitNameOld": "f738b397ae021c9be900e4ec51ab55cd69b075e0",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 43.16,
      "commitsBetweenForRepo": 374,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,23 @@\n     public void onContainerStatusReceived(ContainerId containerId,\n         ContainerStatus containerStatus) {\n-      if (LOG.isDebugEnabled()) {\n-        LOG.debug(\"Container Status: id\u003d\" + containerId + \", status\u003d\" +\n-            containerStatus);\n-      }\n+      LOG.debug(\"Container Status: id\u003d{}, status\u003d{}\", containerId,\n+          containerStatus);\n \n       // If promote_opportunistic_after_start is set, automatically promote\n       // opportunistic containers to guaranteed.\n       if (autoPromoteContainers) {\n         if (containerStatus.getState() \u003d\u003d ContainerState.RUNNING) {\n           Container container \u003d containers.get(containerId);\n           if (container.getExecutionType() \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n             // Promote container\n             LOG.info(\"Promoting container {} to {}\", container.getId(),\n                 container.getExecutionType());\n             UpdateContainerRequest updateRequest \u003d UpdateContainerRequest\n                 .newInstance(container.getVersion(), container.getId(),\n                     ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null,\n                     ExecutionType.GUARANTEED);\n             amRMClient.requestContainerUpdate(container, updateRequest);\n           }\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainerStatusReceived(ContainerId containerId,\n        ContainerStatus containerStatus) {\n      LOG.debug(\"Container Status: id\u003d{}, status\u003d{}\", containerId,\n          containerStatus);\n\n      // If promote_opportunistic_after_start is set, automatically promote\n      // opportunistic containers to guaranteed.\n      if (autoPromoteContainers) {\n        if (containerStatus.getState() \u003d\u003d ContainerState.RUNNING) {\n          Container container \u003d containers.get(containerId);\n          if (container.getExecutionType() \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n            // Promote container\n            LOG.info(\"Promoting container {} to {}\", container.getId(),\n                container.getExecutionType());\n            UpdateContainerRequest updateRequest \u003d UpdateContainerRequest\n                .newInstance(container.getVersion(), container.getId(),\n                    ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null,\n                    ExecutionType.GUARANTEED);\n            amRMClient.requestContainerUpdate(container, updateRequest);\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "928964102029e96406f5482e8900802f38164501": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7617. Add a flag in distributed shell to automatically PROMOTE opportunistic containers to guaranteed once they are started. Contributed by Weiwei Yang.\n",
      "commitDate": "17/12/17 6:07 PM",
      "commitName": "928964102029e96406f5482e8900802f38164501",
      "commitAuthor": "Weiwei Yang",
      "commitDateOld": "06/12/17 1:52 AM",
      "commitNameOld": "40b0045ebe0752cd3d1d09be00acbabdea983799",
      "commitAuthorOld": "Weiwei Yang",
      "daysBetweenCommits": 11.68,
      "commitsBetweenForRepo": 113,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,7 +1,25 @@\n     public void onContainerStatusReceived(ContainerId containerId,\n         ContainerStatus containerStatus) {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\"Container Status: id\u003d\" + containerId + \", status\u003d\" +\n             containerStatus);\n       }\n+\n+      // If promote_opportunistic_after_start is set, automatically promote\n+      // opportunistic containers to guaranteed.\n+      if (autoPromoteContainers) {\n+        if (containerStatus.getState() \u003d\u003d ContainerState.RUNNING) {\n+          Container container \u003d containers.get(containerId);\n+          if (container.getExecutionType() \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n+            // Promote container\n+            LOG.info(\"Promoting container {} to {}\", container.getId(),\n+                container.getExecutionType());\n+            UpdateContainerRequest updateRequest \u003d UpdateContainerRequest\n+                .newInstance(container.getVersion(), container.getId(),\n+                    ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null,\n+                    ExecutionType.GUARANTEED);\n+            amRMClient.requestContainerUpdate(container, updateRequest);\n+          }\n+        }\n+      }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainerStatusReceived(ContainerId containerId,\n        ContainerStatus containerStatus) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: id\u003d\" + containerId + \", status\u003d\" +\n            containerStatus);\n      }\n\n      // If promote_opportunistic_after_start is set, automatically promote\n      // opportunistic containers to guaranteed.\n      if (autoPromoteContainers) {\n        if (containerStatus.getState() \u003d\u003d ContainerState.RUNNING) {\n          Container container \u003d containers.get(containerId);\n          if (container.getExecutionType() \u003d\u003d ExecutionType.OPPORTUNISTIC) {\n            // Promote container\n            LOG.info(\"Promoting container {} to {}\", container.getId(),\n                container.getExecutionType());\n            UpdateContainerRequest updateRequest \u003d UpdateContainerRequest\n                .newInstance(container.getVersion(), container.getId(),\n                    ContainerUpdateType.PROMOTE_EXECUTION_TYPE, null,\n                    ExecutionType.GUARANTEED);\n            amRMClient.requestContainerUpdate(container, updateRequest);\n          }\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java",
      "extendedDetails": {}
    },
    "b503b6a07d7210c94657131dcd97239012ecb313": {
      "type": "Yintroduced",
      "commitMessage": "YARN-639. Modified Distributed Shell application to start using the new NMClient library. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1493280 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/06/13 4:18 PM",
      "commitName": "b503b6a07d7210c94657131dcd97239012ecb313",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,7 @@\n+    public void onContainerStatusReceived(ContainerId containerId,\n+        ContainerStatus containerStatus) {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\"Container Status: id\u003d\" + containerId + \", status\u003d\" +\n+            containerStatus);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainerStatusReceived(ContainerId containerId,\n        ContainerStatus containerStatus) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Container Status: id\u003d\" + containerId + \", status\u003d\" +\n            containerStatus);\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-applications-distributedshell/src/main/java/org/apache/hadoop/yarn/applications/distributedshell/ApplicationMaster.java"
    }
  }
}