{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerLinuxContainerRuntime.java",
  "functionName": "handleContainerKill",
  "functionId": "handleContainerKill___ctx-ContainerRuntimeContext__env-Map__String,String____signal-ContainerExecutor.Signal",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
  "functionStartLine": 1290,
  "functionEndLine": 1346,
  "numCommitsSeen": 150,
  "timeTaken": 5139,
  "changeHistory": [
    "31e0122f4d4ddc4026470b45d2bf683ece137d44",
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
    "7526815e3234ca352854ecfb142a13f1a188d5bd",
    "5f11288e41fca2e414dcbea130c7702e29d4d610",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395"
  ],
  "changeHistoryShort": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": "Ybodychange",
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": "Ybodychange",
    "7526815e3234ca352854ecfb142a13f1a188d5bd": "Ybodychange",
    "5f11288e41fca2e414dcbea130c7702e29d4d610": "Ymultichange(Yparameterchange,Ybodychange)",
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": "Ybodychange",
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": "Yintroduced"
  },
  "changeHistoryDetails": {
    "31e0122f4d4ddc4026470b45d2bf683ece137d44": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9860. Enable service mode for Docker containers on YARN\n           Contributed by Prabhu Joseph and Shane Kumpf\n",
      "commitDate": "10/10/19 4:02 PM",
      "commitName": "31e0122f4d4ddc4026470b45d2bf683ece137d44",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "28/06/19 2:18 PM",
      "commitNameOld": "29465bf169a7e348a4f32265083450faf66d5631",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 104.07,
      "commitsBetweenForRepo": 873,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,57 @@\n   private void handleContainerKill(ContainerRuntimeContext ctx,\n       Map\u003cString, String\u003e env,\n       ContainerExecutor.Signal signal) throws ContainerExecutionException {\n     Container container \u003d ctx.getContainer();\n \n     ContainerVolumePublisher publisher \u003d new ContainerVolumePublisher(\n         container, container.getCsiVolumesRootDir(), this);\n     try {\n       publisher.unpublishVolumes();\n     } catch (YarnException | IOException e) {\n       throw new ContainerExecutionException(e);\n     }\n \n+    boolean serviceMode \u003d Boolean.parseBoolean(env.get(\n+        ENV_DOCKER_CONTAINER_DOCKER_SERVICE_MODE));\n+\n     // Only need to check whether the container was asked to be privileged.\n     // If the container had failed the permissions checks upon launch, it\n     // would have never been launched and thus we wouldn\u0027t be here\n     // attempting to signal it.\n-    if (isContainerRequestedAsPrivileged(container)) {\n+    if (isContainerRequestedAsPrivileged(container) || serviceMode) {\n       String containerId \u003d container.getContainerId().toString();\n       DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n           DockerCommandExecutor.getContainerStatus(containerId,\n           privilegedOperationExecutor, nmContext);\n       if (DockerCommandExecutor.isKillable(containerStatus)) {\n         DockerKillCommand dockerKillCommand \u003d\n             new DockerKillCommand(containerId).setSignal(signal.name());\n         DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n             containerId, env, privilegedOperationExecutor, false, nmContext);\n       } else {\n         LOG.debug(\n             \"Container status is {}, skipping kill - {}\",\n             containerStatus.getName(), containerId);\n       }\n     } else {\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n       privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n           ctx.getExecutionAttribute(USER),\n           Integer.toString(PrivilegedOperation.RunAsUserCommand\n           .SIGNAL_CONTAINER.getValue()),\n           ctx.getExecutionAttribute(PID),\n           Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n       privOp.disableFailureLogging();\n       try {\n         privilegedOperationExecutor.executePrivilegedOperation(null,\n             privOp, null, null, false, false);\n       } catch (PrivilegedOperationException e) {\n         //Don\u0027t log the failure here. Some kinds of signaling failures are\n         // acceptable. Let the calling executor decide what to do.\n         throw new ContainerExecutionException(\"Signal container failed using \"\n             + \"signal: \" + signal.name(), e\n             .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerKill(ContainerRuntimeContext ctx,\n      Map\u003cString, String\u003e env,\n      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n\n    ContainerVolumePublisher publisher \u003d new ContainerVolumePublisher(\n        container, container.getCsiVolumesRootDir(), this);\n    try {\n      publisher.unpublishVolumes();\n    } catch (YarnException | IOException e) {\n      throw new ContainerExecutionException(e);\n    }\n\n    boolean serviceMode \u003d Boolean.parseBoolean(env.get(\n        ENV_DOCKER_CONTAINER_DOCKER_SERVICE_MODE));\n\n    // Only need to check whether the container was asked to be privileged.\n    // If the container had failed the permissions checks upon launch, it\n    // would have never been launched and thus we wouldn\u0027t be here\n    // attempting to signal it.\n    if (isContainerRequestedAsPrivileged(container) || serviceMode) {\n      String containerId \u003d container.getContainerId().toString();\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId,\n          privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isKillable(containerStatus)) {\n        DockerKillCommand dockerKillCommand \u003d\n            new DockerKillCommand(containerId).setSignal(signal.name());\n        DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n            containerId, env, privilegedOperationExecutor, false, nmContext);\n      } else {\n        LOG.debug(\n            \"Container status is {}, skipping kill - {}\",\n            containerStatus.getName(), containerId);\n      }\n    } else {\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n      privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n          ctx.getExecutionAttribute(USER),\n          Integer.toString(PrivilegedOperation.RunAsUserCommand\n          .SIGNAL_CONTAINER.getValue()),\n          ctx.getExecutionAttribute(PID),\n          Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n      privOp.disableFailureLogging();\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            privOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        //Don\u0027t log the failure here. Some kinds of signaling failures are\n        // acceptable. Let the calling executor decide what to do.\n        throw new ContainerExecutionException(\"Signal container failed using \"\n            + \"signal: \" + signal.name(), e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "f4906ac01960c78ff0c91797eaa4b36d80f6826d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9038. [CSI] Add ability to publish/unpublish volumes on node managers. Contributed by Weiwei Yang.\n",
      "commitDate": "03/01/19 10:40 PM",
      "commitName": "f4906ac01960c78ff0c91797eaa4b36d80f6826d",
      "commitAuthor": "Sunil G",
      "commitDateOld": "21/12/18 4:44 PM",
      "commitNameOld": "f82922dcfae0b7e3e68ce970c441d8b7edc59acf",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 13.25,
      "commitsBetweenForRepo": 74,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,54 @@\n   private void handleContainerKill(ContainerRuntimeContext ctx,\n       Map\u003cString, String\u003e env,\n       ContainerExecutor.Signal signal) throws ContainerExecutionException {\n     Container container \u003d ctx.getContainer();\n \n+    ContainerVolumePublisher publisher \u003d new ContainerVolumePublisher(\n+        container, container.getCsiVolumesRootDir(), this);\n+    try {\n+      publisher.unpublishVolumes();\n+    } catch (YarnException | IOException e) {\n+      throw new ContainerExecutionException(e);\n+    }\n+\n     // Only need to check whether the container was asked to be privileged.\n     // If the container had failed the permissions checks upon launch, it\n     // would have never been launched and thus we wouldn\u0027t be here\n     // attempting to signal it.\n     if (isContainerRequestedAsPrivileged(container)) {\n       String containerId \u003d container.getContainerId().toString();\n       DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n           DockerCommandExecutor.getContainerStatus(containerId,\n           privilegedOperationExecutor, nmContext);\n       if (DockerCommandExecutor.isKillable(containerStatus)) {\n         DockerKillCommand dockerKillCommand \u003d\n             new DockerKillCommand(containerId).setSignal(signal.name());\n         DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n             containerId, env, privilegedOperationExecutor, false, nmContext);\n       } else {\n         LOG.debug(\n             \"Container status is {}, skipping kill - {}\",\n             containerStatus.getName(), containerId);\n       }\n     } else {\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n       privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n           ctx.getExecutionAttribute(USER),\n           Integer.toString(PrivilegedOperation.RunAsUserCommand\n           .SIGNAL_CONTAINER.getValue()),\n           ctx.getExecutionAttribute(PID),\n           Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n       privOp.disableFailureLogging();\n       try {\n         privilegedOperationExecutor.executePrivilegedOperation(null,\n             privOp, null, null, false, false);\n       } catch (PrivilegedOperationException e) {\n         //Don\u0027t log the failure here. Some kinds of signaling failures are\n         // acceptable. Let the calling executor decide what to do.\n         throw new ContainerExecutionException(\"Signal container failed using \"\n             + \"signal: \" + signal.name(), e\n             .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerKill(ContainerRuntimeContext ctx,\n      Map\u003cString, String\u003e env,\n      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n\n    ContainerVolumePublisher publisher \u003d new ContainerVolumePublisher(\n        container, container.getCsiVolumesRootDir(), this);\n    try {\n      publisher.unpublishVolumes();\n    } catch (YarnException | IOException e) {\n      throw new ContainerExecutionException(e);\n    }\n\n    // Only need to check whether the container was asked to be privileged.\n    // If the container had failed the permissions checks upon launch, it\n    // would have never been launched and thus we wouldn\u0027t be here\n    // attempting to signal it.\n    if (isContainerRequestedAsPrivileged(container)) {\n      String containerId \u003d container.getContainerId().toString();\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId,\n          privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isKillable(containerStatus)) {\n        DockerKillCommand dockerKillCommand \u003d\n            new DockerKillCommand(containerId).setSignal(signal.name());\n        DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n            containerId, env, privilegedOperationExecutor, false, nmContext);\n      } else {\n        LOG.debug(\n            \"Container status is {}, skipping kill - {}\",\n            containerStatus.getName(), containerId);\n      }\n    } else {\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n      privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n          ctx.getExecutionAttribute(USER),\n          Integer.toString(PrivilegedOperation.RunAsUserCommand\n          .SIGNAL_CONTAINER.getValue()),\n          ctx.getExecutionAttribute(PID),\n          Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n      privOp.disableFailureLogging();\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            privOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        //Don\u0027t log the failure here. Some kinds of signaling failures are\n        // acceptable. Let the calling executor decide what to do.\n        throw new ContainerExecutionException(\"Signal container failed using \"\n            + \"signal: \" + signal.name(), e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "7526815e3234ca352854ecfb142a13f1a188d5bd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8263. DockerClient still touches hadoop.tmp.dir. Contributed by Craig Condit\n",
      "commitDate": "02/08/18 8:43 AM",
      "commitName": "7526815e3234ca352854ecfb142a13f1a188d5bd",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "23/07/18 5:12 PM",
      "commitNameOld": "8688a0c7f88f2adf1a7fce695e06f3dd1f745080",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 9.65,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n   private void handleContainerKill(ContainerRuntimeContext ctx,\n       Map\u003cString, String\u003e env,\n       ContainerExecutor.Signal signal) throws ContainerExecutionException {\n     Container container \u003d ctx.getContainer();\n \n     // Only need to check whether the container was asked to be privileged.\n     // If the container had failed the permissions checks upon launch, it\n     // would have never been launched and thus we wouldn\u0027t be here\n     // attempting to signal it.\n     if (isContainerRequestedAsPrivileged(container)) {\n       String containerId \u003d container.getContainerId().toString();\n       DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-          DockerCommandExecutor.getContainerStatus(containerId, conf,\n+          DockerCommandExecutor.getContainerStatus(containerId,\n           privilegedOperationExecutor, nmContext);\n       if (DockerCommandExecutor.isKillable(containerStatus)) {\n         DockerKillCommand dockerKillCommand \u003d\n             new DockerKillCommand(containerId).setSignal(signal.name());\n         DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n-            containerId, env, conf, privilegedOperationExecutor, false,\n-            nmContext);\n+            containerId, env, privilegedOperationExecutor, false, nmContext);\n       } else {\n         LOG.debug(\n             \"Container status is {}, skipping kill - {}\",\n             containerStatus.getName(), containerId);\n       }\n     } else {\n       PrivilegedOperation privOp \u003d new PrivilegedOperation(\n           PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n       privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n           ctx.getExecutionAttribute(USER),\n           Integer.toString(PrivilegedOperation.RunAsUserCommand\n           .SIGNAL_CONTAINER.getValue()),\n           ctx.getExecutionAttribute(PID),\n           Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n       privOp.disableFailureLogging();\n       try {\n         privilegedOperationExecutor.executePrivilegedOperation(null,\n             privOp, null, null, false, false);\n       } catch (PrivilegedOperationException e) {\n         //Don\u0027t log the failure here. Some kinds of signaling failures are\n         // acceptable. Let the calling executor decide what to do.\n         throw new ContainerExecutionException(\"Signal container failed using \"\n             + \"signal: \" + signal.name(), e\n             .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerKill(ContainerRuntimeContext ctx,\n      Map\u003cString, String\u003e env,\n      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n\n    // Only need to check whether the container was asked to be privileged.\n    // If the container had failed the permissions checks upon launch, it\n    // would have never been launched and thus we wouldn\u0027t be here\n    // attempting to signal it.\n    if (isContainerRequestedAsPrivileged(container)) {\n      String containerId \u003d container.getContainerId().toString();\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId,\n          privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isKillable(containerStatus)) {\n        DockerKillCommand dockerKillCommand \u003d\n            new DockerKillCommand(containerId).setSignal(signal.name());\n        DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n            containerId, env, privilegedOperationExecutor, false, nmContext);\n      } else {\n        LOG.debug(\n            \"Container status is {}, skipping kill - {}\",\n            containerStatus.getName(), containerId);\n      }\n    } else {\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n      privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n          ctx.getExecutionAttribute(USER),\n          Integer.toString(PrivilegedOperation.RunAsUserCommand\n          .SIGNAL_CONTAINER.getValue()),\n          ctx.getExecutionAttribute(PID),\n          Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n      privOp.disableFailureLogging();\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            privOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        //Don\u0027t log the failure here. Some kinds of signaling failures are\n        // acceptable. Let the calling executor decide what to do.\n        throw new ContainerExecutionException(\"Signal container failed using \"\n            + \"signal: \" + signal.name(), e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "5f11288e41fca2e414dcbea130c7702e29d4d610": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8206. Sending a kill does not immediately kill docker containers. Contributed by Eric Badger\n",
      "commitDate": "22/05/18 7:27 AM",
      "commitName": "5f11288e41fca2e414dcbea130c7702e29d4d610",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8206. Sending a kill does not immediately kill docker containers. Contributed by Eric Badger\n",
          "commitDate": "22/05/18 7:27 AM",
          "commitName": "5f11288e41fca2e414dcbea130c7702e29d4d610",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "17/05/18 2:29 PM",
          "commitNameOld": "d45a0b7d73519acb78cd94ac3186bd8481f6c13e",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 4.71,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,47 @@\n-  private void handleContainerKill(String containerId, Map\u003cString, String\u003e env,\n+  private void handleContainerKill(ContainerRuntimeContext ctx,\n+      Map\u003cString, String\u003e env,\n       ContainerExecutor.Signal signal) throws ContainerExecutionException {\n-    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-        DockerCommandExecutor.getContainerStatus(containerId, conf,\n-            privilegedOperationExecutor, nmContext);\n-    if (DockerCommandExecutor.isKillable(containerStatus)) {\n-      DockerKillCommand dockerKillCommand \u003d\n-          new DockerKillCommand(containerId).setSignal(signal.name());\n-      DockerCommandExecutor.executeDockerCommand(dockerKillCommand, containerId,\n-          env, conf, privilegedOperationExecutor, false, nmContext);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n+    Container container \u003d ctx.getContainer();\n+\n+    // Only need to check whether the container was asked to be privileged.\n+    // If the container had failed the permissions checks upon launch, it\n+    // would have never been launched and thus we wouldn\u0027t be here\n+    // attempting to signal it.\n+    if (isContainerRequestedAsPrivileged(container)) {\n+      String containerId \u003d container.getContainerId().toString();\n+      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n+          DockerCommandExecutor.getContainerStatus(containerId, conf,\n+          privilegedOperationExecutor, nmContext);\n+      if (DockerCommandExecutor.isKillable(containerStatus)) {\n+        DockerKillCommand dockerKillCommand \u003d\n+            new DockerKillCommand(containerId).setSignal(signal.name());\n+        DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n+            containerId, env, conf, privilegedOperationExecutor, false,\n+            nmContext);\n+      } else {\n         LOG.debug(\n-            \"Container status is \" + containerStatus.getName()\n-                + \", skipping kill - \" + containerId);\n+            \"Container status is {}, skipping kill - {}\",\n+            containerStatus.getName(), containerId);\n+      }\n+    } else {\n+      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n+          PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n+      privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n+          ctx.getExecutionAttribute(USER),\n+          Integer.toString(PrivilegedOperation.RunAsUserCommand\n+          .SIGNAL_CONTAINER.getValue()),\n+          ctx.getExecutionAttribute(PID),\n+          Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n+      privOp.disableFailureLogging();\n+      try {\n+        privilegedOperationExecutor.executePrivilegedOperation(null,\n+            privOp, null, null, false, false);\n+      } catch (PrivilegedOperationException e) {\n+        //Don\u0027t log the failure here. Some kinds of signaling failures are\n+        // acceptable. Let the calling executor decide what to do.\n+        throw new ContainerExecutionException(\"Signal container failed using \"\n+            + \"signal: \" + signal.name(), e\n+            .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleContainerKill(ContainerRuntimeContext ctx,\n      Map\u003cString, String\u003e env,\n      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n\n    // Only need to check whether the container was asked to be privileged.\n    // If the container had failed the permissions checks upon launch, it\n    // would have never been launched and thus we wouldn\u0027t be here\n    // attempting to signal it.\n    if (isContainerRequestedAsPrivileged(container)) {\n      String containerId \u003d container.getContainerId().toString();\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId, conf,\n          privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isKillable(containerStatus)) {\n        DockerKillCommand dockerKillCommand \u003d\n            new DockerKillCommand(containerId).setSignal(signal.name());\n        DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n            containerId, env, conf, privilegedOperationExecutor, false,\n            nmContext);\n      } else {\n        LOG.debug(\n            \"Container status is {}, skipping kill - {}\",\n            containerStatus.getName(), containerId);\n      }\n    } else {\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n      privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n          ctx.getExecutionAttribute(USER),\n          Integer.toString(PrivilegedOperation.RunAsUserCommand\n          .SIGNAL_CONTAINER.getValue()),\n          ctx.getExecutionAttribute(PID),\n          Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n      privOp.disableFailureLogging();\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            privOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        //Don\u0027t log the failure here. Some kinds of signaling failures are\n        // acceptable. Let the calling executor decide what to do.\n        throw new ContainerExecutionException(\"Signal container failed using \"\n            + \"signal: \" + signal.name(), e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {
            "oldValue": "[containerId-String, env-Map\u003cString,String\u003e, signal-ContainerExecutor.Signal]",
            "newValue": "[ctx-ContainerRuntimeContext, env-Map\u003cString,String\u003e, signal-ContainerExecutor.Signal]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8206. Sending a kill does not immediately kill docker containers. Contributed by Eric Badger\n",
          "commitDate": "22/05/18 7:27 AM",
          "commitName": "5f11288e41fca2e414dcbea130c7702e29d4d610",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "17/05/18 2:29 PM",
          "commitNameOld": "d45a0b7d73519acb78cd94ac3186bd8481f6c13e",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 4.71,
          "commitsBetweenForRepo": 25,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,47 @@\n-  private void handleContainerKill(String containerId, Map\u003cString, String\u003e env,\n+  private void handleContainerKill(ContainerRuntimeContext ctx,\n+      Map\u003cString, String\u003e env,\n       ContainerExecutor.Signal signal) throws ContainerExecutionException {\n-    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n-        DockerCommandExecutor.getContainerStatus(containerId, conf,\n-            privilegedOperationExecutor, nmContext);\n-    if (DockerCommandExecutor.isKillable(containerStatus)) {\n-      DockerKillCommand dockerKillCommand \u003d\n-          new DockerKillCommand(containerId).setSignal(signal.name());\n-      DockerCommandExecutor.executeDockerCommand(dockerKillCommand, containerId,\n-          env, conf, privilegedOperationExecutor, false, nmContext);\n-    } else {\n-      if (LOG.isDebugEnabled()) {\n+    Container container \u003d ctx.getContainer();\n+\n+    // Only need to check whether the container was asked to be privileged.\n+    // If the container had failed the permissions checks upon launch, it\n+    // would have never been launched and thus we wouldn\u0027t be here\n+    // attempting to signal it.\n+    if (isContainerRequestedAsPrivileged(container)) {\n+      String containerId \u003d container.getContainerId().toString();\n+      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n+          DockerCommandExecutor.getContainerStatus(containerId, conf,\n+          privilegedOperationExecutor, nmContext);\n+      if (DockerCommandExecutor.isKillable(containerStatus)) {\n+        DockerKillCommand dockerKillCommand \u003d\n+            new DockerKillCommand(containerId).setSignal(signal.name());\n+        DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n+            containerId, env, conf, privilegedOperationExecutor, false,\n+            nmContext);\n+      } else {\n         LOG.debug(\n-            \"Container status is \" + containerStatus.getName()\n-                + \", skipping kill - \" + containerId);\n+            \"Container status is {}, skipping kill - {}\",\n+            containerStatus.getName(), containerId);\n+      }\n+    } else {\n+      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n+          PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n+      privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n+          ctx.getExecutionAttribute(USER),\n+          Integer.toString(PrivilegedOperation.RunAsUserCommand\n+          .SIGNAL_CONTAINER.getValue()),\n+          ctx.getExecutionAttribute(PID),\n+          Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n+      privOp.disableFailureLogging();\n+      try {\n+        privilegedOperationExecutor.executePrivilegedOperation(null,\n+            privOp, null, null, false, false);\n+      } catch (PrivilegedOperationException e) {\n+        //Don\u0027t log the failure here. Some kinds of signaling failures are\n+        // acceptable. Let the calling executor decide what to do.\n+        throw new ContainerExecutionException(\"Signal container failed using \"\n+            + \"signal: \" + signal.name(), e\n+            .getExitCode(), e.getOutput(), e.getErrorOutput());\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void handleContainerKill(ContainerRuntimeContext ctx,\n      Map\u003cString, String\u003e env,\n      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n    Container container \u003d ctx.getContainer();\n\n    // Only need to check whether the container was asked to be privileged.\n    // If the container had failed the permissions checks upon launch, it\n    // would have never been launched and thus we wouldn\u0027t be here\n    // attempting to signal it.\n    if (isContainerRequestedAsPrivileged(container)) {\n      String containerId \u003d container.getContainerId().toString();\n      DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n          DockerCommandExecutor.getContainerStatus(containerId, conf,\n          privilegedOperationExecutor, nmContext);\n      if (DockerCommandExecutor.isKillable(containerStatus)) {\n        DockerKillCommand dockerKillCommand \u003d\n            new DockerKillCommand(containerId).setSignal(signal.name());\n        DockerCommandExecutor.executeDockerCommand(dockerKillCommand,\n            containerId, env, conf, privilegedOperationExecutor, false,\n            nmContext);\n      } else {\n        LOG.debug(\n            \"Container status is {}, skipping kill - {}\",\n            containerStatus.getName(), containerId);\n      }\n    } else {\n      PrivilegedOperation privOp \u003d new PrivilegedOperation(\n          PrivilegedOperation.OperationType.SIGNAL_CONTAINER);\n      privOp.appendArgs(ctx.getExecutionAttribute(RUN_AS_USER),\n          ctx.getExecutionAttribute(USER),\n          Integer.toString(PrivilegedOperation.RunAsUserCommand\n          .SIGNAL_CONTAINER.getValue()),\n          ctx.getExecutionAttribute(PID),\n          Integer.toString(ctx.getExecutionAttribute(SIGNAL).getValue()));\n      privOp.disableFailureLogging();\n      try {\n        privilegedOperationExecutor.executePrivilegedOperation(null,\n            privOp, null, null, false, false);\n      } catch (PrivilegedOperationException e) {\n        //Don\u0027t log the failure here. Some kinds of signaling failures are\n        // acceptable. Let the calling executor decide what to do.\n        throw new ContainerExecutionException(\"Signal container failed using \"\n            + \"signal: \" + signal.name(), e\n            .getExitCode(), e.getOutput(), e.getErrorOutput());\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
          "extendedDetails": {}
        }
      ]
    },
    "85585f9eef26baded5b3ef7fcc3283aa37fc362d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8064.  Bugfix for clean up container-executor cmd helper file.\n            Contributed by Eric Badger\n",
      "commitDate": "20/04/18 10:49 AM",
      "commitName": "85585f9eef26baded5b3ef7fcc3283aa37fc362d",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "11/04/18 11:24 AM",
      "commitNameOld": "933477e9e0526e2ed81ea454f8806de31981822a",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 8.98,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   private void handleContainerKill(String containerId, Map\u003cString, String\u003e env,\n       ContainerExecutor.Signal signal) throws ContainerExecutionException {\n     DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n         DockerCommandExecutor.getContainerStatus(containerId, conf,\n-            privilegedOperationExecutor);\n+            privilegedOperationExecutor, nmContext);\n     if (DockerCommandExecutor.isKillable(containerStatus)) {\n       DockerKillCommand dockerKillCommand \u003d\n           new DockerKillCommand(containerId).setSignal(signal.name());\n       DockerCommandExecutor.executeDockerCommand(dockerKillCommand, containerId,\n-          env, conf, privilegedOperationExecutor, false);\n+          env, conf, privilegedOperationExecutor, false, nmContext);\n     } else {\n       if (LOG.isDebugEnabled()) {\n         LOG.debug(\n             \"Container status is \" + containerStatus.getName()\n                 + \", skipping kill - \" + containerId);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerKill(String containerId, Map\u003cString, String\u003e env,\n      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerId, conf,\n            privilegedOperationExecutor, nmContext);\n    if (DockerCommandExecutor.isKillable(containerStatus)) {\n      DockerKillCommand dockerKillCommand \u003d\n          new DockerKillCommand(containerId).setSignal(signal.name());\n      DockerCommandExecutor.executeDockerCommand(dockerKillCommand, containerId,\n          env, conf, privilegedOperationExecutor, false, nmContext);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Container status is \" + containerStatus.getName()\n                + \", skipping kill - \" + containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java",
      "extendedDetails": {}
    },
    "3d65dbe032e202361d613344ccc6d9c5f99ba395": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5366. Improve signal handling and delete delay for Docker on Yarn.\n           (Contributed by Shane Kumpf)\n",
      "commitDate": "12/01/18 10:41 AM",
      "commitName": "3d65dbe032e202361d613344ccc6d9c5f99ba395",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,18 @@\n+  private void handleContainerKill(String containerId, Map\u003cString, String\u003e env,\n+      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n+    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n+        DockerCommandExecutor.getContainerStatus(containerId, conf,\n+            privilegedOperationExecutor);\n+    if (DockerCommandExecutor.isKillable(containerStatus)) {\n+      DockerKillCommand dockerKillCommand \u003d\n+          new DockerKillCommand(containerId).setSignal(signal.name());\n+      DockerCommandExecutor.executeDockerCommand(dockerKillCommand, containerId,\n+          env, conf, privilegedOperationExecutor, false);\n+    } else {\n+      if (LOG.isDebugEnabled()) {\n+        LOG.debug(\n+            \"Container status is \" + containerStatus.getName()\n+                + \", skipping kill - \" + containerId);\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void handleContainerKill(String containerId, Map\u003cString, String\u003e env,\n      ContainerExecutor.Signal signal) throws ContainerExecutionException {\n    DockerCommandExecutor.DockerContainerStatus containerStatus \u003d\n        DockerCommandExecutor.getContainerStatus(containerId, conf,\n            privilegedOperationExecutor);\n    if (DockerCommandExecutor.isKillable(containerStatus)) {\n      DockerKillCommand dockerKillCommand \u003d\n          new DockerKillCommand(containerId).setSignal(signal.name());\n      DockerCommandExecutor.executeDockerCommand(dockerKillCommand, containerId,\n          env, conf, privilegedOperationExecutor, false);\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\n            \"Container status is \" + containerStatus.getName()\n                + \", skipping kill - \" + containerId);\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/runtime/DockerLinuxContainerRuntime.java"
    }
  }
}