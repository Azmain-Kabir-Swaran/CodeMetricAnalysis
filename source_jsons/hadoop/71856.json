{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyAuthorizationKeyProvider.java",
  "functionName": "createKey",
  "functionId": "createKey___name-String__material-byte[]__options-Options",
  "sourceFilePath": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
  "functionStartLine": 167,
  "functionEndLine": 176,
  "numCommitsSeen": 10,
  "timeTaken": 857,
  "changeHistory": [
    "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
    "b02a4b40610e93eef6559db09a11d287e859446d"
  ],
  "changeHistoryShort": {
    "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c": "Ybodychange",
    "b02a4b40610e93eef6559db09a11d287e859446d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11337. KeyAuthorizationKeyProvider access checks need to be done atomically. Contributed by Dian Fu.\n",
      "commitDate": "01/12/14 9:21 PM",
      "commitName": "9fa29902575ac3774bf3728e7bcde7f3eefb1d4c",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "24/11/14 9:08 AM",
      "commitNameOld": "61a2510b55317867c8539a4df295f5afb85da5d4",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 7.51,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,10 @@\n   public KeyVersion createKey(String name, byte[] material, Options options)\n       throws IOException {\n-    authorizeCreateKey(name, options, getUser());\n-    return provider.createKey(name, material, options);\n+    writeLock.lock();\n+    try {\n+      authorizeCreateKey(name, options, getUser());\n+      return provider.createKey(name, material, options);\n+    } finally {\n+      writeLock.unlock();\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public KeyVersion createKey(String name, byte[] material, Options options)\n      throws IOException {\n    writeLock.lock();\n    try {\n      authorizeCreateKey(name, options, getUser());\n      return provider.createKey(name, material, options);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java",
      "extendedDetails": {}
    },
    "b02a4b40610e93eef6559db09a11d287e859446d": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10758. KMS: add ACLs on per key basis. (tucu)\n",
      "commitDate": "10/09/14 2:26 PM",
      "commitName": "b02a4b40610e93eef6559db09a11d287e859446d",
      "commitAuthor": "Alejandro Abdelnur",
      "diff": "@@ -0,0 +1,5 @@\n+  public KeyVersion createKey(String name, byte[] material, Options options)\n+      throws IOException {\n+    authorizeCreateKey(name, options, getUser());\n+    return provider.createKey(name, material, options);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public KeyVersion createKey(String name, byte[] material, Options options)\n      throws IOException {\n    authorizeCreateKey(name, options, getUser());\n    return provider.createKey(name, material, options);\n  }",
      "path": "hadoop-common-project/hadoop-kms/src/main/java/org/apache/hadoop/crypto/key/kms/server/KeyAuthorizationKeyProvider.java"
    }
  }
}