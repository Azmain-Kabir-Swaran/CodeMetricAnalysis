{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerManagerImpl.java",
  "functionName": "handle",
  "functionId": "handle___event-ContainerManagerEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
  "functionStartLine": 1662,
  "functionEndLine": 1765,
  "numCommitsSeen": 167,
  "timeTaken": 11633,
  "changeHistory": [
    "7a82d7bcea8124e1b65c275fac15bf2047d17471",
    "4d7be1d8575e9254c59d41460960708e3718503a",
    "73ecb19312879d54e1cbe80199fe950d81c81104",
    "7114baddb627628a54cdab77f68504332a5a0e28",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661",
    "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
    "3150ae8108a1fc40a67926be6254824c1e37cb38",
    "992dd2f783fc051c32727d4a45a5c61c22bf5640",
    "8f08532bde153811368e1b8336446fba4743f9d2",
    "ffd820c27a4f8cf4676ad8758696ed89fde80218",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f",
    "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd",
    "44f7ee7192d150b43a3012f06cec67be5b64edd0",
    "d3841bd4997a77855ab2abd9cc294eae7d795a5b",
    "235749a8ab5f303b5b3a2993da8c5bea1818183b",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "1cf60106758c482991f08caa136446885d5f8f27",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "7a82d7bcea8124e1b65c275fac15bf2047d17471": "Ybodychange",
    "4d7be1d8575e9254c59d41460960708e3718503a": "Ybodychange",
    "73ecb19312879d54e1cbe80199fe950d81c81104": "Ybodychange",
    "7114baddb627628a54cdab77f68504332a5a0e28": "Ybodychange",
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": "Ybodychange",
    "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5": "Ybodychange",
    "3150ae8108a1fc40a67926be6254824c1e37cb38": "Ybodychange",
    "992dd2f783fc051c32727d4a45a5c61c22bf5640": "Ybodychange",
    "8f08532bde153811368e1b8336446fba4743f9d2": "Ybodychange",
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": "Ybodychange",
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": "Ybodychange",
    "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd": "Ybodychange",
    "44f7ee7192d150b43a3012f06cec67be5b64edd0": "Ybodychange",
    "d3841bd4997a77855ab2abd9cc294eae7d795a5b": "Ybodychange",
    "235749a8ab5f303b5b3a2993da8c5bea1818183b": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "1cf60106758c482991f08caa136446885d5f8f27": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7a82d7bcea8124e1b65c275fac15bf2047d17471": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6979. [Addendum patch] Fixed classname and added javadocs. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "20/08/17 10:24 AM",
      "commitName": "7a82d7bcea8124e1b65c275fac15bf2047d17471",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "20/08/17 7:54 AM",
      "commitNameOld": "8410d862d3a72740f461ef91dddb5325955e1ca5",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,104 +1,104 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         Application app \u003d this.context.getApplications().get(appID);\n         if (app \u003d\u003d null) {\n           LOG.info(\"couldn\u0027t find application \" + appID + \" while processing\"\n               + \" FINISH_APPS event. The ResourceManager allocated resources\"\n               + \" for this application to the NodeManager but no active\"\n               + \" containers were found to process.\");\n           continue;\n         }\n \n         boolean shouldDropEvent \u003d false;\n         for (Container container : app.getContainers().values()) {\n           if (container.isRecovering()) {\n             LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n                 + \"container \" + container.getContainerId()\n                 + \" is recovering\");\n             shouldDropEvent \u003d true;\n             break;\n           }\n         }\n         if (shouldDropEvent) {\n           continue;\n         }\n \n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId containerId : containersFinishedEvent\n           .getContainersToCleanup()) {\n         ApplicationId appId \u003d\n             containerId.getApplicationAttemptId().getApplicationId();\n         Application app \u003d this.context.getApplications().get(appId);\n         if (app \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n               + \" FINISH_CONTAINERS event\");\n           continue;\n         }\n \n         Container container \u003d app.getContainers().get(containerId);\n         if (container \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find container \" + containerId\n               + \" while processing FINISH_CONTAINERS event\");\n           continue;\n         }\n \n         if (container.isRecovering()) {\n           LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n               + \" because container is recovering\");\n           continue;\n         }\n \n         this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(containerId,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n-    case DECREASE_CONTAINERS_RESOURCE:\n-      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n-          (CMgrDecreaseContainersResourceEvent) event;\n+    case UPDATE_CONTAINERS:\n+      CMgrUpdateContainersEvent containersDecreasedEvent \u003d\n+          (CMgrUpdateContainersEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n-          : containersDecreasedEvent.getContainersToDecrease()) {\n+          : containersDecreasedEvent.getContainersToUpdate()) {\n         try {\n           ContainerTokenIdentifier containerTokenIdentifier \u003d\n               BuilderUtils.newContainerTokenIdentifier(\n                   container.getContainerToken());\n           updateContainerInternal(container.getId(),\n               containerTokenIdentifier);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n         internalSignalToContainer(request, \"ResourceManager\");\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.info(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event. The ResourceManager allocated resources\"\n              + \" for this application to the NodeManager but no active\"\n              + \" containers were found to process.\");\n          continue;\n        }\n\n        boolean shouldDropEvent \u003d false;\n        for (Container container : app.getContainers().values()) {\n          if (container.isRecovering()) {\n            LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n                + \"container \" + container.getContainerId()\n                + \" is recovering\");\n            shouldDropEvent \u003d true;\n            break;\n          }\n        }\n        if (shouldDropEvent) {\n          continue;\n        }\n\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId containerId : containersFinishedEvent\n          .getContainersToCleanup()) {\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d this.context.getApplications().get(appId);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n              + \" FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        Container container \u003d app.getContainers().get(containerId);\n        if (container \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find container \" + containerId\n              + \" while processing FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        if (container.isRecovering()) {\n          LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n              + \" because container is recovering\");\n          continue;\n        }\n\n        this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(containerId,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case UPDATE_CONTAINERS:\n      CMgrUpdateContainersEvent containersDecreasedEvent \u003d\n          (CMgrUpdateContainersEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToUpdate()) {\n        try {\n          ContainerTokenIdentifier containerTokenIdentifier \u003d\n              BuilderUtils.newContainerTokenIdentifier(\n                  container.getContainerToken());\n          updateContainerInternal(container.getId(),\n              containerTokenIdentifier);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        internalSignalToContainer(request, \"ResourceManager\");\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "4d7be1d8575e9254c59d41460960708e3718503a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5978. ContainerScheduler and ContainerManager changes to support ExecType update. (Kartheek Muthyala via asuresh)\n",
      "commitDate": "14/08/17 7:46 PM",
      "commitName": "4d7be1d8575e9254c59d41460960708e3718503a",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "03/08/17 9:15 PM",
      "commitNameOld": "35dc7829236f92054d5ce6ea78d3a44ca6c8f3d3",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 10.94,
      "commitsBetweenForRepo": 73,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,101 +1,104 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         Application app \u003d this.context.getApplications().get(appID);\n         if (app \u003d\u003d null) {\n           LOG.info(\"couldn\u0027t find application \" + appID + \" while processing\"\n               + \" FINISH_APPS event. The ResourceManager allocated resources\"\n               + \" for this application to the NodeManager but no active\"\n               + \" containers were found to process.\");\n           continue;\n         }\n \n         boolean shouldDropEvent \u003d false;\n         for (Container container : app.getContainers().values()) {\n           if (container.isRecovering()) {\n             LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n                 + \"container \" + container.getContainerId()\n                 + \" is recovering\");\n             shouldDropEvent \u003d true;\n             break;\n           }\n         }\n         if (shouldDropEvent) {\n           continue;\n         }\n \n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId containerId : containersFinishedEvent\n           .getContainersToCleanup()) {\n         ApplicationId appId \u003d\n             containerId.getApplicationAttemptId().getApplicationId();\n         Application app \u003d this.context.getApplications().get(appId);\n         if (app \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n               + \" FINISH_CONTAINERS event\");\n           continue;\n         }\n \n         Container container \u003d app.getContainers().get(containerId);\n         if (container \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find container \" + containerId\n               + \" while processing FINISH_CONTAINERS event\");\n           continue;\n         }\n \n         if (container.isRecovering()) {\n           LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n               + \" because container is recovering\");\n           continue;\n         }\n \n         this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(containerId,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n-          changeContainerResourceInternal(container.getId(),\n-              container.getVersion(), container.getResource(), false);\n+          ContainerTokenIdentifier containerTokenIdentifier \u003d\n+              BuilderUtils.newContainerTokenIdentifier(\n+                  container.getContainerToken());\n+          updateContainerInternal(container.getId(),\n+              containerTokenIdentifier);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n         internalSignalToContainer(request, \"ResourceManager\");\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.info(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event. The ResourceManager allocated resources\"\n              + \" for this application to the NodeManager but no active\"\n              + \" containers were found to process.\");\n          continue;\n        }\n\n        boolean shouldDropEvent \u003d false;\n        for (Container container : app.getContainers().values()) {\n          if (container.isRecovering()) {\n            LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n                + \"container \" + container.getContainerId()\n                + \" is recovering\");\n            shouldDropEvent \u003d true;\n            break;\n          }\n        }\n        if (shouldDropEvent) {\n          continue;\n        }\n\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId containerId : containersFinishedEvent\n          .getContainersToCleanup()) {\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d this.context.getApplications().get(appId);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n              + \" FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        Container container \u003d app.getContainers().get(containerId);\n        if (container \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find container \" + containerId\n              + \" while processing FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        if (container.isRecovering()) {\n          LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n              + \" because container is recovering\");\n          continue;\n        }\n\n        this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(containerId,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          ContainerTokenIdentifier containerTokenIdentifier \u003d\n              BuilderUtils.newContainerTokenIdentifier(\n                  container.getContainerToken());\n          updateContainerInternal(container.getId(),\n              containerTokenIdentifier);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        internalSignalToContainer(request, \"ResourceManager\");\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "73ecb19312879d54e1cbe80199fe950d81c81104": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6208. Improve the log when FinishAppEvent sent to the NodeManager which didn\u0027t run the application\n(Contributed by Akira Ajisaka via Daniel Templeton)\n",
      "commitDate": "02/06/17 8:50 AM",
      "commitName": "73ecb19312879d54e1cbe80199fe950d81c81104",
      "commitAuthor": "Daniel Templeton",
      "commitDateOld": "25/05/17 9:15 PM",
      "commitNameOld": "47474fffac085e0e5ea46336bf80ccd0677017a3",
      "commitAuthorOld": "Haibo Chen",
      "daysBetweenCommits": 7.48,
      "commitsBetweenForRepo": 35,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,99 +1,101 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         Application app \u003d this.context.getApplications().get(appID);\n         if (app \u003d\u003d null) {\n-          LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n-              + \" FINISH_APPS event\");\n+          LOG.info(\"couldn\u0027t find application \" + appID + \" while processing\"\n+              + \" FINISH_APPS event. The ResourceManager allocated resources\"\n+              + \" for this application to the NodeManager but no active\"\n+              + \" containers were found to process.\");\n           continue;\n         }\n \n         boolean shouldDropEvent \u003d false;\n         for (Container container : app.getContainers().values()) {\n           if (container.isRecovering()) {\n             LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n                 + \"container \" + container.getContainerId()\n                 + \" is recovering\");\n             shouldDropEvent \u003d true;\n             break;\n           }\n         }\n         if (shouldDropEvent) {\n           continue;\n         }\n \n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId containerId : containersFinishedEvent\n           .getContainersToCleanup()) {\n         ApplicationId appId \u003d\n             containerId.getApplicationAttemptId().getApplicationId();\n         Application app \u003d this.context.getApplications().get(appId);\n         if (app \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n               + \" FINISH_CONTAINERS event\");\n           continue;\n         }\n \n         Container container \u003d app.getContainers().get(containerId);\n         if (container \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find container \" + containerId\n               + \" while processing FINISH_CONTAINERS event\");\n           continue;\n         }\n \n         if (container.isRecovering()) {\n           LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n               + \" because container is recovering\");\n           continue;\n         }\n \n         this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(containerId,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n           changeContainerResourceInternal(container.getId(),\n               container.getVersion(), container.getResource(), false);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n         internalSignalToContainer(request, \"ResourceManager\");\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.info(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event. The ResourceManager allocated resources\"\n              + \" for this application to the NodeManager but no active\"\n              + \" containers were found to process.\");\n          continue;\n        }\n\n        boolean shouldDropEvent \u003d false;\n        for (Container container : app.getContainers().values()) {\n          if (container.isRecovering()) {\n            LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n                + \"container \" + container.getContainerId()\n                + \" is recovering\");\n            shouldDropEvent \u003d true;\n            break;\n          }\n        }\n        if (shouldDropEvent) {\n          continue;\n        }\n\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId containerId : containersFinishedEvent\n          .getContainersToCleanup()) {\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d this.context.getApplications().get(appId);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n              + \" FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        Container container \u003d app.getContainers().get(containerId);\n        if (container \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find container \" + containerId\n              + \" while processing FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        if (container.isRecovering()) {\n          LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n              + \" because container is recovering\");\n          continue;\n        }\n\n        this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(containerId,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getVersion(), container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        internalSignalToContainer(request, \"ResourceManager\");\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "7114baddb627628a54cdab77f68504332a5a0e28": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4051. ContainerKillEvent lost when container is still recovering and application finishes. Contributed by sandflee\n",
      "commitDate": "16/03/17 7:30 AM",
      "commitName": "7114baddb627628a54cdab77f68504332a5a0e28",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "24/01/17 8:17 AM",
      "commitNameOld": "a33ce45e35ce77dbf297df618aec3106eafda68c",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 50.93,
      "commitsBetweenForRepo": 278,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,99 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         Application app \u003d this.context.getApplications().get(appID);\n         if (app \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n               + \" FINISH_APPS event\");\n           continue;\n         }\n+\n+        boolean shouldDropEvent \u003d false;\n+        for (Container container : app.getContainers().values()) {\n+          if (container.isRecovering()) {\n+            LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n+                + \"container \" + container.getContainerId()\n+                + \" is recovering\");\n+            shouldDropEvent \u003d true;\n+            break;\n+          }\n+        }\n+        if (shouldDropEvent) {\n+          continue;\n+        }\n+\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n-      for (ContainerId container : containersFinishedEvent\n+      for (ContainerId containerId : containersFinishedEvent\n           .getContainersToCleanup()) {\n-          this.dispatcher.getEventHandler().handle(\n-              new ContainerKillEvent(container,\n+        ApplicationId appId \u003d\n+            containerId.getApplicationAttemptId().getApplicationId();\n+        Application app \u003d this.context.getApplications().get(appId);\n+        if (app \u003d\u003d null) {\n+          LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n+              + \" FINISH_CONTAINERS event\");\n+          continue;\n+        }\n+\n+        Container container \u003d app.getContainers().get(containerId);\n+        if (container \u003d\u003d null) {\n+          LOG.warn(\"couldn\u0027t find container \" + containerId\n+              + \" while processing FINISH_CONTAINERS event\");\n+          continue;\n+        }\n+\n+        if (container.isRecovering()) {\n+          LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n+              + \" because container is recovering\");\n+          continue;\n+        }\n+\n+        this.dispatcher.getEventHandler().handle(\n+              new ContainerKillEvent(containerId,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n           changeContainerResourceInternal(container.getId(),\n               container.getVersion(), container.getResource(), false);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n         internalSignalToContainer(request, \"ResourceManager\");\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event\");\n          continue;\n        }\n\n        boolean shouldDropEvent \u003d false;\n        for (Container container : app.getContainers().values()) {\n          if (container.isRecovering()) {\n            LOG.info(\"drop FINISH_APPS event to \" + appID + \" because \"\n                + \"container \" + container.getContainerId()\n                + \" is recovering\");\n            shouldDropEvent \u003d true;\n            break;\n          }\n        }\n        if (shouldDropEvent) {\n          continue;\n        }\n\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId containerId : containersFinishedEvent\n          .getContainersToCleanup()) {\n        ApplicationId appId \u003d\n            containerId.getApplicationAttemptId().getApplicationId();\n        Application app \u003d this.context.getApplications().get(appId);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find app \" + appId + \" while processing\"\n              + \" FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        Container container \u003d app.getContainers().get(containerId);\n        if (container \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find container \" + containerId\n              + \" while processing FINISH_CONTAINERS event\");\n          continue;\n        }\n\n        if (container.isRecovering()) {\n          LOG.info(\"drop FINISH_CONTAINERS event to \" + containerId\n              + \" because container is recovering\");\n          continue;\n        }\n\n        this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(containerId,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getVersion(), container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        internalSignalToContainer(request, \"ResourceManager\");\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d6d9cff21b7b6141ed88359652cf22e8973c0661": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5221. Expose UpdateResourceRequest API to allow AM to request for change in container properties. (asuresh)\n",
      "commitDate": "30/08/16 3:52 PM",
      "commitName": "d6d9cff21b7b6141ed88359652cf22e8973c0661",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "26/08/16 9:04 AM",
      "commitNameOld": "9ef632f3b0b0e0808116cd1c7482a205b7ebef7d",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 4.28,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         Application app \u003d this.context.getApplications().get(appID);\n         if (app \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n               + \" FINISH_APPS event\");\n           continue;\n         }\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n           changeContainerResourceInternal(container.getId(),\n-              container.getResource(), false);\n+              container.getVersion(), container.getResource(), false);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n         internalSignalToContainer(request, \"ResourceManager\");\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event\");\n          continue;\n        }\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getVersion(), container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        internalSignalToContainer(request, \"ResourceManager\");\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5044. Have AM trigger jstack on task attempts that timeout before killing them. (Eric Payne and Gera Shegalov via mingma)\n",
      "commitDate": "06/06/16 2:30 PM",
      "commitName": "4a1cedc010d3fa1d8ef3f2773ca12acadfee5ba5",
      "commitAuthor": "Ming Ma",
      "commitDateOld": "25/05/16 10:25 AM",
      "commitNameOld": "e07519b8dbb96d73c48e910a4de12563c5c2f8aa",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 12.17,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,71 +1,62 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         Application app \u003d this.context.getApplications().get(appID);\n         if (app \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n               + \" FINISH_APPS event\");\n           continue;\n         }\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n           changeContainerResourceInternal(container.getId(),\n               container.getResource(), false);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n-        ContainerId containerId \u003d request.getContainerId();\n-        Container container \u003d this.context.getContainers().get(containerId);\n-        if (container !\u003d null) {\n-          LOG.info(containerId + \" signal request by ResourceManager.\");\n-          this.dispatcher.getEventHandler().handle(\n-              new SignalContainersLauncherEvent(container,\n-                  request.getCommand()));\n-        } else {\n-          LOG.info(\"Container \" + containerId + \" no longer exists\");\n-        }\n+        internalSignalToContainer(request, \"ResourceManager\");\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event\");\n          continue;\n        }\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        internalSignalToContainer(request, \"ResourceManager\");\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "3150ae8108a1fc40a67926be6254824c1e37cb38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4924. NM recovery race can lead to container not cleaned up. Contributed by sandflee\n",
      "commitDate": "14/04/16 12:17 PM",
      "commitName": "3150ae8108a1fc40a67926be6254824c1e37cb38",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "27/03/16 8:22 PM",
      "commitNameOld": "55ae1439233e8585d624b2872e1e4753ef63eebb",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 17.66,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,76 +1,71 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         Application app \u003d this.context.getApplications().get(appID);\n         if (app \u003d\u003d null) {\n           LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n               + \" FINISH_APPS event\");\n           continue;\n         }\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n-        try {\n-          this.context.getNMStateStore().storeFinishedApplication(appID);\n-        } catch (IOException e) {\n-          LOG.error(\"Unable to update application state in store\", e);\n-        }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n           changeContainerResourceInternal(container.getId(),\n               container.getResource(), false);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n         ContainerId containerId \u003d request.getContainerId();\n         Container container \u003d this.context.getContainers().get(containerId);\n         if (container !\u003d null) {\n           LOG.info(containerId + \" signal request by ResourceManager.\");\n           this.dispatcher.getEventHandler().handle(\n               new SignalContainersLauncherEvent(container,\n                   request.getCommand()));\n         } else {\n           LOG.info(\"Container \" + containerId + \" no longer exists\");\n         }\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event\");\n          continue;\n        }\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        ContainerId containerId \u003d request.getContainerId();\n        Container container \u003d this.context.getContainers().get(containerId);\n        if (container !\u003d null) {\n          LOG.info(containerId + \" signal request by ResourceManager.\");\n          this.dispatcher.getEventHandler().handle(\n              new SignalContainersLauncherEvent(container,\n                  request.getCommand()));\n        } else {\n          LOG.info(\"Container \" + containerId + \" no longer exists\");\n        }\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "992dd2f783fc051c32727d4a45a5c61c22bf5640": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4520. Finished app info is unnecessarily persisted in NM state-store if container is acquired but not lunched on this node. Contributed by sandflee\n",
      "commitDate": "25/01/16 3:36 PM",
      "commitName": "992dd2f783fc051c32727d4a45a5c61c22bf5640",
      "commitAuthor": "Jian He",
      "commitDateOld": "02/10/15 6:50 PM",
      "commitNameOld": "8f08532bde153811368e1b8336446fba4743f9d2",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 114.91,
      "commitsBetweenForRepo": 781,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,76 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n+        Application app \u003d this.context.getApplications().get(appID);\n+        if (app \u003d\u003d null) {\n+          LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n+              + \" FINISH_APPS event\");\n+          continue;\n+        }\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         try {\n           this.context.getNMStateStore().storeFinishedApplication(appID);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update application state in store\", e);\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n           changeContainerResourceInternal(container.getId(),\n               container.getResource(), false);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n     case SIGNAL_CONTAINERS:\n       CMgrSignalContainersEvent containersSignalEvent \u003d\n           (CMgrSignalContainersEvent) event;\n       for (SignalContainerRequest request : containersSignalEvent\n           .getContainersToSignal()) {\n         ContainerId containerId \u003d request.getContainerId();\n         Container container \u003d this.context.getContainers().get(containerId);\n         if (container !\u003d null) {\n           LOG.info(containerId + \" signal request by ResourceManager.\");\n           this.dispatcher.getEventHandler().handle(\n               new SignalContainersLauncherEvent(container,\n                   request.getCommand()));\n         } else {\n           LOG.info(\"Container \" + containerId + \" no longer exists\");\n         }\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        Application app \u003d this.context.getApplications().get(appID);\n        if (app \u003d\u003d null) {\n          LOG.warn(\"couldn\u0027t find application \" + appID + \" while processing\"\n              + \" FINISH_APPS event\");\n          continue;\n        }\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        try {\n          this.context.getNMStateStore().storeFinishedApplication(appID);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update application state in store\", e);\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        ContainerId containerId \u003d request.getContainerId();\n        Container container \u003d this.context.getContainers().get(containerId);\n        if (container !\u003d null) {\n          LOG.info(containerId + \" signal request by ResourceManager.\");\n          this.dispatcher.getEventHandler().handle(\n              new SignalContainersLauncherEvent(container,\n                  request.getCommand()));\n        } else {\n          LOG.info(\"Container \" + containerId + \" no longer exists\");\n        }\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "8f08532bde153811368e1b8336446fba4743f9d2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1897. CLI and core support for signal container functionality. Contributed by Ming Ma\n",
      "commitDate": "02/10/15 6:50 PM",
      "commitName": "8f08532bde153811368e1b8336446fba4743f9d2",
      "commitAuthor": "Xuan",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "c57eac5dfe277845ab4522a1188023a73ee41539",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 9.22,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,70 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         try {\n           this.context.getNMStateStore().storeFinishedApplication(appID);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update application state in store\", e);\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     case DECREASE_CONTAINERS_RESOURCE:\n       CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n           (CMgrDecreaseContainersResourceEvent) event;\n       for (org.apache.hadoop.yarn.api.records.Container container\n           : containersDecreasedEvent.getContainersToDecrease()) {\n         try {\n           changeContainerResourceInternal(container.getId(),\n               container.getResource(), false);\n         } catch (YarnException e) {\n           LOG.error(\"Unable to decrease container resource\", e);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update container resource in store\", e);\n         }\n       }\n       break;\n+    case SIGNAL_CONTAINERS:\n+      CMgrSignalContainersEvent containersSignalEvent \u003d\n+          (CMgrSignalContainersEvent) event;\n+      for (SignalContainerRequest request : containersSignalEvent\n+          .getContainersToSignal()) {\n+        ContainerId containerId \u003d request.getContainerId();\n+        Container container \u003d this.context.getContainers().get(containerId);\n+        if (container !\u003d null) {\n+          LOG.info(containerId + \" signal request by ResourceManager.\");\n+          this.dispatcher.getEventHandler().handle(\n+              new SignalContainersLauncherEvent(container,\n+                  request.getCommand()));\n+        } else {\n+          LOG.info(\"Container \" + containerId + \" no longer exists\");\n+        }\n+      }\n+      break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        try {\n          this.context.getNMStateStore().storeFinishedApplication(appID);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update application state in store\", e);\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    case SIGNAL_CONTAINERS:\n      CMgrSignalContainersEvent containersSignalEvent \u003d\n          (CMgrSignalContainersEvent) event;\n      for (SignalContainerRequest request : containersSignalEvent\n          .getContainersToSignal()) {\n        ContainerId containerId \u003d request.getContainerId();\n        Container container \u003d this.context.getContainers().get(containerId);\n        if (container !\u003d null) {\n          LOG.info(containerId + \" signal request by ResourceManager.\");\n          this.dispatcher.getEventHandler().handle(\n              new SignalContainersLauncherEvent(container,\n                  request.getCommand()));\n        } else {\n          LOG.info(\"Container \" + containerId + \" no longer exists\");\n        }\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ffd820c27a4f8cf4676ad8758696ed89fde80218": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1645. ContainerManager implementation to support container resizing. Contributed by Meng Ding \u0026 Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "ffd820c27a4f8cf4676ad8758696ed89fde80218",
      "commitAuthor": "Jian He",
      "commitDateOld": "23/09/15 1:29 PM",
      "commitNameOld": "83a18add10ee937a04e833a66e0a4642e776e510",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,53 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         try {\n           this.context.getNMStateStore().storeFinishedApplication(appID);\n         } catch (IOException e) {\n           LOG.error(\"Unable to update application state in store\", e);\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n+    case DECREASE_CONTAINERS_RESOURCE:\n+      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n+          (CMgrDecreaseContainersResourceEvent) event;\n+      for (org.apache.hadoop.yarn.api.records.Container container\n+          : containersDecreasedEvent.getContainersToDecrease()) {\n+        try {\n+          changeContainerResourceInternal(container.getId(),\n+              container.getResource(), false);\n+        } catch (YarnException e) {\n+          LOG.error(\"Unable to decrease container resource\", e);\n+        } catch (IOException e) {\n+          LOG.error(\"Unable to update container resource in store\", e);\n+        }\n+      }\n+      break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        try {\n          this.context.getNMStateStore().storeFinishedApplication(appID);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update application state in store\", e);\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    case DECREASE_CONTAINERS_RESOURCE:\n      CMgrDecreaseContainersResourceEvent containersDecreasedEvent \u003d\n          (CMgrDecreaseContainersResourceEvent) event;\n      for (org.apache.hadoop.yarn.api.records.Container container\n          : containersDecreasedEvent.getContainersToDecrease()) {\n        try {\n          changeContainerResourceInternal(container.getId(),\n              container.getResource(), false);\n        } catch (YarnException e) {\n          LOG.error(\"Unable to decrease container resource\", e);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update container resource in store\", e);\n        }\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "b8f151231ba37247b9daa23ecce1211fdca0e49f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1354. Recover applications upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615550 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/08/14 6:25 AM",
      "commitName": "b8f151231ba37247b9daa23ecce1211fdca0e49f",
      "commitAuthor": "Junping Du",
      "commitDateOld": "01/08/14 4:44 PM",
      "commitNameOld": "a41c314373bf92669e35ddfcbec1114826c437e7",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 2.57,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,38 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n+        try {\n+          this.context.getNMStateStore().storeFinishedApplication(appID);\n+        } catch (IOException e) {\n+          LOG.error(\"Unable to update application state in store\", e);\n+        }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        try {\n          this.context.getNMStateStore().storeFinishedApplication(appID);\n        } catch (IOException e) {\n          LOG.error(\"Unable to update application state in store\", e);\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2091. Add more values to ContainerExitStatus and pass it from NM to RM and then to app masters (Tsuyoshi OZAWA via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601762 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/06/14 1:08 PM",
      "commitName": "ecfd43a2f1ffe56f39ebba98ad13538e63cef6fd",
      "commitAuthor": "Bikas Saha",
      "commitDateOld": "30/05/14 8:37 AM",
      "commitNameOld": "66598697a6e777615334ebde5ba7738135da83ae",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 11.19,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n+                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n             \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  ContainerExitStatus.KILLED_BY_RESOURCEMANAGER,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "44f7ee7192d150b43a3012f06cec67be5b64edd0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1278. Fixed NodeManager to not delete local resources for apps on resync command from RM - a bug caused by YARN-1149. Contributed by Hitesh Shah.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529657 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 11:32 AM",
      "commitName": "44f7ee7192d150b43a3012f06cec67be5b64edd0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/13 5:43 PM",
      "commitNameOld": "d3841bd4997a77855ab2abd9cc294eae7d795a5b",
      "commitAuthorOld": "Hitesh Shah",
      "daysBetweenCommits": 2.74,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         String diagnostic \u003d \"\";\n         if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n           diagnostic \u003d \"Application killed on shutdown\";\n         } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n           diagnostic \u003d \"Application killed by ResourceManager\";\n         }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n           this.dispatcher.getEventHandler().handle(\n               new ContainerKillEvent(container,\n                   \"Container Killed by ResourceManager\"));\n       }\n       break;\n     default:\n         throw new YarnRuntimeException(\n-            \"Get an unknown ContainerManagerEvent type: \" + event.getType());\n+            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Got an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "d3841bd4997a77855ab2abd9cc294eae7d795a5b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1149. NM throws InvalidStateTransitonException: Invalid event: APPLICATION_LOG_HANDLING_FINISHED at RUNNING. Contributed by Xuan Gong.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529043 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/10/13 5:43 PM",
      "commitName": "d3841bd4997a77855ab2abd9cc294eae7d795a5b",
      "commitAuthor": "Hitesh Shah",
      "commitDateOld": "03/10/13 5:23 PM",
      "commitNameOld": "8ebf37f3691dee523f7d800bc82c7423c3e262e9",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n+        String diagnostic \u003d \"\";\n+        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n+          diagnostic \u003d \"Application killed on shutdown\";\n+        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n+          diagnostic \u003d \"Application killed by ResourceManager\";\n+        }\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n-                \"Application Killed by ResourceManager\"));\n+                diagnostic));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n-        String diagnostic \u003d \"\";\n-        if (containersFinishedEvent.getReason() \u003d\u003d \n-            CMgrCompletedContainersEvent.Reason.ON_SHUTDOWN) {\n-          diagnostic \u003d \"Container Killed on Shutdown\";\n-        } else if (containersFinishedEvent.getReason() \u003d\u003d \n-            CMgrCompletedContainersEvent.Reason.BY_RESOURCEMANAGER) {\n-          diagnostic \u003d \"Container Killed by ResourceManager\";\n-        }\n-        this.dispatcher.getEventHandler().handle(\n-            new ContainerKillEvent(container, diagnostic));\n+          this.dispatcher.getEventHandler().handle(\n+              new ContainerKillEvent(container,\n+                  \"Container Killed by ResourceManager\"));\n       }\n       break;\n     default:\n-      LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n+        throw new YarnRuntimeException(\n+            \"Get an unknown ContainerManagerEvent type: \" + event.getType());\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        String diagnostic \u003d \"\";\n        if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Application killed on shutdown\";\n        } else if (appsFinishedEvent.getReason() \u003d\u003d CMgrCompletedAppsEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Application killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                diagnostic));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n          this.dispatcher.getEventHandler().handle(\n              new ContainerKillEvent(container,\n                  \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n        throw new YarnRuntimeException(\n            \"Get an unknown ContainerManagerEvent type: \" + event.getType());\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "235749a8ab5f303b5b3a2993da8c5bea1818183b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-72. NM should handle cleaning up containers when it shuts down. Contributed by Sandy Ryza.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1416484 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/12/12 4:12 AM",
      "commitName": "235749a8ab5f303b5b3a2993da8c5bea1818183b",
      "commitAuthor": "Thomas White",
      "commitDateOld": "26/09/12 8:43 PM",
      "commitNameOld": "40062e1aaa09628c6f45d20298fd66d799fd1f3f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 67.35,
      "commitsBetweenForRepo": 351,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,32 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         this.dispatcher.getEventHandler().handle(\n             new ApplicationFinishEvent(appID,\n                 \"Application Killed by ResourceManager\"));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n+        String diagnostic \u003d \"\";\n+        if (containersFinishedEvent.getReason() \u003d\u003d \n+            CMgrCompletedContainersEvent.Reason.ON_SHUTDOWN) {\n+          diagnostic \u003d \"Container Killed on Shutdown\";\n+        } else if (containersFinishedEvent.getReason() \u003d\u003d \n+            CMgrCompletedContainersEvent.Reason.BY_RESOURCEMANAGER) {\n+          diagnostic \u003d \"Container Killed by ResourceManager\";\n+        }\n         this.dispatcher.getEventHandler().handle(\n-            new ContainerKillEvent(container,\n-                \"Container Killed by ResourceManager\"));\n+            new ContainerKillEvent(container, diagnostic));\n       }\n       break;\n     default:\n       LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                \"Application Killed by ResourceManager\"));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n        String diagnostic \u003d \"\";\n        if (containersFinishedEvent.getReason() \u003d\u003d \n            CMgrCompletedContainersEvent.Reason.ON_SHUTDOWN) {\n          diagnostic \u003d \"Container Killed on Shutdown\";\n        } else if (containersFinishedEvent.getReason() \u003d\u003d \n            CMgrCompletedContainersEvent.Reason.BY_RESOURCEMANAGER) {\n          diagnostic \u003d \"Container Killed by ResourceManager\";\n        }\n        this.dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(container, diagnostic));\n      }\n      break;\n    default:\n      LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                \"Application Killed by ResourceManager\"));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(container,\n                \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n      LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
      }
    },
    "1cf60106758c482991f08caa136446885d5f8f27": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4302. NM goes down if error encountered during log aggregation (Daryn Sharp via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1345362 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/06/12 2:54 PM",
      "commitName": "1cf60106758c482991f08caa136446885d5f8f27",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "03/05/12 11:35 AM",
      "commitNameOld": "48414b08277b86cdbc34ae36d7c4d204fd838294",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 29.14,
      "commitsBetweenForRepo": 164,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public void handle(ContainerManagerEvent event) {\n     switch (event.getType()) {\n     case FINISH_APPS:\n       CMgrCompletedAppsEvent appsFinishedEvent \u003d\n           (CMgrCompletedAppsEvent) event;\n       for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n         this.dispatcher.getEventHandler().handle(\n-            new ApplicationEvent(appID,\n-                ApplicationEventType.FINISH_APPLICATION));\n+            new ApplicationFinishEvent(appID,\n+                \"Application Killed by ResourceManager\"));\n       }\n       break;\n     case FINISH_CONTAINERS:\n       CMgrCompletedContainersEvent containersFinishedEvent \u003d\n           (CMgrCompletedContainersEvent) event;\n       for (ContainerId container : containersFinishedEvent\n           .getContainersToCleanup()) {\n         this.dispatcher.getEventHandler().handle(\n             new ContainerKillEvent(container,\n                 \"Container Killed by ResourceManager\"));\n       }\n       break;\n     default:\n       LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationFinishEvent(appID,\n                \"Application Killed by ResourceManager\"));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(container,\n                \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n      LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationEvent(appID,\n                ApplicationEventType.FINISH_APPLICATION));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(container,\n                \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n      LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,25 @@\n+  public void handle(ContainerManagerEvent event) {\n+    switch (event.getType()) {\n+    case FINISH_APPS:\n+      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n+          (CMgrCompletedAppsEvent) event;\n+      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n+        this.dispatcher.getEventHandler().handle(\n+            new ApplicationEvent(appID,\n+                ApplicationEventType.FINISH_APPLICATION));\n+      }\n+      break;\n+    case FINISH_CONTAINERS:\n+      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n+          (CMgrCompletedContainersEvent) event;\n+      for (ContainerId container : containersFinishedEvent\n+          .getContainersToCleanup()) {\n+        this.dispatcher.getEventHandler().handle(\n+            new ContainerKillEvent(container,\n+                \"Container Killed by ResourceManager\"));\n+      }\n+      break;\n+    default:\n+      LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(ContainerManagerEvent event) {\n    switch (event.getType()) {\n    case FINISH_APPS:\n      CMgrCompletedAppsEvent appsFinishedEvent \u003d\n          (CMgrCompletedAppsEvent) event;\n      for (ApplicationId appID : appsFinishedEvent.getAppsToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ApplicationEvent(appID,\n                ApplicationEventType.FINISH_APPLICATION));\n      }\n      break;\n    case FINISH_CONTAINERS:\n      CMgrCompletedContainersEvent containersFinishedEvent \u003d\n          (CMgrCompletedContainersEvent) event;\n      for (ContainerId container : containersFinishedEvent\n          .getContainersToCleanup()) {\n        this.dispatcher.getEventHandler().handle(\n            new ContainerKillEvent(container,\n                \"Container Killed by ResourceManager\"));\n      }\n      break;\n    default:\n      LOG.warn(\"Invalid event \" + event.getType() + \". Ignoring.\");\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/ContainerManagerImpl.java"
    }
  }
}