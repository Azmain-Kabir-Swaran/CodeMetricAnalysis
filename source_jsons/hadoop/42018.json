{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ZKRMStateStore.java",
  "functionName": "checkRemoveParentZnode",
  "functionId": "checkRemoveParentZnode___path-String__splitIndex-int",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
  "functionStartLine": 782,
  "functionEndLine": 810,
  "numCommitsSeen": 145,
  "timeTaken": 4384,
  "changeHistory": [
    "2064ca015d1584263aac0cc20c60b925a3aff612",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03",
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210"
  ],
  "changeHistoryShort": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": "Ybodychange",
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03": "Ybodychange",
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2064ca015d1584263aac0cc20c60b925a3aff612": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9349.  Changed logging to use slf4j api.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "15/03/19 4:20 PM",
      "commitName": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 10.76,
      "commitsBetweenForRepo": 108,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,29 @@\n   private void checkRemoveParentZnode(String path, int splitIndex)\n       throws Exception {\n     if (splitIndex !\u003d 0) {\n       String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n       List\u003cString\u003e children \u003d null;\n       try {\n         children \u003d getChildren(parentZnode);\n       } catch (KeeperException.NoNodeException ke) {\n         // It should be fine to swallow this exception as the parent znode we\n         // intend to delete is already deleted.\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Unable to remove parent node \" + parentZnode +\n-              \" as it does not exist.\");\n-        }\n+        LOG.debug(\"Unable to remove parent node {} as it does not exist.\",\n+            parentZnode);\n         return;\n       }\n       // No apps stored under parent path.\n       if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n         try {\n           zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"No leaf znode exists. Removing parent node \" +\n-                parentZnode);\n-          }\n+          LOG.debug(\"No leaf znode exists. Removing parent node {}\",\n+              parentZnode);\n         } catch (KeeperException.NotEmptyException ke) {\n           // It should be fine to swallow this exception as the parent znode\n           // has to be deleted only if it has no children. And this node has.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Unable to remove app parent node \" + parentZnode +\n-                \" as it has children.\");\n-          }\n+          LOG.debug(\"Unable to remove app parent node {} as it has children.\",\n+              parentZnode);\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkRemoveParentZnode(String path, int splitIndex)\n      throws Exception {\n    if (splitIndex !\u003d 0) {\n      String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n      List\u003cString\u003e children \u003d null;\n      try {\n        children \u003d getChildren(parentZnode);\n      } catch (KeeperException.NoNodeException ke) {\n        // It should be fine to swallow this exception as the parent znode we\n        // intend to delete is already deleted.\n        LOG.debug(\"Unable to remove parent node {} as it does not exist.\",\n            parentZnode);\n        return;\n      }\n      // No apps stored under parent path.\n      if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n        try {\n          zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n          LOG.debug(\"No leaf znode exists. Removing parent node {}\",\n              parentZnode);\n        } catch (KeeperException.NotEmptyException ke) {\n          // It should be fine to swallow this exception as the parent znode\n          // has to be deleted only if it has no children. And this node has.\n          LOG.debug(\"Unable to remove app parent node {} as it has children.\",\n              parentZnode);\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7262. Add a hierarchy into the ZKRMStateStore for delegation token znodes to prevent jute buffer overflow (rkanter)\n",
      "commitDate": "26/10/17 5:47 PM",
      "commitName": "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-7262. Add a hierarchy into the ZKRMStateStore for delegation token znodes to prevent jute buffer overflow (rkanter)\n",
          "commitDate": "26/10/17 5:47 PM",
          "commitName": "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 17.28,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private void checkRemoveParentAppNode(String appIdPath, int splitIndex)\n+  private void checkRemoveParentZnode(String path, int splitIndex)\n       throws Exception {\n     if (splitIndex !\u003d 0) {\n-      String parentAppNode \u003d getSplitAppNodeParent(appIdPath, splitIndex);\n+      String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n       List\u003cString\u003e children \u003d null;\n       try {\n-        children \u003d getChildren(parentAppNode);\n+        children \u003d getChildren(parentZnode);\n       } catch (KeeperException.NoNodeException ke) {\n-        // It should be fine to swallow this exception as the parent app node we\n+        // It should be fine to swallow this exception as the parent znode we\n         // intend to delete is already deleted.\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+          LOG.debug(\"Unable to remove parent node \" + parentZnode +\n               \" as it does not exist.\");\n         }\n         return;\n       }\n       // No apps stored under parent path.\n       if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n         try {\n-          zkManager.safeDelete(parentAppNode, zkAcl, fencingNodePath);\n+          zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"No leaf app node exists. Removing parent node \" +\n-                parentAppNode);\n+            LOG.debug(\"No leaf znode exists. Removing parent node \" +\n+                parentZnode);\n           }\n         } catch (KeeperException.NotEmptyException ke) {\n-          // It should be fine to swallow this exception as the parent app node\n+          // It should be fine to swallow this exception as the parent znode\n           // has to be deleted only if it has no children. And this node has.\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+            LOG.debug(\"Unable to remove app parent node \" + parentZnode +\n                 \" as it has children.\");\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkRemoveParentZnode(String path, int splitIndex)\n      throws Exception {\n    if (splitIndex !\u003d 0) {\n      String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n      List\u003cString\u003e children \u003d null;\n      try {\n        children \u003d getChildren(parentZnode);\n      } catch (KeeperException.NoNodeException ke) {\n        // It should be fine to swallow this exception as the parent znode we\n        // intend to delete is already deleted.\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Unable to remove parent node \" + parentZnode +\n              \" as it does not exist.\");\n        }\n        return;\n      }\n      // No apps stored under parent path.\n      if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n        try {\n          zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No leaf znode exists. Removing parent node \" +\n                parentZnode);\n          }\n        } catch (KeeperException.NotEmptyException ke) {\n          // It should be fine to swallow this exception as the parent znode\n          // has to be deleted only if it has no children. And this node has.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Unable to remove app parent node \" + parentZnode +\n                \" as it has children.\");\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {
            "oldValue": "checkRemoveParentAppNode",
            "newValue": "checkRemoveParentZnode"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7262. Add a hierarchy into the ZKRMStateStore for delegation token znodes to prevent jute buffer overflow (rkanter)\n",
          "commitDate": "26/10/17 5:47 PM",
          "commitName": "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 17.28,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private void checkRemoveParentAppNode(String appIdPath, int splitIndex)\n+  private void checkRemoveParentZnode(String path, int splitIndex)\n       throws Exception {\n     if (splitIndex !\u003d 0) {\n-      String parentAppNode \u003d getSplitAppNodeParent(appIdPath, splitIndex);\n+      String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n       List\u003cString\u003e children \u003d null;\n       try {\n-        children \u003d getChildren(parentAppNode);\n+        children \u003d getChildren(parentZnode);\n       } catch (KeeperException.NoNodeException ke) {\n-        // It should be fine to swallow this exception as the parent app node we\n+        // It should be fine to swallow this exception as the parent znode we\n         // intend to delete is already deleted.\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+          LOG.debug(\"Unable to remove parent node \" + parentZnode +\n               \" as it does not exist.\");\n         }\n         return;\n       }\n       // No apps stored under parent path.\n       if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n         try {\n-          zkManager.safeDelete(parentAppNode, zkAcl, fencingNodePath);\n+          zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"No leaf app node exists. Removing parent node \" +\n-                parentAppNode);\n+            LOG.debug(\"No leaf znode exists. Removing parent node \" +\n+                parentZnode);\n           }\n         } catch (KeeperException.NotEmptyException ke) {\n-          // It should be fine to swallow this exception as the parent app node\n+          // It should be fine to swallow this exception as the parent znode\n           // has to be deleted only if it has no children. And this node has.\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+            LOG.debug(\"Unable to remove app parent node \" + parentZnode +\n                 \" as it has children.\");\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkRemoveParentZnode(String path, int splitIndex)\n      throws Exception {\n    if (splitIndex !\u003d 0) {\n      String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n      List\u003cString\u003e children \u003d null;\n      try {\n        children \u003d getChildren(parentZnode);\n      } catch (KeeperException.NoNodeException ke) {\n        // It should be fine to swallow this exception as the parent znode we\n        // intend to delete is already deleted.\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Unable to remove parent node \" + parentZnode +\n              \" as it does not exist.\");\n        }\n        return;\n      }\n      // No apps stored under parent path.\n      if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n        try {\n          zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No leaf znode exists. Removing parent node \" +\n                parentZnode);\n          }\n        } catch (KeeperException.NotEmptyException ke) {\n          // It should be fine to swallow this exception as the parent znode\n          // has to be deleted only if it has no children. And this node has.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Unable to remove app parent node \" + parentZnode +\n                \" as it has children.\");\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {
            "oldValue": "[appIdPath-String, splitIndex-int]",
            "newValue": "[path-String, splitIndex-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7262. Add a hierarchy into the ZKRMStateStore for delegation token znodes to prevent jute buffer overflow (rkanter)\n",
          "commitDate": "26/10/17 5:47 PM",
          "commitName": "b1de78619f3e5e25d6f9d5eaf41925f22d212fb9",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "09/10/17 11:11 AM",
          "commitNameOld": "ff39c0de206a4fce1f0e8a416357a7a8261f8634",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 17.28,
          "commitsBetweenForRepo": 109,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,35 +1,35 @@\n-  private void checkRemoveParentAppNode(String appIdPath, int splitIndex)\n+  private void checkRemoveParentZnode(String path, int splitIndex)\n       throws Exception {\n     if (splitIndex !\u003d 0) {\n-      String parentAppNode \u003d getSplitAppNodeParent(appIdPath, splitIndex);\n+      String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n       List\u003cString\u003e children \u003d null;\n       try {\n-        children \u003d getChildren(parentAppNode);\n+        children \u003d getChildren(parentZnode);\n       } catch (KeeperException.NoNodeException ke) {\n-        // It should be fine to swallow this exception as the parent app node we\n+        // It should be fine to swallow this exception as the parent znode we\n         // intend to delete is already deleted.\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+          LOG.debug(\"Unable to remove parent node \" + parentZnode +\n               \" as it does not exist.\");\n         }\n         return;\n       }\n       // No apps stored under parent path.\n       if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n         try {\n-          zkManager.safeDelete(parentAppNode, zkAcl, fencingNodePath);\n+          zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"No leaf app node exists. Removing parent node \" +\n-                parentAppNode);\n+            LOG.debug(\"No leaf znode exists. Removing parent node \" +\n+                parentZnode);\n           }\n         } catch (KeeperException.NotEmptyException ke) {\n-          // It should be fine to swallow this exception as the parent app node\n+          // It should be fine to swallow this exception as the parent znode\n           // has to be deleted only if it has no children. And this node has.\n           if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+            LOG.debug(\"Unable to remove app parent node \" + parentZnode +\n                 \" as it has children.\");\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void checkRemoveParentZnode(String path, int splitIndex)\n      throws Exception {\n    if (splitIndex !\u003d 0) {\n      String parentZnode \u003d getSplitZnodeParent(path, splitIndex);\n      List\u003cString\u003e children \u003d null;\n      try {\n        children \u003d getChildren(parentZnode);\n      } catch (KeeperException.NoNodeException ke) {\n        // It should be fine to swallow this exception as the parent znode we\n        // intend to delete is already deleted.\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Unable to remove parent node \" + parentZnode +\n              \" as it does not exist.\");\n        }\n        return;\n      }\n      // No apps stored under parent path.\n      if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n        try {\n          zkManager.safeDelete(parentZnode, zkAcl, fencingNodePath);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No leaf znode exists. Removing parent node \" +\n                parentZnode);\n          }\n        } catch (KeeperException.NotEmptyException ke) {\n          // It should be fine to swallow this exception as the parent znode\n          // has to be deleted only if it has no children. And this node has.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Unable to remove app parent node \" + parentZnode +\n                \" as it has children.\");\n          }\n        }\n      }\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
          "extendedDetails": {}
        }
      ]
    },
    "4249172e1419acdb2b69ae3db43dc59da2aa2e03": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7053. Move curator transaction support to ZKCuratorManager. (Jonathan Hung via Subru).\n",
      "commitDate": "22/08/17 7:20 PM",
      "commitName": "4249172e1419acdb2b69ae3db43dc59da2aa2e03",
      "commitAuthor": "Subru Krishnan",
      "commitDateOld": "15/08/17 4:53 PM",
      "commitNameOld": "75dd866bfb8b63cb9f13179d4365b05c48e0907d",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 7.1,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   private void checkRemoveParentAppNode(String appIdPath, int splitIndex)\n       throws Exception {\n     if (splitIndex !\u003d 0) {\n       String parentAppNode \u003d getSplitAppNodeParent(appIdPath, splitIndex);\n       List\u003cString\u003e children \u003d null;\n       try {\n         children \u003d getChildren(parentAppNode);\n       } catch (KeeperException.NoNodeException ke) {\n         // It should be fine to swallow this exception as the parent app node we\n         // intend to delete is already deleted.\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n               \" as it does not exist.\");\n         }\n         return;\n       }\n       // No apps stored under parent path.\n       if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n         try {\n-          safeDelete(parentAppNode);\n+          zkManager.safeDelete(parentAppNode, zkAcl, fencingNodePath);\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"No leaf app node exists. Removing parent node \" +\n                 parentAppNode);\n           }\n         } catch (KeeperException.NotEmptyException ke) {\n           // It should be fine to swallow this exception as the parent app node\n           // has to be deleted only if it has no children. And this node has.\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n                 \" as it has children.\");\n           }\n         }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkRemoveParentAppNode(String appIdPath, int splitIndex)\n      throws Exception {\n    if (splitIndex !\u003d 0) {\n      String parentAppNode \u003d getSplitAppNodeParent(appIdPath, splitIndex);\n      List\u003cString\u003e children \u003d null;\n      try {\n        children \u003d getChildren(parentAppNode);\n      } catch (KeeperException.NoNodeException ke) {\n        // It should be fine to swallow this exception as the parent app node we\n        // intend to delete is already deleted.\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n              \" as it does not exist.\");\n        }\n        return;\n      }\n      // No apps stored under parent path.\n      if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n        try {\n          zkManager.safeDelete(parentAppNode, zkAcl, fencingNodePath);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No leaf app node exists. Removing parent node \" +\n                parentAppNode);\n          }\n        } catch (KeeperException.NotEmptyException ke) {\n          // It should be fine to swallow this exception as the parent app node\n          // has to be deleted only if it has no children. And this node has.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n                \" as it has children.\");\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java",
      "extendedDetails": {}
    },
    "2e52789edf68016e7a3f450164f8bd3d8e6cb210": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2962. ZKRMStateStore: Limit the number of znodes under a znode (Contributed by Varun Sexena via Daniel Templeton)\n",
      "commitDate": "28/04/17 1:30 PM",
      "commitName": "2e52789edf68016e7a3f450164f8bd3d8e6cb210",
      "commitAuthor": "Daniel Templeton",
      "diff": "@@ -0,0 +1,35 @@\n+  private void checkRemoveParentAppNode(String appIdPath, int splitIndex)\n+      throws Exception {\n+    if (splitIndex !\u003d 0) {\n+      String parentAppNode \u003d getSplitAppNodeParent(appIdPath, splitIndex);\n+      List\u003cString\u003e children \u003d null;\n+      try {\n+        children \u003d getChildren(parentAppNode);\n+      } catch (KeeperException.NoNodeException ke) {\n+        // It should be fine to swallow this exception as the parent app node we\n+        // intend to delete is already deleted.\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+              \" as it does not exist.\");\n+        }\n+        return;\n+      }\n+      // No apps stored under parent path.\n+      if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n+        try {\n+          safeDelete(parentAppNode);\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"No leaf app node exists. Removing parent node \" +\n+                parentAppNode);\n+          }\n+        } catch (KeeperException.NotEmptyException ke) {\n+          // It should be fine to swallow this exception as the parent app node\n+          // has to be deleted only if it has no children. And this node has.\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n+                \" as it has children.\");\n+          }\n+        }\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void checkRemoveParentAppNode(String appIdPath, int splitIndex)\n      throws Exception {\n    if (splitIndex !\u003d 0) {\n      String parentAppNode \u003d getSplitAppNodeParent(appIdPath, splitIndex);\n      List\u003cString\u003e children \u003d null;\n      try {\n        children \u003d getChildren(parentAppNode);\n      } catch (KeeperException.NoNodeException ke) {\n        // It should be fine to swallow this exception as the parent app node we\n        // intend to delete is already deleted.\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n              \" as it does not exist.\");\n        }\n        return;\n      }\n      // No apps stored under parent path.\n      if (children !\u003d null \u0026\u0026 children.isEmpty()) {\n        try {\n          safeDelete(parentAppNode);\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"No leaf app node exists. Removing parent node \" +\n                parentAppNode);\n          }\n        } catch (KeeperException.NotEmptyException ke) {\n          // It should be fine to swallow this exception as the parent app node\n          // has to be deleted only if it has no children. And this node has.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Unable to remove app parent node \" + parentAppNode +\n                \" as it has children.\");\n          }\n        }\n      }\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/recovery/ZKRMStateStore.java"
    }
  }
}