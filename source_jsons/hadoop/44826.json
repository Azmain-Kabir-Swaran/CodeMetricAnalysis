{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodeCLI.java",
  "functionName": "run",
  "functionId": "run___args-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
  "functionStartLine": 68,
  "functionEndLine": 159,
  "numCommitsSeen": 28,
  "timeTaken": 2533,
  "changeHistory": [
    "7dc272199ffea28c8597151e17d4606928a7f9f3",
    "be34b2a8fd30a1a0e803ac8b2198c695600a9e46",
    "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
    "9cedad11d8d2197a54732667a15344983de5c437",
    "b610c68d4423a5a1ab342dc490cd0064f8983c07",
    "946456c6d88780abe0251b098dd771e9e1e93ab3",
    "6d100eb79409cbca70a22ada705dedf6658545e3",
    "d912eea82221ec9851a4dab3a6473a05a4b8dded",
    "5e4f6ad1d9aa6df96af837600674af4467c1e99c",
    "331b1123fbb892524ecb58e551c20befd26c9ea9"
  ],
  "changeHistoryShort": {
    "7dc272199ffea28c8597151e17d4606928a7f9f3": "Ybodychange",
    "be34b2a8fd30a1a0e803ac8b2198c695600a9e46": "Ybodychange",
    "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a": "Ybodychange",
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": "Ybodychange",
    "9cedad11d8d2197a54732667a15344983de5c437": "Ybodychange",
    "b610c68d4423a5a1ab342dc490cd0064f8983c07": "Ybodychange",
    "946456c6d88780abe0251b098dd771e9e1e93ab3": "Ybodychange",
    "6d100eb79409cbca70a22ada705dedf6658545e3": "Ybodychange",
    "d912eea82221ec9851a4dab3a6473a05a4b8dded": "Ybodychange",
    "5e4f6ad1d9aa6df96af837600674af4467c1e99c": "Ybodychange",
    "331b1123fbb892524ecb58e551c20befd26c9ea9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7dc272199ffea28c8597151e17d4606928a7f9f3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9034. ApplicationCLI should have option to take clusterId. Contributed by Rohith Sharma K S.\n",
      "commitDate": "28/11/18 12:42 AM",
      "commitName": "7dc272199ffea28c8597151e17d4606928a7f9f3",
      "commitAuthor": "Suma Shivaprasad",
      "commitDateOld": "12/09/18 3:31 AM",
      "commitNameOld": "eb08543c7a5d1fd97a1915dbc5a11a2ba2066ba1",
      "commitAuthorOld": "Naganarasimha",
      "daysBetweenCommits": 76.92,
      "commitsBetweenForRepo": 699,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,90 +1,92 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n         \"Supports optional use of -states to filter nodes \" +\n         \"based on node state, all -all to list all nodes, \" +\n         \"-showDetails to display more details about each node.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n         \"Works with -list to filter nodes based on input comma-separated \" +\n         \"list of node states. \" + getAllValidNodeStates());\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n     nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n     Option showDetailsOpt \u003d new Option(NODE_SHOW_DETAILS, false,\n         \"Works with -list to show more details about each node.\");\n     opts.addOption(showDetailsOpt);\n     opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n     if (args !\u003d null \u0026\u0026 args.length \u003e 0) {\n       for (int i \u003d args.length - 1; i \u003e\u003d 0; i--) {\n         if (args[i].equalsIgnoreCase(\"-\" + NODE_ALL)) {\n           args[i] \u003d \"-\" + NODE_ALL;\n         }\n       }\n     }\n \n     int exitCode \u003d -1;\n     CommandLine cliParser \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       sysout.println(\"Missing argument for options\");\n       printUsage(opts);\n       return exitCode;\n     }\n \n+    createAndStartYarnClient();\n+\n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n               try {\n                 nodeStates.add(NodeState.valueOf(\n                     org.apache.hadoop.util.StringUtils.toUpperCase(\n                             type.trim())));\n               } catch (IllegalArgumentException ex) {\n                 sysout.println(\"The node state \" + type + \" is invalid.\");\n                 sysout.println(getAllValidNodeStates());\n                 return exitCode;\n               }\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n \n       // List all node details with more information.\n       if (cliParser.hasOption(NODE_SHOW_DETAILS)) {\n         listDetailedClusterNodes(nodeStates);\n       } else {\n         listClusterNodes(nodeStates);\n       }\n     } else if (cliParser.hasOption(HELP_CMD)) {\n       printUsage(opts);\n       return 0;\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes, \" +\n        \"-showDetails to display more details about each node.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated \" +\n        \"list of node states. \" + getAllValidNodeStates());\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    Option showDetailsOpt \u003d new Option(NODE_SHOW_DETAILS, false,\n        \"Works with -list to show more details about each node.\");\n    opts.addOption(showDetailsOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    if (args !\u003d null \u0026\u0026 args.length \u003e 0) {\n      for (int i \u003d args.length - 1; i \u003e\u003d 0; i--) {\n        if (args[i].equalsIgnoreCase(\"-\" + NODE_ALL)) {\n          args[i] \u003d \"-\" + NODE_ALL;\n        }\n      }\n    }\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    createAndStartYarnClient();\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              try {\n                nodeStates.add(NodeState.valueOf(\n                    org.apache.hadoop.util.StringUtils.toUpperCase(\n                            type.trim())));\n              } catch (IllegalArgumentException ex) {\n                sysout.println(\"The node state \" + type + \" is invalid.\");\n                sysout.println(getAllValidNodeStates());\n                return exitCode;\n              }\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n\n      // List all node details with more information.\n      if (cliParser.hasOption(NODE_SHOW_DETAILS)) {\n        listDetailedClusterNodes(nodeStates);\n      } else {\n        listClusterNodes(nodeStates);\n      }\n    } else if (cliParser.hasOption(HELP_CMD)) {\n      printUsage(opts);\n      return 0;\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "be34b2a8fd30a1a0e803ac8b2198c695600a9e46": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1126. Add validation of users input nodes-states options to nodes CLI. Contributed by Wei Yan.\n",
      "commitDate": "20/07/16 11:50 PM",
      "commitName": "be34b2a8fd30a1a0e803ac8b2198c695600a9e46",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "14/06/16 3:06 PM",
      "commitNameOld": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 36.36,
      "commitsBetweenForRepo": 372,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,74 +1,90 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n         \"Supports optional use of -states to filter nodes \" +\n         \"based on node state, all -all to list all nodes, \" +\n         \"-showDetails to display more details about each node.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n-        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n+        \"Works with -list to filter nodes based on input comma-separated \" +\n+        \"list of node states. \" + getAllValidNodeStates());\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n     nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n     Option showDetailsOpt \u003d new Option(NODE_SHOW_DETAILS, false,\n         \"Works with -list to show more details about each node.\");\n     opts.addOption(showDetailsOpt);\n     opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n+    if (args !\u003d null \u0026\u0026 args.length \u003e 0) {\n+      for (int i \u003d args.length - 1; i \u003e\u003d 0; i--) {\n+        if (args[i].equalsIgnoreCase(\"-\" + NODE_ALL)) {\n+          args[i] \u003d \"-\" + NODE_ALL;\n+        }\n+      }\n+    }\n+\n     int exitCode \u003d -1;\n     CommandLine cliParser \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       sysout.println(\"Missing argument for options\");\n       printUsage(opts);\n       return exitCode;\n     }\n \n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n-              nodeStates.add(NodeState.valueOf(\n-                  org.apache.hadoop.util.StringUtils.toUpperCase(type.trim())));\n+              try {\n+                nodeStates.add(NodeState.valueOf(\n+                    org.apache.hadoop.util.StringUtils.toUpperCase(\n+                            type.trim())));\n+              } catch (IllegalArgumentException ex) {\n+                sysout.println(\"The node state \" + type + \" is invalid.\");\n+                sysout.println(getAllValidNodeStates());\n+                return exitCode;\n+              }\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n \n       // List all node details with more information.\n       if (cliParser.hasOption(NODE_SHOW_DETAILS)) {\n         listDetailedClusterNodes(nodeStates);\n       } else {\n         listClusterNodes(nodeStates);\n       }\n     } else if (cliParser.hasOption(HELP_CMD)) {\n       printUsage(opts);\n       return 0;\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes, \" +\n        \"-showDetails to display more details about each node.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated \" +\n        \"list of node states. \" + getAllValidNodeStates());\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    Option showDetailsOpt \u003d new Option(NODE_SHOW_DETAILS, false,\n        \"Works with -list to show more details about each node.\");\n    opts.addOption(showDetailsOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    if (args !\u003d null \u0026\u0026 args.length \u003e 0) {\n      for (int i \u003d args.length - 1; i \u003e\u003d 0; i--) {\n        if (args[i].equalsIgnoreCase(\"-\" + NODE_ALL)) {\n          args[i] \u003d \"-\" + NODE_ALL;\n        }\n      }\n    }\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              try {\n                nodeStates.add(NodeState.valueOf(\n                    org.apache.hadoop.util.StringUtils.toUpperCase(\n                            type.trim())));\n              } catch (IllegalArgumentException ex) {\n                sysout.println(\"The node state \" + type + \" is invalid.\");\n                sysout.println(getAllValidNodeStates());\n                return exitCode;\n              }\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n\n      // List all node details with more information.\n      if (cliParser.hasOption(NODE_SHOW_DETAILS)) {\n        listDetailedClusterNodes(nodeStates);\n      } else {\n        listClusterNodes(nodeStates);\n      }\n    } else if (cliParser.hasOption(HELP_CMD)) {\n      printUsage(opts);\n      return 0;\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4290. Add -showDetails option to YARN Nodes CLI to print all nodes reports information. (Sunil G via wangda)\n",
      "commitDate": "21/12/15 11:36 AM",
      "commitName": "a0de7028515eebe1c526cc42808cdbc8ed6b4e2a",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "16/12/15 1:18 PM",
      "commitNameOld": "79c41b1d83e981ae74cb8b58ffcf7907b7612ad4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 4.93,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,74 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n         \"Supports optional use of -states to filter nodes \" +\n-        \"based on node state, all -all to list all nodes.\");\n+        \"based on node state, all -all to list all nodes, \" +\n+        \"-showDetails to display more details about each node.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n         \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n     nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n+    Option showDetailsOpt \u003d new Option(NODE_SHOW_DETAILS, false,\n+        \"Works with -list to show more details about each node.\");\n+    opts.addOption(showDetailsOpt);\n     opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n     int exitCode \u003d -1;\n     CommandLine cliParser \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       sysout.println(\"Missing argument for options\");\n       printUsage(opts);\n       return exitCode;\n     }\n \n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n               nodeStates.add(NodeState.valueOf(\n                   org.apache.hadoop.util.StringUtils.toUpperCase(type.trim())));\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n-      listClusterNodes(nodeStates);\n+\n+      // List all node details with more information.\n+      if (cliParser.hasOption(NODE_SHOW_DETAILS)) {\n+        listDetailedClusterNodes(nodeStates);\n+      } else {\n+        listClusterNodes(nodeStates);\n+      }\n     } else if (cliParser.hasOption(HELP_CMD)) {\n       printUsage(opts);\n       return 0;\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes, \" +\n        \"-showDetails to display more details about each node.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    Option showDetailsOpt \u003d new Option(NODE_SHOW_DETAILS, false,\n        \"Works with -list to show more details about each node.\");\n    opts.addOption(showDetailsOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              nodeStates.add(NodeState.valueOf(\n                  org.apache.hadoop.util.StringUtils.toUpperCase(type.trim())));\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n\n      // List all node details with more information.\n      if (cliParser.hasOption(NODE_SHOW_DETAILS)) {\n        listDetailedClusterNodes(nodeStates);\n      } else {\n        listClusterNodes(nodeStates);\n      }\n    } else if (cliParser.hasOption(HELP_CMD)) {\n      printUsage(opts);\n      return 0;\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "d1c6accb6f87b08975175580e15f1ff1fe29ab04": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "02/03/15 9:17 PM",
      "commitName": "d1c6accb6f87b08975175580e15f1ff1fe29ab04",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "24/02/15 7:32 AM",
      "commitNameOld": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 6.57,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n         \"Supports optional use of -states to filter nodes \" +\n         \"based on node state, all -all to list all nodes.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n         \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n     nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n     opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n     int exitCode \u003d -1;\n     CommandLine cliParser \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       sysout.println(\"Missing argument for options\");\n       printUsage(opts);\n       return exitCode;\n     }\n \n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n-              nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n+              nodeStates.add(NodeState.valueOf(\n+                  org.apache.hadoop.util.StringUtils.toUpperCase(type.trim())));\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n       listClusterNodes(nodeStates);\n     } else if (cliParser.hasOption(HELP_CMD)) {\n       printUsage(opts);\n       return 0;\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              nodeStates.add(NodeState.valueOf(\n                  org.apache.hadoop.util.StringUtils.toUpperCase(type.trim())));\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n      listClusterNodes(nodeStates);\n    } else if (cliParser.hasOption(HELP_CMD)) {\n      printUsage(opts);\n      return 0;\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "9cedad11d8d2197a54732667a15344983de5c437": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\"\n\nThis reverts commit 946456c6d88780abe0251b098dd771e9e1e93ab3.\n\nConflicts:\n\thadoop-common-project/hadoop-common/CHANGES.txt\n\thadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/QuotaByStorageTypeEntry.java\n",
      "commitDate": "24/02/15 7:32 AM",
      "commitName": "9cedad11d8d2197a54732667a15344983de5c437",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "23/02/15 10:34 PM",
      "commitNameOld": "b610c68d4423a5a1ab342dc490cd0064f8983c07",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 0.37,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,63 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n         \"Supports optional use of -states to filter nodes \" +\n         \"based on node state, all -all to list all nodes.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n         \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n     nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n     opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n     int exitCode \u003d -1;\n     CommandLine cliParser \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       sysout.println(\"Missing argument for options\");\n       printUsage(opts);\n       return exitCode;\n     }\n \n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n-              nodeStates.add(\n-                  NodeState.valueOf(type.trim().toUpperCase(Locale.ENGLISH)));\n+              nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n       listClusterNodes(nodeStates);\n     } else if (cliParser.hasOption(HELP_CMD)) {\n       printUsage(opts);\n       return 0;\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n      listClusterNodes(nodeStates);\n    } else if (cliParser.hasOption(HELP_CMD)) {\n      printUsage(opts);\n      return 0;\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "b610c68d4423a5a1ab342dc490cd0064f8983c07": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2797. Add -help to yarn logs and nodes CLI command. Contributed by\nJagadesh Kiran N.\n",
      "commitDate": "23/02/15 10:34 PM",
      "commitName": "b610c68d4423a5a1ab342dc490cd0064f8983c07",
      "commitAuthor": "Devaraj K",
      "commitDateOld": "18/02/15 8:06 PM",
      "commitNameOld": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthorOld": "Tsuyoshi Ozawa",
      "daysBetweenCommits": 5.1,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,64 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n+    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n         \"Supports optional use of -states to filter nodes \" +\n         \"based on node state, all -all to list all nodes.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n         \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n     nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n     opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n     int exitCode \u003d -1;\n     CommandLine cliParser \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       sysout.println(\"Missing argument for options\");\n       printUsage(opts);\n       return exitCode;\n     }\n \n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n               nodeStates.add(\n                   NodeState.valueOf(type.trim().toUpperCase(Locale.ENGLISH)));\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n       listClusterNodes(nodeStates);\n+    } else if (cliParser.hasOption(HELP_CMD)) {\n+      printUsage(opts);\n+      return 0;\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(HELP_CMD, false, \"Displays help for all commands.\");\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              nodeStates.add(\n                  NodeState.valueOf(type.trim().toUpperCase(Locale.ENGLISH)));\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n      listClusterNodes(nodeStates);\n    } else if (cliParser.hasOption(HELP_CMD)) {\n      printUsage(opts);\n      return 0;\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "946456c6d88780abe0251b098dd771e9e1e93ab3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11602. Fix toUpperCase/toLowerCase to use Locale.ENGLISH. (ozawa)\n",
      "commitDate": "18/02/15 8:06 PM",
      "commitName": "946456c6d88780abe0251b098dd771e9e1e93ab3",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "23/12/14 8:04 PM",
      "commitNameOld": "d468c9aaf15e977f12e6214b47996412c907e069",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 57.0,
      "commitsBetweenForRepo": 432,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,60 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n         \"Supports optional use of -states to filter nodes \" +\n         \"based on node state, all -all to list all nodes.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n         \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n     nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n     opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n     int exitCode \u003d -1;\n     CommandLine cliParser \u003d null;\n     try {\n       cliParser \u003d new GnuParser().parse(opts, args);\n     } catch (MissingArgumentException ex) {\n       sysout.println(\"Missing argument for options\");\n       printUsage(opts);\n       return exitCode;\n     }\n \n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n-              nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n+              nodeStates.add(\n+                  NodeState.valueOf(type.trim().toUpperCase(Locale.ENGLISH)));\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n       listClusterNodes(nodeStates);\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              nodeStates.add(\n                  NodeState.valueOf(type.trim().toUpperCase(Locale.ENGLISH)));\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n      listClusterNodes(nodeStates);\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "6d100eb79409cbca70a22ada705dedf6658545e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1117. Improved help messages for \"yarn application\" and \"yarn node\" commands. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1519117 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/08/13 4:26 PM",
      "commitName": "6d100eb79409cbca70a22ada705dedf6658545e3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "27/08/13 10:46 PM",
      "commitNameOld": "53f559dd797e1bf3bd144a5721615eafc055e005",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.74,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,50 +1,59 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n     opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n-        \"Supports optional use of --states to filter nodes \" +\n-        \"based on node state, all --all to list all nodes.\");\n+        \"Supports optional use of -states to filter nodes \" +\n+        \"based on node state, all -all to list all nodes.\");\n     Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n-        \"Works with -list to filter nodes based on their states.\");\n+        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n     nodeStateOpt.setValueSeparator(\u0027,\u0027);\n     nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n-    nodeStateOpt.setArgName(\"Comma-separated list of node states\");\n+    nodeStateOpt.setArgName(\"States\");\n     opts.addOption(nodeStateOpt);\n     Option allOpt \u003d new Option(NODE_ALL, false,\n         \"Works with -list to list all nodes.\");\n     opts.addOption(allOpt);\n-    CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n+    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n \n     int exitCode \u003d -1;\n+    CommandLine cliParser \u003d null;\n+    try {\n+      cliParser \u003d new GnuParser().parse(opts, args);\n+    } catch (MissingArgumentException ex) {\n+      sysout.println(\"Missing argument for options\");\n+      printUsage(opts);\n+      return exitCode;\n+    }\n+\n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n       if (cliParser.hasOption(NODE_ALL)) {\n         for (NodeState state : NodeState.values()) {\n           nodeStates.add(state);\n         }\n       } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n         String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n         if (types !\u003d null) {\n           for (String type : types) {\n             if (!type.trim().isEmpty()) {\n               nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n             }\n           }\n         }\n       } else {\n         nodeStates.add(NodeState.RUNNING);\n       }\n       listClusterNodes(nodeStates);\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of -states to filter nodes \" +\n        \"based on node state, all -all to list all nodes.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on input comma-separated list of node states.\");\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"States\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    opts.getOption(STATUS_CMD).setArgName(\"NodeId\");\n\n    int exitCode \u003d -1;\n    CommandLine cliParser \u003d null;\n    try {\n      cliParser \u003d new GnuParser().parse(opts, args);\n    } catch (MissingArgumentException ex) {\n      sysout.println(\"Missing argument for options\");\n      printUsage(opts);\n      return exitCode;\n    }\n\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n      listClusterNodes(nodeStates);\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "d912eea82221ec9851a4dab3a6473a05a4b8dded": {
      "type": "Ybodychange",
      "commitMessage": "YARN-905. Add state filters to nodes CLI (Wei Yan via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1517083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/08/13 3:46 PM",
      "commitName": "d912eea82221ec9851a4dab3a6473a05a4b8dded",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "29/07/13 12:34 AM",
      "commitNameOld": "13b526b15f7e967d55d2c9ca75d98f0d8b174531",
      "commitAuthorOld": "Luke Lu",
      "daysBetweenCommits": 25.63,
      "commitsBetweenForRepo": 168,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,50 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n-    opts.addOption(LIST_CMD, false, \"Lists all the nodes in the RUNNING state.\");\n+    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n+        \"Supports optional use of --states to filter nodes \" +\n+        \"based on node state, all --all to list all nodes.\");\n+    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n+        \"Works with -list to filter nodes based on their states.\");\n+    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n+    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n+    nodeStateOpt.setArgName(\"Comma-separated list of node states\");\n+    opts.addOption(nodeStateOpt);\n+    Option allOpt \u003d new Option(NODE_ALL, false,\n+        \"Works with -list to list all nodes.\");\n+    opts.addOption(allOpt);\n     CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n \n     int exitCode \u003d -1;\n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n-      listClusterNodes();\n+      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n+      if (cliParser.hasOption(NODE_ALL)) {\n+        for (NodeState state : NodeState.values()) {\n+          nodeStates.add(state);\n+        }\n+      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n+        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n+        if (types !\u003d null) {\n+          for (String type : types) {\n+            if (!type.trim().isEmpty()) {\n+              nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n+            }\n+          }\n+        }\n+      } else {\n+        nodeStates.add(NodeState.RUNNING);\n+      }\n+      listClusterNodes(nodeStates);\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"List all running nodes. \" +\n        \"Supports optional use of --states to filter nodes \" +\n        \"based on node state, all --all to list all nodes.\");\n    Option nodeStateOpt \u003d new Option(NODE_STATE_CMD, true,\n        \"Works with -list to filter nodes based on their states.\");\n    nodeStateOpt.setValueSeparator(\u0027,\u0027);\n    nodeStateOpt.setArgs(Option.UNLIMITED_VALUES);\n    nodeStateOpt.setArgName(\"Comma-separated list of node states\");\n    opts.addOption(nodeStateOpt);\n    Option allOpt \u003d new Option(NODE_ALL, false,\n        \"Works with -list to list all nodes.\");\n    opts.addOption(allOpt);\n    CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n    int exitCode \u003d -1;\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      Set\u003cNodeState\u003e nodeStates \u003d new HashSet\u003cNodeState\u003e();\n      if (cliParser.hasOption(NODE_ALL)) {\n        for (NodeState state : NodeState.values()) {\n          nodeStates.add(state);\n        }\n      } else if (cliParser.hasOption(NODE_STATE_CMD)) {\n        String[] types \u003d cliParser.getOptionValues(NODE_STATE_CMD);\n        if (types !\u003d null) {\n          for (String type : types) {\n            if (!type.trim().isEmpty()) {\n              nodeStates.add(NodeState.valueOf(type.trim().toUpperCase()));\n            }\n          }\n        }\n      } else {\n        nodeStates.add(NodeState.RUNNING);\n      }\n      listClusterNodes(nodeStates);\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "5e4f6ad1d9aa6df96af837600674af4467c1e99c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-791. Changed RM APIs and web-services related to nodes to ensure that both are consistent with each other. Contributed by Sandy Ryza.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1500994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/13 3:30 PM",
      "commitName": "5e4f6ad1d9aa6df96af837600674af4467c1e99c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 9:02 PM",
      "commitNameOld": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   public int run(String[] args) throws Exception {\n \n     Options opts \u003d new Options();\n     opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n-    opts.addOption(LIST_CMD, false, \"Lists all the nodes.\");\n+    opts.addOption(LIST_CMD, false, \"Lists all the nodes in the RUNNING state.\");\n     CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n \n     int exitCode \u003d -1;\n     if (cliParser.hasOption(\"status\")) {\n       if (args.length !\u003d 2) {\n         printUsage(opts);\n         return exitCode;\n       }\n       printNodeStatus(cliParser.getOptionValue(\"status\"));\n     } else if (cliParser.hasOption(\"list\")) {\n       listClusterNodes();\n     } else {\n       syserr.println(\"Invalid Command Usage : \");\n       printUsage(opts);\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"Lists all the nodes in the RUNNING state.\");\n    CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n    int exitCode \u003d -1;\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      listClusterNodes();\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java",
      "extendedDetails": {}
    },
    "331b1123fbb892524ecb58e551c20befd26c9ea9": {
      "type": "Yintroduced",
      "commitMessage": "YARN-40. Provided support for missing YARN commands Contributed by Devaraj K and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1395793 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/10/12 3:18 PM",
      "commitName": "331b1123fbb892524ecb58e551c20befd26c9ea9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,22 @@\n+  public int run(String[] args) throws Exception {\n+\n+    Options opts \u003d new Options();\n+    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n+    opts.addOption(LIST_CMD, false, \"Lists all the nodes.\");\n+    CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n+\n+    int exitCode \u003d -1;\n+    if (cliParser.hasOption(\"status\")) {\n+      if (args.length !\u003d 2) {\n+        printUsage(opts);\n+        return exitCode;\n+      }\n+      printNodeStatus(cliParser.getOptionValue(\"status\"));\n+    } else if (cliParser.hasOption(\"list\")) {\n+      listClusterNodes();\n+    } else {\n+      syserr.println(\"Invalid Command Usage : \");\n+      printUsage(opts);\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n\n    Options opts \u003d new Options();\n    opts.addOption(STATUS_CMD, true, \"Prints the status report of the node.\");\n    opts.addOption(LIST_CMD, false, \"Lists all the nodes.\");\n    CommandLine cliParser \u003d new GnuParser().parse(opts, args);\n\n    int exitCode \u003d -1;\n    if (cliParser.hasOption(\"status\")) {\n      if (args.length !\u003d 2) {\n        printUsage(opts);\n        return exitCode;\n      }\n      printNodeStatus(cliParser.getOptionValue(\"status\"));\n    } else if (cliParser.hasOption(\"list\")) {\n      listClusterNodes();\n    } else {\n      syserr.println(\"Invalid Command Usage : \");\n      printUsage(opts);\n    }\n    return 0;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/cli/NodeCLI.java"
    }
  }
}