{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IPCLoggerChannel.java",
  "functionName": "createProxy",
  "functionId": "createProxy",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/IPCLoggerChannel.java",
  "functionStartLine": 228,
  "functionEndLine": 252,
  "numCommitsSeen": 42,
  "timeTaken": 1448,
  "changeHistory": [
    "aa65777ef0480b74e99e0fa2f1077690cb3f3eda",
    "df801074c929d5414b92cc9fc0cc8a2794e02751",
    "3a53ef4a802b51e1d5f268f669cd112c03607755"
  ],
  "changeHistoryShort": {
    "aa65777ef0480b74e99e0fa2f1077690cb3f3eda": "Ybodychange",
    "df801074c929d5414b92cc9fc0cc8a2794e02751": "Ybodychange",
    "3a53ef4a802b51e1d5f268f669cd112c03607755": "Yintroduced"
  },
  "changeHistoryDetails": {
    "aa65777ef0480b74e99e0fa2f1077690cb3f3eda": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3898. QJM: enable TCP_NODELAY for IPC. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1383033 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/09/12 11:46 AM",
      "commitName": "aa65777ef0480b74e99e0fa2f1077690cb3f3eda",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "06/09/12 2:42 PM",
      "commitNameOld": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 3.88,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,25 @@\n   protected QJournalProtocol createProxy() throws IOException {\n+    final Configuration confCopy \u003d new Configuration(conf);\n+    \n+    // Need to set NODELAY or else batches larger than MTU can trigger \n+    // 40ms nagling delays.\n+    confCopy.setBoolean(\n+        CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n+        true);\n+    \n+    RPC.setProtocolEngine(confCopy,\n+        QJournalProtocolPB.class, ProtobufRpcEngine.class);\n     return SecurityUtil.doAsLoginUser(\n         new PrivilegedExceptionAction\u003cQJournalProtocol\u003e() {\n           @Override\n           public QJournalProtocol run() throws IOException {\n-            RPC.setProtocolEngine(conf,\n+            RPC.setProtocolEngine(confCopy,\n                 QJournalProtocolPB.class, ProtobufRpcEngine.class);\n             QJournalProtocolPB pbproxy \u003d RPC.getProxy(\n                 QJournalProtocolPB.class,\n                 RPC.getProtocolVersion(QJournalProtocolPB.class),\n-                addr, conf);\n+                addr, confCopy);\n             return new QJournalProtocolTranslatorPB(pbproxy);\n           }\n         });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected QJournalProtocol createProxy() throws IOException {\n    final Configuration confCopy \u003d new Configuration(conf);\n    \n    // Need to set NODELAY or else batches larger than MTU can trigger \n    // 40ms nagling delays.\n    confCopy.setBoolean(\n        CommonConfigurationKeysPublic.IPC_CLIENT_TCPNODELAY_KEY,\n        true);\n    \n    RPC.setProtocolEngine(confCopy,\n        QJournalProtocolPB.class, ProtobufRpcEngine.class);\n    return SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cQJournalProtocol\u003e() {\n          @Override\n          public QJournalProtocol run() throws IOException {\n            RPC.setProtocolEngine(confCopy,\n                QJournalProtocolPB.class, ProtobufRpcEngine.class);\n            QJournalProtocolPB pbproxy \u003d RPC.getProxy(\n                QJournalProtocolPB.class,\n                RPC.getProtocolVersion(QJournalProtocolPB.class),\n                addr, confCopy);\n            return new QJournalProtocolTranslatorPB(pbproxy);\n          }\n        });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/IPCLoggerChannel.java",
      "extendedDetails": {}
    },
    "df801074c929d5414b92cc9fc0cc8a2794e02751": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3893. QJM: Make QJM work with security enabled. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1381770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/09/12 2:42 PM",
      "commitName": "df801074c929d5414b92cc9fc0cc8a2794e02751",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "06/09/12 12:03 AM",
      "commitNameOld": "cae8116a146cb27d40e4e41cece9a17945bc7f9c",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.61,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,9 +1,15 @@\n   protected QJournalProtocol createProxy() throws IOException {\n-    RPC.setProtocolEngine(conf,\n-        QJournalProtocolPB.class, ProtobufRpcEngine.class);\n-    QJournalProtocolPB pbproxy \u003d RPC.getProxy(\n-        QJournalProtocolPB.class,\n-        RPC.getProtocolVersion(QJournalProtocolPB.class),\n-        addr, conf);\n-    return new QJournalProtocolTranslatorPB(pbproxy);\n+    return SecurityUtil.doAsLoginUser(\n+        new PrivilegedExceptionAction\u003cQJournalProtocol\u003e() {\n+          @Override\n+          public QJournalProtocol run() throws IOException {\n+            RPC.setProtocolEngine(conf,\n+                QJournalProtocolPB.class, ProtobufRpcEngine.class);\n+            QJournalProtocolPB pbproxy \u003d RPC.getProxy(\n+                QJournalProtocolPB.class,\n+                RPC.getProtocolVersion(QJournalProtocolPB.class),\n+                addr, conf);\n+            return new QJournalProtocolTranslatorPB(pbproxy);\n+          }\n+        });\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected QJournalProtocol createProxy() throws IOException {\n    return SecurityUtil.doAsLoginUser(\n        new PrivilegedExceptionAction\u003cQJournalProtocol\u003e() {\n          @Override\n          public QJournalProtocol run() throws IOException {\n            RPC.setProtocolEngine(conf,\n                QJournalProtocolPB.class, ProtobufRpcEngine.class);\n            QJournalProtocolPB pbproxy \u003d RPC.getProxy(\n                QJournalProtocolPB.class,\n                RPC.getProtocolVersion(QJournalProtocolPB.class),\n                addr, conf);\n            return new QJournalProtocolTranslatorPB(pbproxy);\n          }\n        });\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/IPCLoggerChannel.java",
      "extendedDetails": {}
    },
    "3a53ef4a802b51e1d5f268f669cd112c03607755": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3741. Exhaustive failure injection test for skipped RPCs. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-3077@1370497 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 1:24 PM",
      "commitName": "3a53ef4a802b51e1d5f268f669cd112c03607755",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,9 @@\n+  protected QJournalProtocol createProxy() throws IOException {\n+    RPC.setProtocolEngine(conf,\n+        QJournalProtocolPB.class, ProtobufRpcEngine.class);\n+    QJournalProtocolPB pbproxy \u003d RPC.getProxy(\n+        QJournalProtocolPB.class,\n+        RPC.getProtocolVersion(QJournalProtocolPB.class),\n+        addr, conf);\n+    return new QJournalProtocolTranslatorPB(pbproxy);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected QJournalProtocol createProxy() throws IOException {\n    RPC.setProtocolEngine(conf,\n        QJournalProtocolPB.class, ProtobufRpcEngine.class);\n    QJournalProtocolPB pbproxy \u003d RPC.getProxy(\n        QJournalProtocolPB.class,\n        RPC.getProtocolVersion(QJournalProtocolPB.class),\n        addr, conf);\n    return new QJournalProtocolTranslatorPB(pbproxy);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/client/IPCLoggerChannel.java"
    }
  }
}