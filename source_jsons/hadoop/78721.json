{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ViewFileSystemOverloadScheme.java",
  "functionName": "newInstance",
  "functionId": "newInstance___theClass-Class__T____uri-URI__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java",
  "functionStartLine": 209,
  "functionEndLine": 226,
  "numCommitsSeen": 2,
  "timeTaken": 748,
  "changeHistory": [
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe"
  ],
  "changeHistoryShort": {
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-15305. Extend ViewFS and provide ViewFileSystemOverloadScheme implementation with scheme configurable. Contributed by Uma Maheswara Rao G.\n\n",
      "commitDate": "04/05/20 5:55 PM",
      "commitName": "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,19 @@\n+      private \u003cT\u003e T newInstance(Class\u003cT\u003e theClass, URI uri,\n+          Configuration conf) {\n+        T result;\n+        try {\n+          Constructor\u003cT\u003e meth \u003d theClass.getConstructor();\n+          meth.setAccessible(true);\n+          result \u003d meth.newInstance();\n+        } catch (InvocationTargetException e) {\n+          Throwable cause \u003d e.getCause();\n+          if (cause instanceof RuntimeException) {\n+            throw (RuntimeException) cause;\n+          } else {\n+            throw new RuntimeException(cause);\n+          }\n+        } catch (Exception e) {\n+          throw new RuntimeException(e);\n+        }\n+        return result;\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      private \u003cT\u003e T newInstance(Class\u003cT\u003e theClass, URI uri,\n          Configuration conf) {\n        T result;\n        try {\n          Constructor\u003cT\u003e meth \u003d theClass.getConstructor();\n          meth.setAccessible(true);\n          result \u003d meth.newInstance();\n        } catch (InvocationTargetException e) {\n          Throwable cause \u003d e.getCause();\n          if (cause instanceof RuntimeException) {\n            throw (RuntimeException) cause;\n          } else {\n            throw new RuntimeException(cause);\n          }\n        } catch (Exception e) {\n          throw new RuntimeException(e);\n        }\n        return result;\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java"
    }
  }
}