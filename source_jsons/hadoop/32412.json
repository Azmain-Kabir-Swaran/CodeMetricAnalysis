{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMLogAggregationStatusTracker.java",
  "functionName": "pullCachedLogAggregationReports",
  "functionId": "pullCachedLogAggregationReports",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/logaggregation/tracker/NMLogAggregationStatusTracker.java",
  "functionStartLine": 164,
  "functionEndLine": 188,
  "numCommitsSeen": 2,
  "timeTaken": 1512,
  "changeHistory": [
    "2b39ad26984d641bad57db2cfcc0b7515ef95f46",
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2"
  ],
  "changeHistoryShort": {
    "2b39ad26984d641bad57db2cfcc0b7515ef95f46": "Ybodychange",
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2b39ad26984d641bad57db2cfcc0b7515ef95f46": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8584. Several typos in Log Aggregation related classes. Contributed by Szilard Nemeth.\n",
      "commitDate": "30/07/18 10:55 AM",
      "commitName": "2b39ad26984d641bad57db2cfcc0b7515ef95f46",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "15/03/18 1:26 PM",
      "commitNameOld": "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 136.89,
      "commitsBetweenForRepo": 1564,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public List\u003cLogAggregationReport\u003e pullCachedLogAggregationReports() {\n     List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003c\u003e();\n     if (disabled) {\n-      LOG.warn(\"The log aggregation is diabled.\"\n+      LOG.warn(\"The log aggregation is disabled.\"\n           + \"There is no cached log aggregation status.\");\n       return reports;\n     }\n     // When we pull cached Log aggregation reports for all application in\n     // this NM, we should make sure that we need to block all of the\n     // updateLogAggregationStatus calls. So, the writeLocker is used here.\n     this.writeLocker.lock();\n     try {\n       for(Entry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e tracker :\n           recoveryStatuses.entrySet()) {\n         AppLogAggregationStatusForRMRecovery current \u003d tracker.getValue();\n         LogAggregationReport report \u003d LogAggregationReport.newInstance(\n             tracker.getKey(), current.getLogAggregationStatus(),\n             current.getDiagnosis());\n         reports.add(report);\n       }\n       return reports;\n     } finally {\n       this.writeLocker.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cLogAggregationReport\u003e pullCachedLogAggregationReports() {\n    List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003c\u003e();\n    if (disabled) {\n      LOG.warn(\"The log aggregation is disabled.\"\n          + \"There is no cached log aggregation status.\");\n      return reports;\n    }\n    // When we pull cached Log aggregation reports for all application in\n    // this NM, we should make sure that we need to block all of the\n    // updateLogAggregationStatus calls. So, the writeLocker is used here.\n    this.writeLocker.lock();\n    try {\n      for(Entry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e tracker :\n          recoveryStatuses.entrySet()) {\n        AppLogAggregationStatusForRMRecovery current \u003d tracker.getValue();\n        LogAggregationReport report \u003d LogAggregationReport.newInstance(\n            tracker.getKey(), current.getLogAggregationStatus(),\n            current.getDiagnosis());\n        reports.add(report);\n      }\n      return reports;\n    } finally {\n      this.writeLocker.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/logaggregation/tracker/NMLogAggregationStatusTracker.java",
      "extendedDetails": {}
    },
    "4bf622043f034835d65ff2a4785b9b06d0ef1fd2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7952. RM should be able to recover log aggregation status after restart/fail-over. (Xuan Gong via wangda)\n\nChange-Id: I725c9afe64831eda0aa6b0bebdbc79d2dd165707\n",
      "commitDate": "15/03/18 1:26 PM",
      "commitName": "4bf622043f034835d65ff2a4785b9b06d0ef1fd2",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,25 @@\n+  public List\u003cLogAggregationReport\u003e pullCachedLogAggregationReports() {\n+    List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003c\u003e();\n+    if (disabled) {\n+      LOG.warn(\"The log aggregation is diabled.\"\n+          + \"There is no cached log aggregation status.\");\n+      return reports;\n+    }\n+    // When we pull cached Log aggregation reports for all application in\n+    // this NM, we should make sure that we need to block all of the\n+    // updateLogAggregationStatus calls. So, the writeLocker is used here.\n+    this.writeLocker.lock();\n+    try {\n+      for(Entry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e tracker :\n+          recoveryStatuses.entrySet()) {\n+        AppLogAggregationStatusForRMRecovery current \u003d tracker.getValue();\n+        LogAggregationReport report \u003d LogAggregationReport.newInstance(\n+            tracker.getKey(), current.getLogAggregationStatus(),\n+            current.getDiagnosis());\n+        reports.add(report);\n+      }\n+      return reports;\n+    } finally {\n+      this.writeLocker.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cLogAggregationReport\u003e pullCachedLogAggregationReports() {\n    List\u003cLogAggregationReport\u003e reports \u003d new ArrayList\u003c\u003e();\n    if (disabled) {\n      LOG.warn(\"The log aggregation is diabled.\"\n          + \"There is no cached log aggregation status.\");\n      return reports;\n    }\n    // When we pull cached Log aggregation reports for all application in\n    // this NM, we should make sure that we need to block all of the\n    // updateLogAggregationStatus calls. So, the writeLocker is used here.\n    this.writeLocker.lock();\n    try {\n      for(Entry\u003cApplicationId, AppLogAggregationStatusForRMRecovery\u003e tracker :\n          recoveryStatuses.entrySet()) {\n        AppLogAggregationStatusForRMRecovery current \u003d tracker.getValue();\n        LogAggregationReport report \u003d LogAggregationReport.newInstance(\n            tracker.getKey(), current.getLogAggregationStatus(),\n            current.getDiagnosis());\n        reports.add(report);\n      }\n      return reports;\n    } finally {\n      this.writeLocker.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/logaggregation/tracker/NMLogAggregationStatusTracker.java"
    }
  }
}