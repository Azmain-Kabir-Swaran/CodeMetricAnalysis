{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NvidiaDockerV1CommandPlugin.java",
  "functionName": "getCreateDockerVolumeCommand",
  "functionId": "getCreateDockerVolumeCommand___container-Container",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/NvidiaDockerV1CommandPlugin.java",
  "functionStartLine": 271,
  "functionEndLine": 306,
  "numCommitsSeen": 3,
  "timeTaken": 2081,
  "changeHistory": [
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5"
  ],
  "changeHistoryShort": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": "Ybodychange",
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063": "Ybodychange",
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9363.  Replaced debug logging with SLF4J parameterized log message.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "18/03/19 10:57 AM",
      "commitName": "5f6e22516668ff94a76737ad5e2cdcb2ff9f6dfd",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "01/12/17 12:06 AM",
      "commitNameOld": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 472.41,
      "commitsBetweenForRepo": 4098,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,36 @@\n   public DockerVolumeCommand getCreateDockerVolumeCommand(Container container)\n       throws ContainerExecutionException {\n     if (!initializeWhenGpuRequested(container)) {\n       return null;\n     }\n \n     String newVolumeName \u003d null;\n \n     // Get volume name\n     Set\u003cString\u003e mounts \u003d additionalCommands.get(MOUNT_RO_OPTION);\n     for (String mount : mounts) {\n       int idx \u003d mount.indexOf(\u0027:\u0027);\n       if (idx \u003e\u003d 0) {\n         String mountSource \u003d mount.substring(0, idx);\n         if (VOLUME_NAME_PATTERN.matcher(mountSource).matches()) {\n           // This is a valid named volume\n           newVolumeName \u003d mountSource;\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Found volume name for GPU:\" + newVolumeName);\n-          }\n+          LOG.debug(\"Found volume name for GPU:{}\", newVolumeName);\n           break;\n         } else{\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Failed to match \" + mountSource\n-                + \" to named-volume regex pattern\");\n-          }\n+          LOG.debug(\"Failed to match {} to named-volume regex pattern\",\n+              mountSource);\n         }\n       }\n     }\n \n     if (newVolumeName !\u003d null) {\n       DockerVolumeCommand command \u003d new DockerVolumeCommand(\n           DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND);\n       command.setDriverName(volumeDriver);\n       command.setVolumeName(newVolumeName);\n       return command;\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DockerVolumeCommand getCreateDockerVolumeCommand(Container container)\n      throws ContainerExecutionException {\n    if (!initializeWhenGpuRequested(container)) {\n      return null;\n    }\n\n    String newVolumeName \u003d null;\n\n    // Get volume name\n    Set\u003cString\u003e mounts \u003d additionalCommands.get(MOUNT_RO_OPTION);\n    for (String mount : mounts) {\n      int idx \u003d mount.indexOf(\u0027:\u0027);\n      if (idx \u003e\u003d 0) {\n        String mountSource \u003d mount.substring(0, idx);\n        if (VOLUME_NAME_PATTERN.matcher(mountSource).matches()) {\n          // This is a valid named volume\n          newVolumeName \u003d mountSource;\n          LOG.debug(\"Found volume name for GPU:{}\", newVolumeName);\n          break;\n        } else{\n          LOG.debug(\"Failed to match {} to named-volume regex pattern\",\n              mountSource);\n        }\n      }\n    }\n\n    if (newVolumeName !\u003d null) {\n      DockerVolumeCommand command \u003d new DockerVolumeCommand(\n          DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND);\n      command.setDriverName(volumeDriver);\n      command.setVolumeName(newVolumeName);\n      return command;\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/NvidiaDockerV1CommandPlugin.java",
      "extendedDetails": {}
    },
    "556aea3f367bdbd4e4db601bea0ca9bf2adde063": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7487. Ensure volume to include GPU base libraries after created by plugin. Contributed by Wangda Tan.\n",
      "commitDate": "01/12/17 12:06 AM",
      "commitName": "556aea3f367bdbd4e4db601bea0ca9bf2adde063",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/10/17 10:38 PM",
      "commitNameOld": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 33.1,
      "commitsBetweenForRepo": 273,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,40 @@\n   public DockerVolumeCommand getCreateDockerVolumeCommand(Container container)\n       throws ContainerExecutionException {\n     if (!initializeWhenGpuRequested(container)) {\n       return null;\n     }\n \n     String newVolumeName \u003d null;\n \n     // Get volume name\n     Set\u003cString\u003e mounts \u003d additionalCommands.get(MOUNT_RO_OPTION);\n     for (String mount : mounts) {\n       int idx \u003d mount.indexOf(\u0027:\u0027);\n       if (idx \u003e\u003d 0) {\n         String mountSource \u003d mount.substring(0, idx);\n         if (VOLUME_NAME_PATTERN.matcher(mountSource).matches()) {\n           // This is a valid named volume\n           newVolumeName \u003d mountSource;\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Found volume name for GPU:\" + newVolumeName);\n           }\n           break;\n         } else{\n           if (LOG.isDebugEnabled()) {\n             LOG.debug(\"Failed to match \" + mountSource\n                 + \" to named-volume regex pattern\");\n           }\n         }\n       }\n     }\n \n     if (newVolumeName !\u003d null) {\n       DockerVolumeCommand command \u003d new DockerVolumeCommand(\n-          DockerVolumeCommand.VOLUME_CREATE_COMMAND);\n+          DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND);\n       command.setDriverName(volumeDriver);\n       command.setVolumeName(newVolumeName);\n       return command;\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DockerVolumeCommand getCreateDockerVolumeCommand(Container container)\n      throws ContainerExecutionException {\n    if (!initializeWhenGpuRequested(container)) {\n      return null;\n    }\n\n    String newVolumeName \u003d null;\n\n    // Get volume name\n    Set\u003cString\u003e mounts \u003d additionalCommands.get(MOUNT_RO_OPTION);\n    for (String mount : mounts) {\n      int idx \u003d mount.indexOf(\u0027:\u0027);\n      if (idx \u003e\u003d 0) {\n        String mountSource \u003d mount.substring(0, idx);\n        if (VOLUME_NAME_PATTERN.matcher(mountSource).matches()) {\n          // This is a valid named volume\n          newVolumeName \u003d mountSource;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found volume name for GPU:\" + newVolumeName);\n          }\n          break;\n        } else{\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Failed to match \" + mountSource\n                + \" to named-volume regex pattern\");\n          }\n        }\n      }\n    }\n\n    if (newVolumeName !\u003d null) {\n      DockerVolumeCommand command \u003d new DockerVolumeCommand(\n          DockerVolumeCommand.VOLUME_CREATE_SUB_COMMAND);\n      command.setDriverName(volumeDriver);\n      command.setVolumeName(newVolumeName);\n      return command;\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/NvidiaDockerV1CommandPlugin.java",
      "extendedDetails": {}
    },
    "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7224. Support GPU isolation for docker container. Contributed by Wangda Tan.\n",
      "commitDate": "28/10/17 10:38 PM",
      "commitName": "9114d7a5a0159bbe70e9c289dbe1fc5db9101db5",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,40 @@\n+  public DockerVolumeCommand getCreateDockerVolumeCommand(Container container)\n+      throws ContainerExecutionException {\n+    if (!initializeWhenGpuRequested(container)) {\n+      return null;\n+    }\n+\n+    String newVolumeName \u003d null;\n+\n+    // Get volume name\n+    Set\u003cString\u003e mounts \u003d additionalCommands.get(MOUNT_RO_OPTION);\n+    for (String mount : mounts) {\n+      int idx \u003d mount.indexOf(\u0027:\u0027);\n+      if (idx \u003e\u003d 0) {\n+        String mountSource \u003d mount.substring(0, idx);\n+        if (VOLUME_NAME_PATTERN.matcher(mountSource).matches()) {\n+          // This is a valid named volume\n+          newVolumeName \u003d mountSource;\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Found volume name for GPU:\" + newVolumeName);\n+          }\n+          break;\n+        } else{\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\"Failed to match \" + mountSource\n+                + \" to named-volume regex pattern\");\n+          }\n+        }\n+      }\n+    }\n+\n+    if (newVolumeName !\u003d null) {\n+      DockerVolumeCommand command \u003d new DockerVolumeCommand(\n+          DockerVolumeCommand.VOLUME_CREATE_COMMAND);\n+      command.setDriverName(volumeDriver);\n+      command.setVolumeName(newVolumeName);\n+      return command;\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DockerVolumeCommand getCreateDockerVolumeCommand(Container container)\n      throws ContainerExecutionException {\n    if (!initializeWhenGpuRequested(container)) {\n      return null;\n    }\n\n    String newVolumeName \u003d null;\n\n    // Get volume name\n    Set\u003cString\u003e mounts \u003d additionalCommands.get(MOUNT_RO_OPTION);\n    for (String mount : mounts) {\n      int idx \u003d mount.indexOf(\u0027:\u0027);\n      if (idx \u003e\u003d 0) {\n        String mountSource \u003d mount.substring(0, idx);\n        if (VOLUME_NAME_PATTERN.matcher(mountSource).matches()) {\n          // This is a valid named volume\n          newVolumeName \u003d mountSource;\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Found volume name for GPU:\" + newVolumeName);\n          }\n          break;\n        } else{\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Failed to match \" + mountSource\n                + \" to named-volume regex pattern\");\n          }\n        }\n      }\n    }\n\n    if (newVolumeName !\u003d null) {\n      DockerVolumeCommand command \u003d new DockerVolumeCommand(\n          DockerVolumeCommand.VOLUME_CREATE_COMMAND);\n      command.setDriverName(volumeDriver);\n      command.setVolumeName(newVolumeName);\n      return command;\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/resourceplugin/gpu/NvidiaDockerV1CommandPlugin.java"
    }
  }
}