{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormatPBINode.java",
  "functionName": "buildINodeFile",
  "functionId": "buildINodeFile___file-INodeFileAttributes__state-SaverContext(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
  "functionStartLine": 638,
  "functionEndLine": 663,
  "numCommitsSeen": 63,
  "timeTaken": 4204,
  "changeHistory": [
    "b60ca37914b22550e3630fa02742d40697decb31",
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
    "a2a5d7b5bca715835d92816e7b267b59f7270708",
    "7e091de1366f4b57b5433bc19d738199dc05313d",
    "bb84f1fccb18c6c7373851e05d2451d55e908242",
    "3e2a0b5446bce51871ab3e1262a0ac6bd365e94f",
    "042b33f20b01aadb5cd03da731ae7a3d94026aac",
    "6f41baa6233dad92865af23ec6b7a89733c11ddd",
    "ac23a55547716df29b3e25c98a113399e184d9d1"
  ],
  "changeHistoryShort": {
    "b60ca37914b22550e3630fa02742d40697decb31": "Ybodychange",
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": "Ybodychange",
    "a2a5d7b5bca715835d92816e7b267b59f7270708": "Ybodychange",
    "7e091de1366f4b57b5433bc19d738199dc05313d": "Ybodychange",
    "bb84f1fccb18c6c7373851e05d2451d55e908242": "Ybodychange",
    "3e2a0b5446bce51871ab3e1262a0ac6bd365e94f": "Ybodychange",
    "042b33f20b01aadb5cd03da731ae7a3d94026aac": "Ybodychange",
    "6f41baa6233dad92865af23ec6b7a89733c11ddd": "Ybodychange",
    "ac23a55547716df29b3e25c98a113399e184d9d1": "Ybodychange"
  },
  "changeHistoryDetails": {
    "b60ca37914b22550e3630fa02742d40697decb31": {
      "type": "Ybodychange",
      "commitMessage": "Fix potential FSImage corruption. Contributed by Daryn Sharp.\n",
      "commitDate": "15/10/18 3:18 AM",
      "commitName": "b60ca37914b22550e3630fa02742d40697decb31",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 38.52,
      "commitsBetweenForRepo": 414,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n-          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n+          .setPermission(buildPermissionStatus(file))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n           .setStoragePolicyID(file.getLocalStoragePolicyID())\n           .setBlockType(PBHelperClient.convert(file.getBlockType()));\n \n       if (file.isStriped()) {\n         b.setErasureCodingPolicyID(file.getErasureCodingPolicyID());\n       } else {\n         b.setReplication(file.getFileReplication());\n       }\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n-        b.setAcl(buildAclEntries(f, state.getStringMap()));\n+        b.setAcl(buildAclEntries(f));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n-        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n+        b.setXAttrs(buildXAttrs(xAttrFeature));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setStoragePolicyID(file.getLocalStoragePolicyID())\n          .setBlockType(PBHelperClient.convert(file.getBlockType()));\n\n      if (file.isStriped()) {\n        b.setErasureCodingPolicyID(file.getErasureCodingPolicyID());\n      } else {\n        b.setReplication(file.getFileReplication());\n      }\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "55c07bbed2f475f7b584a86112ee1b6fe0221e98": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11382. Persist Erasure Coding Policy ID in a new optional field in INodeFile in FSImage. Contributed by Manoj Govindassamy.\n",
      "commitDate": "27/02/17 5:07 PM",
      "commitName": "55c07bbed2f475f7b584a86112ee1b6fe0221e98",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "19/01/17 12:24 AM",
      "commitNameOld": "a8f1c7f542963f66849bcb2a06893c6a99cbe235",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 39.7,
      "commitsBetweenForRepo": 193,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,26 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n-          .setReplication(file.getFileReplication())\n           .setStoragePolicyID(file.getLocalStoragePolicyID())\n           .setBlockType(PBHelperClient.convert(file.getBlockType()));\n \n+      if (file.isStriped()) {\n+        b.setErasureCodingPolicyID(file.getErasureCodingPolicyID());\n+      } else {\n+        b.setReplication(file.getFileReplication());\n+      }\n+\n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n         b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setStoragePolicyID(file.getLocalStoragePolicyID())\n          .setBlockType(PBHelperClient.convert(file.getBlockType()));\n\n      if (file.isStriped()) {\n        b.setErasureCodingPolicyID(file.getErasureCodingPolicyID());\n      } else {\n        b.setReplication(file.getFileReplication());\n      }\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "a2a5d7b5bca715835d92816e7b267b59f7270708": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10759. Change fsimage bool isStriped from boolean to an enum. Contributed by Ewan Higgs.\n",
      "commitDate": "18/01/17 1:31 PM",
      "commitName": "a2a5d7b5bca715835d92816e7b267b59f7270708",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "15/08/16 3:28 PM",
      "commitNameOld": "864f878d5912c82f3204f1582cfb7eb7c9f1a1da",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 155.96,
      "commitsBetweenForRepo": 1028,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n           .setReplication(file.getFileReplication())\n           .setStoragePolicyID(file.getLocalStoragePolicyID())\n-          .setIsStriped(file.isStriped());\n+          .setBlockType(PBHelperClient.convert(file.getBlockType()));\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n         b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setReplication(file.getFileReplication())\n          .setStoragePolicyID(file.getLocalStoragePolicyID())\n          .setBlockType(PBHelperClient.convert(file.getBlockType()));\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "7e091de1366f4b57b5433bc19d738199dc05313d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8058. Erasure coding: use BlockInfo[] for both striped and contiguous blocks in INodeFile. Contributed by Zhe Zhang and Yi Liu.\n",
      "commitDate": "15/07/15 9:49 AM",
      "commitName": "7e091de1366f4b57b5433bc19d738199dc05313d",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "17/06/15 11:35 AM",
      "commitNameOld": "c12a974ccf5f52f63e4f825d8b4d2385953cd119",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 27.93,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n           .setReplication(file.getFileReplication())\n-          .setStoragePolicyID(file.getLocalStoragePolicyID());\n+          .setStoragePolicyID(file.getLocalStoragePolicyID())\n+          .setIsStriped(file.isStriped());\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n         b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setReplication(file.getFileReplication())\n          .setStoragePolicyID(file.getLocalStoragePolicyID())\n          .setIsStriped(file.isStriped());\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "bb84f1fccb18c6c7373851e05d2451d55e908242": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7159. Use block storage policy to set lazy persist preference. (Arpit Agarwal)\n",
      "commitDate": "29/09/14 10:27 PM",
      "commitName": "bb84f1fccb18c6c7373851e05d2451d55e908242",
      "commitAuthor": "arp",
      "commitDateOld": "18/09/14 10:26 PM",
      "commitNameOld": "f8bbf80067ac03400acae4655615c9808c538ca8",
      "commitAuthorOld": "",
      "daysBetweenCommits": 11.0,
      "commitsBetweenForRepo": 118,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,20 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n           .setReplication(file.getFileReplication())\n-          .setIsLazyPersist(file.getLazyPersistFlag())\n           .setStoragePolicyID(file.getLocalStoragePolicyID());\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n         b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setReplication(file.getFileReplication())\n          .setStoragePolicyID(file.getLocalStoragePolicyID());\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "3e2a0b5446bce51871ab3e1262a0ac6bd365e94f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6969. Archival Storage: INode#getStoragePolicyID should always return the latest storage policy. Contributed by Jing Zhao.\n",
      "commitDate": "01/09/14 5:56 PM",
      "commitName": "3e2a0b5446bce51871ab3e1262a0ac6bd365e94f",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "14/07/14 1:57 PM",
      "commitNameOld": "6f41baa6233dad92865af23ec6b7a89733c11ddd",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 49.17,
      "commitsBetweenForRepo": 383,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,20 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n           .setReplication(file.getFileReplication())\n-          .setStoragePolicyID(file.getStoragePolicyID());\n+          .setStoragePolicyID(file.getLocalStoragePolicyID());\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n         b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setReplication(file.getFileReplication())\n          .setStoragePolicyID(file.getLocalStoragePolicyID());\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "042b33f20b01aadb5cd03da731ae7a3d94026aac": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6922. Add LazyPersist flag to INodeFile, save it in FsImage and edit logs. (Arpit Agarwal)\n",
      "commitDate": "27/08/14 9:47 PM",
      "commitName": "042b33f20b01aadb5cd03da731ae7a3d94026aac",
      "commitAuthor": "arp",
      "commitDateOld": "22/06/14 12:39 AM",
      "commitNameOld": "1e89eba47d0f291b33fc26f9406231fc70b63a87",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 66.88,
      "commitsBetweenForRepo": 533,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n-          .setReplication(file.getFileReplication());\n+          .setReplication(file.getFileReplication())\n+          .setIsLazyPersist(file.getLazyPersistFlag());\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n         b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setReplication(file.getFileReplication())\n          .setIsLazyPersist(file.getLazyPersistFlag());\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "6f41baa6233dad92865af23ec6b7a89733c11ddd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6677. Change INodeFile and FSImage to support storage policy ID.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-6584@1610525 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/07/14 1:57 PM",
      "commitName": "6f41baa6233dad92865af23ec6b7a89733c11ddd",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "22/06/14 12:39 AM",
      "commitNameOld": "1e89eba47d0f291b33fc26f9406231fc70b63a87",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 22.55,
      "commitsBetweenForRepo": 129,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,20 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n-          .setReplication(file.getFileReplication());\n+          .setReplication(file.getFileReplication())\n+          .setStoragePolicyID(file.getStoragePolicyID());\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n       XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n       if (xAttrFeature !\u003d null) {\n         b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n       }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setReplication(file.getFileReplication())\n          .setStoragePolicyID(file.getStoragePolicyID());\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    },
    "ac23a55547716df29b3e25c98a113399e184d9d1": {
      "type": "Ybodychange",
      "commitMessage": "Merge HDFS-2006 HDFS XAttrs branch to Trunk\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596575 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 6:57 AM",
      "commitName": "ac23a55547716df29b3e25c98a113399e184d9d1",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "20/02/14 8:09 AM",
      "commitNameOld": "b23f6cc1f2dd779a683bd452b5ca014848a9b782",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 89.91,
      "commitsBetweenForRepo": 636,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,15 +1,19 @@\n     public static INodeSection.INodeFile.Builder buildINodeFile(\n         INodeFileAttributes file, final SaverContext state) {\n       INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n           .setAccessTime(file.getAccessTime())\n           .setModificationTime(file.getModificationTime())\n           .setPermission(buildPermissionStatus(file, state.getStringMap()))\n           .setPreferredBlockSize(file.getPreferredBlockSize())\n           .setReplication(file.getFileReplication());\n \n       AclFeature f \u003d file.getAclFeature();\n       if (f !\u003d null) {\n         b.setAcl(buildAclEntries(f, state.getStringMap()));\n       }\n+      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n+      if (xAttrFeature !\u003d null) {\n+        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n+      }\n       return b;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public static INodeSection.INodeFile.Builder buildINodeFile(\n        INodeFileAttributes file, final SaverContext state) {\n      INodeSection.INodeFile.Builder b \u003d INodeSection.INodeFile.newBuilder()\n          .setAccessTime(file.getAccessTime())\n          .setModificationTime(file.getModificationTime())\n          .setPermission(buildPermissionStatus(file, state.getStringMap()))\n          .setPreferredBlockSize(file.getPreferredBlockSize())\n          .setReplication(file.getFileReplication());\n\n      AclFeature f \u003d file.getAclFeature();\n      if (f !\u003d null) {\n        b.setAcl(buildAclEntries(f, state.getStringMap()));\n      }\n      XAttrFeature xAttrFeature \u003d file.getXAttrFeature();\n      if (xAttrFeature !\u003d null) {\n        b.setXAttrs(buildXAttrs(xAttrFeature, state.getStringMap()));\n      }\n      return b;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormatPBINode.java",
      "extendedDetails": {}
    }
  }
}