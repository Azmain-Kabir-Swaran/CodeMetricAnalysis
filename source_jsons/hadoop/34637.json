{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AuxiliaryServiceWithCustomClassLoader.java",
  "functionName": "getInstance",
  "functionId": "getInstance___conf-Configuration__className-String__appClassPath-String__systemClasses-String[]",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxiliaryServiceWithCustomClassLoader.java",
  "functionStartLine": 160,
  "functionEndLine": 173,
  "numCommitsSeen": 3,
  "timeTaken": 3620,
  "changeHistory": [
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
    "0bbe01f8d56191edfba3b50fb9f8859a0b3f826f"
  ],
  "changeHistoryShort": {
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": "Ymultichange(Yparameterchange,Ybodychange)",
    "0bbe01f8d56191edfba3b50fb9f8859a0b3f826f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c7a5a4435ec3098c2765e8ef53b7771e0532ff61": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.\n            Contributed by Billie Rinaldi\n",
      "commitDate": "18/12/18 2:05 PM",
      "commitName": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.\n            Contributed by Billie Rinaldi\n",
          "commitDate": "18/12/18 2:05 PM",
          "commitName": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/05/16 10:11 AM",
          "commitNameOld": "0bbe01f8d56191edfba3b50fb9f8859a0b3f826f",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 950.2,
          "commitsBetweenForRepo": 7302,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,14 @@\n   public static AuxiliaryServiceWithCustomClassLoader getInstance(\n-      Configuration conf, String className, String appClassPath)\n-      throws IOException, ClassNotFoundException {\n-    String[] systemClasses \u003d conf.getTrimmedStrings(String.format(\n-        YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES,\n-        className));\n+      Configuration conf, String className, String appClassPath, String[]\n+      systemClasses) throws IOException, ClassNotFoundException {\n     ClassLoader customClassLoader \u003d createAuxServiceClassLoader(\n         appClassPath, systemClasses);\n     Class\u003c?\u003e clazz \u003d Class.forName(className, true,\n         customClassLoader);\n     Class\u003c? extends AuxiliaryService\u003e sClass \u003d clazz.asSubclass(\n         AuxiliaryService.class);\n     AuxiliaryService wrapped \u003d ReflectionUtils.newInstance(sClass, conf);\n     return new AuxiliaryServiceWithCustomClassLoader(\n         className + \" with custom class loader\", wrapped,\n         customClassLoader);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AuxiliaryServiceWithCustomClassLoader getInstance(\n      Configuration conf, String className, String appClassPath, String[]\n      systemClasses) throws IOException, ClassNotFoundException {\n    ClassLoader customClassLoader \u003d createAuxServiceClassLoader(\n        appClassPath, systemClasses);\n    Class\u003c?\u003e clazz \u003d Class.forName(className, true,\n        customClassLoader);\n    Class\u003c? extends AuxiliaryService\u003e sClass \u003d clazz.asSubclass(\n        AuxiliaryService.class);\n    AuxiliaryService wrapped \u003d ReflectionUtils.newInstance(sClass, conf);\n    return new AuxiliaryServiceWithCustomClassLoader(\n        className + \" with custom class loader\", wrapped,\n        customClassLoader);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxiliaryServiceWithCustomClassLoader.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, className-String, appClassPath-String]",
            "newValue": "[conf-Configuration, className-String, appClassPath-String, systemClasses-String[]]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9075.  Add ability to register/remove auxiliary service without restart node manager.\n            Contributed by Billie Rinaldi\n",
          "commitDate": "18/12/18 2:05 PM",
          "commitName": "c7a5a4435ec3098c2765e8ef53b7771e0532ff61",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "12/05/16 10:11 AM",
          "commitNameOld": "0bbe01f8d56191edfba3b50fb9f8859a0b3f826f",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 950.2,
          "commitsBetweenForRepo": 7302,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,14 @@\n   public static AuxiliaryServiceWithCustomClassLoader getInstance(\n-      Configuration conf, String className, String appClassPath)\n-      throws IOException, ClassNotFoundException {\n-    String[] systemClasses \u003d conf.getTrimmedStrings(String.format(\n-        YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES,\n-        className));\n+      Configuration conf, String className, String appClassPath, String[]\n+      systemClasses) throws IOException, ClassNotFoundException {\n     ClassLoader customClassLoader \u003d createAuxServiceClassLoader(\n         appClassPath, systemClasses);\n     Class\u003c?\u003e clazz \u003d Class.forName(className, true,\n         customClassLoader);\n     Class\u003c? extends AuxiliaryService\u003e sClass \u003d clazz.asSubclass(\n         AuxiliaryService.class);\n     AuxiliaryService wrapped \u003d ReflectionUtils.newInstance(sClass, conf);\n     return new AuxiliaryServiceWithCustomClassLoader(\n         className + \" with custom class loader\", wrapped,\n         customClassLoader);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static AuxiliaryServiceWithCustomClassLoader getInstance(\n      Configuration conf, String className, String appClassPath, String[]\n      systemClasses) throws IOException, ClassNotFoundException {\n    ClassLoader customClassLoader \u003d createAuxServiceClassLoader(\n        appClassPath, systemClasses);\n    Class\u003c?\u003e clazz \u003d Class.forName(className, true,\n        customClassLoader);\n    Class\u003c? extends AuxiliaryService\u003e sClass \u003d clazz.asSubclass(\n        AuxiliaryService.class);\n    AuxiliaryService wrapped \u003d ReflectionUtils.newInstance(sClass, conf);\n    return new AuxiliaryServiceWithCustomClassLoader(\n        className + \" with custom class loader\", wrapped,\n        customClassLoader);\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxiliaryServiceWithCustomClassLoader.java",
          "extendedDetails": {}
        }
      ]
    },
    "0bbe01f8d56191edfba3b50fb9f8859a0b3f826f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4577. Enable aux services to have their own custom classpath/jar file (Xuan Gong via sale)\n",
      "commitDate": "12/05/16 10:11 AM",
      "commitName": "0bbe01f8d56191edfba3b50fb9f8859a0b3f826f",
      "commitAuthor": "Sangjin Lee",
      "diff": "@@ -0,0 +1,17 @@\n+  public static AuxiliaryServiceWithCustomClassLoader getInstance(\n+      Configuration conf, String className, String appClassPath)\n+      throws IOException, ClassNotFoundException {\n+    String[] systemClasses \u003d conf.getTrimmedStrings(String.format(\n+        YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES,\n+        className));\n+    ClassLoader customClassLoader \u003d createAuxServiceClassLoader(\n+        appClassPath, systemClasses);\n+    Class\u003c?\u003e clazz \u003d Class.forName(className, true,\n+        customClassLoader);\n+    Class\u003c? extends AuxiliaryService\u003e sClass \u003d clazz.asSubclass(\n+        AuxiliaryService.class);\n+    AuxiliaryService wrapped \u003d ReflectionUtils.newInstance(sClass, conf);\n+    return new AuxiliaryServiceWithCustomClassLoader(\n+        className + \" with custom class loader\", wrapped,\n+        customClassLoader);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static AuxiliaryServiceWithCustomClassLoader getInstance(\n      Configuration conf, String className, String appClassPath)\n      throws IOException, ClassNotFoundException {\n    String[] systemClasses \u003d conf.getTrimmedStrings(String.format(\n        YarnConfiguration.NM_AUX_SERVICES_SYSTEM_CLASSES,\n        className));\n    ClassLoader customClassLoader \u003d createAuxServiceClassLoader(\n        appClassPath, systemClasses);\n    Class\u003c?\u003e clazz \u003d Class.forName(className, true,\n        customClassLoader);\n    Class\u003c? extends AuxiliaryService\u003e sClass \u003d clazz.asSubclass(\n        AuxiliaryService.class);\n    AuxiliaryService wrapped \u003d ReflectionUtils.newInstance(sClass, conf);\n    return new AuxiliaryServiceWithCustomClassLoader(\n        className + \" with custom class loader\", wrapped,\n        customClassLoader);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/AuxiliaryServiceWithCustomClassLoader.java"
    }
  }
}