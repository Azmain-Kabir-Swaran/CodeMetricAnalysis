{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "AclTransformation.java",
  "functionName": "filterAclEntriesByAclSpec",
  "functionId": "filterAclEntriesByAclSpec___existingAcl-List__AclEntry____inAclSpec-List__AclEntry__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclTransformation.java",
  "functionStartLine": 79,
  "functionEndLine": 104,
  "numCommitsSeen": 8,
  "timeTaken": 769,
  "changeHistory": [
    "c6585675710aa800317ad35e6fdf95c50c559d68"
  ],
  "changeHistoryShort": {
    "c6585675710aa800317ad35e6fdf95c50c559d68": "Yintroduced"
  },
  "changeHistoryDetails": {
    "c6585675710aa800317ad35e6fdf95c50c559d68": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-5673. Implement logic for modification of ACLs. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1556090 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/14 4:47 PM",
      "commitName": "c6585675710aa800317ad35e6fdf95c50c559d68",
      "commitAuthor": "Chris Nauroth",
      "diff": "@@ -0,0 +1,26 @@\n+  public static List\u003cAclEntry\u003e filterAclEntriesByAclSpec(\n+      List\u003cAclEntry\u003e existingAcl, List\u003cAclEntry\u003e inAclSpec) throws AclException {\n+    ValidatedAclSpec aclSpec \u003d new ValidatedAclSpec(inAclSpec);\n+    ArrayList\u003cAclEntry\u003e aclBuilder \u003d Lists.newArrayListWithCapacity(MAX_ENTRIES);\n+    EnumMap\u003cAclEntryScope, AclEntry\u003e providedMask \u003d\n+      Maps.newEnumMap(AclEntryScope.class);\n+    EnumSet\u003cAclEntryScope\u003e maskDirty \u003d EnumSet.noneOf(AclEntryScope.class);\n+    EnumSet\u003cAclEntryScope\u003e scopeDirty \u003d EnumSet.noneOf(AclEntryScope.class);\n+    for (AclEntry existingEntry: existingAcl) {\n+      if (aclSpec.containsKey(existingEntry)) {\n+        scopeDirty.add(existingEntry.getScope());\n+        if (existingEntry.getType() \u003d\u003d MASK) {\n+          maskDirty.add(existingEntry.getScope());\n+        }\n+      } else {\n+        if (existingEntry.getType() \u003d\u003d MASK) {\n+          providedMask.put(existingEntry.getScope(), existingEntry);\n+        } else {\n+          aclBuilder.add(existingEntry);\n+        }\n+      }\n+    }\n+    copyDefaultsIfNeeded(aclBuilder);\n+    calculateMasks(aclBuilder, providedMask, maskDirty, scopeDirty);\n+    return buildAndValidateAcl(aclBuilder);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static List\u003cAclEntry\u003e filterAclEntriesByAclSpec(\n      List\u003cAclEntry\u003e existingAcl, List\u003cAclEntry\u003e inAclSpec) throws AclException {\n    ValidatedAclSpec aclSpec \u003d new ValidatedAclSpec(inAclSpec);\n    ArrayList\u003cAclEntry\u003e aclBuilder \u003d Lists.newArrayListWithCapacity(MAX_ENTRIES);\n    EnumMap\u003cAclEntryScope, AclEntry\u003e providedMask \u003d\n      Maps.newEnumMap(AclEntryScope.class);\n    EnumSet\u003cAclEntryScope\u003e maskDirty \u003d EnumSet.noneOf(AclEntryScope.class);\n    EnumSet\u003cAclEntryScope\u003e scopeDirty \u003d EnumSet.noneOf(AclEntryScope.class);\n    for (AclEntry existingEntry: existingAcl) {\n      if (aclSpec.containsKey(existingEntry)) {\n        scopeDirty.add(existingEntry.getScope());\n        if (existingEntry.getType() \u003d\u003d MASK) {\n          maskDirty.add(existingEntry.getScope());\n        }\n      } else {\n        if (existingEntry.getType() \u003d\u003d MASK) {\n          providedMask.put(existingEntry.getScope(), existingEntry);\n        } else {\n          aclBuilder.add(existingEntry);\n        }\n      }\n    }\n    copyDefaultsIfNeeded(aclBuilder);\n    calculateMasks(aclBuilder, providedMask, maskDirty, scopeDirty);\n    return buildAndValidateAcl(aclBuilder);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/AclTransformation.java"
    }
  }
}