{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Configuration.java",
  "functionName": "set",
  "functionId": "set___name-String__value-String__source-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
  "functionStartLine": 1376,
  "functionEndLine": 1414,
  "numCommitsSeen": 188,
  "timeTaken": 6353,
  "changeHistory": [
    "e163f41850bd09a17d3102a3af0af2e3cd831ab0",
    "858d597be00ce006c1d1d4cd476729e4f1de8d25",
    "ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b",
    "16b34824673f5a50d464727b8fad98470e5e984a",
    "d989ac04449dc33da5e2c32a7f24d59cc92de536",
    "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d",
    "817be26c17cc69443a35bd8e5923d22e3b26a570",
    "8e0ba42df43fa6f9a9d42746c7afb0eee0a31ae3",
    "7abf7e81512918d780e05070c29ee2ba8736f41e",
    "385f31ad85a7b551d080fd77ae48aca61ce76dc2",
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
    "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9",
    "a8ebdaeb088d53800e0397bd8a8460ca14516aa4",
    "9180eca59258fe07ee067c66e432cf322148025a",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "889528e387680f18472b45e63f7857dbd0117eb9",
    "e24071be0aec7e63a0b73bf01f4bbd9930ece066",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "e163f41850bd09a17d3102a3af0af2e3cd831ab0": "Ybodychange",
    "858d597be00ce006c1d1d4cd476729e4f1de8d25": "Ybodychange",
    "ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b": "Ybodychange",
    "16b34824673f5a50d464727b8fad98470e5e984a": "Ybodychange",
    "d989ac04449dc33da5e2c32a7f24d59cc92de536": "Ybodychange",
    "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d": "Ybodychange",
    "817be26c17cc69443a35bd8e5923d22e3b26a570": "Ybodychange",
    "8e0ba42df43fa6f9a9d42746c7afb0eee0a31ae3": "Ybodychange",
    "7abf7e81512918d780e05070c29ee2ba8736f41e": "Ybodychange",
    "385f31ad85a7b551d080fd77ae48aca61ce76dc2": "Ybodychange",
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36": "Ymultichange(Yparameterchange,Ybodychange)",
    "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9": "Ybodychange",
    "a8ebdaeb088d53800e0397bd8a8460ca14516aa4": "Ybodychange",
    "9180eca59258fe07ee067c66e432cf322148025a": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "889528e387680f18472b45e63f7857dbd0117eb9": "Ybodychange",
    "e24071be0aec7e63a0b73bf01f4bbd9930ece066": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e163f41850bd09a17d3102a3af0af2e3cd831ab0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14938. Configuration.updatingResource map should be initialized lazily (misha@cloudera.com via rkanter)\n",
      "commitDate": "13/10/17 1:52 PM",
      "commitName": "e163f41850bd09a17d3102a3af0af2e3cd831ab0",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "11/10/17 3:21 PM",
      "commitNameOld": "b6c2c9058e83116dcca46cd6934db3428f931347",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 1.94,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n         \"The value of property %s must not be null\", name);\n     name \u003d name.trim();\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n \n     if (!isDeprecated(name)) {\n-      updatingResource.put(name, new String[] {newSource});\n+      putIntoUpdatingResource(name, new String[] {newSource});\n       String[] altNames \u003d getAlternativeNames(name);\n       if(altNames !\u003d null) {\n         for(String n: altNames) {\n           if(!n.equals(name)) {\n             getOverlay().setProperty(n, value);\n             getProps().setProperty(n, value);\n-            updatingResource.put(n, new String[] {newSource});\n+            putIntoUpdatingResource(n, new String[] {newSource});\n           }\n         }\n       }\n     }\n     else {\n       String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n       String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String n : names) {\n         getOverlay().setProperty(n, value);\n         getProps().setProperty(n, value);\n-        updatingResource.put(n, new String[] {altSource});\n+        putIntoUpdatingResource(n, new String[] {altSource});\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"The value of property %s must not be null\", name);\n    name \u003d name.trim();\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n\n    if (!isDeprecated(name)) {\n      putIntoUpdatingResource(name, new String[] {newSource});\n      String[] altNames \u003d getAlternativeNames(name);\n      if(altNames !\u003d null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            putIntoUpdatingResource(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        putIntoUpdatingResource(n, new String[] {altSource});\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "858d597be00ce006c1d1d4cd476729e4f1de8d25": {
      "type": "Ybodychange",
      "commitMessage": "Delay construction of PreCondition.check failure message in Configuration#set (jeagles)\n",
      "commitDate": "27/03/17 9:01 AM",
      "commitName": "858d597be00ce006c1d1d4cd476729e4f1de8d25",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "23/03/17 9:28 AM",
      "commitNameOld": "595f62e362c08704d6fb692e21c97b512bc7ec49",
      "commitAuthorOld": "Ravi Prakash",
      "daysBetweenCommits": 3.98,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n-        \"The value of property \" + name + \" must not be null\");\n+        \"The value of property %s must not be null\", name);\n     name \u003d name.trim();\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n \n     if (!isDeprecated(name)) {\n       updatingResource.put(name, new String[] {newSource});\n       String[] altNames \u003d getAlternativeNames(name);\n       if(altNames !\u003d null) {\n         for(String n: altNames) {\n           if(!n.equals(name)) {\n             getOverlay().setProperty(n, value);\n             getProps().setProperty(n, value);\n             updatingResource.put(n, new String[] {newSource});\n           }\n         }\n       }\n     }\n     else {\n       String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n       String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String n : names) {\n         getOverlay().setProperty(n, value);\n         getProps().setProperty(n, value);\n         updatingResource.put(n, new String[] {altSource});\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"The value of property %s must not be null\", name);\n    name \u003d name.trim();\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames \u003d getAlternativeNames(name);\n      if(altNames !\u003d null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b": {
      "type": "Ybodychange",
      "commitMessage": "Revert \"HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du.\"\n\nThis reverts commit 16b34824673f5a50d464727b8fad98470e5e984a.\n",
      "commitDate": "06/11/14 6:27 PM",
      "commitName": "ba0a42cf678f1bb53c2ad22e766b3b1a07b3800b",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/11/14 4:07 PM",
      "commitNameOld": "16b34824673f5a50d464727b8fad98470e5e984a",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,39 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n         \"The value of property \" + name + \" must not be null\");\n     name \u003d name.trim();\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n \n-    synchronized (this) {\n-      if (!isDeprecated(name)) {\n-        updatingResource.put(name, new String[] {newSource});\n-        String[] altNames \u003d getAlternativeNames(name);\n-        if(altNames !\u003d null) {\n-          for(String n: altNames) {\n-            if(!n.equals(name)) {\n-              getOverlay().setProperty(n, value);\n-              getProps().setProperty(n, value);\n-              updatingResource.put(n, new String[] {newSource});\n-            }\n+    if (!isDeprecated(name)) {\n+      updatingResource.put(name, new String[] {newSource});\n+      String[] altNames \u003d getAlternativeNames(name);\n+      if(altNames !\u003d null) {\n+        for(String n: altNames) {\n+          if(!n.equals(name)) {\n+            getOverlay().setProperty(n, value);\n+            getProps().setProperty(n, value);\n+            updatingResource.put(n, new String[] {newSource});\n           }\n         }\n       }\n-      else {\n-        String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n-        String altSource \u003d \"because \" + name + \" is deprecated\";\n-        for(String n : names) {\n-          getOverlay().setProperty(n, value);\n-          getProps().setProperty(n, value);\n-          updatingResource.put(n, new String[] {altSource});\n-        }\n+    }\n+    else {\n+      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n+      String altSource \u003d \"because \" + name + \" is deprecated\";\n+      for(String n : names) {\n+        getOverlay().setProperty(n, value);\n+        getProps().setProperty(n, value);\n+        updatingResource.put(n, new String[] {altSource});\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"The value of property \" + name + \" must not be null\");\n    name \u003d name.trim();\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames \u003d getAlternativeNames(name);\n      if(altNames !\u003d null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "16b34824673f5a50d464727b8fad98470e5e984a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11274. ConcurrentModificationException in Configuration Copy Constructor. Contributed by Junping Du.\n",
      "commitDate": "06/11/14 4:07 PM",
      "commitName": "16b34824673f5a50d464727b8fad98470e5e984a",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "29/10/14 10:29 AM",
      "commitNameOld": "b056048114bf4701ef9dd22486db937cb589e81b",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 8.28,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n         \"The value of property \" + name + \" must not be null\");\n     name \u003d name.trim();\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n \n-    if (!isDeprecated(name)) {\n-      updatingResource.put(name, new String[] {newSource});\n-      String[] altNames \u003d getAlternativeNames(name);\n-      if(altNames !\u003d null) {\n-        for(String n: altNames) {\n-          if(!n.equals(name)) {\n-            getOverlay().setProperty(n, value);\n-            getProps().setProperty(n, value);\n-            updatingResource.put(n, new String[] {newSource});\n+    synchronized (this) {\n+      if (!isDeprecated(name)) {\n+        updatingResource.put(name, new String[] {newSource});\n+        String[] altNames \u003d getAlternativeNames(name);\n+        if(altNames !\u003d null) {\n+          for(String n: altNames) {\n+            if(!n.equals(name)) {\n+              getOverlay().setProperty(n, value);\n+              getProps().setProperty(n, value);\n+              updatingResource.put(n, new String[] {newSource});\n+            }\n           }\n         }\n       }\n-    }\n-    else {\n-      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n-      String altSource \u003d \"because \" + name + \" is deprecated\";\n-      for(String n : names) {\n-        getOverlay().setProperty(n, value);\n-        getProps().setProperty(n, value);\n-        updatingResource.put(n, new String[] {altSource});\n+      else {\n+        String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n+        String altSource \u003d \"because \" + name + \" is deprecated\";\n+        for(String n : names) {\n+          getOverlay().setProperty(n, value);\n+          getProps().setProperty(n, value);\n+          updatingResource.put(n, new String[] {altSource});\n+        }\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"The value of property \" + name + \" must not be null\");\n    name \u003d name.trim();\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n\n    synchronized (this) {\n      if (!isDeprecated(name)) {\n        updatingResource.put(name, new String[] {newSource});\n        String[] altNames \u003d getAlternativeNames(name);\n        if(altNames !\u003d null) {\n          for(String n: altNames) {\n            if(!n.equals(name)) {\n              getOverlay().setProperty(n, value);\n              getProps().setProperty(n, value);\n              updatingResource.put(n, new String[] {newSource});\n            }\n          }\n        }\n      }\n      else {\n        String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n        String altSource \u003d \"because \" + name + \" is deprecated\";\n        for(String n : names) {\n          getOverlay().setProperty(n, value);\n          getProps().setProperty(n, value);\n          updatingResource.put(n, new String[] {altSource});\n        }\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "d989ac04449dc33da5e2c32a7f24d59cc92de536": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5972. Fix typo \u0027programatically\u0027 in job.xml (and a few other places) (Akira AJISAKA via aw)\n",
      "commitDate": "08/09/14 1:15 PM",
      "commitName": "d989ac04449dc33da5e2c32a7f24d59cc92de536",
      "commitAuthor": "Allen Wittenauer",
      "commitDateOld": "18/08/14 1:05 PM",
      "commitNameOld": "379292aa97795d89a04796a41e18dce0a535329b",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 21.01,
      "commitsBetweenForRepo": 143,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n         \"The value of property \" + name + \" must not be null\");\n     name \u003d name.trim();\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n-    String newSource \u003d (source \u003d\u003d null ? \"programatically\" : source);\n+    String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n \n     if (!isDeprecated(name)) {\n       updatingResource.put(name, new String[] {newSource});\n       String[] altNames \u003d getAlternativeNames(name);\n       if(altNames !\u003d null) {\n         for(String n: altNames) {\n           if(!n.equals(name)) {\n             getOverlay().setProperty(n, value);\n             getProps().setProperty(n, value);\n             updatingResource.put(n, new String[] {newSource});\n           }\n         }\n       }\n     }\n     else {\n       String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n       String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String n : names) {\n         getOverlay().setProperty(n, value);\n         getProps().setProperty(n, value);\n         updatingResource.put(n, new String[] {altSource});\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"The value of property \" + name + \" must not be null\");\n    name \u003d name.trim();\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programmatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames \u003d getAlternativeNames(name);\n      if(altNames !\u003d null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10625. Trim configuration names when putting/getting them to properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598072 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 10:10 AM",
      "commitName": "fc1e525da0527c4eb2a2cd3c95d094b12d316a7d",
      "commitAuthor": "Xuan Gong",
      "commitDateOld": "02/05/14 12:08 PM",
      "commitNameOld": "73db6bdb9b1b9ccc85dbc5de9e7c4eeb5ac169b3",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 25.92,
      "commitsBetweenForRepo": 134,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n         \"The value of property \" + name + \" must not be null\");\n+    name \u003d name.trim();\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     String newSource \u003d (source \u003d\u003d null ? \"programatically\" : source);\n \n     if (!isDeprecated(name)) {\n       updatingResource.put(name, new String[] {newSource});\n       String[] altNames \u003d getAlternativeNames(name);\n       if(altNames !\u003d null) {\n         for(String n: altNames) {\n           if(!n.equals(name)) {\n             getOverlay().setProperty(n, value);\n             getProps().setProperty(n, value);\n             updatingResource.put(n, new String[] {newSource});\n           }\n         }\n       }\n     }\n     else {\n       String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n       String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String n : names) {\n         getOverlay().setProperty(n, value);\n         getProps().setProperty(n, value);\n         updatingResource.put(n, new String[] {altSource});\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"The value of property \" + name + \" must not be null\");\n    name \u003d name.trim();\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames \u003d getAlternativeNames(name);\n      if(altNames !\u003d null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "817be26c17cc69443a35bd8e5923d22e3b26a570": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10248. Property name should be included in the exception where property value is null. Contributed by Akira AJISAKA.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1560906 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/01/14 10:27 PM",
      "commitName": "817be26c17cc69443a35bd8e5923d22e3b26a570",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "10/01/14 11:57 AM",
      "commitNameOld": "8e0ba42df43fa6f9a9d42746c7afb0eee0a31ae3",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 13.44,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n-        \"Property value must not be null\");\n+        \"The value of property \" + name + \" must not be null\");\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     String newSource \u003d (source \u003d\u003d null ? \"programatically\" : source);\n \n     if (!isDeprecated(name)) {\n       updatingResource.put(name, new String[] {newSource});\n       String[] altNames \u003d getAlternativeNames(name);\n       if(altNames !\u003d null) {\n         for(String n: altNames) {\n           if(!n.equals(name)) {\n             getOverlay().setProperty(n, value);\n             getProps().setProperty(n, value);\n             updatingResource.put(n, new String[] {newSource});\n           }\n         }\n       }\n     }\n     else {\n       String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n       String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String n : names) {\n         getOverlay().setProperty(n, value);\n         getProps().setProperty(n, value);\n         updatingResource.put(n, new String[] {altSource});\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"The value of property \" + name + \" must not be null\");\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames \u003d getAlternativeNames(name);\n      if(altNames !\u003d null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "8e0ba42df43fa6f9a9d42746c7afb0eee0a31ae3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10178. Configuration deprecation always emit \"deprecated\" warnings when a new key is used. Contributed by Shanyu Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557236 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 11:57 AM",
      "commitName": "8e0ba42df43fa6f9a9d42746c7afb0eee0a31ae3",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "02/11/13 11:42 AM",
      "commitNameOld": "7abf7e81512918d780e05070c29ee2ba8736f41e",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 69.05,
      "commitsBetweenForRepo": 368,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,38 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n         \"Property value must not be null\");\n     DeprecationContext deprecations \u003d deprecationContext.get();\n     if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n-    if(source \u003d\u003d null) {\n-      updatingResource.put(name, new String[] {\"programatically\"});\n-    } else {\n-      updatingResource.put(name, new String[] {source});\n-    }\n-    String[] altNames \u003d getAlternateNames(name);\n-    if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n-      String altSource \u003d \"because \" + name + \" is deprecated\";\n-      for(String altName : altNames) {\n-        if(!altName.equals(name)) {\n-          getOverlay().setProperty(altName, value);\n-          getProps().setProperty(altName, value);\n-          updatingResource.put(altName, new String[] {altSource});\n+    String newSource \u003d (source \u003d\u003d null ? \"programatically\" : source);\n+\n+    if (!isDeprecated(name)) {\n+      updatingResource.put(name, new String[] {newSource});\n+      String[] altNames \u003d getAlternativeNames(name);\n+      if(altNames !\u003d null) {\n+        for(String n: altNames) {\n+          if(!n.equals(name)) {\n+            getOverlay().setProperty(n, value);\n+            getProps().setProperty(n, value);\n+            updatingResource.put(n, new String[] {newSource});\n+          }\n         }\n       }\n     }\n-    warnOnceIfDeprecated(deprecations, name);\n+    else {\n+      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n+      String altSource \u003d \"because \" + name + \" is deprecated\";\n+      for(String n : names) {\n+        getOverlay().setProperty(n, value);\n+        getProps().setProperty(n, value);\n+        updatingResource.put(n, new String[] {altSource});\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"Property value must not be null\");\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    String newSource \u003d (source \u003d\u003d null ? \"programatically\" : source);\n\n    if (!isDeprecated(name)) {\n      updatingResource.put(name, new String[] {newSource});\n      String[] altNames \u003d getAlternativeNames(name);\n      if(altNames !\u003d null) {\n        for(String n: altNames) {\n          if(!n.equals(name)) {\n            getOverlay().setProperty(n, value);\n            getProps().setProperty(n, value);\n            updatingResource.put(n, new String[] {newSource});\n          }\n        }\n      }\n    }\n    else {\n      String[] names \u003d handleDeprecation(deprecationContext.get(), name);\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String n : names) {\n        getOverlay().setProperty(n, value);\n        getProps().setProperty(n, value);\n        updatingResource.put(n, new String[] {altSource});\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "7abf7e81512918d780e05070c29ee2ba8736f41e": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9478. Fix race conditions during the initialization of Configuration related to deprecatedKeyMap (cmccabe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1538248 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/11/13 11:42 AM",
      "commitName": "7abf7e81512918d780e05070c29ee2ba8736f41e",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "20/08/13 2:53 PM",
      "commitNameOld": "2cd6064195da817d2c34b64f19d4c6d630efbc4a",
      "commitAuthorOld": "Jonathan Turner Eagles",
      "daysBetweenCommits": 73.87,
      "commitsBetweenForRepo": 472,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,31 @@\n   public void set(String name, String value, String source) {\n     Preconditions.checkArgument(\n         name !\u003d null,\n         \"Property name must not be null\");\n     Preconditions.checkArgument(\n         value !\u003d null,\n         \"Property value must not be null\");\n-    if (deprecatedKeyMap.isEmpty()) {\n+    DeprecationContext deprecations \u003d deprecationContext.get();\n+    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     if(source \u003d\u003d null) {\n       updatingResource.put(name, new String[] {\"programatically\"});\n     } else {\n       updatingResource.put(name, new String[] {source});\n     }\n     String[] altNames \u003d getAlternateNames(name);\n     if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n       String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String altName : altNames) {\n         if(!altName.equals(name)) {\n           getOverlay().setProperty(altName, value);\n           getProps().setProperty(altName, value);\n           updatingResource.put(altName, new String[] {altSource});\n         }\n       }\n     }\n-    warnOnceIfDeprecated(name);\n+    warnOnceIfDeprecated(deprecations, name);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"Property value must not be null\");\n    DeprecationContext deprecations \u003d deprecationContext.get();\n    if (deprecations.getDeprecatedKeyMap().isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    if(source \u003d\u003d null) {\n      updatingResource.put(name, new String[] {\"programatically\"});\n    } else {\n      updatingResource.put(name, new String[] {source});\n    }\n    String[] altNames \u003d getAlternateNames(name);\n    if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String altName : altNames) {\n        if(!altName.equals(name)) {\n          getOverlay().setProperty(altName, value);\n          getProps().setProperty(altName, value);\n          updatingResource.put(altName, new String[] {altSource});\n        }\n      }\n    }\n    warnOnceIfDeprecated(deprecations, name);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "385f31ad85a7b551d080fd77ae48aca61ce76dc2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8362. Improve exception message when Configuration.set() is called with a null key or value. Contributed by Madhukara Phatak and Suresh Srinivas (harsh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361712 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/07/12 8:07 AM",
      "commitName": "385f31ad85a7b551d080fd77ae48aca61ce76dc2",
      "commitAuthor": "Harsh J",
      "commitDateOld": "10/07/12 1:50 PM",
      "commitNameOld": "58a8826fb5a0c2d70aabf2a9a99f0b8906124155",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 4.76,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,30 @@\n   public void set(String name, String value, String source) {\n+    Preconditions.checkArgument(\n+        name !\u003d null,\n+        \"Property name must not be null\");\n+    Preconditions.checkArgument(\n+        value !\u003d null,\n+        \"Property value must not be null\");\n     if (deprecatedKeyMap.isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     if(source \u003d\u003d null) {\n       updatingResource.put(name, new String[] {\"programatically\"});\n     } else {\n       updatingResource.put(name, new String[] {source});\n     }\n     String[] altNames \u003d getAlternateNames(name);\n     if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n       String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String altName : altNames) {\n         if(!altName.equals(name)) {\n           getOverlay().setProperty(altName, value);\n           getProps().setProperty(altName, value);\n           updatingResource.put(altName, new String[] {altSource});\n         }\n       }\n     }\n     warnOnceIfDeprecated(name);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value, String source) {\n    Preconditions.checkArgument(\n        name !\u003d null,\n        \"Property name must not be null\");\n    Preconditions.checkArgument(\n        value !\u003d null,\n        \"Property value must not be null\");\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    if(source \u003d\u003d null) {\n      updatingResource.put(name, new String[] {\"programatically\"});\n    } else {\n      updatingResource.put(name, new String[] {source});\n    }\n    String[] altNames \u003d getAlternateNames(name);\n    if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String altName : altNames) {\n        if(!altName.equals(name)) {\n          getOverlay().setProperty(altName, value);\n          getProps().setProperty(altName, value);\n          updatingResource.put(altName, new String[] {altSource});\n        }\n      }\n    }\n    warnOnceIfDeprecated(name);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-8525. Provide Improved Traceability for Configuration (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359775 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/12 9:49 AM",
      "commitName": "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
      "commitAuthor": "Robert Joseph Evans",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-8525. Provide Improved Traceability for Configuration (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359775 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/12 9:49 AM",
          "commitName": "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "30/06/12 11:40 AM",
          "commitNameOld": "cb5867573e8fd5bf1c5fed793aa554ccb5549661",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 9.92,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,24 @@\n-  public void set(String name, String value) {\n+  public void set(String name, String value, String source) {\n     if (deprecatedKeyMap.isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n-    updatingResource.put(name, UNKNOWN_RESOURCE);\n+    if(source \u003d\u003d null) {\n+      updatingResource.put(name, new String[] {\"programatically\"});\n+    } else {\n+      updatingResource.put(name, new String[] {source});\n+    }\n     String[] altNames \u003d getAlternateNames(name);\n     if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n+      String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String altName : altNames) {\n-    \tgetOverlay().setProperty(altName, value);\n-        getProps().setProperty(altName, value);\n+        if(!altName.equals(name)) {\n+          getOverlay().setProperty(altName, value);\n+          getProps().setProperty(altName, value);\n+          updatingResource.put(altName, new String[] {altSource});\n+        }\n       }\n     }\n     warnOnceIfDeprecated(name);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void set(String name, String value, String source) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    if(source \u003d\u003d null) {\n      updatingResource.put(name, new String[] {\"programatically\"});\n    } else {\n      updatingResource.put(name, new String[] {source});\n    }\n    String[] altNames \u003d getAlternateNames(name);\n    if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String altName : altNames) {\n        if(!altName.equals(name)) {\n          getOverlay().setProperty(altName, value);\n          getProps().setProperty(altName, value);\n          updatingResource.put(altName, new String[] {altSource});\n        }\n      }\n    }\n    warnOnceIfDeprecated(name);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {
            "oldValue": "[name-String, value-String]",
            "newValue": "[name-String, value-String, source-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-8525. Provide Improved Traceability for Configuration (bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359775 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "10/07/12 9:49 AM",
          "commitName": "0b7139d6bcfe6a4860c98b3703ee163b2f4bdb36",
          "commitAuthor": "Robert Joseph Evans",
          "commitDateOld": "30/06/12 11:40 AM",
          "commitNameOld": "cb5867573e8fd5bf1c5fed793aa554ccb5549661",
          "commitAuthorOld": "Harsh J",
          "daysBetweenCommits": 9.92,
          "commitsBetweenForRepo": 49,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,24 @@\n-  public void set(String name, String value) {\n+  public void set(String name, String value, String source) {\n     if (deprecatedKeyMap.isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n-    updatingResource.put(name, UNKNOWN_RESOURCE);\n+    if(source \u003d\u003d null) {\n+      updatingResource.put(name, new String[] {\"programatically\"});\n+    } else {\n+      updatingResource.put(name, new String[] {source});\n+    }\n     String[] altNames \u003d getAlternateNames(name);\n     if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n+      String altSource \u003d \"because \" + name + \" is deprecated\";\n       for(String altName : altNames) {\n-    \tgetOverlay().setProperty(altName, value);\n-        getProps().setProperty(altName, value);\n+        if(!altName.equals(name)) {\n+          getOverlay().setProperty(altName, value);\n+          getProps().setProperty(altName, value);\n+          updatingResource.put(altName, new String[] {altSource});\n+        }\n       }\n     }\n     warnOnceIfDeprecated(name);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void set(String name, String value, String source) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    if(source \u003d\u003d null) {\n      updatingResource.put(name, new String[] {\"programatically\"});\n    } else {\n      updatingResource.put(name, new String[] {source});\n    }\n    String[] altNames \u003d getAlternateNames(name);\n    if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n      String altSource \u003d \"because \" + name + \" is deprecated\";\n      for(String altName : altNames) {\n        if(!altName.equals(name)) {\n          getOverlay().setProperty(altName, value);\n          getProps().setProperty(altName, value);\n          updatingResource.put(altName, new String[] {altSource});\n        }\n      }\n    }\n    warnOnceIfDeprecated(name);\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
          "extendedDetails": {}
        }
      ]
    },
    "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8172. Configuration no longer sets all keys in a deprecated key list. (Anupam Seth via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1332821 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/05/12 2:00 PM",
      "commitName": "7d1b804d3a31c644b1af9fc4f7917f1f25f793d9",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "30/04/12 2:55 PM",
      "commitNameOld": "1e88c1f088a593b40838535bcbdc8654633893fd",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 0.96,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,16 @@\n   public void set(String name, String value) {\n     if (deprecatedKeyMap.isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     updatingResource.put(name, UNKNOWN_RESOURCE);\n-    String altName \u003d getAlternateName(name);\n-    if (altName !\u003d null) {\n-      getOverlay().setProperty(altName, value);\n-      getProps().setProperty(altName, value);\n+    String[] altNames \u003d getAlternateNames(name);\n+    if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n+      for(String altName : altNames) {\n+    \tgetOverlay().setProperty(altName, value);\n+        getProps().setProperty(altName, value);\n+      }\n     }\n     warnOnceIfDeprecated(name);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    updatingResource.put(name, UNKNOWN_RESOURCE);\n    String[] altNames \u003d getAlternateNames(name);\n    if (altNames !\u003d null \u0026\u0026 altNames.length \u003e 0) {\n      for(String altName : altNames) {\n    \tgetOverlay().setProperty(altName, value);\n        getProps().setProperty(altName, value);\n      }\n    }\n    warnOnceIfDeprecated(name);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "a8ebdaeb088d53800e0397bd8a8460ca14516aa4": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8197. Configuration logs WARNs on every use of a deprecated key (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1303884 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/03/12 9:46 AM",
      "commitName": "a8ebdaeb088d53800e0397bd8a8460ca14516aa4",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "21/03/12 5:49 PM",
      "commitNameOld": "76817c28a264968c294391827e6ae06ceb41014e",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.67,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,14 @@\n   public void set(String name, String value) {\n     if (deprecatedKeyMap.isEmpty()) {\n       getProps();\n     }\n     getOverlay().setProperty(name, value);\n     getProps().setProperty(name, value);\n     updatingResource.put(name, UNKNOWN_RESOURCE);\n     String altName \u003d getAlternateName(name);\n     if (altName !\u003d null) {\n       getOverlay().setProperty(altName, value);\n       getProps().setProperty(altName, value);\n     }\n-    if (isDeprecated(name)) {\n-      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n-      LOG.warn(keyInfo.getWarningMessage(name));\n-    }\n+    warnOnceIfDeprecated(name);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    updatingResource.put(name, UNKNOWN_RESOURCE);\n    String altName \u003d getAlternateName(name);\n    if (altName !\u003d null) {\n      getOverlay().setProperty(altName, value);\n      getProps().setProperty(altName, value);\n    }\n    warnOnceIfDeprecated(name);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "9180eca59258fe07ee067c66e432cf322148025a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-8167. Configuration deprecation logic breaks backwards compatibility (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1300642 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/12 10:07 AM",
      "commitName": "9180eca59258fe07ee067c66e432cf322148025a",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "15/02/12 10:10 AM",
      "commitNameOld": "063be5749df0e4ccb8f6fa4794b3d29a8f3a0afa",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 27.96,
      "commitsBetweenForRepo": 197,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,17 @@\n   public void set(String name, String value) {\n     if (deprecatedKeyMap.isEmpty()) {\n       getProps();\n     }\n-    if (!isDeprecated(name)) {\n-      getOverlay().setProperty(name, value);\n-      getProps().setProperty(name, value);\n-      updatingResource.put(name, UNKNOWN_RESOURCE);\n+    getOverlay().setProperty(name, value);\n+    getProps().setProperty(name, value);\n+    updatingResource.put(name, UNKNOWN_RESOURCE);\n+    String altName \u003d getAlternateName(name);\n+    if (altName !\u003d null) {\n+      getOverlay().setProperty(altName, value);\n+      getProps().setProperty(altName, value);\n     }\n-    else {\n+    if (isDeprecated(name)) {\n       DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n       LOG.warn(keyInfo.getWarningMessage(name));\n-      for (String newKey : keyInfo.newKeys) {\n-        getOverlay().setProperty(newKey, value);\n-        getProps().setProperty(newKey, value);\n-      }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n    updatingResource.put(name, UNKNOWN_RESOURCE);\n    String altName \u003d getAlternateName(name);\n    if (altName !\u003d null) {\n      getOverlay().setProperty(altName, value);\n      getProps().setProperty(altName, value);\n    }\n    if (isDeprecated(name)) {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      LOG.warn(keyInfo.getWarningMessage(name));\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    if (!isDeprecated(name)) {\n      getOverlay().setProperty(name, value);\n      getProps().setProperty(name, value);\n      updatingResource.put(name, UNKNOWN_RESOURCE);\n    }\n    else {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      LOG.warn(keyInfo.getWarningMessage(name));\n      for (String newKey : keyInfo.newKeys) {\n        getOverlay().setProperty(newKey, value);\n        getProps().setProperty(newKey, value);\n      }\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    if (!isDeprecated(name)) {\n      getOverlay().setProperty(name, value);\n      getProps().setProperty(name, value);\n      updatingResource.put(name, UNKNOWN_RESOURCE);\n    }\n    else {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      LOG.warn(keyInfo.getWarningMessage(name));\n      for (String newKey : keyInfo.newKeys) {\n        getOverlay().setProperty(newKey, value);\n        getProps().setProperty(newKey, value);\n      }\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    if (!isDeprecated(name)) {\n      getOverlay().setProperty(name, value);\n      getProps().setProperty(name, value);\n      updatingResource.put(name, UNKNOWN_RESOURCE);\n    }\n    else {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      LOG.warn(keyInfo.getWarningMessage(name));\n      for (String newKey : keyInfo.newKeys) {\n        getOverlay().setProperty(newKey, value);\n        getProps().setProperty(newKey, value);\n      }\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/conf/Configuration.java",
        "newPath": "common/src/java/org/apache/hadoop/conf/Configuration.java"
      }
    },
    "889528e387680f18472b45e63f7857dbd0117eb9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6408. Add a /conf servlet to dump running configuration. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@896641 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/01/10 11:44 AM",
      "commitName": "889528e387680f18472b45e63f7857dbd0117eb9",
      "commitAuthor": "Thomas White",
      "commitDateOld": "09/12/09 3:25 PM",
      "commitNameOld": "a473f3773342695cdb47e3ae4fe432b81e7787fd",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 27.85,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   public void set(String name, String value) {\n     if (deprecatedKeyMap.isEmpty()) {\n       getProps();\n     }\n     if (!isDeprecated(name)) {\n       getOverlay().setProperty(name, value);\n       getProps().setProperty(name, value);\n+      updatingResource.put(name, UNKNOWN_RESOURCE);\n     }\n     else {\n       DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n       LOG.warn(keyInfo.getWarningMessage(name));\n       for (String newKey : keyInfo.newKeys) {\n         getOverlay().setProperty(newKey, value);\n         getProps().setProperty(newKey, value);\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    if (!isDeprecated(name)) {\n      getOverlay().setProperty(name, value);\n      getProps().setProperty(name, value);\n      updatingResource.put(name, UNKNOWN_RESOURCE);\n    }\n    else {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      LOG.warn(keyInfo.getWarningMessage(name));\n      for (String newKey : keyInfo.newKeys) {\n        getOverlay().setProperty(newKey, value);\n        getProps().setProperty(newKey, value);\n      }\n    }\n  }",
      "path": "src/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "e24071be0aec7e63a0b73bf01f4bbd9930ece066": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6105. Adds support for automatically handling deprecation of configuration keys. Contributed by V.V.Chaitanya Krishna.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@812078 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/09/09 4:04 AM",
      "commitName": "e24071be0aec7e63a0b73bf01f4bbd9930ece066",
      "commitAuthor": "Hemanth Yamijala",
      "commitDateOld": "01/09/09 8:24 AM",
      "commitNameOld": "75103dc925dc8db6c65e2281c96998c965c5e3f9",
      "commitAuthorOld": "Hemanth Yamijala",
      "daysBetweenCommits": 5.82,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,4 +1,17 @@\n   public void set(String name, String value) {\n-    getOverlay().setProperty(name, value);\n-    getProps().setProperty(name, value);\n+    if (deprecatedKeyMap.isEmpty()) {\n+      getProps();\n+    }\n+    if (!isDeprecated(name)) {\n+      getOverlay().setProperty(name, value);\n+      getProps().setProperty(name, value);\n+    }\n+    else {\n+      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n+      LOG.warn(keyInfo.getWarningMessage(name));\n+      for (String newKey : keyInfo.newKeys) {\n+        getOverlay().setProperty(newKey, value);\n+        getProps().setProperty(newKey, value);\n+      }\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value) {\n    if (deprecatedKeyMap.isEmpty()) {\n      getProps();\n    }\n    if (!isDeprecated(name)) {\n      getOverlay().setProperty(name, value);\n      getProps().setProperty(name, value);\n    }\n    else {\n      DeprecatedKeyInfo keyInfo \u003d deprecatedKeyMap.get(name);\n      LOG.warn(keyInfo.getWarningMessage(name));\n      for (String newKey : keyInfo.newKeys) {\n        getOverlay().setProperty(newKey, value);\n        getProps().setProperty(newKey, value);\n      }\n    }\n  }",
      "path": "src/java/org/apache/hadoop/conf/Configuration.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,4 @@\n+  public void set(String name, String value) {\n+    getOverlay().setProperty(name, value);\n+    getProps().setProperty(name, value);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void set(String name, String value) {\n    getOverlay().setProperty(name, value);\n    getProps().setProperty(name, value);\n  }",
      "path": "src/java/org/apache/hadoop/conf/Configuration.java"
    }
  }
}