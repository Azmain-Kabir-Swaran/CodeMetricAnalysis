{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LeaseRenewer.java",
  "functionName": "closeClient",
  "functionId": "closeClient___dfsc-DFSClient(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
  "functionStartLine": 339,
  "functionEndLine": 363,
  "numCommitsSeen": 30,
  "timeTaken": 6960,
  "changeHistory": [
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
    "692b1a45ce46a76586c9c375854940454eeca306",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
    "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3",
    "2cc9514ad643ae49d30524743420ee9744e571bd",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": "Yfilerename",
    "692b1a45ce46a76586c9c375854940454eeca306": "Ybodychange",
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": "Ybodychange",
    "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3": "Ymultichange(Yfilerename,Ymodifierchange)",
    "2cc9514ad643ae49d30524743420ee9744e571bd": "Ybodychange",
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": "Ybodychange",
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": "Ybodychange",
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bf37d3d80e5179dea27e5bd5aea804a38aa9934c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-8053. Move DFSIn/OutputStream and related classes to hadoop-hdfs-client. Contributed by Mingliang Liu.\n",
      "commitDate": "26/09/15 11:08 AM",
      "commitName": "bf37d3d80e5179dea27e5bd5aea804a38aa9934c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/09/15 9:06 AM",
      "commitNameOld": "861b52db242f238d7e36ad75c158025be959a696",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 0.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.monotonicNow();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        final int timeout \u003d c.getConf().getHdfsTimeout();\n        if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n          min \u003d timeout;\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java"
      }
    },
    "692b1a45ce46a76586c9c375854940454eeca306": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9134. Move LEASE_{SOFTLIMIT,HARDLIMIT}_PERIOD constants from HdfsServerConstants to HdfsConstants. Contributed by Mingliang Liu.\n",
      "commitDate": "24/09/15 8:19 PM",
      "commitName": "692b1a45ce46a76586c9c375854940454eeca306",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "16/07/15 12:33 PM",
      "commitNameOld": "fbd88f1062f3c4b208724d208e3f501eb196dfab",
      "commitAuthorOld": "Ming Ma",
      "daysBetweenCommits": 70.32,
      "commitsBetweenForRepo": 418,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n         emptyTime \u003d Time.monotonicNow();\n       }\n     }\n \n     //update renewal time\n     if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n-      long min \u003d HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD;\n+      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n         final int timeout \u003d c.getConf().getHdfsTimeout();\n         if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n           min \u003d timeout;\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.monotonicNow();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        final int timeout \u003d c.getConf().getHdfsTimeout();\n        if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n          min \u003d timeout;\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "6ae2a0d048e133b43249c248a75a4d77d9abb80d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8249. Separate HdfsConstants into the client and the server side class. Contributed by Haohui Mai.\n",
      "commitDate": "02/05/15 10:03 AM",
      "commitName": "6ae2a0d048e133b43249c248a75a4d77d9abb80d",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "01/05/15 3:12 PM",
      "commitNameOld": "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n         emptyTime \u003d Time.monotonicNow();\n       }\n     }\n \n     //update renewal time\n     if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n-      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n+      long min \u003d HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n         final int timeout \u003d c.getConf().getHdfsTimeout();\n         if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n           min \u003d timeout;\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.monotonicNow();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n      long min \u003d HdfsServerConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        final int timeout \u003d c.getConf().getHdfsTimeout();\n        if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n          min \u003d timeout;\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3": {
      "type": "Ymultichange(Yfilerename,Ymodifierchange)",
      "commitMessage": "HDFS-8086. Move LeaseRenewer to the hdfs.client.impl package.  Contributed by Takanobu\n",
      "commitDate": "01/05/15 3:12 PM",
      "commitName": "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "HDFS-8086. Move LeaseRenewer to the hdfs.client.impl package.  Contributed by Takanobu\n",
          "commitDate": "01/05/15 3:12 PM",
          "commitName": "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "01/05/15 2:43 PM",
          "commitNameOld": "64d30a61867e5cb0a2acaa7ae4fa4d3eb3be8edd",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  synchronized void closeClient(final DFSClient dfsc) {\n+  public synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n         emptyTime \u003d Time.monotonicNow();\n       }\n     }\n \n     //update renewal time\n     if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n       long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n         final int timeout \u003d c.getConf().getHdfsTimeout();\n         if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n           min \u003d timeout;\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.monotonicNow();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        final int timeout \u003d c.getConf().getHdfsTimeout();\n        if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n          min \u003d timeout;\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-8086. Move LeaseRenewer to the hdfs.client.impl package.  Contributed by Takanobu\n",
          "commitDate": "01/05/15 3:12 PM",
          "commitName": "d3d019c337ecc10e9c6bbefc3a97c6cd1f5283c3",
          "commitAuthor": "Tsz-Wo Nicholas Sze",
          "commitDateOld": "01/05/15 2:43 PM",
          "commitNameOld": "64d30a61867e5cb0a2acaa7ae4fa4d3eb3be8edd",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n-  synchronized void closeClient(final DFSClient dfsc) {\n+  public synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n         emptyTime \u003d Time.monotonicNow();\n       }\n     }\n \n     //update renewal time\n     if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n       long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n         final int timeout \u003d c.getConf().getHdfsTimeout();\n         if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n           min \u003d timeout;\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.monotonicNow();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        final int timeout \u003d c.getConf().getHdfsTimeout();\n        if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n          min \u003d timeout;\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/client/impl/LeaseRenewer.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[public, synchronized]"
          }
        }
      ]
    },
    "2cc9514ad643ae49d30524743420ee9744e571bd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8100. Refactor DFSClient.Conf to a standalone class and separates short-circuit related conf to ShortCircuitConf.\n",
      "commitDate": "10/04/15 2:48 PM",
      "commitName": "2cc9514ad643ae49d30524743420ee9744e571bd",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "07/04/15 1:59 PM",
      "commitNameOld": "571a1ce9d037d99e7c9042bcb77ae7a2c4daf6d3",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 3.03,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,25 @@\n   synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n         emptyTime \u003d Time.monotonicNow();\n       }\n     }\n \n     //update renewal time\n-    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n+    if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n       long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n-        if (c.getHdfsTimeout() \u003e 0) {\n-          final long timeout \u003d c.getHdfsTimeout();\n-          if (timeout \u003c min) {\n-            min \u003d timeout;\n-          }\n+        final int timeout \u003d c.getConf().getHdfsTimeout();\n+        if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n+          min \u003d timeout;\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.monotonicNow();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getConf().getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        final int timeout \u003d c.getConf().getHdfsTimeout();\n        if (timeout \u003e 0 \u0026\u0026 timeout \u003c min) {\n          min \u003d timeout;\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "75ead273bea8a7dad61c4f99c3a16cab2697c498": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6841. Use Time.monotonicNow() wherever applicable instead of Time.now(). Contributed by Vinayakumar B\n",
      "commitDate": "20/03/15 12:02 PM",
      "commitName": "75ead273bea8a7dad61c4f99c3a16cab2697c498",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "09/05/14 3:36 PM",
      "commitNameOld": "f131dba8a3d603a5d15c4f035ed3da75b4daf0dc",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 314.85,
      "commitsBetweenForRepo": 2615,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n-        emptyTime \u003d Time.now();\n+        emptyTime \u003d Time.monotonicNow();\n       }\n     }\n \n     //update renewal time\n     if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n       long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n         if (c.getHdfsTimeout() \u003e 0) {\n           final long timeout \u003d c.getHdfsTimeout();\n           if (timeout \u003c min) {\n             min \u003d timeout;\n           }\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.monotonicNow();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        if (c.getHdfsTimeout() \u003e 0) {\n          final long timeout \u003d c.getHdfsTimeout();\n          if (timeout \u003c min) {\n            min \u003d timeout;\n          }\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "4a5ba3b7bd2360fd9605863630b477d362874e1e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3641. Move server Util time methods to common and use now instead of System#currentTimeMillis. Contributed by Eli Collins\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1360858 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/07/12 12:01 PM",
      "commitName": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "05/03/12 6:42 PM",
      "commitNameOld": "0ee71adeb4b2a91d74110c0f0c1df63a1cf36014",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 128.68,
      "commitsBetweenForRepo": 787,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n-        emptyTime \u003d System.currentTimeMillis();\n+        emptyTime \u003d Time.now();\n       }\n     }\n \n     //update renewal time\n     if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n       long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n         if (c.getHdfsTimeout() \u003e 0) {\n           final long timeout \u003d c.getHdfsTimeout();\n           if (timeout \u003c min) {\n             min \u003d timeout;\n           }\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d Time.now();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        if (c.getHdfsTimeout() \u003e 0) {\n          final long timeout \u003d c.getHdfsTimeout();\n          if (timeout \u003c min) {\n            min \u003d timeout;\n          }\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "8ae98a9d1ca4725e28783370517cb3a3ecda7324": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1620. Rename HdfsConstants -\u003e HdfsServerConstants, FSConstants -\u003e HdfsConstants. (Harsh J Chouraria via atm)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1165096 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/09/11 12:30 PM",
      "commitName": "8ae98a9d1ca4725e28783370517cb3a3ecda7324",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "24/08/11 5:14 PM",
      "commitNameOld": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 10.8,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,27 @@\n   synchronized void closeClient(final DFSClient dfsc) {\n     dfsclients.remove(dfsc);\n     if (dfsclients.isEmpty()) {\n       if (!isRunning() || isRenewerExpired()) {\n         Factory.INSTANCE.remove(LeaseRenewer.this);\n         return;\n       }\n       if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n         //discover the first time that the client list is empty.\n         emptyTime \u003d System.currentTimeMillis();\n       }\n     }\n \n     //update renewal time\n     if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n-      long min \u003d FSConstants.LEASE_SOFTLIMIT_PERIOD;\n+      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n       for(DFSClient c : dfsclients) {\n         if (c.getHdfsTimeout() \u003e 0) {\n           final long timeout \u003d c.getHdfsTimeout();\n           if (timeout \u003c min) {\n             min \u003d timeout;\n           }\n         }\n       }\n       renewal \u003d min/2;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d System.currentTimeMillis();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n      long min \u003d HdfsConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        if (c.getHdfsTimeout() \u003e 0) {\n          final long timeout \u003d c.getHdfsTimeout();\n          if (timeout \u003c min) {\n            min \u003d timeout;\n          }\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d System.currentTimeMillis();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n      long min \u003d FSConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        if (c.getHdfsTimeout() \u003e 0) {\n          final long timeout \u003d c.getHdfsTimeout();\n          if (timeout \u003c min) {\n            min \u003d timeout;\n          }\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d System.currentTimeMillis();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n      long min \u003d FSConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        if (c.getHdfsTimeout() \u003e 0) {\n          final long timeout \u003d c.getHdfsTimeout();\n          if (timeout \u003c min) {\n            min \u003d timeout;\n          }\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/LeaseRenewer.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/LeaseRenewer.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,27 @@\n+  synchronized void closeClient(final DFSClient dfsc) {\n+    dfsclients.remove(dfsc);\n+    if (dfsclients.isEmpty()) {\n+      if (!isRunning() || isRenewerExpired()) {\n+        Factory.INSTANCE.remove(LeaseRenewer.this);\n+        return;\n+      }\n+      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n+        //discover the first time that the client list is empty.\n+        emptyTime \u003d System.currentTimeMillis();\n+      }\n+    }\n+\n+    //update renewal time\n+    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n+      long min \u003d FSConstants.LEASE_SOFTLIMIT_PERIOD;\n+      for(DFSClient c : dfsclients) {\n+        if (c.getHdfsTimeout() \u003e 0) {\n+          final long timeout \u003d c.getHdfsTimeout();\n+          if (timeout \u003c min) {\n+            min \u003d timeout;\n+          }\n+        }\n+      }\n+      renewal \u003d min/2;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void closeClient(final DFSClient dfsc) {\n    dfsclients.remove(dfsc);\n    if (dfsclients.isEmpty()) {\n      if (!isRunning() || isRenewerExpired()) {\n        Factory.INSTANCE.remove(LeaseRenewer.this);\n        return;\n      }\n      if (emptyTime \u003d\u003d Long.MAX_VALUE) {\n        //discover the first time that the client list is empty.\n        emptyTime \u003d System.currentTimeMillis();\n      }\n    }\n\n    //update renewal time\n    if (renewal \u003d\u003d dfsc.getHdfsTimeout()/2) {\n      long min \u003d FSConstants.LEASE_SOFTLIMIT_PERIOD;\n      for(DFSClient c : dfsclients) {\n        if (c.getHdfsTimeout() \u003e 0) {\n          final long timeout \u003d c.getHdfsTimeout();\n          if (timeout \u003c min) {\n            min \u003d timeout;\n          }\n        }\n      }\n      renewal \u003d min/2;\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/LeaseRenewer.java"
    }
  }
}