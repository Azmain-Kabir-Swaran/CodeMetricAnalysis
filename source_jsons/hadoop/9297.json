{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSNamesystem.java",
  "functionName": "createSnapshot",
  "functionId": "createSnapshot___snapshotRoot-String__snapshotName-String__logRetryCache-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
  "functionStartLine": 6898,
  "functionEndLine": 6923,
  "numCommitsSeen": 1340,
  "timeTaken": 46162,
  "changeHistory": [
    "1824aee9da4056de0fb638906b2172e486bbebe7",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd",
    "84a1321f6aa0af6895564a7c47f8f264656f0294",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893",
    "d27d7fc72e279614212c1eae52a84675073e89fb",
    "4a3161182905afaf450a60d02528161ed1f97471",
    "8e253cb93030642f5a7324bad0f161cd0ad33206",
    "01ea6480564a9418230cd26b6f9dd54e28c51db0",
    "02b25ce4ef489dab88c4e0e7b1ce0213cf83186d",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
    "1fe1942328856dd832e9f94fb56a40ab3d810870",
    "7317e97bd72ca30f5db37fa94389dbdb52ae079e",
    "8c7a7e619699386f9e6991842558d78aa0c8053d",
    "1b531c1dbb452a6192fad411605d2baaa3831bcd"
  ],
  "changeHistoryShort": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": "Ybodychange",
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": "Ybodychange",
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": "Ybodychange",
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": "Ybodychange",
    "84a1321f6aa0af6895564a7c47f8f264656f0294": "Ybodychange",
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": "Ybodychange",
    "d27d7fc72e279614212c1eae52a84675073e89fb": "Ybodychange",
    "4a3161182905afaf450a60d02528161ed1f97471": "Ymultichange(Yexceptionschange,Ybodychange)",
    "8e253cb93030642f5a7324bad0f161cd0ad33206": "Ymultichange(Yparameterchange,Ybodychange)",
    "01ea6480564a9418230cd26b6f9dd54e28c51db0": "Ybodychange",
    "02b25ce4ef489dab88c4e0e7b1ce0213cf83186d": "Ybodychange",
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": "Ybodychange",
    "1fe1942328856dd832e9f94fb56a40ab3d810870": "Ybodychange",
    "7317e97bd72ca30f5db37fa94389dbdb52ae079e": "Ybodychange",
    "8c7a7e619699386f9e6991842558d78aa0c8053d": "Ybodychange",
    "1b531c1dbb452a6192fad411605d2baaa3831bcd": "Ybodychange"
  },
  "changeHistoryDetails": {
    "1824aee9da4056de0fb638906b2172e486bbebe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15217 Add more information to longest write/read lock held log\n\n",
      "commitDate": "18/04/20 1:52 PM",
      "commitName": "1824aee9da4056de0fb638906b2172e486bbebe7",
      "commitAuthor": "Toshihiro Suzuki",
      "commitDateOld": "25/03/20 10:28 AM",
      "commitNameOld": "a700803a18fb957d2799001a2ce1dcb70f75c080",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 24.14,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n                         boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final String operationName \u003d \"createSnapshot\";\n     String snapshotPath \u003d null;\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     FSPermissionChecker.setOperationType(operationName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n         snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n             snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n       } finally {\n-        writeUnlock(operationName);\n+        writeUnlock(operationName, getLockReportInfoSupplier(snapshotRoot));\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, snapshotRoot);\n       throw ace;\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, snapshotRoot,\n         snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final String operationName \u003d \"createSnapshot\";\n    String snapshotPath \u003d null;\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n        snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n            snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n      } finally {\n        writeUnlock(operationName, getLockReportInfoSupplier(snapshotRoot));\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, snapshotRoot);\n      throw ace;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4b95c242eca540455a4d5d0899aaf73b6064b5ea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14743. Enhance INodeAttributeProvider/ AccessControlEnforcer Interface in HDFS to support Authorization of mkdir, rm, rmdir, copy, move etc... (#1829)\n\nReviewed-by: Xiaoyu Yao \u003cxyao@apache.org\u003e",
      "commitDate": "13/03/20 11:29 AM",
      "commitName": "4b95c242eca540455a4d5d0899aaf73b6064b5ea",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "27/02/20 8:49 AM",
      "commitNameOld": "cd2c6b1aac470991b9b90339ce2721ba179e7c48",
      "commitAuthorOld": "Ayush Saxena",
      "daysBetweenCommits": 15.07,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n                         boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final String operationName \u003d \"createSnapshot\";\n     String snapshotPath \u003d null;\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n+    FSPermissionChecker.setOperationType(operationName);\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n         snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n             snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n       } finally {\n         writeUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n       logAuditEvent(false, operationName, snapshotRoot);\n       throw ace;\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, snapshotRoot,\n         snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final String operationName \u003d \"createSnapshot\";\n    String snapshotPath \u003d null;\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    FSPermissionChecker.setOperationType(operationName);\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n        snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n            snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, snapshotRoot);\n      throw ace;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "5527d79adb9b1e2f2779c283f81d6a3d5447babc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14810. Review FSNameSystem editlog sync. Contributed by Xiaoqiao He.\n",
      "commitDate": "17/10/19 9:26 AM",
      "commitName": "5527d79adb9b1e2f2779c283f81d6a3d5447babc",
      "commitAuthor": "Ayush Saxena",
      "commitDateOld": "06/09/19 5:42 AM",
      "commitNameOld": "d98c54816d21d59c4d877ae4b1917b22268ffcef",
      "commitAuthorOld": "Surendra Singh Lilhore",
      "daysBetweenCommits": 41.16,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,25 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n                         boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final String operationName \u003d \"createSnapshot\";\n     String snapshotPath \u003d null;\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     try {\n       writeLock();\n       try {\n         checkOperation(OperationCategory.WRITE);\n         checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n         snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n             snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n       } finally {\n         writeUnlock(operationName);\n       }\n     } catch (AccessControlException ace) {\n-      logAuditEvent(false, operationName, snapshotRoot,\n-          snapshotPath, null);\n+      logAuditEvent(false, operationName, snapshotRoot);\n       throw ace;\n     }\n     getEditLog().logSync();\n     logAuditEvent(true, operationName, snapshotRoot,\n         snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final String operationName \u003d \"createSnapshot\";\n    String snapshotPath \u003d null;\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n        snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n            snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, snapshotRoot);\n      throw ace;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "f600fbb6c4987c69292faea6b5abf022bb213ffd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11246. FSNameSystem#logAuditEvent should be called outside the read or write locks. Contributed by He Xiaoqiao, Kuhu Shukla.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\nCo-authored-by: Kuhu Shukla \u003ckshukla@apache.org\u003e\n",
      "commitDate": "29/08/19 10:10 AM",
      "commitName": "f600fbb6c4987c69292faea6b5abf022bb213ffd",
      "commitAuthor": "He Xiaoqiao",
      "commitDateOld": "27/08/19 3:26 PM",
      "commitNameOld": "dde9399b37bffb77da17c025f0b9b673d7088bc6",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 1.78,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n                         boolean logRetryCache) throws IOException {\n     checkOperation(OperationCategory.WRITE);\n     final String operationName \u003d \"createSnapshot\";\n     String snapshotPath \u003d null;\n-    boolean success \u003d false;\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n-    writeLock();\n     try {\n-      checkOperation(OperationCategory.WRITE);\n-      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n-      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n-          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n-      success \u003d true;\n+      writeLock();\n+      try {\n+        checkOperation(OperationCategory.WRITE);\n+        checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n+        snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n+            snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n+      } finally {\n+        writeUnlock(operationName);\n+      }\n     } catch (AccessControlException ace) {\n-      logAuditEvent(success, operationName, snapshotRoot,\n+      logAuditEvent(false, operationName, snapshotRoot,\n           snapshotPath, null);\n       throw ace;\n-    } finally {\n-      writeUnlock(operationName);\n     }\n     getEditLog().logSync();\n-    logAuditEvent(success, operationName, snapshotRoot,\n+    logAuditEvent(true, operationName, snapshotRoot,\n         snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final String operationName \u003d \"createSnapshot\";\n    String snapshotPath \u003d null;\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    try {\n      writeLock();\n      try {\n        checkOperation(OperationCategory.WRITE);\n        checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n        snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n            snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n      } finally {\n        writeUnlock(operationName);\n      }\n    } catch (AccessControlException ace) {\n      logAuditEvent(false, operationName, snapshotRoot,\n          snapshotPath, null);\n      throw ace;\n    }\n    getEditLog().logSync();\n    logAuditEvent(true, operationName, snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "84a1321f6aa0af6895564a7c47f8f264656f0294": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13136. Avoid taking FSN lock while doing group member lookup for FSD permission check. Contributed by Xiaoyu Yao.\n",
      "commitDate": "22/02/18 11:32 AM",
      "commitName": "84a1321f6aa0af6895564a7c47f8f264656f0294",
      "commitAuthor": "Xiaoyu Yao",
      "commitDateOld": "15/02/18 1:32 PM",
      "commitNameOld": "47473952e56b0380147d42f4110ad03c2276c961",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.92,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n                         boolean logRetryCache) throws IOException {\n+    checkOperation(OperationCategory.WRITE);\n     final String operationName \u003d \"createSnapshot\";\n     String snapshotPath \u003d null;\n     boolean success \u003d false;\n+    final FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n-      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n+      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n           snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n       success \u003d true;\n     } catch (AccessControlException ace) {\n       logAuditEvent(success, operationName, snapshotRoot,\n           snapshotPath, null);\n       throw ace;\n     } finally {\n       writeUnlock(operationName);\n     }\n     getEditLog().logSync();\n     logAuditEvent(success, operationName, snapshotRoot,\n         snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    checkOperation(OperationCategory.WRITE);\n    final String operationName \u003d \"createSnapshot\";\n    String snapshotPath \u003d null;\n    boolean success \u003d false;\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir, pc,\n          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, operationName, snapshotRoot,\n          snapshotPath, null);\n      throw ace;\n    } finally {\n      writeUnlock(operationName);\n    }\n    getEditLog().logSync();\n    logAuditEvent(success, operationName, snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "ff0b99eafeda035ebe0dc82cfe689808047a8893": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-10872. Add MutableRate metrics for FSNamesystemLock operations. Contributed by Erik Krogen.\n",
      "commitDate": "14/11/16 11:05 AM",
      "commitName": "ff0b99eafeda035ebe0dc82cfe689808047a8893",
      "commitAuthor": "Zhe Zhang",
      "commitDateOld": "08/11/16 6:17 PM",
      "commitNameOld": "ed0bebabaaf27cd730f7f8eb002d92c9c7db327d",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 5.7,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n                         boolean logRetryCache) throws IOException {\n+    final String operationName \u003d \"createSnapshot\";\n     String snapshotPath \u003d null;\n     boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n           snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n       success \u003d true;\n     } catch (AccessControlException ace) {\n-      logAuditEvent(success, \"createSnapshot\", snapshotRoot,\n+      logAuditEvent(success, operationName, snapshotRoot,\n           snapshotPath, null);\n       throw ace;\n     } finally {\n-      writeUnlock();\n+      writeUnlock(operationName);\n     }\n     getEditLog().logSync();\n-    logAuditEvent(success, \"createSnapshot\", snapshotRoot,\n+    logAuditEvent(success, operationName, snapshotRoot,\n         snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    final String operationName \u003d \"createSnapshot\";\n    String snapshotPath \u003d null;\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, operationName, snapshotRoot,\n          snapshotPath, null);\n      throw ace;\n    } finally {\n      writeUnlock(operationName);\n    }\n    getEditLog().logSync();\n    logAuditEvent(success, operationName, snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "d27d7fc72e279614212c1eae52a84675073e89fb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9395. Make HDFS audit logging consistant. Contributed by Kuhu Shukla.\n",
      "commitDate": "24/02/16 10:04 AM",
      "commitName": "d27d7fc72e279614212c1eae52a84675073e89fb",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "21/02/16 7:51 PM",
      "commitNameOld": "f313516731d787f6be64c9406ca83d941d47ee99",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 2.59,
      "commitsBetweenForRepo": 23,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,23 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n                         boolean logRetryCache) throws IOException {\n     String snapshotPath \u003d null;\n+    boolean success \u003d false;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n           snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n+      success \u003d true;\n+    } catch (AccessControlException ace) {\n+      logAuditEvent(success, \"createSnapshot\", snapshotRoot,\n+          snapshotPath, null);\n+      throw ace;\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n-    logAuditEvent(snapshotPath !\u003d null, \"createSnapshot\", snapshotRoot,\n+    logAuditEvent(success, \"createSnapshot\", snapshotRoot,\n         snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    String snapshotPath \u003d null;\n    boolean success \u003d false;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n      success \u003d true;\n    } catch (AccessControlException ace) {\n      logAuditEvent(success, \"createSnapshot\", snapshotRoot,\n          snapshotPath, null);\n      throw ace;\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(success, \"createSnapshot\", snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "4a3161182905afaf450a60d02528161ed1f97471": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "HDFS-7440. Consolidate snapshot related operations in a single class. Contributed by Haohui Mai.\n",
      "commitDate": "25/11/14 9:04 PM",
      "commitName": "4a3161182905afaf450a60d02528161ed1f97471",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7440. Consolidate snapshot related operations in a single class. Contributed by Haohui Mai.\n",
          "commitDate": "25/11/14 9:04 PM",
          "commitName": "4a3161182905afaf450a60d02528161ed1f97471",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "25/11/14 3:37 PM",
          "commitNameOld": "f43a20c529ac3f104add95b222de6580757b3763",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n-                        boolean logRetryCache)\n-      throws SafeModeException, IOException {\n-    checkOperation(OperationCategory.WRITE);\n-    final FSPermissionChecker pc \u003d getPermissionChecker();\n-\n+                        boolean logRetryCache) throws IOException {\n     String snapshotPath \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n-      if (isPermissionEnabled) {\n-        checkOwner(pc, snapshotRoot);\n-      }\n-\n-      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n-        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n-      }\n-      if(snapshotName !\u003d null){\n-        if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n-            throw new InvalidPathException(\"Invalid snapshot name: \"\n-                + snapshotName);\n-        }\n-      }\n-      dir.verifySnapshotName(snapshotName, snapshotRoot);\n-      dir.writeLock();\n-      try {\n-        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n-      } finally {\n-        dir.writeUnlock();\n-      }\n-      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName, logRetryCache);\n+      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n+          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n-    \n-    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n-      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n-    }\n+    logAuditEvent(snapshotPath !\u003d null, \"createSnapshot\", snapshotRoot,\n+        snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    String snapshotPath \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(snapshotPath !\u003d null, \"createSnapshot\", snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[SafeModeException, IOException]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7440. Consolidate snapshot related operations in a single class. Contributed by Haohui Mai.\n",
          "commitDate": "25/11/14 9:04 PM",
          "commitName": "4a3161182905afaf450a60d02528161ed1f97471",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "25/11/14 3:37 PM",
          "commitNameOld": "f43a20c529ac3f104add95b222de6580757b3763",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 0.23,
          "commitsBetweenForRepo": 5,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,42 +1,17 @@\n   String createSnapshot(String snapshotRoot, String snapshotName,\n-                        boolean logRetryCache)\n-      throws SafeModeException, IOException {\n-    checkOperation(OperationCategory.WRITE);\n-    final FSPermissionChecker pc \u003d getPermissionChecker();\n-\n+                        boolean logRetryCache) throws IOException {\n     String snapshotPath \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n-      if (isPermissionEnabled) {\n-        checkOwner(pc, snapshotRoot);\n-      }\n-\n-      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n-        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n-      }\n-      if(snapshotName !\u003d null){\n-        if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n-            throw new InvalidPathException(\"Invalid snapshot name: \"\n-                + snapshotName);\n-        }\n-      }\n-      dir.verifySnapshotName(snapshotName, snapshotRoot);\n-      dir.writeLock();\n-      try {\n-        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n-      } finally {\n-        dir.writeUnlock();\n-      }\n-      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName, logRetryCache);\n+      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n+          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n     } finally {\n       writeUnlock();\n     }\n     getEditLog().logSync();\n-    \n-    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n-      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n-    }\n+    logAuditEvent(snapshotPath !\u003d null, \"createSnapshot\", snapshotRoot,\n+        snapshotPath, null);\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache) throws IOException {\n    String snapshotPath \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      snapshotPath \u003d FSDirSnapshotOp.createSnapshot(dir,\n          snapshotManager, snapshotRoot, snapshotName, logRetryCache);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    logAuditEvent(snapshotPath !\u003d null, \"createSnapshot\", snapshotRoot,\n        snapshotPath, null);\n    return snapshotPath;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "8e253cb93030642f5a7324bad0f161cd0ad33206": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
      "commitDate": "24/11/14 11:11 AM",
      "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
          "commitDate": "24/11/14 11:11 AM",
          "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/11/14 10:46 AM",
          "commitNameOld": "daacbc18d739d030822df0b75205eeb067f89850",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,42 @@\n-  String createSnapshot(String snapshotRoot, String snapshotName)\n+  String createSnapshot(String snapshotRoot, String snapshotName,\n+                        boolean logRetryCache)\n       throws SafeModeException, IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n-    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n-        null);\n-    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n-      return (String) cacheEntry.getPayload();\n-    }\n+\n     String snapshotPath \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       if(snapshotName !\u003d null){\n         if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n             throw new InvalidPathException(\"Invalid snapshot name: \"\n                 + snapshotName);\n         }\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n-      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n-          cacheEntry !\u003d null);\n+      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName, logRetryCache);\n     } finally {\n       writeUnlock();\n-      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache)\n      throws SafeModeException, IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n\n    String snapshotPath \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      if(snapshotName !\u003d null){\n        if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n            throw new InvalidPathException(\"Invalid snapshot name: \"\n                + snapshotName);\n        }\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName, logRetryCache);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {
            "oldValue": "[snapshotRoot-String, snapshotName-String]",
            "newValue": "[snapshotRoot-String, snapshotName-String, logRetryCache-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7412. Move RetryCache to NameNodeRpcServer. Contributed by Haohui Mai.\n",
          "commitDate": "24/11/14 11:11 AM",
          "commitName": "8e253cb93030642f5a7324bad0f161cd0ad33206",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "24/11/14 10:46 AM",
          "commitNameOld": "daacbc18d739d030822df0b75205eeb067f89850",
          "commitAuthorOld": "Colin Patrick Mccabe",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,47 +1,42 @@\n-  String createSnapshot(String snapshotRoot, String snapshotName)\n+  String createSnapshot(String snapshotRoot, String snapshotName,\n+                        boolean logRetryCache)\n       throws SafeModeException, IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n-    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n-        null);\n-    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n-      return (String) cacheEntry.getPayload();\n-    }\n+\n     String snapshotPath \u003d null;\n     writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       if(snapshotName !\u003d null){\n         if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n             throw new InvalidPathException(\"Invalid snapshot name: \"\n                 + snapshotName);\n         }\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n-      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n-          cacheEntry !\u003d null);\n+      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName, logRetryCache);\n     } finally {\n       writeUnlock();\n-      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName,\n                        boolean logRetryCache)\n      throws SafeModeException, IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n\n    String snapshotPath \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      if(snapshotName !\u003d null){\n        if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n            throw new InvalidPathException(\"Invalid snapshot name: \"\n                + snapshotName);\n        }\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName, logRetryCache);\n    } finally {\n      writeUnlock();\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
          "extendedDetails": {}
        }
      ]
    },
    "01ea6480564a9418230cd26b6f9dd54e28c51db0": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6229. Race condition in failover can cause RetryCache fail to work. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586714 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/14 9:42 AM",
      "commitName": "01ea6480564a9418230cd26b6f9dd54e28c51db0",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "10/04/14 5:21 PM",
      "commitNameOld": "3b008baf35ad335827e704f61db31edfcbc1d141",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 0.68,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,47 @@\n   String createSnapshot(String snapshotRoot, String snapshotName)\n       throws SafeModeException, IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n         null);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return (String) cacheEntry.getPayload();\n     }\n-    writeLock();\n     String snapshotPath \u003d null;\n+    writeLock();\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       if(snapshotName !\u003d null){\n         if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n             throw new InvalidPathException(\"Invalid snapshot name: \"\n                 + snapshotName);\n         }\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n       getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n           cacheEntry !\u003d null);\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName)\n      throws SafeModeException, IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n        null);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return (String) cacheEntry.getPayload();\n    }\n    String snapshotPath \u003d null;\n    writeLock();\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      if(snapshotName !\u003d null){\n        if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n            throw new InvalidPathException(\"Invalid snapshot name: \"\n                + snapshotName);\n        }\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n          cacheEntry !\u003d null);\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "02b25ce4ef489dab88c4e0e7b1ce0213cf83186d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6068. Disallow snapshot names that are also invalid directory names.  Contributed by sathish\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1579004 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/03/14 11:34 AM",
      "commitName": "02b25ce4ef489dab88c4e0e7b1ce0213cf83186d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "17/03/14 10:37 AM",
      "commitNameOld": "809e8bf5b7fdfdb18f719614d1e54ca4fb47fa2b",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 1.04,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,47 @@\n   String createSnapshot(String snapshotRoot, String snapshotName)\n       throws SafeModeException, IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n         null);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return (String) cacheEntry.getPayload();\n     }\n     writeLock();\n     String snapshotPath \u003d null;\n     try {\n       checkOperation(OperationCategory.WRITE);\n       checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n+      if(snapshotName !\u003d null){\n+        if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n+            throw new InvalidPathException(\"Invalid snapshot name: \"\n+                + snapshotName);\n+        }\n+      }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n       getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n           cacheEntry !\u003d null);\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName)\n      throws SafeModeException, IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n        null);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return (String) cacheEntry.getPayload();\n    }\n    writeLock();\n    String snapshotPath \u003d null;\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      if(snapshotName !\u003d null){\n        if (!DFSUtil.isValidNameForComponent(snapshotName)) {\n            throw new InvalidPathException(\"Invalid snapshot name: \"\n                + snapshotName);\n        }\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n          cacheEntry !\u003d null);\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a": {
      "type": "Ybodychange",
      "commitMessage": "merge trunk to branch HDFS-4949\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4949@1532952 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/10/13 7:14 PM",
      "commitName": "34f08944b7c8d58f531a3f3bf3d4ee4cd3fa643a",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/10/13 3:15 PM",
      "commitNameOld": "3cc7a38a53c8ae27ef6b2397cddc5d14a378203a",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,41 @@\n   String createSnapshot(String snapshotRoot, String snapshotName)\n       throws SafeModeException, IOException {\n+    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d getPermissionChecker();\n     CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n         null);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return (String) cacheEntry.getPayload();\n     }\n-    final FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     String snapshotPath \u003d null;\n     try {\n       checkOperation(OperationCategory.WRITE);\n-      if (isInSafeMode()) {\n-        throw new SafeModeException(\"Cannot create snapshot for \"\n-            + snapshotRoot, safeMode);\n-      }\n+      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n       getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n           cacheEntry !\u003d null);\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName)\n      throws SafeModeException, IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n        null);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return (String) cacheEntry.getPayload();\n    }\n    writeLock();\n    String snapshotPath \u003d null;\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n          cacheEntry !\u003d null);\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1fe1942328856dd832e9f94fb56a40ab3d810870": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5291. Standby namenode after transition to active goes into safemode. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1530112 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/10/13 4:58 PM",
      "commitName": "1fe1942328856dd832e9f94fb56a40ab3d810870",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "06/10/13 11:39 AM",
      "commitNameOld": "7317e97bd72ca30f5db37fa94389dbdb52ae079e",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.22,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,41 @@\n   String createSnapshot(String snapshotRoot, String snapshotName)\n       throws SafeModeException, IOException {\n     checkOperation(OperationCategory.WRITE);\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n         null);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return (String) cacheEntry.getPayload();\n     }\n     writeLock();\n     String snapshotPath \u003d null;\n     try {\n       checkOperation(OperationCategory.WRITE);\n-      if (isInSafeMode()) {\n-        throw new SafeModeException(\"Cannot create snapshot for \"\n-            + snapshotRoot, safeMode);\n-      }\n+      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n       getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n           cacheEntry !\u003d null);\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName)\n      throws SafeModeException, IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n        null);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return (String) cacheEntry.getPayload();\n    }\n    writeLock();\n    String snapshotPath \u003d null;\n    try {\n      checkOperation(OperationCategory.WRITE);\n      checkNameNodeSafeMode(\"Cannot create snapshot for \" + snapshotRoot);\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n          cacheEntry !\u003d null);\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "7317e97bd72ca30f5db37fa94389dbdb52ae079e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5299. DFS client hangs in updatePipeline RPC when failover happened. Contributed by Vinay.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529660 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 11:39 AM",
      "commitName": "7317e97bd72ca30f5db37fa94389dbdb52ae079e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "04/10/13 1:54 PM",
      "commitNameOld": "3c1f18de4353215acf9b6820774e84010a0be819",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.91,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   String createSnapshot(String snapshotRoot, String snapshotName)\n       throws SafeModeException, IOException {\n+    checkOperation(OperationCategory.WRITE);\n+    final FSPermissionChecker pc \u003d getPermissionChecker();\n     CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n         null);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return (String) cacheEntry.getPayload();\n     }\n-    final FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     String snapshotPath \u003d null;\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\"Cannot create snapshot for \"\n             + snapshotRoot, safeMode);\n       }\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n       getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n           cacheEntry !\u003d null);\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName)\n      throws SafeModeException, IOException {\n    checkOperation(OperationCategory.WRITE);\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n        null);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return (String) cacheEntry.getPayload();\n    }\n    writeLock();\n    String snapshotPath \u003d null;\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\"Cannot create snapshot for \"\n            + snapshotRoot, safeMode);\n      }\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n          cacheEntry !\u003d null);\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "8c7a7e619699386f9e6991842558d78aa0c8053d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5025. Record ClientId and CallId in EditLog to enable rebuilding retry cache in case of HA failover. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1508332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/07/13 12:51 AM",
      "commitName": "8c7a7e619699386f9e6991842558d78aa0c8053d",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "26/07/13 4:59 PM",
      "commitNameOld": "dc17bda4b677e30c02c2a9a053895a43e41f7a12",
      "commitAuthorOld": "Konstantin Boudnik",
      "daysBetweenCommits": 3.33,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   String createSnapshot(String snapshotRoot, String snapshotName)\n       throws SafeModeException, IOException {\n     CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n         null);\n     if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n       return (String) cacheEntry.getPayload();\n     }\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n     String snapshotPath \u003d null;\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\"Cannot create snapshot for \"\n             + snapshotRoot, safeMode);\n       }\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n-      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName);\n+      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n+          cacheEntry !\u003d null);\n     } finally {\n       writeUnlock();\n       RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName)\n      throws SafeModeException, IOException {\n    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n        null);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return (String) cacheEntry.getPayload();\n    }\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    String snapshotPath \u003d null;\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\"Cannot create snapshot for \"\n            + snapshotRoot, safeMode);\n      }\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName,\n          cacheEntry !\u003d null);\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    },
    "1b531c1dbb452a6192fad411605d2baaa3831bcd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4979. Implement retry cache on Namenode. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1507170 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/07/13 6:09 PM",
      "commitName": "1b531c1dbb452a6192fad411605d2baaa3831bcd",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "24/07/13 5:32 PM",
      "commitNameOld": "f138ae68f9be0ae072a6a4ee50e94a1608c90edb",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,42 @@\n   String createSnapshot(String snapshotRoot, String snapshotName)\n       throws SafeModeException, IOException {\n+    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n+        null);\n+    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n+      return (String) cacheEntry.getPayload();\n+    }\n     final FSPermissionChecker pc \u003d getPermissionChecker();\n     writeLock();\n-    final String snapshotPath;\n+    String snapshotPath \u003d null;\n     try {\n       checkOperation(OperationCategory.WRITE);\n       if (isInSafeMode()) {\n         throw new SafeModeException(\"Cannot create snapshot for \"\n             + snapshotRoot, safeMode);\n       }\n       if (isPermissionEnabled) {\n         checkOwner(pc, snapshotRoot);\n       }\n \n       if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n         snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n       }\n       dir.verifySnapshotName(snapshotName, snapshotRoot);\n       dir.writeLock();\n       try {\n         snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n       } finally {\n         dir.writeUnlock();\n       }\n       getEditLog().logCreateSnapshot(snapshotRoot, snapshotName);\n     } finally {\n       writeUnlock();\n+      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n     }\n     getEditLog().logSync();\n     \n     if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n       logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n     }\n     return snapshotPath;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  String createSnapshot(String snapshotRoot, String snapshotName)\n      throws SafeModeException, IOException {\n    CacheEntryWithPayload cacheEntry \u003d RetryCache.waitForCompletion(retryCache,\n        null);\n    if (cacheEntry !\u003d null \u0026\u0026 cacheEntry.isSuccess()) {\n      return (String) cacheEntry.getPayload();\n    }\n    final FSPermissionChecker pc \u003d getPermissionChecker();\n    writeLock();\n    String snapshotPath \u003d null;\n    try {\n      checkOperation(OperationCategory.WRITE);\n      if (isInSafeMode()) {\n        throw new SafeModeException(\"Cannot create snapshot for \"\n            + snapshotRoot, safeMode);\n      }\n      if (isPermissionEnabled) {\n        checkOwner(pc, snapshotRoot);\n      }\n\n      if (snapshotName \u003d\u003d null || snapshotName.isEmpty()) {\n        snapshotName \u003d Snapshot.generateDefaultSnapshotName();\n      }\n      dir.verifySnapshotName(snapshotName, snapshotRoot);\n      dir.writeLock();\n      try {\n        snapshotPath \u003d snapshotManager.createSnapshot(snapshotRoot, snapshotName);\n      } finally {\n        dir.writeUnlock();\n      }\n      getEditLog().logCreateSnapshot(snapshotRoot, snapshotName);\n    } finally {\n      writeUnlock();\n      RetryCache.setState(cacheEntry, snapshotPath !\u003d null, snapshotPath);\n    }\n    getEditLog().logSync();\n    \n    if (auditLog.isInfoEnabled() \u0026\u0026 isExternalInvocation()) {\n      logAuditEvent(true, \"createSnapshot\", snapshotRoot, snapshotPath, null);\n    }\n    return snapshotPath;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSNamesystem.java",
      "extendedDetails": {}
    }
  }
}