{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FiCaSchedulerApp.java",
  "functionName": "getAllocation",
  "functionId": "getAllocation___resourceCalculator-ResourceCalculator__clusterResource-Resource__minimumAllocation-Resource",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
  "functionStartLine": 798,
  "functionEndLine": 833,
  "numCommitsSeen": 143,
  "timeTaken": 6306,
  "changeHistory": [
    "ef950b086354c8a02eecd6745f6ab0fe5449f7b0",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "fedabcad42067ac7dd24de40fab6be2d3485a540",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
    "ede1a473f5061cf40f6affc1c8c30a645c1fef6c",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434",
    "658097d6da1b1aac8e01db459f0c3b456e99652f",
    "5fd5c9900cfd299428acbc8dff767273e44647c0",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61"
  ],
  "changeHistoryShort": {
    "ef950b086354c8a02eecd6745f6ab0fe5449f7b0": "Ybodychange",
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "fedabcad42067ac7dd24de40fab6be2d3485a540": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Ybodychange",
    "ede1a473f5061cf40f6affc1c8c30a645c1fef6c": "Ybodychange",
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": "Ybodychange",
    "658097d6da1b1aac8e01db459f0c3b456e99652f": "Ybodychange",
    "5fd5c9900cfd299428acbc8dff767273e44647c0": "Ybodychange",
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ef950b086354c8a02eecd6745f6ab0fe5449f7b0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9290. Invalid SchedulingRequest not rejected in Scheduler PlacementConstraintsHandler. Contributed by Prabhu Joseph\n",
      "commitDate": "26/11/19 1:04 PM",
      "commitName": "ef950b086354c8a02eecd6745f6ab0fe5449f7b0",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "15/03/19 4:20 PM",
      "commitNameOld": "2064ca015d1584263aac0cc20c60b925a3aff612",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 255.9,
      "commitsBetweenForRepo": 1794,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n     writeLock.lock();\n     try {\n       Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n           new HashSet\u003cContainerId\u003e(containersToPreempt));\n       containersToPreempt.clear();\n       Resource tot \u003d Resource.newInstance(0, 0);\n       for (ContainerId c : currentContPreemption) {\n         Resources.addTo(tot, liveContainers.get(c).getContainer()\n             .getResource());\n       }\n       int numCont \u003d (int) Math.ceil(\n           Resources.divide(rc, clusterResource, tot, minimumAllocation));\n       ResourceRequest rr \u003d ResourceRequest.newBuilder()\n           .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n           .capability(minimumAllocation).numContainers(numCont).build();\n       List\u003cContainer\u003e previousAttemptContainers \u003d\n           pullPreviousAttemptContainers();\n       List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n       List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n       List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n       List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n       List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n       List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n       Resource headroom \u003d getHeadroom();\n       setApplicationHeadroomForMetrics(headroom);\n       return new Allocation(newlyAllocatedContainers, headroom, null,\n           currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n           newlyIncreasedContainers, newlyDecreasedContainers,\n           newlyPromotedContainers, newlyDemotedContainers,\n-          previousAttemptContainers);\n+          previousAttemptContainers, appSchedulingInfo.getRejectedRequest());\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    writeLock.lock();\n    try {\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newBuilder()\n          .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n          .capability(minimumAllocation).numContainers(numCont).build();\n      List\u003cContainer\u003e previousAttemptContainers \u003d\n          pullPreviousAttemptContainers();\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n      List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers,\n          newlyPromotedContainers, newlyDemotedContainers,\n          previousAttemptContainers, appSchedulingInfo.getRejectedRequest());\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n+    writeLock.lock();\n     try {\n-      writeLock.lock();\n       Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n           new HashSet\u003cContainerId\u003e(containersToPreempt));\n       containersToPreempt.clear();\n       Resource tot \u003d Resource.newInstance(0, 0);\n       for (ContainerId c : currentContPreemption) {\n         Resources.addTo(tot, liveContainers.get(c).getContainer()\n             .getResource());\n       }\n       int numCont \u003d (int) Math.ceil(\n           Resources.divide(rc, clusterResource, tot, minimumAllocation));\n       ResourceRequest rr \u003d ResourceRequest.newBuilder()\n           .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n           .capability(minimumAllocation).numContainers(numCont).build();\n       List\u003cContainer\u003e previousAttemptContainers \u003d\n           pullPreviousAttemptContainers();\n       List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n       List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n       List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n       List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n       List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n       List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n       Resource headroom \u003d getHeadroom();\n       setApplicationHeadroomForMetrics(headroom);\n       return new Allocation(newlyAllocatedContainers, headroom, null,\n           currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n           newlyIncreasedContainers, newlyDecreasedContainers,\n           newlyPromotedContainers, newlyDemotedContainers,\n           previousAttemptContainers);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    writeLock.lock();\n    try {\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newBuilder()\n          .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n          .capability(minimumAllocation).numContainers(numCont).build();\n      List\u003cContainer\u003e previousAttemptContainers \u003d\n          pullPreviousAttemptContainers();\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n      List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers,\n          newlyPromotedContainers, newlyDemotedContainers,\n          previousAttemptContainers);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "fedabcad42067ac7dd24de40fab6be2d3485a540": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6168. Restarted RM may not inform AM about all existing containers. Contributed by Chandni Singh\n",
      "commitDate": "27/11/17 10:19 AM",
      "commitName": "fedabcad42067ac7dd24de40fab6be2d3485a540",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/11/17 11:48 AM",
      "commitNameOld": "0d781dd03b979d65de94978071b2faa55005b34a",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 6.94,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,36 @@\n   public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n     try {\n       writeLock.lock();\n       Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n           new HashSet\u003cContainerId\u003e(containersToPreempt));\n       containersToPreempt.clear();\n       Resource tot \u003d Resource.newInstance(0, 0);\n       for (ContainerId c : currentContPreemption) {\n         Resources.addTo(tot, liveContainers.get(c).getContainer()\n             .getResource());\n       }\n       int numCont \u003d (int) Math.ceil(\n           Resources.divide(rc, clusterResource, tot, minimumAllocation));\n       ResourceRequest rr \u003d ResourceRequest.newBuilder()\n           .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n           .capability(minimumAllocation).numContainers(numCont).build();\n+      List\u003cContainer\u003e previousAttemptContainers \u003d\n+          pullPreviousAttemptContainers();\n       List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n       List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n       List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n       List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n       List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n       List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n       Resource headroom \u003d getHeadroom();\n       setApplicationHeadroomForMetrics(headroom);\n       return new Allocation(newlyAllocatedContainers, headroom, null,\n           currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n           newlyIncreasedContainers, newlyDecreasedContainers,\n-          newlyPromotedContainers, newlyDemotedContainers);\n+          newlyPromotedContainers, newlyDemotedContainers,\n+          previousAttemptContainers);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    try {\n      writeLock.lock();\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newBuilder()\n          .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n          .capability(minimumAllocation).numContainers(numCont).build();\n      List\u003cContainer\u003e previousAttemptContainers \u003d\n          pullPreviousAttemptContainers();\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n      List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers,\n          newlyPromotedContainers, newlyDemotedContainers,\n          previousAttemptContainers);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 12:40 PM",
      "commitNameOld": "ac1e5d4f77e3b9df8dcacb0b1f72eecc27931eb8",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 8.91,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n   public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n     try {\n       writeLock.lock();\n       Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n           new HashSet\u003cContainerId\u003e(containersToPreempt));\n       containersToPreempt.clear();\n       Resource tot \u003d Resource.newInstance(0, 0);\n       for (ContainerId c : currentContPreemption) {\n         Resources.addTo(tot, liveContainers.get(c).getContainer()\n             .getResource());\n       }\n       int numCont \u003d (int) Math.ceil(\n           Resources.divide(rc, clusterResource, tot, minimumAllocation));\n       ResourceRequest rr \u003d ResourceRequest.newBuilder()\n           .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n           .capability(minimumAllocation).numContainers(numCont).build();\n       List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n       List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n       List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n+      List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n+      List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n       List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n       Resource headroom \u003d getHeadroom();\n       setApplicationHeadroomForMetrics(headroom);\n       return new Allocation(newlyAllocatedContainers, headroom, null,\n           currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n-          newlyIncreasedContainers, newlyDecreasedContainers);\n+          newlyIncreasedContainers, newlyDecreasedContainers,\n+          newlyPromotedContainers, newlyDemotedContainers);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    try {\n      writeLock.lock();\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newBuilder()\n          .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n          .capability(minimumAllocation).numContainers(numCont).build();\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cContainer\u003e newlyPromotedContainers \u003d pullNewlyPromotedContainers();\n      List\u003cContainer\u003e newlyDemotedContainers \u003d pullNewlyDemotedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers,\n          newlyPromotedContainers, newlyDemotedContainers);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "ede1a473f5061cf40f6affc1c8c30a645c1fef6c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5552. Add Builder methods for common yarn API records. (Tao Jie via wangda)\n",
      "commitDate": "11/11/16 1:34 PM",
      "commitName": "ede1a473f5061cf40f6affc1c8c30a645c1fef6c",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "07/11/16 10:14 AM",
      "commitNameOld": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 4.14,
      "commitsBetweenForRepo": 40,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,30 @@\n   public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n     try {\n       writeLock.lock();\n       Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n           new HashSet\u003cContainerId\u003e(containersToPreempt));\n       containersToPreempt.clear();\n       Resource tot \u003d Resource.newInstance(0, 0);\n       for (ContainerId c : currentContPreemption) {\n         Resources.addTo(tot, liveContainers.get(c).getContainer()\n             .getResource());\n       }\n       int numCont \u003d (int) Math.ceil(\n           Resources.divide(rc, clusterResource, tot, minimumAllocation));\n-      ResourceRequest rr \u003d ResourceRequest.newInstance(Priority.UNDEFINED,\n-          ResourceRequest.ANY, minimumAllocation, numCont);\n+      ResourceRequest rr \u003d ResourceRequest.newBuilder()\n+          .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n+          .capability(minimumAllocation).numContainers(numCont).build();\n       List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n       List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n       List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n       List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n       Resource headroom \u003d getHeadroom();\n       setApplicationHeadroomForMetrics(headroom);\n       return new Allocation(newlyAllocatedContainers, headroom, null,\n           currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n           newlyIncreasedContainers, newlyDecreasedContainers);\n     } finally {\n       writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    try {\n      writeLock.lock();\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newBuilder()\n          .priority(Priority.UNDEFINED).resourceName(ResourceRequest.ANY)\n          .capability(minimumAllocation).numContainers(numCont).build();\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "b8a30f2f170ffbd590e7366c3c944ab4919e40df": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "19/09/16 2:08 AM",
      "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
      "commitAuthor": "Jian He",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "02/09/16 3:32 AM",
          "commitNameOld": "05f5c0f631680cffc36a79550c351620615445db",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 16.94,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  public synchronized Allocation getAllocation(ResourceCalculator rc,\n+  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n-\n-    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n-        new HashSet\u003cContainerId\u003e(containersToPreempt));\n-    containersToPreempt.clear();\n-    Resource tot \u003d Resource.newInstance(0, 0);\n-    for(ContainerId c : currentContPreemption){\n-      Resources.addTo(tot,\n-          liveContainers.get(c).getContainer().getResource());\n+    try {\n+      writeLock.lock();\n+      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n+          new HashSet\u003cContainerId\u003e(containersToPreempt));\n+      containersToPreempt.clear();\n+      Resource tot \u003d Resource.newInstance(0, 0);\n+      for (ContainerId c : currentContPreemption) {\n+        Resources.addTo(tot, liveContainers.get(c).getContainer()\n+            .getResource());\n+      }\n+      int numCont \u003d (int) Math.ceil(\n+          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n+      ResourceRequest rr \u003d ResourceRequest.newInstance(Priority.UNDEFINED,\n+          ResourceRequest.ANY, minimumAllocation, numCont);\n+      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n+      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n+      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n+      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n+      Resource headroom \u003d getHeadroom();\n+      setApplicationHeadroomForMetrics(headroom);\n+      return new Allocation(newlyAllocatedContainers, headroom, null,\n+          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n+          newlyIncreasedContainers, newlyDecreasedContainers);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    int numCont \u003d (int) Math.ceil(\n-        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n-    ResourceRequest rr \u003d ResourceRequest.newInstance(\n-        Priority.UNDEFINED, ResourceRequest.ANY,\n-        minimumAllocation, numCont);\n-    List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n-    List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n-    List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n-    List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n-    Resource headroom \u003d getHeadroom();\n-    setApplicationHeadroomForMetrics(headroom);\n-    return new Allocation(newlyAllocatedContainers, headroom, null,\n-        currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n-        newlyIncreasedContainers, newlyDecreasedContainers);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    try {\n      writeLock.lock();\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newInstance(Priority.UNDEFINED,\n          ResourceRequest.ANY, minimumAllocation, numCont);\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[rc-ResourceCalculator, clusterResource-Resource, minimumAllocation-Resource]",
            "newValue": "[resourceCalculator-ResourceCalculator, clusterResource-Resource, minimumAllocation-Resource]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "02/09/16 3:32 AM",
          "commitNameOld": "05f5c0f631680cffc36a79550c351620615445db",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 16.94,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  public synchronized Allocation getAllocation(ResourceCalculator rc,\n+  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n-\n-    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n-        new HashSet\u003cContainerId\u003e(containersToPreempt));\n-    containersToPreempt.clear();\n-    Resource tot \u003d Resource.newInstance(0, 0);\n-    for(ContainerId c : currentContPreemption){\n-      Resources.addTo(tot,\n-          liveContainers.get(c).getContainer().getResource());\n+    try {\n+      writeLock.lock();\n+      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n+          new HashSet\u003cContainerId\u003e(containersToPreempt));\n+      containersToPreempt.clear();\n+      Resource tot \u003d Resource.newInstance(0, 0);\n+      for (ContainerId c : currentContPreemption) {\n+        Resources.addTo(tot, liveContainers.get(c).getContainer()\n+            .getResource());\n+      }\n+      int numCont \u003d (int) Math.ceil(\n+          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n+      ResourceRequest rr \u003d ResourceRequest.newInstance(Priority.UNDEFINED,\n+          ResourceRequest.ANY, minimumAllocation, numCont);\n+      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n+      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n+      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n+      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n+      Resource headroom \u003d getHeadroom();\n+      setApplicationHeadroomForMetrics(headroom);\n+      return new Allocation(newlyAllocatedContainers, headroom, null,\n+          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n+          newlyIncreasedContainers, newlyDecreasedContainers);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    int numCont \u003d (int) Math.ceil(\n-        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n-    ResourceRequest rr \u003d ResourceRequest.newInstance(\n-        Priority.UNDEFINED, ResourceRequest.ANY,\n-        minimumAllocation, numCont);\n-    List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n-    List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n-    List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n-    List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n-    Resource headroom \u003d getHeadroom();\n-    setApplicationHeadroomForMetrics(headroom);\n-    return new Allocation(newlyAllocatedContainers, headroom, null,\n-        currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n-        newlyIncreasedContainers, newlyDecreasedContainers);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    try {\n      writeLock.lock();\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newInstance(Priority.UNDEFINED,\n          ResourceRequest.ANY, minimumAllocation, numCont);\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3141. Improve locks in SchedulerApplicationAttempt/FSAppAttempt/FiCaSchedulerApp. Contributed by Wangda Tan\n",
          "commitDate": "19/09/16 2:08 AM",
          "commitName": "b8a30f2f170ffbd590e7366c3c944ab4919e40df",
          "commitAuthor": "Jian He",
          "commitDateOld": "02/09/16 3:32 AM",
          "commitNameOld": "05f5c0f631680cffc36a79550c351620615445db",
          "commitAuthorOld": "Varun Vasudev",
          "daysBetweenCommits": 16.94,
          "commitsBetweenForRepo": 79,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,26 +1,29 @@\n-  public synchronized Allocation getAllocation(ResourceCalculator rc,\n+  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n       Resource clusterResource, Resource minimumAllocation) {\n-\n-    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n-        new HashSet\u003cContainerId\u003e(containersToPreempt));\n-    containersToPreempt.clear();\n-    Resource tot \u003d Resource.newInstance(0, 0);\n-    for(ContainerId c : currentContPreemption){\n-      Resources.addTo(tot,\n-          liveContainers.get(c).getContainer().getResource());\n+    try {\n+      writeLock.lock();\n+      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n+          new HashSet\u003cContainerId\u003e(containersToPreempt));\n+      containersToPreempt.clear();\n+      Resource tot \u003d Resource.newInstance(0, 0);\n+      for (ContainerId c : currentContPreemption) {\n+        Resources.addTo(tot, liveContainers.get(c).getContainer()\n+            .getResource());\n+      }\n+      int numCont \u003d (int) Math.ceil(\n+          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n+      ResourceRequest rr \u003d ResourceRequest.newInstance(Priority.UNDEFINED,\n+          ResourceRequest.ANY, minimumAllocation, numCont);\n+      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n+      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n+      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n+      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n+      Resource headroom \u003d getHeadroom();\n+      setApplicationHeadroomForMetrics(headroom);\n+      return new Allocation(newlyAllocatedContainers, headroom, null,\n+          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n+          newlyIncreasedContainers, newlyDecreasedContainers);\n+    } finally {\n+      writeLock.unlock();\n     }\n-    int numCont \u003d (int) Math.ceil(\n-        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n-    ResourceRequest rr \u003d ResourceRequest.newInstance(\n-        Priority.UNDEFINED, ResourceRequest.ANY,\n-        minimumAllocation, numCont);\n-    List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n-    List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n-    List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n-    List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n-    Resource headroom \u003d getHeadroom();\n-    setApplicationHeadroomForMetrics(headroom);\n-    return new Allocation(newlyAllocatedContainers, headroom, null,\n-        currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n-        newlyIncreasedContainers, newlyDecreasedContainers);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Allocation getAllocation(ResourceCalculator resourceCalculator,\n      Resource clusterResource, Resource minimumAllocation) {\n    try {\n      writeLock.lock();\n      Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n          new HashSet\u003cContainerId\u003e(containersToPreempt));\n      containersToPreempt.clear();\n      Resource tot \u003d Resource.newInstance(0, 0);\n      for (ContainerId c : currentContPreemption) {\n        Resources.addTo(tot, liveContainers.get(c).getContainer()\n            .getResource());\n      }\n      int numCont \u003d (int) Math.ceil(\n          Resources.divide(rc, clusterResource, tot, minimumAllocation));\n      ResourceRequest rr \u003d ResourceRequest.newInstance(Priority.UNDEFINED,\n          ResourceRequest.ANY, minimumAllocation, numCont);\n      List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n      List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n      List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n      List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n      Resource headroom \u003d getHeadroom();\n      setApplicationHeadroomForMetrics(headroom);\n      return new Allocation(newlyAllocatedContainers, headroom, null,\n          currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n          newlyIncreasedContainers, newlyDecreasedContainers);\n    } finally {\n      writeLock.unlock();\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
          "extendedDetails": {}
        }
      ]
    },
    "89cab1ba5f0671f8ef30dbe7432079c18362b434": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1651. CapacityScheduler side changes to support container resize. Contributed by Wangda Tan\n",
      "commitDate": "23/09/15 1:29 PM",
      "commitName": "89cab1ba5f0671f8ef30dbe7432079c18362b434",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/09/15 1:49 AM",
      "commitNameOld": "bf669b6d9f8ba165e30b8823218d625a49958925",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 22.49,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,26 @@\n   public synchronized Allocation getAllocation(ResourceCalculator rc,\n       Resource clusterResource, Resource minimumAllocation) {\n \n     Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n         new HashSet\u003cContainerId\u003e(containersToPreempt));\n     containersToPreempt.clear();\n     Resource tot \u003d Resource.newInstance(0, 0);\n     for(ContainerId c : currentContPreemption){\n       Resources.addTo(tot,\n           liveContainers.get(c).getContainer().getResource());\n     }\n     int numCont \u003d (int) Math.ceil(\n         Resources.divide(rc, clusterResource, tot, minimumAllocation));\n     ResourceRequest rr \u003d ResourceRequest.newInstance(\n         Priority.UNDEFINED, ResourceRequest.ANY,\n         minimumAllocation, numCont);\n-    ContainersAndNMTokensAllocation allocation \u003d\n-        pullNewlyAllocatedContainersAndNMTokens();\n+    List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n+    List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n+    List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n+    List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n     Resource headroom \u003d getHeadroom();\n     setApplicationHeadroomForMetrics(headroom);\n-    return new Allocation(allocation.getContainerList(), headroom, null,\n-      currentContPreemption, Collections.singletonList(rr),\n-      allocation.getNMTokenList());\n+    return new Allocation(newlyAllocatedContainers, headroom, null,\n+        currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n+        newlyIncreasedContainers, newlyDecreasedContainers);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Allocation getAllocation(ResourceCalculator rc,\n      Resource clusterResource, Resource minimumAllocation) {\n\n    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n        new HashSet\u003cContainerId\u003e(containersToPreempt));\n    containersToPreempt.clear();\n    Resource tot \u003d Resource.newInstance(0, 0);\n    for(ContainerId c : currentContPreemption){\n      Resources.addTo(tot,\n          liveContainers.get(c).getContainer().getResource());\n    }\n    int numCont \u003d (int) Math.ceil(\n        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n    ResourceRequest rr \u003d ResourceRequest.newInstance(\n        Priority.UNDEFINED, ResourceRequest.ANY,\n        minimumAllocation, numCont);\n    List\u003cContainer\u003e newlyAllocatedContainers \u003d pullNewlyAllocatedContainers();\n    List\u003cContainer\u003e newlyIncreasedContainers \u003d pullNewlyIncreasedContainers();\n    List\u003cContainer\u003e newlyDecreasedContainers \u003d pullNewlyDecreasedContainers();\n    List\u003cNMToken\u003e updatedNMTokens \u003d pullUpdatedNMTokens();\n    Resource headroom \u003d getHeadroom();\n    setApplicationHeadroomForMetrics(headroom);\n    return new Allocation(newlyAllocatedContainers, headroom, null,\n        currentContPreemption, Collections.singletonList(rr), updatedNMTokens,\n        newlyIncreasedContainers, newlyDecreasedContainers);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "658097d6da1b1aac8e01db459f0c3b456e99652f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3273. Improve scheduler UI to facilitate scheduling analysis and debugging. Contributed Rohith Sharmaks\n",
      "commitDate": "17/03/15 9:30 PM",
      "commitName": "658097d6da1b1aac8e01db459f0c3b456e99652f",
      "commitAuthor": "Jian He",
      "commitDateOld": "17/03/15 10:24 AM",
      "commitNameOld": "487374b7fe0c92fc7eb1406c568952722b5d5b15",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 0.46,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,24 @@\n   public synchronized Allocation getAllocation(ResourceCalculator rc,\n       Resource clusterResource, Resource minimumAllocation) {\n \n     Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n         new HashSet\u003cContainerId\u003e(containersToPreempt));\n     containersToPreempt.clear();\n     Resource tot \u003d Resource.newInstance(0, 0);\n     for(ContainerId c : currentContPreemption){\n       Resources.addTo(tot,\n           liveContainers.get(c).getContainer().getResource());\n     }\n     int numCont \u003d (int) Math.ceil(\n         Resources.divide(rc, clusterResource, tot, minimumAllocation));\n     ResourceRequest rr \u003d ResourceRequest.newInstance(\n         Priority.UNDEFINED, ResourceRequest.ANY,\n         minimumAllocation, numCont);\n     ContainersAndNMTokensAllocation allocation \u003d\n         pullNewlyAllocatedContainersAndNMTokens();\n-    return new Allocation(allocation.getContainerList(), getHeadroom(), null,\n+    Resource headroom \u003d getHeadroom();\n+    setApplicationHeadroomForMetrics(headroom);\n+    return new Allocation(allocation.getContainerList(), headroom, null,\n       currentContPreemption, Collections.singletonList(rr),\n       allocation.getNMTokenList());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Allocation getAllocation(ResourceCalculator rc,\n      Resource clusterResource, Resource minimumAllocation) {\n\n    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n        new HashSet\u003cContainerId\u003e(containersToPreempt));\n    containersToPreempt.clear();\n    Resource tot \u003d Resource.newInstance(0, 0);\n    for(ContainerId c : currentContPreemption){\n      Resources.addTo(tot,\n          liveContainers.get(c).getContainer().getResource());\n    }\n    int numCont \u003d (int) Math.ceil(\n        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n    ResourceRequest rr \u003d ResourceRequest.newInstance(\n        Priority.UNDEFINED, ResourceRequest.ANY,\n        minimumAllocation, numCont);\n    ContainersAndNMTokensAllocation allocation \u003d\n        pullNewlyAllocatedContainersAndNMTokens();\n    Resource headroom \u003d getHeadroom();\n    setApplicationHeadroomForMetrics(headroom);\n    return new Allocation(allocation.getContainerList(), headroom, null,\n      currentContPreemption, Collections.singletonList(rr),\n      allocation.getNMTokenList());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "5fd5c9900cfd299428acbc8dff767273e44647c0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-713. Fixed ResourceManager to not crash while building tokens when DNS issues happen transmittently. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1569979 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/02/14 3:39 PM",
      "commitName": "5fd5c9900cfd299428acbc8dff767273e44647c0",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/02/14 3:04 PM",
      "commitNameOld": "bc939f7ae607d32d52c4e9ceacdfb25c1850e04c",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 7.02,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,22 @@\n   public synchronized Allocation getAllocation(ResourceCalculator rc,\n       Resource clusterResource, Resource minimumAllocation) {\n \n     Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n         new HashSet\u003cContainerId\u003e(containersToPreempt));\n     containersToPreempt.clear();\n     Resource tot \u003d Resource.newInstance(0, 0);\n     for(ContainerId c : currentContPreemption){\n       Resources.addTo(tot,\n           liveContainers.get(c).getContainer().getResource());\n     }\n     int numCont \u003d (int) Math.ceil(\n         Resources.divide(rc, clusterResource, tot, minimumAllocation));\n     ResourceRequest rr \u003d ResourceRequest.newInstance(\n         Priority.UNDEFINED, ResourceRequest.ANY,\n         minimumAllocation, numCont);\n-    return new Allocation(pullNewlyAllocatedContainers(), getHeadroom(),\n-                          null, currentContPreemption,\n-                          Collections.singletonList(rr));\n+    ContainersAndNMTokensAllocation allocation \u003d\n+        pullNewlyAllocatedContainersAndNMTokens();\n+    return new Allocation(allocation.getContainerList(), getHeadroom(), null,\n+      currentContPreemption, Collections.singletonList(rr),\n+      allocation.getNMTokenList());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Allocation getAllocation(ResourceCalculator rc,\n      Resource clusterResource, Resource minimumAllocation) {\n\n    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n        new HashSet\u003cContainerId\u003e(containersToPreempt));\n    containersToPreempt.clear();\n    Resource tot \u003d Resource.newInstance(0, 0);\n    for(ContainerId c : currentContPreemption){\n      Resources.addTo(tot,\n          liveContainers.get(c).getContainer().getResource());\n    }\n    int numCont \u003d (int) Math.ceil(\n        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n    ResourceRequest rr \u003d ResourceRequest.newInstance(\n        Priority.UNDEFINED, ResourceRequest.ANY,\n        minimumAllocation, numCont);\n    ContainersAndNMTokensAllocation allocation \u003d\n        pullNewlyAllocatedContainersAndNMTokens();\n    return new Allocation(allocation.getContainerList(), getHeadroom(), null,\n      currentContPreemption, Collections.singletonList(rr),\n      allocation.getNMTokenList());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java",
      "extendedDetails": {}
    },
    "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61": {
      "type": "Yintroduced",
      "commitMessage": "YARN-569. Add support for requesting and enforcing preemption requests via\na capacity monitor. Contributed by Carlo Curino, Chris Douglas\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1502083 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/07/13 6:20 PM",
      "commitName": "85f0efb68f9d1d9ee3466e3939c4fc2f985ccf61",
      "commitAuthor": "Christopher Douglas",
      "diff": "@@ -0,0 +1,20 @@\n+  public synchronized Allocation getAllocation(ResourceCalculator rc,\n+      Resource clusterResource, Resource minimumAllocation) {\n+\n+    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n+        new HashSet\u003cContainerId\u003e(containersToPreempt));\n+    containersToPreempt.clear();\n+    Resource tot \u003d Resource.newInstance(0, 0);\n+    for(ContainerId c : currentContPreemption){\n+      Resources.addTo(tot,\n+          liveContainers.get(c).getContainer().getResource());\n+    }\n+    int numCont \u003d (int) Math.ceil(\n+        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n+    ResourceRequest rr \u003d ResourceRequest.newInstance(\n+        Priority.UNDEFINED, ResourceRequest.ANY,\n+        minimumAllocation, numCont);\n+    return new Allocation(pullNewlyAllocatedContainers(), getHeadroom(),\n+                          null, currentContPreemption,\n+                          Collections.singletonList(rr));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized Allocation getAllocation(ResourceCalculator rc,\n      Resource clusterResource, Resource minimumAllocation) {\n\n    Set\u003cContainerId\u003e currentContPreemption \u003d Collections.unmodifiableSet(\n        new HashSet\u003cContainerId\u003e(containersToPreempt));\n    containersToPreempt.clear();\n    Resource tot \u003d Resource.newInstance(0, 0);\n    for(ContainerId c : currentContPreemption){\n      Resources.addTo(tot,\n          liveContainers.get(c).getContainer().getResource());\n    }\n    int numCont \u003d (int) Math.ceil(\n        Resources.divide(rc, clusterResource, tot, minimumAllocation));\n    ResourceRequest rr \u003d ResourceRequest.newInstance(\n        Priority.UNDEFINED, ResourceRequest.ANY,\n        minimumAllocation, numCont);\n    return new Allocation(pullNewlyAllocatedContainers(), getHeadroom(),\n                          null, currentContPreemption,\n                          Collections.singletonList(rr));\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/common/fica/FiCaSchedulerApp.java"
    }
  }
}