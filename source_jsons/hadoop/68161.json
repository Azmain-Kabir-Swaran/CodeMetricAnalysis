{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SwiftNativeFileSystem.java",
  "functionName": "create",
  "functionId": "create___file-Path__permission-FsPermission__overwrite-boolean__bufferSize-int__replication-short__blockSize-long__progress-Progressable",
  "sourceFilePath": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystem.java",
  "functionStartLine": 474,
  "functionEndLine": 527,
  "numCommitsSeen": 9,
  "timeTaken": 832,
  "changeHistory": [
    "becc23fb65a5c2b632034b8b2c4c08832d47fd96",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874"
  ],
  "changeHistoryShort": {
    "becc23fb65a5c2b632034b8b2c4c08832d47fd96": "Ybodychange",
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": "Yintroduced"
  },
  "changeHistoryDetails": {
    "becc23fb65a5c2b632034b8b2c4c08832d47fd96": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9361: Strictly define FileSystem APIs - OpenStack portion\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607599 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:10 AM",
      "commitName": "becc23fb65a5c2b632034b8b2c4c08832d47fd96",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "27/09/13 4:32 AM",
      "commitNameOld": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 279.03,
      "commitsBetweenForRepo": 1881,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public FSDataOutputStream create(Path file, FsPermission permission,\n                                    boolean overwrite, int bufferSize,\n                                    short replication, long blockSize,\n                                    Progressable progress)\n           throws IOException {\n     LOG.debug(\"SwiftFileSystem.create\");\n \n     FileStatus fileStatus \u003d null;\n     Path absolutePath \u003d makeAbsolute(file);\n     try {\n       fileStatus \u003d getFileStatus(absolutePath);\n     } catch (FileNotFoundException e) {\n       //the file isn\u0027t there.\n     }\n \n     if (fileStatus !\u003d null) {\n       //the path exists -action depends on whether or not it is a directory,\n       //and what the overwrite policy is.\n \n       //What is clear at this point is that if the entry exists, there\u0027s\n       //no need to bother creating any parent entries\n       if (fileStatus.isDirectory()) {\n         //here someone is trying to create a file over a directory\n \n /*    we can\u0027t throw an exception here as there is no easy way to distinguish\n      a file from the dir\n \n         throw new SwiftPathExistsException(\"Cannot create a file over a directory:\"\n                                            + file);\n  */\n         if (LOG.isDebugEnabled()) {\n           LOG.debug(\"Overwriting either an empty file or a directory\");\n         }\n       }\n       if (overwrite) {\n         //overwrite set -\u003e delete the object.\n         store.delete(absolutePath, true);\n       } else {\n-        throw new SwiftPathExistsException(\"Path exists: \" + file);\n+        throw new FileAlreadyExistsException(\"Path exists: \" + file);\n       }\n     } else {\n       // destination does not exist -trigger creation of the parent\n       Path parent \u003d file.getParent();\n       if (parent !\u003d null) {\n         if (!mkdirs(parent)) {\n           throw new SwiftOperationFailedException(\n             \"Mkdirs failed to create \" + parent);\n         }\n       }\n     }\n \n     SwiftNativeOutputStream out \u003d createSwiftOutputStream(file);\n     return new FSDataOutputStream(out, statistics);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n                                   boolean overwrite, int bufferSize,\n                                   short replication, long blockSize,\n                                   Progressable progress)\n          throws IOException {\n    LOG.debug(\"SwiftFileSystem.create\");\n\n    FileStatus fileStatus \u003d null;\n    Path absolutePath \u003d makeAbsolute(file);\n    try {\n      fileStatus \u003d getFileStatus(absolutePath);\n    } catch (FileNotFoundException e) {\n      //the file isn\u0027t there.\n    }\n\n    if (fileStatus !\u003d null) {\n      //the path exists -action depends on whether or not it is a directory,\n      //and what the overwrite policy is.\n\n      //What is clear at this point is that if the entry exists, there\u0027s\n      //no need to bother creating any parent entries\n      if (fileStatus.isDirectory()) {\n        //here someone is trying to create a file over a directory\n\n/*    we can\u0027t throw an exception here as there is no easy way to distinguish\n     a file from the dir\n\n        throw new SwiftPathExistsException(\"Cannot create a file over a directory:\"\n                                           + file);\n */\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Overwriting either an empty file or a directory\");\n        }\n      }\n      if (overwrite) {\n        //overwrite set -\u003e delete the object.\n        store.delete(absolutePath, true);\n      } else {\n        throw new FileAlreadyExistsException(\"Path exists: \" + file);\n      }\n    } else {\n      // destination does not exist -trigger creation of the parent\n      Path parent \u003d file.getParent();\n      if (parent !\u003d null) {\n        if (!mkdirs(parent)) {\n          throw new SwiftOperationFailedException(\n            \"Mkdirs failed to create \" + parent);\n        }\n      }\n    }\n\n    SwiftNativeOutputStream out \u003d createSwiftOutputStream(file);\n    return new FSDataOutputStream(out, statistics);\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystem.java",
      "extendedDetails": {}
    },
    "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8545. Filesystem Implementation for OpenStack Swift\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1526854 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/09/13 4:32 AM",
      "commitName": "3caca924bc72fe4a0e5b1ea89adb098cc1eb7874",
      "commitAuthor": "Steve Loughran",
      "diff": "@@ -0,0 +1,54 @@\n+  public FSDataOutputStream create(Path file, FsPermission permission,\n+                                   boolean overwrite, int bufferSize,\n+                                   short replication, long blockSize,\n+                                   Progressable progress)\n+          throws IOException {\n+    LOG.debug(\"SwiftFileSystem.create\");\n+\n+    FileStatus fileStatus \u003d null;\n+    Path absolutePath \u003d makeAbsolute(file);\n+    try {\n+      fileStatus \u003d getFileStatus(absolutePath);\n+    } catch (FileNotFoundException e) {\n+      //the file isn\u0027t there.\n+    }\n+\n+    if (fileStatus !\u003d null) {\n+      //the path exists -action depends on whether or not it is a directory,\n+      //and what the overwrite policy is.\n+\n+      //What is clear at this point is that if the entry exists, there\u0027s\n+      //no need to bother creating any parent entries\n+      if (fileStatus.isDirectory()) {\n+        //here someone is trying to create a file over a directory\n+\n+/*    we can\u0027t throw an exception here as there is no easy way to distinguish\n+     a file from the dir\n+\n+        throw new SwiftPathExistsException(\"Cannot create a file over a directory:\"\n+                                           + file);\n+ */\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Overwriting either an empty file or a directory\");\n+        }\n+      }\n+      if (overwrite) {\n+        //overwrite set -\u003e delete the object.\n+        store.delete(absolutePath, true);\n+      } else {\n+        throw new SwiftPathExistsException(\"Path exists: \" + file);\n+      }\n+    } else {\n+      // destination does not exist -trigger creation of the parent\n+      Path parent \u003d file.getParent();\n+      if (parent !\u003d null) {\n+        if (!mkdirs(parent)) {\n+          throw new SwiftOperationFailedException(\n+            \"Mkdirs failed to create \" + parent);\n+        }\n+      }\n+    }\n+\n+    SwiftNativeOutputStream out \u003d createSwiftOutputStream(file);\n+    return new FSDataOutputStream(out, statistics);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FSDataOutputStream create(Path file, FsPermission permission,\n                                   boolean overwrite, int bufferSize,\n                                   short replication, long blockSize,\n                                   Progressable progress)\n          throws IOException {\n    LOG.debug(\"SwiftFileSystem.create\");\n\n    FileStatus fileStatus \u003d null;\n    Path absolutePath \u003d makeAbsolute(file);\n    try {\n      fileStatus \u003d getFileStatus(absolutePath);\n    } catch (FileNotFoundException e) {\n      //the file isn\u0027t there.\n    }\n\n    if (fileStatus !\u003d null) {\n      //the path exists -action depends on whether or not it is a directory,\n      //and what the overwrite policy is.\n\n      //What is clear at this point is that if the entry exists, there\u0027s\n      //no need to bother creating any parent entries\n      if (fileStatus.isDirectory()) {\n        //here someone is trying to create a file over a directory\n\n/*    we can\u0027t throw an exception here as there is no easy way to distinguish\n     a file from the dir\n\n        throw new SwiftPathExistsException(\"Cannot create a file over a directory:\"\n                                           + file);\n */\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Overwriting either an empty file or a directory\");\n        }\n      }\n      if (overwrite) {\n        //overwrite set -\u003e delete the object.\n        store.delete(absolutePath, true);\n      } else {\n        throw new SwiftPathExistsException(\"Path exists: \" + file);\n      }\n    } else {\n      // destination does not exist -trigger creation of the parent\n      Path parent \u003d file.getParent();\n      if (parent !\u003d null) {\n        if (!mkdirs(parent)) {\n          throw new SwiftOperationFailedException(\n            \"Mkdirs failed to create \" + parent);\n        }\n      }\n    }\n\n    SwiftNativeOutputStream out \u003d createSwiftOutputStream(file);\n    return new FSDataOutputStream(out, statistics);\n  }",
      "path": "hadoop-tools/hadoop-openstack/src/main/java/org/apache/hadoop/fs/swift/snative/SwiftNativeFileSystem.java"
    }
  }
}