{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ReencryptionUpdater.java",
  "functionName": "takeAndProcessTasks",
  "functionId": "takeAndProcessTasks",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
  "functionStartLine": 423,
  "functionEndLine": 461,
  "numCommitsSeen": 5,
  "timeTaken": 2816,
  "changeHistory": [
    "248d9b6fff648cdb02581d458556b6f7c090ef1a",
    "633c1ea4554cae6cd684f60848497817d4ed3d82",
    "1000a2af04b24c123a3b08168f36b4e90420cab7"
  ],
  "changeHistoryShort": {
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": "Ybodychange",
    "633c1ea4554cae6cd684f60848497817d4ed3d82": "Ybodychange",
    "1000a2af04b24c123a3b08168f36b4e90420cab7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "248d9b6fff648cdb02581d458556b6f7c090ef1a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12518. Re-encryption should handle task cancellation and progress better.\n",
      "commitDate": "20/10/17 4:25 PM",
      "commitName": "248d9b6fff648cdb02581d458556b6f7c090ef1a",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "03/09/17 7:50 PM",
      "commitNameOld": "633c1ea4554cae6cd684f60848497817d4ed3d82",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 46.86,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private void takeAndProcessTasks() throws Exception {\n     final Future\u003cReencryptionTask\u003e completed \u003d batchService.take();\n     throttle();\n     checkPauseForTesting();\n-    ReencryptionTask task \u003d completed.get();\n     if (completed.isCancelled()) {\n-      LOG.debug(\"Skipped canceled re-encryption task for zone {}, last: {}\",\n-          task.zoneId, task.lastFile);\n+      // Ignore canceled zones. The cancellation is edit-logged by the handler.\n+      LOG.debug(\"Skipped a canceled re-encryption task\");\n       return;\n     }\n+    final ReencryptionTask task \u003d completed.get();\n \n     boolean shouldRetry;\n     do {\n       dir.getFSNamesystem().writeLock();\n       try {\n         throttleTimerLocked.start();\n         processTask(task);\n         shouldRetry \u003d false;\n       } catch (RetriableException | SafeModeException re) {\n         // Keep retrying until succeed.\n         LOG.info(\"Exception when processing re-encryption task for zone {}, \"\n                 + \"retrying...\", task.zoneId, re);\n         shouldRetry \u003d true;\n         Thread.sleep(faultRetryInterval);\n       } catch (IOException ioe) {\n         LOG.warn(\"Failure processing re-encryption task for zone {}\",\n             task.zoneId, ioe);\n         ++task.numFailures;\n         task.processed \u003d true;\n         shouldRetry \u003d false;\n       } finally {\n         dir.getFSNamesystem().writeUnlock(\"reencryptUpdater\");\n         throttleTimerLocked.stop();\n       }\n       // logSync regardless, to prevent edit log buffer overflow triggering\n       // logSync inside FSN writelock.\n       dir.getEditLog().logSync();\n     } while (shouldRetry);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void takeAndProcessTasks() throws Exception {\n    final Future\u003cReencryptionTask\u003e completed \u003d batchService.take();\n    throttle();\n    checkPauseForTesting();\n    if (completed.isCancelled()) {\n      // Ignore canceled zones. The cancellation is edit-logged by the handler.\n      LOG.debug(\"Skipped a canceled re-encryption task\");\n      return;\n    }\n    final ReencryptionTask task \u003d completed.get();\n\n    boolean shouldRetry;\n    do {\n      dir.getFSNamesystem().writeLock();\n      try {\n        throttleTimerLocked.start();\n        processTask(task);\n        shouldRetry \u003d false;\n      } catch (RetriableException | SafeModeException re) {\n        // Keep retrying until succeed.\n        LOG.info(\"Exception when processing re-encryption task for zone {}, \"\n                + \"retrying...\", task.zoneId, re);\n        shouldRetry \u003d true;\n        Thread.sleep(faultRetryInterval);\n      } catch (IOException ioe) {\n        LOG.warn(\"Failure processing re-encryption task for zone {}\",\n            task.zoneId, ioe);\n        ++task.numFailures;\n        task.processed \u003d true;\n        shouldRetry \u003d false;\n      } finally {\n        dir.getFSNamesystem().writeUnlock(\"reencryptUpdater\");\n        throttleTimerLocked.stop();\n      }\n      // logSync regardless, to prevent edit log buffer overflow triggering\n      // logSync inside FSN writelock.\n      dir.getEditLog().logSync();\n    } while (shouldRetry);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
      "extendedDetails": {}
    },
    "633c1ea4554cae6cd684f60848497817d4ed3d82": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12383. Re-encryption updater should handle canceled tasks better.\n",
      "commitDate": "03/09/17 7:50 PM",
      "commitName": "633c1ea4554cae6cd684f60848497817d4ed3d82",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "23/08/17 5:06 PM",
      "commitNameOld": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 11.11,
      "commitsBetweenForRepo": 127,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,39 @@\n   private void takeAndProcessTasks() throws Exception {\n     final Future\u003cReencryptionTask\u003e completed \u003d batchService.take();\n     throttle();\n     checkPauseForTesting();\n     ReencryptionTask task \u003d completed.get();\n     if (completed.isCancelled()) {\n       LOG.debug(\"Skipped canceled re-encryption task for zone {}, last: {}\",\n           task.zoneId, task.lastFile);\n+      return;\n     }\n \n     boolean shouldRetry;\n     do {\n       dir.getFSNamesystem().writeLock();\n       try {\n         throttleTimerLocked.start();\n         processTask(task);\n         shouldRetry \u003d false;\n       } catch (RetriableException | SafeModeException re) {\n         // Keep retrying until succeed.\n         LOG.info(\"Exception when processing re-encryption task for zone {}, \"\n                 + \"retrying...\", task.zoneId, re);\n         shouldRetry \u003d true;\n         Thread.sleep(faultRetryInterval);\n       } catch (IOException ioe) {\n         LOG.warn(\"Failure processing re-encryption task for zone {}\",\n             task.zoneId, ioe);\n         ++task.numFailures;\n         task.processed \u003d true;\n         shouldRetry \u003d false;\n       } finally {\n         dir.getFSNamesystem().writeUnlock(\"reencryptUpdater\");\n         throttleTimerLocked.stop();\n       }\n       // logSync regardless, to prevent edit log buffer overflow triggering\n       // logSync inside FSN writelock.\n       dir.getEditLog().logSync();\n     } while (shouldRetry);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void takeAndProcessTasks() throws Exception {\n    final Future\u003cReencryptionTask\u003e completed \u003d batchService.take();\n    throttle();\n    checkPauseForTesting();\n    ReencryptionTask task \u003d completed.get();\n    if (completed.isCancelled()) {\n      LOG.debug(\"Skipped canceled re-encryption task for zone {}, last: {}\",\n          task.zoneId, task.lastFile);\n      return;\n    }\n\n    boolean shouldRetry;\n    do {\n      dir.getFSNamesystem().writeLock();\n      try {\n        throttleTimerLocked.start();\n        processTask(task);\n        shouldRetry \u003d false;\n      } catch (RetriableException | SafeModeException re) {\n        // Keep retrying until succeed.\n        LOG.info(\"Exception when processing re-encryption task for zone {}, \"\n                + \"retrying...\", task.zoneId, re);\n        shouldRetry \u003d true;\n        Thread.sleep(faultRetryInterval);\n      } catch (IOException ioe) {\n        LOG.warn(\"Failure processing re-encryption task for zone {}\",\n            task.zoneId, ioe);\n        ++task.numFailures;\n        task.processed \u003d true;\n        shouldRetry \u003d false;\n      } finally {\n        dir.getFSNamesystem().writeUnlock(\"reencryptUpdater\");\n        throttleTimerLocked.stop();\n      }\n      // logSync regardless, to prevent edit log buffer overflow triggering\n      // logSync inside FSN writelock.\n      dir.getEditLog().logSync();\n    } while (shouldRetry);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java",
      "extendedDetails": {}
    },
    "1000a2af04b24c123a3b08168f36b4e90420cab7": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10899. Add functionality to re-encrypt EDEKs.\n",
      "commitDate": "23/08/17 5:06 PM",
      "commitName": "1000a2af04b24c123a3b08168f36b4e90420cab7",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,38 @@\n+  private void takeAndProcessTasks() throws Exception {\n+    final Future\u003cReencryptionTask\u003e completed \u003d batchService.take();\n+    throttle();\n+    checkPauseForTesting();\n+    ReencryptionTask task \u003d completed.get();\n+    if (completed.isCancelled()) {\n+      LOG.debug(\"Skipped canceled re-encryption task for zone {}, last: {}\",\n+          task.zoneId, task.lastFile);\n+    }\n+\n+    boolean shouldRetry;\n+    do {\n+      dir.getFSNamesystem().writeLock();\n+      try {\n+        throttleTimerLocked.start();\n+        processTask(task);\n+        shouldRetry \u003d false;\n+      } catch (RetriableException | SafeModeException re) {\n+        // Keep retrying until succeed.\n+        LOG.info(\"Exception when processing re-encryption task for zone {}, \"\n+                + \"retrying...\", task.zoneId, re);\n+        shouldRetry \u003d true;\n+        Thread.sleep(faultRetryInterval);\n+      } catch (IOException ioe) {\n+        LOG.warn(\"Failure processing re-encryption task for zone {}\",\n+            task.zoneId, ioe);\n+        ++task.numFailures;\n+        task.processed \u003d true;\n+        shouldRetry \u003d false;\n+      } finally {\n+        dir.getFSNamesystem().writeUnlock(\"reencryptUpdater\");\n+        throttleTimerLocked.stop();\n+      }\n+      // logSync regardless, to prevent edit log buffer overflow triggering\n+      // logSync inside FSN writelock.\n+      dir.getEditLog().logSync();\n+    } while (shouldRetry);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void takeAndProcessTasks() throws Exception {\n    final Future\u003cReencryptionTask\u003e completed \u003d batchService.take();\n    throttle();\n    checkPauseForTesting();\n    ReencryptionTask task \u003d completed.get();\n    if (completed.isCancelled()) {\n      LOG.debug(\"Skipped canceled re-encryption task for zone {}, last: {}\",\n          task.zoneId, task.lastFile);\n    }\n\n    boolean shouldRetry;\n    do {\n      dir.getFSNamesystem().writeLock();\n      try {\n        throttleTimerLocked.start();\n        processTask(task);\n        shouldRetry \u003d false;\n      } catch (RetriableException | SafeModeException re) {\n        // Keep retrying until succeed.\n        LOG.info(\"Exception when processing re-encryption task for zone {}, \"\n                + \"retrying...\", task.zoneId, re);\n        shouldRetry \u003d true;\n        Thread.sleep(faultRetryInterval);\n      } catch (IOException ioe) {\n        LOG.warn(\"Failure processing re-encryption task for zone {}\",\n            task.zoneId, ioe);\n        ++task.numFailures;\n        task.processed \u003d true;\n        shouldRetry \u003d false;\n      } finally {\n        dir.getFSNamesystem().writeUnlock(\"reencryptUpdater\");\n        throttleTimerLocked.stop();\n      }\n      // logSync regardless, to prevent edit log buffer overflow triggering\n      // logSync inside FSN writelock.\n      dir.getEditLog().logSync();\n    } while (shouldRetry);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/ReencryptionUpdater.java"
    }
  }
}