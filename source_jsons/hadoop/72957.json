{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "KeyShell.java",
  "functionName": "init",
  "functionId": "init___args-String[]",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
  "functionStartLine": 81,
  "functionEndLine": 168,
  "numCommitsSeen": 21,
  "timeTaken": 3561,
  "changeHistory": [
    "813cee1a18b2df05dff90e4a2183546bc05cd712",
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
    "eebb39a56fe504672b79ea04c6040e360496b6d7",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
    "21c6f01831dd3a63c46c2cbb94289206a6239166",
    "c4a3a29541e1c385af20494984b072b6fd67f2e5",
    "9dff25e8904f66e71b3fabc4262fff533dbf2013",
    "43342670db29dbc757460c9dac18bab79ccb5310",
    "51b37969df205118c54414bf4b05065692a65ed6",
    "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337",
    "350ab4d2466117124c8563114cdb9eb83fa37a02",
    "e05ff82bd95dd802233e2424e8eafbd7ec6944c5"
  ],
  "changeHistoryShort": {
    "813cee1a18b2df05dff90e4a2183546bc05cd712": "Ybodychange",
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": "Ybodychange",
    "eebb39a56fe504672b79ea04c6040e360496b6d7": "Ymultichange(Ymodifierchange,Ybodychange)",
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": "Ybodychange",
    "21c6f01831dd3a63c46c2cbb94289206a6239166": "Ybodychange",
    "c4a3a29541e1c385af20494984b072b6fd67f2e5": "Ybodychange",
    "9dff25e8904f66e71b3fabc4262fff533dbf2013": "Ybodychange",
    "43342670db29dbc757460c9dac18bab79ccb5310": "Ybodychange",
    "51b37969df205118c54414bf4b05065692a65ed6": "Ybodychange",
    "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337": "Ybodychange",
    "350ab4d2466117124c8563114cdb9eb83fa37a02": "Ybodychange",
    "e05ff82bd95dd802233e2424e8eafbd7ec6944c5": "Yintroduced"
  },
  "changeHistoryDetails": {
    "813cee1a18b2df05dff90e4a2183546bc05cd712": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14420. Fix typo in KeyShell console. Contributed by Hu Xiaodong.\n",
      "commitDate": "10/04/19 11:18 AM",
      "commitName": "813cee1a18b2df05dff90e4a2183546bc05cd712",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/07/18 7:46 PM",
      "commitNameOld": "993ec026d10c7566fd358c022c061bca118c92f0",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 263.65,
      "commitsBetweenForRepo": 2101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,88 +1,88 @@\n   protected int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n         setSubCommand(new CreateCommand(keyName, options));\n         if (\"-help\".equals(keyName)) {\n           return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n         setSubCommand(new DeleteCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n           return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n         setSubCommand(new RollCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n           return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         setSubCommand(new ListCommand());\n       } else if (\"invalidateCache\".equals(args[i])) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n         setSubCommand(new InvalidateCacheCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n           return 1;\n         }\n       } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n       } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n           getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n               \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           return 1;\n         }\n         if (attributes.containsKey(attr)) {\n           getOut().println(\"\\nEach attribute must correspond to only one \" +\n-              \"value:\\natttribute \\\"\" + attr + \"\\\" was repeated\\n\");\n+              \"value:\\nattribute \\\"\" + attr + \"\\\" was repeated\\n\");\n           return 1;\n         }\n         attributes.put(attr, val);\n       } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"-metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n         interactive \u003d false;\n       } else if (args[i].equals(\"-strict\")) {\n         strict \u003d true;\n       } else if (\"-help\".equals(args[i])) {\n         return 1;\n       } else {\n         ToolRunner.printGenericCommandUsage(getErr());\n         return 1;\n       }\n     }\n \n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new CreateCommand(keyName, options));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new DeleteCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new RollCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        setSubCommand(new ListCommand());\n      } else if (\"invalidateCache\".equals(args[i])) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new InvalidateCacheCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n              \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          getOut().println(\"\\nEach attribute must correspond to only one \" +\n              \"value:\\nattribute \\\"\" + attr + \"\\\" was repeated\\n\");\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"-metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (\"-help\".equals(args[i])) {\n        return 1;\n      } else {\n        ToolRunner.printGenericCommandUsage(getErr());\n        return 1;\n      }\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11210. Enhance key rolling to guarantee new KeyVersion is returned from generateEncryptedKeys after a key is rolled.\n",
      "commitDate": "07/02/17 8:36 PM",
      "commitName": "2007e0cf2ad371e2dbf533c367f09c1f5acd1c0b",
      "commitAuthor": "Xiao Chen",
      "commitDateOld": "23/05/16 1:37 PM",
      "commitNameOld": "eebb39a56fe504672b79ea04c6040e360496b6d7",
      "commitAuthorOld": "Allen Wittenauer",
      "daysBetweenCommits": 260.33,
      "commitsBetweenForRepo": 1805,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,79 +1,88 @@\n   protected int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n         setSubCommand(new CreateCommand(keyName, options));\n         if (\"-help\".equals(keyName)) {\n           return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n         setSubCommand(new DeleteCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n           return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n         setSubCommand(new RollCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n           return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         setSubCommand(new ListCommand());\n+      } else if (\"invalidateCache\".equals(args[i])) {\n+        String keyName \u003d \"-help\";\n+        if (moreTokens) {\n+          keyName \u003d args[++i];\n+        }\n+        setSubCommand(new InvalidateCacheCommand(keyName));\n+        if (\"-help\".equals(keyName)) {\n+          return 1;\n+        }\n       } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n       } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n           getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n               \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           return 1;\n         }\n         if (attributes.containsKey(attr)) {\n           getOut().println(\"\\nEach attribute must correspond to only one \" +\n               \"value:\\natttribute \\\"\" + attr + \"\\\" was repeated\\n\");\n           return 1;\n         }\n         attributes.put(attr, val);\n       } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"-metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n         interactive \u003d false;\n       } else if (args[i].equals(\"-strict\")) {\n         strict \u003d true;\n       } else if (\"-help\".equals(args[i])) {\n         return 1;\n       } else {\n         ToolRunner.printGenericCommandUsage(getErr());\n         return 1;\n       }\n     }\n \n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new CreateCommand(keyName, options));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new DeleteCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new RollCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        setSubCommand(new ListCommand());\n      } else if (\"invalidateCache\".equals(args[i])) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new InvalidateCacheCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n              \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          getOut().println(\"\\nEach attribute must correspond to only one \" +\n              \"value:\\natttribute \\\"\" + attr + \"\\\" was repeated\\n\");\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"-metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (\"-help\".equals(args[i])) {\n        return 1;\n      } else {\n        ToolRunner.printGenericCommandUsage(getErr());\n        return 1;\n      }\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "eebb39a56fe504672b79ea04c6040e360496b6d7": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-13112. Change CredentialShell to use CommandShell base class (Matthew Paduano via aw)\n",
      "commitDate": "23/05/16 1:37 PM",
      "commitName": "eebb39a56fe504672b79ea04c6040e360496b6d7",
      "commitAuthor": "Allen Wittenauer",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13112. Change CredentialShell to use CommandShell base class (Matthew Paduano via aw)\n",
          "commitDate": "23/05/16 1:37 PM",
          "commitName": "eebb39a56fe504672b79ea04c6040e360496b6d7",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "17/05/16 5:44 PM",
          "commitNameOld": "7154ace71212e9fb9dd6209a92165fb075df7806",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 5.83,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,94 +1,79 @@\n-  private int init(String[] args) throws IOException {\n+  protected int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n-\n-        command \u003d new CreateCommand(keyName, options);\n+        setSubCommand(new CreateCommand(keyName, options));\n         if (\"-help\".equals(keyName)) {\n-          printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n-\n-        command \u003d new DeleteCommand(keyName);\n+        setSubCommand(new DeleteCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n-          printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n-\n-        command \u003d new RollCommand(keyName);\n+        setSubCommand(new RollCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n-          printKeyShellUsage();\n           return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n-        command \u003d new ListCommand();\n+        setSubCommand(new ListCommand());\n       } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n       } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n-          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n-                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n-          printKeyShellUsage();\n+          getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n+              \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           return 1;\n         }\n         if (attributes.containsKey(attr)) {\n-          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n-                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n-          printKeyShellUsage();\n+          getOut().println(\"\\nEach attribute must correspond to only one \" +\n+              \"value:\\natttribute \\\"\" + attr + \"\\\" was repeated\\n\");\n           return 1;\n         }\n         attributes.put(attr, val);\n       } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"-metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n         interactive \u003d false;\n       } else if (args[i].equals(\"-strict\")) {\n         strict \u003d true;\n       } else if (\"-help\".equals(args[i])) {\n-        printKeyShellUsage();\n         return 1;\n       } else {\n-        printKeyShellUsage();\n-        ToolRunner.printGenericCommandUsage(System.err);\n+        ToolRunner.printGenericCommandUsage(getErr());\n         return 1;\n       }\n     }\n \n-    if (command \u003d\u003d null) {\n-      printKeyShellUsage();\n-      return 1;\n-    }\n-\n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new CreateCommand(keyName, options));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new DeleteCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new RollCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        setSubCommand(new ListCommand());\n      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n              \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          getOut().println(\"\\nEach attribute must correspond to only one \" +\n              \"value:\\natttribute \\\"\" + attr + \"\\\" was repeated\\n\");\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"-metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (\"-help\".equals(args[i])) {\n        return 1;\n      } else {\n        ToolRunner.printGenericCommandUsage(getErr());\n        return 1;\n      }\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13112. Change CredentialShell to use CommandShell base class (Matthew Paduano via aw)\n",
          "commitDate": "23/05/16 1:37 PM",
          "commitName": "eebb39a56fe504672b79ea04c6040e360496b6d7",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "17/05/16 5:44 PM",
          "commitNameOld": "7154ace71212e9fb9dd6209a92165fb075df7806",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 5.83,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,94 +1,79 @@\n-  private int init(String[] args) throws IOException {\n+  protected int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n-\n-        command \u003d new CreateCommand(keyName, options);\n+        setSubCommand(new CreateCommand(keyName, options));\n         if (\"-help\".equals(keyName)) {\n-          printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n-\n-        command \u003d new DeleteCommand(keyName);\n+        setSubCommand(new DeleteCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n-          printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n-\n-        command \u003d new RollCommand(keyName);\n+        setSubCommand(new RollCommand(keyName));\n         if (\"-help\".equals(keyName)) {\n-          printKeyShellUsage();\n           return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n-        command \u003d new ListCommand();\n+        setSubCommand(new ListCommand());\n       } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n       } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n-          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n-                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n-          printKeyShellUsage();\n+          getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n+              \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           return 1;\n         }\n         if (attributes.containsKey(attr)) {\n-          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n-                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n-          printKeyShellUsage();\n+          getOut().println(\"\\nEach attribute must correspond to only one \" +\n+              \"value:\\natttribute \\\"\" + attr + \"\\\" was repeated\\n\");\n           return 1;\n         }\n         attributes.put(attr, val);\n       } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"-metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n         interactive \u003d false;\n       } else if (args[i].equals(\"-strict\")) {\n         strict \u003d true;\n       } else if (\"-help\".equals(args[i])) {\n-        printKeyShellUsage();\n         return 1;\n       } else {\n-        printKeyShellUsage();\n-        ToolRunner.printGenericCommandUsage(System.err);\n+        ToolRunner.printGenericCommandUsage(getErr());\n         return 1;\n       }\n     }\n \n-    if (command \u003d\u003d null) {\n-      printKeyShellUsage();\n-      return 1;\n-    }\n-\n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new CreateCommand(keyName, options));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new DeleteCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n        setSubCommand(new RollCommand(keyName));\n        if (\"-help\".equals(keyName)) {\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        setSubCommand(new ListCommand());\n      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          getOut().println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n              \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          getOut().println(\"\\nEach attribute must correspond to only one \" +\n              \"value:\\natttribute \\\"\" + attr + \"\\\" was repeated\\n\");\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"-metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (\"-help\".equals(args[i])) {\n        return 1;\n      } else {\n        ToolRunner.printGenericCommandUsage(getErr());\n        return 1;\n      }\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
          "extendedDetails": {}
        }
      ]
    },
    "acb509b2fa0bbe6e00f8a90aec37f63a09463afa": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12942. hadoop credential commands non-obviously use password of \"none\" (Mike Yoder via lmccay)",
      "commitDate": "11/05/16 11:30 AM",
      "commitName": "acb509b2fa0bbe6e00f8a90aec37f63a09463afa",
      "commitAuthor": "Larry McCay",
      "commitDateOld": "14/02/16 6:38 PM",
      "commitNameOld": "1c48e50ce71fd0e38740d69ce1e03119dca97a38",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 86.66,
      "commitsBetweenForRepo": 527,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,94 @@\n   private int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new CreateCommand(keyName, options);\n         if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new DeleteCommand(keyName);\n         if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new RollCommand(keyName);\n         if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command \u003d new ListCommand();\n       } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n       } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n           out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                   \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           printKeyShellUsage();\n           return 1;\n         }\n         if (attributes.containsKey(attr)) {\n           out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                   \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n           printKeyShellUsage();\n           return 1;\n         }\n         attributes.put(attr, val);\n       } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"-metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n         interactive \u003d false;\n+      } else if (args[i].equals(\"-strict\")) {\n+        strict \u003d true;\n       } else if (\"-help\".equals(args[i])) {\n         printKeyShellUsage();\n         return 1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return 1;\n       }\n     }\n \n     if (command \u003d\u003d null) {\n       printKeyShellUsage();\n       return 1;\n     }\n \n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new CreateCommand(keyName, options);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new DeleteCommand(keyName);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new RollCommand(keyName);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        command \u003d new ListCommand();\n      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          printKeyShellUsage();\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n          printKeyShellUsage();\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"-metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n        interactive \u003d false;\n      } else if (args[i].equals(\"-strict\")) {\n        strict \u003d true;\n      } else if (\"-help\".equals(args[i])) {\n        printKeyShellUsage();\n        return 1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n\n    if (command \u003d\u003d null) {\n      printKeyShellUsage();\n      return 1;\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "21c6f01831dd3a63c46c2cbb94289206a6239166": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-11455. KMS and Credential CLI should request confirmation for deletion by default. (Charles Lamb via yliu)\n",
      "commitDate": "04/01/15 2:55 PM",
      "commitName": "21c6f01831dd3a63c46c2cbb94289206a6239166",
      "commitAuthor": "yliu",
      "commitDateOld": "25/11/14 4:13 PM",
      "commitNameOld": "fae266bbf19e44a2595fa62366d9b65e7c996df8",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 39.95,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,92 @@\n   private int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new CreateCommand(keyName, options);\n         if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new DeleteCommand(keyName);\n         if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new RollCommand(keyName);\n         if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command \u003d new ListCommand();\n       } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n       } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n           out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                   \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           printKeyShellUsage();\n           return 1;\n         }\n         if (attributes.containsKey(attr)) {\n           out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                   \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n           printKeyShellUsage();\n           return 1;\n         }\n         attributes.put(attr, val);\n       } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"-metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n-      } else if (\"-i\".equals(args[i]) || (\"-interactive\".equals(args[i]))) {\n-        interactive \u003d true;\n+      } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n+        interactive \u003d false;\n       } else if (\"-help\".equals(args[i])) {\n         printKeyShellUsage();\n         return 1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return 1;\n       }\n     }\n \n     if (command \u003d\u003d null) {\n       printKeyShellUsage();\n       return 1;\n     }\n \n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new CreateCommand(keyName, options);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new DeleteCommand(keyName);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new RollCommand(keyName);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        command \u003d new ListCommand();\n      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          printKeyShellUsage();\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n          printKeyShellUsage();\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"-metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-f\".equals(args[i]) || (\"-force\".equals(args[i]))) {\n        interactive \u003d false;\n      } else if (\"-help\".equals(args[i])) {\n        printKeyShellUsage();\n        return 1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n\n    if (command \u003d\u003d null) {\n      printKeyShellUsage();\n      return 1;\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "c4a3a29541e1c385af20494984b072b6fd67f2e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10793. KeyShell args should use single-dash style. (wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1615180 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/08/14 10:45 AM",
      "commitName": "c4a3a29541e1c385af20494984b072b6fd67f2e5",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "16/07/14 5:49 PM",
      "commitNameOld": "9dff25e8904f66e71b3fabc4262fff533dbf2013",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 15.71,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,92 @@\n   private int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n-        String keyName \u003d \"--help\";\n+        String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new CreateCommand(keyName, options);\n-        if (\"--help\".equals(keyName)) {\n+        if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n-        String keyName \u003d \"--help\";\n+        String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new DeleteCommand(keyName);\n-        if (\"--help\".equals(keyName)) {\n+        if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n-        String keyName \u003d \"--help\";\n+        String keyName \u003d \"-help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new RollCommand(keyName);\n-        if (\"--help\".equals(keyName)) {\n+        if (\"-help\".equals(keyName)) {\n           printKeyShellUsage();\n           return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command \u003d new ListCommand();\n-      } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n+      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n-      } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n+      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n-      } else if (\"--description\".equals(args[i]) \u0026\u0026 moreTokens) {\n+      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n-      } else if (\"--attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n+      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n           out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                   \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           printKeyShellUsage();\n           return 1;\n         }\n         if (attributes.containsKey(attr)) {\n           out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                   \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n           printKeyShellUsage();\n           return 1;\n         }\n         attributes.put(attr, val);\n-      } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n+      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n-      } else if (\"--metadata\".equals(args[i])) {\n+      } else if (\"-metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n-      } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n+      } else if (\"-i\".equals(args[i]) || (\"-interactive\".equals(args[i]))) {\n         interactive \u003d true;\n-      } else if (\"--help\".equals(args[i])) {\n+      } else if (\"-help\".equals(args[i])) {\n         printKeyShellUsage();\n         return 1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return 1;\n       }\n     }\n \n     if (command \u003d\u003d null) {\n       printKeyShellUsage();\n       return 1;\n     }\n \n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new CreateCommand(keyName, options);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new DeleteCommand(keyName);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"-help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new RollCommand(keyName);\n        if (\"-help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        command \u003d new ListCommand();\n      } else if (\"-size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"-cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"-description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"-attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          printKeyShellUsage();\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n          printKeyShellUsage();\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"-provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"-metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-i\".equals(args[i]) || (\"-interactive\".equals(args[i]))) {\n        interactive \u003d true;\n      } else if (\"-help\".equals(args[i])) {\n        printKeyShellUsage();\n        return 1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n\n    if (command \u003d\u003d null) {\n      printKeyShellUsage();\n      return 1;\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "9dff25e8904f66e71b3fabc4262fff533dbf2013": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10816. KeyShell returns -1 on error to the shell, should be 1. (Mike Yoder via wang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611229 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/14 5:49 PM",
      "commitName": "9dff25e8904f66e71b3fabc4262fff533dbf2013",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "11/07/14 5:24 PM",
      "commitNameOld": "43342670db29dbc757460c9dac18bab79ccb5310",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 5.02,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,92 +1,92 @@\n   private int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n     final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n-          return -1;\n+          return 1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n-          return -1;\n+          return 1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n-          return -1;\n+          return 1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command \u003d new ListCommand();\n       } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"--description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n       } else if (\"--attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n         final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n         final String attr \u003d attrval[0].trim();\n         final String val \u003d attrval[1].trim();\n         if (attr.isEmpty() || val.isEmpty()) {\n           out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                   \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n           printKeyShellUsage();\n-          return -1;\n+          return 1;\n         }\n         if (attributes.containsKey(attr)) {\n           out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                   \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n           printKeyShellUsage();\n-          return -1;\n+          return 1;\n         }\n         attributes.put(attr, val);\n       } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"--metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n         interactive \u003d true;\n       } else if (\"--help\".equals(args[i])) {\n         printKeyShellUsage();\n-        return -1;\n+        return 1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n-        return -1;\n+        return 1;\n       }\n     }\n \n     if (command \u003d\u003d null) {\n       printKeyShellUsage();\n-      return -1;\n+      return 1;\n     }\n \n     if (!attributes.isEmpty()) {\n       options.setAttributes(attributes);\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new CreateCommand(keyName, options);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new DeleteCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new RollCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return 1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        command \u003d new ListCommand();\n      } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"--description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"--attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          printKeyShellUsage();\n          return 1;\n        }\n        if (attributes.containsKey(attr)) {\n          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n          printKeyShellUsage();\n          return 1;\n        }\n        attributes.put(attr, val);\n      } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"--metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n        interactive \u003d true;\n      } else if (\"--help\".equals(args[i])) {\n        printKeyShellUsage();\n        return 1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return 1;\n      }\n    }\n\n    if (command \u003d\u003d null) {\n      printKeyShellUsage();\n      return 1;\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "43342670db29dbc757460c9dac18bab79ccb5310": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10736. Add key attributes to the key shell. Contributed by Mike Yoder.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609869 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/14 5:24 PM",
      "commitName": "43342670db29dbc757460c9dac18bab79ccb5310",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "15/05/14 10:06 PM",
      "commitNameOld": "51b37969df205118c54414bf4b05065692a65ed6",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 56.8,
      "commitsBetweenForRepo": 346,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,92 @@\n   private int init(String[] args) throws IOException {\n     final Options options \u003d KeyProvider.options(getConf());\n+    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n \n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command \u003d new ListCommand();\n       } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setCipher(args[++i]);\n       } else if (\"--description\".equals(args[i]) \u0026\u0026 moreTokens) {\n         options.setDescription(args[++i]);\n+      } else if (\"--attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n+        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n+        final String attr \u003d attrval[0].trim();\n+        final String val \u003d attrval[1].trim();\n+        if (attr.isEmpty() || val.isEmpty()) {\n+          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n+                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n+          printKeyShellUsage();\n+          return -1;\n+        }\n+        if (attributes.containsKey(attr)) {\n+          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n+                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n+          printKeyShellUsage();\n+          return -1;\n+        }\n+        attributes.put(attr, val);\n       } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"--metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n         interactive \u003d true;\n       } else if (\"--help\".equals(args[i])) {\n         printKeyShellUsage();\n         return -1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return -1;\n       }\n     }\n \n     if (command \u003d\u003d null) {\n       printKeyShellUsage();\n       return -1;\n     }\n \n+    if (!attributes.isEmpty()) {\n+      options.setAttributes(attributes);\n+    }\n+\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n    final Map\u003cString, String\u003e attributes \u003d new HashMap\u003cString, String\u003e();\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new CreateCommand(keyName, options);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new DeleteCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new RollCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        command \u003d new ListCommand();\n      } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"--description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"--attr\".equals(args[i]) \u0026\u0026 moreTokens) {\n        final String attrval[] \u003d args[++i].split(\"\u003d\", 2);\n        final String attr \u003d attrval[0].trim();\n        final String val \u003d attrval[1].trim();\n        if (attr.isEmpty() || val.isEmpty()) {\n          out.println(\"\\nAttributes must be in attribute\u003dvalue form, \" +\n                  \"or quoted\\nlike \\\"attribute \u003d value\\\"\\n\");\n          printKeyShellUsage();\n          return -1;\n        }\n        if (attributes.containsKey(attr)) {\n          out.println(\"\\nEach attribute must correspond to only one value:\\n\" +\n                  \"atttribute \\\"\" + attr + \"\\\" was repeated\\n\" );\n          printKeyShellUsage();\n          return -1;\n        }\n        attributes.put(attr, val);\n      } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"--metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n        interactive \u003d true;\n      } else if (\"--help\".equals(args[i])) {\n        printKeyShellUsage();\n        return -1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return -1;\n      }\n    }\n\n    if (command \u003d\u003d null) {\n      printKeyShellUsage();\n      return -1;\n    }\n\n    if (!attributes.isEmpty()) {\n      options.setAttributes(attributes);\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "51b37969df205118c54414bf4b05065692a65ed6": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10586. KeyShell doesn\u0027t allow setting Options via CLI. (clamb via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1595105 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/05/14 10:06 PM",
      "commitName": "51b37969df205118c54414bf4b05065692a65ed6",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "13/05/14 11:29 AM",
      "commitNameOld": "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 2.44,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,70 @@\n   private int init(String[] args) throws IOException {\n+    final Options options \u003d KeyProvider.options(getConf());\n+\n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n-        command \u003d new CreateCommand(keyName);\n+        command \u003d new CreateCommand(keyName, options);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new DeleteCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d \"--help\";\n         if (moreTokens) {\n           keyName \u003d args[++i];\n         }\n \n         command \u003d new RollCommand(keyName);\n         if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (\"list\".equals(args[i])) {\n         command \u003d new ListCommand();\n       } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n-        getConf().set(KeyProvider.DEFAULT_BITLENGTH_NAME, args[++i]);\n+        options.setBitLength(Integer.parseInt(args[++i]));\n       } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n-        getConf().set(KeyProvider.DEFAULT_CIPHER_NAME, args[++i]);\n+        options.setCipher(args[++i]);\n+      } else if (\"--description\".equals(args[i]) \u0026\u0026 moreTokens) {\n+        options.setDescription(args[++i]);\n       } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n       } else if (\"--metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n       } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n         interactive \u003d true;\n       } else if (\"--help\".equals(args[i])) {\n         printKeyShellUsage();\n         return -1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return -1;\n       }\n     }\n \n     if (command \u003d\u003d null) {\n       printKeyShellUsage();\n       return -1;\n     }\n \n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    final Options options \u003d KeyProvider.options(getConf());\n\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new CreateCommand(keyName, options);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new DeleteCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new RollCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        command \u003d new ListCommand();\n      } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setBitLength(Integer.parseInt(args[++i]));\n      } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setCipher(args[++i]);\n      } else if (\"--description\".equals(args[i]) \u0026\u0026 moreTokens) {\n        options.setDescription(args[++i]);\n      } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"--metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n        interactive \u003d true;\n      } else if (\"--help\".equals(args[i])) {\n        printKeyShellUsage();\n        return -1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return -1;\n      }\n    }\n\n    if (command \u003d\u003d null) {\n      printKeyShellUsage();\n      return -1;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10583. bin/hadoop key throws NPE with no args and assorted other fixups. (clamb via tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594320 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 11:29 AM",
      "commitName": "c54a4bb666cdeef41a71ed8eeb5ddbe7c5ccc337",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "24/04/14 8:49 AM",
      "commitNameOld": "f9a9c1ee633fd50ba478b87e1c9d84dce089a345",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 19.11,
      "commitsBetweenForRepo": 96,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,66 @@\n   private int init(String[] args) throws IOException {\n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n+      boolean moreTokens \u003d (i \u003c args.length - 1);\n       if (args[i].equals(\"create\")) {\n-        String keyName \u003d args[++i];\n+        String keyName \u003d \"--help\";\n+        if (moreTokens) {\n+          keyName \u003d args[++i];\n+        }\n+\n         command \u003d new CreateCommand(keyName);\n-        if (keyName.equals(\"--help\")) {\n+        if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n-        String keyName \u003d args[++i];\n+        String keyName \u003d \"--help\";\n+        if (moreTokens) {\n+          keyName \u003d args[++i];\n+        }\n+\n         command \u003d new DeleteCommand(keyName);\n-        if (keyName.equals(\"--help\")) {\n+        if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n-        String keyName \u003d args[++i];\n+        String keyName \u003d \"--help\";\n+        if (moreTokens) {\n+          keyName \u003d args[++i];\n+        }\n+\n         command \u003d new RollCommand(keyName);\n-        if (keyName.equals(\"--help\")) {\n+        if (\"--help\".equals(keyName)) {\n           printKeyShellUsage();\n           return -1;\n         }\n-      } else if (args[i].equals(\"list\")) {\n+      } else if (\"list\".equals(args[i])) {\n         command \u003d new ListCommand();\n-      } else if (args[i].equals(\"--size\")) {\n+      } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n         getConf().set(KeyProvider.DEFAULT_BITLENGTH_NAME, args[++i]);\n-      } else if (args[i].equals(\"--cipher\")) {\n+      } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n         getConf().set(KeyProvider.DEFAULT_CIPHER_NAME, args[++i]);\n-      } else if (args[i].equals(\"--provider\")) {\n+      } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n-      } else if (args[i].equals(\"--metadata\")) {\n+      } else if (\"--metadata\".equals(args[i])) {\n         getConf().setBoolean(LIST_METADATA, true);\n-      } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n+      } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n         interactive \u003d true;\n-      } else if (args[i].equals(\"--help\")) {\n+      } else if (\"--help\".equals(args[i])) {\n         printKeyShellUsage();\n         return -1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return -1;\n       }\n     }\n+\n+    if (command \u003d\u003d null) {\n+      printKeyShellUsage();\n+      return -1;\n+    }\n+\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      boolean moreTokens \u003d (i \u003c args.length - 1);\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new CreateCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new DeleteCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d \"--help\";\n        if (moreTokens) {\n          keyName \u003d args[++i];\n        }\n\n        command \u003d new RollCommand(keyName);\n        if (\"--help\".equals(keyName)) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (\"list\".equals(args[i])) {\n        command \u003d new ListCommand();\n      } else if (\"--size\".equals(args[i]) \u0026\u0026 moreTokens) {\n        getConf().set(KeyProvider.DEFAULT_BITLENGTH_NAME, args[++i]);\n      } else if (\"--cipher\".equals(args[i]) \u0026\u0026 moreTokens) {\n        getConf().set(KeyProvider.DEFAULT_CIPHER_NAME, args[++i]);\n      } else if (\"--provider\".equals(args[i]) \u0026\u0026 moreTokens) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (\"--metadata\".equals(args[i])) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (\"-i\".equals(args[i]) || (\"--interactive\".equals(args[i]))) {\n        interactive \u003d true;\n      } else if (\"--help\".equals(args[i])) {\n        printKeyShellUsage();\n        return -1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return -1;\n      }\n    }\n\n    if (command \u003d\u003d null) {\n      printKeyShellUsage();\n      return -1;\n    }\n\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "350ab4d2466117124c8563114cdb9eb83fa37a02": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10430. KeyProvider Metadata should have an optional description, there should be a method to retrieve the metadata from all keys. (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1586730 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/04/14 11:02 AM",
      "commitName": "350ab4d2466117124c8563114cdb9eb83fa37a02",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "09/04/14 12:46 PM",
      "commitNameOld": "9a1f15532fd26f66a2d1a482e82bb5d7fbab4946",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 1.93,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,47 @@\n   private int init(String[] args) throws IOException {\n     for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n       if (args[i].equals(\"create\")) {\n         String keyName \u003d args[++i];\n         command \u003d new CreateCommand(keyName);\n         if (keyName.equals(\"--help\")) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"delete\")) {\n         String keyName \u003d args[++i];\n         command \u003d new DeleteCommand(keyName);\n         if (keyName.equals(\"--help\")) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"roll\")) {\n         String keyName \u003d args[++i];\n         command \u003d new RollCommand(keyName);\n         if (keyName.equals(\"--help\")) {\n           printKeyShellUsage();\n           return -1;\n         }\n       } else if (args[i].equals(\"list\")) {\n         command \u003d new ListCommand();\n       } else if (args[i].equals(\"--size\")) {\n         getConf().set(KeyProvider.DEFAULT_BITLENGTH_NAME, args[++i]);\n       } else if (args[i].equals(\"--cipher\")) {\n         getConf().set(KeyProvider.DEFAULT_CIPHER_NAME, args[++i]);\n       } else if (args[i].equals(\"--provider\")) {\n         userSuppliedProvider \u003d true;\n         getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n+      } else if (args[i].equals(\"--metadata\")) {\n+        getConf().setBoolean(LIST_METADATA, true);\n       } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n         interactive \u003d true;\n       } else if (args[i].equals(\"--help\")) {\n         printKeyShellUsage();\n         return -1;\n       } else {\n         printKeyShellUsage();\n         ToolRunner.printGenericCommandUsage(System.err);\n         return -1;\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d args[++i];\n        command \u003d new CreateCommand(keyName);\n        if (keyName.equals(\"--help\")) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d args[++i];\n        command \u003d new DeleteCommand(keyName);\n        if (keyName.equals(\"--help\")) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d args[++i];\n        command \u003d new RollCommand(keyName);\n        if (keyName.equals(\"--help\")) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"--size\")) {\n        getConf().set(KeyProvider.DEFAULT_BITLENGTH_NAME, args[++i]);\n      } else if (args[i].equals(\"--cipher\")) {\n        getConf().set(KeyProvider.DEFAULT_CIPHER_NAME, args[++i]);\n      } else if (args[i].equals(\"--provider\")) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (args[i].equals(\"--metadata\")) {\n        getConf().setBoolean(LIST_METADATA, true);\n      } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n        interactive \u003d true;\n      } else if (args[i].equals(\"--help\")) {\n        printKeyShellUsage();\n        return -1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return -1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java",
      "extendedDetails": {}
    },
    "e05ff82bd95dd802233e2424e8eafbd7ec6944c5": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10177. Create CLI tools for managing keys. (Larry McCay via omalley)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1558867 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/01/14 9:48 AM",
      "commitName": "e05ff82bd95dd802233e2424e8eafbd7ec6944c5",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,45 @@\n+  private int init(String[] args) throws IOException {\n+    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n+      if (args[i].equals(\"create\")) {\n+        String keyName \u003d args[++i];\n+        command \u003d new CreateCommand(keyName);\n+        if (keyName.equals(\"--help\")) {\n+          printKeyShellUsage();\n+          return -1;\n+        }\n+      } else if (args[i].equals(\"delete\")) {\n+        String keyName \u003d args[++i];\n+        command \u003d new DeleteCommand(keyName);\n+        if (keyName.equals(\"--help\")) {\n+          printKeyShellUsage();\n+          return -1;\n+        }\n+      } else if (args[i].equals(\"roll\")) {\n+        String keyName \u003d args[++i];\n+        command \u003d new RollCommand(keyName);\n+        if (keyName.equals(\"--help\")) {\n+          printKeyShellUsage();\n+          return -1;\n+        }\n+      } else if (args[i].equals(\"list\")) {\n+        command \u003d new ListCommand();\n+      } else if (args[i].equals(\"--size\")) {\n+        getConf().set(KeyProvider.DEFAULT_BITLENGTH_NAME, args[++i]);\n+      } else if (args[i].equals(\"--cipher\")) {\n+        getConf().set(KeyProvider.DEFAULT_CIPHER_NAME, args[++i]);\n+      } else if (args[i].equals(\"--provider\")) {\n+        userSuppliedProvider \u003d true;\n+        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n+      } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n+        interactive \u003d true;\n+      } else if (args[i].equals(\"--help\")) {\n+        printKeyShellUsage();\n+        return -1;\n+      } else {\n+        printKeyShellUsage();\n+        ToolRunner.printGenericCommandUsage(System.err);\n+        return -1;\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private int init(String[] args) throws IOException {\n    for (int i \u003d 0; i \u003c args.length; i++) { // parse command line\n      if (args[i].equals(\"create\")) {\n        String keyName \u003d args[++i];\n        command \u003d new CreateCommand(keyName);\n        if (keyName.equals(\"--help\")) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"delete\")) {\n        String keyName \u003d args[++i];\n        command \u003d new DeleteCommand(keyName);\n        if (keyName.equals(\"--help\")) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"roll\")) {\n        String keyName \u003d args[++i];\n        command \u003d new RollCommand(keyName);\n        if (keyName.equals(\"--help\")) {\n          printKeyShellUsage();\n          return -1;\n        }\n      } else if (args[i].equals(\"list\")) {\n        command \u003d new ListCommand();\n      } else if (args[i].equals(\"--size\")) {\n        getConf().set(KeyProvider.DEFAULT_BITLENGTH_NAME, args[++i]);\n      } else if (args[i].equals(\"--cipher\")) {\n        getConf().set(KeyProvider.DEFAULT_CIPHER_NAME, args[++i]);\n      } else if (args[i].equals(\"--provider\")) {\n        userSuppliedProvider \u003d true;\n        getConf().set(KeyProviderFactory.KEY_PROVIDER_PATH, args[++i]);\n      } else if (args[i].equals(\"-i\") || (args[i].equals(\"--interactive\"))) {\n        interactive \u003d true;\n      } else if (args[i].equals(\"--help\")) {\n        printKeyShellUsage();\n        return -1;\n      } else {\n        printKeyShellUsage();\n        ToolRunner.printGenericCommandUsage(System.err);\n        return -1;\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/crypto/key/KeyShell.java"
    }
  }
}