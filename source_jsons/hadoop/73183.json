{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HttpServer2.java",
  "functionName": "createHttpChannelConnector",
  "functionId": "createHttpChannelConnector___server-Server__httpConfig-HttpConfiguration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
  "functionStartLine": 521,
  "functionEndLine": 536,
  "numCommitsSeen": 107,
  "timeTaken": 4541,
  "changeHistory": [
    "e780556ae9229fe7a90817eb4e5449d7eed35dd8",
    "9d6994da1964c1125a33b3a65e7a7747e2d0bc59",
    "5d182949badb2eb80393de7ba3838102d006488b",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17",
    "03a9343d5798384b66fbd21e1e028acaf55b00e9"
  ],
  "changeHistoryShort": {
    "e780556ae9229fe7a90817eb4e5449d7eed35dd8": "Ybodychange",
    "9d6994da1964c1125a33b3a65e7a7747e2d0bc59": "Ybodychange",
    "5d182949badb2eb80393de7ba3838102d006488b": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
    "03a9343d5798384b66fbd21e1e028acaf55b00e9": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e780556ae9229fe7a90817eb4e5449d7eed35dd8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15696. KMS performance regression due to too many open file descriptors after Jetty migration. Contributed by Wei-Chiu Chuang.\n",
      "commitDate": "05/09/18 9:52 AM",
      "commitName": "e780556ae9229fe7a90817eb4e5449d7eed35dd8",
      "commitAuthor": "Wei-Chiu Chuang",
      "commitDateOld": "01/06/18 2:42 PM",
      "commitNameOld": "cba319499822a2475c60c43ea71f8e78237e139f",
      "commitAuthorOld": "Daniel Templeton",
      "daysBetweenCommits": 95.8,
      "commitsBetweenForRepo": 673,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,10 +1,16 @@\n     private ServerConnector createHttpChannelConnector(\n         Server server, HttpConfiguration httpConfig) {\n       ServerConnector conn \u003d new ServerConnector(server,\n           conf.getInt(HTTP_ACCEPTOR_COUNT_KEY, HTTP_ACCEPTOR_COUNT_DEFAULT),\n           conf.getInt(HTTP_SELECTOR_COUNT_KEY, HTTP_SELECTOR_COUNT_DEFAULT));\n       ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n       conn.addConnectionFactory(connFactory);\n-      configureChannelConnector(conn);\n+      if(Shell.WINDOWS) {\n+        // result of setting the SO_REUSEADDR flag is different on Windows\n+        // http://msdn.microsoft.com/en-us/library/ms740621(v\u003dvs.85).aspx\n+        // without this 2 NN\u0027s can start on the same machine and listen on\n+        // the same port with indeterminate routing of incoming requests to them\n+        conn.setReuseAddress(false);\n+      }\n       return conn;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ServerConnector createHttpChannelConnector(\n        Server server, HttpConfiguration httpConfig) {\n      ServerConnector conn \u003d new ServerConnector(server,\n          conf.getInt(HTTP_ACCEPTOR_COUNT_KEY, HTTP_ACCEPTOR_COUNT_DEFAULT),\n          conf.getInt(HTTP_SELECTOR_COUNT_KEY, HTTP_SELECTOR_COUNT_DEFAULT));\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      if(Shell.WINDOWS) {\n        // result of setting the SO_REUSEADDR flag is different on Windows\n        // http://msdn.microsoft.com/en-us/library/ms740621(v\u003dvs.85).aspx\n        // without this 2 NN\u0027s can start on the same machine and listen on\n        // the same port with indeterminate routing of incoming requests to them\n        conn.setReuseAddress(false);\n      }\n      return conn;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "9d6994da1964c1125a33b3a65e7a7747e2d0bc59": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15311. HttpServer2 needs a way to configure the acceptor/selector count. Contributed by Erik Krogen\n",
      "commitDate": "13/03/18 1:55 PM",
      "commitName": "9d6994da1964c1125a33b3a65e7a7747e2d0bc59",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "31/01/18 5:51 PM",
      "commitNameOld": "0bee3849e323bf71925024992f9e655aee2d75f9",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 40.79,
      "commitsBetweenForRepo": 258,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,8 +1,10 @@\n     private ServerConnector createHttpChannelConnector(\n         Server server, HttpConfiguration httpConfig) {\n-      ServerConnector conn \u003d new ServerConnector(server);\n+      ServerConnector conn \u003d new ServerConnector(server,\n+          conf.getInt(HTTP_ACCEPTOR_COUNT_KEY, HTTP_ACCEPTOR_COUNT_DEFAULT),\n+          conf.getInt(HTTP_SELECTOR_COUNT_KEY, HTTP_SELECTOR_COUNT_DEFAULT));\n       ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n       conn.addConnectionFactory(connFactory);\n       configureChannelConnector(conn);\n       return conn;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private ServerConnector createHttpChannelConnector(\n        Server server, HttpConfiguration httpConfig) {\n      ServerConnector conn \u003d new ServerConnector(server,\n          conf.getInt(HTTP_ACCEPTOR_COUNT_KEY, HTTP_ACCEPTOR_COUNT_DEFAULT),\n          conf.getInt(HTTP_SELECTOR_COUNT_KEY, HTTP_SELECTOR_COUNT_DEFAULT));\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      configureChannelConnector(conn);\n      return conn;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
      "extendedDetails": {}
    },
    "5d182949badb2eb80393de7ba3838102d006488b": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-13597. Switch KMS from Tomcat to Jetty. Contributed by John Zhuge.\n",
      "commitDate": "05/01/17 5:21 PM",
      "commitName": "5d182949badb2eb80393de7ba3838102d006488b",
      "commitAuthor": "Xiao Chen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "HADOOP-13597. Switch KMS from Tomcat to Jetty. Contributed by John Zhuge.\n",
          "commitDate": "05/01/17 5:21 PM",
          "commitName": "5d182949badb2eb80393de7ba3838102d006488b",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/11/16 7:25 AM",
          "commitNameOld": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 58.41,
          "commitsBetweenForRepo": 318,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,8 @@\n-    private ServerConnector createHttpsChannelConnector(Server server) {\n+    private ServerConnector createHttpChannelConnector(\n+        Server server, HttpConfiguration httpConfig) {\n       ServerConnector conn \u003d new ServerConnector(server);\n-      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n-      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n-      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n-      httpConfig.setSecureScheme(\"https\");\n-      httpConfig.addCustomizer(new SecureRequestCustomizer());\n       ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n       conn.addConnectionFactory(connFactory);\n       configureChannelConnector(conn);\n-\n-      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n-      sslContextFactory.setNeedClientAuth(needsClientAuth);\n-      sslContextFactory.setKeyManagerPassword(keyPassword);\n-      if (keyStore !\u003d null) {\n-        sslContextFactory.setKeyStorePath(keyStore);\n-        sslContextFactory.setKeyStoreType(keyStoreType);\n-        sslContextFactory.setKeyStorePassword(keyStorePassword);\n-      }\n-      if (trustStore !\u003d null) {\n-        sslContextFactory.setTrustStorePath(trustStore);\n-        sslContextFactory.setTrustStoreType(trustStoreType);\n-        sslContextFactory.setTrustStorePassword(trustStorePassword);\n-      }\n-      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n-        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n-        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n-      }\n-\n-      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n-          HttpVersion.HTTP_1_1.asString()));\n-\n       return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ServerConnector createHttpChannelConnector(\n        Server server, HttpConfiguration httpConfig) {\n      ServerConnector conn \u003d new ServerConnector(server);\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      configureChannelConnector(conn);\n      return conn;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {
            "oldValue": "createHttpsChannelConnector",
            "newValue": "createHttpChannelConnector"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13597. Switch KMS from Tomcat to Jetty. Contributed by John Zhuge.\n",
          "commitDate": "05/01/17 5:21 PM",
          "commitName": "5d182949badb2eb80393de7ba3838102d006488b",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/11/16 7:25 AM",
          "commitNameOld": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 58.41,
          "commitsBetweenForRepo": 318,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,8 @@\n-    private ServerConnector createHttpsChannelConnector(Server server) {\n+    private ServerConnector createHttpChannelConnector(\n+        Server server, HttpConfiguration httpConfig) {\n       ServerConnector conn \u003d new ServerConnector(server);\n-      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n-      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n-      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n-      httpConfig.setSecureScheme(\"https\");\n-      httpConfig.addCustomizer(new SecureRequestCustomizer());\n       ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n       conn.addConnectionFactory(connFactory);\n       configureChannelConnector(conn);\n-\n-      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n-      sslContextFactory.setNeedClientAuth(needsClientAuth);\n-      sslContextFactory.setKeyManagerPassword(keyPassword);\n-      if (keyStore !\u003d null) {\n-        sslContextFactory.setKeyStorePath(keyStore);\n-        sslContextFactory.setKeyStoreType(keyStoreType);\n-        sslContextFactory.setKeyStorePassword(keyStorePassword);\n-      }\n-      if (trustStore !\u003d null) {\n-        sslContextFactory.setTrustStorePath(trustStore);\n-        sslContextFactory.setTrustStoreType(trustStoreType);\n-        sslContextFactory.setTrustStorePassword(trustStorePassword);\n-      }\n-      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n-        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n-        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n-      }\n-\n-      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n-          HttpVersion.HTTP_1_1.asString()));\n-\n       return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ServerConnector createHttpChannelConnector(\n        Server server, HttpConfiguration httpConfig) {\n      ServerConnector conn \u003d new ServerConnector(server);\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      configureChannelConnector(conn);\n      return conn;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {
            "oldValue": "[server-Server]",
            "newValue": "[server-Server, httpConfig-HttpConfiguration]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13597. Switch KMS from Tomcat to Jetty. Contributed by John Zhuge.\n",
          "commitDate": "05/01/17 5:21 PM",
          "commitName": "5d182949badb2eb80393de7ba3838102d006488b",
          "commitAuthor": "Xiao Chen",
          "commitDateOld": "08/11/16 7:25 AM",
          "commitNameOld": "dbb133ccfc00e20622a5dbf7a6e1126fb63d7487",
          "commitAuthorOld": "Brahma Reddy Battula",
          "daysBetweenCommits": 58.41,
          "commitsBetweenForRepo": 318,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,34 +1,8 @@\n-    private ServerConnector createHttpsChannelConnector(Server server) {\n+    private ServerConnector createHttpChannelConnector(\n+        Server server, HttpConfiguration httpConfig) {\n       ServerConnector conn \u003d new ServerConnector(server);\n-      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n-      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n-      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n-      httpConfig.setSecureScheme(\"https\");\n-      httpConfig.addCustomizer(new SecureRequestCustomizer());\n       ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n       conn.addConnectionFactory(connFactory);\n       configureChannelConnector(conn);\n-\n-      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n-      sslContextFactory.setNeedClientAuth(needsClientAuth);\n-      sslContextFactory.setKeyManagerPassword(keyPassword);\n-      if (keyStore !\u003d null) {\n-        sslContextFactory.setKeyStorePath(keyStore);\n-        sslContextFactory.setKeyStoreType(keyStoreType);\n-        sslContextFactory.setKeyStorePassword(keyStorePassword);\n-      }\n-      if (trustStore !\u003d null) {\n-        sslContextFactory.setTrustStorePath(trustStore);\n-        sslContextFactory.setTrustStoreType(trustStoreType);\n-        sslContextFactory.setTrustStorePassword(trustStorePassword);\n-      }\n-      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n-        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n-        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n-      }\n-\n-      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n-          HttpVersion.HTTP_1_1.asString()));\n-\n       return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ServerConnector createHttpChannelConnector(\n        Server server, HttpConfiguration httpConfig) {\n      ServerConnector conn \u003d new ServerConnector(server);\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      configureChannelConnector(conn);\n      return conn;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {}
        }
      ]
    },
    "5877f20f9c3f6f0afa505715e9a2ee312475af17": {
      "type": "Ymultichange(Yparameterchange,Yreturntypechange,Ybodychange)",
      "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
      "commitDate": "27/10/16 4:09 PM",
      "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
      "commitAuthor": "Robert Kanter",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
          "commitDate": "27/10/16 4:09 PM",
          "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "19/08/16 9:22 AM",
          "commitNameOld": "03a9343d5798384b66fbd21e1e028acaf55b00e9",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 69.28,
          "commitsBetweenForRepo": 490,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,34 @@\n-    private Connector createHttpsChannelConnector() {\n-      SslSelectChannelConnector c \u003d new SslSelectChannelConnectorSecure();\n-      configureChannelConnector(c);\n+    private ServerConnector createHttpsChannelConnector(Server server) {\n+      ServerConnector conn \u003d new ServerConnector(server);\n+      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n+      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n+      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n+      httpConfig.setSecureScheme(\"https\");\n+      httpConfig.addCustomizer(new SecureRequestCustomizer());\n+      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n+      conn.addConnectionFactory(connFactory);\n+      configureChannelConnector(conn);\n \n-      c.setNeedClientAuth(needsClientAuth);\n-      c.setKeyPassword(keyPassword);\n-\n+      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n+      sslContextFactory.setNeedClientAuth(needsClientAuth);\n+      sslContextFactory.setKeyManagerPassword(keyPassword);\n       if (keyStore !\u003d null) {\n-        c.setKeystore(keyStore);\n-        c.setKeystoreType(keyStoreType);\n-        c.setPassword(keyStorePassword);\n+        sslContextFactory.setKeyStorePath(keyStore);\n+        sslContextFactory.setKeyStoreType(keyStoreType);\n+        sslContextFactory.setKeyStorePassword(keyStorePassword);\n       }\n-\n       if (trustStore !\u003d null) {\n-        c.setTruststore(trustStore);\n-        c.setTruststoreType(trustStoreType);\n-        c.setTrustPassword(trustStorePassword);\n+        sslContextFactory.setTrustStorePath(trustStore);\n+        sslContextFactory.setTrustStoreType(trustStoreType);\n+        sslContextFactory.setTrustStorePassword(trustStorePassword);\n       }\n-\n       if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n-        c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n+        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n         LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n       }\n-      return c;\n+\n+      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n+          HttpVersion.HTTP_1_1.asString()));\n+\n+      return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ServerConnector createHttpsChannelConnector(Server server) {\n      ServerConnector conn \u003d new ServerConnector(server);\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n      httpConfig.setSecureScheme(\"https\");\n      httpConfig.addCustomizer(new SecureRequestCustomizer());\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      configureChannelConnector(conn);\n\n      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n      sslContextFactory.setNeedClientAuth(needsClientAuth);\n      sslContextFactory.setKeyManagerPassword(keyPassword);\n      if (keyStore !\u003d null) {\n        sslContextFactory.setKeyStorePath(keyStore);\n        sslContextFactory.setKeyStoreType(keyStoreType);\n        sslContextFactory.setKeyStorePassword(keyStorePassword);\n      }\n      if (trustStore !\u003d null) {\n        sslContextFactory.setTrustStorePath(trustStore);\n        sslContextFactory.setTrustStoreType(trustStoreType);\n        sslContextFactory.setTrustStorePassword(trustStorePassword);\n      }\n      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n      }\n\n      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n          HttpVersion.HTTP_1_1.asString()));\n\n      return conn;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[server-Server]"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
          "commitDate": "27/10/16 4:09 PM",
          "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "19/08/16 9:22 AM",
          "commitNameOld": "03a9343d5798384b66fbd21e1e028acaf55b00e9",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 69.28,
          "commitsBetweenForRepo": 490,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,34 @@\n-    private Connector createHttpsChannelConnector() {\n-      SslSelectChannelConnector c \u003d new SslSelectChannelConnectorSecure();\n-      configureChannelConnector(c);\n+    private ServerConnector createHttpsChannelConnector(Server server) {\n+      ServerConnector conn \u003d new ServerConnector(server);\n+      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n+      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n+      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n+      httpConfig.setSecureScheme(\"https\");\n+      httpConfig.addCustomizer(new SecureRequestCustomizer());\n+      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n+      conn.addConnectionFactory(connFactory);\n+      configureChannelConnector(conn);\n \n-      c.setNeedClientAuth(needsClientAuth);\n-      c.setKeyPassword(keyPassword);\n-\n+      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n+      sslContextFactory.setNeedClientAuth(needsClientAuth);\n+      sslContextFactory.setKeyManagerPassword(keyPassword);\n       if (keyStore !\u003d null) {\n-        c.setKeystore(keyStore);\n-        c.setKeystoreType(keyStoreType);\n-        c.setPassword(keyStorePassword);\n+        sslContextFactory.setKeyStorePath(keyStore);\n+        sslContextFactory.setKeyStoreType(keyStoreType);\n+        sslContextFactory.setKeyStorePassword(keyStorePassword);\n       }\n-\n       if (trustStore !\u003d null) {\n-        c.setTruststore(trustStore);\n-        c.setTruststoreType(trustStoreType);\n-        c.setTrustPassword(trustStorePassword);\n+        sslContextFactory.setTrustStorePath(trustStore);\n+        sslContextFactory.setTrustStoreType(trustStoreType);\n+        sslContextFactory.setTrustStorePassword(trustStorePassword);\n       }\n-\n       if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n-        c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n+        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n         LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n       }\n-      return c;\n+\n+      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n+          HttpVersion.HTTP_1_1.asString()));\n+\n+      return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ServerConnector createHttpsChannelConnector(Server server) {\n      ServerConnector conn \u003d new ServerConnector(server);\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n      httpConfig.setSecureScheme(\"https\");\n      httpConfig.addCustomizer(new SecureRequestCustomizer());\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      configureChannelConnector(conn);\n\n      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n      sslContextFactory.setNeedClientAuth(needsClientAuth);\n      sslContextFactory.setKeyManagerPassword(keyPassword);\n      if (keyStore !\u003d null) {\n        sslContextFactory.setKeyStorePath(keyStore);\n        sslContextFactory.setKeyStoreType(keyStoreType);\n        sslContextFactory.setKeyStorePassword(keyStorePassword);\n      }\n      if (trustStore !\u003d null) {\n        sslContextFactory.setTrustStorePath(trustStore);\n        sslContextFactory.setTrustStoreType(trustStoreType);\n        sslContextFactory.setTrustStorePassword(trustStorePassword);\n      }\n      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n      }\n\n      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n          HttpVersion.HTTP_1_1.asString()));\n\n      return conn;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {
            "oldValue": "Connector",
            "newValue": "ServerConnector"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-10075. Update jetty dependency to version 9 (rkanter)\n",
          "commitDate": "27/10/16 4:09 PM",
          "commitName": "5877f20f9c3f6f0afa505715e9a2ee312475af17",
          "commitAuthor": "Robert Kanter",
          "commitDateOld": "19/08/16 9:22 AM",
          "commitNameOld": "03a9343d5798384b66fbd21e1e028acaf55b00e9",
          "commitAuthorOld": "Wei-Chiu Chuang",
          "daysBetweenCommits": 69.28,
          "commitsBetweenForRepo": 490,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,34 @@\n-    private Connector createHttpsChannelConnector() {\n-      SslSelectChannelConnector c \u003d new SslSelectChannelConnectorSecure();\n-      configureChannelConnector(c);\n+    private ServerConnector createHttpsChannelConnector(Server server) {\n+      ServerConnector conn \u003d new ServerConnector(server);\n+      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n+      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n+      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n+      httpConfig.setSecureScheme(\"https\");\n+      httpConfig.addCustomizer(new SecureRequestCustomizer());\n+      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n+      conn.addConnectionFactory(connFactory);\n+      configureChannelConnector(conn);\n \n-      c.setNeedClientAuth(needsClientAuth);\n-      c.setKeyPassword(keyPassword);\n-\n+      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n+      sslContextFactory.setNeedClientAuth(needsClientAuth);\n+      sslContextFactory.setKeyManagerPassword(keyPassword);\n       if (keyStore !\u003d null) {\n-        c.setKeystore(keyStore);\n-        c.setKeystoreType(keyStoreType);\n-        c.setPassword(keyStorePassword);\n+        sslContextFactory.setKeyStorePath(keyStore);\n+        sslContextFactory.setKeyStoreType(keyStoreType);\n+        sslContextFactory.setKeyStorePassword(keyStorePassword);\n       }\n-\n       if (trustStore !\u003d null) {\n-        c.setTruststore(trustStore);\n-        c.setTruststoreType(trustStoreType);\n-        c.setTrustPassword(trustStorePassword);\n+        sslContextFactory.setTrustStorePath(trustStore);\n+        sslContextFactory.setTrustStoreType(trustStoreType);\n+        sslContextFactory.setTrustStorePassword(trustStorePassword);\n       }\n-\n       if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n-        c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n+        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n         LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n       }\n-      return c;\n+\n+      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n+          HttpVersion.HTTP_1_1.asString()));\n+\n+      return conn;\n     }\n\\ No newline at end of file\n",
          "actualSource": "    private ServerConnector createHttpsChannelConnector(Server server) {\n      ServerConnector conn \u003d new ServerConnector(server);\n      HttpConfiguration httpConfig \u003d new HttpConfiguration();\n      httpConfig.setRequestHeaderSize(JettyUtils.HEADER_SIZE);\n      httpConfig.setResponseHeaderSize(JettyUtils.HEADER_SIZE);\n      httpConfig.setSecureScheme(\"https\");\n      httpConfig.addCustomizer(new SecureRequestCustomizer());\n      ConnectionFactory connFactory \u003d new HttpConnectionFactory(httpConfig);\n      conn.addConnectionFactory(connFactory);\n      configureChannelConnector(conn);\n\n      SslContextFactory sslContextFactory \u003d new SslContextFactory();\n      sslContextFactory.setNeedClientAuth(needsClientAuth);\n      sslContextFactory.setKeyManagerPassword(keyPassword);\n      if (keyStore !\u003d null) {\n        sslContextFactory.setKeyStorePath(keyStore);\n        sslContextFactory.setKeyStoreType(keyStoreType);\n        sslContextFactory.setKeyStorePassword(keyStorePassword);\n      }\n      if (trustStore !\u003d null) {\n        sslContextFactory.setTrustStorePath(trustStore);\n        sslContextFactory.setTrustStoreType(trustStoreType);\n        sslContextFactory.setTrustStorePassword(trustStorePassword);\n      }\n      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n        sslContextFactory.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n      }\n\n      conn.addFirstConnectionFactory(new SslConnectionFactory(sslContextFactory,\n          HttpVersion.HTTP_1_1.asString()));\n\n      return conn;\n    }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java",
          "extendedDetails": {}
        }
      ]
    },
    "03a9343d5798384b66fbd21e1e028acaf55b00e9": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-12765. HttpServer2 should switch to using the non-blocking SslSelectChannelConnector to prevent performance degradation when handling SSL connections. Contributed by Min Shen.\n",
      "commitDate": "19/08/16 9:22 AM",
      "commitName": "03a9343d5798384b66fbd21e1e028acaf55b00e9",
      "commitAuthor": "Wei-Chiu Chuang",
      "diff": "@@ -0,0 +1,25 @@\n+    private Connector createHttpsChannelConnector() {\n+      SslSelectChannelConnector c \u003d new SslSelectChannelConnectorSecure();\n+      configureChannelConnector(c);\n+\n+      c.setNeedClientAuth(needsClientAuth);\n+      c.setKeyPassword(keyPassword);\n+\n+      if (keyStore !\u003d null) {\n+        c.setKeystore(keyStore);\n+        c.setKeystoreType(keyStoreType);\n+        c.setPassword(keyStorePassword);\n+      }\n+\n+      if (trustStore !\u003d null) {\n+        c.setTruststore(trustStore);\n+        c.setTruststoreType(trustStoreType);\n+        c.setTrustPassword(trustStorePassword);\n+      }\n+\n+      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n+        c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n+        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n+      }\n+      return c;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private Connector createHttpsChannelConnector() {\n      SslSelectChannelConnector c \u003d new SslSelectChannelConnectorSecure();\n      configureChannelConnector(c);\n\n      c.setNeedClientAuth(needsClientAuth);\n      c.setKeyPassword(keyPassword);\n\n      if (keyStore !\u003d null) {\n        c.setKeystore(keyStore);\n        c.setKeystoreType(keyStoreType);\n        c.setPassword(keyStorePassword);\n      }\n\n      if (trustStore !\u003d null) {\n        c.setTruststore(trustStore);\n        c.setTruststoreType(trustStoreType);\n        c.setTrustPassword(trustStorePassword);\n      }\n\n      if(null !\u003d excludeCiphers \u0026\u0026 !excludeCiphers.isEmpty()) {\n        c.setExcludeCipherSuites(excludeCiphers.split(\",\"));\n        LOG.info(\"Excluded Cipher List:\" + excludeCiphers);\n      }\n      return c;\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/http/HttpServer2.java"
    }
  }
}