{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSImageFormat.java",
  "functionName": "saveImage",
  "functionId": "saveImage___current-INodeDirectory__out-DataOutputStream__toSaveSubtree-boolean__inSnapshot-boolean__counter-Counter",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
  "functionStartLine": 1376,
  "functionEndLine": 1431,
  "numCommitsSeen": 127,
  "timeTaken": 2542,
  "changeHistory": [
    "76a621ffd2d66bf012a554f4400091a92a5b473e",
    "97f58955a6045b373ab73653bf26ab5922b00cf3"
  ],
  "changeHistoryShort": {
    "76a621ffd2d66bf012a554f4400091a92a5b473e": "Ybodychange",
    "97f58955a6045b373ab73653bf26ab5922b00cf3": "Yintroduced"
  },
  "changeHistoryDetails": {
    "76a621ffd2d66bf012a554f4400091a92a5b473e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6609. Use DirectorySnapshottableFeature to represent a snapshottable directory. Contributed by Jing Zhao.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1608631 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/07/14 5:08 PM",
      "commitName": "76a621ffd2d66bf012a554f4400091a92a5b473e",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "22/06/14 12:39 AM",
      "commitNameOld": "1e89eba47d0f291b33fc26f9406231fc70b63a87",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 15.69,
      "commitsBetweenForRepo": 95,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,56 @@\n     private void saveImage(INodeDirectory current, DataOutputStream out,\n         boolean toSaveSubtree, boolean inSnapshot, Counter counter)\n         throws IOException {\n       // write the inode id of the directory\n       out.writeLong(current.getId());\n \n       if (!toSaveSubtree) {\n         return;\n       }\n \n       final ReadOnlyList\u003cINode\u003e children \u003d current\n           .getChildrenList(Snapshot.CURRENT_STATE_ID);\n       int dirNum \u003d 0;\n       List\u003cINodeDirectory\u003e snapshotDirs \u003d null;\n       DirectoryWithSnapshotFeature sf \u003d current.getDirectoryWithSnapshotFeature();\n       if (sf !\u003d null) {\n         snapshotDirs \u003d new ArrayList\u003cINodeDirectory\u003e();\n         sf.getSnapshotDirectory(snapshotDirs);\n         dirNum +\u003d snapshotDirs.size();\n       }\n \n       // 2. Write INodeDirectorySnapshottable#snapshotsByNames to record all\n       // Snapshots\n-      if (current instanceof INodeDirectorySnapshottable) {\n-        INodeDirectorySnapshottable snapshottableNode \u003d\n-            (INodeDirectorySnapshottable) current;\n-        SnapshotFSImageFormat.saveSnapshots(snapshottableNode, out);\n+      if (current.isDirectory() \u0026\u0026 current.asDirectory().isSnapshottable()) {\n+        SnapshotFSImageFormat.saveSnapshots(current.asDirectory(), out);\n       } else {\n         out.writeInt(-1); // # of snapshots\n       }\n \n       // 3. Write children INode\n       dirNum +\u003d saveChildren(children, out, inSnapshot, counter);\n \n       // 4. Write DirectoryDiff lists, if there is any.\n       SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap);\n \n       // Write sub-tree of sub-directories, including possible snapshots of\n       // deleted sub-directories\n       out.writeInt(dirNum); // the number of sub-directories\n       for(INode child : children) {\n         if(!child.isDirectory()) {\n           continue;\n         }\n         // make sure we only save the subtree under a reference node once\n         boolean toSave \u003d child.isReference() ?\n             referenceMap.toProcessSubtree(child.getId()) : true;\n         saveImage(child.asDirectory(), out, toSave, inSnapshot, counter);\n       }\n       if (snapshotDirs !\u003d null) {\n         for (INodeDirectory subDir : snapshotDirs) {\n           // make sure we only save the subtree under a reference node once\n           boolean toSave \u003d subDir.getParentReference() !\u003d null ?\n               referenceMap.toProcessSubtree(subDir.getId()) : true;\n           saveImage(subDir, out, toSave, true, counter);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveImage(INodeDirectory current, DataOutputStream out,\n        boolean toSaveSubtree, boolean inSnapshot, Counter counter)\n        throws IOException {\n      // write the inode id of the directory\n      out.writeLong(current.getId());\n\n      if (!toSaveSubtree) {\n        return;\n      }\n\n      final ReadOnlyList\u003cINode\u003e children \u003d current\n          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n      int dirNum \u003d 0;\n      List\u003cINodeDirectory\u003e snapshotDirs \u003d null;\n      DirectoryWithSnapshotFeature sf \u003d current.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        snapshotDirs \u003d new ArrayList\u003cINodeDirectory\u003e();\n        sf.getSnapshotDirectory(snapshotDirs);\n        dirNum +\u003d snapshotDirs.size();\n      }\n\n      // 2. Write INodeDirectorySnapshottable#snapshotsByNames to record all\n      // Snapshots\n      if (current.isDirectory() \u0026\u0026 current.asDirectory().isSnapshottable()) {\n        SnapshotFSImageFormat.saveSnapshots(current.asDirectory(), out);\n      } else {\n        out.writeInt(-1); // # of snapshots\n      }\n\n      // 3. Write children INode\n      dirNum +\u003d saveChildren(children, out, inSnapshot, counter);\n\n      // 4. Write DirectoryDiff lists, if there is any.\n      SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap);\n\n      // Write sub-tree of sub-directories, including possible snapshots of\n      // deleted sub-directories\n      out.writeInt(dirNum); // the number of sub-directories\n      for(INode child : children) {\n        if(!child.isDirectory()) {\n          continue;\n        }\n        // make sure we only save the subtree under a reference node once\n        boolean toSave \u003d child.isReference() ?\n            referenceMap.toProcessSubtree(child.getId()) : true;\n        saveImage(child.asDirectory(), out, toSave, inSnapshot, counter);\n      }\n      if (snapshotDirs !\u003d null) {\n        for (INodeDirectory subDir : snapshotDirs) {\n          // make sure we only save the subtree under a reference node once\n          boolean toSave \u003d subDir.getParentReference() !\u003d null ?\n              referenceMap.toProcessSubtree(subDir.getId()) : true;\n          saveImage(subDir, out, toSave, true, counter);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java",
      "extendedDetails": {}
    },
    "97f58955a6045b373ab73653bf26ab5922b00cf3": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-6293. Issues with OIV processing PB-based fsimages. Contributed by Kihwal Lee.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594439 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 6:15 PM",
      "commitName": "97f58955a6045b373ab73653bf26ab5922b00cf3",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,58 @@\n+    private void saveImage(INodeDirectory current, DataOutputStream out,\n+        boolean toSaveSubtree, boolean inSnapshot, Counter counter)\n+        throws IOException {\n+      // write the inode id of the directory\n+      out.writeLong(current.getId());\n+\n+      if (!toSaveSubtree) {\n+        return;\n+      }\n+\n+      final ReadOnlyList\u003cINode\u003e children \u003d current\n+          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n+      int dirNum \u003d 0;\n+      List\u003cINodeDirectory\u003e snapshotDirs \u003d null;\n+      DirectoryWithSnapshotFeature sf \u003d current.getDirectoryWithSnapshotFeature();\n+      if (sf !\u003d null) {\n+        snapshotDirs \u003d new ArrayList\u003cINodeDirectory\u003e();\n+        sf.getSnapshotDirectory(snapshotDirs);\n+        dirNum +\u003d snapshotDirs.size();\n+      }\n+\n+      // 2. Write INodeDirectorySnapshottable#snapshotsByNames to record all\n+      // Snapshots\n+      if (current instanceof INodeDirectorySnapshottable) {\n+        INodeDirectorySnapshottable snapshottableNode \u003d\n+            (INodeDirectorySnapshottable) current;\n+        SnapshotFSImageFormat.saveSnapshots(snapshottableNode, out);\n+      } else {\n+        out.writeInt(-1); // # of snapshots\n+      }\n+\n+      // 3. Write children INode\n+      dirNum +\u003d saveChildren(children, out, inSnapshot, counter);\n+\n+      // 4. Write DirectoryDiff lists, if there is any.\n+      SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap);\n+\n+      // Write sub-tree of sub-directories, including possible snapshots of\n+      // deleted sub-directories\n+      out.writeInt(dirNum); // the number of sub-directories\n+      for(INode child : children) {\n+        if(!child.isDirectory()) {\n+          continue;\n+        }\n+        // make sure we only save the subtree under a reference node once\n+        boolean toSave \u003d child.isReference() ?\n+            referenceMap.toProcessSubtree(child.getId()) : true;\n+        saveImage(child.asDirectory(), out, toSave, inSnapshot, counter);\n+      }\n+      if (snapshotDirs !\u003d null) {\n+        for (INodeDirectory subDir : snapshotDirs) {\n+          // make sure we only save the subtree under a reference node once\n+          boolean toSave \u003d subDir.getParentReference() !\u003d null ?\n+              referenceMap.toProcessSubtree(subDir.getId()) : true;\n+          saveImage(subDir, out, toSave, true, counter);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void saveImage(INodeDirectory current, DataOutputStream out,\n        boolean toSaveSubtree, boolean inSnapshot, Counter counter)\n        throws IOException {\n      // write the inode id of the directory\n      out.writeLong(current.getId());\n\n      if (!toSaveSubtree) {\n        return;\n      }\n\n      final ReadOnlyList\u003cINode\u003e children \u003d current\n          .getChildrenList(Snapshot.CURRENT_STATE_ID);\n      int dirNum \u003d 0;\n      List\u003cINodeDirectory\u003e snapshotDirs \u003d null;\n      DirectoryWithSnapshotFeature sf \u003d current.getDirectoryWithSnapshotFeature();\n      if (sf !\u003d null) {\n        snapshotDirs \u003d new ArrayList\u003cINodeDirectory\u003e();\n        sf.getSnapshotDirectory(snapshotDirs);\n        dirNum +\u003d snapshotDirs.size();\n      }\n\n      // 2. Write INodeDirectorySnapshottable#snapshotsByNames to record all\n      // Snapshots\n      if (current instanceof INodeDirectorySnapshottable) {\n        INodeDirectorySnapshottable snapshottableNode \u003d\n            (INodeDirectorySnapshottable) current;\n        SnapshotFSImageFormat.saveSnapshots(snapshottableNode, out);\n      } else {\n        out.writeInt(-1); // # of snapshots\n      }\n\n      // 3. Write children INode\n      dirNum +\u003d saveChildren(children, out, inSnapshot, counter);\n\n      // 4. Write DirectoryDiff lists, if there is any.\n      SnapshotFSImageFormat.saveDirectoryDiffList(current, out, referenceMap);\n\n      // Write sub-tree of sub-directories, including possible snapshots of\n      // deleted sub-directories\n      out.writeInt(dirNum); // the number of sub-directories\n      for(INode child : children) {\n        if(!child.isDirectory()) {\n          continue;\n        }\n        // make sure we only save the subtree under a reference node once\n        boolean toSave \u003d child.isReference() ?\n            referenceMap.toProcessSubtree(child.getId()) : true;\n        saveImage(child.asDirectory(), out, toSave, inSnapshot, counter);\n      }\n      if (snapshotDirs !\u003d null) {\n        for (INodeDirectory subDir : snapshotDirs) {\n          // make sure we only save the subtree under a reference node once\n          boolean toSave \u003d subDir.getParentReference() !\u003d null ?\n              referenceMap.toProcessSubtree(subDir.getId()) : true;\n          saveImage(subDir, out, toSave, true, counter);\n        }\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSImageFormat.java"
    }
  }
}