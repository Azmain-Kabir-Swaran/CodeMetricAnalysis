{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FileSystemImage.java",
  "functionName": "run",
  "functionId": "run___argv-String[]",
  "sourceFilePath": "hadoop-tools/hadoop-fs2img/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileSystemImage.java",
  "functionStartLine": 82,
  "functionEndLine": 145,
  "numCommitsSeen": 6,
  "timeTaken": 1484,
  "changeHistory": [
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
    "9c35be86e17021202823bfd3c2067ff3b312ce5c",
    "6cd80b2521e6283036d8c7058d8e452a93ff8e4b",
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
    "8da3a6e314609f9124bd9979cd09cddbc2a10d36"
  ],
  "changeHistoryShort": {
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7": "Ybodychange",
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": "Ybodychange",
    "6cd80b2521e6283036d8c7058d8e452a93ff8e4b": "Ybodychange",
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5": "Ybodychange",
    "8da3a6e314609f9124bd9979cd09cddbc2a10d36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "8239e3afb31d3c4485817d4b8b8b195b554acbe7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12712. [9806] Code style cleanup\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "8239e3afb31d3c4485817d4b8b8b195b554acbe7",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,64 @@\n   public int run(String[] argv) throws Exception {\n     Options options \u003d options();\n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n     try {\n       cmd \u003d parser.parse(options, argv);\n     } catch (ParseException e) {\n       System.out.println(\n           \"Error parsing command-line options: \" + e.getMessage());\n       printUsage();\n       return -1;\n     }\n \n     if (cmd.hasOption(\"h\")) {\n       printUsage();\n       return -1;\n     }\n \n     ImageWriter.Options opts \u003d\n         ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n     for (Option o : cmd.getOptions()) {\n       switch (o.getOpt()) {\n       case \"o\":\n         opts.output(o.getValue());\n         break;\n       case \"u\":\n         opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n         break;\n       case \"b\":\n         opts.blocks(\n             Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n         break;\n       case \"i\":\n         opts.blockIds(\n             Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n         break;\n       case \"c\":\n         opts.cache(Integer.parseInt(o.getValue()));\n         break;\n       case \"cid\":\n         opts.clusterID(o.getValue());\n         break;\n       case \"bpid\":\n         opts.blockPoolID(o.getValue());\n         break;\n       default:\n-        throw new UnsupportedOperationException(\"Internal error\");\n+        throw new UnsupportedOperationException(\n+            \"Unknown option: \" + o.getOpt());\n       }\n     }\n \n     String[] rem \u003d cmd.getArgs();\n     if (rem.length !\u003d 1) {\n       printUsage();\n       return -1;\n     }\n \n     try (ImageWriter w \u003d new ImageWriter(opts)) {\n       for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n         w.accept(e); // add and continue\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d options();\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n          \"Error parsing command-line options: \" + e.getMessage());\n      printUsage();\n      return -1;\n    }\n\n    if (cmd.hasOption(\"h\")) {\n      printUsage();\n      return -1;\n    }\n\n    ImageWriter.Options opts \u003d\n        ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n    for (Option o : cmd.getOptions()) {\n      switch (o.getOpt()) {\n      case \"o\":\n        opts.output(o.getValue());\n        break;\n      case \"u\":\n        opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n        break;\n      case \"b\":\n        opts.blocks(\n            Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n        break;\n      case \"i\":\n        opts.blockIds(\n            Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n        break;\n      case \"c\":\n        opts.cache(Integer.parseInt(o.getValue()));\n        break;\n      case \"cid\":\n        opts.clusterID(o.getValue());\n        break;\n      case \"bpid\":\n        opts.blockPoolID(o.getValue());\n        break;\n      default:\n        throw new UnsupportedOperationException(\n            \"Unknown option: \" + o.getOpt());\n      }\n    }\n\n    String[] rem \u003d cmd.getArgs();\n    if (rem.length !\u003d 1) {\n      printUsage();\n      return -1;\n    }\n\n    try (ImageWriter w \u003d new ImageWriter(opts)) {\n      for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n        w.accept(e); // add and continue\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-fs2img/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileSystemImage.java",
      "extendedDetails": {}
    },
    "9c35be86e17021202823bfd3c2067ff3b312ce5c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12713. [READ] Refactor FileRegion and BlockAliasMap to separate out HDFS metadata and PROVIDED storage metadata. Contributed by Ewan Higgs\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "9c35be86e17021202823bfd3c2067ff3b312ce5c",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "a027055dd2bf5009fe272e9ceb08305bd0a8cc31",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,63 @@\n   public int run(String[] argv) throws Exception {\n     Options options \u003d options();\n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n     try {\n       cmd \u003d parser.parse(options, argv);\n     } catch (ParseException e) {\n       System.out.println(\n           \"Error parsing command-line options: \" + e.getMessage());\n       printUsage();\n       return -1;\n     }\n \n     if (cmd.hasOption(\"h\")) {\n       printUsage();\n       return -1;\n     }\n \n     ImageWriter.Options opts \u003d\n         ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n     for (Option o : cmd.getOptions()) {\n       switch (o.getOpt()) {\n       case \"o\":\n         opts.output(o.getValue());\n         break;\n       case \"u\":\n         opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n         break;\n       case \"b\":\n         opts.blocks(\n             Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n         break;\n       case \"i\":\n         opts.blockIds(\n             Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n         break;\n       case \"c\":\n         opts.cache(Integer.parseInt(o.getValue()));\n         break;\n       case \"cid\":\n         opts.clusterID(o.getValue());\n         break;\n+      case \"bpid\":\n+        opts.blockPoolID(o.getValue());\n+        break;\n       default:\n         throw new UnsupportedOperationException(\"Internal error\");\n       }\n     }\n \n     String[] rem \u003d cmd.getArgs();\n     if (rem.length !\u003d 1) {\n       printUsage();\n       return -1;\n     }\n \n     try (ImageWriter w \u003d new ImageWriter(opts)) {\n       for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n         w.accept(e); // add and continue\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d options();\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n          \"Error parsing command-line options: \" + e.getMessage());\n      printUsage();\n      return -1;\n    }\n\n    if (cmd.hasOption(\"h\")) {\n      printUsage();\n      return -1;\n    }\n\n    ImageWriter.Options opts \u003d\n        ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n    for (Option o : cmd.getOptions()) {\n      switch (o.getOpt()) {\n      case \"o\":\n        opts.output(o.getValue());\n        break;\n      case \"u\":\n        opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n        break;\n      case \"b\":\n        opts.blocks(\n            Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n        break;\n      case \"i\":\n        opts.blockIds(\n            Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n        break;\n      case \"c\":\n        opts.cache(Integer.parseInt(o.getValue()));\n        break;\n      case \"cid\":\n        opts.clusterID(o.getValue());\n        break;\n      case \"bpid\":\n        opts.blockPoolID(o.getValue());\n        break;\n      default:\n        throw new UnsupportedOperationException(\"Internal error\");\n      }\n    }\n\n    String[] rem \u003d cmd.getArgs();\n    if (rem.length !\u003d 1) {\n      printUsage();\n      return -1;\n    }\n\n    try (ImageWriter w \u003d new ImageWriter(opts)) {\n      for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n        w.accept(e); // add and continue\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-fs2img/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileSystemImage.java",
      "extendedDetails": {}
    },
    "6cd80b2521e6283036d8c7058d8e452a93ff8e4b": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12779. [READ] Allow cluster id to be specified to the Image generation tool\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "6cd80b2521e6283036d8c7058d8e452a93ff8e4b",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,60 @@\n   public int run(String[] argv) throws Exception {\n     Options options \u003d options();\n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n     try {\n       cmd \u003d parser.parse(options, argv);\n     } catch (ParseException e) {\n       System.out.println(\n           \"Error parsing command-line options: \" + e.getMessage());\n       printUsage();\n       return -1;\n     }\n \n     if (cmd.hasOption(\"h\")) {\n       printUsage();\n       return -1;\n     }\n \n     ImageWriter.Options opts \u003d\n         ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n     for (Option o : cmd.getOptions()) {\n       switch (o.getOpt()) {\n       case \"o\":\n         opts.output(o.getValue());\n         break;\n       case \"u\":\n         opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n         break;\n       case \"b\":\n         opts.blocks(\n             Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n         break;\n       case \"i\":\n         opts.blockIds(\n             Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n         break;\n       case \"c\":\n         opts.cache(Integer.parseInt(o.getValue()));\n         break;\n+      case \"cid\":\n+        opts.clusterID(o.getValue());\n+        break;\n       default:\n         throw new UnsupportedOperationException(\"Internal error\");\n       }\n     }\n \n     String[] rem \u003d cmd.getArgs();\n     if (rem.length !\u003d 1) {\n       printUsage();\n       return -1;\n     }\n \n     try (ImageWriter w \u003d new ImageWriter(opts)) {\n       for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n         w.accept(e); // add and continue\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d options();\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n          \"Error parsing command-line options: \" + e.getMessage());\n      printUsage();\n      return -1;\n    }\n\n    if (cmd.hasOption(\"h\")) {\n      printUsage();\n      return -1;\n    }\n\n    ImageWriter.Options opts \u003d\n        ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n    for (Option o : cmd.getOptions()) {\n      switch (o.getOpt()) {\n      case \"o\":\n        opts.output(o.getValue());\n        break;\n      case \"u\":\n        opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n        break;\n      case \"b\":\n        opts.blocks(\n            Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n        break;\n      case \"i\":\n        opts.blockIds(\n            Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n        break;\n      case \"c\":\n        opts.cache(Integer.parseInt(o.getValue()));\n        break;\n      case \"cid\":\n        opts.clusterID(o.getValue());\n        break;\n      default:\n        throw new UnsupportedOperationException(\"Internal error\");\n      }\n    }\n\n    String[] rem \u003d cmd.getArgs();\n    if (rem.length !\u003d 1) {\n      printUsage();\n      return -1;\n    }\n\n    try (ImageWriter w \u003d new ImageWriter(opts)) {\n      for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n        w.accept(e); // add and continue\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-fs2img/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileSystemImage.java",
      "extendedDetails": {}
    },
    "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11902. [READ] Merge BlockFormatProvider and FileRegionProvider.\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "98f5ed5aa377ddd3f35b763b20c499d2ccac2ed5",
      "commitAuthor": "Virajith Jalaparti",
      "commitDateOld": "15/12/17 5:51 PM",
      "commitNameOld": "8da3a6e314609f9124bd9979cd09cddbc2a10d36",
      "commitAuthorOld": "Virajith Jalaparti",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public int run(String[] argv) throws Exception {\n     Options options \u003d options();\n     CommandLineParser parser \u003d new PosixParser();\n     CommandLine cmd;\n     try {\n       cmd \u003d parser.parse(options, argv);\n     } catch (ParseException e) {\n       System.out.println(\n           \"Error parsing command-line options: \" + e.getMessage());\n       printUsage();\n       return -1;\n     }\n \n     if (cmd.hasOption(\"h\")) {\n       printUsage();\n       return -1;\n     }\n \n     ImageWriter.Options opts \u003d\n         ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n     for (Option o : cmd.getOptions()) {\n       switch (o.getOpt()) {\n       case \"o\":\n         opts.output(o.getValue());\n         break;\n       case \"u\":\n         opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n         break;\n       case \"b\":\n         opts.blocks(\n-            Class.forName(o.getValue()).asSubclass(BlockFormat.class));\n+            Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n         break;\n       case \"i\":\n         opts.blockIds(\n             Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n         break;\n       case \"c\":\n         opts.cache(Integer.parseInt(o.getValue()));\n         break;\n       default:\n         throw new UnsupportedOperationException(\"Internal error\");\n       }\n     }\n \n     String[] rem \u003d cmd.getArgs();\n     if (rem.length !\u003d 1) {\n       printUsage();\n       return -1;\n     }\n \n     try (ImageWriter w \u003d new ImageWriter(opts)) {\n       for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n         w.accept(e); // add and continue\n       }\n     }\n     return 0;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d options();\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n          \"Error parsing command-line options: \" + e.getMessage());\n      printUsage();\n      return -1;\n    }\n\n    if (cmd.hasOption(\"h\")) {\n      printUsage();\n      return -1;\n    }\n\n    ImageWriter.Options opts \u003d\n        ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n    for (Option o : cmd.getOptions()) {\n      switch (o.getOpt()) {\n      case \"o\":\n        opts.output(o.getValue());\n        break;\n      case \"u\":\n        opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n        break;\n      case \"b\":\n        opts.blocks(\n            Class.forName(o.getValue()).asSubclass(BlockAliasMap.class));\n        break;\n      case \"i\":\n        opts.blockIds(\n            Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n        break;\n      case \"c\":\n        opts.cache(Integer.parseInt(o.getValue()));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"Internal error\");\n      }\n    }\n\n    String[] rem \u003d cmd.getArgs();\n    if (rem.length !\u003d 1) {\n      printUsage();\n      return -1;\n    }\n\n    try (ImageWriter w \u003d new ImageWriter(opts)) {\n      for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n        w.accept(e); // add and continue\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-fs2img/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileSystemImage.java",
      "extendedDetails": {}
    },
    "8da3a6e314609f9124bd9979cd09cddbc2a10d36": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10706. [READ] Add tool generating FSImage from external store\n",
      "commitDate": "15/12/17 5:51 PM",
      "commitName": "8da3a6e314609f9124bd9979cd09cddbc2a10d36",
      "commitAuthor": "Virajith Jalaparti",
      "diff": "@@ -0,0 +1,57 @@\n+  public int run(String[] argv) throws Exception {\n+    Options options \u003d options();\n+    CommandLineParser parser \u003d new PosixParser();\n+    CommandLine cmd;\n+    try {\n+      cmd \u003d parser.parse(options, argv);\n+    } catch (ParseException e) {\n+      System.out.println(\n+          \"Error parsing command-line options: \" + e.getMessage());\n+      printUsage();\n+      return -1;\n+    }\n+\n+    if (cmd.hasOption(\"h\")) {\n+      printUsage();\n+      return -1;\n+    }\n+\n+    ImageWriter.Options opts \u003d\n+        ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n+    for (Option o : cmd.getOptions()) {\n+      switch (o.getOpt()) {\n+      case \"o\":\n+        opts.output(o.getValue());\n+        break;\n+      case \"u\":\n+        opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n+        break;\n+      case \"b\":\n+        opts.blocks(\n+            Class.forName(o.getValue()).asSubclass(BlockFormat.class));\n+        break;\n+      case \"i\":\n+        opts.blockIds(\n+            Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n+        break;\n+      case \"c\":\n+        opts.cache(Integer.parseInt(o.getValue()));\n+        break;\n+      default:\n+        throw new UnsupportedOperationException(\"Internal error\");\n+      }\n+    }\n+\n+    String[] rem \u003d cmd.getArgs();\n+    if (rem.length !\u003d 1) {\n+      printUsage();\n+      return -1;\n+    }\n+\n+    try (ImageWriter w \u003d new ImageWriter(opts)) {\n+      for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n+        w.accept(e); // add and continue\n+      }\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] argv) throws Exception {\n    Options options \u003d options();\n    CommandLineParser parser \u003d new PosixParser();\n    CommandLine cmd;\n    try {\n      cmd \u003d parser.parse(options, argv);\n    } catch (ParseException e) {\n      System.out.println(\n          \"Error parsing command-line options: \" + e.getMessage());\n      printUsage();\n      return -1;\n    }\n\n    if (cmd.hasOption(\"h\")) {\n      printUsage();\n      return -1;\n    }\n\n    ImageWriter.Options opts \u003d\n        ReflectionUtils.newInstance(ImageWriter.Options.class, getConf());\n    for (Option o : cmd.getOptions()) {\n      switch (o.getOpt()) {\n      case \"o\":\n        opts.output(o.getValue());\n        break;\n      case \"u\":\n        opts.ugi(Class.forName(o.getValue()).asSubclass(UGIResolver.class));\n        break;\n      case \"b\":\n        opts.blocks(\n            Class.forName(o.getValue()).asSubclass(BlockFormat.class));\n        break;\n      case \"i\":\n        opts.blockIds(\n            Class.forName(o.getValue()).asSubclass(BlockResolver.class));\n        break;\n      case \"c\":\n        opts.cache(Integer.parseInt(o.getValue()));\n        break;\n      default:\n        throw new UnsupportedOperationException(\"Internal error\");\n      }\n    }\n\n    String[] rem \u003d cmd.getArgs();\n    if (rem.length !\u003d 1) {\n      printUsage();\n      return -1;\n    }\n\n    try (ImageWriter w \u003d new ImageWriter(opts)) {\n      for (TreePath e : new FSTreeWalk(new Path(rem[0]), getConf())) {\n        w.accept(e); // add and continue\n      }\n    }\n    return 0;\n  }",
      "path": "hadoop-tools/hadoop-fs2img/src/main/java/org/apache/hadoop/hdfs/server/namenode/FileSystemImage.java"
    }
  }
}