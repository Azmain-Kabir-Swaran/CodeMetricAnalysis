{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BlockPlacementPolicyRackFaultTolerant.java",
  "functionName": "chooseEvenlyFromRemainingRacks",
  "functionId": "chooseEvenlyFromRemainingRacks___writer-Node__excludedNodes-Set__Node____blocksize-long__maxNodesPerRack-int__results-List__DatanodeStorageInfo____avoidStaleNodes-boolean__storageTypes-EnumMap__StorageType,Integer____totalReplicaExpected-int__e-NotEnoughReplicasException",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java",
  "functionStartLine": 163,
  "functionEndLine": 201,
  "numCommitsSeen": 7,
  "timeTaken": 1150,
  "changeHistory": [
    "b00f828d84e4e029fd4786ebe827ce704a1b2a04"
  ],
  "changeHistoryShort": {
    "b00f828d84e4e029fd4786ebe827ce704a1b2a04": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b00f828d84e4e029fd4786ebe827ce704a1b2a04": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12725. BlockPlacementPolicyRackFaultTolerant fails with very uneven racks.\n",
      "commitDate": "02/11/17 9:53 PM",
      "commitName": "b00f828d84e4e029fd4786ebe827ce704a1b2a04",
      "commitAuthor": "Xiao Chen",
      "diff": "@@ -0,0 +1,39 @@\n+  private void chooseEvenlyFromRemainingRacks(Node writer,\n+      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n+      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n+      EnumMap\u003cStorageType, Integer\u003e storageTypes, int totalReplicaExpected,\n+      NotEnoughReplicasException e) throws NotEnoughReplicasException {\n+    int numResultsOflastChoose \u003d 0;\n+    NotEnoughReplicasException lastException \u003d e;\n+    int bestEffortMaxNodesPerRack \u003d maxNodesPerRack;\n+    while (results.size() !\u003d totalReplicaExpected \u0026\u0026\n+        numResultsOflastChoose !\u003d results.size()) {\n+      // Exclude the chosen nodes\n+      final Set\u003cNode\u003e newExcludeNodes \u003d new HashSet\u003c\u003e();\n+      for (DatanodeStorageInfo resultStorage : results) {\n+        addToExcludedNodes(resultStorage.getDatanodeDescriptor(),\n+            newExcludeNodes);\n+      }\n+\n+      LOG.trace(\"Chosen nodes: {}\", results);\n+      LOG.trace(\"Excluded nodes: {}\", excludedNodes);\n+      LOG.trace(\"New Excluded nodes: {}\", newExcludeNodes);\n+      final int numOfReplicas \u003d totalReplicaExpected - results.size();\n+      numResultsOflastChoose \u003d results.size();\n+      try {\n+        chooseOnce(numOfReplicas, writer, newExcludeNodes, blocksize,\n+            ++bestEffortMaxNodesPerRack, results, avoidStaleNodes,\n+            storageTypes);\n+      } catch (NotEnoughReplicasException nere) {\n+        lastException \u003d nere;\n+      } finally {\n+        excludedNodes.addAll(newExcludeNodes);\n+      }\n+    }\n+\n+    if (numResultsOflastChoose !\u003d totalReplicaExpected) {\n+      LOG.debug(\"Best effort placement failed: expecting {} replicas, only \"\n+          + \"chose {}.\", totalReplicaExpected, numResultsOflastChoose);\n+      throw lastException;\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void chooseEvenlyFromRemainingRacks(Node writer,\n      Set\u003cNode\u003e excludedNodes, long blocksize, int maxNodesPerRack,\n      List\u003cDatanodeStorageInfo\u003e results, boolean avoidStaleNodes,\n      EnumMap\u003cStorageType, Integer\u003e storageTypes, int totalReplicaExpected,\n      NotEnoughReplicasException e) throws NotEnoughReplicasException {\n    int numResultsOflastChoose \u003d 0;\n    NotEnoughReplicasException lastException \u003d e;\n    int bestEffortMaxNodesPerRack \u003d maxNodesPerRack;\n    while (results.size() !\u003d totalReplicaExpected \u0026\u0026\n        numResultsOflastChoose !\u003d results.size()) {\n      // Exclude the chosen nodes\n      final Set\u003cNode\u003e newExcludeNodes \u003d new HashSet\u003c\u003e();\n      for (DatanodeStorageInfo resultStorage : results) {\n        addToExcludedNodes(resultStorage.getDatanodeDescriptor(),\n            newExcludeNodes);\n      }\n\n      LOG.trace(\"Chosen nodes: {}\", results);\n      LOG.trace(\"Excluded nodes: {}\", excludedNodes);\n      LOG.trace(\"New Excluded nodes: {}\", newExcludeNodes);\n      final int numOfReplicas \u003d totalReplicaExpected - results.size();\n      numResultsOflastChoose \u003d results.size();\n      try {\n        chooseOnce(numOfReplicas, writer, newExcludeNodes, blocksize,\n            ++bestEffortMaxNodesPerRack, results, avoidStaleNodes,\n            storageTypes);\n      } catch (NotEnoughReplicasException nere) {\n        lastException \u003d nere;\n      } finally {\n        excludedNodes.addAll(newExcludeNodes);\n      }\n    }\n\n    if (numResultsOflastChoose !\u003d totalReplicaExpected) {\n      LOG.debug(\"Best effort placement failed: expecting {} replicas, only \"\n          + \"chose {}.\", totalReplicaExpected, numResultsOflastChoose);\n      throw lastException;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/blockmanagement/BlockPlacementPolicyRackFaultTolerant.java"
    }
  }
}