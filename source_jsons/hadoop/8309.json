{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NamenodeWebHdfsMethods.java",
  "functionName": "post",
  "functionId": "post___ugi-UserGroupInformation(modifiers-final)__delegation-DelegationParam(modifiers-final)__username-UserParam(modifiers-final)__doAsUser-DoAsParam(modifiers-final)__fullpath-String(modifiers-final)__op-PostOpParam(modifiers-final)__concatSrcs-ConcatSourcesParam(modifiers-final)__bufferSize-BufferSizeParam(modifiers-final)__excludeDatanodes-ExcludeDatanodesParam(modifiers-final)__newLength-NewLengthParam(modifiers-final)__noredirectParam-NoRedirectParam(modifiers-final)",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
  "functionStartLine": 947,
  "functionEndLine": 1002,
  "numCommitsSeen": 313,
  "timeTaken": 8856,
  "changeHistory": [
    "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc",
    "6e31a090842f8aeedb331b653b075499f8df6c60",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
    "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea",
    "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a",
    "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
    "6ff6663f64476eab5612ae9eb409104f44c6e6c7",
    "03f7ed382b2c06f075811b29096d5bf79f26a5e5",
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
    "b46fbd0275bfc7ec16a219c72cff555d912170d7",
    "481b6cccf0493cb3f740b119552bede0f7268121",
    "bf1649d5fd095ce027f013be57d216212fa14198",
    "eeec4dc72abf4c540146a81c5419828520b80fa4"
  ],
  "changeHistoryShort": {
    "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc": "Ybodychange",
    "6e31a090842f8aeedb331b653b075499f8df6c60": "Ymodifierchange",
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": "Ybodychange",
    "2ee0d64aceed876f57f09eb9efe1872b6de98d2e": "Ybodychange",
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": "Ybodychange",
    "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a": "Ybodychange",
    "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6": "Ymultichange(Yparameterchange,Ybodychange)",
    "6ff6663f64476eab5612ae9eb409104f44c6e6c7": "Ybodychange",
    "03f7ed382b2c06f075811b29096d5bf79f26a5e5": "Ymultichange(Yparameterchange,Ybodychange)",
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a": "Ymultichange(Yparameterchange,Ybodychange)",
    "b46fbd0275bfc7ec16a219c72cff555d912170d7": "Ybodychange",
    "481b6cccf0493cb3f740b119552bede0f7268121": "Ymultichange(Yparameterchange,Ybodychange)",
    "bf1649d5fd095ce027f013be57d216212fa14198": "Ybodychange",
    "eeec4dc72abf4c540146a81c5419828520b80fa4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14124. EC : Support EC Commands (set/get/unset EcPolicy) via WebHdfs. Contributed by Ayush Saxena.\n",
      "commitDate": "11/12/18 4:29 AM",
      "commitName": "39dc7345b80e27ba8bd1ff4c19ca241aef5ac0fc",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "21/11/18 10:43 AM",
      "commitNameOld": "892b33e054efdcfb6127f20b7468fb08b0e2b8aa",
      "commitAuthorOld": "Brahma Reddy Battula",
      "daysBetweenCommits": 19.74,
      "commitsBetweenForRepo": 109,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,56 @@\n   protected Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final NewLengthParam newLength,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case CONCAT:\n     {\n       validateOpParams(op, concatSrcs);\n       cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n       validateOpParams(op, newLength);\n       // We treat each rest request as a separate client.\n       final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case UNSETSTORAGEPOLICY: {\n       cp.unsetStoragePolicy(fullpath);\n       return Response.ok().build();\n     }\n+    case UNSETECPOLICY:\n+      cp.unsetErasureCodingPolicy(fullpath);\n+      return Response.ok().build();\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      validateOpParams(op, concatSrcs);\n      cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      validateOpParams(op, newLength);\n      // We treat each rest request as a separate client.\n      final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case UNSETSTORAGEPOLICY: {\n      cp.unsetStoragePolicy(fullpath);\n      return Response.ok().build();\n    }\n    case UNSETECPOLICY:\n      cp.unsetErasureCodingPolicy(fullpath);\n      return Response.ok().build();\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "6e31a090842f8aeedb331b653b075499f8df6c60": {
      "type": "Ymodifierchange",
      "commitMessage": "HDFS-12512. RBF: Add WebHDFS.\n",
      "commitDate": "23/03/18 8:32 AM",
      "commitName": "6e31a090842f8aeedb331b653b075499f8df6c60",
      "commitAuthor": "weiy",
      "commitDateOld": "12/03/18 8:41 PM",
      "commitNameOld": "0355ec20ebeb988679c7192c7024bef7a2a3bced",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 10.49,
      "commitsBetweenForRepo": 212,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n-  private Response post(\n+  protected Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final NewLengthParam newLength,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case CONCAT:\n     {\n       validateOpParams(op, concatSrcs);\n       cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n       validateOpParams(op, newLength);\n       // We treat each rest request as a separate client.\n       final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case UNSETSTORAGEPOLICY: {\n       cp.unsetStoragePolicy(fullpath);\n       return Response.ok().build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  protected Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      validateOpParams(op, concatSrcs);\n      cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      validateOpParams(op, newLength);\n      // We treat each rest request as a separate client.\n      final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case UNSETSTORAGEPOLICY: {\n      cp.unsetStoragePolicy(fullpath);\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[protected]"
      }
    },
    "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12574. Add CryptoInputStream to WebHdfsFileSystem read call. Contributed by Rushabh S Shah\n",
      "commitDate": "29/01/18 3:23 PM",
      "commitName": "fde95d463c3123b315b3d07cb5b7b7dc19f7cb73",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "08/01/18 2:25 PM",
      "commitNameOld": "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
      "commitAuthorOld": "Wei Yan",
      "daysBetweenCommits": 21.04,
      "commitsBetweenForRepo": 117,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final NewLengthParam newLength,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n     final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n-      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n+      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case CONCAT:\n     {\n       validateOpParams(op, concatSrcs);\n       cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n       validateOpParams(op, newLength);\n       // We treat each rest request as a separate client.\n       final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case UNSETSTORAGEPOLICY: {\n       cp.unsetStoragePolicy(fullpath);\n       return Response.ok().build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(null, namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      validateOpParams(op, concatSrcs);\n      cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      validateOpParams(op, newLength);\n      // We treat each rest request as a separate client.\n      final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case UNSETSTORAGEPOLICY: {\n      cp.unsetStoragePolicy(fullpath);\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "2ee0d64aceed876f57f09eb9efe1872b6de98d2e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12945. Switch to ClientProtocol instead of NamenodeProtocols in NamenodeWebHdfsMethods. Contributed by Wei Yan.\n",
      "commitDate": "08/01/18 2:25 PM",
      "commitName": "2ee0d64aceed876f57f09eb9efe1872b6de98d2e",
      "commitAuthor": "Wei Yan",
      "commitDateOld": "26/09/17 1:15 PM",
      "commitNameOld": "0da29cbeea40cb7839abcd72566b997962829329",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 104.09,
      "commitsBetweenForRepo": 716,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,53 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final NewLengthParam newLength,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n-    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n-    final NamenodeProtocols np \u003d getRPCServer(namenode);\n+    final ClientProtocol cp \u003d getRpcClientProtocol();\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n+      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case CONCAT:\n     {\n       validateOpParams(op, concatSrcs);\n-      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n+      cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n       validateOpParams(op, newLength);\n       // We treat each rest request as a separate client.\n-      final boolean b \u003d np.truncate(fullpath, newLength.getValue(),\n+      final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     case UNSETSTORAGEPOLICY: {\n-      np.unsetStoragePolicy(fullpath);\n+      cp.unsetStoragePolicy(fullpath);\n       return Response.ok().build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final ClientProtocol cp \u003d getRpcClientProtocol();\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      validateOpParams(op, concatSrcs);\n      cp.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      validateOpParams(op, newLength);\n      // We treat each rest request as a separate client.\n      final boolean b \u003d cp.truncate(fullpath, newLength.getValue(),\n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case UNSETSTORAGEPOLICY: {\n      cp.unsetStoragePolicy(fullpath);\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "ea2895f4ed5031809d856faa52e9de5b9501bdea": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-8630. WebHDFS : Support get/set/unset StoragePolicy. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "07/12/16 3:52 PM",
      "commitName": "ea2895f4ed5031809d856faa52e9de5b9501bdea",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "05/12/16 11:09 PM",
      "commitNameOld": "08a7253bc0eb6c9155457feecb9c5cdc17c3a814",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 1.7,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,53 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final NewLengthParam newLength,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case CONCAT:\n     {\n       validateOpParams(op, concatSrcs);\n       np.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n       validateOpParams(op, newLength);\n       // We treat each rest request as a separate client.\n       final boolean b \u003d np.truncate(fullpath, newLength.getValue(),\n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n+    case UNSETSTORAGEPOLICY: {\n+      np.unsetStoragePolicy(fullpath);\n+      return Response.ok().build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      validateOpParams(op, concatSrcs);\n      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      validateOpParams(op, newLength);\n      // We treat each rest request as a separate client.\n      final boolean b \u003d np.truncate(fullpath, newLength.getValue(),\n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    case UNSETSTORAGEPOLICY: {\n      np.unsetStoragePolicy(fullpath);\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9337. Validate required params for WebHDFS requests (Contributed by Jagadesh Kiran N)\n",
      "commitDate": "10/11/16 3:21 AM",
      "commitName": "ca68f9cb5bc78e996c0daf8024cf0e7a4faef12a",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "04/11/16 6:06 PM",
      "commitNameOld": "d8bab3dcb693b2773ede9a6e4f71ae85ee056f79",
      "commitAuthorOld": "Xiao Chen",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,49 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final NewLengthParam newLength,\n       final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       if(!noredirectParam.getValue()) {\n         return Response.temporaryRedirect(uri)\n           .type(MediaType.APPLICATION_OCTET_STREAM).build();\n       } else {\n         final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n         return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n       }\n     }\n     case CONCAT:\n     {\n+      validateOpParams(op, concatSrcs);\n       np.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n-      if (newLength.getValue() \u003d\u003d null) {\n-        throw new IllegalArgumentException(\n-            \"newLength parameter is Missing\");\n-      }\n+      validateOpParams(op, newLength);\n       // We treat each rest request as a separate client.\n       final boolean b \u003d np.truncate(fullpath, newLength.getValue(),\n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      validateOpParams(op, concatSrcs);\n      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      validateOpParams(op, newLength);\n      // We treat each rest request as a separate client.\n      final boolean b \u003d np.truncate(fullpath, newLength.getValue(),\n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7766. Add a flag to WebHDFS op\u003dCREATE to not respond with a 307 redirect (Ravi Prakash via aw)\n",
      "commitDate": "23/05/16 3:52 PM",
      "commitName": "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
      "commitAuthor": "Allen Wittenauer",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7766. Add a flag to WebHDFS op\u003dCREATE to not respond with a 307 redirect (Ravi Prakash via aw)\n",
          "commitDate": "23/05/16 3:52 PM",
          "commitName": "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "04/05/16 5:02 PM",
          "commitNameOld": "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 18.95,
          "commitsBetweenForRepo": 134,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,51 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n-      final NewLengthParam newLength\n+      final NewLengthParam newLength,\n+      final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n+      if(!noredirectParam.getValue()) {\n+        return Response.temporaryRedirect(uri)\n+          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n+      } else {\n+        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+      }\n     }\n     case CONCAT:\n     {\n       np.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n       if (newLength.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\n             \"newLength parameter is Missing\");\n       }\n       // We treat each rest request as a separate client.\n       final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      if (newLength.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\n            \"newLength parameter is Missing\");\n      }\n      // We treat each rest request as a separate client.\n      final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), concatSrcs-ConcatSourcesParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), excludeDatanodes-ExcludeDatanodesParam(modifiers-final), newLength-NewLengthParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), concatSrcs-ConcatSourcesParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), excludeDatanodes-ExcludeDatanodesParam(modifiers-final), newLength-NewLengthParam(modifiers-final), noredirectParam-NoRedirectParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7766. Add a flag to WebHDFS op\u003dCREATE to not respond with a 307 redirect (Ravi Prakash via aw)\n",
          "commitDate": "23/05/16 3:52 PM",
          "commitName": "4b0f55b6ea1665e2118fd573f72a6fcd1fce20d6",
          "commitAuthor": "Allen Wittenauer",
          "commitDateOld": "04/05/16 5:02 PM",
          "commitNameOld": "1268cf5fbe4458fa75ad0662512d352f9e8d3470",
          "commitAuthorOld": "Ming Ma",
          "daysBetweenCommits": 18.95,
          "commitsBetweenForRepo": 134,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,44 +1,51 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n-      final NewLengthParam newLength\n+      final NewLengthParam newLength,\n+      final NoRedirectParam noredirectParam\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n-      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n+      if(!noredirectParam.getValue()) {\n+        return Response.temporaryRedirect(uri)\n+          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n+      } else {\n+        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n+        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+      }\n     }\n     case CONCAT:\n     {\n       np.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n       if (newLength.getValue() \u003d\u003d null) {\n         throw new IllegalArgumentException(\n             \"newLength parameter is Missing\");\n       }\n       // We treat each rest request as a separate client.\n       final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength,\n      final NoRedirectParam noredirectParam\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      if(!noredirectParam.getValue()) {\n        return Response.temporaryRedirect(uri)\n          .type(MediaType.APPLICATION_OCTET_STREAM).build();\n      } else {\n        final String js \u003d JsonUtil.toJsonString(\"Location\", uri);\n        return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n      }\n    }\n    case CONCAT:\n    {\n      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      if (newLength.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\n            \"newLength parameter is Missing\");\n      }\n      // We treat each rest request as a separate client.\n      final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "6ff6663f64476eab5612ae9eb409104f44c6e6c7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9302. WebHDFS throws NullPointerException if newLength is not provided. (Jagadesh Kiran N via yliu)\n",
      "commitDate": "28/10/15 12:54 AM",
      "commitName": "6ff6663f64476eab5612ae9eb409104f44c6e6c7",
      "commitAuthor": "yliu",
      "commitDateOld": "18/08/15 5:32 PM",
      "commitNameOld": "30e342a5d32be5efffeb472cce76d4ed43642608",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 70.31,
      "commitsBetweenForRepo": 520,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,44 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n       final ExcludeDatanodesParam excludeDatanodes,\n       final NewLengthParam newLength\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n     final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CONCAT:\n     {\n       np.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     case TRUNCATE:\n     {\n+      if (newLength.getValue() \u003d\u003d null) {\n+        throw new IllegalArgumentException(\n+            \"newLength parameter is Missing\");\n+      }\n       // We treat each rest request as a separate client.\n       final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n           \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n       final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n       return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      if (newLength.getValue() \u003d\u003d null) {\n        throw new IllegalArgumentException(\n            \"newLength parameter is Missing\");\n      }\n      // We treat each rest request as a separate client.\n      final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "03f7ed382b2c06f075811b29096d5bf79f26a5e5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7655. Expose truncate API for Web HDFS. (yliu)\n",
      "commitDate": "05/02/15 7:45 AM",
      "commitName": "03f7ed382b2c06f075811b29096d5bf79f26a5e5",
      "commitAuthor": "yliu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7655. Expose truncate API for Web HDFS. (yliu)\n",
          "commitDate": "05/02/15 7:45 AM",
          "commitName": "03f7ed382b2c06f075811b29096d5bf79f26a5e5",
          "commitAuthor": "yliu",
          "commitDateOld": "24/10/14 11:35 AM",
          "commitNameOld": "e2be3337448ec0f6772a2ba463da376e7089b1fa",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 103.88,
          "commitsBetweenForRepo": 766,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,40 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n-      final ExcludeDatanodesParam excludeDatanodes\n+      final ExcludeDatanodesParam excludeDatanodes,\n+      final NewLengthParam newLength\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n+    final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CONCAT:\n     {\n-      getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n+      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n+    case TRUNCATE:\n+    {\n+      // We treat each rest request as a separate client.\n+      final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n+          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n+      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n+      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      // We treat each rest request as a separate client.\n      final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), concatSrcs-ConcatSourcesParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), excludeDatanodes-ExcludeDatanodesParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), concatSrcs-ConcatSourcesParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), excludeDatanodes-ExcludeDatanodesParam(modifiers-final), newLength-NewLengthParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7655. Expose truncate API for Web HDFS. (yliu)\n",
          "commitDate": "05/02/15 7:45 AM",
          "commitName": "03f7ed382b2c06f075811b29096d5bf79f26a5e5",
          "commitAuthor": "yliu",
          "commitDateOld": "24/10/14 11:35 AM",
          "commitNameOld": "e2be3337448ec0f6772a2ba463da376e7089b1fa",
          "commitAuthorOld": "Jitendra Pandey",
          "daysBetweenCommits": 103.88,
          "commitsBetweenForRepo": 766,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,40 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize,\n-      final ExcludeDatanodesParam excludeDatanodes\n+      final ExcludeDatanodesParam excludeDatanodes,\n+      final NewLengthParam newLength\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n+    final NamenodeProtocols np \u003d getRPCServer(namenode);\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n           doAsUser, fullpath, op.getValue(), -1L, -1L,\n           excludeDatanodes.getValue(), bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CONCAT:\n     {\n-      getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n+      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n+    case TRUNCATE:\n+    {\n+      // We treat each rest request as a separate client.\n+      final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n+          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n+      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n+      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes,\n      final NewLengthParam newLength\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n    final NamenodeProtocols np \u003d getRPCServer(namenode);\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      np.concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    case TRUNCATE:\n    {\n      // We treat each rest request as a separate client.\n      final boolean b \u003d np.truncate(fullpath, newLength.getValue(), \n          \"DFSClient_\" + DFSUtil.getSecureRandom().nextLong());\n      final String js \u003d JsonUtil.toJsonString(\"boolean\", b);\n      return Response.ok(js).type(MediaType.APPLICATION_JSON).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "7c18f8d55b899dc4a6e118d3b54447a9b36b960a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/07/14 11:20 AM",
      "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 11:20 AM",
          "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "05/06/14 8:48 PM",
          "commitNameOld": "6a4f6d6b3e41e660c214b77c9ed43d4c65200b6a",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 42.61,
          "commitsBetweenForRepo": 298,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n-      final BufferSizeParam bufferSize\n+      final BufferSizeParam bufferSize,\n+      final ExcludeDatanodesParam excludeDatanodes\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n-      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n-          fullpath, op.getValue(), -1L, -1L, bufferSize);\n+      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n+          doAsUser, fullpath, op.getValue(), -1L, -1L,\n+          excludeDatanodes.getValue(), bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CONCAT:\n     {\n       getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), concatSrcs-ConcatSourcesParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), concatSrcs-ConcatSourcesParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final), excludeDatanodes-ExcludeDatanodesParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-6616. Add exclude-datanodes feature to WebHDFS redirection so that it will not redirect retries to the same datanode. Contributed by zhaoyunjiong\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1611750 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/07/14 11:20 AM",
          "commitName": "7c18f8d55b899dc4a6e118d3b54447a9b36b960a",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "05/06/14 8:48 PM",
          "commitNameOld": "6a4f6d6b3e41e660c214b77c9ed43d4c65200b6a",
          "commitAuthorOld": "Uma Maheswara Rao G",
          "daysBetweenCommits": 42.61,
          "commitsBetweenForRepo": 298,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,28 +1,30 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n-      final BufferSizeParam bufferSize\n+      final BufferSizeParam bufferSize,\n+      final ExcludeDatanodesParam excludeDatanodes\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n-      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n-          fullpath, op.getValue(), -1L, -1L, bufferSize);\n+      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n+          doAsUser, fullpath, op.getValue(), -1L, -1L,\n+          excludeDatanodes.getValue(), bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CONCAT:\n     {\n       getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize,\n      final ExcludeDatanodesParam excludeDatanodes\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username,\n          doAsUser, fullpath, op.getValue(), -1L, -1L,\n          excludeDatanodes.getValue(), bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "b46fbd0275bfc7ec16a219c72cff555d912170d7": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5857. TestWebHDFS#testNamenodeRestart fails intermittently with NPE. Contributed By Mit Desai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1574683 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/03/14 1:51 PM",
      "commitName": "b46fbd0275bfc7ec16a219c72cff555d912170d7",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "25/02/14 10:36 AM",
      "commitNameOld": "df6e1ab4916e41810f092474a1f3abd9845d9956",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 8.14,
      "commitsBetweenForRepo": 84,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, -1L, bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     case CONCAT:\n     {\n-      namenode.getRpcServer().concat(fullpath, concatSrcs.getAbsolutePaths());\n+      getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n       return Response.ok().build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, -1L, bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      getRPCServer(namenode).concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "481b6cccf0493cb3f740b119552bede0f7268121": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-3598. WebHDFS support for file concat. Contributed by Plamen Jeliazkov.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440290 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/01/13 10:51 PM",
      "commitName": "481b6cccf0493cb3f740b119552bede0f7268121",
      "commitAuthor": "Konstantin Shvachko",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3598. WebHDFS support for file concat. Contributed by Plamen Jeliazkov.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440290 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/01/13 10:51 PM",
          "commitName": "481b6cccf0493cb3f740b119552bede0f7268121",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "09/01/13 6:30 PM",
          "commitNameOld": "6449f524552f8c24d20b314ad21f6c579fa08e85",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 20.18,
          "commitsBetweenForRepo": 105,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,28 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n+      final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, -1L, bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case CONCAT:\n+    {\n+      namenode.getRpcServer().concat(fullpath, concatSrcs.getAbsolutePaths());\n+      return Response.ok().build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, -1L, bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      namenode.getRpcServer().concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {
            "oldValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final)]",
            "newValue": "[ugi-UserGroupInformation(modifiers-final), delegation-DelegationParam(modifiers-final), username-UserParam(modifiers-final), doAsUser-DoAsParam(modifiers-final), fullpath-String(modifiers-final), op-PostOpParam(modifiers-final), concatSrcs-ConcatSourcesParam(modifiers-final), bufferSize-BufferSizeParam(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3598. WebHDFS support for file concat. Contributed by Plamen Jeliazkov.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1440290 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "29/01/13 10:51 PM",
          "commitName": "481b6cccf0493cb3f740b119552bede0f7268121",
          "commitAuthor": "Konstantin Shvachko",
          "commitDateOld": "09/01/13 6:30 PM",
          "commitNameOld": "6449f524552f8c24d20b314ad21f6c579fa08e85",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 20.18,
          "commitsBetweenForRepo": 105,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,22 +1,28 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n+      final ConcatSourcesParam concatSrcs,\n       final BufferSizeParam bufferSize\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n           fullpath, op.getValue(), -1L, -1L, bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n+    case CONCAT:\n+    {\n+      namenode.getRpcServer().concat(fullpath, concatSrcs.getAbsolutePaths());\n+      return Response.ok().build();\n+    }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final ConcatSourcesParam concatSrcs,\n      final BufferSizeParam bufferSize\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, -1L, bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    case CONCAT:\n    {\n      namenode.getRpcServer().concat(fullpath, concatSrcs.getAbsolutePaths());\n      return Response.ok().build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
          "extendedDetails": {}
        }
      ]
    },
    "bf1649d5fd095ce027f013be57d216212fa14198": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3551. WebHDFS CREATE should use client location for HTTP redirection.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1354316 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/06/12 7:51 PM",
      "commitName": "bf1649d5fd095ce027f013be57d216212fa14198",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "08/06/12 5:54 PM",
      "commitNameOld": "5991ed9cbd18520040159508ef8bd02b7b3bf5e5",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 18.08,
      "commitsBetweenForRepo": 65,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,22 @@\n   private Response post(\n       final UserGroupInformation ugi,\n       final DelegationParam delegation,\n       final UserParam username,\n       final DoAsParam doAsUser,\n       final String fullpath,\n       final PostOpParam op,\n       final BufferSizeParam bufferSize\n       ) throws IOException, URISyntaxException {\n     final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n \n     switch(op.getValue()) {\n     case APPEND:\n     {\n       final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n-          fullpath, op.getValue(), -1L, bufferSize);\n+          fullpath, op.getValue(), -1L, -1L, bufferSize);\n       return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n     }\n     default:\n       throw new UnsupportedOperationException(op + \" is not supported\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final BufferSizeParam bufferSize\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, -1L, bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java",
      "extendedDetails": {}
    },
    "eeec4dc72abf4c540146a81c5419828520b80fa4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-3294. Fix code indentation in NamenodeWebHdfsMethods and DatanodeWebHdfsMethods.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1327365 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/04/12 8:25 PM",
      "commitName": "eeec4dc72abf4c540146a81c5419828520b80fa4",
      "commitAuthor": "Tsz-wo Sze",
      "diff": "@@ -0,0 +1,22 @@\n+  private Response post(\n+      final UserGroupInformation ugi,\n+      final DelegationParam delegation,\n+      final UserParam username,\n+      final DoAsParam doAsUser,\n+      final String fullpath,\n+      final PostOpParam op,\n+      final BufferSizeParam bufferSize\n+      ) throws IOException, URISyntaxException {\n+    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n+\n+    switch(op.getValue()) {\n+    case APPEND:\n+    {\n+      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n+          fullpath, op.getValue(), -1L, bufferSize);\n+      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n+    }\n+    default:\n+      throw new UnsupportedOperationException(op + \" is not supported\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private Response post(\n      final UserGroupInformation ugi,\n      final DelegationParam delegation,\n      final UserParam username,\n      final DoAsParam doAsUser,\n      final String fullpath,\n      final PostOpParam op,\n      final BufferSizeParam bufferSize\n      ) throws IOException, URISyntaxException {\n    final NameNode namenode \u003d (NameNode)context.getAttribute(\"name.node\");\n\n    switch(op.getValue()) {\n    case APPEND:\n    {\n      final URI uri \u003d redirectURI(namenode, ugi, delegation, username, doAsUser,\n          fullpath, op.getValue(), -1L, bufferSize);\n      return Response.temporaryRedirect(uri).type(MediaType.APPLICATION_OCTET_STREAM).build();\n    }\n    default:\n      throw new UnsupportedOperationException(op + \" is not supported\");\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/web/resources/NamenodeWebHdfsMethods.java"
    }
  }
}