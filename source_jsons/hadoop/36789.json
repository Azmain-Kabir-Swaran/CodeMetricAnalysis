{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMWebServices.java",
  "functionName": "getActivities",
  "functionId": "getActivities___hsr-HttpServletRequest(annotations-@Context)__nodeId-String(annotations-@QueryParam(RMWSConsts.NODEID))__groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
  "functionStartLine": 697,
  "functionEndLine": 771,
  "numCommitsSeen": 258,
  "timeTaken": 5979,
  "changeHistory": [
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188"
  ],
  "changeHistoryShort": {
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": "Ymultichange(Yparameterchange,Ybodychange)",
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": "Ybodychange",
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": "Yparametermetachange",
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": "Yintroduced"
  },
  "changeHistoryDetails": {
    "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
      "commitDate": "26/05/19 6:56 AM",
      "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
      "commitAuthor": "Weiwei Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "26/05/19 6:56 AM",
          "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "09/05/19 6:54 AM",
          "commitNameOld": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 17.0,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,75 @@\n   public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n-      @QueryParam(RMWSConsts.NODEID) String nodeId) {\n+      @QueryParam(RMWSConsts.NODEID) String nodeId,\n+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       String errMessage \u003d \"\";\n \n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         errMessage \u003d \"Not Capacity Scheduler\";\n         return new ActivitiesInfo(errMessage, nodeId);\n       }\n \n+      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n+      try {\n+        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n+      } catch (IllegalArgumentException e) {\n+        return new ActivitiesInfo(e.getMessage(), nodeId);\n+      }\n+\n       List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n           abstractYarnScheduler.getNodeTracker().getAllNodes();\n \n       boolean illegalInput \u003d false;\n \n       if (nodeList.size() \u003d\u003d 0) {\n         illegalInput \u003d true;\n         errMessage \u003d \"No node manager running in the cluster\";\n       } else {\n         if (nodeId !\u003d null) {\n           String hostName \u003d nodeId;\n           String portName \u003d \"\";\n           if (nodeId.contains(\":\")) {\n             int index \u003d nodeId.indexOf(\":\");\n             hostName \u003d nodeId.substring(0, index);\n             portName \u003d nodeId.substring(index + 1);\n           }\n \n           boolean correctNodeId \u003d false;\n           for (FiCaSchedulerNode node : nodeList) {\n             if ((portName.equals(\"\")\n                 \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n                 || (!portName.equals(\"\")\n                     \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n                     \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n                         .equals(portName))) {\n               correctNodeId \u003d true;\n               nodeId \u003d node.getNodeID().toString();\n               break;\n             }\n           }\n           if (!correctNodeId) {\n             illegalInput \u003d true;\n             errMessage \u003d \"Cannot find node manager with given node id\";\n           }\n         }\n       }\n \n       if (!illegalInput) {\n         activitiesManager.recordNextNodeUpdateActivities(nodeId);\n-        return activitiesManager.getActivitiesInfo(nodeId);\n+        return activitiesManager.getActivitiesInfo(nodeId, activitiesGroupBy);\n       }\n \n       // Return a activities info with error message\n       return new ActivitiesInfo(errMessage, nodeId);\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.NODEID) String nodeId,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      String errMessage \u003d \"\";\n\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        errMessage \u003d \"Not Capacity Scheduler\";\n        return new ActivitiesInfo(errMessage, nodeId);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new ActivitiesInfo(e.getMessage(), nodeId);\n      }\n\n      List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n          abstractYarnScheduler.getNodeTracker().getAllNodes();\n\n      boolean illegalInput \u003d false;\n\n      if (nodeList.size() \u003d\u003d 0) {\n        illegalInput \u003d true;\n        errMessage \u003d \"No node manager running in the cluster\";\n      } else {\n        if (nodeId !\u003d null) {\n          String hostName \u003d nodeId;\n          String portName \u003d \"\";\n          if (nodeId.contains(\":\")) {\n            int index \u003d nodeId.indexOf(\":\");\n            hostName \u003d nodeId.substring(0, index);\n            portName \u003d nodeId.substring(index + 1);\n          }\n\n          boolean correctNodeId \u003d false;\n          for (FiCaSchedulerNode node : nodeList) {\n            if ((portName.equals(\"\")\n                \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n                || (!portName.equals(\"\")\n                    \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n                    \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n                        .equals(portName))) {\n              correctNodeId \u003d true;\n              nodeId \u003d node.getNodeID().toString();\n              break;\n            }\n          }\n          if (!correctNodeId) {\n            illegalInput \u003d true;\n            errMessage \u003d \"Cannot find node manager with given node id\";\n          }\n        }\n      }\n\n      if (!illegalInput) {\n        activitiesManager.recordNextNodeUpdateActivities(nodeId);\n        return activitiesManager.getActivitiesInfo(nodeId, activitiesGroupBy);\n      }\n\n      // Return a activities info with error message\n      return new ActivitiesInfo(errMessage, nodeId);\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {
            "oldValue": "[hsr-HttpServletRequest(annotations-@Context), nodeId-String(annotations-@QueryParam(RMWSConsts.NODEID))]",
            "newValue": "[hsr-HttpServletRequest(annotations-@Context), nodeId-String(annotations-@QueryParam(RMWSConsts.NODEID)), groupBy-String(annotations-@QueryParam(RMWSConsts.GROUP_BY))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-9497. Support grouping by diagnostics for query results of scheduler and app activities. Contributed by Tao Yang.\n",
          "commitDate": "26/05/19 6:56 AM",
          "commitName": "9f056d905f3d21faf0dc9bd42e14ea61313ee9e8",
          "commitAuthor": "Weiwei Yang",
          "commitDateOld": "09/05/19 6:54 AM",
          "commitNameOld": "90add05caa6c48659f0c592ec391b30f2a76069e",
          "commitAuthorOld": "Weiwei Yang",
          "daysBetweenCommits": 17.0,
          "commitsBetweenForRepo": 82,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,67 +1,75 @@\n   public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n-      @QueryParam(RMWSConsts.NODEID) String nodeId) {\n+      @QueryParam(RMWSConsts.NODEID) String nodeId,\n+      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n     initForReadableEndpoints();\n \n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       String errMessage \u003d \"\";\n \n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         errMessage \u003d \"Not Capacity Scheduler\";\n         return new ActivitiesInfo(errMessage, nodeId);\n       }\n \n+      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n+      try {\n+        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n+      } catch (IllegalArgumentException e) {\n+        return new ActivitiesInfo(e.getMessage(), nodeId);\n+      }\n+\n       List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n           abstractYarnScheduler.getNodeTracker().getAllNodes();\n \n       boolean illegalInput \u003d false;\n \n       if (nodeList.size() \u003d\u003d 0) {\n         illegalInput \u003d true;\n         errMessage \u003d \"No node manager running in the cluster\";\n       } else {\n         if (nodeId !\u003d null) {\n           String hostName \u003d nodeId;\n           String portName \u003d \"\";\n           if (nodeId.contains(\":\")) {\n             int index \u003d nodeId.indexOf(\":\");\n             hostName \u003d nodeId.substring(0, index);\n             portName \u003d nodeId.substring(index + 1);\n           }\n \n           boolean correctNodeId \u003d false;\n           for (FiCaSchedulerNode node : nodeList) {\n             if ((portName.equals(\"\")\n                 \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n                 || (!portName.equals(\"\")\n                     \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n                     \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n                         .equals(portName))) {\n               correctNodeId \u003d true;\n               nodeId \u003d node.getNodeID().toString();\n               break;\n             }\n           }\n           if (!correctNodeId) {\n             illegalInput \u003d true;\n             errMessage \u003d \"Cannot find node manager with given node id\";\n           }\n         }\n       }\n \n       if (!illegalInput) {\n         activitiesManager.recordNextNodeUpdateActivities(nodeId);\n-        return activitiesManager.getActivitiesInfo(nodeId);\n+        return activitiesManager.getActivitiesInfo(nodeId, activitiesGroupBy);\n       }\n \n       // Return a activities info with error message\n       return new ActivitiesInfo(errMessage, nodeId);\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.NODEID) String nodeId,\n      @QueryParam(RMWSConsts.GROUP_BY) String groupBy) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      String errMessage \u003d \"\";\n\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        errMessage \u003d \"Not Capacity Scheduler\";\n        return new ActivitiesInfo(errMessage, nodeId);\n      }\n\n      RMWSConsts.ActivitiesGroupBy activitiesGroupBy;\n      try {\n        activitiesGroupBy \u003d parseActivitiesGroupBy(groupBy);\n      } catch (IllegalArgumentException e) {\n        return new ActivitiesInfo(e.getMessage(), nodeId);\n      }\n\n      List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n          abstractYarnScheduler.getNodeTracker().getAllNodes();\n\n      boolean illegalInput \u003d false;\n\n      if (nodeList.size() \u003d\u003d 0) {\n        illegalInput \u003d true;\n        errMessage \u003d \"No node manager running in the cluster\";\n      } else {\n        if (nodeId !\u003d null) {\n          String hostName \u003d nodeId;\n          String portName \u003d \"\";\n          if (nodeId.contains(\":\")) {\n            int index \u003d nodeId.indexOf(\":\");\n            hostName \u003d nodeId.substring(0, index);\n            portName \u003d nodeId.substring(index + 1);\n          }\n\n          boolean correctNodeId \u003d false;\n          for (FiCaSchedulerNode node : nodeList) {\n            if ((portName.equals(\"\")\n                \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n                || (!portName.equals(\"\")\n                    \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n                    \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n                        .equals(portName))) {\n              correctNodeId \u003d true;\n              nodeId \u003d node.getNodeID().toString();\n              break;\n            }\n          }\n          if (!correctNodeId) {\n            illegalInput \u003d true;\n            errMessage \u003d \"Cannot find node manager with given node id\";\n          }\n        }\n      }\n\n      if (!illegalInput) {\n        activitiesManager.recordNextNodeUpdateActivities(nodeId);\n        return activitiesManager.getActivitiesInfo(nodeId, activitiesGroupBy);\n      }\n\n      // Return a activities info with error message\n      return new ActivitiesInfo(errMessage, nodeId);\n    }\n\n    return null;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8249. Fixed few REST APIs in RMWebServices to have static-user check. Contributed by Sunil Govindan.\n",
      "commitDate": "10/05/18 7:05 PM",
      "commitName": "d76fbbc9b82e720d7d5188f9ae2f56a8d78f3a98",
      "commitAuthor": "Vinod Kumar Vavilapalli (I am also known as @tshooter.)",
      "commitDateOld": "27/04/18 10:28 AM",
      "commitNameOld": "ef3ecc308dbea41c6a88bd4d16739c7bbc10cdda",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 13.36,
      "commitsBetweenForRepo": 87,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,66 +1,67 @@\n   public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n       @QueryParam(RMWSConsts.NODEID) String nodeId) {\n-    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n+    initForReadableEndpoints();\n \n+    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n     if (scheduler instanceof AbstractYarnScheduler) {\n       String errMessage \u003d \"\";\n \n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         errMessage \u003d \"Not Capacity Scheduler\";\n         return new ActivitiesInfo(errMessage, nodeId);\n       }\n \n       List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n           abstractYarnScheduler.getNodeTracker().getAllNodes();\n \n       boolean illegalInput \u003d false;\n \n       if (nodeList.size() \u003d\u003d 0) {\n         illegalInput \u003d true;\n         errMessage \u003d \"No node manager running in the cluster\";\n       } else {\n         if (nodeId !\u003d null) {\n           String hostName \u003d nodeId;\n           String portName \u003d \"\";\n           if (nodeId.contains(\":\")) {\n             int index \u003d nodeId.indexOf(\":\");\n             hostName \u003d nodeId.substring(0, index);\n             portName \u003d nodeId.substring(index + 1);\n           }\n \n           boolean correctNodeId \u003d false;\n           for (FiCaSchedulerNode node : nodeList) {\n             if ((portName.equals(\"\")\n                 \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n                 || (!portName.equals(\"\")\n                     \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n                     \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n                         .equals(portName))) {\n               correctNodeId \u003d true;\n               nodeId \u003d node.getNodeID().toString();\n               break;\n             }\n           }\n           if (!correctNodeId) {\n             illegalInput \u003d true;\n             errMessage \u003d \"Cannot find node manager with given node id\";\n           }\n         }\n       }\n \n       if (!illegalInput) {\n         activitiesManager.recordNextNodeUpdateActivities(nodeId);\n         return activitiesManager.getActivitiesInfo(nodeId);\n       }\n \n       // Return a activities info with error message\n       return new ActivitiesInfo(errMessage, nodeId);\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.NODEID) String nodeId) {\n    initForReadableEndpoints();\n\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n    if (scheduler instanceof AbstractYarnScheduler) {\n      String errMessage \u003d \"\";\n\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        errMessage \u003d \"Not Capacity Scheduler\";\n        return new ActivitiesInfo(errMessage, nodeId);\n      }\n\n      List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n          abstractYarnScheduler.getNodeTracker().getAllNodes();\n\n      boolean illegalInput \u003d false;\n\n      if (nodeList.size() \u003d\u003d 0) {\n        illegalInput \u003d true;\n        errMessage \u003d \"No node manager running in the cluster\";\n      } else {\n        if (nodeId !\u003d null) {\n          String hostName \u003d nodeId;\n          String portName \u003d \"\";\n          if (nodeId.contains(\":\")) {\n            int index \u003d nodeId.indexOf(\":\");\n            hostName \u003d nodeId.substring(0, index);\n            portName \u003d nodeId.substring(index + 1);\n          }\n\n          boolean correctNodeId \u003d false;\n          for (FiCaSchedulerNode node : nodeList) {\n            if ((portName.equals(\"\")\n                \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n                || (!portName.equals(\"\")\n                    \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n                    \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n                        .equals(portName))) {\n              correctNodeId \u003d true;\n              nodeId \u003d node.getNodeID().toString();\n              break;\n            }\n          }\n          if (!correctNodeId) {\n            illegalInput \u003d true;\n            errMessage \u003d \"Cannot find node manager with given node id\";\n          }\n        }\n      }\n\n      if (!illegalInput) {\n        activitiesManager.recordNextNodeUpdateActivities(nodeId);\n        return activitiesManager.getActivitiesInfo(nodeId);\n      }\n\n      // Return a activities info with error message\n      return new ActivitiesInfo(errMessage, nodeId);\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {}
    },
    "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd": {
      "type": "Yparametermetachange",
      "commitMessage": "YARN-6634. [API] Refactor ResourceManager WebServices to make API explicit. (Giovanni Matteo Fumarola via curino)\n",
      "commitDate": "07/06/17 1:41 PM",
      "commitName": "547cb53e8ae2f19b55f9de7670b91b009d8f3bdd",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "08/12/16 2:23 AM",
      "commitNameOld": "74d0066d3392169bec872f438a0818e2f5323010",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 181.43,
      "commitsBetweenForRepo": 954,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,64 +1,66 @@\n   public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n-      @QueryParam(\"nodeId\") String nodeId) {\n+      @QueryParam(RMWSConsts.NODEID) String nodeId) {\n     YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n \n     if (scheduler instanceof AbstractYarnScheduler) {\n       String errMessage \u003d \"\";\n \n       AbstractYarnScheduler abstractYarnScheduler \u003d\n           (AbstractYarnScheduler) scheduler;\n \n       ActivitiesManager activitiesManager \u003d\n           abstractYarnScheduler.getActivitiesManager();\n       if (null \u003d\u003d activitiesManager) {\n         errMessage \u003d \"Not Capacity Scheduler\";\n         return new ActivitiesInfo(errMessage, nodeId);\n       }\n \n       List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n           abstractYarnScheduler.getNodeTracker().getAllNodes();\n \n       boolean illegalInput \u003d false;\n \n       if (nodeList.size() \u003d\u003d 0) {\n         illegalInput \u003d true;\n         errMessage \u003d \"No node manager running in the cluster\";\n       } else {\n         if (nodeId !\u003d null) {\n           String hostName \u003d nodeId;\n           String portName \u003d \"\";\n           if (nodeId.contains(\":\")) {\n             int index \u003d nodeId.indexOf(\":\");\n             hostName \u003d nodeId.substring(0, index);\n             portName \u003d nodeId.substring(index + 1);\n           }\n \n           boolean correctNodeId \u003d false;\n           for (FiCaSchedulerNode node : nodeList) {\n-            if ((portName.equals(\"\") \u0026\u0026 node.getRMNode().getHostName().equals(\n-                hostName)) || (!portName.equals(\"\") \u0026\u0026 node.getRMNode()\n-                .getHostName().equals(hostName) \u0026\u0026 String.valueOf(\n-                node.getRMNode().getCommandPort()).equals(portName))) {\n+            if ((portName.equals(\"\")\n+                \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n+                || (!portName.equals(\"\")\n+                    \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n+                    \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n+                        .equals(portName))) {\n               correctNodeId \u003d true;\n               nodeId \u003d node.getNodeID().toString();\n               break;\n             }\n           }\n           if (!correctNodeId) {\n             illegalInput \u003d true;\n             errMessage \u003d \"Cannot find node manager with given node id\";\n           }\n         }\n       }\n \n       if (!illegalInput) {\n         activitiesManager.recordNextNodeUpdateActivities(nodeId);\n         return activitiesManager.getActivitiesInfo(nodeId);\n       }\n \n       // Return a activities info with error message\n       return new ActivitiesInfo(errMessage, nodeId);\n     }\n \n     return null;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n      @QueryParam(RMWSConsts.NODEID) String nodeId) {\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n\n    if (scheduler instanceof AbstractYarnScheduler) {\n      String errMessage \u003d \"\";\n\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        errMessage \u003d \"Not Capacity Scheduler\";\n        return new ActivitiesInfo(errMessage, nodeId);\n      }\n\n      List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n          abstractYarnScheduler.getNodeTracker().getAllNodes();\n\n      boolean illegalInput \u003d false;\n\n      if (nodeList.size() \u003d\u003d 0) {\n        illegalInput \u003d true;\n        errMessage \u003d \"No node manager running in the cluster\";\n      } else {\n        if (nodeId !\u003d null) {\n          String hostName \u003d nodeId;\n          String portName \u003d \"\";\n          if (nodeId.contains(\":\")) {\n            int index \u003d nodeId.indexOf(\":\");\n            hostName \u003d nodeId.substring(0, index);\n            portName \u003d nodeId.substring(index + 1);\n          }\n\n          boolean correctNodeId \u003d false;\n          for (FiCaSchedulerNode node : nodeList) {\n            if ((portName.equals(\"\")\n                \u0026\u0026 node.getRMNode().getHostName().equals(hostName))\n                || (!portName.equals(\"\")\n                    \u0026\u0026 node.getRMNode().getHostName().equals(hostName)\n                    \u0026\u0026 String.valueOf(node.getRMNode().getCommandPort())\n                        .equals(portName))) {\n              correctNodeId \u003d true;\n              nodeId \u003d node.getNodeID().toString();\n              break;\n            }\n          }\n          if (!correctNodeId) {\n            illegalInput \u003d true;\n            errMessage \u003d \"Cannot find node manager with given node id\";\n          }\n        }\n      }\n\n      if (!illegalInput) {\n        activitiesManager.recordNextNodeUpdateActivities(nodeId);\n        return activitiesManager.getActivitiesInfo(nodeId);\n      }\n\n      // Return a activities info with error message\n      return new ActivitiesInfo(errMessage, nodeId);\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java",
      "extendedDetails": {
        "oldValue": "[hsr-HttpServletRequest(annotations-@Context), nodeId-String(annotations-@QueryParam(\"nodeId\"))]",
        "newValue": "[hsr-HttpServletRequest(annotations-@Context), nodeId-String(annotations-@QueryParam(RMWSConsts.NODEID))]"
      }
    },
    "e0d131f055ee126052ad4d0f7b0d192e6c730188": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4091. Add REST API to retrieve scheduler activity. (Chen Ge and Sunil G via wangda)\n",
      "commitDate": "05/08/16 10:27 AM",
      "commitName": "e0d131f055ee126052ad4d0f7b0d192e6c730188",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,64 @@\n+  public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n+      @QueryParam(\"nodeId\") String nodeId) {\n+    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n+\n+    if (scheduler instanceof AbstractYarnScheduler) {\n+      String errMessage \u003d \"\";\n+\n+      AbstractYarnScheduler abstractYarnScheduler \u003d\n+          (AbstractYarnScheduler) scheduler;\n+\n+      ActivitiesManager activitiesManager \u003d\n+          abstractYarnScheduler.getActivitiesManager();\n+      if (null \u003d\u003d activitiesManager) {\n+        errMessage \u003d \"Not Capacity Scheduler\";\n+        return new ActivitiesInfo(errMessage, nodeId);\n+      }\n+\n+      List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n+          abstractYarnScheduler.getNodeTracker().getAllNodes();\n+\n+      boolean illegalInput \u003d false;\n+\n+      if (nodeList.size() \u003d\u003d 0) {\n+        illegalInput \u003d true;\n+        errMessage \u003d \"No node manager running in the cluster\";\n+      } else {\n+        if (nodeId !\u003d null) {\n+          String hostName \u003d nodeId;\n+          String portName \u003d \"\";\n+          if (nodeId.contains(\":\")) {\n+            int index \u003d nodeId.indexOf(\":\");\n+            hostName \u003d nodeId.substring(0, index);\n+            portName \u003d nodeId.substring(index + 1);\n+          }\n+\n+          boolean correctNodeId \u003d false;\n+          for (FiCaSchedulerNode node : nodeList) {\n+            if ((portName.equals(\"\") \u0026\u0026 node.getRMNode().getHostName().equals(\n+                hostName)) || (!portName.equals(\"\") \u0026\u0026 node.getRMNode()\n+                .getHostName().equals(hostName) \u0026\u0026 String.valueOf(\n+                node.getRMNode().getCommandPort()).equals(portName))) {\n+              correctNodeId \u003d true;\n+              nodeId \u003d node.getNodeID().toString();\n+              break;\n+            }\n+          }\n+          if (!correctNodeId) {\n+            illegalInput \u003d true;\n+            errMessage \u003d \"Cannot find node manager with given node id\";\n+          }\n+        }\n+      }\n+\n+      if (!illegalInput) {\n+        activitiesManager.recordNextNodeUpdateActivities(nodeId);\n+        return activitiesManager.getActivitiesInfo(nodeId);\n+      }\n+\n+      // Return a activities info with error message\n+      return new ActivitiesInfo(errMessage, nodeId);\n+    }\n+\n+    return null;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ActivitiesInfo getActivities(@Context HttpServletRequest hsr,\n      @QueryParam(\"nodeId\") String nodeId) {\n    YarnScheduler scheduler \u003d rm.getRMContext().getScheduler();\n\n    if (scheduler instanceof AbstractYarnScheduler) {\n      String errMessage \u003d \"\";\n\n      AbstractYarnScheduler abstractYarnScheduler \u003d\n          (AbstractYarnScheduler) scheduler;\n\n      ActivitiesManager activitiesManager \u003d\n          abstractYarnScheduler.getActivitiesManager();\n      if (null \u003d\u003d activitiesManager) {\n        errMessage \u003d \"Not Capacity Scheduler\";\n        return new ActivitiesInfo(errMessage, nodeId);\n      }\n\n      List\u003cFiCaSchedulerNode\u003e nodeList \u003d\n          abstractYarnScheduler.getNodeTracker().getAllNodes();\n\n      boolean illegalInput \u003d false;\n\n      if (nodeList.size() \u003d\u003d 0) {\n        illegalInput \u003d true;\n        errMessage \u003d \"No node manager running in the cluster\";\n      } else {\n        if (nodeId !\u003d null) {\n          String hostName \u003d nodeId;\n          String portName \u003d \"\";\n          if (nodeId.contains(\":\")) {\n            int index \u003d nodeId.indexOf(\":\");\n            hostName \u003d nodeId.substring(0, index);\n            portName \u003d nodeId.substring(index + 1);\n          }\n\n          boolean correctNodeId \u003d false;\n          for (FiCaSchedulerNode node : nodeList) {\n            if ((portName.equals(\"\") \u0026\u0026 node.getRMNode().getHostName().equals(\n                hostName)) || (!portName.equals(\"\") \u0026\u0026 node.getRMNode()\n                .getHostName().equals(hostName) \u0026\u0026 String.valueOf(\n                node.getRMNode().getCommandPort()).equals(portName))) {\n              correctNodeId \u003d true;\n              nodeId \u003d node.getNodeID().toString();\n              break;\n            }\n          }\n          if (!correctNodeId) {\n            illegalInput \u003d true;\n            errMessage \u003d \"Cannot find node manager with given node id\";\n          }\n        }\n      }\n\n      if (!illegalInput) {\n        activitiesManager.recordNextNodeUpdateActivities(nodeId);\n        return activitiesManager.getActivitiesInfo(nodeId);\n      }\n\n      // Return a activities info with error message\n      return new ActivitiesInfo(errMessage, nodeId);\n    }\n\n    return null;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/webapp/RMWebServices.java"
    }
  }
}