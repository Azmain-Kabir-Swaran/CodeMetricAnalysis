{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MergeSort.java",
  "functionName": "mergeSort",
  "functionId": "mergeSort___src-int[]__dest-int[]__low-int__high-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/MergeSort.java",
  "functionStartLine": 42,
  "functionEndLine": 83,
  "numCommitsSeen": 5,
  "timeTaken": 710,
  "changeHistory": [
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void mergeSort(int src[], int dest[], int low, int high) {\n    int length \u003d high - low;\n\n    // Insertion sort on smallest arrays\n    if (length \u003c 7) {\n      for (int i\u003dlow; i\u003chigh; i++) {\n        for (int j\u003di;j \u003e low; j--) {\n          I.set(dest[j-1]);\n          J.set(dest[j]);\n          if (comparator.compare(I, J)\u003e0)\n            swap(dest, j, j-1);\n        }\n      }\n      return;\n    }\n\n    // Recursively sort halves of dest into src\n    int mid \u003d (low + high) \u003e\u003e\u003e 1;\n    mergeSort(dest, src, low, mid);\n    mergeSort(dest, src, mid, high);\n\n    I.set(src[mid-1]);\n    J.set(src[mid]);\n    // If list is already sorted, just copy from src to dest.  This is an\n    // optimization that results in faster sorts for nearly ordered lists.\n    if (comparator.compare(I, J) \u003c\u003d 0) {\n      System.arraycopy(src, low, dest, low, length);\n      return;\n    }\n\n    // Merge sorted halves (now in src) into dest\n    for (int i \u003d low, p \u003d low, q \u003d mid; i \u003c high; i++) {\n      if (q \u003c high \u0026\u0026 p \u003c mid) {\n        I.set(src[p]);\n        J.set(src[q]);\n      }\n      if (q\u003e\u003dhigh || p\u003cmid \u0026\u0026 comparator.compare(I, J) \u003c\u003d 0)\n        dest[i] \u003d src[p++];\n      else\n        dest[i] \u003d src[q++];\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/MergeSort.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/util/MergeSort.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/util/MergeSort.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void mergeSort(int src[], int dest[], int low, int high) {\n    int length \u003d high - low;\n\n    // Insertion sort on smallest arrays\n    if (length \u003c 7) {\n      for (int i\u003dlow; i\u003chigh; i++) {\n        for (int j\u003di;j \u003e low; j--) {\n          I.set(dest[j-1]);\n          J.set(dest[j]);\n          if (comparator.compare(I, J)\u003e0)\n            swap(dest, j, j-1);\n        }\n      }\n      return;\n    }\n\n    // Recursively sort halves of dest into src\n    int mid \u003d (low + high) \u003e\u003e\u003e 1;\n    mergeSort(dest, src, low, mid);\n    mergeSort(dest, src, mid, high);\n\n    I.set(src[mid-1]);\n    J.set(src[mid]);\n    // If list is already sorted, just copy from src to dest.  This is an\n    // optimization that results in faster sorts for nearly ordered lists.\n    if (comparator.compare(I, J) \u003c\u003d 0) {\n      System.arraycopy(src, low, dest, low, length);\n      return;\n    }\n\n    // Merge sorted halves (now in src) into dest\n    for (int i \u003d low, p \u003d low, q \u003d mid; i \u003c high; i++) {\n      if (q \u003c high \u0026\u0026 p \u003c mid) {\n        I.set(src[p]);\n        J.set(src[q]);\n      }\n      if (q\u003e\u003dhigh || p\u003cmid \u0026\u0026 comparator.compare(I, J) \u003c\u003d 0)\n        dest[i] \u003d src[p++];\n      else\n        dest[i] \u003d src[q++];\n    }\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/util/MergeSort.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/util/MergeSort.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/util/MergeSort.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void mergeSort(int src[], int dest[], int low, int high) {\n    int length \u003d high - low;\n\n    // Insertion sort on smallest arrays\n    if (length \u003c 7) {\n      for (int i\u003dlow; i\u003chigh; i++) {\n        for (int j\u003di;j \u003e low; j--) {\n          I.set(dest[j-1]);\n          J.set(dest[j]);\n          if (comparator.compare(I, J)\u003e0)\n            swap(dest, j, j-1);\n        }\n      }\n      return;\n    }\n\n    // Recursively sort halves of dest into src\n    int mid \u003d (low + high) \u003e\u003e\u003e 1;\n    mergeSort(dest, src, low, mid);\n    mergeSort(dest, src, mid, high);\n\n    I.set(src[mid-1]);\n    J.set(src[mid]);\n    // If list is already sorted, just copy from src to dest.  This is an\n    // optimization that results in faster sorts for nearly ordered lists.\n    if (comparator.compare(I, J) \u003c\u003d 0) {\n      System.arraycopy(src, low, dest, low, length);\n      return;\n    }\n\n    // Merge sorted halves (now in src) into dest\n    for (int i \u003d low, p \u003d low, q \u003d mid; i \u003c high; i++) {\n      if (q \u003c high \u0026\u0026 p \u003c mid) {\n        I.set(src[p]);\n        J.set(src[q]);\n      }\n      if (q\u003e\u003dhigh || p\u003cmid \u0026\u0026 comparator.compare(I, J) \u003c\u003d 0)\n        dest[i] \u003d src[p++];\n      else\n        dest[i] \u003d src[q++];\n    }\n  }",
      "path": "common/src/java/org/apache/hadoop/util/MergeSort.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/util/MergeSort.java",
        "newPath": "common/src/java/org/apache/hadoop/util/MergeSort.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,42 @@\n+  public void mergeSort(int src[], int dest[], int low, int high) {\n+    int length \u003d high - low;\n+\n+    // Insertion sort on smallest arrays\n+    if (length \u003c 7) {\n+      for (int i\u003dlow; i\u003chigh; i++) {\n+        for (int j\u003di;j \u003e low; j--) {\n+          I.set(dest[j-1]);\n+          J.set(dest[j]);\n+          if (comparator.compare(I, J)\u003e0)\n+            swap(dest, j, j-1);\n+        }\n+      }\n+      return;\n+    }\n+\n+    // Recursively sort halves of dest into src\n+    int mid \u003d (low + high) \u003e\u003e\u003e 1;\n+    mergeSort(dest, src, low, mid);\n+    mergeSort(dest, src, mid, high);\n+\n+    I.set(src[mid-1]);\n+    J.set(src[mid]);\n+    // If list is already sorted, just copy from src to dest.  This is an\n+    // optimization that results in faster sorts for nearly ordered lists.\n+    if (comparator.compare(I, J) \u003c\u003d 0) {\n+      System.arraycopy(src, low, dest, low, length);\n+      return;\n+    }\n+\n+    // Merge sorted halves (now in src) into dest\n+    for (int i \u003d low, p \u003d low, q \u003d mid; i \u003c high; i++) {\n+      if (q \u003c high \u0026\u0026 p \u003c mid) {\n+        I.set(src[p]);\n+        J.set(src[q]);\n+      }\n+      if (q\u003e\u003dhigh || p\u003cmid \u0026\u0026 comparator.compare(I, J) \u003c\u003d 0)\n+        dest[i] \u003d src[p++];\n+      else\n+        dest[i] \u003d src[q++];\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void mergeSort(int src[], int dest[], int low, int high) {\n    int length \u003d high - low;\n\n    // Insertion sort on smallest arrays\n    if (length \u003c 7) {\n      for (int i\u003dlow; i\u003chigh; i++) {\n        for (int j\u003di;j \u003e low; j--) {\n          I.set(dest[j-1]);\n          J.set(dest[j]);\n          if (comparator.compare(I, J)\u003e0)\n            swap(dest, j, j-1);\n        }\n      }\n      return;\n    }\n\n    // Recursively sort halves of dest into src\n    int mid \u003d (low + high) \u003e\u003e\u003e 1;\n    mergeSort(dest, src, low, mid);\n    mergeSort(dest, src, mid, high);\n\n    I.set(src[mid-1]);\n    J.set(src[mid]);\n    // If list is already sorted, just copy from src to dest.  This is an\n    // optimization that results in faster sorts for nearly ordered lists.\n    if (comparator.compare(I, J) \u003c\u003d 0) {\n      System.arraycopy(src, low, dest, low, length);\n      return;\n    }\n\n    // Merge sorted halves (now in src) into dest\n    for (int i \u003d low, p \u003d low, q \u003d mid; i \u003c high; i++) {\n      if (q \u003c high \u0026\u0026 p \u003c mid) {\n        I.set(src[p]);\n        J.set(src[q]);\n      }\n      if (q\u003e\u003dhigh || p\u003cmid \u0026\u0026 comparator.compare(I, J) \u003c\u003d 0)\n        dest[i] \u003d src[p++];\n      else\n        dest[i] \u003d src[q++];\n    }\n  }",
      "path": "src/java/org/apache/hadoop/util/MergeSort.java"
    }
  }
}