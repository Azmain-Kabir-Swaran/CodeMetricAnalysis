{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "StoragePolicyAdmin.java",
  "functionName": "run",
  "functionId": "run___conf-Configuration__args-List__String__",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
  "functionStartLine": 221,
  "functionEndLine": 246,
  "numCommitsSeen": 22,
  "timeTaken": 5025,
  "changeHistory": [
    "30941d99c9014431981eeb09ab24e90bef629fee",
    "b91305119b434d23b99ae7e755aea6639f48b6ab",
    "d150f061f4ebde923fda28ea898a9606b8789758",
    "480405063063f564ae0cdb34e0757ac3990569aa",
    "27941a1811831e0f2144a2f463d807755cd850b2",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
    "5b0d060d2a868cefcd12252140d5a8e310738aca",
    "428a76663a0de5d0d74cc9525273ddc470760e44"
  ],
  "changeHistoryShort": {
    "30941d99c9014431981eeb09ab24e90bef629fee": "Ybodychange",
    "b91305119b434d23b99ae7e755aea6639f48b6ab": "Ybodychange",
    "d150f061f4ebde923fda28ea898a9606b8789758": "Ybodychange",
    "480405063063f564ae0cdb34e0757ac3990569aa": "Ybodychange",
    "27941a1811831e0f2144a2f463d807755cd850b2": "Ybodychange",
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": "Ybodychange",
    "5b0d060d2a868cefcd12252140d5a8e310738aca": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
    "428a76663a0de5d0d74cc9525273ddc470760e44": "Yintroduced"
  },
  "changeHistoryDetails": {
    "30941d99c9014431981eeb09ab24e90bef629fee": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12857. StoragePolicyAdmin should support schema based path. Contributed by Surendra Singh Lilhore.\n",
      "commitDate": "28/11/17 10:27 AM",
      "commitName": "30941d99c9014431981eeb09ab24e90bef629fee",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "03/10/17 11:23 AM",
      "commitNameOld": "b91305119b434d23b99ae7e755aea6639f48b6ab",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 56.0,
      "commitsBetweenForRepo": 451,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n       if (path \u003d\u003d null) {\n         System.err.println(\"Please specify the path from which \"\n             + \"the storage policy will be unset.\\nUsage: \" + getLongUsage());\n         return 1;\n       }\n \n       Path p \u003d new Path(path);\n-      final FileSystem fs \u003d FileSystem.get(conf);\n+      final FileSystem fs \u003d FileSystem.get(p.toUri(), conf);\n       try {\n         fs.unsetStoragePolicy(p);\n         System.out.println(\"Unset storage policy from \" + path);\n       } catch (Exception e) {\n         System.err.println(AdminHelper.prettifyException(e));\n         return 2;\n       }\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n      if (path \u003d\u003d null) {\n        System.err.println(\"Please specify the path from which \"\n            + \"the storage policy will be unset.\\nUsage: \" + getLongUsage());\n        return 1;\n      }\n\n      Path p \u003d new Path(path);\n      final FileSystem fs \u003d FileSystem.get(p.toUri(), conf);\n      try {\n        fs.unsetStoragePolicy(p);\n        System.out.println(\"Unset storage policy from \" + path);\n      } catch (Exception e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "b91305119b434d23b99ae7e755aea6639f48b6ab": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11968. ViewFS: StoragePolicies commands fail with HDFS federation. Contributed by Mukul Kumar Singh.\n",
      "commitDate": "03/10/17 11:23 AM",
      "commitName": "b91305119b434d23b99ae7e755aea6639f48b6ab",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "23/02/17 4:00 PM",
      "commitNameOld": "132f758e3dbe3a3f11c0d9b2de8edbee594fb475",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 221.77,
      "commitsBetweenForRepo": 1437,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n       if (path \u003d\u003d null) {\n         System.err.println(\"Please specify the path from which \"\n             + \"the storage policy will be unset.\\nUsage: \" + getLongUsage());\n         return 1;\n       }\n \n       Path p \u003d new Path(path);\n-      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(p.toUri(), conf);\n+      final FileSystem fs \u003d FileSystem.get(conf);\n       try {\n-        dfs.unsetStoragePolicy(p);\n+        fs.unsetStoragePolicy(p);\n         System.out.println(\"Unset storage policy from \" + path);\n       } catch (Exception e) {\n         System.err.println(AdminHelper.prettifyException(e));\n         return 2;\n       }\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n      if (path \u003d\u003d null) {\n        System.err.println(\"Please specify the path from which \"\n            + \"the storage policy will be unset.\\nUsage: \" + getLongUsage());\n        return 1;\n      }\n\n      Path p \u003d new Path(path);\n      final FileSystem fs \u003d FileSystem.get(conf);\n      try {\n        fs.unsetStoragePolicy(p);\n        System.out.println(\"Unset storage policy from \" + path);\n      } catch (Exception e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "d150f061f4ebde923fda28ea898a9606b8789758": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11438. Fix typo in error message of StoragePolicyAdmin tool. Contributed by Alison Yu.\n",
      "commitDate": "22/02/17 3:16 PM",
      "commitName": "d150f061f4ebde923fda28ea898a9606b8789758",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "21/02/17 4:43 AM",
      "commitNameOld": "480405063063f564ae0cdb34e0757ac3990569aa",
      "commitAuthorOld": "Vinayakumar B",
      "daysBetweenCommits": 1.44,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,19 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n       if (path \u003d\u003d null) {\n         System.err.println(\"Please specify the path from which \"\n-            + \"the storage policy will be unsetd.\\nUsage: \" + getLongUsage());\n+            + \"the storage policy will be unset.\\nUsage: \" + getLongUsage());\n         return 1;\n       }\n \n       Path p \u003d new Path(path);\n       final DistributedFileSystem dfs \u003d AdminHelper.getDFS(p.toUri(), conf);\n       try {\n         dfs.unsetStoragePolicy(p);\n         System.out.println(\"Unset storage policy from \" + path);\n       } catch (Exception e) {\n         System.err.println(AdminHelper.prettifyException(e));\n         return 2;\n       }\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n      if (path \u003d\u003d null) {\n        System.err.println(\"Please specify the path from which \"\n            + \"the storage policy will be unset.\\nUsage: \" + getLongUsage());\n        return 1;\n      }\n\n      Path p \u003d new Path(path);\n      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(p.toUri(), conf);\n      try {\n        dfs.unsetStoragePolicy(p);\n        System.out.println(\"Unset storage policy from \" + path);\n      } catch (Exception e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "480405063063f564ae0cdb34e0757ac3990569aa": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11177. \u0027storagepolicies -getStoragePolicy\u0027 command should accept URI based path. (Contributed by Surendra Singh Lilhore)\n",
      "commitDate": "21/02/17 4:43 AM",
      "commitName": "480405063063f564ae0cdb34e0757ac3990569aa",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "12/12/16 6:21 PM",
      "commitNameOld": "754f15bae61b81ad3c2e3f722d1feaebf374e2c4",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 70.43,
      "commitsBetweenForRepo": 321,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,19 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n       if (path \u003d\u003d null) {\n         System.err.println(\"Please specify the path from which \"\n             + \"the storage policy will be unsetd.\\nUsage: \" + getLongUsage());\n         return 1;\n       }\n \n-      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n+      Path p \u003d new Path(path);\n+      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(p.toUri(), conf);\n       try {\n-        dfs.unsetStoragePolicy(new Path(path));\n+        dfs.unsetStoragePolicy(p);\n         System.out.println(\"Unset storage policy from \" + path);\n       } catch (Exception e) {\n         System.err.println(AdminHelper.prettifyException(e));\n         return 2;\n       }\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n      if (path \u003d\u003d null) {\n        System.err.println(\"Please specify the path from which \"\n            + \"the storage policy will be unsetd.\\nUsage: \" + getLongUsage());\n        return 1;\n      }\n\n      Path p \u003d new Path(path);\n      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(p.toUri(), conf);\n      try {\n        dfs.unsetStoragePolicy(p);\n        System.out.println(\"Unset storage policy from \" + path);\n      } catch (Exception e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "27941a1811831e0f2144a2f463d807755cd850b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9534. Add CLI command to clear storage policy from a path. (Contributed by Xiaobing Zhou)\n",
      "commitDate": "02/03/16 6:35 PM",
      "commitName": "27941a1811831e0f2144a2f463d807755cd850b2",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "18/05/15 11:36 AM",
      "commitNameOld": "a2190bf15d25e01fb4b220ba6401ce2f787a5c61",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 289.33,
      "commitsBetweenForRepo": 2136,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,18 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n       final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n       if (path \u003d\u003d null) {\n-        System.err.println(\"Please specify the path for setting the storage \" +\n-            \"policy.\\nUsage: \" + getLongUsage());\n-        return 1;\n-      }\n-\n-      final String policyName \u003d StringUtils.popOptionWithArgument(\"-policy\",\n-          args);\n-      if (policyName \u003d\u003d null) {\n-        System.err.println(\"Please specify the policy name.\\nUsage: \" +\n-            getLongUsage());\n+        System.err.println(\"Please specify the path from which \"\n+            + \"the storage policy will be unsetd.\\nUsage: \" + getLongUsage());\n         return 1;\n       }\n \n       final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n       try {\n-        dfs.setStoragePolicy(new Path(path), policyName);\n-        System.out.println(\"Set storage policy \" + policyName + \" on \" + path);\n+        dfs.unsetStoragePolicy(new Path(path));\n+        System.out.println(\"Unset storage policy from \" + path);\n       } catch (Exception e) {\n         System.err.println(AdminHelper.prettifyException(e));\n         return 2;\n       }\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n      if (path \u003d\u003d null) {\n        System.err.println(\"Please specify the path from which \"\n            + \"the storage policy will be unsetd.\\nUsage: \" + getLongUsage());\n        return 1;\n      }\n\n      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n      try {\n        dfs.unsetStoragePolicy(new Path(path));\n        System.out.println(\"Unset storage policy from \" + path);\n      } catch (Exception e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "6f3a63a41b90157c3e46ea20ca6170b854ea902e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7600. Refine hdfs admin classes to reuse common code. Contributed by Jing Zhao.\n",
      "commitDate": "12/01/15 5:32 PM",
      "commitName": "6f3a63a41b90157c3e46ea20ca6170b854ea902e",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "11/01/15 8:35 AM",
      "commitNameOld": "5b0d060d2a868cefcd12252140d5a8e310738aca",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 1.37,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,26 @@\n     public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n-      if (args.size() \u003d\u003d 0) {\n-        for (Command command : COMMANDS) {\n-          System.err.println(command.getLongUsage());\n-        }\n-        return 0;\n-      }\n-      if (args.size() !\u003d 1) {\n-        System.out.println(\"You must give exactly one argument to -help.\");\n-        return 0;\n-      }\n-      final String commandName \u003d args.get(0);\n-      // prepend a dash to match against the command names\n-      final Command command \u003d determineCommand(\"-\" + commandName);\n-      if (command \u003d\u003d null) {\n-        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n-        System.err.print(\"Valid help command names are:\\n\");\n-        String separator \u003d \"\";\n-        for (Command c : COMMANDS) {\n-          System.err.print(separator + c.getName().substring(1));\n-          separator \u003d \", \";\n-        }\n-        System.err.print(\"\\n\");\n+      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n+      if (path \u003d\u003d null) {\n+        System.err.println(\"Please specify the path for setting the storage \" +\n+            \"policy.\\nUsage: \" + getLongUsage());\n         return 1;\n       }\n-      System.err.print(command.getLongUsage());\n+\n+      final String policyName \u003d StringUtils.popOptionWithArgument(\"-policy\",\n+          args);\n+      if (policyName \u003d\u003d null) {\n+        System.err.println(\"Please specify the policy name.\\nUsage: \" +\n+            getLongUsage());\n+        return 1;\n+      }\n+\n+      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n+      try {\n+        dfs.setStoragePolicy(new Path(path), policyName);\n+        System.out.println(\"Set storage policy \" + policyName + \" on \" + path);\n+      } catch (Exception e) {\n+        System.err.println(AdminHelper.prettifyException(e));\n+        return 2;\n+      }\n       return 0;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      final String path \u003d StringUtils.popOptionWithArgument(\"-path\", args);\n      if (path \u003d\u003d null) {\n        System.err.println(\"Please specify the path for setting the storage \" +\n            \"policy.\\nUsage: \" + getLongUsage());\n        return 1;\n      }\n\n      final String policyName \u003d StringUtils.popOptionWithArgument(\"-policy\",\n          args);\n      if (policyName \u003d\u003d null) {\n        System.err.println(\"Please specify the policy name.\\nUsage: \" +\n            getLongUsage());\n        return 1;\n      }\n\n      final DistributedFileSystem dfs \u003d AdminHelper.getDFS(conf);\n      try {\n        dfs.setStoragePolicy(new Path(path), policyName);\n        System.out.println(\"Set storage policy \" + policyName + \" on \" + path);\n      } catch (Exception e) {\n        System.err.println(AdminHelper.prettifyException(e));\n        return 2;\n      }\n      return 0;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
      "extendedDetails": {}
    },
    "5b0d060d2a868cefcd12252140d5a8e310738aca": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
      "commitDate": "11/01/15 8:35 AM",
      "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
      "commitAuthor": "yliu",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
          "commitDate": "11/01/15 8:35 AM",
          "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
          "commitAuthor": "yliu",
          "commitDateOld": "10/01/15 9:18 AM",
          "commitNameOld": "ef3c3a832c2f0c1e5ccdda2ff8ef84902912955f",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,28 @@\n-  public int run(String[] args) throws Exception {\n-    FileSystem fs \u003d FileSystem.get(getConf());\n-    if (!(fs instanceof DistributedFileSystem)) {\n-      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n-          \"Please check the default FileSystem setting in your configuration.\");\n-      return 1;\n-    }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    try {\n-      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n-      System.out.println(\"Block Storage Policies:\");\n-      for (BlockStoragePolicy policy : policies) {\n-        if (policy !\u003d null) {\n-          System.out.println(\"\\t\" + policy);\n+    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n+      if (args.size() \u003d\u003d 0) {\n+        for (Command command : COMMANDS) {\n+          System.err.println(command.getLongUsage());\n         }\n+        return 0;\n       }\n-    } catch (IOException e) {\n-      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n-      System.err.println(\"GetStoragePolicies: \" + content[0]);\n-      return 1;\n-    }\n-    return 0;\n-  }\n\\ No newline at end of file\n+      if (args.size() !\u003d 1) {\n+        System.out.println(\"You must give exactly one argument to -help.\");\n+        return 0;\n+      }\n+      final String commandName \u003d args.get(0);\n+      // prepend a dash to match against the command names\n+      final Command command \u003d determineCommand(\"-\" + commandName);\n+      if (command \u003d\u003d null) {\n+        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n+        System.err.print(\"Valid help command names are:\\n\");\n+        String separator \u003d \"\";\n+        for (Command c : COMMANDS) {\n+          System.err.print(separator + c.getName().substring(1));\n+          separator \u003d \", \";\n+        }\n+        System.err.print(\"\\n\");\n+        return 1;\n+      }\n+      System.err.print(command.getLongUsage());\n+      return 0;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      final String commandName \u003d args.get(0);\n      // prepend a dash to match against the command names\n      final Command command \u003d determineCommand(\"-\" + commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid help command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName().substring(1));\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/GetStoragePolicies.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
          "commitDate": "11/01/15 8:35 AM",
          "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
          "commitAuthor": "yliu",
          "commitDateOld": "10/01/15 9:18 AM",
          "commitNameOld": "ef3c3a832c2f0c1e5ccdda2ff8ef84902912955f",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,28 @@\n-  public int run(String[] args) throws Exception {\n-    FileSystem fs \u003d FileSystem.get(getConf());\n-    if (!(fs instanceof DistributedFileSystem)) {\n-      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n-          \"Please check the default FileSystem setting in your configuration.\");\n-      return 1;\n-    }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    try {\n-      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n-      System.out.println(\"Block Storage Policies:\");\n-      for (BlockStoragePolicy policy : policies) {\n-        if (policy !\u003d null) {\n-          System.out.println(\"\\t\" + policy);\n+    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n+      if (args.size() \u003d\u003d 0) {\n+        for (Command command : COMMANDS) {\n+          System.err.println(command.getLongUsage());\n         }\n+        return 0;\n       }\n-    } catch (IOException e) {\n-      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n-      System.err.println(\"GetStoragePolicies: \" + content[0]);\n-      return 1;\n-    }\n-    return 0;\n-  }\n\\ No newline at end of file\n+      if (args.size() !\u003d 1) {\n+        System.out.println(\"You must give exactly one argument to -help.\");\n+        return 0;\n+      }\n+      final String commandName \u003d args.get(0);\n+      // prepend a dash to match against the command names\n+      final Command command \u003d determineCommand(\"-\" + commandName);\n+      if (command \u003d\u003d null) {\n+        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n+        System.err.print(\"Valid help command names are:\\n\");\n+        String separator \u003d \"\";\n+        for (Command c : COMMANDS) {\n+          System.err.print(separator + c.getName().substring(1));\n+          separator \u003d \", \";\n+        }\n+        System.err.print(\"\\n\");\n+        return 1;\n+      }\n+      System.err.print(command.getLongUsage());\n+      return 0;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      final String commandName \u003d args.get(0);\n      // prepend a dash to match against the command names\n      final Command command \u003d determineCommand(\"-\" + commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid help command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName().substring(1));\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
          "extendedDetails": {
            "oldValue": "[Exception]",
            "newValue": "[IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
          "commitDate": "11/01/15 8:35 AM",
          "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
          "commitAuthor": "yliu",
          "commitDateOld": "10/01/15 9:18 AM",
          "commitNameOld": "ef3c3a832c2f0c1e5ccdda2ff8ef84902912955f",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,28 @@\n-  public int run(String[] args) throws Exception {\n-    FileSystem fs \u003d FileSystem.get(getConf());\n-    if (!(fs instanceof DistributedFileSystem)) {\n-      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n-          \"Please check the default FileSystem setting in your configuration.\");\n-      return 1;\n-    }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    try {\n-      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n-      System.out.println(\"Block Storage Policies:\");\n-      for (BlockStoragePolicy policy : policies) {\n-        if (policy !\u003d null) {\n-          System.out.println(\"\\t\" + policy);\n+    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n+      if (args.size() \u003d\u003d 0) {\n+        for (Command command : COMMANDS) {\n+          System.err.println(command.getLongUsage());\n         }\n+        return 0;\n       }\n-    } catch (IOException e) {\n-      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n-      System.err.println(\"GetStoragePolicies: \" + content[0]);\n-      return 1;\n-    }\n-    return 0;\n-  }\n\\ No newline at end of file\n+      if (args.size() !\u003d 1) {\n+        System.out.println(\"You must give exactly one argument to -help.\");\n+        return 0;\n+      }\n+      final String commandName \u003d args.get(0);\n+      // prepend a dash to match against the command names\n+      final Command command \u003d determineCommand(\"-\" + commandName);\n+      if (command \u003d\u003d null) {\n+        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n+        System.err.print(\"Valid help command names are:\\n\");\n+        String separator \u003d \"\";\n+        for (Command c : COMMANDS) {\n+          System.err.print(separator + c.getName().substring(1));\n+          separator \u003d \", \";\n+        }\n+        System.err.print(\"\\n\");\n+        return 1;\n+      }\n+      System.err.print(command.getLongUsage());\n+      return 0;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      final String commandName \u003d args.get(0);\n      // prepend a dash to match against the command names\n      final Command command \u003d determineCommand(\"-\" + commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid help command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName().substring(1));\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7323. Move the get/setStoragePolicy commands out from dfsadmin. (jing9 via yliu)\n",
          "commitDate": "11/01/15 8:35 AM",
          "commitName": "5b0d060d2a868cefcd12252140d5a8e310738aca",
          "commitAuthor": "yliu",
          "commitDateOld": "10/01/15 9:18 AM",
          "commitNameOld": "ef3c3a832c2f0c1e5ccdda2ff8ef84902912955f",
          "commitAuthorOld": "cnauroth",
          "daysBetweenCommits": 0.97,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,24 +1,28 @@\n-  public int run(String[] args) throws Exception {\n-    FileSystem fs \u003d FileSystem.get(getConf());\n-    if (!(fs instanceof DistributedFileSystem)) {\n-      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n-          \"Please check the default FileSystem setting in your configuration.\");\n-      return 1;\n-    }\n-    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n-\n-    try {\n-      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n-      System.out.println(\"Block Storage Policies:\");\n-      for (BlockStoragePolicy policy : policies) {\n-        if (policy !\u003d null) {\n-          System.out.println(\"\\t\" + policy);\n+    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n+      if (args.size() \u003d\u003d 0) {\n+        for (Command command : COMMANDS) {\n+          System.err.println(command.getLongUsage());\n         }\n+        return 0;\n       }\n-    } catch (IOException e) {\n-      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n-      System.err.println(\"GetStoragePolicies: \" + content[0]);\n-      return 1;\n-    }\n-    return 0;\n-  }\n\\ No newline at end of file\n+      if (args.size() !\u003d 1) {\n+        System.out.println(\"You must give exactly one argument to -help.\");\n+        return 0;\n+      }\n+      final String commandName \u003d args.get(0);\n+      // prepend a dash to match against the command names\n+      final Command command \u003d determineCommand(\"-\" + commandName);\n+      if (command \u003d\u003d null) {\n+        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n+        System.err.print(\"Valid help command names are:\\n\");\n+        String separator \u003d \"\";\n+        for (Command c : COMMANDS) {\n+          System.err.print(separator + c.getName().substring(1));\n+          separator \u003d \", \";\n+        }\n+        System.err.print(\"\\n\");\n+        return 1;\n+      }\n+      System.err.print(command.getLongUsage());\n+      return 0;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    public int run(Configuration conf, List\u003cString\u003e args) throws IOException {\n      if (args.size() \u003d\u003d 0) {\n        for (Command command : COMMANDS) {\n          System.err.println(command.getLongUsage());\n        }\n        return 0;\n      }\n      if (args.size() !\u003d 1) {\n        System.out.println(\"You must give exactly one argument to -help.\");\n        return 0;\n      }\n      final String commandName \u003d args.get(0);\n      // prepend a dash to match against the command names\n      final Command command \u003d determineCommand(\"-\" + commandName);\n      if (command \u003d\u003d null) {\n        System.err.print(\"Unknown command \u0027\" + commandName + \"\u0027.\\n\");\n        System.err.print(\"Valid help command names are:\\n\");\n        String separator \u003d \"\";\n        for (Command c : COMMANDS) {\n          System.err.print(separator + c.getName().substring(1));\n          separator \u003d \", \";\n        }\n        System.err.print(\"\\n\");\n        return 1;\n      }\n      System.err.print(command.getLongUsage());\n      return 0;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/StoragePolicyAdmin.java",
          "extendedDetails": {
            "oldValue": "[args-String[]]",
            "newValue": "[conf-Configuration, args-List\u003cString\u003e]"
          }
        }
      ]
    },
    "428a76663a0de5d0d74cc9525273ddc470760e44": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-7140. Add a tool to list all the existing block storage policies. Contributed by Jing Zhao.\n",
      "commitDate": "24/09/14 7:11 PM",
      "commitName": "428a76663a0de5d0d74cc9525273ddc470760e44",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,24 @@\n+  public int run(String[] args) throws Exception {\n+    FileSystem fs \u003d FileSystem.get(getConf());\n+    if (!(fs instanceof DistributedFileSystem)) {\n+      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n+          \"Please check the default FileSystem setting in your configuration.\");\n+      return 1;\n+    }\n+    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n+\n+    try {\n+      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n+      System.out.println(\"Block Storage Policies:\");\n+      for (BlockStoragePolicy policy : policies) {\n+        if (policy !\u003d null) {\n+          System.out.println(\"\\t\" + policy);\n+        }\n+      }\n+    } catch (IOException e) {\n+      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n+      System.err.println(\"GetStoragePolicies: \" + content[0]);\n+      return 1;\n+    }\n+    return 0;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int run(String[] args) throws Exception {\n    FileSystem fs \u003d FileSystem.get(getConf());\n    if (!(fs instanceof DistributedFileSystem)) {\n      System.err.println(\"GetStoragePolicies can only be used against HDFS. \" +\n          \"Please check the default FileSystem setting in your configuration.\");\n      return 1;\n    }\n    DistributedFileSystem dfs \u003d (DistributedFileSystem) fs;\n\n    try {\n      BlockStoragePolicy[] policies \u003d dfs.getStoragePolicies();\n      System.out.println(\"Block Storage Policies:\");\n      for (BlockStoragePolicy policy : policies) {\n        if (policy !\u003d null) {\n          System.out.println(\"\\t\" + policy);\n        }\n      }\n    } catch (IOException e) {\n      String[] content \u003d e.getLocalizedMessage().split(\"\\n\");\n      System.err.println(\"GetStoragePolicies: \" + content[0]);\n      return 1;\n    }\n    return 0;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/tools/GetStoragePolicies.java"
    }
  }
}