{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "internalQueueCall",
  "functionId": "internalQueueCall___call-Call",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 2862,
  "functionEndLine": 2865,
  "numCommitsSeen": 162,
  "timeTaken": 2698,
  "changeHistory": [
    "ef3e1929dd64b264c6975224da696a5a605ff66a",
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2"
  ],
  "changeHistoryShort": {
    "ef3e1929dd64b264c6975224da696a5a605ff66a": "Ybodychange",
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ef3e1929dd64b264c6975224da696a5a605ff66a": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14146. [SBN read] Handle exceptions from and prevent handler threads from blocking within internalQueueCall. Contributed by Chao Sun.\n",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "ef3e1929dd64b264c6975224da696a5a605ff66a",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "24/12/18 9:34 AM",
      "commitNameOld": "cae279610b1559371a7f04606353d8369b50969b",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,4 @@\n   private void internalQueueCall(Call call)\n       throws IOException, InterruptedException {\n-    try {\n-      callQueue.put(call); // queue the call; maybe blocked here\n-    } catch (CallQueueOverflowException cqe) {\n-      // If rpc scheduler indicates back off based on performance degradation\n-      // such as response time or rpc queue is full, we will ask the client\n-      // to back off by throwing RetriableException. Whether the client will\n-      // honor RetriableException and retry depends the client and its policy.\n-      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n-      // RetriableException.\n-      rpcMetrics.incrClientBackoff();\n-      // unwrap retriable exception.\n-      throw cqe.getCause();\n-    }\n+    internalQueueCall(call, true);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalQueueCall(Call call)\n      throws IOException, InterruptedException {\n    internalQueueCall(call, true);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "855e0477b1706a2d5b0df6a2b0e461aeec8839c2": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-14035. Reduce fair call queue backoff\u0027s impact on clients. Contributed by Daryn Sharp.\n",
      "commitDate": "06/06/17 6:35 AM",
      "commitName": "855e0477b1706a2d5b0df6a2b0e461aeec8839c2",
      "commitAuthor": "Kihwal Lee",
      "diff": "@@ -0,0 +1,16 @@\n+  private void internalQueueCall(Call call)\n+      throws IOException, InterruptedException {\n+    try {\n+      callQueue.put(call); // queue the call; maybe blocked here\n+    } catch (CallQueueOverflowException cqe) {\n+      // If rpc scheduler indicates back off based on performance degradation\n+      // such as response time or rpc queue is full, we will ask the client\n+      // to back off by throwing RetriableException. Whether the client will\n+      // honor RetriableException and retry depends the client and its policy.\n+      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n+      // RetriableException.\n+      rpcMetrics.incrClientBackoff();\n+      // unwrap retriable exception.\n+      throw cqe.getCause();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void internalQueueCall(Call call)\n      throws IOException, InterruptedException {\n    try {\n      callQueue.put(call); // queue the call; maybe blocked here\n    } catch (CallQueueOverflowException cqe) {\n      // If rpc scheduler indicates back off based on performance degradation\n      // such as response time or rpc queue is full, we will ask the client\n      // to back off by throwing RetriableException. Whether the client will\n      // honor RetriableException and retry depends the client and its policy.\n      // For example, IPC clients using FailoverOnNetworkExceptionRetry handle\n      // RetriableException.\n      rpcMetrics.incrClientBackoff();\n      // unwrap retriable exception.\n      throw cqe.getCause();\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}