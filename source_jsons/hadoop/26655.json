{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JobImpl.java",
  "functionName": "setup",
  "functionId": "setup___job-JobImpl",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
  "functionStartLine": 1530,
  "functionEndLine": 1567,
  "numCommitsSeen": 96,
  "timeTaken": 8583,
  "changeHistory": [
    "b64572b06b1282128180b9ebdd971f9b1e973e61",
    "7d7553c4eb7d9a282410a3213d26a89fea9b7865",
    "977d7cc5b947682478ad7b38bd442f0efa1cd204",
    "f24dcb3449c77da665058427bc7fa480cad507fc",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "b64572b06b1282128180b9ebdd971f9b1e973e61": "Ybodychange",
    "7d7553c4eb7d9a282410a3213d26a89fea9b7865": "Ybodychange",
    "977d7cc5b947682478ad7b38bd442f0efa1cd204": "Ybodychange",
    "f24dcb3449c77da665058427bc7fa480cad507fc": "Ybodychange",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b64572b06b1282128180b9ebdd971f9b1e973e61": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5199. Removing ApplicationTokens file as it is no longer needed. Contributed by Daryn Sharp.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1492848 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/06/13 1:20 PM",
      "commitName": "b64572b06b1282128180b9ebdd971f9b1e973e61",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/06/13 9:05 PM",
      "commitNameOld": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 9.68,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     protected void setup(JobImpl job) throws IOException {\n \n       String oldJobIDString \u003d job.oldJobId.toString();\n       String user \u003d \n         UserGroupInformation.getCurrentUser().getShortUserName();\n       Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n       }\n \n       job.remoteJobSubmitDir \u003d\n           FileSystem.get(job.conf).makeQualified(\n               new Path(path, oldJobIDString));\n       job.remoteJobConfFile \u003d\n           new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n \n       // Prepare the TaskAttemptListener server for authentication of Containers\n       // TaskAttemptListener gets the information via jobTokenSecretManager.\n       JobTokenIdentifier identifier \u003d\n           new JobTokenIdentifier(new Text(oldJobIDString));\n       job.jobToken \u003d\n           new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n       job.jobToken.setService(identifier.getJobId());\n       // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n       // can authenticate containers(tasks)\n       job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n       LOG.info(\"Adding job token for \" + oldJobIDString\n           + \" to jobTokenSecretManager\");\n \n       // If the job client did not setup the shuffle secret then reuse\n       // the job token secret for the shuffle.\n-      if (TokenCache.getShuffleSecretKey(job.fsTokens) \u003d\u003d null) {\n+      if (TokenCache.getShuffleSecretKey(job.jobCredentials) \u003d\u003d null) {\n         LOG.warn(\"Shuffle secret key missing from job credentials.\"\n             + \" Using job token secret as shuffle secret.\");\n         TokenCache.setShuffleSecretKey(job.jobToken.getPassword(),\n-            job.fsTokens);\n+            job.jobCredentials);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void setup(JobImpl job) throws IOException {\n\n      String oldJobIDString \u003d job.oldJobId.toString();\n      String user \u003d \n        UserGroupInformation.getCurrentUser().getShortUserName();\n      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n      }\n\n      job.remoteJobSubmitDir \u003d\n          FileSystem.get(job.conf).makeQualified(\n              new Path(path, oldJobIDString));\n      job.remoteJobConfFile \u003d\n          new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n\n      // Prepare the TaskAttemptListener server for authentication of Containers\n      // TaskAttemptListener gets the information via jobTokenSecretManager.\n      JobTokenIdentifier identifier \u003d\n          new JobTokenIdentifier(new Text(oldJobIDString));\n      job.jobToken \u003d\n          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n      job.jobToken.setService(identifier.getJobId());\n      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n      // can authenticate containers(tasks)\n      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n      LOG.info(\"Adding job token for \" + oldJobIDString\n          + \" to jobTokenSecretManager\");\n\n      // If the job client did not setup the shuffle secret then reuse\n      // the job token secret for the shuffle.\n      if (TokenCache.getShuffleSecretKey(job.jobCredentials) \u003d\u003d null) {\n        LOG.warn(\"Shuffle secret key missing from job credentials.\"\n            + \" Using job token secret as shuffle secret.\");\n        TokenCache.setShuffleSecretKey(job.jobToken.getPassword(),\n            job.jobCredentials);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
      "extendedDetails": {}
    },
    "7d7553c4eb7d9a282410a3213d26a89fea9b7865": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5042. Reducer unable to fetch for a map task that was recovered (Jason Lowe via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1457119 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/03/13 2:09 PM",
      "commitName": "7d7553c4eb7d9a282410a3213d26a89fea9b7865",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "04/03/13 8:32 AM",
      "commitNameOld": "ec13f1eb3afce78f1e86b039936f0c38535d05b3",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 11.19,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n     protected void setup(JobImpl job) throws IOException {\n \n       String oldJobIDString \u003d job.oldJobId.toString();\n       String user \u003d \n         UserGroupInformation.getCurrentUser().getShortUserName();\n       Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n       }\n \n       job.remoteJobSubmitDir \u003d\n           FileSystem.get(job.conf).makeQualified(\n               new Path(path, oldJobIDString));\n       job.remoteJobConfFile \u003d\n           new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n \n       // Prepare the TaskAttemptListener server for authentication of Containers\n       // TaskAttemptListener gets the information via jobTokenSecretManager.\n       JobTokenIdentifier identifier \u003d\n           new JobTokenIdentifier(new Text(oldJobIDString));\n       job.jobToken \u003d\n           new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n       job.jobToken.setService(identifier.getJobId());\n       // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n       // can authenticate containers(tasks)\n       job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n       LOG.info(\"Adding job token for \" + oldJobIDString\n           + \" to jobTokenSecretManager\");\n \n-      // Upload the jobTokens onto the remote FS so that ContainerManager can\n-      // localize it to be used by the Containers(tasks)\n-      Credentials tokenStorage \u003d new Credentials();\n-      TokenCache.setJobToken(job.jobToken, tokenStorage);\n-\n-      if (UserGroupInformation.isSecurityEnabled()) {\n-        tokenStorage.addAll(job.fsTokens);\n+      // If the job client did not setup the shuffle secret then reuse\n+      // the job token secret for the shuffle.\n+      if (TokenCache.getShuffleSecretKey(job.fsTokens) \u003d\u003d null) {\n+        LOG.warn(\"Shuffle secret key missing from job credentials.\"\n+            + \" Using job token secret as shuffle secret.\");\n+        TokenCache.setShuffleSecretKey(job.jobToken.getPassword(),\n+            job.fsTokens);\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void setup(JobImpl job) throws IOException {\n\n      String oldJobIDString \u003d job.oldJobId.toString();\n      String user \u003d \n        UserGroupInformation.getCurrentUser().getShortUserName();\n      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n      }\n\n      job.remoteJobSubmitDir \u003d\n          FileSystem.get(job.conf).makeQualified(\n              new Path(path, oldJobIDString));\n      job.remoteJobConfFile \u003d\n          new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n\n      // Prepare the TaskAttemptListener server for authentication of Containers\n      // TaskAttemptListener gets the information via jobTokenSecretManager.\n      JobTokenIdentifier identifier \u003d\n          new JobTokenIdentifier(new Text(oldJobIDString));\n      job.jobToken \u003d\n          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n      job.jobToken.setService(identifier.getJobId());\n      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n      // can authenticate containers(tasks)\n      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n      LOG.info(\"Adding job token for \" + oldJobIDString\n          + \" to jobTokenSecretManager\");\n\n      // If the job client did not setup the shuffle secret then reuse\n      // the job token secret for the shuffle.\n      if (TokenCache.getShuffleSecretKey(job.fsTokens) \u003d\u003d null) {\n        LOG.warn(\"Shuffle secret key missing from job credentials.\"\n            + \" Using job token secret as shuffle secret.\");\n        TokenCache.setShuffleSecretKey(job.jobToken.getPassword(),\n            job.fsTokens);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
      "extendedDetails": {}
    },
    "977d7cc5b947682478ad7b38bd442f0efa1cd204": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3233. Fixed a bug in MR Job so as to be able to restart the application on AM crash. Contributed by Mahadev Konar.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1187669 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/10/11 1:11 AM",
      "commitName": "977d7cc5b947682478ad7b38bd442f0efa1cd204",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/10/11 10:21 PM",
      "commitNameOld": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.12,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,38 @@\n     protected void setup(JobImpl job) throws IOException {\n \n       String oldJobIDString \u003d job.oldJobId.toString();\n       String user \u003d \n         UserGroupInformation.getCurrentUser().getShortUserName();\n       Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n       if(LOG.isDebugEnabled()) {\n         LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n       }\n \n       job.remoteJobSubmitDir \u003d\n           FileSystem.get(job.conf).makeQualified(\n               new Path(path, oldJobIDString));\n       job.remoteJobConfFile \u003d\n           new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n \n       // Prepare the TaskAttemptListener server for authentication of Containers\n       // TaskAttemptListener gets the information via jobTokenSecretManager.\n       JobTokenIdentifier identifier \u003d\n           new JobTokenIdentifier(new Text(oldJobIDString));\n       job.jobToken \u003d\n           new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n       job.jobToken.setService(identifier.getJobId());\n       // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n       // can authenticate containers(tasks)\n       job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n       LOG.info(\"Adding job token for \" + oldJobIDString\n           + \" to jobTokenSecretManager\");\n \n       // Upload the jobTokens onto the remote FS so that ContainerManager can\n       // localize it to be used by the Containers(tasks)\n       Credentials tokenStorage \u003d new Credentials();\n       TokenCache.setJobToken(job.jobToken, tokenStorage);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         tokenStorage.addAll(job.fsTokens);\n       }\n-\n-      Path remoteJobTokenFile \u003d\n-          new Path(job.remoteJobSubmitDir,\n-              MRJobConfig.APPLICATION_TOKENS_FILE);\n-      tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n-      LOG.info(\"Writing back the job-token file on the remote file system:\"\n-          + remoteJobTokenFile.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void setup(JobImpl job) throws IOException {\n\n      String oldJobIDString \u003d job.oldJobId.toString();\n      String user \u003d \n        UserGroupInformation.getCurrentUser().getShortUserName();\n      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n      }\n\n      job.remoteJobSubmitDir \u003d\n          FileSystem.get(job.conf).makeQualified(\n              new Path(path, oldJobIDString));\n      job.remoteJobConfFile \u003d\n          new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n\n      // Prepare the TaskAttemptListener server for authentication of Containers\n      // TaskAttemptListener gets the information via jobTokenSecretManager.\n      JobTokenIdentifier identifier \u003d\n          new JobTokenIdentifier(new Text(oldJobIDString));\n      job.jobToken \u003d\n          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n      job.jobToken.setService(identifier.getJobId());\n      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n      // can authenticate containers(tasks)\n      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n      LOG.info(\"Adding job token for \" + oldJobIDString\n          + \" to jobTokenSecretManager\");\n\n      // Upload the jobTokens onto the remote FS so that ContainerManager can\n      // localize it to be used by the Containers(tasks)\n      Credentials tokenStorage \u003d new Credentials();\n      TokenCache.setJobToken(job.jobToken, tokenStorage);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        tokenStorage.addAll(job.fsTokens);\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
      "extendedDetails": {}
    },
    "f24dcb3449c77da665058427bc7fa480cad507fc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2907. Changed log level for various messages in ResourceManager from INFO to DEBUG. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1179178 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/10/11 4:56 AM",
      "commitName": "f24dcb3449c77da665058427bc7fa480cad507fc",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "29/09/11 11:47 PM",
      "commitNameOld": "964d4a1666441660957a028db33aad560decbe18",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 5.21,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,45 @@\n     protected void setup(JobImpl job) throws IOException {\n \n       String oldJobIDString \u003d job.oldJobId.toString();\n       String user \u003d \n         UserGroupInformation.getCurrentUser().getShortUserName();\n       Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n-      LOG.info(\"DEBUG --- startJobs:\"\n-          + \" parent\u003d\"\n-          + path + \" child\u003d\"\n-          + oldJobIDString);\n+      if(LOG.isDebugEnabled()) {\n+        LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n+      }\n \n       job.remoteJobSubmitDir \u003d\n           FileSystem.get(job.conf).makeQualified(\n               new Path(path, oldJobIDString));\n       job.remoteJobConfFile \u003d\n           new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n \n       // Prepare the TaskAttemptListener server for authentication of Containers\n       // TaskAttemptListener gets the information via jobTokenSecretManager.\n       JobTokenIdentifier identifier \u003d\n           new JobTokenIdentifier(new Text(oldJobIDString));\n       job.jobToken \u003d\n           new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n       job.jobToken.setService(identifier.getJobId());\n       // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n       // can authenticate containers(tasks)\n       job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n       LOG.info(\"Adding job token for \" + oldJobIDString\n           + \" to jobTokenSecretManager\");\n \n       // Upload the jobTokens onto the remote FS so that ContainerManager can\n       // localize it to be used by the Containers(tasks)\n       Credentials tokenStorage \u003d new Credentials();\n       TokenCache.setJobToken(job.jobToken, tokenStorage);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         tokenStorage.addAll(job.fsTokens);\n       }\n \n       Path remoteJobTokenFile \u003d\n           new Path(job.remoteJobSubmitDir,\n               MRJobConfig.APPLICATION_TOKENS_FILE);\n       tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n       LOG.info(\"Writing back the job-token file on the remote file system:\"\n           + remoteJobTokenFile.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void setup(JobImpl job) throws IOException {\n\n      String oldJobIDString \u003d job.oldJobId.toString();\n      String user \u003d \n        UserGroupInformation.getCurrentUser().getShortUserName();\n      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n      if(LOG.isDebugEnabled()) {\n        LOG.debug(\"startJobs: parent\u003d\" + path + \" child\u003d\" + oldJobIDString);\n      }\n\n      job.remoteJobSubmitDir \u003d\n          FileSystem.get(job.conf).makeQualified(\n              new Path(path, oldJobIDString));\n      job.remoteJobConfFile \u003d\n          new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n\n      // Prepare the TaskAttemptListener server for authentication of Containers\n      // TaskAttemptListener gets the information via jobTokenSecretManager.\n      JobTokenIdentifier identifier \u003d\n          new JobTokenIdentifier(new Text(oldJobIDString));\n      job.jobToken \u003d\n          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n      job.jobToken.setService(identifier.getJobId());\n      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n      // can authenticate containers(tasks)\n      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n      LOG.info(\"Adding job token for \" + oldJobIDString\n          + \" to jobTokenSecretManager\");\n\n      // Upload the jobTokens onto the remote FS so that ContainerManager can\n      // localize it to be used by the Containers(tasks)\n      Credentials tokenStorage \u003d new Credentials();\n      TokenCache.setJobToken(job.jobToken, tokenStorage);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        tokenStorage.addAll(job.fsTokens);\n      }\n\n      Path remoteJobTokenFile \u003d\n          new Path(job.remoteJobSubmitDir,\n              MRJobConfig.APPLICATION_TOKENS_FILE);\n      tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n      LOG.info(\"Writing back the job-token file on the remote file system:\"\n          + remoteJobTokenFile.toString());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
      "extendedDetails": {}
    },
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 11:28 AM",
      "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/09/11 3:55 PM",
      "commitNameOld": "a3e8f6836b489f8f2ddd785ae038df729c85059f",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 7.81,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n     protected void setup(JobImpl job) throws IOException {\n \n       String oldJobIDString \u003d job.oldJobId.toString();\n       String user \u003d \n         UserGroupInformation.getCurrentUser().getShortUserName();\n       Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n       LOG.info(\"DEBUG --- startJobs:\"\n           + \" parent\u003d\"\n           + path + \" child\u003d\"\n           + oldJobIDString);\n \n       job.remoteJobSubmitDir \u003d\n           FileSystem.get(job.conf).makeQualified(\n               new Path(path, oldJobIDString));\n       job.remoteJobConfFile \u003d\n-          new Path(job.remoteJobSubmitDir, MRConstants.JOB_CONF_FILE);\n+          new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n \n       // Prepare the TaskAttemptListener server for authentication of Containers\n       // TaskAttemptListener gets the information via jobTokenSecretManager.\n       JobTokenIdentifier identifier \u003d\n           new JobTokenIdentifier(new Text(oldJobIDString));\n       job.jobToken \u003d\n           new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n       job.jobToken.setService(identifier.getJobId());\n       // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n       // can authenticate containers(tasks)\n       job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n       LOG.info(\"Adding job token for \" + oldJobIDString\n           + \" to jobTokenSecretManager\");\n \n       // Upload the jobTokens onto the remote FS so that ContainerManager can\n       // localize it to be used by the Containers(tasks)\n       Credentials tokenStorage \u003d new Credentials();\n       TokenCache.setJobToken(job.jobToken, tokenStorage);\n \n       if (UserGroupInformation.isSecurityEnabled()) {\n         tokenStorage.addAll(job.fsTokens);\n       }\n \n       Path remoteJobTokenFile \u003d\n           new Path(job.remoteJobSubmitDir,\n-              MRConstants.APPLICATION_TOKENS_FILE);\n+              MRJobConfig.APPLICATION_TOKENS_FILE);\n       tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n       LOG.info(\"Writing back the job-token file on the remote file system:\"\n           + remoteJobTokenFile.toString());\n     }\n\\ No newline at end of file\n",
      "actualSource": "    protected void setup(JobImpl job) throws IOException {\n\n      String oldJobIDString \u003d job.oldJobId.toString();\n      String user \u003d \n        UserGroupInformation.getCurrentUser().getShortUserName();\n      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n      LOG.info(\"DEBUG --- startJobs:\"\n          + \" parent\u003d\"\n          + path + \" child\u003d\"\n          + oldJobIDString);\n\n      job.remoteJobSubmitDir \u003d\n          FileSystem.get(job.conf).makeQualified(\n              new Path(path, oldJobIDString));\n      job.remoteJobConfFile \u003d\n          new Path(job.remoteJobSubmitDir, MRJobConfig.JOB_CONF_FILE);\n\n      // Prepare the TaskAttemptListener server for authentication of Containers\n      // TaskAttemptListener gets the information via jobTokenSecretManager.\n      JobTokenIdentifier identifier \u003d\n          new JobTokenIdentifier(new Text(oldJobIDString));\n      job.jobToken \u003d\n          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n      job.jobToken.setService(identifier.getJobId());\n      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n      // can authenticate containers(tasks)\n      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n      LOG.info(\"Adding job token for \" + oldJobIDString\n          + \" to jobTokenSecretManager\");\n\n      // Upload the jobTokens onto the remote FS so that ContainerManager can\n      // localize it to be used by the Containers(tasks)\n      Credentials tokenStorage \u003d new Credentials();\n      TokenCache.setJobToken(job.jobToken, tokenStorage);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        tokenStorage.addAll(job.fsTokens);\n      }\n\n      Path remoteJobTokenFile \u003d\n          new Path(job.remoteJobSubmitDir,\n              MRJobConfig.APPLICATION_TOKENS_FILE);\n      tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n      LOG.info(\"Writing back the job-token file on the remote file system:\"\n          + remoteJobTokenFile.toString());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    protected void setup(JobImpl job) throws IOException {\n\n      String oldJobIDString \u003d job.oldJobId.toString();\n      String user \u003d \n        UserGroupInformation.getCurrentUser().getShortUserName();\n      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n      LOG.info(\"DEBUG --- startJobs:\"\n          + \" parent\u003d\"\n          + path + \" child\u003d\"\n          + oldJobIDString);\n\n      job.remoteJobSubmitDir \u003d\n          FileSystem.get(job.conf).makeQualified(\n              new Path(path, oldJobIDString));\n      job.remoteJobConfFile \u003d\n          new Path(job.remoteJobSubmitDir, MRConstants.JOB_CONF_FILE);\n\n      // Prepare the TaskAttemptListener server for authentication of Containers\n      // TaskAttemptListener gets the information via jobTokenSecretManager.\n      JobTokenIdentifier identifier \u003d\n          new JobTokenIdentifier(new Text(oldJobIDString));\n      job.jobToken \u003d\n          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n      job.jobToken.setService(identifier.getJobId());\n      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n      // can authenticate containers(tasks)\n      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n      LOG.info(\"Adding job token for \" + oldJobIDString\n          + \" to jobTokenSecretManager\");\n\n      // Upload the jobTokens onto the remote FS so that ContainerManager can\n      // localize it to be used by the Containers(tasks)\n      Credentials tokenStorage \u003d new Credentials();\n      TokenCache.setJobToken(job.jobToken, tokenStorage);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        tokenStorage.addAll(job.fsTokens);\n      }\n\n      Path remoteJobTokenFile \u003d\n          new Path(job.remoteJobSubmitDir,\n              MRConstants.APPLICATION_TOKENS_FILE);\n      tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n      LOG.info(\"Writing back the job-token file on the remote file system:\"\n          + remoteJobTokenFile.toString());\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,46 @@\n+    protected void setup(JobImpl job) throws IOException {\n+\n+      String oldJobIDString \u003d job.oldJobId.toString();\n+      String user \u003d \n+        UserGroupInformation.getCurrentUser().getShortUserName();\n+      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n+      LOG.info(\"DEBUG --- startJobs:\"\n+          + \" parent\u003d\"\n+          + path + \" child\u003d\"\n+          + oldJobIDString);\n+\n+      job.remoteJobSubmitDir \u003d\n+          FileSystem.get(job.conf).makeQualified(\n+              new Path(path, oldJobIDString));\n+      job.remoteJobConfFile \u003d\n+          new Path(job.remoteJobSubmitDir, MRConstants.JOB_CONF_FILE);\n+\n+      // Prepare the TaskAttemptListener server for authentication of Containers\n+      // TaskAttemptListener gets the information via jobTokenSecretManager.\n+      JobTokenIdentifier identifier \u003d\n+          new JobTokenIdentifier(new Text(oldJobIDString));\n+      job.jobToken \u003d\n+          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n+      job.jobToken.setService(identifier.getJobId());\n+      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n+      // can authenticate containers(tasks)\n+      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n+      LOG.info(\"Adding job token for \" + oldJobIDString\n+          + \" to jobTokenSecretManager\");\n+\n+      // Upload the jobTokens onto the remote FS so that ContainerManager can\n+      // localize it to be used by the Containers(tasks)\n+      Credentials tokenStorage \u003d new Credentials();\n+      TokenCache.setJobToken(job.jobToken, tokenStorage);\n+\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        tokenStorage.addAll(job.fsTokens);\n+      }\n+\n+      Path remoteJobTokenFile \u003d\n+          new Path(job.remoteJobSubmitDir,\n+              MRConstants.APPLICATION_TOKENS_FILE);\n+      tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n+      LOG.info(\"Writing back the job-token file on the remote file system:\"\n+          + remoteJobTokenFile.toString());\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void setup(JobImpl job) throws IOException {\n\n      String oldJobIDString \u003d job.oldJobId.toString();\n      String user \u003d \n        UserGroupInformation.getCurrentUser().getShortUserName();\n      Path path \u003d MRApps.getStagingAreaDir(job.conf, user);\n      LOG.info(\"DEBUG --- startJobs:\"\n          + \" parent\u003d\"\n          + path + \" child\u003d\"\n          + oldJobIDString);\n\n      job.remoteJobSubmitDir \u003d\n          FileSystem.get(job.conf).makeQualified(\n              new Path(path, oldJobIDString));\n      job.remoteJobConfFile \u003d\n          new Path(job.remoteJobSubmitDir, MRConstants.JOB_CONF_FILE);\n\n      // Prepare the TaskAttemptListener server for authentication of Containers\n      // TaskAttemptListener gets the information via jobTokenSecretManager.\n      JobTokenIdentifier identifier \u003d\n          new JobTokenIdentifier(new Text(oldJobIDString));\n      job.jobToken \u003d\n          new Token\u003cJobTokenIdentifier\u003e(identifier, job.jobTokenSecretManager);\n      job.jobToken.setService(identifier.getJobId());\n      // Add it to the jobTokenSecretManager so that TaskAttemptListener server\n      // can authenticate containers(tasks)\n      job.jobTokenSecretManager.addTokenForJob(oldJobIDString, job.jobToken);\n      LOG.info(\"Adding job token for \" + oldJobIDString\n          + \" to jobTokenSecretManager\");\n\n      // Upload the jobTokens onto the remote FS so that ContainerManager can\n      // localize it to be used by the Containers(tasks)\n      Credentials tokenStorage \u003d new Credentials();\n      TokenCache.setJobToken(job.jobToken, tokenStorage);\n\n      if (UserGroupInformation.isSecurityEnabled()) {\n        tokenStorage.addAll(job.fsTokens);\n      }\n\n      Path remoteJobTokenFile \u003d\n          new Path(job.remoteJobSubmitDir,\n              MRConstants.APPLICATION_TOKENS_FILE);\n      tokenStorage.writeTokenStorageFile(remoteJobTokenFile, job.conf);\n      LOG.info(\"Writing back the job-token file on the remote file system:\"\n          + remoteJobTokenFile.toString());\n    }",
      "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/job/impl/JobImpl.java"
    }
  }
}