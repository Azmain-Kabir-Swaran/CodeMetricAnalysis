{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "WebHdfsFileSystem.java",
  "functionName": "listStatusBatch",
  "functionId": "listStatusBatch___f-Path__token-byte[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
  "functionStartLine": 1720,
  "functionEndLine": 1743,
  "numCommitsSeen": 73,
  "timeTaken": 2556,
  "changeHistory": [
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
    "8a40953058d50d421d62b71067a13b626b3cba1f"
  ],
  "changeHistoryShort": {
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": "Ybodychange",
    "8a40953058d50d421d62b71067a13b626b3cba1f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6984. Serialize FileStatus via protobuf.\n",
      "commitDate": "02/08/17 12:12 PM",
      "commitName": "12e44e7bdaf53d3720a89d32f0cc2717241bd6b2",
      "commitAuthor": "Chris Douglas",
      "commitDateOld": "05/07/17 11:10 AM",
      "commitNameOld": "6436768baf1b2ac05f6786edcd76fd3a66c03eaa",
      "commitAuthorOld": "Mingliang Liu",
      "daysBetweenCommits": 28.04,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,24 @@\n   public DirectoryEntries listStatusBatch(Path f, byte[] token) throws\n       FileNotFoundException, IOException {\n     byte[] prevKey \u003d EMPTY_ARRAY;\n     if (token !\u003d null) {\n       prevKey \u003d token;\n     }\n     DirectoryListing listing \u003d new FsPathResponseRunner\u003cDirectoryListing\u003e(\n         GetOpParam.Op.LISTSTATUS_BATCH,\n         f, new StartAfterParam(new String(prevKey, Charsets.UTF_8))) {\n       @Override\n       DirectoryListing decodeResponse(Map\u003c?, ?\u003e json) throws IOException {\n         return JsonUtilClient.toDirectoryListing(json);\n       }\n     }.run();\n     // Qualify the returned FileStatus array\n+    final URI fsUri \u003d getUri();\n     final HdfsFileStatus[] statuses \u003d listing.getPartialListing();\n     FileStatus[] qualified \u003d new FileStatus[statuses.length];\n     for (int i \u003d 0; i \u003c statuses.length; i++) {\n-      qualified[i] \u003d makeQualified(statuses[i], f);\n+      qualified[i] \u003d statuses[i].makeQualified(fsUri, f);\n     }\n     return new DirectoryEntries(qualified, listing.getLastName(),\n         listing.hasMore());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public DirectoryEntries listStatusBatch(Path f, byte[] token) throws\n      FileNotFoundException, IOException {\n    byte[] prevKey \u003d EMPTY_ARRAY;\n    if (token !\u003d null) {\n      prevKey \u003d token;\n    }\n    DirectoryListing listing \u003d new FsPathResponseRunner\u003cDirectoryListing\u003e(\n        GetOpParam.Op.LISTSTATUS_BATCH,\n        f, new StartAfterParam(new String(prevKey, Charsets.UTF_8))) {\n      @Override\n      DirectoryListing decodeResponse(Map\u003c?, ?\u003e json) throws IOException {\n        return JsonUtilClient.toDirectoryListing(json);\n      }\n    }.run();\n    // Qualify the returned FileStatus array\n    final URI fsUri \u003d getUri();\n    final HdfsFileStatus[] statuses \u003d listing.getPartialListing();\n    FileStatus[] qualified \u003d new FileStatus[statuses.length];\n    for (int i \u003d 0; i \u003c statuses.length; i++) {\n      qualified[i] \u003d statuses[i].makeQualified(fsUri, f);\n    }\n    return new DirectoryEntries(qualified, listing.getLastName(),\n        listing.hasMore());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java",
      "extendedDetails": {}
    },
    "8a40953058d50d421d62b71067a13b626b3cba1f": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-10823. Implement HttpFSFileSystem#listStatusIterator.\n",
      "commitDate": "16/09/16 3:37 PM",
      "commitName": "8a40953058d50d421d62b71067a13b626b3cba1f",
      "commitAuthor": "Andrew Wang",
      "diff": "@@ -0,0 +1,23 @@\n+  public DirectoryEntries listStatusBatch(Path f, byte[] token) throws\n+      FileNotFoundException, IOException {\n+    byte[] prevKey \u003d EMPTY_ARRAY;\n+    if (token !\u003d null) {\n+      prevKey \u003d token;\n+    }\n+    DirectoryListing listing \u003d new FsPathResponseRunner\u003cDirectoryListing\u003e(\n+        GetOpParam.Op.LISTSTATUS_BATCH,\n+        f, new StartAfterParam(new String(prevKey, Charsets.UTF_8))) {\n+      @Override\n+      DirectoryListing decodeResponse(Map\u003c?, ?\u003e json) throws IOException {\n+        return JsonUtilClient.toDirectoryListing(json);\n+      }\n+    }.run();\n+    // Qualify the returned FileStatus array\n+    final HdfsFileStatus[] statuses \u003d listing.getPartialListing();\n+    FileStatus[] qualified \u003d new FileStatus[statuses.length];\n+    for (int i \u003d 0; i \u003c statuses.length; i++) {\n+      qualified[i] \u003d makeQualified(statuses[i], f);\n+    }\n+    return new DirectoryEntries(qualified, listing.getLastName(),\n+        listing.hasMore());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public DirectoryEntries listStatusBatch(Path f, byte[] token) throws\n      FileNotFoundException, IOException {\n    byte[] prevKey \u003d EMPTY_ARRAY;\n    if (token !\u003d null) {\n      prevKey \u003d token;\n    }\n    DirectoryListing listing \u003d new FsPathResponseRunner\u003cDirectoryListing\u003e(\n        GetOpParam.Op.LISTSTATUS_BATCH,\n        f, new StartAfterParam(new String(prevKey, Charsets.UTF_8))) {\n      @Override\n      DirectoryListing decodeResponse(Map\u003c?, ?\u003e json) throws IOException {\n        return JsonUtilClient.toDirectoryListing(json);\n      }\n    }.run();\n    // Qualify the returned FileStatus array\n    final HdfsFileStatus[] statuses \u003d listing.getPartialListing();\n    FileStatus[] qualified \u003d new FileStatus[statuses.length];\n    for (int i \u003d 0; i \u003c statuses.length; i++) {\n      qualified[i] \u003d makeQualified(statuses[i], f);\n    }\n    return new DirectoryEntries(qualified, listing.getLastName(),\n        listing.hasMore());\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/hdfs/web/WebHdfsFileSystem.java"
    }
  }
}