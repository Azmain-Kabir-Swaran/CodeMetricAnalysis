{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "SubApplicationEntityReader.java",
  "functionName": "constructFilterListBasedOnFields",
  "functionId": "constructFilterListBasedOnFields___cfsInFields-Set__String__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
  "functionStartLine": 282,
  "functionEndLine": 307,
  "numCommitsSeen": 4,
  "timeTaken": 2607,
  "changeHistory": [
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f"
  ],
  "changeHistoryShort": {
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d": "Ymultichange(Yparameterchange,Ybodychange)",
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": "Yfilerename",
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": "Yintroduced"
  },
  "changeHistoryDetails": {
    "29acea5000337a7f529bb1810a2af2b0af4d5f1d": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-7581. HBase filters are not constructed correctly in ATSv2. Contributed by Habio Chen.\n",
      "commitDate": "20/03/18 7:41 PM",
      "commitName": "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
      "commitAuthor": "Rohith Sharma K S",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-7581. HBase filters are not constructed correctly in ATSv2. Contributed by Habio Chen.\n",
          "commitDate": "20/03/18 7:41 PM",
          "commitName": "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 7:00 AM",
          "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 31.49,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,26 @@\n-  protected FilterList constructFilterListBasedOnFields() throws IOException {\n+  protected FilterList constructFilterListBasedOnFields(Set\u003cString\u003e cfsInFields)\n+      throws IOException {\n     if (!needCreateFilterListBasedOnFields()) {\n       // Fetch all the columns. No need of a filter.\n       return null;\n     }\n     FilterList listBasedOnFields \u003d new FilterList(Operator.MUST_PASS_ONE);\n     FilterList infoColFamilyList \u003d new FilterList();\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d new FamilyFilter(CompareOp.EQUAL,\n         new BinaryComparator(SubApplicationColumnFamily.INFO.getBytes()));\n     infoColFamilyList.addFilter(infoColumnFamily);\n     if (fetchPartialColsFromInfoFamily()) {\n       // We can fetch only some of the columns from info family.\n       infoColFamilyList.addFilter(createFilterListForColsOfInfoFamily());\n     } else {\n       // Exclude column prefixes in info column family which are not required\n       // based on fields to retrieve.\n       excludeFieldsFromInfoColFamily(infoColFamilyList);\n     }\n     listBasedOnFields.addFilter(infoColFamilyList);\n-    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields);\n+    cfsInFields.add(\n+        Bytes.toString(SubApplicationColumnFamily.INFO.getBytes()));\n+    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields, cfsInFields);\n     return listBasedOnFields;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFields(Set\u003cString\u003e cfsInFields)\n      throws IOException {\n    if (!needCreateFilterListBasedOnFields()) {\n      // Fetch all the columns. No need of a filter.\n      return null;\n    }\n    FilterList listBasedOnFields \u003d new FilterList(Operator.MUST_PASS_ONE);\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d new FamilyFilter(CompareOp.EQUAL,\n        new BinaryComparator(SubApplicationColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    if (fetchPartialColsFromInfoFamily()) {\n      // We can fetch only some of the columns from info family.\n      infoColFamilyList.addFilter(createFilterListForColsOfInfoFamily());\n    } else {\n      // Exclude column prefixes in info column family which are not required\n      // based on fields to retrieve.\n      excludeFieldsFromInfoColFamily(infoColFamilyList);\n    }\n    listBasedOnFields.addFilter(infoColFamilyList);\n    cfsInFields.add(\n        Bytes.toString(SubApplicationColumnFamily.INFO.getBytes()));\n    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields, cfsInFields);\n    return listBasedOnFields;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[cfsInFields-Set\u003cString\u003e]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7581. HBase filters are not constructed correctly in ATSv2. Contributed by Habio Chen.\n",
          "commitDate": "20/03/18 7:41 PM",
          "commitName": "29acea5000337a7f529bb1810a2af2b0af4d5f1d",
          "commitAuthor": "Rohith Sharma K S",
          "commitDateOld": "17/02/18 7:00 AM",
          "commitNameOld": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
          "commitAuthorOld": "Rohith Sharma K S",
          "daysBetweenCommits": 31.49,
          "commitsBetweenForRepo": 209,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,26 @@\n-  protected FilterList constructFilterListBasedOnFields() throws IOException {\n+  protected FilterList constructFilterListBasedOnFields(Set\u003cString\u003e cfsInFields)\n+      throws IOException {\n     if (!needCreateFilterListBasedOnFields()) {\n       // Fetch all the columns. No need of a filter.\n       return null;\n     }\n     FilterList listBasedOnFields \u003d new FilterList(Operator.MUST_PASS_ONE);\n     FilterList infoColFamilyList \u003d new FilterList();\n     // By default fetch everything in INFO column family.\n     FamilyFilter infoColumnFamily \u003d new FamilyFilter(CompareOp.EQUAL,\n         new BinaryComparator(SubApplicationColumnFamily.INFO.getBytes()));\n     infoColFamilyList.addFilter(infoColumnFamily);\n     if (fetchPartialColsFromInfoFamily()) {\n       // We can fetch only some of the columns from info family.\n       infoColFamilyList.addFilter(createFilterListForColsOfInfoFamily());\n     } else {\n       // Exclude column prefixes in info column family which are not required\n       // based on fields to retrieve.\n       excludeFieldsFromInfoColFamily(infoColFamilyList);\n     }\n     listBasedOnFields.addFilter(infoColFamilyList);\n-    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields);\n+    cfsInFields.add(\n+        Bytes.toString(SubApplicationColumnFamily.INFO.getBytes()));\n+    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields, cfsInFields);\n     return listBasedOnFields;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  protected FilterList constructFilterListBasedOnFields(Set\u003cString\u003e cfsInFields)\n      throws IOException {\n    if (!needCreateFilterListBasedOnFields()) {\n      // Fetch all the columns. No need of a filter.\n      return null;\n    }\n    FilterList listBasedOnFields \u003d new FilterList(Operator.MUST_PASS_ONE);\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d new FamilyFilter(CompareOp.EQUAL,\n        new BinaryComparator(SubApplicationColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    if (fetchPartialColsFromInfoFamily()) {\n      // We can fetch only some of the columns from info family.\n      infoColFamilyList.addFilter(createFilterListForColsOfInfoFamily());\n    } else {\n      // Exclude column prefixes in info column family which are not required\n      // based on fields to retrieve.\n      excludeFieldsFromInfoColFamily(infoColFamilyList);\n    }\n    listBasedOnFields.addFilter(infoColFamilyList);\n    cfsInFields.add(\n        Bytes.toString(SubApplicationColumnFamily.INFO.getBytes()));\n    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields, cfsInFields);\n    return listBasedOnFields;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
          "extendedDetails": {}
        }
      ]
    },
    "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7919. Refactor timelineservice-hbase module into submodules. Contributed by Haibo Chen.\n",
      "commitDate": "17/02/18 7:00 AM",
      "commitName": "9af30d46c6e82332a8eda20cb3eb5f987e25e7a2",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "17/02/18 3:24 AM",
      "commitNameOld": "a1e56a62863d8d494af309ec5f476c4b7e4d5ef9",
      "commitAuthorOld": "Arun Suresh",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() throws IOException {\n    if (!needCreateFilterListBasedOnFields()) {\n      // Fetch all the columns. No need of a filter.\n      return null;\n    }\n    FilterList listBasedOnFields \u003d new FilterList(Operator.MUST_PASS_ONE);\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d new FamilyFilter(CompareOp.EQUAL,\n        new BinaryComparator(SubApplicationColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    if (fetchPartialColsFromInfoFamily()) {\n      // We can fetch only some of the columns from info family.\n      infoColFamilyList.addFilter(createFilterListForColsOfInfoFamily());\n    } else {\n      // Exclude column prefixes in info column family which are not required\n      // based on fields to retrieve.\n      excludeFieldsFromInfoColFamily(infoColFamilyList);\n    }\n    listBasedOnFields.addFilter(infoColFamilyList);\n    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields);\n    return listBasedOnFields;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/hadoop-yarn-server-timelineservice-hbase-client/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java"
      }
    },
    "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6861. Reader API for sub application entities (Rohith Sharma K S via Varun Saxena)\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "b2efebdd077ecb7b6ffe7fb8a957dadb0e78290f",
      "commitAuthor": "Varun Saxena",
      "diff": "@@ -0,0 +1,23 @@\n+  protected FilterList constructFilterListBasedOnFields() throws IOException {\n+    if (!needCreateFilterListBasedOnFields()) {\n+      // Fetch all the columns. No need of a filter.\n+      return null;\n+    }\n+    FilterList listBasedOnFields \u003d new FilterList(Operator.MUST_PASS_ONE);\n+    FilterList infoColFamilyList \u003d new FilterList();\n+    // By default fetch everything in INFO column family.\n+    FamilyFilter infoColumnFamily \u003d new FamilyFilter(CompareOp.EQUAL,\n+        new BinaryComparator(SubApplicationColumnFamily.INFO.getBytes()));\n+    infoColFamilyList.addFilter(infoColumnFamily);\n+    if (fetchPartialColsFromInfoFamily()) {\n+      // We can fetch only some of the columns from info family.\n+      infoColFamilyList.addFilter(createFilterListForColsOfInfoFamily());\n+    } else {\n+      // Exclude column prefixes in info column family which are not required\n+      // based on fields to retrieve.\n+      excludeFieldsFromInfoColFamily(infoColFamilyList);\n+    }\n+    listBasedOnFields.addFilter(infoColFamilyList);\n+    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields);\n+    return listBasedOnFields;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  protected FilterList constructFilterListBasedOnFields() throws IOException {\n    if (!needCreateFilterListBasedOnFields()) {\n      // Fetch all the columns. No need of a filter.\n      return null;\n    }\n    FilterList listBasedOnFields \u003d new FilterList(Operator.MUST_PASS_ONE);\n    FilterList infoColFamilyList \u003d new FilterList();\n    // By default fetch everything in INFO column family.\n    FamilyFilter infoColumnFamily \u003d new FamilyFilter(CompareOp.EQUAL,\n        new BinaryComparator(SubApplicationColumnFamily.INFO.getBytes()));\n    infoColFamilyList.addFilter(infoColumnFamily);\n    if (fetchPartialColsFromInfoFamily()) {\n      // We can fetch only some of the columns from info family.\n      infoColFamilyList.addFilter(createFilterListForColsOfInfoFamily());\n    } else {\n      // Exclude column prefixes in info column family which are not required\n      // based on fields to retrieve.\n      excludeFieldsFromInfoColFamily(infoColFamilyList);\n    }\n    listBasedOnFields.addFilter(infoColFamilyList);\n    updateFilterForConfsAndMetricsToRetrieve(listBasedOnFields);\n    return listBasedOnFields;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice-hbase/src/main/java/org/apache/hadoop/yarn/server/timelineservice/storage/reader/SubApplicationEntityReader.java"
    }
  }
}