{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LdapGroupsMapping.java",
  "functionName": "setConf",
  "functionId": "setConf___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
  "functionStartLine": 709,
  "functionEndLine": 790,
  "numCommitsSeen": 29,
  "timeTaken": 5034,
  "changeHistory": [
    "f257497b0f964c171961be4ad527983f24f9be31",
    "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000",
    "76efeacd5f8563bd02b5b2f09c59cee3acdad8c7",
    "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9",
    "2216bde322961c0fe33b5822510880a65d5c45fd",
    "a2121cb0d907be439d19cd1165a0371b37a5fe68",
    "6f0aa75121224589fe1e20630c597f851ef3bed2",
    "182fc1986a984ed0be6bed297390a830c2305af1",
    "722aa1db1f2ac3db0e70063022436a90f90643f3",
    "82128774156c30a535b62d764bb6cf9c8d2f3a3b",
    "8bf6f0b70396e8f2d3b37e6da194b19f357e846a",
    "a4f1292a53da3c0bbb75de459bc141ef722dd148",
    "ca8f112d2f422c11c62bb30660b60fb5fb275457",
    "3dc9aa480ab67be692014d6ade4ee6b1b0205cc0",
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855"
  ],
  "changeHistoryShort": {
    "f257497b0f964c171961be4ad527983f24f9be31": "Ybodychange",
    "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000": "Ybodychange",
    "76efeacd5f8563bd02b5b2f09c59cee3acdad8c7": "Ybodychange",
    "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9": "Ybodychange",
    "2216bde322961c0fe33b5822510880a65d5c45fd": "Ybodychange",
    "a2121cb0d907be439d19cd1165a0371b37a5fe68": "Ybodychange",
    "6f0aa75121224589fe1e20630c597f851ef3bed2": "Ybodychange",
    "182fc1986a984ed0be6bed297390a830c2305af1": "Ybodychange",
    "722aa1db1f2ac3db0e70063022436a90f90643f3": "Ybodychange",
    "82128774156c30a535b62d764bb6cf9c8d2f3a3b": "Ybodychange",
    "8bf6f0b70396e8f2d3b37e6da194b19f357e846a": "Ybodychange",
    "a4f1292a53da3c0bbb75de459bc141ef722dd148": "Ybodychange",
    "ca8f112d2f422c11c62bb30660b60fb5fb275457": "Ybodychange",
    "3dc9aa480ab67be692014d6ade4ee6b1b0205cc0": "Ybodychange",
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f257497b0f964c171961be4ad527983f24f9be31": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16299. [JDK 11] Build fails without specifying -Djavac.version\u003d11\n\nSigned-off-by: Takanobu Asanuma \u003ctasanuma@apache.org\u003e\n",
      "commitDate": "08/05/19 10:49 PM",
      "commitName": "f257497b0f964c171961be4ad527983f24f9be31",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "02/05/19 12:58 PM",
      "commitNameOld": "7a3188d054481b9bd563e337901e93476303ce7f",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 6.41,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,82 @@\n   public synchronized void setConf(Configuration conf) {\n     this.conf \u003d conf;\n     String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n       throw new RuntimeException(\"LDAP URL(s) are not configured\");\n     }\n     ldapUrls \u003d Iterators.cycle(urls);\n     currentLdapUrl \u003d ldapUrls.next();\n \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     if (useSsl) {\n       loadSslConf(conf);\n     }\n \n     initializeBindUsers();\n \n     String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n \n     // User search base which defaults to base dn.\n     userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n     LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n \n     // Group search base which defaults to base dn.\n     groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n     LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n \n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     memberOfAttr \u003d\n         conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n     // if memberOf attribute is set, resolve group names from the attribute\n     // of user objects.\n     useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n     groupHierarchyLevels \u003d\n         conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n         DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n     String[] returningAttributes;\n     if (useOneQuery) {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n     } else {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr};\n     }\n     SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n-    ldapCxtFactoryClass \u003d conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,\n-        LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);\n+    // LDAP_CTX_FACTORY_CLASS_DEFAULT is not open to unnamed modules\n+    // in Java 11+, so the default value is set to null to avoid\n+    // creating the instance for now.\n+    Class\u003c? extends InitialContextFactory\u003e ldapCtxFactoryClass \u003d\n+        conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY, null,\n+        InitialContextFactory.class);\n+    if (ldapCtxFactoryClass !\u003d null) {\n+      ldapCtxFactoryClassName \u003d ldapCtxFactoryClass.getName();\n+    } else {\n+      // The default value is set afterwards.\n+      ldapCtxFactoryClassName \u003d LDAP_CTX_FACTORY_CLASS_DEFAULT;\n+    }\n \n     this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n         LDAP_NUM_ATTEMPTS_DEFAULT);\n     this.numAttemptsBeforeFailover \u003d conf.getInt(\n         LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n         LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    this.conf \u003d conf;\n    String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n      throw new RuntimeException(\"LDAP URL(s) are not configured\");\n    }\n    ldapUrls \u003d Iterators.cycle(urls);\n    currentLdapUrl \u003d ldapUrls.next();\n\n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    if (useSsl) {\n      loadSslConf(conf);\n    }\n\n    initializeBindUsers();\n\n    String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n\n    // User search base which defaults to base dn.\n    userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n\n    // Group search base which defaults to base dn.\n    groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    groupHierarchyLevels \u003d\n        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n        DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    // LDAP_CTX_FACTORY_CLASS_DEFAULT is not open to unnamed modules\n    // in Java 11+, so the default value is set to null to avoid\n    // creating the instance for now.\n    Class\u003c? extends InitialContextFactory\u003e ldapCtxFactoryClass \u003d\n        conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY, null,\n        InitialContextFactory.class);\n    if (ldapCtxFactoryClass !\u003d null) {\n      ldapCtxFactoryClassName \u003d ldapCtxFactoryClass.getName();\n    } else {\n      // The default value is set afterwards.\n      ldapCtxFactoryClassName \u003d LDAP_CTX_FACTORY_CLASS_DEFAULT;\n    }\n\n    this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n        LDAP_NUM_ATTEMPTS_DEFAULT);\n    this.numAttemptsBeforeFailover \u003d conf.getInt(\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-16125. Support multiple bind users in LdapGroupsMapping. Contributed by Lukas Majercak.\n",
      "commitDate": "25/02/19 1:39 PM",
      "commitName": "ba4e7bd1928a73d21a3dc5afb95f0d35d5b63000",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "12/12/18 11:10 AM",
      "commitNameOld": "76efeacd5f8563bd02b5b2f09c59cee3acdad8c7",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 75.1,
      "commitsBetweenForRepo": 536,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,85 +1,72 @@\n   public synchronized void setConf(Configuration conf) {\n+    this.conf \u003d conf;\n     String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n       throw new RuntimeException(\"LDAP URL(s) are not configured\");\n     }\n     ldapUrls \u003d Iterators.cycle(urls);\n     currentLdapUrl \u003d ldapUrls.next();\n \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     if (useSsl) {\n       loadSslConf(conf);\n     }\n-    \n-    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n \n-    String alias \u003d conf.get(BIND_PASSWORD_ALIAS_KEY,\n-        BIND_PASSWORD_ALIAS_DEFAULT);\n-    bindPassword \u003d getPasswordFromCredentialProviders(conf, alias, \"\");\n-    if (bindPassword.isEmpty()) {\n-      bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY,\n-          BIND_PASSWORD_DEFAULT);\n-      if (bindPassword.isEmpty()) {\n-        bindPassword \u003d extractPassword(\n-            conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n-      }\n-    }\n+    initializeBindUsers();\n \n     String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n \n     // User search base which defaults to base dn.\n     userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n     LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n \n     // Group search base which defaults to base dn.\n     groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n     LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n \n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     memberOfAttr \u003d\n         conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n     // if memberOf attribute is set, resolve group names from the attribute\n     // of user objects.\n     useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n     groupHierarchyLevels \u003d\n         conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n         DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n     String[] returningAttributes;\n     if (useOneQuery) {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n     } else {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr};\n     }\n     SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n     ldapCxtFactoryClass \u003d conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,\n         LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);\n \n     this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n         LDAP_NUM_ATTEMPTS_DEFAULT);\n     this.numAttemptsBeforeFailover \u003d conf.getInt(\n         LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n         LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n-\n-    this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    this.conf \u003d conf;\n    String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n      throw new RuntimeException(\"LDAP URL(s) are not configured\");\n    }\n    ldapUrls \u003d Iterators.cycle(urls);\n    currentLdapUrl \u003d ldapUrls.next();\n\n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    if (useSsl) {\n      loadSslConf(conf);\n    }\n\n    initializeBindUsers();\n\n    String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n\n    // User search base which defaults to base dn.\n    userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n\n    // Group search base which defaults to base dn.\n    groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    groupHierarchyLevels \u003d\n        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n        DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    ldapCxtFactoryClass \u003d conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,\n        LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);\n\n    this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n        LDAP_NUM_ATTEMPTS_DEFAULT);\n    this.numAttemptsBeforeFailover \u003d conf.getInt(\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "76efeacd5f8563bd02b5b2f09c59cee3acdad8c7": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15995. Add ldap.bind.password.alias in LdapGroupsMapping to distinguish aliases when using multiple providers through CompositeGroupsMapping. Contributed by Lukas Majercak.\n",
      "commitDate": "12/12/18 11:10 AM",
      "commitName": "76efeacd5f8563bd02b5b2f09c59cee3acdad8c7",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "03/12/18 12:10 PM",
      "commitNameOld": "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,78 +1,85 @@\n   public synchronized void setConf(Configuration conf) {\n     String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n       throw new RuntimeException(\"LDAP URL(s) are not configured\");\n     }\n     ldapUrls \u003d Iterators.cycle(urls);\n     currentLdapUrl \u003d ldapUrls.next();\n \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     if (useSsl) {\n       loadSslConf(conf);\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n-    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n+\n+    String alias \u003d conf.get(BIND_PASSWORD_ALIAS_KEY,\n+        BIND_PASSWORD_ALIAS_DEFAULT);\n+    bindPassword \u003d getPasswordFromCredentialProviders(conf, alias, \"\");\n     if (bindPassword.isEmpty()) {\n-      bindPassword \u003d extractPassword(\n-          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n+      bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY,\n+          BIND_PASSWORD_DEFAULT);\n+      if (bindPassword.isEmpty()) {\n+        bindPassword \u003d extractPassword(\n+            conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n+      }\n     }\n-    \n+\n     String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n \n     // User search base which defaults to base dn.\n     userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n     LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n \n     // Group search base which defaults to base dn.\n     groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n     LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n \n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     memberOfAttr \u003d\n         conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n     // if memberOf attribute is set, resolve group names from the attribute\n     // of user objects.\n     useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n     groupHierarchyLevels \u003d\n         conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n         DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n     String[] returningAttributes;\n     if (useOneQuery) {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n     } else {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr};\n     }\n     SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n     ldapCxtFactoryClass \u003d conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,\n         LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);\n \n     this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n         LDAP_NUM_ATTEMPTS_DEFAULT);\n     this.numAttemptsBeforeFailover \u003d conf.getInt(\n         LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n         LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n      throw new RuntimeException(\"LDAP URL(s) are not configured\");\n    }\n    ldapUrls \u003d Iterators.cycle(urls);\n    currentLdapUrl \u003d ldapUrls.next();\n\n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    if (useSsl) {\n      loadSslConf(conf);\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n\n    String alias \u003d conf.get(BIND_PASSWORD_ALIAS_KEY,\n        BIND_PASSWORD_ALIAS_DEFAULT);\n    bindPassword \u003d getPasswordFromCredentialProviders(conf, alias, \"\");\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY,\n          BIND_PASSWORD_DEFAULT);\n      if (bindPassword.isEmpty()) {\n        bindPassword \u003d extractPassword(\n            conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n      }\n    }\n\n    String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n\n    // User search base which defaults to base dn.\n    userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n\n    // Group search base which defaults to base dn.\n    groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    groupHierarchyLevels \u003d\n        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n        DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    ldapCxtFactoryClass \u003d conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,\n        LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);\n\n    this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n        LDAP_NUM_ATTEMPTS_DEFAULT);\n    this.numAttemptsBeforeFailover \u003d conf.getInt(\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15950. Failover for LdapGroupsMapping. Contributed by Lukas Majercak.\n",
      "commitDate": "03/12/18 12:10 PM",
      "commitName": "c9a3aa64dc95b097c51070f71a3b1a2ad126b2b9",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "29/03/18 5:16 PM",
      "commitNameOld": "2216bde322961c0fe33b5822510880a65d5c45fd",
      "commitAuthorOld": "Konstantin V Shvachko",
      "daysBetweenCommits": 248.83,
      "commitsBetweenForRepo": 2455,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,78 @@\n   public synchronized void setConf(Configuration conf) {\n-    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n-    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n-      throw new RuntimeException(\"LDAP URL is not configured\");\n+    String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n+    if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n+      throw new RuntimeException(\"LDAP URL(s) are not configured\");\n     }\n+    ldapUrls \u003d Iterators.cycle(urls);\n+    currentLdapUrl \u003d ldapUrls.next();\n \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     if (useSsl) {\n       loadSslConf(conf);\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n \n-    //User search base which defaults to base dn.\n+    // User search base which defaults to base dn.\n     userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Usersearch baseDN: \" + userbaseDN);\n-    }\n+    LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n \n-    //Group search base which defaults to base dn.\n+    // Group search base which defaults to base dn.\n     groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n-    if (LOG.isDebugEnabled()) {\n-      LOG.debug(\"Groupsearch baseDN: \" + userbaseDN);\n-    }\n+    LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n \n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     memberOfAttr \u003d\n         conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n     // if memberOf attribute is set, resolve group names from the attribute\n     // of user objects.\n     useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n     groupHierarchyLevels \u003d\n         conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n-    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n+    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n+        DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n     String[] returningAttributes;\n     if (useOneQuery) {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n     } else {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr};\n     }\n     SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n+    ldapCxtFactoryClass \u003d conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,\n+        LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);\n+\n+    this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n+        LDAP_NUM_ATTEMPTS_DEFAULT);\n+    this.numAttemptsBeforeFailover \u003d conf.getInt(\n+        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n+        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n+\n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    String[] urls \u003d conf.getStrings(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (urls \u003d\u003d null || urls.length \u003d\u003d 0) {\n      throw new RuntimeException(\"LDAP URL(s) are not configured\");\n    }\n    ldapUrls \u003d Iterators.cycle(urls);\n    currentLdapUrl \u003d ldapUrls.next();\n\n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    if (useSsl) {\n      loadSslConf(conf);\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n\n    // User search base which defaults to base dn.\n    userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Usersearch baseDN: {}\", userbaseDN);\n\n    // Group search base which defaults to base dn.\n    groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n    LOG.debug(\"Groupsearch baseDN: {}\", groupbaseDN);\n\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    groupHierarchyLevels \u003d\n        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT,\n        DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    ldapCxtFactoryClass \u003d conf.getClass(LDAP_CTX_FACTORY_CLASS_KEY,\n        LDAP_CTX_FACTORY_CLASS_DEFAULT, InitialContextFactory.class);\n\n    this.numAttempts \u003d conf.getInt(LDAP_NUM_ATTEMPTS_KEY,\n        LDAP_NUM_ATTEMPTS_DEFAULT);\n    this.numAttemptsBeforeFailover \u003d conf.getInt(\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_KEY,\n        LDAP_NUM_ATTEMPTS_BEFORE_FAILOVER_DEFAULT);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "2216bde322961c0fe33b5822510880a65d5c45fd": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12862. LDAP Group Mapping over SSL can not specify trust store. Contributed by Wei-Chiu Chuang and Konstantin Shvachko.",
      "commitDate": "29/03/18 5:16 PM",
      "commitName": "2216bde322961c0fe33b5822510880a65d5c45fd",
      "commitAuthor": "Konstantin V Shvachko",
      "commitDateOld": "17/07/17 9:32 PM",
      "commitNameOld": "ccaf036662e22da14583942054898c99fa51dae5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 254.82,
      "commitsBetweenForRepo": 2011,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,75 +1,70 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n-    \n+\n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n-    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n-    \n-    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n-        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n-    if (keystorePass.isEmpty()) {\n-      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n-          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n+    if (useSsl) {\n+      loadSslConf(conf);\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n \n     //User search base which defaults to base dn.\n     userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Usersearch baseDN: \" + userbaseDN);\n     }\n \n     //Group search base which defaults to base dn.\n     groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Groupsearch baseDN: \" + userbaseDN);\n     }\n \n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     memberOfAttr \u003d\n         conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n     // if memberOf attribute is set, resolve group names from the attribute\n     // of user objects.\n     useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n     groupHierarchyLevels \u003d\n         conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n     String[] returningAttributes;\n     if (useOneQuery) {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n     } else {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr};\n     }\n     SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n\n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    if (useSsl) {\n      loadSslConf(conf);\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n\n    //User search base which defaults to base dn.\n    userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Usersearch baseDN: \" + userbaseDN);\n    }\n\n    //Group search base which defaults to base dn.\n    groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Groupsearch baseDN: \" + userbaseDN);\n    }\n\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    groupHierarchyLevels \u003d\n        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "a2121cb0d907be439d19cd1165a0371b37a5fe68": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14465. LdapGroupsMapping - support user and group search base. Contributed by Shwetha G S and Mingliang Liu\n",
      "commitDate": "09/06/17 2:55 PM",
      "commitName": "a2121cb0d907be439d19cd1165a0371b37a5fe68",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "05/08/16 4:32 PM",
      "commitNameOld": "49ba09a9221ad1e25e89800f6c455bbaad41483b",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 307.93,
      "commitsBetweenForRepo": 1866,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,75 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n         LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n           LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n-    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n+    String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n+\n+    //User search base which defaults to base dn.\n+    userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Usersearch baseDN: \" + userbaseDN);\n+    }\n+\n+    //Group search base which defaults to base dn.\n+    groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n+    if (LOG.isDebugEnabled()) {\n+      LOG.debug(\"Groupsearch baseDN: \" + userbaseDN);\n+    }\n+\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     memberOfAttr \u003d\n         conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n     // if memberOf attribute is set, resolve group names from the attribute\n     // of user objects.\n     useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n     groupHierarchyLevels \u003d\n         conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n     String[] returningAttributes;\n     if (useOneQuery) {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n     } else {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr};\n     }\n     SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    String baseDN \u003d conf.getTrimmed(BASE_DN_KEY, BASE_DN_DEFAULT);\n\n    //User search base which defaults to base dn.\n    userbaseDN \u003d conf.getTrimmed(USER_BASE_DN_KEY, baseDN);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Usersearch baseDN: \" + userbaseDN);\n    }\n\n    //Group search base which defaults to base dn.\n    groupbaseDN \u003d conf.getTrimmed(GROUP_BASE_DN_KEY, baseDN);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Groupsearch baseDN: \" + userbaseDN);\n    }\n\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    groupHierarchyLevels \u003d\n        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "6f0aa75121224589fe1e20630c597f851ef3bed2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12291. Add support for nested groups in LdapGroupsMapping. Contributed by Esther Kundin.\n",
      "commitDate": "15/06/16 11:41 AM",
      "commitName": "6f0aa75121224589fe1e20630c597f851ef3bed2",
      "commitAuthor": "Jitendra Pandey",
      "commitDateOld": "03/06/16 4:38 PM",
      "commitNameOld": "d82bc8501869be78780fc09752dbf7af918c14af",
      "commitAuthorOld": "Chris Nauroth",
      "daysBetweenCommits": 11.79,
      "commitsBetweenForRepo": 75,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,60 +1,62 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n         LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n           LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     memberOfAttr \u003d\n         conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n     // if memberOf attribute is set, resolve group names from the attribute\n     // of user objects.\n     useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n+    groupHierarchyLevels \u003d\n+        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n     String[] returningAttributes;\n     if (useOneQuery) {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n     } else {\n       returningAttributes \u003d new String[] {\n           groupNameAttr, posixUidAttr, posixGidAttr};\n     }\n     SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    groupHierarchyLevels \u003d\n        conf.getInt(GROUP_HIERARCHY_LEVELS_KEY, GROUP_HIERARCHY_LEVELS_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "182fc1986a984ed0be6bed297390a830c2305af1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12782. Faster LDAP group name resolution with ActiveDirectory. Contributed by Wei-Chiu Chuang\n",
      "commitDate": "19/05/16 7:15 AM",
      "commitName": "182fc1986a984ed0be6bed297390a830c2305af1",
      "commitAuthor": "Kai Zheng",
      "commitDateOld": "05/05/16 3:53 PM",
      "commitNameOld": "f305d9c0f64fd7d085f01eaae2154ef13b05b197",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 13.64,
      "commitsBetweenForRepo": 101,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,60 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n         LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n           LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n+    memberOfAttr \u003d\n+        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n+    // if memberOf attribute is set, resolve group names from the attribute\n+    // of user objects.\n+    useOneQuery \u003d !memberOfAttr.isEmpty();\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n     posixUidAttr \u003d\n         conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n     posixGidAttr \u003d\n         conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search.\n     // See HADOOP-10626 and HADOOP-12001 for more details.\n-    SEARCH_CONTROLS.setReturningAttributes(\n-        new String[] {groupNameAttr, posixUidAttr, posixGidAttr});\n+    String[] returningAttributes;\n+    if (useOneQuery) {\n+      returningAttributes \u003d new String[] {\n+          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n+    } else {\n+      returningAttributes \u003d new String[] {\n+          groupNameAttr, posixUidAttr, posixGidAttr};\n+    }\n+    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    memberOfAttr \u003d\n        conf.get(MEMBEROF_ATTR_KEY, MEMBEROF_ATTR_DEFAULT);\n    // if memberOf attribute is set, resolve group names from the attribute\n    // of user objects.\n    useOneQuery \u003d !memberOfAttr.isEmpty();\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    String[] returningAttributes;\n    if (useOneQuery) {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr, memberOfAttr};\n    } else {\n      returningAttributes \u003d new String[] {\n          groupNameAttr, posixUidAttr, posixGidAttr};\n    }\n    SEARCH_CONTROLS.setReturningAttributes(returningAttributes);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "722aa1db1f2ac3db0e70063022436a90f90643f3": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12001. Fixed LdapGroupsMapping to include configurable Posix UID and GID attributes during the search. Contributed by Patrick White.\n",
      "commitDate": "15/06/15 2:22 PM",
      "commitName": "722aa1db1f2ac3db0e70063022436a90f90643f3",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/03/15 2:52 PM",
      "commitNameOld": "82128774156c30a535b62d764bb6cf9c8d2f3a3b",
      "commitAuthorOld": "Yongjun Zhang",
      "daysBetweenCommits": 94.98,
      "commitsBetweenForRepo": 859,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,48 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n         LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n           LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n         .contains(POSIX_ACCOUNT);\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n+    posixUidAttr \u003d\n+        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n+    posixGidAttr \u003d\n+        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n-    // Limit the attributes returned to only those required to speed up the search. See HADOOP-10626 for more details.\n-    SEARCH_CONTROLS.setReturningAttributes(new String[] {groupNameAttr});\n+    // Limit the attributes returned to only those required to speed up the search.\n+    // See HADOOP-10626 and HADOOP-12001 for more details.\n+    SEARCH_CONTROLS.setReturningAttributes(\n+        new String[] {groupNameAttr, posixUidAttr, posixGidAttr});\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n    posixUidAttr \u003d\n        conf.get(POSIX_UID_ATTR_KEY, POSIX_UID_ATTR_DEFAULT);\n    posixGidAttr \u003d\n        conf.get(POSIX_GID_ATTR_KEY, POSIX_GID_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search.\n    // See HADOOP-10626 and HADOOP-12001 for more details.\n    SEARCH_CONTROLS.setReturningAttributes(\n        new String[] {groupNameAttr, posixUidAttr, posixGidAttr});\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "82128774156c30a535b62d764bb6cf9c8d2f3a3b": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9477. Add posixGroups support for LDAP groups mapping service. (Dapeng Sun via Yongjun Zhang)\n",
      "commitDate": "12/03/15 2:52 PM",
      "commitName": "82128774156c30a535b62d764bb6cf9c8d2f3a3b",
      "commitAuthor": "Yongjun Zhang",
      "commitDateOld": "27/01/15 1:53 PM",
      "commitNameOld": "8bf6f0b70396e8f2d3b37e6da194b19f357e846a",
      "commitAuthorOld": "Aaron T. Myers",
      "daysBetweenCommits": 44.0,
      "commitsBetweenForRepo": 417,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,40 +1,42 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n         LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n           LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n+    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n+        .contains(POSIX_ACCOUNT);\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n     // Limit the attributes returned to only those required to speed up the search. See HADOOP-10626 for more details.\n     SEARCH_CONTROLS.setReturningAttributes(new String[] {groupNameAttr});\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    isPosix \u003d groupSearchFilter.contains(POSIX_GROUP) \u0026\u0026 userSearchFilter\n        .contains(POSIX_ACCOUNT);\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search. See HADOOP-10626 for more details.\n    SEARCH_CONTROLS.setReturningAttributes(new String[] {groupNameAttr});\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "8bf6f0b70396e8f2d3b37e6da194b19f357e846a": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10626. Limit Returning Attributes for LDAP search. Contributed by Jason Hubbard.\n",
      "commitDate": "27/01/15 1:53 PM",
      "commitName": "8bf6f0b70396e8f2d3b37e6da194b19f357e846a",
      "commitAuthor": "Aaron T. Myers",
      "commitDateOld": "11/12/14 4:42 PM",
      "commitNameOld": "5b9fcedb4d116d91d70aaad6cbf59093eeee36df",
      "commitAuthorOld": "Haohui Mai",
      "daysBetweenCommits": 46.88,
      "commitsBetweenForRepo": 263,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,40 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n         LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n           LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n+    // Limit the attributes returned to only those required to speed up the search. See HADOOP-10626 for more details.\n+    SEARCH_CONTROLS.setReturningAttributes(new String[] {groupNameAttr});\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n    // Limit the attributes returned to only those required to speed up the search. See HADOOP-10626 for more details.\n    SEARCH_CONTROLS.setReturningAttributes(new String[] {groupNameAttr});\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "a4f1292a53da3c0bbb75de459bc141ef722dd148": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10905. LdapGroupsMapping Should use configuration.getPassword for SSL and LDAP Passwords. Contributed by Larry McCay\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1616054 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/14 4:55 PM",
      "commitName": "a4f1292a53da3c0bbb75de459bc141ef722dd148",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "21/07/14 2:52 PM",
      "commitNameOld": "d3bf8186aeeb7ecf8c0e121eae1107bd582dbbd7",
      "commitAuthorOld": "Andrew Wang",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 112,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n-    keystorePass \u003d\n-        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT);\n+    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n+        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n           LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n-    bindPassword \u003d conf.get(BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n+    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d getPassword(conf, LDAP_KEYSTORE_PASSWORD_KEY,\n        LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d getPassword(conf, BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "ca8f112d2f422c11c62bb30660b60fb5fb275457": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10656. The password keystore file is not picked by LDAP group mapping. Contributed by Brandon Li\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601985 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/06/14 11:54 AM",
      "commitName": "ca8f112d2f422c11c62bb30660b60fb5fb275457",
      "commitAuthor": "Brandon Li",
      "commitDateOld": "28/03/14 11:15 AM",
      "commitNameOld": "640a72efbee17f6c7056650dae04f8b3f59ddaab",
      "commitAuthorOld": "Tsz-wo Sze",
      "daysBetweenCommits": 75.03,
      "commitsBetweenForRepo": 420,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,38 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d\n         conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n-      keystorePass \u003d extractPassword(\n-        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT));\n+      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n+          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d conf.get(BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n \n     int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n     SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n \n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d\n        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(conf.get(LDAP_KEYSTORE_PASSWORD_FILE_KEY,\n          LDAP_KEYSTORE_PASSWORD_FILE_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d conf.get(BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "3dc9aa480ab67be692014d6ade4ee6b1b0205cc0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9322. LdapGroupsMapping doesn\u0027t seem to set a timeout for its directory search. Contributed by Harsh J. (harsh)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1477458 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/13 8:06 PM",
      "commitName": "3dc9aa480ab67be692014d6ade4ee6b1b0205cc0",
      "commitAuthor": "Harsh J",
      "commitDateOld": "27/03/13 2:49 PM",
      "commitNameOld": "fc5fd80e9fa21b9c3981fb5afc8fce376aa6a2d9",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 33.22,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,38 @@\n   public synchronized void setConf(Configuration conf) {\n     ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n     if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n       throw new RuntimeException(\"LDAP URL is not configured\");\n     }\n     \n     useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n     keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n     \n     keystorePass \u003d\n         conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT);\n     if (keystorePass.isEmpty()) {\n       keystorePass \u003d extractPassword(\n         conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT));\n     }\n     \n     bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n     bindPassword \u003d conf.get(BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n     if (bindPassword.isEmpty()) {\n       bindPassword \u003d extractPassword(\n           conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n     }\n     \n     baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n     groupSearchFilter \u003d\n         conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n     userSearchFilter \u003d\n         conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n     groupMemberAttr \u003d\n         conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n     groupNameAttr \u003d\n         conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n \n+    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n+    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n+\n     this.conf \u003d conf;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d\n        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(\n        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d conf.get(BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n\n    int dirSearchTimeout \u003d conf.getInt(DIRECTORY_SEARCH_TIMEOUT, DIRECTORY_SEARCH_TIMEOUT_DEFAULT);\n    SEARCH_CONTROLS.setTimeLimit(dirSearchTimeout);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java",
      "extendedDetails": {}
    },
    "21426e6e42a2f1c0f5a0eca23ad62057901e4855": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-8121. Active Directory Group Mapping Service. Contributed by Jonathan Natkins.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1302740 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/03/12 6:00 PM",
      "commitName": "21426e6e42a2f1c0f5a0eca23ad62057901e4855",
      "commitAuthor": "Aaron Myers",
      "diff": "@@ -0,0 +1,35 @@\n+  public synchronized void setConf(Configuration conf) {\n+    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n+    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n+      throw new RuntimeException(\"LDAP URL is not configured\");\n+    }\n+    \n+    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n+    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n+    \n+    keystorePass \u003d\n+        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT);\n+    if (keystorePass.isEmpty()) {\n+      keystorePass \u003d extractPassword(\n+        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT));\n+    }\n+    \n+    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n+    bindPassword \u003d conf.get(BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n+    if (bindPassword.isEmpty()) {\n+      bindPassword \u003d extractPassword(\n+          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n+    }\n+    \n+    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n+    groupSearchFilter \u003d\n+        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n+    userSearchFilter \u003d\n+        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n+    groupMemberAttr \u003d\n+        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n+    groupNameAttr \u003d\n+        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n+\n+    this.conf \u003d conf;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void setConf(Configuration conf) {\n    ldapUrl \u003d conf.get(LDAP_URL_KEY, LDAP_URL_DEFAULT);\n    if (ldapUrl \u003d\u003d null || ldapUrl.isEmpty()) {\n      throw new RuntimeException(\"LDAP URL is not configured\");\n    }\n    \n    useSsl \u003d conf.getBoolean(LDAP_USE_SSL_KEY, LDAP_USE_SSL_DEFAULT);\n    keystore \u003d conf.get(LDAP_KEYSTORE_KEY, LDAP_KEYSTORE_DEFAULT);\n    \n    keystorePass \u003d\n        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT);\n    if (keystorePass.isEmpty()) {\n      keystorePass \u003d extractPassword(\n        conf.get(LDAP_KEYSTORE_PASSWORD_KEY, LDAP_KEYSTORE_PASSWORD_DEFAULT));\n    }\n    \n    bindUser \u003d conf.get(BIND_USER_KEY, BIND_USER_DEFAULT);\n    bindPassword \u003d conf.get(BIND_PASSWORD_KEY, BIND_PASSWORD_DEFAULT);\n    if (bindPassword.isEmpty()) {\n      bindPassword \u003d extractPassword(\n          conf.get(BIND_PASSWORD_FILE_KEY, BIND_PASSWORD_FILE_DEFAULT));\n    }\n    \n    baseDN \u003d conf.get(BASE_DN_KEY, BASE_DN_DEFAULT);\n    groupSearchFilter \u003d\n        conf.get(GROUP_SEARCH_FILTER_KEY, GROUP_SEARCH_FILTER_DEFAULT);\n    userSearchFilter \u003d\n        conf.get(USER_SEARCH_FILTER_KEY, USER_SEARCH_FILTER_DEFAULT);\n    groupMemberAttr \u003d\n        conf.get(GROUP_MEMBERSHIP_ATTR_KEY, GROUP_MEMBERSHIP_ATTR_DEFAULT);\n    groupNameAttr \u003d\n        conf.get(GROUP_NAME_ATTR_KEY, GROUP_NAME_ATTR_DEFAULT);\n\n    this.conf \u003d conf;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/security/LdapGroupsMapping.java"
    }
  }
}