{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Hdfs.java",
  "functionName": "listStatus",
  "functionId": "listStatus___f-Path",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/fs/Hdfs.java",
  "functionStartLine": 273,
  "functionEndLine": 321,
  "numCommitsSeen": 39,
  "timeTaken": 5308,
  "changeHistory": [
    "77f7ca3e94ecaa442c007b12d4ad773b37da097c",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "77f7ca3e94ecaa442c007b12d4ad773b37da097c": "Yfilerename",
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "77f7ca3e94ecaa442c007b12d4ad773b37da097c": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-9815. Move o.a.h.fs.Hdfs to hadoop-hdfs-client. Contributed by Vinayakumar B.\n",
      "commitDate": "17/02/16 10:56 AM",
      "commitName": "77f7ca3e94ecaa442c007b12d4ad773b37da097c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "17/02/16 8:27 AM",
      "commitNameOld": "fd1befb6ba450e45b1fcb3fb28b0da6c48daf6b3",
      "commitAuthorOld": "Xiaoyu Yao",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path f) \n      throws IOException, UnresolvedLinkException {\n    String src \u003d getUriPath(f);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), f);\n      }\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), f));\n    }\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) {\n        // the directory is deleted\n        throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), f));\n      }\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/fs/Hdfs.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/fs/Hdfs.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs-client/src/main/java/org/apache/hadoop/fs/Hdfs.java"
      }
    },
    "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9414.  Refactor out FSLinkResolver and relevant helper methods.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498720 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/07/13 3:09 PM",
      "commitName": "6735b70b4ab618d4ebfb5a863180d14be9b8b2b2",
      "commitAuthor": "Colin McCabe",
      "commitDateOld": "06/09/12 7:06 AM",
      "commitNameOld": "82b981cca493d2efaa4bdbe79a2f9615f866ee06",
      "commitAuthorOld": "Daryn Sharp",
      "daysBetweenCommits": 298.34,
      "commitsBetweenForRepo": 1707,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   public FileStatus[] listStatus(Path f) \n       throws IOException, UnresolvedLinkException {\n     String src \u003d getUriPath(f);\n \n     // fetch the first batch of entries in the directory\n     DirectoryListing thisListing \u003d dfs.listPaths(\n         src, HdfsFileStatus.EMPTY_NAME);\n \n     if (thisListing \u003d\u003d null) { // the directory does not exist\n       throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n     }\n     \n     HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n     if (!thisListing.hasMore()) { // got all entries of the directory\n       FileStatus[] stats \u003d new FileStatus[partialListing.length];\n       for (int i \u003d 0; i \u003c partialListing.length; i++) {\n-        stats[i] \u003d makeQualified(partialListing[i], f);\n+        stats[i] \u003d partialListing[i].makeQualified(getUri(), f);\n       }\n       return stats;\n     }\n \n     // The directory size is too big that it needs to fetch more\n     // estimate the total number of entries in the directory\n     int totalNumEntries \u003d\n       partialListing.length + thisListing.getRemainingEntries();\n     ArrayList\u003cFileStatus\u003e listing \u003d\n       new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n     // add the first batch of entries to the array list\n     for (HdfsFileStatus fileStatus : partialListing) {\n-      listing.add(makeQualified(fileStatus, f));\n+      listing.add(fileStatus.makeQualified(getUri(), f));\n     }\n  \n     // now fetch more entries\n     do {\n       thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n  \n       if (thisListing \u003d\u003d null) {\n         // the directory is deleted\n         throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n       }\n  \n       partialListing \u003d thisListing.getPartialListing();\n       for (HdfsFileStatus fileStatus : partialListing) {\n-        listing.add(makeQualified(fileStatus, f));\n+        listing.add(fileStatus.makeQualified(getUri(), f));\n       }\n     } while (thisListing.hasMore());\n  \n     return listing.toArray(new FileStatus[listing.size()]);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) \n      throws IOException, UnresolvedLinkException {\n    String src \u003d getUriPath(f);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d partialListing[i].makeQualified(getUri(), f);\n      }\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(fileStatus.makeQualified(getUri(), f));\n    }\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) {\n        // the directory is deleted\n        throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(fileStatus.makeQualified(getUri(), f));\n      }\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/fs/Hdfs.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path f) \n      throws IOException, UnresolvedLinkException {\n    String src \u003d getUriPath(f);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d makeQualified(partialListing[i], f);\n      }\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(makeQualified(fileStatus, f));\n    }\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) {\n        // the directory is deleted\n        throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(makeQualified(fileStatus, f));\n      }\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/fs/Hdfs.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/fs/Hdfs.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/fs/Hdfs.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public FileStatus[] listStatus(Path f) \n      throws IOException, UnresolvedLinkException {\n    String src \u003d getUriPath(f);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d makeQualified(partialListing[i], f);\n      }\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(makeQualified(fileStatus, f));\n    }\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) {\n        // the directory is deleted\n        throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(makeQualified(fileStatus, f));\n      }\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/fs/Hdfs.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/fs/Hdfs.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/fs/Hdfs.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,49 @@\n+  public FileStatus[] listStatus(Path f) \n+      throws IOException, UnresolvedLinkException {\n+    String src \u003d getUriPath(f);\n+\n+    // fetch the first batch of entries in the directory\n+    DirectoryListing thisListing \u003d dfs.listPaths(\n+        src, HdfsFileStatus.EMPTY_NAME);\n+\n+    if (thisListing \u003d\u003d null) { // the directory does not exist\n+      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n+    }\n+    \n+    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n+    if (!thisListing.hasMore()) { // got all entries of the directory\n+      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n+      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n+        stats[i] \u003d makeQualified(partialListing[i], f);\n+      }\n+      return stats;\n+    }\n+\n+    // The directory size is too big that it needs to fetch more\n+    // estimate the total number of entries in the directory\n+    int totalNumEntries \u003d\n+      partialListing.length + thisListing.getRemainingEntries();\n+    ArrayList\u003cFileStatus\u003e listing \u003d\n+      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n+    // add the first batch of entries to the array list\n+    for (HdfsFileStatus fileStatus : partialListing) {\n+      listing.add(makeQualified(fileStatus, f));\n+    }\n+ \n+    // now fetch more entries\n+    do {\n+      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n+ \n+      if (thisListing \u003d\u003d null) {\n+        // the directory is deleted\n+        throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n+      }\n+ \n+      partialListing \u003d thisListing.getPartialListing();\n+      for (HdfsFileStatus fileStatus : partialListing) {\n+        listing.add(makeQualified(fileStatus, f));\n+      }\n+    } while (thisListing.hasMore());\n+ \n+    return listing.toArray(new FileStatus[listing.size()]);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public FileStatus[] listStatus(Path f) \n      throws IOException, UnresolvedLinkException {\n    String src \u003d getUriPath(f);\n\n    // fetch the first batch of entries in the directory\n    DirectoryListing thisListing \u003d dfs.listPaths(\n        src, HdfsFileStatus.EMPTY_NAME);\n\n    if (thisListing \u003d\u003d null) { // the directory does not exist\n      throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n    }\n    \n    HdfsFileStatus[] partialListing \u003d thisListing.getPartialListing();\n    if (!thisListing.hasMore()) { // got all entries of the directory\n      FileStatus[] stats \u003d new FileStatus[partialListing.length];\n      for (int i \u003d 0; i \u003c partialListing.length; i++) {\n        stats[i] \u003d makeQualified(partialListing[i], f);\n      }\n      return stats;\n    }\n\n    // The directory size is too big that it needs to fetch more\n    // estimate the total number of entries in the directory\n    int totalNumEntries \u003d\n      partialListing.length + thisListing.getRemainingEntries();\n    ArrayList\u003cFileStatus\u003e listing \u003d\n      new ArrayList\u003cFileStatus\u003e(totalNumEntries);\n    // add the first batch of entries to the array list\n    for (HdfsFileStatus fileStatus : partialListing) {\n      listing.add(makeQualified(fileStatus, f));\n    }\n \n    // now fetch more entries\n    do {\n      thisListing \u003d dfs.listPaths(src, thisListing.getLastName());\n \n      if (thisListing \u003d\u003d null) {\n        // the directory is deleted\n        throw new FileNotFoundException(\"File \" + f + \" does not exist.\");\n      }\n \n      partialListing \u003d thisListing.getPartialListing();\n      for (HdfsFileStatus fileStatus : partialListing) {\n        listing.add(makeQualified(fileStatus, f));\n      }\n    } while (thisListing.hasMore());\n \n    return listing.toArray(new FileStatus[listing.size()]);\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/fs/Hdfs.java"
    }
  }
}