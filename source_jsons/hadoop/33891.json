{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FpgaResourceAllocator.java",
  "functionName": "recoverAssignedFpgas",
  "functionId": "recoverAssignedFpgas___containerId-ContainerId",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/fpga/FpgaResourceAllocator.java",
  "functionStartLine": 237,
  "functionEndLine": 274,
  "numCommitsSeen": 6,
  "timeTaken": 798,
  "changeHistory": [
    "7225ec0ceb49ae8f5588484297a20f07ec047420"
  ],
  "changeHistoryShort": {
    "7225ec0ceb49ae8f5588484297a20f07ec047420": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7225ec0ceb49ae8f5588484297a20f07ec047420": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6507. Add support in NodeManager to isolate FPGA devices with CGroups. (Zhankun Tang via wangda)\n\nChange-Id: Ic9afd841805f1035423915a0b0add5f3ba96cf9d\n",
      "commitDate": "01/12/17 10:50 AM",
      "commitName": "7225ec0ceb49ae8f5588484297a20f07ec047420",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,38 @@\n+  public synchronized void recoverAssignedFpgas(ContainerId containerId) throws ResourceHandlerException {\n+    Container c \u003d nmContext.getContainers().get(containerId);\n+    if (null \u003d\u003d c) {\n+      throw new ResourceHandlerException(\n+          \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n+              + containerId);\n+    }\n+\n+    for (Serializable fpgaDevice :\n+        c.getResourceMappings().getAssignedResources(FPGA_URI)) {\n+      if (!(fpgaDevice instanceof FpgaDevice)) {\n+        throw new ResourceHandlerException(\n+            \"Trying to recover allocated FPGA devices, however it\"\n+                + \" is not FpgaDevice type, this shouldn\u0027t happen\");\n+      }\n+\n+      // Make sure it is in allowed FPGA device.\n+      if (!allowedFpgas.contains(fpgaDevice)) {\n+        throw new ResourceHandlerException(\"Try to recover FpgaDevice \u003d \" + fpgaDevice\n+            + \" however it is not in allowed device list:\" + StringUtils\n+            .join(\";\", allowedFpgas));\n+      }\n+\n+      // Make sure it is not occupied by anybody else\n+      Iterator\u003cMap.Entry\u003cString, List\u003cFpgaDevice\u003e\u003e\u003e iterator \u003d\n+          getUsedFpga().entrySet().iterator();\n+      while (iterator.hasNext()) {\n+        if (iterator.next().getValue().contains(fpgaDevice)) {\n+          throw new ResourceHandlerException(\"Try to recover FpgaDevice \u003d \" + fpgaDevice\n+              + \" however it is already assigned to others\");\n+        }\n+      }\n+      getUsedFpga().putIfAbsent(containerId.toString(), new LinkedList\u003c\u003e());\n+      getUsedFpga().get(containerId.toString()).add((FpgaDevice) fpgaDevice);\n+      // remove them from available list\n+      getAvailableFpga().get(((FpgaDevice) fpgaDevice).getType()).remove(fpgaDevice);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void recoverAssignedFpgas(ContainerId containerId) throws ResourceHandlerException {\n    Container c \u003d nmContext.getContainers().get(containerId);\n    if (null \u003d\u003d c) {\n      throw new ResourceHandlerException(\n          \"This shouldn\u0027t happen, cannot find container with id\u003d\"\n              + containerId);\n    }\n\n    for (Serializable fpgaDevice :\n        c.getResourceMappings().getAssignedResources(FPGA_URI)) {\n      if (!(fpgaDevice instanceof FpgaDevice)) {\n        throw new ResourceHandlerException(\n            \"Trying to recover allocated FPGA devices, however it\"\n                + \" is not FpgaDevice type, this shouldn\u0027t happen\");\n      }\n\n      // Make sure it is in allowed FPGA device.\n      if (!allowedFpgas.contains(fpgaDevice)) {\n        throw new ResourceHandlerException(\"Try to recover FpgaDevice \u003d \" + fpgaDevice\n            + \" however it is not in allowed device list:\" + StringUtils\n            .join(\";\", allowedFpgas));\n      }\n\n      // Make sure it is not occupied by anybody else\n      Iterator\u003cMap.Entry\u003cString, List\u003cFpgaDevice\u003e\u003e\u003e iterator \u003d\n          getUsedFpga().entrySet().iterator();\n      while (iterator.hasNext()) {\n        if (iterator.next().getValue().contains(fpgaDevice)) {\n          throw new ResourceHandlerException(\"Try to recover FpgaDevice \u003d \" + fpgaDevice\n              + \" however it is already assigned to others\");\n        }\n      }\n      getUsedFpga().putIfAbsent(containerId.toString(), new LinkedList\u003c\u003e());\n      getUsedFpga().get(containerId.toString()).add((FpgaDevice) fpgaDevice);\n      // remove them from available list\n      getAvailableFpga().get(((FpgaDevice) fpgaDevice).getType()).remove(fpgaDevice);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/fpga/FpgaResourceAllocator.java"
    }
  }
}