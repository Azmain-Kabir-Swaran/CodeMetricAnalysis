{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalityMulticastAMRMProxyPolicy.java",
  "functionName": "addLocalizedNodeRR",
  "functionId": "addLocalizedNodeRR___targetId-SubClusterId__rr-ResourceRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
  "functionStartLine": 577,
  "functionEndLine": 604,
  "numCommitsSeen": 11,
  "timeTaken": 1918,
  "changeHistory": [
    "7ed458b255e492fd5bc2ca36f216ff1b16054db7",
    "1c5c2b5dde6f2cffc587ca8f79a18828e1b1faf9",
    "8623644f4599f51d34ba79c4c1453b3997205d8f",
    "1dadd0b45a6a605da72eb304808edb49fc66da45"
  ],
  "changeHistoryShort": {
    "7ed458b255e492fd5bc2ca36f216ff1b16054db7": "Ybodychange",
    "1c5c2b5dde6f2cffc587ca8f79a18828e1b1faf9": "Ybodychange",
    "8623644f4599f51d34ba79c4c1453b3997205d8f": "Ybodychange",
    "1dadd0b45a6a605da72eb304808edb49fc66da45": "Yintroduced"
  },
  "changeHistoryDetails": {
    "7ed458b255e492fd5bc2ca36f216ff1b16054db7": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8697. LocalityMulticastAMRMProxyPolicy should fallback to random sub-cluster when cannot resolve resource. Contributed by Botong Huang.\n",
      "commitDate": "28/08/18 4:01 PM",
      "commitName": "7ed458b255e492fd5bc2ca36f216ff1b16054db7",
      "commitAuthor": "Giovanni Matteo Fumarola",
      "commitDateOld": "20/08/18 2:33 PM",
      "commitNameOld": "e0f6ffdbad6f43fd43ec57fb68ebf5275b8b9ba0",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 8.06,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,28 @@\n     private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n       Preconditions\n           .checkArgument(!ResourceRequest.isAnyLocation(rr.getResourceName()));\n \n       if (rr.getNumContainers() \u003e 0) {\n         if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n           countContainersPerRM.put(rr.getAllocationRequestId(),\n               new HashMap\u003c\u003e());\n         }\n         if (!countContainersPerRM.get(rr.getAllocationRequestId())\n             .containsKey(targetId)) {\n           countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n               new AtomicLong(0));\n         }\n         countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n             .addAndGet(rr.getNumContainers());\n \n         if (!totNumLocalizedContainers\n             .containsKey(rr.getAllocationRequestId())) {\n           totNumLocalizedContainers.put(rr.getAllocationRequestId(),\n               new AtomicLong(0));\n         }\n         totNumLocalizedContainers.get(rr.getAllocationRequestId())\n             .addAndGet(rr.getNumContainers());\n       }\n \n-      internalAddToAnswer(targetId, rr);\n+      internalAddToAnswer(targetId, rr, false);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n      Preconditions\n          .checkArgument(!ResourceRequest.isAnyLocation(rr.getResourceName()));\n\n      if (rr.getNumContainers() \u003e 0) {\n        if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n          countContainersPerRM.put(rr.getAllocationRequestId(),\n              new HashMap\u003c\u003e());\n        }\n        if (!countContainersPerRM.get(rr.getAllocationRequestId())\n            .containsKey(targetId)) {\n          countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n              new AtomicLong(0));\n        }\n        countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n            .addAndGet(rr.getNumContainers());\n\n        if (!totNumLocalizedContainers\n            .containsKey(rr.getAllocationRequestId())) {\n          totNumLocalizedContainers.put(rr.getAllocationRequestId(),\n              new AtomicLong(0));\n        }\n        totNumLocalizedContainers.get(rr.getAllocationRequestId())\n            .addAndGet(rr.getNumContainers());\n      }\n\n      internalAddToAnswer(targetId, rr, false);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
      "extendedDetails": {}
    },
    "1c5c2b5dde6f2cffc587ca8f79a18828e1b1faf9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7339. LocalityMulticastAMRMProxyPolicy should handle cancel request properly. (Botong Huang via curino)\n",
      "commitDate": "24/10/17 10:39 AM",
      "commitName": "1c5c2b5dde6f2cffc587ca8f79a18828e1b1faf9",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "12/10/17 10:38 AM",
      "commitNameOld": "13fcfb3d46ee7a0d606b4bb221d1cd66ef2a5a7c",
      "commitAuthorOld": "Carlo Curino",
      "daysBetweenCommits": 12.0,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,24 +1,28 @@\n     private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n       Preconditions\n           .checkArgument(!ResourceRequest.isAnyLocation(rr.getResourceName()));\n \n-      if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n-        countContainersPerRM.put(rr.getAllocationRequestId(), new HashMap\u003c\u003e());\n-      }\n-      if (!countContainersPerRM.get(rr.getAllocationRequestId())\n-          .containsKey(targetId)) {\n-        countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n-            new AtomicLong(0));\n-      }\n-      countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n-          .addAndGet(rr.getNumContainers());\n+      if (rr.getNumContainers() \u003e 0) {\n+        if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n+          countContainersPerRM.put(rr.getAllocationRequestId(),\n+              new HashMap\u003c\u003e());\n+        }\n+        if (!countContainersPerRM.get(rr.getAllocationRequestId())\n+            .containsKey(targetId)) {\n+          countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n+              new AtomicLong(0));\n+        }\n+        countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n+            .addAndGet(rr.getNumContainers());\n \n-      if (!totNumLocalizedContainers.containsKey(rr.getAllocationRequestId())) {\n-        totNumLocalizedContainers.put(rr.getAllocationRequestId(),\n-            new AtomicLong(0));\n+        if (!totNumLocalizedContainers\n+            .containsKey(rr.getAllocationRequestId())) {\n+          totNumLocalizedContainers.put(rr.getAllocationRequestId(),\n+              new AtomicLong(0));\n+        }\n+        totNumLocalizedContainers.get(rr.getAllocationRequestId())\n+            .addAndGet(rr.getNumContainers());\n       }\n-      totNumLocalizedContainers.get(rr.getAllocationRequestId())\n-          .addAndGet(rr.getNumContainers());\n \n       internalAddToAnswer(targetId, rr);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n      Preconditions\n          .checkArgument(!ResourceRequest.isAnyLocation(rr.getResourceName()));\n\n      if (rr.getNumContainers() \u003e 0) {\n        if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n          countContainersPerRM.put(rr.getAllocationRequestId(),\n              new HashMap\u003c\u003e());\n        }\n        if (!countContainersPerRM.get(rr.getAllocationRequestId())\n            .containsKey(targetId)) {\n          countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n              new AtomicLong(0));\n        }\n        countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n            .addAndGet(rr.getNumContainers());\n\n        if (!totNumLocalizedContainers\n            .containsKey(rr.getAllocationRequestId())) {\n          totNumLocalizedContainers.put(rr.getAllocationRequestId(),\n              new AtomicLong(0));\n        }\n        totNumLocalizedContainers.get(rr.getAllocationRequestId())\n            .addAndGet(rr.getNumContainers());\n      }\n\n      internalAddToAnswer(targetId, rr);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
      "extendedDetails": {}
    },
    "8623644f4599f51d34ba79c4c1453b3997205d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6190. Validation and synchronization fixes in LocalityMulticastAMRMProxyPolicy. (Botong Huang via curino)\n\n(cherry picked from commit 5c486961cd3a175b122ef86275c99b72964f2c50)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "8623644f4599f51d34ba79c4c1453b3997205d8f",
      "commitAuthor": "Carlo Curino",
      "commitDateOld": "01/08/17 5:28 PM",
      "commitNameOld": "1dadd0b45a6a605da72eb304808edb49fc66da45",
      "commitAuthorOld": "Subru Krishnan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,24 @@\n     private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n-      Preconditions.checkArgument(!rr.isAnyLocation(rr.getResourceName()));\n+      Preconditions\n+          .checkArgument(!ResourceRequest.isAnyLocation(rr.getResourceName()));\n \n       if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n         countContainersPerRM.put(rr.getAllocationRequestId(), new HashMap\u003c\u003e());\n       }\n       if (!countContainersPerRM.get(rr.getAllocationRequestId())\n           .containsKey(targetId)) {\n         countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n             new AtomicLong(0));\n       }\n       countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n           .addAndGet(rr.getNumContainers());\n \n-      totNumLocalizedContainers +\u003d rr.getNumContainers();\n+      if (!totNumLocalizedContainers.containsKey(rr.getAllocationRequestId())) {\n+        totNumLocalizedContainers.put(rr.getAllocationRequestId(),\n+            new AtomicLong(0));\n+      }\n+      totNumLocalizedContainers.get(rr.getAllocationRequestId())\n+          .addAndGet(rr.getNumContainers());\n \n       internalAddToAnswer(targetId, rr);\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n      Preconditions\n          .checkArgument(!ResourceRequest.isAnyLocation(rr.getResourceName()));\n\n      if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n        countContainersPerRM.put(rr.getAllocationRequestId(), new HashMap\u003c\u003e());\n      }\n      if (!countContainersPerRM.get(rr.getAllocationRequestId())\n          .containsKey(targetId)) {\n        countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n            new AtomicLong(0));\n      }\n      countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n          .addAndGet(rr.getNumContainers());\n\n      if (!totNumLocalizedContainers.containsKey(rr.getAllocationRequestId())) {\n        totNumLocalizedContainers.put(rr.getAllocationRequestId(),\n            new AtomicLong(0));\n      }\n      totNumLocalizedContainers.get(rr.getAllocationRequestId())\n          .addAndGet(rr.getNumContainers());\n\n      internalAddToAnswer(targetId, rr);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java",
      "extendedDetails": {}
    },
    "1dadd0b45a6a605da72eb304808edb49fc66da45": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5325. Stateless ARMRMProxy policies implementation. (Carlo Curino via Subru).\n\n(cherry picked from commit 11c5336522d3504598fb94eee288d54df73418c6)\n",
      "commitDate": "01/08/17 5:28 PM",
      "commitName": "1dadd0b45a6a605da72eb304808edb49fc66da45",
      "commitAuthor": "Subru Krishnan",
      "diff": "@@ -0,0 +1,18 @@\n+    private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n+      Preconditions.checkArgument(!rr.isAnyLocation(rr.getResourceName()));\n+\n+      if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n+        countContainersPerRM.put(rr.getAllocationRequestId(), new HashMap\u003c\u003e());\n+      }\n+      if (!countContainersPerRM.get(rr.getAllocationRequestId())\n+          .containsKey(targetId)) {\n+        countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n+            new AtomicLong(0));\n+      }\n+      countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n+          .addAndGet(rr.getNumContainers());\n+\n+      totNumLocalizedContainers +\u003d rr.getNumContainers();\n+\n+      internalAddToAnswer(targetId, rr);\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void addLocalizedNodeRR(SubClusterId targetId, ResourceRequest rr) {\n      Preconditions.checkArgument(!rr.isAnyLocation(rr.getResourceName()));\n\n      if (!countContainersPerRM.containsKey(rr.getAllocationRequestId())) {\n        countContainersPerRM.put(rr.getAllocationRequestId(), new HashMap\u003c\u003e());\n      }\n      if (!countContainersPerRM.get(rr.getAllocationRequestId())\n          .containsKey(targetId)) {\n        countContainersPerRM.get(rr.getAllocationRequestId()).put(targetId,\n            new AtomicLong(0));\n      }\n      countContainersPerRM.get(rr.getAllocationRequestId()).get(targetId)\n          .addAndGet(rr.getNumContainers());\n\n      totNumLocalizedContainers +\u003d rr.getNumContainers();\n\n      internalAddToAnswer(targetId, rr);\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-common/src/main/java/org/apache/hadoop/yarn/server/federation/policies/amrmproxy/LocalityMulticastAMRMProxyPolicy.java"
    }
  }
}