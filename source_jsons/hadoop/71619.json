{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RegistryDNS.java",
  "functionName": "enableDNSSECIfNecessary",
  "functionId": "enableDNSSECIfNecessary___zone-Zone__conf-Configuration__soaRecord-SOARecord__nsRecord-NSRecord",
  "sourceFilePath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
  "functionStartLine": 623,
  "functionEndLine": 682,
  "numCommitsSeen": 15,
  "timeTaken": 1329,
  "changeHistory": [
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
    "f934f62fc71b4776e88f86d4254de0ea12147511"
  ],
  "changeHistoryShort": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": "Yfilerename",
    "f934f62fc71b4776e88f86d4254de0ea12147511": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e2a9fa8448e2aac34c318260e425786a6c8ca2ae": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-15821. Move YARN Registry to Hadoop Registry.\n              Contributed by Íñigo Goiri\n",
      "commitDate": "19/10/18 4:46 PM",
      "commitName": "e2a9fa8448e2aac34c318260e425786a6c8ca2ae",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "19/10/18 1:57 PM",
      "commitNameOld": "00254d7b8c714ae2000d0934d260b23458033529",
      "commitAuthorOld": "Inigo Goiri",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void enableDNSSECIfNecessary(Zone zone, Configuration conf,\n      SOARecord soaRecord,\n      NSRecord nsRecord)\n      throws IOException, NoSuchAlgorithmException, InvalidKeySpecException,\n      DNSSEC.DNSSECException {\n    if (isDNSSECEnabled()) {\n      // read in the DNSKEY and create the DNSKEYRecord\n      // TODO:  reading these out of config seems wrong...\n      String publicKey \u003d conf.get(KEY_DNSSEC_PUBLIC_KEY);\n      if (publicKey \u003d\u003d null) {\n        throw new IOException(\"DNSSEC Key not configured\");\n      }\n      //TODO - perhaps read in actual DNSKEY record structure?\n      Name zoneName \u003d zone.getOrigin();\n      DNSKEYRecord dnskeyRecord \u003d dnsKeyRecs.get(zoneName);\n      if (dnskeyRecord \u003d\u003d null) {\n        byte[] key \u003d Base64.decodeBase64(publicKey.getBytes(\"UTF-8\"));\n        dnskeyRecord \u003d new DNSKEYRecord(zoneName,\n            DClass.IN, ttl,\n            DNSKEYRecord.Flags.ZONE_KEY,\n            DNSKEYRecord.Protocol.DNSSEC,\n            DNSSEC.Algorithm.RSASHA256, key);\n        dnsKeyRecs.putIfAbsent(zoneName, dnskeyRecord);\n      }\n      LOG.info(\"Registering {}\", dnskeyRecord);\n      try (CloseableLock lock \u003d writeLock.lock()) {\n        zone.addRecord(dnskeyRecord);\n\n        String privateKeyFile \u003d conf.get(KEY_DNSSEC_PRIVATE_KEY_FILE,\n            DEFAULT_DNSSEC_PRIVATE_KEY_FILE);\n\n        Properties props \u003d new Properties();\n        try (\n            FileInputStream inputStream \u003d new FileInputStream(privateKeyFile)) {\n          props.load(inputStream);\n        }\n\n        String privateModulus \u003d props.getProperty(\"Modulus\");\n        String privateExponent \u003d props.getProperty(\"PrivateExponent\");\n\n        RSAPrivateKeySpec privateSpec \u003d new RSAPrivateKeySpec(\n            new BigInteger(1, Base64.decodeBase64(privateModulus)),\n            new BigInteger(1, Base64.decodeBase64(privateExponent)));\n\n        KeyFactory factory \u003d KeyFactory.getInstance(\"RSA\");\n        privateKey \u003d factory.generatePrivate(privateSpec);\n\n        signSiteRecord(zone, dnskeyRecord);\n        signSiteRecord(zone, soaRecord);\n        signSiteRecord(zone, nsRecord);\n      }\n      // create required DS records\n\n      // domain\n//      DSRecord dsRecord \u003d new DSRecord(zoneName, DClass.IN, ttl,\n//                                       DSRecord.Digest.SHA1, dnskeyRecord);\n//      zone.addRecord(dsRecord);\n//      signSiteRecord(zone, dsRecord);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java",
        "newPath": "hadoop-common-project/hadoop-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
      }
    },
    "f934f62fc71b4776e88f86d4254de0ea12147511": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5218. Initial core change for DNS for YARN. Contributed by Jonathan Maron\n",
      "commitDate": "06/11/17 1:28 PM",
      "commitName": "f934f62fc71b4776e88f86d4254de0ea12147511",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,60 @@\n+  private void enableDNSSECIfNecessary(Zone zone, Configuration conf,\n+      SOARecord soaRecord,\n+      NSRecord nsRecord)\n+      throws IOException, NoSuchAlgorithmException, InvalidKeySpecException,\n+      DNSSEC.DNSSECException {\n+    if (isDNSSECEnabled()) {\n+      // read in the DNSKEY and create the DNSKEYRecord\n+      // TODO:  reading these out of config seems wrong...\n+      String publicKey \u003d conf.get(KEY_DNSSEC_PUBLIC_KEY);\n+      if (publicKey \u003d\u003d null) {\n+        throw new IOException(\"DNSSEC Key not configured\");\n+      }\n+      //TODO - perhaps read in actual DNSKEY record structure?\n+      Name zoneName \u003d zone.getOrigin();\n+      DNSKEYRecord dnskeyRecord \u003d dnsKeyRecs.get(zoneName);\n+      if (dnskeyRecord \u003d\u003d null) {\n+        byte[] key \u003d Base64.decodeBase64(publicKey.getBytes(\"UTF-8\"));\n+        dnskeyRecord \u003d new DNSKEYRecord(zoneName,\n+            DClass.IN, ttl,\n+            DNSKEYRecord.Flags.ZONE_KEY,\n+            DNSKEYRecord.Protocol.DNSSEC,\n+            DNSSEC.Algorithm.RSASHA256, key);\n+        dnsKeyRecs.putIfAbsent(zoneName, dnskeyRecord);\n+      }\n+      LOG.info(\"Registering {}\", dnskeyRecord);\n+      try (CloseableLock lock \u003d writeLock.lock()) {\n+        zone.addRecord(dnskeyRecord);\n+\n+        String privateKeyFile \u003d conf.get(KEY_DNSSEC_PRIVATE_KEY_FILE,\n+            DEFAULT_DNSSEC_PRIVATE_KEY_FILE);\n+\n+        Properties props \u003d new Properties();\n+        try (\n+            FileInputStream inputStream \u003d new FileInputStream(privateKeyFile)) {\n+          props.load(inputStream);\n+        }\n+\n+        String privateModulus \u003d props.getProperty(\"Modulus\");\n+        String privateExponent \u003d props.getProperty(\"PrivateExponent\");\n+\n+        RSAPrivateKeySpec privateSpec \u003d new RSAPrivateKeySpec(\n+            new BigInteger(1, Base64.decodeBase64(privateModulus)),\n+            new BigInteger(1, Base64.decodeBase64(privateExponent)));\n+\n+        KeyFactory factory \u003d KeyFactory.getInstance(\"RSA\");\n+        privateKey \u003d factory.generatePrivate(privateSpec);\n+\n+        signSiteRecord(zone, dnskeyRecord);\n+        signSiteRecord(zone, soaRecord);\n+        signSiteRecord(zone, nsRecord);\n+      }\n+      // create required DS records\n+\n+      // domain\n+//      DSRecord dsRecord \u003d new DSRecord(zoneName, DClass.IN, ttl,\n+//                                       DSRecord.Digest.SHA1, dnskeyRecord);\n+//      zone.addRecord(dsRecord);\n+//      signSiteRecord(zone, dsRecord);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void enableDNSSECIfNecessary(Zone zone, Configuration conf,\n      SOARecord soaRecord,\n      NSRecord nsRecord)\n      throws IOException, NoSuchAlgorithmException, InvalidKeySpecException,\n      DNSSEC.DNSSECException {\n    if (isDNSSECEnabled()) {\n      // read in the DNSKEY and create the DNSKEYRecord\n      // TODO:  reading these out of config seems wrong...\n      String publicKey \u003d conf.get(KEY_DNSSEC_PUBLIC_KEY);\n      if (publicKey \u003d\u003d null) {\n        throw new IOException(\"DNSSEC Key not configured\");\n      }\n      //TODO - perhaps read in actual DNSKEY record structure?\n      Name zoneName \u003d zone.getOrigin();\n      DNSKEYRecord dnskeyRecord \u003d dnsKeyRecs.get(zoneName);\n      if (dnskeyRecord \u003d\u003d null) {\n        byte[] key \u003d Base64.decodeBase64(publicKey.getBytes(\"UTF-8\"));\n        dnskeyRecord \u003d new DNSKEYRecord(zoneName,\n            DClass.IN, ttl,\n            DNSKEYRecord.Flags.ZONE_KEY,\n            DNSKEYRecord.Protocol.DNSSEC,\n            DNSSEC.Algorithm.RSASHA256, key);\n        dnsKeyRecs.putIfAbsent(zoneName, dnskeyRecord);\n      }\n      LOG.info(\"Registering {}\", dnskeyRecord);\n      try (CloseableLock lock \u003d writeLock.lock()) {\n        zone.addRecord(dnskeyRecord);\n\n        String privateKeyFile \u003d conf.get(KEY_DNSSEC_PRIVATE_KEY_FILE,\n            DEFAULT_DNSSEC_PRIVATE_KEY_FILE);\n\n        Properties props \u003d new Properties();\n        try (\n            FileInputStream inputStream \u003d new FileInputStream(privateKeyFile)) {\n          props.load(inputStream);\n        }\n\n        String privateModulus \u003d props.getProperty(\"Modulus\");\n        String privateExponent \u003d props.getProperty(\"PrivateExponent\");\n\n        RSAPrivateKeySpec privateSpec \u003d new RSAPrivateKeySpec(\n            new BigInteger(1, Base64.decodeBase64(privateModulus)),\n            new BigInteger(1, Base64.decodeBase64(privateExponent)));\n\n        KeyFactory factory \u003d KeyFactory.getInstance(\"RSA\");\n        privateKey \u003d factory.generatePrivate(privateSpec);\n\n        signSiteRecord(zone, dnskeyRecord);\n        signSiteRecord(zone, soaRecord);\n        signSiteRecord(zone, nsRecord);\n      }\n      // create required DS records\n\n      // domain\n//      DSRecord dsRecord \u003d new DSRecord(zoneName, DClass.IN, ttl,\n//                                       DSRecord.Digest.SHA1, dnskeyRecord);\n//      zone.addRecord(dsRecord);\n//      signSiteRecord(zone, dsRecord);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-registry/src/main/java/org/apache/hadoop/registry/server/dns/RegistryDNS.java"
    }
  }
}