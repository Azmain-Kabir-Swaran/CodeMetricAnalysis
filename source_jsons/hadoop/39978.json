{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacitySchedulerQueueManager.java",
  "functionName": "reinitializeQueues",
  "functionId": "reinitializeQueues___newConf-CapacitySchedulerConfiguration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
  "functionStartLine": 171,
  "functionEndLine": 203,
  "numCommitsSeen": 19,
  "timeTaken": 4977,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf",
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
    "4627dd670800b2191ebdd41c6971ccd53e718e18",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
    "1d36b53ab6d9bb1d9144101e424c24371343c5bf",
    "72054a817dfb43e93916d7036eba19cf2f49cea2",
    "287d3d6804a869723ae36605a3c2d2b3eae3941e",
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Ybodychange",
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": "Ybodychange",
    "4627dd670800b2191ebdd41c6971ccd53e718e18": "Ybodychange",
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": "Ybodychange",
    "1d36b53ab6d9bb1d9144101e424c24371343c5bf": "Ybodychange",
    "72054a817dfb43e93916d7036eba19cf2f49cea2": "Ybodychange",
    "287d3d6804a869723ae36605a3c2d2b3eae3941e": "Ybodychange",
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed": "Ybodychange",
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/01/20 9:46 AM",
      "commitNameOld": "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 56.73,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n-    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n+    CSQueueStore newQueues \u003d new CSQueueStore();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n     // When failing over, if using configuration store, don\u0027t validate queue\n     // hierarchy since queues can be removed without being STOPPED.\n     if (!csContext.isConfigurationMutable() ||\n         csContext.getRMContext().getHAServiceState()\n             !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n       // Ensure queue hierarchy in the new XML file is proper.\n       CapacitySchedulerConfigValidator\n               .validateQueueHierarchy(queues, newQueues, newConf);\n     }\n \n     // Add new queues and delete OldQeueus only after validation.\n     updateQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n     setQueueAcls(authorizer, appPriorityACLManager, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    CSQueueStore newQueues \u003d new CSQueueStore();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // When failing over, if using configuration store, don\u0027t validate queue\n    // hierarchy since queues can be removed without being STOPPED.\n    if (!csContext.isConfigurationMutable() ||\n        csContext.getRMContext().getHAServiceState()\n            !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n      // Ensure queue hierarchy in the new XML file is proper.\n      CapacitySchedulerConfigValidator\n              .validateQueueHierarchy(queues, newQueues, newConf);\n    }\n\n    // Add new queues and delete OldQeueus only after validation.\n    updateQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, appPriorityACLManager, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10022. RM Rest API to validate the CapacityScheduler Configuration change\n\nContributed by Kinga Marton.\n",
      "commitDate": "28/01/20 9:46 AM",
      "commitName": "1ab9c692fa9107f10c0d8fbfbb9e74f54bddc960",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "05/12/19 11:38 AM",
      "commitNameOld": "4627dd670800b2191ebdd41c6971ccd53e718e18",
      "commitAuthorOld": "Szilard Nemeth",
      "daysBetweenCommits": 53.92,
      "commitsBetweenForRepo": 183,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,33 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n     // When failing over, if using configuration store, don\u0027t validate queue\n     // hierarchy since queues can be removed without being STOPPED.\n     if (!csContext.isConfigurationMutable() ||\n         csContext.getRMContext().getHAServiceState()\n             !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n       // Ensure queue hierarchy in the new XML file is proper.\n-      validateQueueHierarchy(queues, newQueues, newConf);\n+      CapacitySchedulerConfigValidator\n+              .validateQueueHierarchy(queues, newQueues, newConf);\n     }\n \n     // Add new queues and delete OldQeueus only after validation.\n     updateQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n     setQueueAcls(authorizer, appPriorityACLManager, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // When failing over, if using configuration store, don\u0027t validate queue\n    // hierarchy since queues can be removed without being STOPPED.\n    if (!csContext.isConfigurationMutable() ||\n        csContext.getRMContext().getHAServiceState()\n            !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n      // Ensure queue hierarchy in the new XML file is proper.\n      CapacitySchedulerConfigValidator\n              .validateQueueHierarchy(queues, newQueues, newConf);\n    }\n\n    // Add new queues and delete OldQeueus only after validation.\n    updateQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, appPriorityACLManager, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "4627dd670800b2191ebdd41c6971ccd53e718e18": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9780. SchedulerConf Mutation API does not Allow Stop and Remove Queue in a single call. Contributed by Prabhu Joseph\n",
      "commitDate": "05/12/19 11:38 AM",
      "commitName": "4627dd670800b2191ebdd41c6971ccd53e718e18",
      "commitAuthor": "Szilard Nemeth",
      "commitDateOld": "31/08/19 9:30 PM",
      "commitNameOld": "c7ef4fb74acacdb184d12bafadd8fb040b5c04b6",
      "commitAuthorOld": "Abhishek Modi",
      "daysBetweenCommits": 95.63,
      "commitsBetweenForRepo": 540,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n     // When failing over, if using configuration store, don\u0027t validate queue\n     // hierarchy since queues can be removed without being STOPPED.\n     if (!csContext.isConfigurationMutable() ||\n         csContext.getRMContext().getHAServiceState()\n             !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n       // Ensure queue hierarchy in the new XML file is proper.\n-      validateQueueHierarchy(queues, newQueues);\n+      validateQueueHierarchy(queues, newQueues, newConf);\n     }\n \n     // Add new queues and delete OldQeueus only after validation.\n     updateQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n     setQueueAcls(authorizer, appPriorityACLManager, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // When failing over, if using configuration store, don\u0027t validate queue\n    // hierarchy since queues can be removed without being STOPPED.\n    if (!csContext.isConfigurationMutable() ||\n        csContext.getRMContext().getHAServiceState()\n            !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n      // Ensure queue hierarchy in the new XML file is proper.\n      validateQueueHierarchy(queues, newQueues, newConf);\n    }\n\n    // Add new queues and delete OldQeueus only after validation.\n    updateQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, appPriorityACLManager, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "0987a7b8cbbbb2c1e4c2095821d98a7db19644df": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7419. CapacityScheduler: Allow auto leaf queue creation after queue mapping. (Suma Shivaprasad via wangda)\n\nChange-Id: Ia1704bb8cb5070e5b180b5a85787d7b9ca57ebc6\n",
      "commitDate": "16/11/17 11:25 AM",
      "commitName": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "06/11/17 9:38 PM",
      "commitNameOld": "13fa2d4e3e55a849dcd7e472750f3e0422cc2ac9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.57,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n     // When failing over, if using configuration store, don\u0027t validate queue\n     // hierarchy since queues can be removed without being STOPPED.\n     if (!csContext.isConfigurationMutable() ||\n         csContext.getRMContext().getHAServiceState()\n             !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n-      // Ensure queue hiearchy in the new XML file is proper.\n+      // Ensure queue hierarchy in the new XML file is proper.\n       validateQueueHierarchy(queues, newQueues);\n     }\n \n     // Add new queues and delete OldQeueus only after validation.\n     updateQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n     setQueueAcls(authorizer, appPriorityACLManager, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // When failing over, if using configuration store, don\u0027t validate queue\n    // hierarchy since queues can be removed without being STOPPED.\n    if (!csContext.isConfigurationMutable() ||\n        csContext.getRMContext().getHAServiceState()\n            !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n      // Ensure queue hierarchy in the new XML file is proper.\n      validateQueueHierarchy(queues, newQueues);\n    }\n\n    // Add new queues and delete OldQeueus only after validation.\n    updateQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, appPriorityACLManager, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "1d36b53ab6d9bb1d9144101e424c24371343c5bf": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7252. Removing queue then failing over results in exception\n",
      "commitDate": "09/10/17 11:11 AM",
      "commitName": "1d36b53ab6d9bb1d9144101e424c24371343c5bf",
      "commitAuthor": "Jonathan Hung",
      "commitDateOld": "13/08/17 9:09 PM",
      "commitNameOld": "d8f74c3964fa429a4a53c3651d175792cf00ac81",
      "commitAuthorOld": "bibinchundatt",
      "daysBetweenCommits": 56.58,
      "commitsBetweenForRepo": 524,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,32 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n-    // Ensure queue hiearchy in the new XML file is proper.\n-    validateQueueHierarchy(queues, newQueues);\n+    // When failing over, if using configuration store, don\u0027t validate queue\n+    // hierarchy since queues can be removed without being STOPPED.\n+    if (!csContext.isConfigurationMutable() ||\n+        csContext.getRMContext().getHAServiceState()\n+            !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n+      // Ensure queue hiearchy in the new XML file is proper.\n+      validateQueueHierarchy(queues, newQueues);\n+    }\n \n     // Add new queues and delete OldQeueus only after validation.\n     updateQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n     setQueueAcls(authorizer, appPriorityACLManager, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // When failing over, if using configuration store, don\u0027t validate queue\n    // hierarchy since queues can be removed without being STOPPED.\n    if (!csContext.isConfigurationMutable() ||\n        csContext.getRMContext().getHAServiceState()\n            !\u003d HAServiceProtocol.HAServiceState.STANDBY) {\n      // Ensure queue hiearchy in the new XML file is proper.\n      validateQueueHierarchy(queues, newQueues);\n    }\n\n    // Add new queues and delete OldQeueus only after validation.\n    updateQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, appPriorityACLManager, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "72054a817dfb43e93916d7036eba19cf2f49cea2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5556. CapacityScheduler: Support deleting queues without requiring a RM restart. (Naganarasimha G R via wangda)\n",
      "commitDate": "18/01/17 1:31 PM",
      "commitName": "72054a817dfb43e93916d7036eba19cf2f49cea2",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "09/01/17 8:40 AM",
      "commitNameOld": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.2,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n-    // Ensure all existing queues are still present\n-    validateExistingQueues(queues, newQueues);\n+    // Ensure queue hiearchy in the new XML file is proper.\n+    validateQueueHierarchy(queues, newQueues);\n \n-    // Add new queues\n-    addNewQueues(queues, newQueues);\n+    // Add new queues and delete OldQeueus only after validation.\n+    updateQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n     setQueueAcls(authorizer, appPriorityACLManager, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // Ensure queue hiearchy in the new XML file is proper.\n    validateQueueHierarchy(queues, newQueues);\n\n    // Add new queues and delete OldQeueus only after validation.\n    updateQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, appPriorityACLManager, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "287d3d6804a869723ae36605a3c2d2b3eae3941e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3955. Support for application priority ACLs in queues of CapacityScheduler. (Sunil G via wangda)\n",
      "commitDate": "09/01/17 8:40 AM",
      "commitName": "287d3d6804a869723ae36605a3c2d2b3eae3941e",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "27/12/16 9:18 PM",
      "commitNameOld": "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 12.47,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,26 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n-    setQueueAcls(authorizer, queues);\n+    setQueueAcls(authorizer, appPriorityACLManager, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n     this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, appPriorityACLManager, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "0840b4329b2428b20b862f70d72cbdcd6d1618ed": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5756. Add state-machine implementation for scheduler queues. (Xuan Gong via wangda)\n",
      "commitDate": "27/12/16 9:18 PM",
      "commitName": "0840b4329b2428b20b862f70d72cbdcd6d1618ed",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "30/11/16 1:38 PM",
      "commitNameOld": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 27.32,
      "commitsBetweenForRepo": 137,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,26 @@\n   public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n       throws IOException {\n     // Parse new queues\n     Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n     CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n         CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n \n     // Ensure all existing queues are still present\n     validateExistingQueues(queues, newQueues);\n \n     // Add new queues\n     addNewQueues(queues, newQueues);\n \n     // Re-configure queues\n     root.reinitialize(newRoot, this.csContext.getClusterResource());\n \n     setQueueAcls(authorizer, queues);\n \n     // Re-calculate headroom for active applications\n     Resource clusterResource \u003d this.csContext.getClusterResource();\n     root.updateClusterResource(clusterResource, new ResourceLimits(\n         clusterResource));\n \n     labelManager.reinitializeQueueLabels(getQueueToLabels());\n+    this.queueStateManager.initialize(this);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n    this.queueStateManager.initialize(this);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java",
      "extendedDetails": {}
    },
    "69fb70c31aa277f7fb14b05c0185ddc5cd90793d": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5761. Separate QueueManager from Scheduler. (Xuan Gong via gtcarrera9)\n",
      "commitDate": "30/11/16 1:38 PM",
      "commitName": "69fb70c31aa277f7fb14b05c0185ddc5cd90793d",
      "commitAuthor": "Li Lu",
      "diff": "@@ -0,0 +1,25 @@\n+  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n+      throws IOException {\n+    // Parse new queues\n+    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n+    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n+        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n+\n+    // Ensure all existing queues are still present\n+    validateExistingQueues(queues, newQueues);\n+\n+    // Add new queues\n+    addNewQueues(queues, newQueues);\n+\n+    // Re-configure queues\n+    root.reinitialize(newRoot, this.csContext.getClusterResource());\n+\n+    setQueueAcls(authorizer, queues);\n+\n+    // Re-calculate headroom for active applications\n+    Resource clusterResource \u003d this.csContext.getClusterResource();\n+    root.updateClusterResource(clusterResource, new ResourceLimits(\n+        clusterResource));\n+\n+    labelManager.reinitializeQueueLabels(getQueueToLabels());\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void reinitializeQueues(CapacitySchedulerConfiguration newConf)\n      throws IOException {\n    // Parse new queues\n    Map\u003cString, CSQueue\u003e newQueues \u003d new HashMap\u003c\u003e();\n    CSQueue newRoot \u003d  parseQueue(this.csContext, newConf, null,\n        CapacitySchedulerConfiguration.ROOT, newQueues, queues, NOOP);\n\n    // Ensure all existing queues are still present\n    validateExistingQueues(queues, newQueues);\n\n    // Add new queues\n    addNewQueues(queues, newQueues);\n\n    // Re-configure queues\n    root.reinitialize(newRoot, this.csContext.getClusterResource());\n\n    setQueueAcls(authorizer, queues);\n\n    // Re-calculate headroom for active applications\n    Resource clusterResource \u003d this.csContext.getClusterResource();\n    root.updateClusterResource(clusterResource, new ResourceLimits(\n        clusterResource));\n\n    labelManager.reinitializeQueueLabels(getQueueToLabels());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacitySchedulerQueueManager.java"
    }
  }
}