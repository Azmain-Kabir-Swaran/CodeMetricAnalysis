{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "HadoopArchiveLogs.java",
  "functionName": "checkMaxEligible",
  "functionId": "checkMaxEligible",
  "sourceFilePath": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
  "functionStartLine": 440,
  "functionEndLine": 469,
  "numCommitsSeen": 11,
  "timeTaken": 787,
  "changeHistory": [
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
    "119cc75e7ebd723790f6326498383304aba384a2"
  ],
  "changeHistoryShort": {
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": "Ybodychange",
    "119cc75e7ebd723790f6326498383304aba384a2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d3c49e76624b7e42a1321c649a1d7bb9906b3073": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6480. archive-logs tool may miss applications (rkanter)\n",
      "commitDate": "25/09/15 3:02 PM",
      "commitName": "d3c49e76624b7e42a1321c649a1d7bb9906b3073",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "09/09/15 5:45 PM",
      "commitNameOld": "119cc75e7ebd723790f6326498383304aba384a2",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.89,
      "commitsBetweenForRepo": 119,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,16 +1,27 @@\n   void checkMaxEligible() {\n     // If we have too many eligible apps, remove the newest ones first\n     if (maxEligible \u003e 0 \u0026\u0026 eligibleApplications.size() \u003e maxEligible) {\n-      List\u003cApplicationReport\u003e sortedApplications \u003d\n-          new ArrayList\u003cApplicationReport\u003e(eligibleApplications);\n-      Collections.sort(sortedApplications, new Comparator\u003cApplicationReport\u003e() {\n+      if (verbose) {\n+        LOG.info(\"Too many applications (\" + eligibleApplications.size() +\n+            \" \u003e \" + maxEligible + \")\");\n+      }\n+      List\u003cAppInfo\u003e sortedApplications \u003d\n+          new ArrayList\u003cAppInfo\u003e(eligibleApplications);\n+      Collections.sort(sortedApplications, new Comparator\u003cAppInfo\u003e() {\n         @Override\n-        public int compare(ApplicationReport o1, ApplicationReport o2) {\n-          return Long.compare(o1.getFinishTime(), o2.getFinishTime());\n+        public int compare(AppInfo o1, AppInfo o2) {\n+          int lCompare \u003d Long.compare(o1.getFinishTime(), o2.getFinishTime());\n+          if (lCompare \u003d\u003d 0) {\n+            return o1.getAppId().compareTo(o2.getAppId());\n+          }\n+          return lCompare;\n         }\n       });\n       for (int i \u003d maxEligible; i \u003c sortedApplications.size(); i++) {\n+        if (verbose) {\n+          LOG.info(\"Removing \" + sortedApplications.get(i));\n+        }\n         eligibleApplications.remove(sortedApplications.get(i));\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  void checkMaxEligible() {\n    // If we have too many eligible apps, remove the newest ones first\n    if (maxEligible \u003e 0 \u0026\u0026 eligibleApplications.size() \u003e maxEligible) {\n      if (verbose) {\n        LOG.info(\"Too many applications (\" + eligibleApplications.size() +\n            \" \u003e \" + maxEligible + \")\");\n      }\n      List\u003cAppInfo\u003e sortedApplications \u003d\n          new ArrayList\u003cAppInfo\u003e(eligibleApplications);\n      Collections.sort(sortedApplications, new Comparator\u003cAppInfo\u003e() {\n        @Override\n        public int compare(AppInfo o1, AppInfo o2) {\n          int lCompare \u003d Long.compare(o1.getFinishTime(), o2.getFinishTime());\n          if (lCompare \u003d\u003d 0) {\n            return o1.getAppId().compareTo(o2.getAppId());\n          }\n          return lCompare;\n        }\n      });\n      for (int i \u003d maxEligible; i \u003c sortedApplications.size(); i++) {\n        if (verbose) {\n          LOG.info(\"Removing \" + sortedApplications.get(i));\n        }\n        eligibleApplications.remove(sortedApplications.get(i));\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java",
      "extendedDetails": {}
    },
    "119cc75e7ebd723790f6326498383304aba384a2": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6415. Create a tool to combine aggregated logs into HAR files. (Robert Kanter via kasha)\n",
      "commitDate": "09/09/15 5:45 PM",
      "commitName": "119cc75e7ebd723790f6326498383304aba384a2",
      "commitAuthor": "Karthik Kambatla",
      "diff": "@@ -0,0 +1,16 @@\n+  void checkMaxEligible() {\n+    // If we have too many eligible apps, remove the newest ones first\n+    if (maxEligible \u003e 0 \u0026\u0026 eligibleApplications.size() \u003e maxEligible) {\n+      List\u003cApplicationReport\u003e sortedApplications \u003d\n+          new ArrayList\u003cApplicationReport\u003e(eligibleApplications);\n+      Collections.sort(sortedApplications, new Comparator\u003cApplicationReport\u003e() {\n+        @Override\n+        public int compare(ApplicationReport o1, ApplicationReport o2) {\n+          return Long.compare(o1.getFinishTime(), o2.getFinishTime());\n+        }\n+      });\n+      for (int i \u003d maxEligible; i \u003c sortedApplications.size(); i++) {\n+        eligibleApplications.remove(sortedApplications.get(i));\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  void checkMaxEligible() {\n    // If we have too many eligible apps, remove the newest ones first\n    if (maxEligible \u003e 0 \u0026\u0026 eligibleApplications.size() \u003e maxEligible) {\n      List\u003cApplicationReport\u003e sortedApplications \u003d\n          new ArrayList\u003cApplicationReport\u003e(eligibleApplications);\n      Collections.sort(sortedApplications, new Comparator\u003cApplicationReport\u003e() {\n        @Override\n        public int compare(ApplicationReport o1, ApplicationReport o2) {\n          return Long.compare(o1.getFinishTime(), o2.getFinishTime());\n        }\n      });\n      for (int i \u003d maxEligible; i \u003c sortedApplications.size(); i++) {\n        eligibleApplications.remove(sortedApplications.get(i));\n      }\n    }\n  }",
      "path": "hadoop-tools/hadoop-archive-logs/src/main/java/org/apache/hadoop/tools/HadoopArchiveLogs.java"
    }
  }
}