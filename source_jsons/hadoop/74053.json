{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RPC.java",
  "functionName": "getHighestSupportedProtocol",
  "functionId": "getHighestSupportedProtocol___rpcKind-RpcKind__protocolName-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
  "functionStartLine": 1010,
  "functionEndLine": 1031,
  "numCommitsSeen": 49,
  "timeTaken": 2266,
  "changeHistory": [
    "a9002bfea1e02c4e565cc708dbf55607f5a6d458",
    "65200998c01b17e017d1814e8b1f4d82ac334a23",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d"
  ],
  "changeHistoryShort": {
    "a9002bfea1e02c4e565cc708dbf55607f5a6d458": "Ybodychange",
    "65200998c01b17e017d1814e8b1f4d82ac334a23": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "a9002bfea1e02c4e565cc708dbf55607f5a6d458": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7968. Errant println left in RPC.getHighestSupportedProtocol (Sho Shimauchi via harsh)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1231732 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "15/01/12 11:15 AM",
      "commitName": "a9002bfea1e02c4e565cc708dbf55607f5a6d458",
      "commitAuthor": "Harsh J",
      "commitDateOld": "04/12/11 12:44 PM",
      "commitNameOld": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 41.94,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,22 @@\n    VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n        String protocolName) {    \n      Long highestVersion \u003d 0L;\n      ProtoClassProtoImpl highest \u003d null;\n- System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n+     if (LOG.isDebugEnabled()) {\n+       LOG.debug(\"Size of protoMap for \" + rpcKind + \" \u003d\"\n+           + getProtocolImplMap(rpcKind).size());\n+     }\n      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n            getProtocolImplMap(rpcKind).entrySet()) {\n        if (pv.getKey().protocol.equals(protocolName)) {\n          if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n            highest \u003d pv.getValue();\n            highestVersion \u003d pv.getKey().version;\n          } \n        }\n      }\n      if (highest \u003d\u003d null) {\n        return null;\n      }\n      return new VerProtocolImpl(highestVersion,  highest);   \n    }\n\\ No newline at end of file\n",
      "actualSource": "   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n       String protocolName) {    \n     Long highestVersion \u003d 0L;\n     ProtoClassProtoImpl highest \u003d null;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Size of protoMap for \" + rpcKind + \" \u003d\"\n           + getProtocolImplMap(rpcKind).size());\n     }\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n           getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n           highest \u003d pv.getValue();\n           highestVersion \u003d pv.getKey().version;\n         } \n       }\n     }\n     if (highest \u003d\u003d null) {\n       return null;\n     }\n     return new VerProtocolImpl(highestVersion,  highest);   \n   }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
      "extendedDetails": {}
    },
    "65200998c01b17e017d1814e8b1f4d82ac334a23": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/12/11 12:44 PM",
      "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-    private VerProtocolImpl getHighestSupportedProtocol(String protocolName) {    \n-      Long highestVersion \u003d 0L;\n-      ProtoClassProtoImpl highest \u003d null;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : protocolImplMap\n-          .entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n-            highest \u003d pv.getValue();\n-            highestVersion \u003d pv.getKey().version;\n-          } \n-        }\n-      }\n-      if (highest \u003d\u003d null) {\n-        return null;\n-      }\n-      return new VerProtocolImpl(highestVersion,  highest);   \n-    }\n\\ No newline at end of file\n+   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n+       String protocolName) {    \n+     Long highestVersion \u003d 0L;\n+     ProtoClassProtoImpl highest \u003d null;\n+ System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n+           getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n+           highest \u003d pv.getValue();\n+           highestVersion \u003d pv.getKey().version;\n+         } \n+       }\n+     }\n+     if (highest \u003d\u003d null) {\n+       return null;\n+     }\n+     return new VerProtocolImpl(highestVersion,  highest);   \n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n       String protocolName) {    \n     Long highestVersion \u003d 0L;\n     ProtoClassProtoImpl highest \u003d null;\n System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n           getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n           highest \u003d pv.getValue();\n           highestVersion \u003d pv.getKey().version;\n         } \n       }\n     }\n     if (highest \u003d\u003d null) {\n       return null;\n     }\n     return new VerProtocolImpl(highestVersion,  highest);   \n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java",
            "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
            "oldMethodName": "getHighestSupportedProtocol",
            "newMethodName": "getHighestSupportedProtocol"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-    private VerProtocolImpl getHighestSupportedProtocol(String protocolName) {    \n-      Long highestVersion \u003d 0L;\n-      ProtoClassProtoImpl highest \u003d null;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : protocolImplMap\n-          .entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n-            highest \u003d pv.getValue();\n-            highestVersion \u003d pv.getKey().version;\n-          } \n-        }\n-      }\n-      if (highest \u003d\u003d null) {\n-        return null;\n-      }\n-      return new VerProtocolImpl(highestVersion,  highest);   \n-    }\n\\ No newline at end of file\n+   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n+       String protocolName) {    \n+     Long highestVersion \u003d 0L;\n+     ProtoClassProtoImpl highest \u003d null;\n+ System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n+           getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n+           highest \u003d pv.getValue();\n+           highestVersion \u003d pv.getKey().version;\n+         } \n+       }\n+     }\n+     if (highest \u003d\u003d null) {\n+       return null;\n+     }\n+     return new VerProtocolImpl(highestVersion,  highest);   \n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n       String protocolName) {    \n     Long highestVersion \u003d 0L;\n     ProtoClassProtoImpl highest \u003d null;\n System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n           getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n           highest \u003d pv.getValue();\n           highestVersion \u003d pv.getKey().version;\n         } \n       }\n     }\n     if (highest \u003d\u003d null) {\n       return null;\n     }\n     return new VerProtocolImpl(highestVersion,  highest);   \n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-    private VerProtocolImpl getHighestSupportedProtocol(String protocolName) {    \n-      Long highestVersion \u003d 0L;\n-      ProtoClassProtoImpl highest \u003d null;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : protocolImplMap\n-          .entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n-            highest \u003d pv.getValue();\n-            highestVersion \u003d pv.getKey().version;\n-          } \n-        }\n-      }\n-      if (highest \u003d\u003d null) {\n-        return null;\n-      }\n-      return new VerProtocolImpl(highestVersion,  highest);   \n-    }\n\\ No newline at end of file\n+   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n+       String protocolName) {    \n+     Long highestVersion \u003d 0L;\n+     ProtoClassProtoImpl highest \u003d null;\n+ System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n+           getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n+           highest \u003d pv.getValue();\n+           highestVersion \u003d pv.getKey().version;\n+         } \n+       }\n+     }\n+     if (highest \u003d\u003d null) {\n+       return null;\n+     }\n+     return new VerProtocolImpl(highestVersion,  highest);   \n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n       String protocolName) {    \n     Long highestVersion \u003d 0L;\n     ProtoClassProtoImpl highest \u003d null;\n System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n           getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n           highest \u003d pv.getValue();\n           highestVersion \u003d pv.getKey().version;\n         } \n       }\n     }\n     if (highest \u003d\u003d null) {\n       return null;\n     }\n     return new VerProtocolImpl(highestVersion,  highest);   \n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-7862  Move the support for multiple protocols to lower layer so that Writable, PB and Avro can all use it (includes HDFS and MR changes to match) (Sanjay) \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1210208 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/12/11 12:44 PM",
          "commitName": "65200998c01b17e017d1814e8b1f4d82ac334a23",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "04/12/11 12:11 PM",
          "commitNameOld": "e948247715ba001b00eafc5f801fa926c409ea5a",
          "commitAuthorOld": "Mahadev Konar",
          "daysBetweenCommits": 0.02,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,17 +1,19 @@\n-    private VerProtocolImpl getHighestSupportedProtocol(String protocolName) {    \n-      Long highestVersion \u003d 0L;\n-      ProtoClassProtoImpl highest \u003d null;\n-      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : protocolImplMap\n-          .entrySet()) {\n-        if (pv.getKey().protocol.equals(protocolName)) {\n-          if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n-            highest \u003d pv.getValue();\n-            highestVersion \u003d pv.getKey().version;\n-          } \n-        }\n-      }\n-      if (highest \u003d\u003d null) {\n-        return null;\n-      }\n-      return new VerProtocolImpl(highestVersion,  highest);   \n-    }\n\\ No newline at end of file\n+   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n+       String protocolName) {    \n+     Long highestVersion \u003d 0L;\n+     ProtoClassProtoImpl highest \u003d null;\n+ System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n+     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n+           getProtocolImplMap(rpcKind).entrySet()) {\n+       if (pv.getKey().protocol.equals(protocolName)) {\n+         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n+           highest \u003d pv.getValue();\n+           highestVersion \u003d pv.getKey().version;\n+         } \n+       }\n+     }\n+     if (highest \u003d\u003d null) {\n+       return null;\n+     }\n+     return new VerProtocolImpl(highestVersion,  highest);   \n+   }\n\\ No newline at end of file\n",
          "actualSource": "   VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n       String protocolName) {    \n     Long highestVersion \u003d 0L;\n     ProtoClassProtoImpl highest \u003d null;\n System.out.println(\"Size of protoMap for \" + rpcKind + \" \u003d\" + getProtocolImplMap(rpcKind).size());\n     for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : \n           getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n           highest \u003d pv.getValue();\n           highestVersion \u003d pv.getKey().version;\n         } \n       }\n     }\n     if (highest \u003d\u003d null) {\n       return null;\n     }\n     return new VerProtocolImpl(highestVersion,  highest);   \n   }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/RPC.java",
          "extendedDetails": {
            "oldValue": "[protocolName-String]",
            "newValue": "[rpcKind-RpcKind, protocolName-String]"
          }
        }
      ]
    },
    "b97a4d40c8752451fc02168a7f6eb3e93e459c2d": {
      "type": "Yintroduced",
      "commitMessage": "  HADOOP-7524 and MapReduce-2887 Change RPC to allow multiple protocols including multuple versions of the same protocol (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1164771 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/09/11 5:31 PM",
      "commitName": "b97a4d40c8752451fc02168a7f6eb3e93e459c2d",
      "commitAuthor": "Sanjay Radia",
      "diff": "@@ -0,0 +1,17 @@\n+    private VerProtocolImpl getHighestSupportedProtocol(String protocolName) {    \n+      Long highestVersion \u003d 0L;\n+      ProtoClassProtoImpl highest \u003d null;\n+      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : protocolImplMap\n+          .entrySet()) {\n+        if (pv.getKey().protocol.equals(protocolName)) {\n+          if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n+            highest \u003d pv.getValue();\n+            highestVersion \u003d pv.getKey().version;\n+          } \n+        }\n+      }\n+      if (highest \u003d\u003d null) {\n+        return null;\n+      }\n+      return new VerProtocolImpl(highestVersion,  highest);   \n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private VerProtocolImpl getHighestSupportedProtocol(String protocolName) {    \n      Long highestVersion \u003d 0L;\n      ProtoClassProtoImpl highest \u003d null;\n      for (Map.Entry\u003cProtoNameVer, ProtoClassProtoImpl\u003e pv : protocolImplMap\n          .entrySet()) {\n        if (pv.getKey().protocol.equals(protocolName)) {\n          if ((highest \u003d\u003d null) || (pv.getKey().version \u003e highestVersion)) {\n            highest \u003d pv.getValue();\n            highestVersion \u003d pv.getKey().version;\n          } \n        }\n      }\n      if (highest \u003d\u003d null) {\n        return null;\n      }\n      return new VerProtocolImpl(highestVersion,  highest);   \n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/WritableRpcEngine.java"
    }
  }
}