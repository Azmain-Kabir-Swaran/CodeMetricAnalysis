{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "IterativePlanner.java",
  "functionName": "validateInputStage",
  "functionId": "validateInputStage___plan-Plan__rr-ReservationRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
  "functionStartLine": 232,
  "functionEndLine": 262,
  "numCommitsSeen": 9,
  "timeTaken": 2182,
  "changeHistory": [
    "156f24ead00436faad5d4aeef327a546392cd265",
    "f66ffcf832235e0da0bb050fff08e248b547c360"
  ],
  "changeHistoryShort": {
    "156f24ead00436faad5d4aeef327a546392cd265": "Ymultichange(Ymovefromfile,Ybodychange,Yrename,Yparameterchange)",
    "f66ffcf832235e0da0bb050fff08e248b547c360": "Yintroduced"
  },
  "changeHistoryDetails": {
    "156f24ead00436faad5d4aeef327a546392cd265": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange,Yrename,Yparameterchange)",
      "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
      "commitDate": "25/07/15 7:39 AM",
      "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
      "commitAuthor": "ccurino",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
          "commitDate": "25/07/15 7:39 AM",
          "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
          "commitAuthor": "ccurino",
          "commitDateOld": "24/07/15 6:31 PM",
          "commitNameOld": "adcf5dd94052481f66deaf402ac4ace1ffc06f49",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.55,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,31 @@\n-  private void validateInput(Plan plan, ReservationRequest rr,\n-      Resource totalCapacity) throws ContractValidationException {\n+  private void validateInputStage(Plan plan, ReservationRequest rr)\n+      throws ContractValidationException {\n \n+    // Validate concurrency\n     if (rr.getConcurrency() \u003c 1) {\n       throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n     }\n \n+    // Validate number of containers\n     if (rr.getNumContainers() \u003c\u003d 0) {\n-      throw new ContractValidationException(\"Num containers should be \u003e\u003d 0\");\n+      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n     }\n \n-    // check that gangSize and numContainers are compatible\n+    // Check that gangSize and numContainers are compatible\n     if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n       throw new ContractValidationException(\n           \"Parallelism must be an exact multiple of gang size\");\n     }\n \n-    // check that the largest container request does not exceed\n-    // the cluster-wide limit for container sizes\n-    if (Resources.greaterThan(plan.getResourceCalculator(), totalCapacity,\n+    // Check that the largest container request does not exceed the cluster-wide\n+    // limit for container sizes\n+    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n         rr.getCapability(), plan.getMaximumAllocation())) {\n-      throw new ContractValidationException(\"Individual\"\n-          + \" capability requests should not exceed cluster\u0027s maxAlloc\");\n+\n+      throw new ContractValidationException(\n+          \"Individual capability requests should not exceed cluster\u0027s \" +\n+          \"maxAlloc\");\n+\n     }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validateInputStage(Plan plan, ReservationRequest rr)\n      throws ContractValidationException {\n\n    // Validate concurrency\n    if (rr.getConcurrency() \u003c 1) {\n      throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n    }\n\n    // Validate number of containers\n    if (rr.getNumContainers() \u003c\u003d 0) {\n      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n    }\n\n    // Check that gangSize and numContainers are compatible\n    if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n      throw new ContractValidationException(\n          \"Parallelism must be an exact multiple of gang size\");\n    }\n\n    // Check that the largest container request does not exceed the cluster-wide\n    // limit for container sizes\n    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n        rr.getCapability(), plan.getMaximumAllocation())) {\n\n      throw new ContractValidationException(\n          \"Individual capability requests should not exceed cluster\u0027s \" +\n          \"maxAlloc\");\n\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/GreedyReservationAgent.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
            "oldMethodName": "validateInput",
            "newMethodName": "validateInputStage"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
          "commitDate": "25/07/15 7:39 AM",
          "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
          "commitAuthor": "ccurino",
          "commitDateOld": "24/07/15 6:31 PM",
          "commitNameOld": "adcf5dd94052481f66deaf402ac4ace1ffc06f49",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.55,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,31 @@\n-  private void validateInput(Plan plan, ReservationRequest rr,\n-      Resource totalCapacity) throws ContractValidationException {\n+  private void validateInputStage(Plan plan, ReservationRequest rr)\n+      throws ContractValidationException {\n \n+    // Validate concurrency\n     if (rr.getConcurrency() \u003c 1) {\n       throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n     }\n \n+    // Validate number of containers\n     if (rr.getNumContainers() \u003c\u003d 0) {\n-      throw new ContractValidationException(\"Num containers should be \u003e\u003d 0\");\n+      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n     }\n \n-    // check that gangSize and numContainers are compatible\n+    // Check that gangSize and numContainers are compatible\n     if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n       throw new ContractValidationException(\n           \"Parallelism must be an exact multiple of gang size\");\n     }\n \n-    // check that the largest container request does not exceed\n-    // the cluster-wide limit for container sizes\n-    if (Resources.greaterThan(plan.getResourceCalculator(), totalCapacity,\n+    // Check that the largest container request does not exceed the cluster-wide\n+    // limit for container sizes\n+    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n         rr.getCapability(), plan.getMaximumAllocation())) {\n-      throw new ContractValidationException(\"Individual\"\n-          + \" capability requests should not exceed cluster\u0027s maxAlloc\");\n+\n+      throw new ContractValidationException(\n+          \"Individual capability requests should not exceed cluster\u0027s \" +\n+          \"maxAlloc\");\n+\n     }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validateInputStage(Plan plan, ReservationRequest rr)\n      throws ContractValidationException {\n\n    // Validate concurrency\n    if (rr.getConcurrency() \u003c 1) {\n      throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n    }\n\n    // Validate number of containers\n    if (rr.getNumContainers() \u003c\u003d 0) {\n      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n    }\n\n    // Check that gangSize and numContainers are compatible\n    if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n      throw new ContractValidationException(\n          \"Parallelism must be an exact multiple of gang size\");\n    }\n\n    // Check that the largest container request does not exceed the cluster-wide\n    // limit for container sizes\n    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n        rr.getCapability(), plan.getMaximumAllocation())) {\n\n      throw new ContractValidationException(\n          \"Individual capability requests should not exceed cluster\u0027s \" +\n          \"maxAlloc\");\n\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
          "extendedDetails": {}
        },
        {
          "type": "Yrename",
          "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
          "commitDate": "25/07/15 7:39 AM",
          "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
          "commitAuthor": "ccurino",
          "commitDateOld": "24/07/15 6:31 PM",
          "commitNameOld": "adcf5dd94052481f66deaf402ac4ace1ffc06f49",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.55,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,31 @@\n-  private void validateInput(Plan plan, ReservationRequest rr,\n-      Resource totalCapacity) throws ContractValidationException {\n+  private void validateInputStage(Plan plan, ReservationRequest rr)\n+      throws ContractValidationException {\n \n+    // Validate concurrency\n     if (rr.getConcurrency() \u003c 1) {\n       throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n     }\n \n+    // Validate number of containers\n     if (rr.getNumContainers() \u003c\u003d 0) {\n-      throw new ContractValidationException(\"Num containers should be \u003e\u003d 0\");\n+      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n     }\n \n-    // check that gangSize and numContainers are compatible\n+    // Check that gangSize and numContainers are compatible\n     if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n       throw new ContractValidationException(\n           \"Parallelism must be an exact multiple of gang size\");\n     }\n \n-    // check that the largest container request does not exceed\n-    // the cluster-wide limit for container sizes\n-    if (Resources.greaterThan(plan.getResourceCalculator(), totalCapacity,\n+    // Check that the largest container request does not exceed the cluster-wide\n+    // limit for container sizes\n+    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n         rr.getCapability(), plan.getMaximumAllocation())) {\n-      throw new ContractValidationException(\"Individual\"\n-          + \" capability requests should not exceed cluster\u0027s maxAlloc\");\n+\n+      throw new ContractValidationException(\n+          \"Individual capability requests should not exceed cluster\u0027s \" +\n+          \"maxAlloc\");\n+\n     }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validateInputStage(Plan plan, ReservationRequest rr)\n      throws ContractValidationException {\n\n    // Validate concurrency\n    if (rr.getConcurrency() \u003c 1) {\n      throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n    }\n\n    // Validate number of containers\n    if (rr.getNumContainers() \u003c\u003d 0) {\n      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n    }\n\n    // Check that gangSize and numContainers are compatible\n    if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n      throw new ContractValidationException(\n          \"Parallelism must be an exact multiple of gang size\");\n    }\n\n    // Check that the largest container request does not exceed the cluster-wide\n    // limit for container sizes\n    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n        rr.getCapability(), plan.getMaximumAllocation())) {\n\n      throw new ContractValidationException(\n          \"Individual capability requests should not exceed cluster\u0027s \" +\n          \"maxAlloc\");\n\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
          "extendedDetails": {
            "oldValue": "validateInput",
            "newValue": "validateInputStage"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3656. LowCost: A Cost-Based Placement Agent for YARN Reservations. (Jonathan Yaniv and Ishai Menache via curino)\n",
          "commitDate": "25/07/15 7:39 AM",
          "commitName": "156f24ead00436faad5d4aeef327a546392cd265",
          "commitAuthor": "ccurino",
          "commitDateOld": "24/07/15 6:31 PM",
          "commitNameOld": "adcf5dd94052481f66deaf402ac4ace1ffc06f49",
          "commitAuthorOld": "Allen Wittenauer",
          "daysBetweenCommits": 0.55,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,31 @@\n-  private void validateInput(Plan plan, ReservationRequest rr,\n-      Resource totalCapacity) throws ContractValidationException {\n+  private void validateInputStage(Plan plan, ReservationRequest rr)\n+      throws ContractValidationException {\n \n+    // Validate concurrency\n     if (rr.getConcurrency() \u003c 1) {\n       throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n     }\n \n+    // Validate number of containers\n     if (rr.getNumContainers() \u003c\u003d 0) {\n-      throw new ContractValidationException(\"Num containers should be \u003e\u003d 0\");\n+      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n     }\n \n-    // check that gangSize and numContainers are compatible\n+    // Check that gangSize and numContainers are compatible\n     if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n       throw new ContractValidationException(\n           \"Parallelism must be an exact multiple of gang size\");\n     }\n \n-    // check that the largest container request does not exceed\n-    // the cluster-wide limit for container sizes\n-    if (Resources.greaterThan(plan.getResourceCalculator(), totalCapacity,\n+    // Check that the largest container request does not exceed the cluster-wide\n+    // limit for container sizes\n+    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n         rr.getCapability(), plan.getMaximumAllocation())) {\n-      throw new ContractValidationException(\"Individual\"\n-          + \" capability requests should not exceed cluster\u0027s maxAlloc\");\n+\n+      throw new ContractValidationException(\n+          \"Individual capability requests should not exceed cluster\u0027s \" +\n+          \"maxAlloc\");\n+\n     }\n+\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void validateInputStage(Plan plan, ReservationRequest rr)\n      throws ContractValidationException {\n\n    // Validate concurrency\n    if (rr.getConcurrency() \u003c 1) {\n      throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n    }\n\n    // Validate number of containers\n    if (rr.getNumContainers() \u003c\u003d 0) {\n      throw new ContractValidationException(\"Num containers should be \u003e 0\");\n    }\n\n    // Check that gangSize and numContainers are compatible\n    if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n      throw new ContractValidationException(\n          \"Parallelism must be an exact multiple of gang size\");\n    }\n\n    // Check that the largest container request does not exceed the cluster-wide\n    // limit for container sizes\n    if (Resources.greaterThan(plan.getResourceCalculator(), capacity,\n        rr.getCapability(), plan.getMaximumAllocation())) {\n\n      throw new ContractValidationException(\n          \"Individual capability requests should not exceed cluster\u0027s \" +\n          \"maxAlloc\");\n\n    }\n\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/planning/IterativePlanner.java",
          "extendedDetails": {
            "oldValue": "[plan-Plan, rr-ReservationRequest, totalCapacity-Resource]",
            "newValue": "[plan-Plan, rr-ReservationRequest]"
          }
        }
      ]
    },
    "f66ffcf832235e0da0bb050fff08e248b547c360": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1710. Logic to find allocations within a Plan that satisfy user ReservationRequest(s). Contributed by Carlo Curino and Subru Krishnan.\n(cherry picked from commit aef7928899b37262773f3dc117157bb746bf8918)\n",
      "commitDate": "03/10/14 3:41 PM",
      "commitName": "f66ffcf832235e0da0bb050fff08e248b547c360",
      "commitAuthor": "carlo curino",
      "diff": "@@ -0,0 +1,25 @@\n+  private void validateInput(Plan plan, ReservationRequest rr,\n+      Resource totalCapacity) throws ContractValidationException {\n+\n+    if (rr.getConcurrency() \u003c 1) {\n+      throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n+    }\n+\n+    if (rr.getNumContainers() \u003c\u003d 0) {\n+      throw new ContractValidationException(\"Num containers should be \u003e\u003d 0\");\n+    }\n+\n+    // check that gangSize and numContainers are compatible\n+    if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n+      throw new ContractValidationException(\n+          \"Parallelism must be an exact multiple of gang size\");\n+    }\n+\n+    // check that the largest container request does not exceed\n+    // the cluster-wide limit for container sizes\n+    if (Resources.greaterThan(plan.getResourceCalculator(), totalCapacity,\n+        rr.getCapability(), plan.getMaximumAllocation())) {\n+      throw new ContractValidationException(\"Individual\"\n+          + \" capability requests should not exceed cluster\u0027s maxAlloc\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void validateInput(Plan plan, ReservationRequest rr,\n      Resource totalCapacity) throws ContractValidationException {\n\n    if (rr.getConcurrency() \u003c 1) {\n      throw new ContractValidationException(\"Gang Size should be \u003e\u003d 1\");\n    }\n\n    if (rr.getNumContainers() \u003c\u003d 0) {\n      throw new ContractValidationException(\"Num containers should be \u003e\u003d 0\");\n    }\n\n    // check that gangSize and numContainers are compatible\n    if (rr.getNumContainers() % rr.getConcurrency() !\u003d 0) {\n      throw new ContractValidationException(\n          \"Parallelism must be an exact multiple of gang size\");\n    }\n\n    // check that the largest container request does not exceed\n    // the cluster-wide limit for container sizes\n    if (Resources.greaterThan(plan.getResourceCalculator(), totalCapacity,\n        rr.getCapability(), plan.getMaximumAllocation())) {\n      throw new ContractValidationException(\"Individual\"\n          + \" capability requests should not exceed cluster\u0027s maxAlloc\");\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/reservation/GreedyReservationAgent.java"
    }
  }
}