{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NodesListManager.java",
  "functionName": "readDecommissioningTimeout",
  "functionId": "readDecommissioningTimeout___pConf-Configuration",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
  "functionStartLine": 663,
  "functionEndLine": 680,
  "numCommitsSeen": 35,
  "timeTaken": 4686,
  "changeHistory": [
    "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421"
  ],
  "changeHistoryShort": {
    "b46ca7e73b8bac3fdbff0b13afe009308078acf2": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yparameterchange)",
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b46ca7e73b8bac3fdbff0b13afe009308078acf2": {
      "type": "Ymultichange(Ymovefromfile,Yreturntypechange,Ybodychange,Yparameterchange)",
      "commitMessage": "YARN-6483. Add nodes transitioning to DECOMMISSIONING state to the list of updated nodes returned to the AM. (Juan Rodriguez Hortala via asuresh)\n",
      "commitDate": "22/11/17 7:18 PM",
      "commitName": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
      "commitAuthor": "Arun Suresh",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "YARN-6483. Add nodes transitioning to DECOMMISSIONING state to the list of updated nodes returned to the AM. (Juan Rodriguez Hortala via asuresh)\n",
          "commitDate": "22/11/17 7:18 PM",
          "commitName": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "22/11/17 6:24 PM",
          "commitNameOld": "aab439593b5d3459140b6e104722d4583dfcfddb",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-  private void readDecommissioningTimeout(Configuration conf) {\n+  private int readDecommissioningTimeout(Configuration pConf) {\n     try {\n-      if (conf \u003d\u003d null) {\n-        conf \u003d new YarnConfiguration();\n+      if (pConf \u003d\u003d null) {\n+        pConf \u003d new YarnConfiguration();\n       }\n-      int v \u003d conf.getInt(\n-          YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n-          YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n-      if (defaultTimeoutMs !\u003d 1000L * v) {\n-        defaultTimeoutMs \u003d 1000L * v;\n-        LOG.info(\"Use new decommissioningTimeoutMs: \" + defaultTimeoutMs);\n+      int configuredDefaultDecTimeoutSecs \u003d\n+          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n+              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n+      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n+        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n+        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n+            + defaultDecTimeoutSecs);\n       }\n     } catch (Exception e) {\n-      LOG.info(\"Error readDecommissioningTimeout \", e);\n+      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n     }\n+    return defaultDecTimeoutSecs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int readDecommissioningTimeout(Configuration pConf) {\n    try {\n      if (pConf \u003d\u003d null) {\n        pConf \u003d new YarnConfiguration();\n      }\n      int configuredDefaultDecTimeoutSecs \u003d\n          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n            + defaultDecTimeoutSecs);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n    }\n    return defaultDecTimeoutSecs;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
            "oldMethodName": "readDecommissioningTimeout",
            "newMethodName": "readDecommissioningTimeout"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-6483. Add nodes transitioning to DECOMMISSIONING state to the list of updated nodes returned to the AM. (Juan Rodriguez Hortala via asuresh)\n",
          "commitDate": "22/11/17 7:18 PM",
          "commitName": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "22/11/17 6:24 PM",
          "commitNameOld": "aab439593b5d3459140b6e104722d4583dfcfddb",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-  private void readDecommissioningTimeout(Configuration conf) {\n+  private int readDecommissioningTimeout(Configuration pConf) {\n     try {\n-      if (conf \u003d\u003d null) {\n-        conf \u003d new YarnConfiguration();\n+      if (pConf \u003d\u003d null) {\n+        pConf \u003d new YarnConfiguration();\n       }\n-      int v \u003d conf.getInt(\n-          YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n-          YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n-      if (defaultTimeoutMs !\u003d 1000L * v) {\n-        defaultTimeoutMs \u003d 1000L * v;\n-        LOG.info(\"Use new decommissioningTimeoutMs: \" + defaultTimeoutMs);\n+      int configuredDefaultDecTimeoutSecs \u003d\n+          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n+              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n+      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n+        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n+        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n+            + defaultDecTimeoutSecs);\n       }\n     } catch (Exception e) {\n-      LOG.info(\"Error readDecommissioningTimeout \", e);\n+      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n     }\n+    return defaultDecTimeoutSecs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int readDecommissioningTimeout(Configuration pConf) {\n    try {\n      if (pConf \u003d\u003d null) {\n        pConf \u003d new YarnConfiguration();\n      }\n      int configuredDefaultDecTimeoutSecs \u003d\n          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n            + defaultDecTimeoutSecs);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n    }\n    return defaultDecTimeoutSecs;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {
            "oldValue": "void",
            "newValue": "int"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-6483. Add nodes transitioning to DECOMMISSIONING state to the list of updated nodes returned to the AM. (Juan Rodriguez Hortala via asuresh)\n",
          "commitDate": "22/11/17 7:18 PM",
          "commitName": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "22/11/17 6:24 PM",
          "commitNameOld": "aab439593b5d3459140b6e104722d4583dfcfddb",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-  private void readDecommissioningTimeout(Configuration conf) {\n+  private int readDecommissioningTimeout(Configuration pConf) {\n     try {\n-      if (conf \u003d\u003d null) {\n-        conf \u003d new YarnConfiguration();\n+      if (pConf \u003d\u003d null) {\n+        pConf \u003d new YarnConfiguration();\n       }\n-      int v \u003d conf.getInt(\n-          YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n-          YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n-      if (defaultTimeoutMs !\u003d 1000L * v) {\n-        defaultTimeoutMs \u003d 1000L * v;\n-        LOG.info(\"Use new decommissioningTimeoutMs: \" + defaultTimeoutMs);\n+      int configuredDefaultDecTimeoutSecs \u003d\n+          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n+              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n+      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n+        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n+        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n+            + defaultDecTimeoutSecs);\n       }\n     } catch (Exception e) {\n-      LOG.info(\"Error readDecommissioningTimeout \", e);\n+      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n     }\n+    return defaultDecTimeoutSecs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int readDecommissioningTimeout(Configuration pConf) {\n    try {\n      if (pConf \u003d\u003d null) {\n        pConf \u003d new YarnConfiguration();\n      }\n      int configuredDefaultDecTimeoutSecs \u003d\n          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n            + defaultDecTimeoutSecs);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n    }\n    return defaultDecTimeoutSecs;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-6483. Add nodes transitioning to DECOMMISSIONING state to the list of updated nodes returned to the AM. (Juan Rodriguez Hortala via asuresh)\n",
          "commitDate": "22/11/17 7:18 PM",
          "commitName": "b46ca7e73b8bac3fdbff0b13afe009308078acf2",
          "commitAuthor": "Arun Suresh",
          "commitDateOld": "22/11/17 6:24 PM",
          "commitNameOld": "aab439593b5d3459140b6e104722d4583dfcfddb",
          "commitAuthorOld": "Sunil G",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,18 @@\n-  private void readDecommissioningTimeout(Configuration conf) {\n+  private int readDecommissioningTimeout(Configuration pConf) {\n     try {\n-      if (conf \u003d\u003d null) {\n-        conf \u003d new YarnConfiguration();\n+      if (pConf \u003d\u003d null) {\n+        pConf \u003d new YarnConfiguration();\n       }\n-      int v \u003d conf.getInt(\n-          YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n-          YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n-      if (defaultTimeoutMs !\u003d 1000L * v) {\n-        defaultTimeoutMs \u003d 1000L * v;\n-        LOG.info(\"Use new decommissioningTimeoutMs: \" + defaultTimeoutMs);\n+      int configuredDefaultDecTimeoutSecs \u003d\n+          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n+              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n+      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n+        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n+        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n+            + defaultDecTimeoutSecs);\n       }\n     } catch (Exception e) {\n-      LOG.info(\"Error readDecommissioningTimeout \", e);\n+      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n     }\n+    return defaultDecTimeoutSecs;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private int readDecommissioningTimeout(Configuration pConf) {\n    try {\n      if (pConf \u003d\u003d null) {\n        pConf \u003d new YarnConfiguration();\n      }\n      int configuredDefaultDecTimeoutSecs \u003d\n          pConf.getInt(YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n              YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n      if (defaultDecTimeoutSecs !\u003d configuredDefaultDecTimeoutSecs) {\n        defaultDecTimeoutSecs \u003d configuredDefaultDecTimeoutSecs;\n        LOG.info(\"Use new decommissioningTimeoutSecs: \"\n            + defaultDecTimeoutSecs);\n      }\n    } catch (Exception e) {\n      LOG.warn(\"Error readDecommissioningTimeout \" + e.getMessage());\n    }\n    return defaultDecTimeoutSecs;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/NodesListManager.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration]",
            "newValue": "[pConf-Configuration]"
          }
        }
      ]
    },
    "0da69c324dee9baab0f0b9700db1cc5b623f8421": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4676. Automatic and Asynchronous Decommissioning Nodes Status Tracking. Contributed by Diniel Zhi.\n(cherry picked from commit d464483bf7f0b3e3be3ba32cd6c3eee546747ab5)\n\nConflicts:\n\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ResourceTrackerService.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNode.java\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmnode/RMNodeImpl.java\n",
      "commitDate": "18/08/16 7:27 AM",
      "commitName": "0da69c324dee9baab0f0b9700db1cc5b623f8421",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,16 @@\n+  private void readDecommissioningTimeout(Configuration conf) {\n+    try {\n+      if (conf \u003d\u003d null) {\n+        conf \u003d new YarnConfiguration();\n+      }\n+      int v \u003d conf.getInt(\n+          YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n+          YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n+      if (defaultTimeoutMs !\u003d 1000L * v) {\n+        defaultTimeoutMs \u003d 1000L * v;\n+        LOG.info(\"Use new decommissioningTimeoutMs: \" + defaultTimeoutMs);\n+      }\n+    } catch (Exception e) {\n+      LOG.info(\"Error readDecommissioningTimeout \", e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void readDecommissioningTimeout(Configuration conf) {\n    try {\n      if (conf \u003d\u003d null) {\n        conf \u003d new YarnConfiguration();\n      }\n      int v \u003d conf.getInt(\n          YarnConfiguration.RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT,\n          YarnConfiguration.DEFAULT_RM_NODE_GRACEFUL_DECOMMISSION_TIMEOUT);\n      if (defaultTimeoutMs !\u003d 1000L * v) {\n        defaultTimeoutMs \u003d 1000L * v;\n        LOG.info(\"Use new decommissioningTimeoutMs: \" + defaultTimeoutMs);\n      }\n    } catch (Exception e) {\n      LOG.info(\"Error readDecommissioningTimeout \", e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/DecommissioningNodesWatcher.java"
    }
  }
}