{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityHeadroomProvider.java",
  "functionName": "getHeadroom",
  "functionId": "getHeadroom",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java",
  "functionStartLine": 44,
  "functionEndLine": 72,
  "numCommitsSeen": 7,
  "timeTaken": 3134,
  "changeHistory": [
    "819224dcf9c683aa52f58633ac8e13663f1916d8",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae",
    "ec06957941367930c855b5e05e6a84ba676fd46a",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
    "14dd647c556016d351f425ee956ccf800ccb9ce2",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8"
  ],
  "changeHistoryShort": {
    "819224dcf9c683aa52f58633ac8e13663f1916d8": "Ybodychange",
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": "Ybodychange",
    "ec06957941367930c855b5e05e6a84ba676fd46a": "Ybodychange",
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": "Ybodychange",
    "14dd647c556016d351f425ee956ccf800ccb9ce2": "Ybodychange",
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": "Yintroduced"
  },
  "changeHistoryDetails": {
    "819224dcf9c683aa52f58633ac8e13663f1916d8": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5270. Solve miscellaneous issues caused by YARN-4844. Contributed by Wangda Tan\n",
      "commitDate": "11/07/16 10:36 PM",
      "commitName": "819224dcf9c683aa52f58633ac8e13663f1916d8",
      "commitAuthor": "Jian He",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 43.57,
      "commitsBetweenForRepo": 400,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public Resource getHeadroom() {\n \n     Resource queueCurrentLimit;\n     Resource clusterResource;\n     synchronized (queueResourceLimitsInfo) {\n       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n       clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n     }\n     Set\u003cString\u003e requestedPartitions \u003d\n         application.getAppSchedulingInfo().getRequestedPartitions();\n     Resource headroom;\n     if (requestedPartitions.isEmpty() || (requestedPartitions.size() \u003d\u003d 1\n         \u0026\u0026 requestedPartitions.contains(RMNodeLabelsManager.NO_LABEL))) {\n       headroom \u003d queue.getHeadroom(user, queueCurrentLimit, clusterResource,\n           application);\n     } else {\n       headroom \u003d Resource.newInstance(0, 0);\n       for (String partition : requestedPartitions) {\n         Resource partitionHeadRoom \u003d queue.getHeadroom(user, queueCurrentLimit,\n             clusterResource, application, partition);\n         Resources.addTo(headroom, partitionHeadRoom);\n       }\n     }\n     // Corner case to deal with applications being slightly over-limit\n     if (headroom.getMemorySize() \u003c 0) {\n-      headroom.setMemory(0);\n+      headroom.setMemorySize(0);\n     }\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n\n    Resource queueCurrentLimit;\n    Resource clusterResource;\n    synchronized (queueResourceLimitsInfo) {\n      queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n    }\n    Set\u003cString\u003e requestedPartitions \u003d\n        application.getAppSchedulingInfo().getRequestedPartitions();\n    Resource headroom;\n    if (requestedPartitions.isEmpty() || (requestedPartitions.size() \u003d\u003d 1\n        \u0026\u0026 requestedPartitions.contains(RMNodeLabelsManager.NO_LABEL))) {\n      headroom \u003d queue.getHeadroom(user, queueCurrentLimit, clusterResource,\n          application);\n    } else {\n      headroom \u003d Resource.newInstance(0, 0);\n      for (String partition : requestedPartitions) {\n        Resource partitionHeadRoom \u003d queue.getHeadroom(user, queueCurrentLimit,\n            clusterResource, application, partition);\n        Resources.addTo(headroom, partitionHeadRoom);\n      }\n    }\n    // Corner case to deal with applications being slightly over-limit\n    if (headroom.getMemorySize() \u003c 0) {\n      headroom.setMemorySize(0);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java",
      "extendedDetails": {}
    },
    "42f90ab885d9693fcc1e52f9637f7de4111110ae": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4844. Add getMemorySize/getVirtualCoresSize to o.a.h.y.api.records.Resource. Contributed by Wangda Tan.\n",
      "commitDate": "29/05/16 8:54 AM",
      "commitName": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "08/04/16 3:33 PM",
      "commitNameOld": "ec06957941367930c855b5e05e6a84ba676fd46a",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 50.72,
      "commitsBetweenForRepo": 333,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public Resource getHeadroom() {\n \n     Resource queueCurrentLimit;\n     Resource clusterResource;\n     synchronized (queueResourceLimitsInfo) {\n       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n       clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n     }\n     Set\u003cString\u003e requestedPartitions \u003d\n         application.getAppSchedulingInfo().getRequestedPartitions();\n     Resource headroom;\n     if (requestedPartitions.isEmpty() || (requestedPartitions.size() \u003d\u003d 1\n         \u0026\u0026 requestedPartitions.contains(RMNodeLabelsManager.NO_LABEL))) {\n       headroom \u003d queue.getHeadroom(user, queueCurrentLimit, clusterResource,\n           application);\n     } else {\n       headroom \u003d Resource.newInstance(0, 0);\n       for (String partition : requestedPartitions) {\n         Resource partitionHeadRoom \u003d queue.getHeadroom(user, queueCurrentLimit,\n             clusterResource, application, partition);\n         Resources.addTo(headroom, partitionHeadRoom);\n       }\n     }\n     // Corner case to deal with applications being slightly over-limit\n-    if (headroom.getMemory() \u003c 0) {\n+    if (headroom.getMemorySize() \u003c 0) {\n       headroom.setMemory(0);\n     }\n     return headroom;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n\n    Resource queueCurrentLimit;\n    Resource clusterResource;\n    synchronized (queueResourceLimitsInfo) {\n      queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n    }\n    Set\u003cString\u003e requestedPartitions \u003d\n        application.getAppSchedulingInfo().getRequestedPartitions();\n    Resource headroom;\n    if (requestedPartitions.isEmpty() || (requestedPartitions.size() \u003d\u003d 1\n        \u0026\u0026 requestedPartitions.contains(RMNodeLabelsManager.NO_LABEL))) {\n      headroom \u003d queue.getHeadroom(user, queueCurrentLimit, clusterResource,\n          application);\n    } else {\n      headroom \u003d Resource.newInstance(0, 0);\n      for (String partition : requestedPartitions) {\n        Resource partitionHeadRoom \u003d queue.getHeadroom(user, queueCurrentLimit,\n            clusterResource, application, partition);\n        Resources.addTo(headroom, partitionHeadRoom);\n      }\n    }\n    // Corner case to deal with applications being slightly over-limit\n    if (headroom.getMemorySize() \u003c 0) {\n      headroom.setMemory(0);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java",
      "extendedDetails": {}
    },
    "ec06957941367930c855b5e05e6a84ba676fd46a": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3215. Respect labels in CapacityScheduler when computing headroom. (Naganarasimha G R via wangda)\n",
      "commitDate": "08/04/16 3:33 PM",
      "commitName": "ec06957941367930c855b5e05e6a84ba676fd46a",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "24/07/15 2:00 PM",
      "commitNameOld": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 259.06,
      "commitsBetweenForRepo": 1698,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,29 @@\n   public Resource getHeadroom() {\n-    \n+\n     Resource queueCurrentLimit;\n     Resource clusterResource;\n     synchronized (queueResourceLimitsInfo) {\n       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n       clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n     }\n-    Resource headroom \u003d queue.getHeadroom(user, queueCurrentLimit, \n-      clusterResource, application);\n-    \n+    Set\u003cString\u003e requestedPartitions \u003d\n+        application.getAppSchedulingInfo().getRequestedPartitions();\n+    Resource headroom;\n+    if (requestedPartitions.isEmpty() || (requestedPartitions.size() \u003d\u003d 1\n+        \u0026\u0026 requestedPartitions.contains(RMNodeLabelsManager.NO_LABEL))) {\n+      headroom \u003d queue.getHeadroom(user, queueCurrentLimit, clusterResource,\n+          application);\n+    } else {\n+      headroom \u003d Resource.newInstance(0, 0);\n+      for (String partition : requestedPartitions) {\n+        Resource partitionHeadRoom \u003d queue.getHeadroom(user, queueCurrentLimit,\n+            clusterResource, application, partition);\n+        Resources.addTo(headroom, partitionHeadRoom);\n+      }\n+    }\n     // Corner case to deal with applications being slightly over-limit\n     if (headroom.getMemory() \u003c 0) {\n       headroom.setMemory(0);\n     }\n     return headroom;\n-  \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n\n    Resource queueCurrentLimit;\n    Resource clusterResource;\n    synchronized (queueResourceLimitsInfo) {\n      queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n    }\n    Set\u003cString\u003e requestedPartitions \u003d\n        application.getAppSchedulingInfo().getRequestedPartitions();\n    Resource headroom;\n    if (requestedPartitions.isEmpty() || (requestedPartitions.size() \u003d\u003d 1\n        \u0026\u0026 requestedPartitions.contains(RMNodeLabelsManager.NO_LABEL))) {\n      headroom \u003d queue.getHeadroom(user, queueCurrentLimit, clusterResource,\n          application);\n    } else {\n      headroom \u003d Resource.newInstance(0, 0);\n      for (String partition : requestedPartitions) {\n        Resource partitionHeadRoom \u003d queue.getHeadroom(user, queueCurrentLimit,\n            clusterResource, application, partition);\n        Resources.addTo(headroom, partitionHeadRoom);\n      }\n    }\n    // Corner case to deal with applications being slightly over-limit\n    if (headroom.getMemory() \u003c 0) {\n      headroom.setMemory(0);\n    }\n    return headroom;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java",
      "extendedDetails": {}
    },
    "83fe34ac0896cee0918bbfad7bd51231e4aec39b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3026. Move application-specific container allocation logic from LeafQueue to FiCaSchedulerApp. Contributed by Wangda Tan\n",
      "commitDate": "24/07/15 2:00 PM",
      "commitName": "83fe34ac0896cee0918bbfad7bd51231e4aec39b",
      "commitAuthor": "Jian He",
      "commitDateOld": "02/03/15 5:52 PM",
      "commitNameOld": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 143.8,
      "commitsBetweenForRepo": 1208,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public Resource getHeadroom() {\n     \n     Resource queueCurrentLimit;\n     Resource clusterResource;\n     synchronized (queueResourceLimitsInfo) {\n       queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n       clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n     }\n     Resource headroom \u003d queue.getHeadroom(user, queueCurrentLimit, \n-      clusterResource, application, required);\n+      clusterResource, application);\n     \n     // Corner case to deal with applications being slightly over-limit\n     if (headroom.getMemory() \u003c 0) {\n       headroom.setMemory(0);\n     }\n     return headroom;\n   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    \n    Resource queueCurrentLimit;\n    Resource clusterResource;\n    synchronized (queueResourceLimitsInfo) {\n      queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n    }\n    Resource headroom \u003d queue.getHeadroom(user, queueCurrentLimit, \n      clusterResource, application);\n    \n    // Corner case to deal with applications being slightly over-limit\n    if (headroom.getMemory() \u003c 0) {\n      headroom.setMemory(0);\n    }\n    return headroom;\n  \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java",
      "extendedDetails": {}
    },
    "14dd647c556016d351f425ee956ccf800ccb9ce2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3265. Fixed a deadlock in CapacityScheduler by always passing a queue\u0027s available resource-limit from the parent queue. Contributed by Wangda Tan.\n",
      "commitDate": "02/03/15 5:52 PM",
      "commitName": "14dd647c556016d351f425ee956ccf800ccb9ce2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "06/10/14 3:48 PM",
      "commitNameOld": "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 147.13,
      "commitsBetweenForRepo": 1162,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   public Resource getHeadroom() {\n     \n-    Resource queueMaxCap;\n+    Resource queueCurrentLimit;\n     Resource clusterResource;\n-    synchronized (queueHeadroomInfo) {\n-      queueMaxCap \u003d queueHeadroomInfo.getQueueMaxCap();\n-      clusterResource \u003d queueHeadroomInfo.getClusterResource();\n+    synchronized (queueResourceLimitsInfo) {\n+      queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n+      clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n     }\n-    Resource headroom \u003d queue.getHeadroom(user, queueMaxCap, \n+    Resource headroom \u003d queue.getHeadroom(user, queueCurrentLimit, \n       clusterResource, application, required);\n     \n     // Corner case to deal with applications being slightly over-limit\n     if (headroom.getMemory() \u003c 0) {\n       headroom.setMemory(0);\n     }\n     return headroom;\n   \n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    \n    Resource queueCurrentLimit;\n    Resource clusterResource;\n    synchronized (queueResourceLimitsInfo) {\n      queueCurrentLimit \u003d queueResourceLimitsInfo.getQueueCurrentLimit();\n      clusterResource \u003d queueResourceLimitsInfo.getClusterResource();\n    }\n    Resource headroom \u003d queue.getHeadroom(user, queueCurrentLimit, \n      clusterResource, application, required);\n    \n    // Corner case to deal with applications being slightly over-limit\n    if (headroom.getMemory() \u003c 0) {\n      headroom.setMemory(0);\n    }\n    return headroom;\n  \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java",
      "extendedDetails": {}
    },
    "519e5a7dd2bd540105434ec3c8939b68f6c024f8": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2644. Fixed CapacityScheduler to return up-to-date headroom when AM allocates. Contributed by Craig Welch\n",
      "commitDate": "06/10/14 3:48 PM",
      "commitName": "519e5a7dd2bd540105434ec3c8939b68f6c024f8",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,18 @@\n+  public Resource getHeadroom() {\n+    \n+    Resource queueMaxCap;\n+    Resource clusterResource;\n+    synchronized (queueHeadroomInfo) {\n+      queueMaxCap \u003d queueHeadroomInfo.getQueueMaxCap();\n+      clusterResource \u003d queueHeadroomInfo.getClusterResource();\n+    }\n+    Resource headroom \u003d queue.getHeadroom(user, queueMaxCap, \n+      clusterResource, application, required);\n+    \n+    // Corner case to deal with applications being slightly over-limit\n+    if (headroom.getMemory() \u003c 0) {\n+      headroom.setMemory(0);\n+    }\n+    return headroom;\n+  \n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Resource getHeadroom() {\n    \n    Resource queueMaxCap;\n    Resource clusterResource;\n    synchronized (queueHeadroomInfo) {\n      queueMaxCap \u003d queueHeadroomInfo.getQueueMaxCap();\n      clusterResource \u003d queueHeadroomInfo.getClusterResource();\n    }\n    Resource headroom \u003d queue.getHeadroom(user, queueMaxCap, \n      clusterResource, application, required);\n    \n    // Corner case to deal with applications being slightly over-limit\n    if (headroom.getMemory() \u003c 0) {\n      headroom.setMemory(0);\n    }\n    return headroom;\n  \n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityHeadroomProvider.java"
    }
  }
}