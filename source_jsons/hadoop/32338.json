{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerExecutor.java",
  "functionName": "reacquireContainer",
  "functionId": "reacquireContainer___ctx-ContainerReacquisitionContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
  "functionStartLine": 297,
  "functionEndLine": 358,
  "numCommitsSeen": 77,
  "timeTaken": 5554,
  "changeHistory": [
    "2649f8b3273b9e8068cb8c0f32267f7cef63cb2c",
    "f7df55f4a89ed2d75d874b32209647ef4f448875",
    "b272b71095eb8929b60128835ef1078fe946b231",
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
    "3e6fce91a471b4a5099de109582e7c6417e8a822",
    "53fafcf061616516c24e2e2007a66a93d23d3e25",
    "33ea5ae92b9dd3abace104903d9a94d17dd75af5",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b"
  ],
  "changeHistoryShort": {
    "2649f8b3273b9e8068cb8c0f32267f7cef63cb2c": "Ybodychange",
    "f7df55f4a89ed2d75d874b32209647ef4f448875": "Ybodychange",
    "b272b71095eb8929b60128835ef1078fe946b231": "Ybodychange",
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9": "Ybodychange",
    "3e6fce91a471b4a5099de109582e7c6417e8a822": "Ybodychange",
    "53fafcf061616516c24e2e2007a66a93d23d3e25": "Ymultichange(Yparameterchange,Ybodychange)",
    "33ea5ae92b9dd3abace104903d9a94d17dd75af5": "Ymultichange(Yexceptionschange,Ybodychange)",
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2649f8b3273b9e8068cb8c0f32267f7cef63cb2c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-10173. Make pid file generation timeout configurable in case of reacquired\ncontainer. Contributed by Adam Antal.\n",
      "commitDate": "04/03/20 3:31 PM",
      "commitName": "2649f8b3273b9e8068cb8c0f32267f7cef63cb2c",
      "commitAuthor": "Eric Badger",
      "commitDateOld": "03/12/19 9:35 PM",
      "commitNameOld": "c48de9aa2ddf7622648c4410612ffc035861df63",
      "commitAuthorOld": "Wanqiang Ji",
      "daysBetweenCommits": 91.75,
      "commitsBetweenForRepo": 313,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public int reacquireContainer(ContainerReacquisitionContext ctx)\n       throws IOException, InterruptedException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     ContainerId containerId \u003d ctx.getContainerId();\n     Path pidPath \u003d getPidFilePath(containerId);\n \n     if (pidPath \u003d\u003d null) {\n       LOG.warn(\"{} is not active, returning terminated error\", containerId);\n \n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n \n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring {} with pid {}\", containerId, pid);\n \n     ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n         .Builder()\n         .setContainer(container)\n         .setUser(user)\n         .setPid(pid)\n         .build();\n \n     while (isContainerAlive(livenessContext)) {\n       Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     final int sleepMsec \u003d 100;\n-    int msecLeft \u003d 2000;\n+    int msecLeft \u003d this.exitCodeFileTimeout;\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n \n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(\"{} was deactivated\", containerId);\n \n         return ExitCode.TERMINATED.getExitCode();\n       }\n \n       Thread.sleep(sleepMsec);\n \n       msecLeft -\u003d sleepMsec;\n     }\n \n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(\n           FileUtils.readFileToString(file, Charset.defaultCharset()).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int reacquireContainer(ContainerReacquisitionContext ctx)\n      throws IOException, InterruptedException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    ContainerId containerId \u003d ctx.getContainerId();\n    Path pidPath \u003d getPidFilePath(containerId);\n\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(\"{} is not active, returning terminated error\", containerId);\n\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring {} with pid {}\", containerId, pid);\n\n    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n        .Builder()\n        .setContainer(container)\n        .setUser(user)\n        .setPid(pid)\n        .build();\n\n    while (isContainerAlive(livenessContext)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d this.exitCodeFileTimeout;\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(\"{} was deactivated\", containerId);\n\n        return ExitCode.TERMINATED.getExitCode();\n      }\n\n      Thread.sleep(sleepMsec);\n\n      msecLeft -\u003d sleepMsec;\n    }\n\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(\n          FileUtils.readFileToString(file, Charset.defaultCharset()).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "f7df55f4a89ed2d75d874b32209647ef4f448875": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9602. Use logger format in Container Executor. Contributed by Abhishek Modi.\n",
      "commitDate": "11/06/19 9:59 AM",
      "commitName": "f7df55f4a89ed2d75d874b32209647ef4f448875",
      "commitAuthor": "bibinchundatt",
      "commitDateOld": "25/03/19 12:53 PM",
      "commitNameOld": "3c45762a0bfb403e069a03e30d35dd11432ee8b0",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 77.88,
      "commitsBetweenForRepo": 486,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,62 +1,62 @@\n   public int reacquireContainer(ContainerReacquisitionContext ctx)\n       throws IOException, InterruptedException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     ContainerId containerId \u003d ctx.getContainerId();\n     Path pidPath \u003d getPidFilePath(containerId);\n \n     if (pidPath \u003d\u003d null) {\n-      LOG.warn(containerId + \" is not active, returning terminated error\");\n+      LOG.warn(\"{} is not active, returning terminated error\", containerId);\n \n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n \n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n-    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n+    LOG.info(\"Reacquiring {} with pid {}\", containerId, pid);\n \n     ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n         .Builder()\n         .setContainer(container)\n         .setUser(user)\n         .setPid(pid)\n         .build();\n \n     while (isContainerAlive(livenessContext)) {\n       Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n \n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n-        LOG.info(containerId + \" was deactivated\");\n+        LOG.info(\"{} was deactivated\", containerId);\n \n         return ExitCode.TERMINATED.getExitCode();\n       }\n \n       Thread.sleep(sleepMsec);\n \n       msecLeft -\u003d sleepMsec;\n     }\n \n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(\n           FileUtils.readFileToString(file, Charset.defaultCharset()).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int reacquireContainer(ContainerReacquisitionContext ctx)\n      throws IOException, InterruptedException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    ContainerId containerId \u003d ctx.getContainerId();\n    Path pidPath \u003d getPidFilePath(containerId);\n\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(\"{} is not active, returning terminated error\", containerId);\n\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring {} with pid {}\", containerId, pid);\n\n    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n        .Builder()\n        .setContainer(container)\n        .setUser(user)\n        .setPid(pid)\n        .build();\n\n    while (isContainerAlive(livenessContext)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(\"{} was deactivated\", containerId);\n\n        return ExitCode.TERMINATED.getExitCode();\n      }\n\n      Thread.sleep(sleepMsec);\n\n      msecLeft -\u003d sleepMsec;\n    }\n\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(\n          FileUtils.readFileToString(file, Charset.defaultCharset()).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "b272b71095eb8929b60128835ef1078fe946b231": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-15537. Clean up ContainerLaunch and ContainerExecutor pre-HADOOP-15528. Contributed by Giovanni Matteo Fumarola.\n",
      "commitDate": "15/06/18 9:40 AM",
      "commitName": "b272b71095eb8929b60128835ef1078fe946b231",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "10/04/18 4:25 PM",
      "commitNameOld": "c467f311d0c7155c09052d93fac12045af925583",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 65.72,
      "commitsBetweenForRepo": 1017,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,62 @@\n   public int reacquireContainer(ContainerReacquisitionContext ctx)\n       throws IOException, InterruptedException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     ContainerId containerId \u003d ctx.getContainerId();\n     Path pidPath \u003d getPidFilePath(containerId);\n \n     if (pidPath \u003d\u003d null) {\n       LOG.warn(containerId + \" is not active, returning terminated error\");\n \n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n \n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n \n     ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n         .Builder()\n         .setContainer(container)\n         .setUser(user)\n         .setPid(pid)\n         .build();\n \n     while (isContainerAlive(livenessContext)) {\n       Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n \n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(containerId + \" was deactivated\");\n \n         return ExitCode.TERMINATED.getExitCode();\n       }\n \n       Thread.sleep(sleepMsec);\n \n       msecLeft -\u003d sleepMsec;\n     }\n \n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n-      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n+      return Integer.parseInt(\n+          FileUtils.readFileToString(file, Charset.defaultCharset()).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int reacquireContainer(ContainerReacquisitionContext ctx)\n      throws IOException, InterruptedException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    ContainerId containerId \u003d ctx.getContainerId();\n    Path pidPath \u003d getPidFilePath(containerId);\n\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n\n    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n        .Builder()\n        .setContainer(container)\n        .setUser(user)\n        .setPid(pid)\n        .build();\n\n    while (isContainerAlive(livenessContext)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n\n        return ExitCode.TERMINATED.getExitCode();\n      }\n\n      Thread.sleep(sleepMsec);\n\n      msecLeft -\u003d sleepMsec;\n    }\n\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(\n          FileUtils.readFileToString(file, Charset.defaultCharset()).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5303. Clean up ContainerExecutor JavaDoc. Contributed by Daniel Templeton.\n",
      "commitDate": "14/07/16 6:58 AM",
      "commitName": "54bf14f80bcb2cafd1d30b77f2e02cd40b9515d9",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "20/06/16 9:56 AM",
      "commitNameOld": "5107a967fa2558deba11c33a326d4d2e5748f452",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 23.88,
      "commitsBetweenForRepo": 299,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,61 @@\n   public int reacquireContainer(ContainerReacquisitionContext ctx)\n       throws IOException, InterruptedException {\n     Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     ContainerId containerId \u003d ctx.getContainerId();\n-\n-\n     Path pidPath \u003d getPidFilePath(containerId);\n+\n     if (pidPath \u003d\u003d null) {\n       LOG.warn(containerId + \" is not active, returning terminated error\");\n+\n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n-    String pid \u003d null;\n-    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n+    String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n+\n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n+\n     ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n         .Builder()\n         .setContainer(container)\n         .setUser(user)\n         .setPid(pid)\n         .build();\n-    while(isContainerAlive(livenessContext)) {\n+\n+    while (isContainerAlive(livenessContext)) {\n       Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n-    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n-    File file \u003d new File(exitCodeFile);\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n+    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n+    File file \u003d new File(exitCodeFile);\n+\n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(containerId + \" was deactivated\");\n+\n         return ExitCode.TERMINATED.getExitCode();\n       }\n-      \n+\n       Thread.sleep(sleepMsec);\n-      \n+\n       msecLeft -\u003d sleepMsec;\n     }\n+\n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(FileUtils.readFileToString(file).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int reacquireContainer(ContainerReacquisitionContext ctx)\n      throws IOException, InterruptedException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    ContainerId containerId \u003d ctx.getContainerId();\n    Path pidPath \u003d getPidFilePath(containerId);\n\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n\n    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n        .Builder()\n        .setContainer(container)\n        .setUser(user)\n        .setPid(pid)\n        .build();\n\n    while (isContainerAlive(livenessContext)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n\n        return ExitCode.TERMINATED.getExitCode();\n      }\n\n      Thread.sleep(sleepMsec);\n\n      msecLeft -\u003d sleepMsec;\n    }\n\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "3e6fce91a471b4a5099de109582e7c6417e8a822": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3853. Add docker container runtime support to LinuxContainterExecutor. Contributed by Sidharta Seethana.\n",
      "commitDate": "27/07/15 11:57 AM",
      "commitName": "3e6fce91a471b4a5099de109582e7c6417e8a822",
      "commitAuthor": "Varun Vasudev",
      "commitDateOld": "26/05/15 11:38 AM",
      "commitNameOld": "500a1d9c76ec612b4e737888f4be79951c11591d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 62.01,
      "commitsBetweenForRepo": 420,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,56 @@\n   public int reacquireContainer(ContainerReacquisitionContext ctx)\n       throws IOException, InterruptedException {\n+    Container container \u003d ctx.getContainer();\n     String user \u003d ctx.getUser();\n     ContainerId containerId \u003d ctx.getContainerId();\n \n \n     Path pidPath \u003d getPidFilePath(containerId);\n     if (pidPath \u003d\u003d null) {\n       LOG.warn(containerId + \" is not active, returning terminated error\");\n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d null;\n     pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n     ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n         .Builder()\n+        .setContainer(container)\n         .setUser(user)\n         .setPid(pid)\n         .build();\n-    while(isContainerProcessAlive(livenessContext)) {\n+    while(isContainerAlive(livenessContext)) {\n       Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(containerId + \" was deactivated\");\n         return ExitCode.TERMINATED.getExitCode();\n       }\n       \n       Thread.sleep(sleepMsec);\n       \n       msecLeft -\u003d sleepMsec;\n     }\n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(FileUtils.readFileToString(file).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public int reacquireContainer(ContainerReacquisitionContext ctx)\n      throws IOException, InterruptedException {\n    Container container \u003d ctx.getContainer();\n    String user \u003d ctx.getUser();\n    ContainerId containerId \u003d ctx.getContainerId();\n\n\n    Path pidPath \u003d getPidFilePath(containerId);\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d null;\n    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n        .Builder()\n        .setContainer(container)\n        .setUser(user)\n        .setPid(pid)\n        .build();\n    while(isContainerAlive(livenessContext)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n        return ExitCode.TERMINATED.getExitCode();\n      }\n      \n      Thread.sleep(sleepMsec);\n      \n      msecLeft -\u003d sleepMsec;\n    }\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
      "extendedDetails": {}
    },
    "53fafcf061616516c24e2e2007a66a93d23d3e25": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
      "commitDate": "21/05/15 3:50 PM",
      "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/03/15 8:00 AM",
          "commitNameOld": "e0ccea33c9e12f6930b2867e14b1b37569fed659",
          "commitAuthorOld": "Ravi Prakash",
          "daysBetweenCommits": 54.33,
          "commitsBetweenForRepo": 549,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,54 @@\n-  public int reacquireContainer(String user, ContainerId containerId)\n+  public int reacquireContainer(ContainerReacquisitionContext ctx)\n       throws IOException, InterruptedException {\n+    String user \u003d ctx.getUser();\n+    ContainerId containerId \u003d ctx.getContainerId();\n+\n+\n     Path pidPath \u003d getPidFilePath(containerId);\n     if (pidPath \u003d\u003d null) {\n       LOG.warn(containerId + \" is not active, returning terminated error\");\n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d null;\n     pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n-    while(isContainerProcessAlive(user, pid)) {\n+    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n+        .Builder()\n+        .setUser(user)\n+        .setPid(pid)\n+        .build();\n+    while(isContainerProcessAlive(livenessContext)) {\n       Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(containerId + \" was deactivated\");\n         return ExitCode.TERMINATED.getExitCode();\n       }\n       \n       Thread.sleep(sleepMsec);\n       \n       msecLeft -\u003d sleepMsec;\n     }\n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(FileUtils.readFileToString(file).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int reacquireContainer(ContainerReacquisitionContext ctx)\n      throws IOException, InterruptedException {\n    String user \u003d ctx.getUser();\n    ContainerId containerId \u003d ctx.getContainerId();\n\n\n    Path pidPath \u003d getPidFilePath(containerId);\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d null;\n    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n        .Builder()\n        .setUser(user)\n        .setPid(pid)\n        .build();\n    while(isContainerProcessAlive(livenessContext)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n        return ExitCode.TERMINATED.getExitCode();\n      }\n      \n      Thread.sleep(sleepMsec);\n      \n      msecLeft -\u003d sleepMsec;\n    }\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[user-String, containerId-ContainerId]",
            "newValue": "[ctx-ContainerReacquisitionContext]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3684. Changed ContainerExecutor\u0027s primary lifecycle methods to use a more extensible mechanism of context objects. Contributed by Sidharta Seethana.\n",
          "commitDate": "21/05/15 3:50 PM",
          "commitName": "53fafcf061616516c24e2e2007a66a93d23d3e25",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "28/03/15 8:00 AM",
          "commitNameOld": "e0ccea33c9e12f6930b2867e14b1b37569fed659",
          "commitAuthorOld": "Ravi Prakash",
          "daysBetweenCommits": 54.33,
          "commitsBetweenForRepo": 549,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,45 +1,54 @@\n-  public int reacquireContainer(String user, ContainerId containerId)\n+  public int reacquireContainer(ContainerReacquisitionContext ctx)\n       throws IOException, InterruptedException {\n+    String user \u003d ctx.getUser();\n+    ContainerId containerId \u003d ctx.getContainerId();\n+\n+\n     Path pidPath \u003d getPidFilePath(containerId);\n     if (pidPath \u003d\u003d null) {\n       LOG.warn(containerId + \" is not active, returning terminated error\");\n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d null;\n     pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n-    while(isContainerProcessAlive(user, pid)) {\n+    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n+        .Builder()\n+        .setUser(user)\n+        .setPid(pid)\n+        .build();\n+    while(isContainerProcessAlive(livenessContext)) {\n       Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(containerId + \" was deactivated\");\n         return ExitCode.TERMINATED.getExitCode();\n       }\n       \n       Thread.sleep(sleepMsec);\n       \n       msecLeft -\u003d sleepMsec;\n     }\n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(FileUtils.readFileToString(file).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int reacquireContainer(ContainerReacquisitionContext ctx)\n      throws IOException, InterruptedException {\n    String user \u003d ctx.getUser();\n    ContainerId containerId \u003d ctx.getContainerId();\n\n\n    Path pidPath \u003d getPidFilePath(containerId);\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d null;\n    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n    ContainerLivenessContext livenessContext \u003d new ContainerLivenessContext\n        .Builder()\n        .setUser(user)\n        .setPid(pid)\n        .build();\n    while(isContainerProcessAlive(livenessContext)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n        return ExitCode.TERMINATED.getExitCode();\n      }\n      \n      Thread.sleep(sleepMsec);\n      \n      msecLeft -\u003d sleepMsec;\n    }\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "33ea5ae92b9dd3abace104903d9a94d17dd75af5": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-2846. Incorrect persist exit code for running containers in reacquireContainer() that interrupted by NodeManager restart. Contributed by Junping Du\n",
      "commitDate": "13/11/14 8:11 AM",
      "commitName": "33ea5ae92b9dd3abace104903d9a94d17dd75af5",
      "commitAuthor": "Jason Lowe",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-2846. Incorrect persist exit code for running containers in reacquireContainer() that interrupted by NodeManager restart. Contributed by Junping Du\n",
          "commitDate": "13/11/14 8:11 AM",
          "commitName": "33ea5ae92b9dd3abace104903d9a94d17dd75af5",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "11/11/14 9:28 PM",
          "commitNameOld": "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed",
          "commitAuthorOld": "Ravi Prakash",
          "daysBetweenCommits": 1.45,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,45 @@\n   public int reacquireContainer(String user, ContainerId containerId)\n-      throws IOException {\n+      throws IOException, InterruptedException {\n     Path pidPath \u003d getPidFilePath(containerId);\n     if (pidPath \u003d\u003d null) {\n       LOG.warn(containerId + \" is not active, returning terminated error\");\n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d null;\n     pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n-    try {\n-      while(isContainerProcessAlive(user, pid)) {\n-        Thread.sleep(1000);\n-      }\n-    } catch (InterruptedException e) {\n-      throw new IOException(\"Interrupted while waiting for process \" + pid\n-          + \" to exit\", e);\n+    while(isContainerProcessAlive(user, pid)) {\n+      Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(containerId + \" was deactivated\");\n         return ExitCode.TERMINATED.getExitCode();\n       }\n-      try {\n-        Thread.sleep(sleepMsec);\n-      } catch (InterruptedException e) {\n-        throw new IOException(\n-            \"Interrupted while waiting for exit code from \" + containerId, e);\n-      }\n+      \n+      Thread.sleep(sleepMsec);\n+      \n       msecLeft -\u003d sleepMsec;\n     }\n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(FileUtils.readFileToString(file).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int reacquireContainer(String user, ContainerId containerId)\n      throws IOException, InterruptedException {\n    Path pidPath \u003d getPidFilePath(containerId);\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d null;\n    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n    while(isContainerProcessAlive(user, pid)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n        return ExitCode.TERMINATED.getExitCode();\n      }\n      \n      Thread.sleep(sleepMsec);\n      \n      msecLeft -\u003d sleepMsec;\n    }\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {
            "oldValue": "[IOException]",
            "newValue": "[IOException, InterruptedException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2846. Incorrect persist exit code for running containers in reacquireContainer() that interrupted by NodeManager restart. Contributed by Junping Du\n",
          "commitDate": "13/11/14 8:11 AM",
          "commitName": "33ea5ae92b9dd3abace104903d9a94d17dd75af5",
          "commitAuthor": "Jason Lowe",
          "commitDateOld": "11/11/14 9:28 PM",
          "commitNameOld": "53f64ee516d03f6ec87b41d77c214aa2fe4fa0ed",
          "commitAuthorOld": "Ravi Prakash",
          "daysBetweenCommits": 1.45,
          "commitsBetweenForRepo": 17,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,53 +1,45 @@\n   public int reacquireContainer(String user, ContainerId containerId)\n-      throws IOException {\n+      throws IOException, InterruptedException {\n     Path pidPath \u003d getPidFilePath(containerId);\n     if (pidPath \u003d\u003d null) {\n       LOG.warn(containerId + \" is not active, returning terminated error\");\n       return ExitCode.TERMINATED.getExitCode();\n     }\n \n     String pid \u003d null;\n     pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n     if (pid \u003d\u003d null) {\n       throw new IOException(\"Unable to determine pid for \" + containerId);\n     }\n \n     LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n-    try {\n-      while(isContainerProcessAlive(user, pid)) {\n-        Thread.sleep(1000);\n-      }\n-    } catch (InterruptedException e) {\n-      throw new IOException(\"Interrupted while waiting for process \" + pid\n-          + \" to exit\", e);\n+    while(isContainerProcessAlive(user, pid)) {\n+      Thread.sleep(1000);\n     }\n \n     // wait for exit code file to appear\n     String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n     File file \u003d new File(exitCodeFile);\n     final int sleepMsec \u003d 100;\n     int msecLeft \u003d 2000;\n     while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n       if (!isContainerActive(containerId)) {\n         LOG.info(containerId + \" was deactivated\");\n         return ExitCode.TERMINATED.getExitCode();\n       }\n-      try {\n-        Thread.sleep(sleepMsec);\n-      } catch (InterruptedException e) {\n-        throw new IOException(\n-            \"Interrupted while waiting for exit code from \" + containerId, e);\n-      }\n+      \n+      Thread.sleep(sleepMsec);\n+      \n       msecLeft -\u003d sleepMsec;\n     }\n     if (msecLeft \u003c 0) {\n       throw new IOException(\"Timeout while waiting for exit code from \"\n           + containerId);\n     }\n \n     try {\n       return Integer.parseInt(FileUtils.readFileToString(file).trim());\n     } catch (NumberFormatException e) {\n       throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public int reacquireContainer(String user, ContainerId containerId)\n      throws IOException, InterruptedException {\n    Path pidPath \u003d getPidFilePath(containerId);\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d null;\n    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n    while(isContainerProcessAlive(user, pid)) {\n      Thread.sleep(1000);\n    }\n\n    // wait for exit code file to appear\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n        return ExitCode.TERMINATED.getExitCode();\n      }\n      \n      Thread.sleep(sleepMsec);\n      \n      msecLeft -\u003d sleepMsec;\n    }\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java",
          "extendedDetails": {}
        }
      ]
    },
    "c2febdcbaa12078db42403fe8fd74180fb58a84b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1337. Recover containers upon nodemanager restart. (Contributed by Jason Lowe)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617448 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 3:56 AM",
      "commitName": "c2febdcbaa12078db42403fe8fd74180fb58a84b",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,53 @@\n+  public int reacquireContainer(String user, ContainerId containerId)\n+      throws IOException {\n+    Path pidPath \u003d getPidFilePath(containerId);\n+    if (pidPath \u003d\u003d null) {\n+      LOG.warn(containerId + \" is not active, returning terminated error\");\n+      return ExitCode.TERMINATED.getExitCode();\n+    }\n+\n+    String pid \u003d null;\n+    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n+    if (pid \u003d\u003d null) {\n+      throw new IOException(\"Unable to determine pid for \" + containerId);\n+    }\n+\n+    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n+    try {\n+      while(isContainerProcessAlive(user, pid)) {\n+        Thread.sleep(1000);\n+      }\n+    } catch (InterruptedException e) {\n+      throw new IOException(\"Interrupted while waiting for process \" + pid\n+          + \" to exit\", e);\n+    }\n+\n+    // wait for exit code file to appear\n+    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n+    File file \u003d new File(exitCodeFile);\n+    final int sleepMsec \u003d 100;\n+    int msecLeft \u003d 2000;\n+    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n+      if (!isContainerActive(containerId)) {\n+        LOG.info(containerId + \" was deactivated\");\n+        return ExitCode.TERMINATED.getExitCode();\n+      }\n+      try {\n+        Thread.sleep(sleepMsec);\n+      } catch (InterruptedException e) {\n+        throw new IOException(\n+            \"Interrupted while waiting for exit code from \" + containerId, e);\n+      }\n+      msecLeft -\u003d sleepMsec;\n+    }\n+    if (msecLeft \u003c 0) {\n+      throw new IOException(\"Timeout while waiting for exit code from \"\n+          + containerId);\n+    }\n+\n+    try {\n+      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n+    } catch (NumberFormatException e) {\n+      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public int reacquireContainer(String user, ContainerId containerId)\n      throws IOException {\n    Path pidPath \u003d getPidFilePath(containerId);\n    if (pidPath \u003d\u003d null) {\n      LOG.warn(containerId + \" is not active, returning terminated error\");\n      return ExitCode.TERMINATED.getExitCode();\n    }\n\n    String pid \u003d null;\n    pid \u003d ProcessIdFileReader.getProcessId(pidPath);\n    if (pid \u003d\u003d null) {\n      throw new IOException(\"Unable to determine pid for \" + containerId);\n    }\n\n    LOG.info(\"Reacquiring \" + containerId + \" with pid \" + pid);\n    try {\n      while(isContainerProcessAlive(user, pid)) {\n        Thread.sleep(1000);\n      }\n    } catch (InterruptedException e) {\n      throw new IOException(\"Interrupted while waiting for process \" + pid\n          + \" to exit\", e);\n    }\n\n    // wait for exit code file to appear\n    String exitCodeFile \u003d ContainerLaunch.getExitCodeFile(pidPath.toString());\n    File file \u003d new File(exitCodeFile);\n    final int sleepMsec \u003d 100;\n    int msecLeft \u003d 2000;\n    while (!file.exists() \u0026\u0026 msecLeft \u003e\u003d 0) {\n      if (!isContainerActive(containerId)) {\n        LOG.info(containerId + \" was deactivated\");\n        return ExitCode.TERMINATED.getExitCode();\n      }\n      try {\n        Thread.sleep(sleepMsec);\n      } catch (InterruptedException e) {\n        throw new IOException(\n            \"Interrupted while waiting for exit code from \" + containerId, e);\n      }\n      msecLeft -\u003d sleepMsec;\n    }\n    if (msecLeft \u003c 0) {\n      throw new IOException(\"Timeout while waiting for exit code from \"\n          + containerId);\n    }\n\n    try {\n      return Integer.parseInt(FileUtils.readFileToString(file).trim());\n    } catch (NumberFormatException e) {\n      throw new IOException(\"Error parsing exit code from pid \" + pid, e);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/ContainerExecutor.java"
    }
  }
}