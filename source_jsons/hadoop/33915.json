{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CGroupsResourceCalculator.java",
  "functionName": "processFile",
  "functionId": "processFile___file-File__processLine-Function__String,Result__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsResourceCalculator.java",
  "functionStartLine": 315,
  "functionEndLine": 336,
  "numCommitsSeen": 2,
  "timeTaken": 884,
  "changeHistory": [
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2"
  ],
  "changeHistoryShort": {
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": "Yintroduced"
  },
  "changeHistoryDetails": {
    "649ef7ac334e63a7c676f8e7406f59d9466eb6f2": {
      "type": "Yintroduced",
      "commitMessage": "YARN-7064. Use cgroup to get container resource utilization. (Miklos Szegedi via Haibo Chen)\n",
      "commitDate": "26/01/18 4:27 PM",
      "commitName": "649ef7ac334e63a7c676f8e7406f59d9466eb6f2",
      "commitAuthor": "Haibo Chen",
      "diff": "@@ -0,0 +1,22 @@\n+  private void processFile(File file, Function\u003cString, Result\u003e processLine)\n+      throws YarnException {\n+    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n+    try (InputStreamReader fReader \u003d new InputStreamReader(\n+        new FileInputStream(file), Charset.forName(\"UTF-8\"))) {\n+      try (BufferedReader in \u003d new BufferedReader(fReader)) {\n+        try {\n+          String str;\n+          while ((str \u003d in.readLine()) !\u003d null) {\n+            Result result \u003d processLine.apply(str);\n+            if (result \u003d\u003d Result.Exit) {\n+              return;\n+            }\n+          }\n+        } catch (IOException io) {\n+          throw new YarnException(\"Error reading the stream \" + io, io);\n+        }\n+      }\n+    } catch (IOException f) {\n+      throw new YarnException(\"The process vanished in the interim \" + pid, f);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void processFile(File file, Function\u003cString, Result\u003e processLine)\n      throws YarnException {\n    // Read \"procfsDir/\u003cpid\u003e/stat\" file - typically /proc/\u003cpid\u003e/stat\n    try (InputStreamReader fReader \u003d new InputStreamReader(\n        new FileInputStream(file), Charset.forName(\"UTF-8\"))) {\n      try (BufferedReader in \u003d new BufferedReader(fReader)) {\n        try {\n          String str;\n          while ((str \u003d in.readLine()) !\u003d null) {\n            Result result \u003d processLine.apply(str);\n            if (result \u003d\u003d Result.Exit) {\n              return;\n            }\n          }\n        } catch (IOException io) {\n          throw new YarnException(\"Error reading the stream \" + io, io);\n        }\n      }\n    } catch (IOException f) {\n      throw new YarnException(\"The process vanished in the interim \" + pid, f);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-nodemanager/src/main/java/org/apache/hadoop/yarn/server/nodemanager/containermanager/linux/resources/CGroupsResourceCalculator.java"
    }
  }
}