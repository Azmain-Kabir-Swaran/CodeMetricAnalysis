{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineWebServices.java",
  "functionName": "getEvents",
  "functionId": "getEvents___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__entityType-String(annotations-@PathParam(\"entityType\"))__entityId-String(annotations-@QueryParam(\"entityId\"))__eventType-String(annotations-@QueryParam(\"eventType\"))__windowStart-String(annotations-@QueryParam(\"windowStart\"))__windowEnd-String(annotations-@QueryParam(\"windowEnd\"))__limit-String(annotations-@QueryParam(\"limit\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
  "functionStartLine": 191,
  "functionEndLine": 219,
  "numCommitsSeen": 29,
  "timeTaken": 2182,
  "changeHistory": [
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
    "892ada8fb35d57a1120d548fdefb056824aa939f",
    "84425fb435cb603fd8adcc2f76631c0244175310",
    "23b2e43f5d678517e33590d15dec73225b9c5682",
    "484faadffec97f8e454cf18b821f6ef12a27616c"
  ],
  "changeHistoryShort": {
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": "Ybodychange",
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": "Ybodychange",
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": "Yfilerename",
    "892ada8fb35d57a1120d548fdefb056824aa939f": "Ybodychange",
    "84425fb435cb603fd8adcc2f76631c0244175310": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
    "23b2e43f5d678517e33590d15dec73225b9c5682": "Ybodychange",
    "484faadffec97f8e454cf18b821f6ef12a27616c": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4696. Improving EntityGroupFSTimelineStore on exception handling, test setup, and concurrency. (Steve Loughran via gtcarrera9)\n",
      "commitDate": "10/03/16 10:51 AM",
      "commitName": "d49cfb350454c2dfa2f3eb70f79b6d5030ce7bec",
      "commitAuthor": "Li Lu",
      "commitDateOld": "07/12/15 1:46 AM",
      "commitNameOld": "01a641bc447c464b2830d58addd482f47dbd92ae",
      "commitAuthorOld": "rohithsharmaks",
      "daysBetweenCommits": 94.38,
      "commitsBetweenForRepo": 603,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,29 @@\n   public TimelineEvents getEvents(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @QueryParam(\"entityId\") String entityId,\n       @QueryParam(\"eventType\") String eventType,\n       @QueryParam(\"windowStart\") String windowStart,\n       @QueryParam(\"windowEnd\") String windowEnd,\n       @QueryParam(\"limit\") String limit) {\n     init(res);\n     try {\n       return timelineDataManager.getEvents(\n           parseStr(entityType),\n           parseArrayStr(entityId, \",\"),\n           parseArrayStr(eventType, \",\"),\n           parseLongStr(windowStart),\n           parseLongStr(windowEnd),\n           parseLongStr(limit),\n           getUser(req));\n     } catch (NumberFormatException e) {\n-      throw new BadRequestException(\n-          \"windowStart, windowEnd or limit is not a numeric value.\");\n+      throw (BadRequestException)new BadRequestException(\n+          \"windowStart, windowEnd or limit is not a numeric value.\")\n+          .initCause(e);\n     } catch (Exception e) {\n       LOG.error(\"Error getting entity timelines\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    try {\n      return timelineDataManager.getEvents(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseArrayStr(eventType, \",\"),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseLongStr(limit),\n          getUser(req));\n    } catch (NumberFormatException e) {\n      throw (BadRequestException)new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\")\n          .initCause(e);\n    } catch (Exception e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "e91d099c4a4182c25c1a19237aff28e4d1bc1357": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2302. Refactor TimelineWebServices. (Contributed by Zhijie Shen)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/08/14 12:21 AM",
      "commitName": "e91d099c4a4182c25c1a19237aff28e4d1bc1357",
      "commitAuthor": "Junping Du",
      "commitDateOld": "14/07/14 9:33 PM",
      "commitNameOld": "a6cd712ca7a3cae3fa8f63ab4e48116d8c94a705",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 26.12,
      "commitsBetweenForRepo": 206,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,28 @@\n   public TimelineEvents getEvents(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @QueryParam(\"entityId\") String entityId,\n       @QueryParam(\"eventType\") String eventType,\n       @QueryParam(\"windowStart\") String windowStart,\n       @QueryParam(\"windowEnd\") String windowEnd,\n       @QueryParam(\"limit\") String limit) {\n     init(res);\n-    TimelineEvents events \u003d null;\n     try {\n-      UserGroupInformation callerUGI \u003d getUser(req);\n-      events \u003d store.getEntityTimelines(\n+      return timelineDataManager.getEvents(\n           parseStr(entityType),\n           parseArrayStr(entityId, \",\"),\n-          parseLongStr(limit),\n+          parseArrayStr(eventType, \",\"),\n           parseLongStr(windowStart),\n           parseLongStr(windowEnd),\n-          parseArrayStr(eventType, \",\"));\n-      if (events !\u003d null) {\n-        Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n-            events.getAllEvents().iterator();\n-        while (eventsItr.hasNext()) {\n-          TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n-          try {\n-            TimelineEntity entity \u003d store.getEntity(\n-                eventsOfOneEntity.getEntityId(),\n-                eventsOfOneEntity.getEntityType(),\n-                EnumSet.of(Field.PRIMARY_FILTERS));\n-            // check ACLs\n-            if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n-              eventsItr.remove();\n-            }\n-          } catch (Exception e) {\n-            LOG.error(\"Error when verifying access for user \" + callerUGI\n-                + \" on the events of the timeline entity \"\n-                + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n-                    eventsOfOneEntity.getEntityType()), e);\n-            eventsItr.remove();\n-          }\n-        }\n-      }\n+          parseLongStr(limit),\n+          getUser(req));\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"windowStart, windowEnd or limit is not a numeric value.\");\n-    } catch (IOException e) {\n+    } catch (Exception e) {\n       LOG.error(\"Error getting entity timelines\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n-    if (events \u003d\u003d null) {\n-      return new TimelineEvents();\n-    }\n-    return events;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    try {\n      return timelineDataManager.getEvents(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseArrayStr(eventType, \",\"),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseLongStr(limit),\n          getUser(req));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    } catch (Exception e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "001078e0677e39b962ca1da81fc34d7ac9a7e65c": {
      "type": "Yfilerename",
      "commitMessage": "YARN-2107. Refactored timeline classes into o.a.h.y.s.timeline package. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1598094 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/14 11:09 AM",
      "commitName": "001078e0677e39b962ca1da81fc34d7ac9a7e65c",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/05/14 10:44 AM",
      "commitNameOld": "cfd8647d0f20c08761f908be1f5b718c1c372498",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public TimelineEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    TimelineEvents events \u003d null;\n    try {\n      UserGroupInformation callerUGI \u003d getUser(req);\n      events \u003d store.getEntityTimelines(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseLongStr(limit),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseArrayStr(eventType, \",\"));\n      if (events !\u003d null) {\n        Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n            events.getAllEvents().iterator();\n        while (eventsItr.hasNext()) {\n          TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n          try {\n            TimelineEntity entity \u003d store.getEntity(\n                eventsOfOneEntity.getEntityId(),\n                eventsOfOneEntity.getEntityType(),\n                EnumSet.of(Field.PRIMARY_FILTERS));\n            // check ACLs\n            if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n              eventsItr.remove();\n            }\n          } catch (Exception e) {\n            LOG.error(\"Error when verifying access for user \" + callerUGI\n                + \" on the events of the timeline entity \"\n                + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                    eventsOfOneEntity.getEntityType()), e);\n            eventsItr.remove();\n          }\n        }\n      }\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/timeline/webapp/TimelineWebServices.java"
      }
    },
    "892ada8fb35d57a1120d548fdefb056824aa939f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1937. Added owner-only ACLs support for Timeline Client and server. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1597186 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/05/14 2:19 PM",
      "commitName": "892ada8fb35d57a1120d548fdefb056824aa939f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/03/14 11:14 AM",
      "commitNameOld": "0f1eda6bbf895a1239b25cdf8b17fabd3759e806",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 60.13,
      "commitsBetweenForRepo": 371,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,56 @@\n   public TimelineEvents getEvents(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @QueryParam(\"entityId\") String entityId,\n       @QueryParam(\"eventType\") String eventType,\n       @QueryParam(\"windowStart\") String windowStart,\n       @QueryParam(\"windowEnd\") String windowEnd,\n       @QueryParam(\"limit\") String limit) {\n     init(res);\n     TimelineEvents events \u003d null;\n     try {\n+      UserGroupInformation callerUGI \u003d getUser(req);\n       events \u003d store.getEntityTimelines(\n           parseStr(entityType),\n           parseArrayStr(entityId, \",\"),\n           parseLongStr(limit),\n           parseLongStr(windowStart),\n           parseLongStr(windowEnd),\n           parseArrayStr(eventType, \",\"));\n+      if (events !\u003d null) {\n+        Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n+            events.getAllEvents().iterator();\n+        while (eventsItr.hasNext()) {\n+          TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n+          try {\n+            TimelineEntity entity \u003d store.getEntity(\n+                eventsOfOneEntity.getEntityId(),\n+                eventsOfOneEntity.getEntityType(),\n+                EnumSet.of(Field.PRIMARY_FILTERS));\n+            // check ACLs\n+            if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n+              eventsItr.remove();\n+            }\n+          } catch (Exception e) {\n+            LOG.error(\"Error when verifying access for user \" + callerUGI\n+                + \" on the events of the timeline entity \"\n+                + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n+                    eventsOfOneEntity.getEntityType()), e);\n+            eventsItr.remove();\n+          }\n+        }\n+      }\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"windowStart, windowEnd or limit is not a numeric value.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity timelines\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (events \u003d\u003d null) {\n       return new TimelineEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    TimelineEvents events \u003d null;\n    try {\n      UserGroupInformation callerUGI \u003d getUser(req);\n      events \u003d store.getEntityTimelines(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseLongStr(limit),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseArrayStr(eventType, \",\"));\n      if (events !\u003d null) {\n        Iterator\u003cTimelineEvents.EventsOfOneEntity\u003e eventsItr \u003d\n            events.getAllEvents().iterator();\n        while (eventsItr.hasNext()) {\n          TimelineEvents.EventsOfOneEntity eventsOfOneEntity \u003d eventsItr.next();\n          try {\n            TimelineEntity entity \u003d store.getEntity(\n                eventsOfOneEntity.getEntityId(),\n                eventsOfOneEntity.getEntityType(),\n                EnumSet.of(Field.PRIMARY_FILTERS));\n            // check ACLs\n            if (!timelineACLsManager.checkAccess(callerUGI, entity)) {\n              eventsItr.remove();\n            }\n          } catch (Exception e) {\n            LOG.error(\"Error when verifying access for user \" + callerUGI\n                + \" on the events of the timeline entity \"\n                + new EntityIdentifier(eventsOfOneEntity.getEntityId(),\n                    eventsOfOneEntity.getEntityType()), e);\n            eventsItr.remove();\n          }\n        }\n      }\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
      "extendedDetails": {}
    },
    "84425fb435cb603fd8adcc2f76631c0244175310": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange,Ybodychange)",
      "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/02/14 12:55 PM",
      "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  public ATSEvents getEvents(\n+  public TimelineEvents getEvents(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @QueryParam(\"entityId\") String entityId,\n       @QueryParam(\"eventType\") String eventType,\n       @QueryParam(\"windowStart\") String windowStart,\n       @QueryParam(\"windowEnd\") String windowEnd,\n       @QueryParam(\"limit\") String limit) {\n     init(res);\n-    ATSEvents events \u003d null;\n+    TimelineEvents events \u003d null;\n     try {\n       events \u003d store.getEntityTimelines(\n           parseStr(entityType),\n           parseArrayStr(entityId, \",\"),\n           parseLongStr(limit),\n           parseLongStr(windowStart),\n           parseLongStr(windowEnd),\n           parseArrayStr(eventType, \",\"));\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"windowStart, windowEnd or limit is not a numeric value.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity timelines\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (events \u003d\u003d null) {\n-      return new ATSEvents();\n+      return new TimelineEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    TimelineEvents events \u003d null;\n    try {\n      events \u003d store.getEntityTimelines(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseLongStr(limit),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseArrayStr(eventType, \",\"));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java",
            "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  public ATSEvents getEvents(\n+  public TimelineEvents getEvents(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @QueryParam(\"entityId\") String entityId,\n       @QueryParam(\"eventType\") String eventType,\n       @QueryParam(\"windowStart\") String windowStart,\n       @QueryParam(\"windowEnd\") String windowEnd,\n       @QueryParam(\"limit\") String limit) {\n     init(res);\n-    ATSEvents events \u003d null;\n+    TimelineEvents events \u003d null;\n     try {\n       events \u003d store.getEntityTimelines(\n           parseStr(entityType),\n           parseArrayStr(entityId, \",\"),\n           parseLongStr(limit),\n           parseLongStr(windowStart),\n           parseLongStr(windowEnd),\n           parseArrayStr(eventType, \",\"));\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"windowStart, windowEnd or limit is not a numeric value.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity timelines\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (events \u003d\u003d null) {\n-      return new ATSEvents();\n+      return new TimelineEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    TimelineEvents events \u003d null;\n    try {\n      events \u003d store.getEntityTimelines(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseLongStr(limit),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseArrayStr(eventType, \",\"));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {
            "oldValue": "ATSEvents",
            "newValue": "TimelineEvents"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-1687. Renamed user-facing records for the timeline-service to be simply named after \u0027timeline\u0027 instead of \u0027apptimeline\u0027. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1570922 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "22/02/14 12:55 PM",
          "commitName": "84425fb435cb603fd8adcc2f76631c0244175310",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "22/02/14 12:46 PM",
          "commitNameOld": "e06226126cd89d0cf8b4ef80a88659b248579231",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,32 @@\n-  public ATSEvents getEvents(\n+  public TimelineEvents getEvents(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @QueryParam(\"entityId\") String entityId,\n       @QueryParam(\"eventType\") String eventType,\n       @QueryParam(\"windowStart\") String windowStart,\n       @QueryParam(\"windowEnd\") String windowEnd,\n       @QueryParam(\"limit\") String limit) {\n     init(res);\n-    ATSEvents events \u003d null;\n+    TimelineEvents events \u003d null;\n     try {\n       events \u003d store.getEntityTimelines(\n           parseStr(entityType),\n           parseArrayStr(entityId, \",\"),\n           parseLongStr(limit),\n           parseLongStr(windowStart),\n           parseLongStr(windowEnd),\n           parseArrayStr(eventType, \",\"));\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"windowStart, windowEnd or limit is not a numeric value.\");\n     } catch (IOException e) {\n       LOG.error(\"Error getting entity timelines\", e);\n       throw new WebApplicationException(e,\n           Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (events \u003d\u003d null) {\n-      return new ATSEvents();\n+      return new TimelineEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    TimelineEvents events \u003d null;\n    try {\n      events \u003d store.getEntityTimelines(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseLongStr(limit),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseArrayStr(eventType, \",\"));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (events \u003d\u003d null) {\n      return new TimelineEvents();\n    }\n    return events;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/TimelineWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "23b2e43f5d678517e33590d15dec73225b9c5682": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1635. Implemented a Leveldb based ApplicationTimelineStore. Contributed by Billie Rinaldi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1565868 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/02/14 6:15 PM",
      "commitName": "23b2e43f5d678517e33590d15dec73225b9c5682",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "05/02/14 9:02 AM",
      "commitNameOld": "484faadffec97f8e454cf18b821f6ef12a27616c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.38,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,32 @@\n   public ATSEvents getEvents(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"entityType\") String entityType,\n       @QueryParam(\"entityId\") String entityId,\n       @QueryParam(\"eventType\") String eventType,\n       @QueryParam(\"windowStart\") String windowStart,\n       @QueryParam(\"windowEnd\") String windowEnd,\n       @QueryParam(\"limit\") String limit) {\n     init(res);\n     ATSEvents events \u003d null;\n     try {\n       events \u003d store.getEntityTimelines(\n           parseStr(entityType),\n           parseArrayStr(entityId, \",\"),\n           parseLongStr(limit),\n           parseLongStr(windowStart),\n           parseLongStr(windowEnd),\n           parseArrayStr(eventType, \",\"));\n     } catch (NumberFormatException e) {\n       throw new BadRequestException(\n           \"windowStart, windowEnd or limit is not a numeric value.\");\n+    } catch (IOException e) {\n+      LOG.error(\"Error getting entity timelines\", e);\n+      throw new WebApplicationException(e,\n+          Response.Status.INTERNAL_SERVER_ERROR);\n     }\n     if (events \u003d\u003d null) {\n       return new ATSEvents();\n     }\n     return events;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    ATSEvents events \u003d null;\n    try {\n      events \u003d store.getEntityTimelines(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseLongStr(limit),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseArrayStr(eventType, \",\"));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    } catch (IOException e) {\n      LOG.error(\"Error getting entity timelines\", e);\n      throw new WebApplicationException(e,\n          Response.Status.INTERNAL_SERVER_ERROR);\n    }\n    if (events \u003d\u003d null) {\n      return new ATSEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java",
      "extendedDetails": {}
    },
    "484faadffec97f8e454cf18b821f6ef12a27616c": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1636. Augmented Application-history server\u0027s web-services to also expose new APIs for retrieving and storing timeline information. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1564829 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/02/14 9:02 AM",
      "commitName": "484faadffec97f8e454cf18b821f6ef12a27616c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,28 @@\n+  public ATSEvents getEvents(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"entityType\") String entityType,\n+      @QueryParam(\"entityId\") String entityId,\n+      @QueryParam(\"eventType\") String eventType,\n+      @QueryParam(\"windowStart\") String windowStart,\n+      @QueryParam(\"windowEnd\") String windowEnd,\n+      @QueryParam(\"limit\") String limit) {\n+    init(res);\n+    ATSEvents events \u003d null;\n+    try {\n+      events \u003d store.getEntityTimelines(\n+          parseStr(entityType),\n+          parseArrayStr(entityId, \",\"),\n+          parseLongStr(limit),\n+          parseLongStr(windowStart),\n+          parseLongStr(windowEnd),\n+          parseArrayStr(eventType, \",\"));\n+    } catch (NumberFormatException e) {\n+      throw new BadRequestException(\n+          \"windowStart, windowEnd or limit is not a numeric value.\");\n+    }\n+    if (events \u003d\u003d null) {\n+      return new ATSEvents();\n+    }\n+    return events;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ATSEvents getEvents(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"entityType\") String entityType,\n      @QueryParam(\"entityId\") String entityId,\n      @QueryParam(\"eventType\") String eventType,\n      @QueryParam(\"windowStart\") String windowStart,\n      @QueryParam(\"windowEnd\") String windowEnd,\n      @QueryParam(\"limit\") String limit) {\n    init(res);\n    ATSEvents events \u003d null;\n    try {\n      events \u003d store.getEntityTimelines(\n          parseStr(entityType),\n          parseArrayStr(entityId, \",\"),\n          parseLongStr(limit),\n          parseLongStr(windowStart),\n          parseLongStr(windowEnd),\n          parseArrayStr(eventType, \",\"));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\n          \"windowStart, windowEnd or limit is not a numeric value.\");\n    }\n    if (events \u003d\u003d null) {\n      return new ATSEvents();\n    }\n    return events;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-applicationhistoryservice/src/main/java/org/apache/hadoop/yarn/server/applicationhistoryservice/webapp/ATSWebServices.java"
    }
  }
}