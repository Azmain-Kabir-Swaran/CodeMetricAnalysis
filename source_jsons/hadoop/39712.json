{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CSQueueStore.java",
  "functionName": "getShortNameQueues",
  "functionId": "getShortNameQueues",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CSQueueStore.java",
  "functionStartLine": 68,
  "functionEndLine": 95,
  "numCommitsSeen": 1,
  "timeTaken": 2525,
  "changeHistory": [
    "cdb2107066a2d8557270888c0a9a75f29a6853bf"
  ],
  "changeHistoryShort": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdb2107066a2d8557270888c0a9a75f29a6853bf": {
      "type": "Yintroduced",
      "commitMessage": "YARN-9879. Allow multiple leaf queues with the same name in CapacityScheduler. Contributed by Gergely Pollak.\n",
      "commitDate": "25/03/20 4:20 AM",
      "commitName": "cdb2107066a2d8557270888c0a9a75f29a6853bf",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,28 @@\n+  Map\u003cString, CSQueue\u003e getShortNameQueues() {\n+    //this is not the most efficient way to create a short named list\n+    //but this method is only used in tests\n+    try {\n+      modificationLock.readLock().lock();\n+      return ImmutableMap.copyOf(\n+          fullNameQueues\n+              //getting all queues from path-\u003equeue map\n+              .entrySet()\n+              .stream()\n+              //filtering the list to contain only disambiguous short names\n+              .filter(\n+                  //keeping queues where get(queueShortname) \u003d\u003d queue\n+                  //these are the ambigous references\n+                  entry -\u003e getMap.get(entry.getValue().getQueueShortName())\n+                      \u003d\u003d entry.getValue())\n+              //making a map from the stream\n+              .collect(\n+                  Collectors.toMap(\n+                      //using the queue\u0027s short name as key\n+                      entry-\u003eentry.getValue().getQueueShortName(),\n+                      //using the queue as value\n+                      entry-\u003eentry.getValue()))\n+      );\n+    } finally {\n+      modificationLock.readLock().unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  Map\u003cString, CSQueue\u003e getShortNameQueues() {\n    //this is not the most efficient way to create a short named list\n    //but this method is only used in tests\n    try {\n      modificationLock.readLock().lock();\n      return ImmutableMap.copyOf(\n          fullNameQueues\n              //getting all queues from path-\u003equeue map\n              .entrySet()\n              .stream()\n              //filtering the list to contain only disambiguous short names\n              .filter(\n                  //keeping queues where get(queueShortname) \u003d\u003d queue\n                  //these are the ambigous references\n                  entry -\u003e getMap.get(entry.getValue().getQueueShortName())\n                      \u003d\u003d entry.getValue())\n              //making a map from the stream\n              .collect(\n                  Collectors.toMap(\n                      //using the queue\u0027s short name as key\n                      entry-\u003eentry.getValue().getQueueShortName(),\n                      //using the queue as value\n                      entry-\u003eentry.getValue()))\n      );\n    } finally {\n      modificationLock.readLock().unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CSQueueStore.java"
    }
  }
}