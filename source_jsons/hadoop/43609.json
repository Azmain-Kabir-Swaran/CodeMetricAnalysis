{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceManager.java",
  "functionName": "finalizeUpgrade",
  "functionId": "finalizeUpgrade___cancelUpgrade-boolean",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceManager.java",
  "functionStartLine": 321,
  "functionEndLine": 373,
  "numCommitsSeen": 13,
  "timeTaken": 2863,
  "changeHistory": [
    "913f87dada27776c539dfb352400ecf8d40e7943",
    "4a7369b09547a78f532af66c763c6994a38b5d68",
    "27d60a16342fd39973d43b61008f54a8815a6237"
  ],
  "changeHistoryShort": {
    "913f87dada27776c539dfb352400ecf8d40e7943": "Ymultichange(Yparameterchange,Ybodychange)",
    "4a7369b09547a78f532af66c763c6994a38b5d68": "Ybodychange",
    "27d60a16342fd39973d43b61008f54a8815a6237": "Yintroduced"
  },
  "changeHistoryDetails": {
    "913f87dada27776c539dfb352400ecf8d40e7943": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-8665.  Added Yarn service cancel upgrade option.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/09/18 11:51 AM",
      "commitName": "913f87dada27776c539dfb352400ecf8d40e7943",
      "commitAuthor": "Eric Yang",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-8665.  Added Yarn service cancel upgrade option.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/09/18 11:51 AM",
          "commitName": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/08/18 4:49 PM",
          "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 35.79,
          "commitsBetweenForRepo": 332,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,53 @@\n-  private boolean finalizeUpgrade() {\n-    try {\n-      // save the application id and state to\n-      Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n-          fs, getName(), upgradeVersion);\n-      targetSpec.setId(serviceSpec.getId());\n-      targetSpec.setState(ServiceState.STABLE);\n-      Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n-      targetSpec.getComponents().forEach(compSpec -\u003e {\n-        Component comp \u003d allComps.get(compSpec.getName());\n-        compSpec.setState(comp.getComponentSpec().getState());\n-      });\n-      jsonSerDeser.save(fs.getFileSystem(),\n-          ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n-      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n-    } catch (IOException e) {\n-      LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n-          \" service definition\", e);\n-      return false;\n+  private boolean finalizeUpgrade(boolean cancelUpgrade) {\n+    if (!cancelUpgrade) {\n+      try {\n+        // save the application id and state to\n+        Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n+            fs, getName(), upgradeVersion);\n+        targetSpec.setId(serviceSpec.getId());\n+        targetSpec.setState(ServiceState.STABLE);\n+        Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n+        targetSpec.getComponents().forEach(compSpec -\u003e {\n+          Component comp \u003d allComps.get(compSpec.getName());\n+          compSpec.setState(comp.getComponentSpec().getState());\n+        });\n+        jsonSerDeser.save(fs.getFileSystem(),\n+            ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n+      } catch (IOException e) {\n+        LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n+            \" service definition\", e);\n+        return false;\n+      }\n     }\n \n     try {\n-      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n+      String upgradeVersionToDel \u003d cancelUpgrade? cancelledVersion :\n+          upgradeVersion;\n+      LOG.info(\"[SERVICE]: delete upgrade dir version {}\", upgradeVersionToDel);\n+      fs.deleteClusterUpgradeDir(getName(), upgradeVersionToDel);\n+\n+      for (String comp : compsAffectedByUpgrade) {\n+        String compDirVersionToDel \u003d cancelUpgrade? cancelledVersion :\n+            serviceSpec.getVersion();\n+        LOG.info(\"[SERVICE]: delete {} dir version {}\",  comp,\n+            compDirVersionToDel);\n+        fs.deleteComponentDir(compDirVersionToDel, comp);\n+      }\n+\n+      if (cancelUpgrade) {\n+        fs.deleteComponentsVersionDirIfEmpty(cancelledVersion);\n+      } else {\n+        fs.deleteComponentsVersionDirIfEmpty(serviceSpec.getVersion());\n+      }\n+\n     } catch (IOException e) {\n       LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n           \"version {}\", getName(), upgradeVersion);\n     }\n-    serviceSpec.setState(ServiceState.STABLE);\n+    setServiceState(ServiceState.STABLE);\n     serviceSpec.setVersion(upgradeVersion);\n     upgradeVersion \u003d null;\n+    cancelledVersion \u003d null;\n+    compsAffectedByUpgrade.clear();\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean finalizeUpgrade(boolean cancelUpgrade) {\n    if (!cancelUpgrade) {\n      try {\n        // save the application id and state to\n        Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n            fs, getName(), upgradeVersion);\n        targetSpec.setId(serviceSpec.getId());\n        targetSpec.setState(ServiceState.STABLE);\n        Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n        targetSpec.getComponents().forEach(compSpec -\u003e {\n          Component comp \u003d allComps.get(compSpec.getName());\n          compSpec.setState(comp.getComponentSpec().getState());\n        });\n        jsonSerDeser.save(fs.getFileSystem(),\n            ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n      } catch (IOException e) {\n        LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n            \" service definition\", e);\n        return false;\n      }\n    }\n\n    try {\n      String upgradeVersionToDel \u003d cancelUpgrade? cancelledVersion :\n          upgradeVersion;\n      LOG.info(\"[SERVICE]: delete upgrade dir version {}\", upgradeVersionToDel);\n      fs.deleteClusterUpgradeDir(getName(), upgradeVersionToDel);\n\n      for (String comp : compsAffectedByUpgrade) {\n        String compDirVersionToDel \u003d cancelUpgrade? cancelledVersion :\n            serviceSpec.getVersion();\n        LOG.info(\"[SERVICE]: delete {} dir version {}\",  comp,\n            compDirVersionToDel);\n        fs.deleteComponentDir(compDirVersionToDel, comp);\n      }\n\n      if (cancelUpgrade) {\n        fs.deleteComponentsVersionDirIfEmpty(cancelledVersion);\n      } else {\n        fs.deleteComponentsVersionDirIfEmpty(serviceSpec.getVersion());\n      }\n\n    } catch (IOException e) {\n      LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n          \"version {}\", getName(), upgradeVersion);\n    }\n    setServiceState(ServiceState.STABLE);\n    serviceSpec.setVersion(upgradeVersion);\n    upgradeVersion \u003d null;\n    cancelledVersion \u003d null;\n    compsAffectedByUpgrade.clear();\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceManager.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[cancelUpgrade-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-8665.  Added Yarn service cancel upgrade option.\n            Contributed by Chandni Singh\n",
          "commitDate": "26/09/18 11:51 AM",
          "commitName": "913f87dada27776c539dfb352400ecf8d40e7943",
          "commitAuthor": "Eric Yang",
          "commitDateOld": "21/08/18 4:49 PM",
          "commitNameOld": "e557c6bd8de2811a561210f672f47b4d07a9d5c6",
          "commitAuthorOld": "Eric Yang",
          "daysBetweenCommits": 35.79,
          "commitsBetweenForRepo": 332,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,32 +1,53 @@\n-  private boolean finalizeUpgrade() {\n-    try {\n-      // save the application id and state to\n-      Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n-          fs, getName(), upgradeVersion);\n-      targetSpec.setId(serviceSpec.getId());\n-      targetSpec.setState(ServiceState.STABLE);\n-      Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n-      targetSpec.getComponents().forEach(compSpec -\u003e {\n-        Component comp \u003d allComps.get(compSpec.getName());\n-        compSpec.setState(comp.getComponentSpec().getState());\n-      });\n-      jsonSerDeser.save(fs.getFileSystem(),\n-          ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n-      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n-    } catch (IOException e) {\n-      LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n-          \" service definition\", e);\n-      return false;\n+  private boolean finalizeUpgrade(boolean cancelUpgrade) {\n+    if (!cancelUpgrade) {\n+      try {\n+        // save the application id and state to\n+        Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n+            fs, getName(), upgradeVersion);\n+        targetSpec.setId(serviceSpec.getId());\n+        targetSpec.setState(ServiceState.STABLE);\n+        Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n+        targetSpec.getComponents().forEach(compSpec -\u003e {\n+          Component comp \u003d allComps.get(compSpec.getName());\n+          compSpec.setState(comp.getComponentSpec().getState());\n+        });\n+        jsonSerDeser.save(fs.getFileSystem(),\n+            ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n+      } catch (IOException e) {\n+        LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n+            \" service definition\", e);\n+        return false;\n+      }\n     }\n \n     try {\n-      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n+      String upgradeVersionToDel \u003d cancelUpgrade? cancelledVersion :\n+          upgradeVersion;\n+      LOG.info(\"[SERVICE]: delete upgrade dir version {}\", upgradeVersionToDel);\n+      fs.deleteClusterUpgradeDir(getName(), upgradeVersionToDel);\n+\n+      for (String comp : compsAffectedByUpgrade) {\n+        String compDirVersionToDel \u003d cancelUpgrade? cancelledVersion :\n+            serviceSpec.getVersion();\n+        LOG.info(\"[SERVICE]: delete {} dir version {}\",  comp,\n+            compDirVersionToDel);\n+        fs.deleteComponentDir(compDirVersionToDel, comp);\n+      }\n+\n+      if (cancelUpgrade) {\n+        fs.deleteComponentsVersionDirIfEmpty(cancelledVersion);\n+      } else {\n+        fs.deleteComponentsVersionDirIfEmpty(serviceSpec.getVersion());\n+      }\n+\n     } catch (IOException e) {\n       LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n           \"version {}\", getName(), upgradeVersion);\n     }\n-    serviceSpec.setState(ServiceState.STABLE);\n+    setServiceState(ServiceState.STABLE);\n     serviceSpec.setVersion(upgradeVersion);\n     upgradeVersion \u003d null;\n+    cancelledVersion \u003d null;\n+    compsAffectedByUpgrade.clear();\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private boolean finalizeUpgrade(boolean cancelUpgrade) {\n    if (!cancelUpgrade) {\n      try {\n        // save the application id and state to\n        Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n            fs, getName(), upgradeVersion);\n        targetSpec.setId(serviceSpec.getId());\n        targetSpec.setState(ServiceState.STABLE);\n        Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n        targetSpec.getComponents().forEach(compSpec -\u003e {\n          Component comp \u003d allComps.get(compSpec.getName());\n          compSpec.setState(comp.getComponentSpec().getState());\n        });\n        jsonSerDeser.save(fs.getFileSystem(),\n            ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n      } catch (IOException e) {\n        LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n            \" service definition\", e);\n        return false;\n      }\n    }\n\n    try {\n      String upgradeVersionToDel \u003d cancelUpgrade? cancelledVersion :\n          upgradeVersion;\n      LOG.info(\"[SERVICE]: delete upgrade dir version {}\", upgradeVersionToDel);\n      fs.deleteClusterUpgradeDir(getName(), upgradeVersionToDel);\n\n      for (String comp : compsAffectedByUpgrade) {\n        String compDirVersionToDel \u003d cancelUpgrade? cancelledVersion :\n            serviceSpec.getVersion();\n        LOG.info(\"[SERVICE]: delete {} dir version {}\",  comp,\n            compDirVersionToDel);\n        fs.deleteComponentDir(compDirVersionToDel, comp);\n      }\n\n      if (cancelUpgrade) {\n        fs.deleteComponentsVersionDirIfEmpty(cancelledVersion);\n      } else {\n        fs.deleteComponentsVersionDirIfEmpty(serviceSpec.getVersion());\n      }\n\n    } catch (IOException e) {\n      LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n          \"version {}\", getName(), upgradeVersion);\n    }\n    setServiceState(ServiceState.STABLE);\n    serviceSpec.setVersion(upgradeVersion);\n    upgradeVersion \u003d null;\n    cancelledVersion \u003d null;\n    compsAffectedByUpgrade.clear();\n    return true;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceManager.java",
          "extendedDetails": {}
        }
      ]
    },
    "4a7369b09547a78f532af66c763c6994a38b5d68": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7939.  Added support to upgrade a component instance.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/04/18 1:54 PM",
      "commitName": "4a7369b09547a78f532af66c763c6994a38b5d68",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "26/03/18 3:46 PM",
      "commitNameOld": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthorOld": "Eric Yang",
      "daysBetweenCommits": 30.92,
      "commitsBetweenForRepo": 699,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,32 @@\n   private boolean finalizeUpgrade() {\n     try {\n-      Service upgradeSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n+      // save the application id and state to\n+      Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n           fs, getName(), upgradeVersion);\n-      ServiceApiUtil.writeAppDefinition(fs,\n-          ServiceApiUtil.getServiceJsonPath(fs, getName()), upgradeSpec);\n+      targetSpec.setId(serviceSpec.getId());\n+      targetSpec.setState(ServiceState.STABLE);\n+      Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n+      targetSpec.getComponents().forEach(compSpec -\u003e {\n+        Component comp \u003d allComps.get(compSpec.getName());\n+        compSpec.setState(comp.getComponentSpec().getState());\n+      });\n+      jsonSerDeser.save(fs.getFileSystem(),\n+          ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n+      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n     } catch (IOException e) {\n-      LOG.error(\"Upgrade did not complete because unable to overwrite the\" +\n+      LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n           \" service definition\", e);\n       return false;\n     }\n \n     try {\n       fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n     } catch (IOException e) {\n       LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n-              \"version {}\", getName(), upgradeVersion);\n+          \"version {}\", getName(), upgradeVersion);\n     }\n+    serviceSpec.setState(ServiceState.STABLE);\n     serviceSpec.setVersion(upgradeVersion);\n     upgradeVersion \u003d null;\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean finalizeUpgrade() {\n    try {\n      // save the application id and state to\n      Service targetSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n          fs, getName(), upgradeVersion);\n      targetSpec.setId(serviceSpec.getId());\n      targetSpec.setState(ServiceState.STABLE);\n      Map\u003cString, Component\u003e allComps \u003d scheduler.getAllComponents();\n      targetSpec.getComponents().forEach(compSpec -\u003e {\n        Component comp \u003d allComps.get(compSpec.getName());\n        compSpec.setState(comp.getComponentSpec().getState());\n      });\n      jsonSerDeser.save(fs.getFileSystem(),\n          ServiceApiUtil.getServiceJsonPath(fs, getName()), targetSpec, true);\n      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n    } catch (IOException e) {\n      LOG.error(\"Upgrade did not complete because unable to re-write the\" +\n          \" service definition\", e);\n      return false;\n    }\n\n    try {\n      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n    } catch (IOException e) {\n      LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n          \"version {}\", getName(), upgradeVersion);\n    }\n    serviceSpec.setState(ServiceState.STABLE);\n    serviceSpec.setVersion(upgradeVersion);\n    upgradeVersion \u003d null;\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceManager.java",
      "extendedDetails": {}
    },
    "27d60a16342fd39973d43b61008f54a8815a6237": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8018.  Added support for initiating yarn service upgrade.\n            Contributed by Chandni Singh\n",
      "commitDate": "26/03/18 3:46 PM",
      "commitName": "27d60a16342fd39973d43b61008f54a8815a6237",
      "commitAuthor": "Eric Yang",
      "diff": "@@ -0,0 +1,22 @@\n+  private boolean finalizeUpgrade() {\n+    try {\n+      Service upgradeSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n+          fs, getName(), upgradeVersion);\n+      ServiceApiUtil.writeAppDefinition(fs,\n+          ServiceApiUtil.getServiceJsonPath(fs, getName()), upgradeSpec);\n+    } catch (IOException e) {\n+      LOG.error(\"Upgrade did not complete because unable to overwrite the\" +\n+          \" service definition\", e);\n+      return false;\n+    }\n+\n+    try {\n+      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n+    } catch (IOException e) {\n+      LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n+              \"version {}\", getName(), upgradeVersion);\n+    }\n+    serviceSpec.setVersion(upgradeVersion);\n+    upgradeVersion \u003d null;\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean finalizeUpgrade() {\n    try {\n      Service upgradeSpec \u003d ServiceApiUtil.loadServiceUpgrade(\n          fs, getName(), upgradeVersion);\n      ServiceApiUtil.writeAppDefinition(fs,\n          ServiceApiUtil.getServiceJsonPath(fs, getName()), upgradeSpec);\n    } catch (IOException e) {\n      LOG.error(\"Upgrade did not complete because unable to overwrite the\" +\n          \" service definition\", e);\n      return false;\n    }\n\n    try {\n      fs.deleteClusterUpgradeDir(getName(), upgradeVersion);\n    } catch (IOException e) {\n      LOG.warn(\"Unable to delete upgrade definition for service {} \" +\n              \"version {}\", getName(), upgradeVersion);\n    }\n    serviceSpec.setVersion(upgradeVersion);\n    upgradeVersion \u003d null;\n    return true;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceManager.java"
    }
  }
}