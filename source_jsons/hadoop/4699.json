{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NameNodeProxies.java",
  "functionName": "createNonHAProxy",
  "functionId": "createNonHAProxy___conf-Configuration__nnAddr-InetSocketAddress__xface-Class__T____ugi-UserGroupInformation__withRetries-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
  "functionStartLine": 148,
  "functionEndLine": 152,
  "numCommitsSeen": 55,
  "timeTaken": 2677,
  "changeHistory": [
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
    "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85",
    "d00605f8f0214ed8e2304db8688e140f0a1d62d8",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
    "c69dfdd5e14af490790dff8227b11962ec816577",
    "481f84597bf842df45b068cc24c328112e8bcf40"
  ],
  "changeHistoryShort": {
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed": "Ybodychange",
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": "Ybodychange",
    "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85": "Ybodychange",
    "d00605f8f0214ed8e2304db8688e140f0a1d62d8": "Ybodychange",
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": "Ybodychange",
    "c69dfdd5e14af490790dff8227b11962ec816577": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "481f84597bf842df45b068cc24c328112e8bcf40": "Yintroduced"
  },
  "changeHistoryDetails": {
    "64f28f9efa2ef3cd9dd54a6c5009029721e030ed": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14162. [SBN read] Allow Balancer to work with Observer node. Add a new ProxyCombiner allowing for multiple related protocols to be combined. Allow AlignmentContext to be passed in NameNodeProxyFactory. Contributed by Erik Krogen.\n",
      "commitDate": "14/02/19 11:22 AM",
      "commitName": "64f28f9efa2ef3cd9dd54a6c5009029721e030ed",
      "commitAuthor": "Erik Krogen",
      "commitDateOld": "06/09/18 2:48 PM",
      "commitNameOld": "eca1a4bfe952fc184fe90dde50bac9b0e5293568",
      "commitAuthorOld": "Giovanni Matteo Fumarola",
      "daysBetweenCommits": 160.9,
      "commitsBetweenForRepo": 1283,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,5 +1,5 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries) throws IOException {\n-    return createNonHAProxy(conf, nnAddr, xface, ugi, withRetries, null);\n+    return createNonHAProxy(conf, nnAddr, xface, ugi, withRetries, null, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    return createNonHAProxy(conf, nnAddr, xface, ugi, withRetries, null, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7073. Allow falling back to a non-SASL connection on DataTransferProtocol in several edge cases. Contributed by Chris Nauroth.\n",
      "commitDate": "19/09/14 9:23 PM",
      "commitName": "f85cc14eb49a46e81d2edcdc1ffe4d0852f193a5",
      "commitAuthor": "cnauroth",
      "commitDateOld": "17/07/14 4:11 PM",
      "commitNameOld": "7ba5913797c49d5001ad95558eadd119c3361060",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 64.22,
      "commitsBetweenForRepo": 611,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,5 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries) throws IOException {\n-    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n-  \n-    T proxy;\n-    if (xface \u003d\u003d ClientProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n-          withRetries);\n-    } else if (xface \u003d\u003d JournalProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n-    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n-          withRetries);\n-    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n-    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n-    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n-          conf, ugi);\n-    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n-      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n-    } else {\n-      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n-          \"connection to NameNode: \" +\n-          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n-      LOG.error(message);\n-      throw new IllegalStateException(message);\n-    }\n-\n-    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n+    return createNonHAProxy(conf, nnAddr, xface, ugi, withRetries, null);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    return createNonHAProxy(conf, nnAddr, xface, ugi, withRetries, null);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6507. Improve DFSAdmin to support HA cluster better. (Contributd by Zesheng Wu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1604692 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/06/14 10:16 PM",
      "commitName": "e8ca6480050e38d2fe4859baf4f9a8d22e7f9b85",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "13/05/14 9:19 AM",
      "commitNameOld": "33ade356b35223654a077103ed7fbed89f3f2321",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 40.54,
      "commitsBetweenForRepo": 250,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,33 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n   \n     T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n       proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d JournalProtocol.class) {\n       proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n       proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n           conf, ugi);\n     } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n     } else {\n       String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to NameNode: \" +\n           ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n \n-    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService, nnAddr);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "d00605f8f0214ed8e2304db8688e140f0a1d62d8": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10285. Admin interface to swap callqueue at runtime. (Contributed by Chris Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1573052 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/14 11:48 AM",
      "commitName": "d00605f8f0214ed8e2304db8688e140f0a1d62d8",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "04/02/14 8:18 PM",
      "commitNameOld": "0aa09f6d5a97f523e9ee6f30bb44f206433ead0a",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 23.65,
      "commitsBetweenForRepo": 199,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,33 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n   \n     T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n       proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d JournalProtocol.class) {\n       proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n       proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n           conf, ugi);\n+    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n     } else {\n-      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n+      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n           \"connection to NameNode: \" +\n           ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n+\n     return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else if (xface \u003d\u003d RefreshCallQueueProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshCallQueueProtocol(nnAddr, conf, ugi);\n    } else {\n      String message \u003d \"Unsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3039. Address findbugs and javadoc warnings on branch. Contributed by Todd Lipcon.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1296017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/03/12 5:32 PM",
      "commitName": "7be4e5bd222c6f1c40f88ee8b24b1587e157a87e",
      "commitAuthor": "Aaron Myers",
      "commitDateOld": "28/02/12 12:09 PM",
      "commitNameOld": "c69dfdd5e14af490790dff8227b11962ec816577",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 2.22,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n       Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n       UserGroupInformation ugi, boolean withRetries) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n   \n     T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n       proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d JournalProtocol.class) {\n       proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n       proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n           withRetries);\n     } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n       proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n           conf, ugi);\n     } else {\n       String message \u003d \"Upsupported protocol found when creating the proxy \" +\n-          \"conection to NameNode: \" +\n-          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n+          \"connection to NameNode: \" +\n+          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n       LOG.error(message);\n       throw new IllegalStateException(message);\n     }\n     return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else {\n      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n          \"connection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : \"null\");\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
      "extendedDetails": {}
    },
    "c69dfdd5e14af490790dff8227b11962ec816577": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/02/12 12:09 PM",
      "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
      "commitAuthor": "Aaron Myers",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,30 @@\n-  private static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n-      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface) throws IOException {\n-    InetSocketAddress nnAddr \u003d NameNode.getAddress(nameNodeUri);\n+  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n+      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n+      UserGroupInformation ugi, boolean withRetries) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n-\n+  \n+    T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n-      T proxy \u003d (T)DFSUtil.createNamenode(nnAddr, conf);\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d JournalProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n-      T proxy \u003d (T) DFSUtil.createNNProxyWithNamenodeProtocol(\n-          nnAddr, conf, UserGroupInformation.getCurrentUser());\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n+          conf, ugi);\n     } else {\n-      throw new AssertionError(\"Unsupported proxy type: \" + xface);\n+      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n+          \"conection to NameNode: \" +\n+          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n+      LOG.error(message);\n+      throw new IllegalStateException(message);\n     }\n+    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else {\n      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n          \"conection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
            "oldMethodName": "createNonHAProxy",
            "newMethodName": "createNonHAProxy"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,30 @@\n-  private static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n-      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface) throws IOException {\n-    InetSocketAddress nnAddr \u003d NameNode.getAddress(nameNodeUri);\n+  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n+      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n+      UserGroupInformation ugi, boolean withRetries) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n-\n+  \n+    T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n-      T proxy \u003d (T)DFSUtil.createNamenode(nnAddr, conf);\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d JournalProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n-      T proxy \u003d (T) DFSUtil.createNNProxyWithNamenodeProtocol(\n-          nnAddr, conf, UserGroupInformation.getCurrentUser());\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n+          conf, ugi);\n     } else {\n-      throw new AssertionError(\"Unsupported proxy type: \" + xface);\n+      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n+          \"conection to NameNode: \" +\n+          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n+      LOG.error(message);\n+      throw new IllegalStateException(message);\n     }\n+    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else {\n      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n          \"conection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[public, static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,30 @@\n-  private static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n-      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface) throws IOException {\n-    InetSocketAddress nnAddr \u003d NameNode.getAddress(nameNodeUri);\n+  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n+      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n+      UserGroupInformation ugi, boolean withRetries) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n-\n+  \n+    T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n-      T proxy \u003d (T)DFSUtil.createNamenode(nnAddr, conf);\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d JournalProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n-      T proxy \u003d (T) DFSUtil.createNNProxyWithNamenodeProtocol(\n-          nnAddr, conf, UserGroupInformation.getCurrentUser());\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n+          conf, ugi);\n     } else {\n-      throw new AssertionError(\"Unsupported proxy type: \" + xface);\n+      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n+          \"conection to NameNode: \" +\n+          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n+      LOG.error(message);\n+      throw new IllegalStateException(message);\n     }\n+    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else {\n      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n          \"conection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-2958. Sweep for remaining proxy construction which doesn\u0027t go through failover path.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1294811 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "28/02/12 12:09 PM",
          "commitName": "c69dfdd5e14af490790dff8227b11962ec816577",
          "commitAuthor": "Aaron Myers",
          "commitDateOld": "28/02/12 10:38 AM",
          "commitNameOld": "1ab31b1715e9db498847725dadfb82b16f71143b",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,16 +1,30 @@\n-  private static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n-      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface) throws IOException {\n-    InetSocketAddress nnAddr \u003d NameNode.getAddress(nameNodeUri);\n+  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n+      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n+      UserGroupInformation ugi, boolean withRetries) throws IOException {\n     Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n-\n+  \n+    T proxy;\n     if (xface \u003d\u003d ClientProtocol.class) {\n-      T proxy \u003d (T)DFSUtil.createNamenode(nnAddr, conf);\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d JournalProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n     } else if (xface \u003d\u003d NamenodeProtocol.class) {\n-      T proxy \u003d (T) DFSUtil.createNNProxyWithNamenodeProtocol(\n-          nnAddr, conf, UserGroupInformation.getCurrentUser());\n-      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n+          withRetries);\n+    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n+    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n+      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n+          conf, ugi);\n     } else {\n-      throw new AssertionError(\"Unsupported proxy type: \" + xface);\n+      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n+          \"conection to NameNode: \" +\n+          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n+      LOG.error(message);\n+      throw new IllegalStateException(message);\n     }\n+    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, InetSocketAddress nnAddr, Class\u003cT\u003e xface,\n      UserGroupInformation ugi, boolean withRetries) throws IOException {\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n  \n    T proxy;\n    if (xface \u003d\u003d ClientProtocol.class) {\n      proxy \u003d (T) createNNProxyWithClientProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d JournalProtocol.class) {\n      proxy \u003d (T) createNNProxyWithJournalProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      proxy \u003d (T) createNNProxyWithNamenodeProtocol(nnAddr, conf, ugi,\n          withRetries);\n    } else if (xface \u003d\u003d GetUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithGetUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshUserMappingsProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshUserMappingsProtocol(nnAddr, conf, ugi);\n    } else if (xface \u003d\u003d RefreshAuthorizationPolicyProtocol.class) {\n      proxy \u003d (T) createNNProxyWithRefreshAuthorizationPolicyProtocol(nnAddr,\n          conf, ugi);\n    } else {\n      String message \u003d \"Upsupported protocol found when creating the proxy \" +\n          \"conection to NameNode: \" +\n          ((xface !\u003d null) ? xface.getClass().getName() : xface);\n      LOG.error(message);\n      throw new IllegalStateException(message);\n    }\n    return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/NameNodeProxies.java",
          "extendedDetails": {
            "oldValue": "[conf-Configuration, nameNodeUri-URI, xface-Class\u003cT\u003e]",
            "newValue": "[conf-Configuration, nnAddr-InetSocketAddress, xface-Class\u003cT\u003e, ugi-UserGroupInformation, withRetries-boolean]"
          }
        }
      ]
    },
    "481f84597bf842df45b068cc24c328112e8bcf40": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2904. Client support for getting delegation tokens. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1293486 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/02/12 4:03 PM",
      "commitName": "481f84597bf842df45b068cc24c328112e8bcf40",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,16 @@\n+  private static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n+      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface) throws IOException {\n+    InetSocketAddress nnAddr \u003d NameNode.getAddress(nameNodeUri);\n+    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n+\n+    if (xface \u003d\u003d ClientProtocol.class) {\n+      T proxy \u003d (T)DFSUtil.createNamenode(nnAddr, conf);\n+      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n+      T proxy \u003d (T) DFSUtil.createNNProxyWithNamenodeProtocol(\n+          nnAddr, conf, UserGroupInformation.getCurrentUser());\n+      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n+    } else {\n+      throw new AssertionError(\"Unsupported proxy type: \" + xface);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static \u003cT\u003e ProxyAndInfo\u003cT\u003e createNonHAProxy(\n      Configuration conf, URI nameNodeUri, Class\u003cT\u003e xface) throws IOException {\n    InetSocketAddress nnAddr \u003d NameNode.getAddress(nameNodeUri);\n    Text dtService \u003d SecurityUtil.buildTokenService(nnAddr);\n\n    if (xface \u003d\u003d ClientProtocol.class) {\n      T proxy \u003d (T)DFSUtil.createNamenode(nnAddr, conf);\n      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n    } else if (xface \u003d\u003d NamenodeProtocol.class) {\n      T proxy \u003d (T) DFSUtil.createNNProxyWithNamenodeProtocol(\n          nnAddr, conf, UserGroupInformation.getCurrentUser());\n      return new ProxyAndInfo\u003cT\u003e(proxy, dtService);\n    } else {\n      throw new AssertionError(\"Unsupported proxy type: \" + xface);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/HAUtil.java"
    }
  }
}