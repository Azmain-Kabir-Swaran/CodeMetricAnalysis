{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "deleteReservation",
  "functionId": "deleteReservation___request-ReservationDeleteRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 1414,
  "functionEndLine": 1450,
  "numCommitsSeen": 128,
  "timeTaken": 4007,
  "changeHistory": [
    "b63ae854f9f5a900ca860dcb26c30785af32bde0",
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e"
  ],
  "changeHistoryShort": {
    "b63ae854f9f5a900ca860dcb26c30785af32bde0": "Ybodychange",
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": "Ybodychange",
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b63ae854f9f5a900ca860dcb26c30785af32bde0": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6379. Remove unused argument in ClientRMService. Contributed by Kai Sasaki.\n",
      "commitDate": "26/03/17 7:23 PM",
      "commitName": "b63ae854f9f5a900ca860dcb26c30785af32bde0",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "25/03/17 9:56 AM",
      "commitNameOld": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 1.39,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public ReservationDeleteResponse deleteReservation(\n       ReservationDeleteRequest request) throws YarnException, IOException {\n     // Check if reservation system is enabled\n-    checkReservationSystem(AuditConstants.DELETE_RESERVATION_REQUEST);\n+    checkReservationSystem();\n     ReservationDeleteResponse response \u003d\n         recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n     // Validate the input\n     Plan plan \u003d\n         rValidator.validateReservationDeleteRequest(reservationSystem, request);\n     ReservationId reservationId \u003d request.getReservationId();\n     String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n     // Check ACLs\n     String user \u003d\n         checkReservationACLs(queueName,\n             AuditConstants.DELETE_RESERVATION_REQUEST, reservationId);\n     // Try to update the reservation using default agent\n     try {\n       boolean result \u003d\n           plan.getReservationAgent().deleteReservation(reservationId, user,\n               plan);\n       if (!result) {\n         String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n         RMAuditLogger.logFailure(user,\n             AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n             \"ClientRMService\", errMsg);\n         throw RPCUtil.getRemoteException(errMsg);\n       }\n     } catch (PlanningException e) {\n       RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Unable to delete the reservation: \" + reservationId);\n       throw RPCUtil.getRemoteException(e);\n     }\n     RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n         \"ClientRMService: \" + reservationId);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationDeleteResponse deleteReservation(\n      ReservationDeleteRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSystem();\n    ReservationDeleteResponse response \u003d\n        recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationDeleteRequest(reservationSystem, request);\n    ReservationId reservationId \u003d request.getReservationId();\n    String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n    // Check ACLs\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.DELETE_RESERVATION_REQUEST, reservationId);\n    // Try to update the reservation using default agent\n    try {\n      boolean result \u003d\n          plan.getReservationAgent().deleteReservation(reservationId, user,\n              plan);\n      if (!result) {\n        String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n        RMAuditLogger.logFailure(user,\n            AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n            \"ClientRMService\", errMsg);\n        throw RPCUtil.getRemoteException(errMsg);\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to delete the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public ReservationDeleteResponse deleteReservation(\n       ReservationDeleteRequest request) throws YarnException, IOException {\n     // Check if reservation system is enabled\n-    checkReservationSytem(AuditConstants.DELETE_RESERVATION_REQUEST);\n+    checkReservationSystem(AuditConstants.DELETE_RESERVATION_REQUEST);\n     ReservationDeleteResponse response \u003d\n         recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n     // Validate the input\n     Plan plan \u003d\n         rValidator.validateReservationDeleteRequest(reservationSystem, request);\n     ReservationId reservationId \u003d request.getReservationId();\n     String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n     // Check ACLs\n     String user \u003d\n         checkReservationACLs(queueName,\n             AuditConstants.DELETE_RESERVATION_REQUEST, reservationId);\n     // Try to update the reservation using default agent\n     try {\n       boolean result \u003d\n           plan.getReservationAgent().deleteReservation(reservationId, user,\n               plan);\n       if (!result) {\n         String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n         RMAuditLogger.logFailure(user,\n             AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n             \"ClientRMService\", errMsg);\n         throw RPCUtil.getRemoteException(errMsg);\n       }\n     } catch (PlanningException e) {\n       RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Unable to delete the reservation: \" + reservationId);\n       throw RPCUtil.getRemoteException(e);\n     }\n     RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n         \"ClientRMService: \" + reservationId);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationDeleteResponse deleteReservation(\n      ReservationDeleteRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSystem(AuditConstants.DELETE_RESERVATION_REQUEST);\n    ReservationDeleteResponse response \u003d\n        recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationDeleteRequest(reservationSystem, request);\n    ReservationId reservationId \u003d request.getReservationId();\n    String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n    // Check ACLs\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.DELETE_RESERVATION_REQUEST, reservationId);\n    // Try to update the reservation using default agent\n    try {\n      boolean result \u003d\n          plan.getReservationAgent().deleteReservation(reservationId, user,\n              plan);\n      if (!result) {\n        String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n        RMAuditLogger.logFailure(user,\n            AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n            \"ClientRMService\", errMsg);\n        throw RPCUtil.getRemoteException(errMsg);\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to delete the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "23f937e3b718f607d4fc975610ab3a03265f0f7e": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2575. Create separate ACLs for Reservation create/update/delete/list ops (Sean Po via asuresh)\n",
      "commitDate": "11/02/16 10:47 AM",
      "commitName": "23f937e3b718f607d4fc975610ab3a03265f0f7e",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "01/02/16 6:17 PM",
      "commitNameOld": "9875325d5c63f343809907d06bf48a298035a611",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.69,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public ReservationDeleteResponse deleteReservation(\n       ReservationDeleteRequest request) throws YarnException, IOException {\n     // Check if reservation system is enabled\n     checkReservationSytem(AuditConstants.DELETE_RESERVATION_REQUEST);\n     ReservationDeleteResponse response \u003d\n         recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n     // Validate the input\n     Plan plan \u003d\n         rValidator.validateReservationDeleteRequest(reservationSystem, request);\n     ReservationId reservationId \u003d request.getReservationId();\n     String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n     // Check ACLs\n     String user \u003d\n         checkReservationACLs(queueName,\n-            AuditConstants.DELETE_RESERVATION_REQUEST);\n+            AuditConstants.DELETE_RESERVATION_REQUEST, reservationId);\n     // Try to update the reservation using default agent\n     try {\n       boolean result \u003d\n           plan.getReservationAgent().deleteReservation(reservationId, user,\n               plan);\n       if (!result) {\n         String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n         RMAuditLogger.logFailure(user,\n             AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n             \"ClientRMService\", errMsg);\n         throw RPCUtil.getRemoteException(errMsg);\n       }\n     } catch (PlanningException e) {\n       RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n           e.getMessage(), \"ClientRMService\",\n           \"Unable to delete the reservation: \" + reservationId);\n       throw RPCUtil.getRemoteException(e);\n     }\n     RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n         \"ClientRMService: \" + reservationId);\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationDeleteResponse deleteReservation(\n      ReservationDeleteRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.DELETE_RESERVATION_REQUEST);\n    ReservationDeleteResponse response \u003d\n        recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationDeleteRequest(reservationSystem, request);\n    ReservationId reservationId \u003d request.getReservationId();\n    String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n    // Check ACLs\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.DELETE_RESERVATION_REQUEST, reservationId);\n    // Try to update the reservation using default agent\n    try {\n      boolean result \u003d\n          plan.getReservationAgent().deleteReservation(reservationId, user,\n              plan);\n      if (!result) {\n        String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n        RMAuditLogger.logFailure(user,\n            AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n            \"ClientRMService\", errMsg);\n        throw RPCUtil.getRemoteException(errMsg);\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to delete the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2080. Integrating reservation system with ResourceManager and client-RM protocol. Contributed by Subru Krishnan and Carlo Curino.\n(cherry picked from commit 8baeaead8532898163f1006276b731a237b1a559)\n\nConflicts:\n\thadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/rmapp/RMAppImpl.java\n",
      "commitDate": "03/10/14 3:42 PM",
      "commitName": "6261f7cc69a0eb3eebc9898c7599c7c20f432b4e",
      "commitAuthor": "subru",
      "diff": "@@ -0,0 +1,37 @@\n+  public ReservationDeleteResponse deleteReservation(\n+      ReservationDeleteRequest request) throws YarnException, IOException {\n+    // Check if reservation system is enabled\n+    checkReservationSytem(AuditConstants.DELETE_RESERVATION_REQUEST);\n+    ReservationDeleteResponse response \u003d\n+        recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n+    // Validate the input\n+    Plan plan \u003d\n+        rValidator.validateReservationDeleteRequest(reservationSystem, request);\n+    ReservationId reservationId \u003d request.getReservationId();\n+    String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n+    // Check ACLs\n+    String user \u003d\n+        checkReservationACLs(queueName,\n+            AuditConstants.DELETE_RESERVATION_REQUEST);\n+    // Try to update the reservation using default agent\n+    try {\n+      boolean result \u003d\n+          plan.getReservationAgent().deleteReservation(reservationId, user,\n+              plan);\n+      if (!result) {\n+        String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n+        RMAuditLogger.logFailure(user,\n+            AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n+            \"ClientRMService\", errMsg);\n+        throw RPCUtil.getRemoteException(errMsg);\n+      }\n+    } catch (PlanningException e) {\n+      RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n+          e.getMessage(), \"ClientRMService\",\n+          \"Unable to delete the reservation: \" + reservationId);\n+      throw RPCUtil.getRemoteException(e);\n+    }\n+    RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n+        \"ClientRMService: \" + reservationId);\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ReservationDeleteResponse deleteReservation(\n      ReservationDeleteRequest request) throws YarnException, IOException {\n    // Check if reservation system is enabled\n    checkReservationSytem(AuditConstants.DELETE_RESERVATION_REQUEST);\n    ReservationDeleteResponse response \u003d\n        recordFactory.newRecordInstance(ReservationDeleteResponse.class);\n    // Validate the input\n    Plan plan \u003d\n        rValidator.validateReservationDeleteRequest(reservationSystem, request);\n    ReservationId reservationId \u003d request.getReservationId();\n    String queueName \u003d reservationSystem.getQueueForReservation(reservationId);\n    // Check ACLs\n    String user \u003d\n        checkReservationACLs(queueName,\n            AuditConstants.DELETE_RESERVATION_REQUEST);\n    // Try to update the reservation using default agent\n    try {\n      boolean result \u003d\n          plan.getReservationAgent().deleteReservation(reservationId, user,\n              plan);\n      if (!result) {\n        String errMsg \u003d \"Could not delete reservation: \" + reservationId;\n        RMAuditLogger.logFailure(user,\n            AuditConstants.DELETE_RESERVATION_REQUEST, errMsg,\n            \"ClientRMService\", errMsg);\n        throw RPCUtil.getRemoteException(errMsg);\n      }\n    } catch (PlanningException e) {\n      RMAuditLogger.logFailure(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n          e.getMessage(), \"ClientRMService\",\n          \"Unable to delete the reservation: \" + reservationId);\n      throw RPCUtil.getRemoteException(e);\n    }\n    RMAuditLogger.logSuccess(user, AuditConstants.DELETE_RESERVATION_REQUEST,\n        \"ClientRMService: \" + reservationId);\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}