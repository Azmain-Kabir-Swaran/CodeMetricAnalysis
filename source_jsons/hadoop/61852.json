{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DockerClientConfigHandler.java",
  "functionName": "readCredentialsFromConfigFile",
  "functionId": "readCredentialsFromConfigFile___configFile-Path__conf-Configuration__applicationId-String",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
  "functionStartLine": 81,
  "functionEndLine": 126,
  "numCommitsSeen": 6,
  "timeTaken": 1650,
  "changeHistory": [
    "914d6b5cb143f4f9cadd9d689ea4e278383a6779",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
    "eb2449d5398e9ac869bc088e10d838a7f13deac0"
  ],
  "changeHistoryShort": {
    "914d6b5cb143f4f9cadd9d689ea4e278383a6779": "Ybodychange",
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": "Ybodychange",
    "eb2449d5398e9ac869bc088e10d838a7f13deac0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "914d6b5cb143f4f9cadd9d689ea4e278383a6779": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8208. Add log statement for Docker client configuration file at INFO level. Contributed by Yesha Vora\n",
      "commitDate": "27/04/18 6:10 AM",
      "commitName": "914d6b5cb143f4f9cadd9d689ea4e278383a6779",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "17/04/18 6:57 AM",
      "commitNameOld": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 9.97,
      "commitsBetweenForRepo": 579,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,46 @@\n   public static Credentials readCredentialsFromConfigFile(Path configFile,\n       Configuration conf, String applicationId) throws IOException {\n     // Read the config file\n     String contents \u003d null;\n     configFile \u003d new Path(configFile.toUri());\n     FileSystem fs \u003d configFile.getFileSystem(conf);\n     if (fs !\u003d null) {\n       FSDataInputStream fileHandle \u003d fs.open(configFile);\n       if (fileHandle !\u003d null) {\n         contents \u003d IOUtils.toString(fileHandle);\n       }\n     }\n     if (contents \u003d\u003d null) {\n       throw new IOException(\"Failed to read Docker client configuration: \"\n           + configFile);\n     }\n \n     // Parse the JSON and create the Tokens/Credentials.\n     ObjectMapper mapper \u003d new ObjectMapper();\n     JsonFactory factory \u003d mapper.getJsonFactory();\n     JsonParser parser \u003d factory.createJsonParser(contents);\n     JsonNode rootNode \u003d mapper.readTree(parser);\n \n     Credentials credentials \u003d new Credentials();\n     if (rootNode.has(CONFIG_AUTHS_KEY)) {\n       Iterator\u003cString\u003e iter \u003d rootNode.get(CONFIG_AUTHS_KEY).getFieldNames();\n       for (; iter.hasNext();) {\n         String registryUrl \u003d iter.next();\n         String registryCred \u003d rootNode.get(CONFIG_AUTHS_KEY)\n             .get(registryUrl)\n             .get(CONFIG_AUTH_KEY)\n             .asText();\n         TokenIdentifier tokenId \u003d\n             new DockerCredentialTokenIdentifier(registryUrl, applicationId);\n         Token\u003cDockerCredentialTokenIdentifier\u003e token \u003d\n             new Token\u003c\u003e(tokenId.getBytes(),\n                 registryCred.getBytes(Charset.forName(\"UTF-8\")),\n                 tokenId.getKind(), new Text(registryUrl));\n         credentials.addToken(\n             new Text(registryUrl + \"-\" + applicationId), token);\n-        if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Token read from Docker client configuration file: \"\n-              + token.toString());\n-        }\n+        LOG.info(\"Token read from Docker client configuration file: \"\n+                + token.toString());\n       }\n     }\n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Credentials readCredentialsFromConfigFile(Path configFile,\n      Configuration conf, String applicationId) throws IOException {\n    // Read the config file\n    String contents \u003d null;\n    configFile \u003d new Path(configFile.toUri());\n    FileSystem fs \u003d configFile.getFileSystem(conf);\n    if (fs !\u003d null) {\n      FSDataInputStream fileHandle \u003d fs.open(configFile);\n      if (fileHandle !\u003d null) {\n        contents \u003d IOUtils.toString(fileHandle);\n      }\n    }\n    if (contents \u003d\u003d null) {\n      throw new IOException(\"Failed to read Docker client configuration: \"\n          + configFile);\n    }\n\n    // Parse the JSON and create the Tokens/Credentials.\n    ObjectMapper mapper \u003d new ObjectMapper();\n    JsonFactory factory \u003d mapper.getJsonFactory();\n    JsonParser parser \u003d factory.createJsonParser(contents);\n    JsonNode rootNode \u003d mapper.readTree(parser);\n\n    Credentials credentials \u003d new Credentials();\n    if (rootNode.has(CONFIG_AUTHS_KEY)) {\n      Iterator\u003cString\u003e iter \u003d rootNode.get(CONFIG_AUTHS_KEY).getFieldNames();\n      for (; iter.hasNext();) {\n        String registryUrl \u003d iter.next();\n        String registryCred \u003d rootNode.get(CONFIG_AUTHS_KEY)\n            .get(registryUrl)\n            .get(CONFIG_AUTH_KEY)\n            .asText();\n        TokenIdentifier tokenId \u003d\n            new DockerCredentialTokenIdentifier(registryUrl, applicationId);\n        Token\u003cDockerCredentialTokenIdentifier\u003e token \u003d\n            new Token\u003c\u003e(tokenId.getBytes(),\n                registryCred.getBytes(Charset.forName(\"UTF-8\")),\n                tokenId.getKind(), new Text(registryUrl));\n        credentials.addToken(\n            new Text(registryUrl + \"-\" + applicationId), token);\n        LOG.info(\"Token read from Docker client configuration file: \"\n                + token.toString());\n      }\n    }\n    return credentials;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
      "extendedDetails": {}
    },
    "1d6e43da51aaaab522325bdbe4b51e58934e03f1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7996. Allow user supplied Docker client configurations with YARN native services. Contributed by Shane Kumpf\n",
      "commitDate": "17/04/18 6:57 AM",
      "commitName": "1d6e43da51aaaab522325bdbe4b51e58934e03f1",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "15/03/18 12:12 AM",
      "commitNameOld": "5e013d50d1a98d37accf8c6b07b14254ad4f3639",
      "commitAuthorOld": "fang zhenyi",
      "daysBetweenCommits": 33.28,
      "commitsBetweenForRepo": 330,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,48 @@\n   public static Credentials readCredentialsFromConfigFile(Path configFile,\n       Configuration conf, String applicationId) throws IOException {\n     // Read the config file\n     String contents \u003d null;\n     configFile \u003d new Path(configFile.toUri());\n     FileSystem fs \u003d configFile.getFileSystem(conf);\n     if (fs !\u003d null) {\n       FSDataInputStream fileHandle \u003d fs.open(configFile);\n       if (fileHandle !\u003d null) {\n         contents \u003d IOUtils.toString(fileHandle);\n       }\n     }\n     if (contents \u003d\u003d null) {\n       throw new IOException(\"Failed to read Docker client configuration: \"\n           + configFile);\n     }\n \n     // Parse the JSON and create the Tokens/Credentials.\n     ObjectMapper mapper \u003d new ObjectMapper();\n     JsonFactory factory \u003d mapper.getJsonFactory();\n     JsonParser parser \u003d factory.createJsonParser(contents);\n     JsonNode rootNode \u003d mapper.readTree(parser);\n \n     Credentials credentials \u003d new Credentials();\n     if (rootNode.has(CONFIG_AUTHS_KEY)) {\n       Iterator\u003cString\u003e iter \u003d rootNode.get(CONFIG_AUTHS_KEY).getFieldNames();\n       for (; iter.hasNext();) {\n         String registryUrl \u003d iter.next();\n         String registryCred \u003d rootNode.get(CONFIG_AUTHS_KEY)\n             .get(registryUrl)\n             .get(CONFIG_AUTH_KEY)\n             .asText();\n         TokenIdentifier tokenId \u003d\n             new DockerCredentialTokenIdentifier(registryUrl, applicationId);\n         Token\u003cDockerCredentialTokenIdentifier\u003e token \u003d\n             new Token\u003c\u003e(tokenId.getBytes(),\n                 registryCred.getBytes(Charset.forName(\"UTF-8\")),\n                 tokenId.getKind(), new Text(registryUrl));\n         credentials.addToken(\n             new Text(registryUrl + \"-\" + applicationId), token);\n         if (LOG.isDebugEnabled()) {\n-          LOG.debug(\"Added token: \" + token.toString());\n+          LOG.debug(\"Token read from Docker client configuration file: \"\n+              + token.toString());\n         }\n       }\n     }\n     return credentials;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static Credentials readCredentialsFromConfigFile(Path configFile,\n      Configuration conf, String applicationId) throws IOException {\n    // Read the config file\n    String contents \u003d null;\n    configFile \u003d new Path(configFile.toUri());\n    FileSystem fs \u003d configFile.getFileSystem(conf);\n    if (fs !\u003d null) {\n      FSDataInputStream fileHandle \u003d fs.open(configFile);\n      if (fileHandle !\u003d null) {\n        contents \u003d IOUtils.toString(fileHandle);\n      }\n    }\n    if (contents \u003d\u003d null) {\n      throw new IOException(\"Failed to read Docker client configuration: \"\n          + configFile);\n    }\n\n    // Parse the JSON and create the Tokens/Credentials.\n    ObjectMapper mapper \u003d new ObjectMapper();\n    JsonFactory factory \u003d mapper.getJsonFactory();\n    JsonParser parser \u003d factory.createJsonParser(contents);\n    JsonNode rootNode \u003d mapper.readTree(parser);\n\n    Credentials credentials \u003d new Credentials();\n    if (rootNode.has(CONFIG_AUTHS_KEY)) {\n      Iterator\u003cString\u003e iter \u003d rootNode.get(CONFIG_AUTHS_KEY).getFieldNames();\n      for (; iter.hasNext();) {\n        String registryUrl \u003d iter.next();\n        String registryCred \u003d rootNode.get(CONFIG_AUTHS_KEY)\n            .get(registryUrl)\n            .get(CONFIG_AUTH_KEY)\n            .asText();\n        TokenIdentifier tokenId \u003d\n            new DockerCredentialTokenIdentifier(registryUrl, applicationId);\n        Token\u003cDockerCredentialTokenIdentifier\u003e token \u003d\n            new Token\u003c\u003e(tokenId.getBytes(),\n                registryCred.getBytes(Charset.forName(\"UTF-8\")),\n                tokenId.getKind(), new Text(registryUrl));\n        credentials.addToken(\n            new Text(registryUrl + \"-\" + applicationId), token);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Token read from Docker client configuration file: \"\n              + token.toString());\n        }\n      }\n    }\n    return credentials;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java",
      "extendedDetails": {}
    },
    "eb2449d5398e9ac869bc088e10d838a7f13deac0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5428. Allow for specifying the docker client configuration directory. Contributed by Shane Kumpf\n",
      "commitDate": "08/02/18 11:35 AM",
      "commitName": "eb2449d5398e9ac869bc088e10d838a7f13deac0",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,47 @@\n+  public static Credentials readCredentialsFromConfigFile(Path configFile,\n+      Configuration conf, String applicationId) throws IOException {\n+    // Read the config file\n+    String contents \u003d null;\n+    configFile \u003d new Path(configFile.toUri());\n+    FileSystem fs \u003d configFile.getFileSystem(conf);\n+    if (fs !\u003d null) {\n+      FSDataInputStream fileHandle \u003d fs.open(configFile);\n+      if (fileHandle !\u003d null) {\n+        contents \u003d IOUtils.toString(fileHandle);\n+      }\n+    }\n+    if (contents \u003d\u003d null) {\n+      throw new IOException(\"Failed to read Docker client configuration: \"\n+          + configFile);\n+    }\n+\n+    // Parse the JSON and create the Tokens/Credentials.\n+    ObjectMapper mapper \u003d new ObjectMapper();\n+    JsonFactory factory \u003d mapper.getJsonFactory();\n+    JsonParser parser \u003d factory.createJsonParser(contents);\n+    JsonNode rootNode \u003d mapper.readTree(parser);\n+\n+    Credentials credentials \u003d new Credentials();\n+    if (rootNode.has(CONFIG_AUTHS_KEY)) {\n+      Iterator\u003cString\u003e iter \u003d rootNode.get(CONFIG_AUTHS_KEY).getFieldNames();\n+      for (; iter.hasNext();) {\n+        String registryUrl \u003d iter.next();\n+        String registryCred \u003d rootNode.get(CONFIG_AUTHS_KEY)\n+            .get(registryUrl)\n+            .get(CONFIG_AUTH_KEY)\n+            .asText();\n+        TokenIdentifier tokenId \u003d\n+            new DockerCredentialTokenIdentifier(registryUrl, applicationId);\n+        Token\u003cDockerCredentialTokenIdentifier\u003e token \u003d\n+            new Token\u003c\u003e(tokenId.getBytes(),\n+                registryCred.getBytes(Charset.forName(\"UTF-8\")),\n+                tokenId.getKind(), new Text(registryUrl));\n+        credentials.addToken(\n+            new Text(registryUrl + \"-\" + applicationId), token);\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\"Added token: \" + token.toString());\n+        }\n+      }\n+    }\n+    return credentials;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static Credentials readCredentialsFromConfigFile(Path configFile,\n      Configuration conf, String applicationId) throws IOException {\n    // Read the config file\n    String contents \u003d null;\n    configFile \u003d new Path(configFile.toUri());\n    FileSystem fs \u003d configFile.getFileSystem(conf);\n    if (fs !\u003d null) {\n      FSDataInputStream fileHandle \u003d fs.open(configFile);\n      if (fileHandle !\u003d null) {\n        contents \u003d IOUtils.toString(fileHandle);\n      }\n    }\n    if (contents \u003d\u003d null) {\n      throw new IOException(\"Failed to read Docker client configuration: \"\n          + configFile);\n    }\n\n    // Parse the JSON and create the Tokens/Credentials.\n    ObjectMapper mapper \u003d new ObjectMapper();\n    JsonFactory factory \u003d mapper.getJsonFactory();\n    JsonParser parser \u003d factory.createJsonParser(contents);\n    JsonNode rootNode \u003d mapper.readTree(parser);\n\n    Credentials credentials \u003d new Credentials();\n    if (rootNode.has(CONFIG_AUTHS_KEY)) {\n      Iterator\u003cString\u003e iter \u003d rootNode.get(CONFIG_AUTHS_KEY).getFieldNames();\n      for (; iter.hasNext();) {\n        String registryUrl \u003d iter.next();\n        String registryCred \u003d rootNode.get(CONFIG_AUTHS_KEY)\n            .get(registryUrl)\n            .get(CONFIG_AUTH_KEY)\n            .asText();\n        TokenIdentifier tokenId \u003d\n            new DockerCredentialTokenIdentifier(registryUrl, applicationId);\n        Token\u003cDockerCredentialTokenIdentifier\u003e token \u003d\n            new Token\u003c\u003e(tokenId.getBytes(),\n                registryCred.getBytes(Charset.forName(\"UTF-8\")),\n                tokenId.getKind(), new Text(registryUrl));\n        credentials.addToken(\n            new Text(registryUrl + \"-\" + applicationId), token);\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Added token: \" + token.toString());\n        }\n      }\n    }\n    return credentials;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/util/DockerClientConfigHandler.java"
    }
  }
}