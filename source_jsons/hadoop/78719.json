{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ViewFileSystemOverloadScheme.java",
  "functionName": "get",
  "functionId": "get___uri-URI__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java",
  "functionStartLine": 175,
  "functionEndLine": 191,
  "numCommitsSeen": 2,
  "timeTaken": 1316,
  "changeHistory": [
    "ac4a2e11d98827c7926a34cda27aa7bcfd3f36c1",
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe"
  ],
  "changeHistoryShort": {
    "ac4a2e11d98827c7926a34cda27aa7bcfd3f36c1": "Ybodychange",
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ac4a2e11d98827c7926a34cda27aa7bcfd3f36c1": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15306. Make mount-table to read from central place ( Let\u0027s say from HDFS). Contributed by Uma Maheswara Rao G.\n\n",
      "commitDate": "14/05/20 5:29 PM",
      "commitName": "ac4a2e11d98827c7926a34cda27aa7bcfd3f36c1",
      "commitAuthor": "Uma Maheswara Rao G",
      "commitDateOld": "04/05/20 5:55 PM",
      "commitNameOld": "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe",
      "commitAuthorOld": "Uma Maheswara Rao G",
      "daysBetweenCommits": 9.98,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,17 @@\n-      public FileSystem get(URI uri, Configuration conf) throws IOException {\n-        if (uri.getScheme().equals(getScheme())) {\n-          // Avoid looping when target fs scheme is matching to overloaded\n-          // scheme.\n-          if (LOG.isDebugEnabled()) {\n-            LOG.debug(\n-                \"The file system initialized uri scheme is matching with the \"\n-                    + \"given target uri scheme. So, the target file system \"\n-                    + \"instances will not be cached. To cache fs instances, \"\n-                    + \"please set fs.viewfs.enable.inner.cache to true. \"\n-                    + \"The target uri is: \" + uri);\n-          }\n-          return createFileSystem(uri, conf);\n-        } else {\n-          return FileSystem.get(uri, conf);\n+    public FileSystem get(URI uri, Configuration conf) throws IOException {\n+      if (uri.getScheme().equals(this.rootScheme)) {\n+        // Avoid looping when target fs scheme is matching to overloaded\n+        // scheme.\n+        if (LOG.isDebugEnabled()) {\n+          LOG.debug(\n+              \"The file system initialized uri scheme is matching with the \"\n+                  + \"given target uri scheme. So, the target file system \"\n+                  + \"instances will not be cached. To cache fs instances, \"\n+                  + \"please set fs.viewfs.enable.inner.cache to true. \"\n+                  + \"The target uri is: \" + uri);\n         }\n-      }\n\\ No newline at end of file\n+        return createFileSystem(uri, conf);\n+      } else {\n+        return FileSystem.get(uri, conf);\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public FileSystem get(URI uri, Configuration conf) throws IOException {\n      if (uri.getScheme().equals(this.rootScheme)) {\n        // Avoid looping when target fs scheme is matching to overloaded\n        // scheme.\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\n              \"The file system initialized uri scheme is matching with the \"\n                  + \"given target uri scheme. So, the target file system \"\n                  + \"instances will not be cached. To cache fs instances, \"\n                  + \"please set fs.viewfs.enable.inner.cache to true. \"\n                  + \"The target uri is: \" + uri);\n        }\n        return createFileSystem(uri, conf);\n      } else {\n        return FileSystem.get(uri, conf);\n      }\n    }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java",
      "extendedDetails": {}
    },
    "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-15305. Extend ViewFS and provide ViewFileSystemOverloadScheme implementation with scheme configurable. Contributed by Uma Maheswara Rao G.\n\n",
      "commitDate": "04/05/20 5:55 PM",
      "commitName": "9c8236d04dfc3d4cefe7a00b63625f60ee232cfe",
      "commitAuthor": "Uma Maheswara Rao G",
      "diff": "@@ -0,0 +1,17 @@\n+      public FileSystem get(URI uri, Configuration conf) throws IOException {\n+        if (uri.getScheme().equals(getScheme())) {\n+          // Avoid looping when target fs scheme is matching to overloaded\n+          // scheme.\n+          if (LOG.isDebugEnabled()) {\n+            LOG.debug(\n+                \"The file system initialized uri scheme is matching with the \"\n+                    + \"given target uri scheme. So, the target file system \"\n+                    + \"instances will not be cached. To cache fs instances, \"\n+                    + \"please set fs.viewfs.enable.inner.cache to true. \"\n+                    + \"The target uri is: \" + uri);\n+          }\n+          return createFileSystem(uri, conf);\n+        } else {\n+          return FileSystem.get(uri, conf);\n+        }\n+      }\n\\ No newline at end of file\n",
      "actualSource": "      public FileSystem get(URI uri, Configuration conf) throws IOException {\n        if (uri.getScheme().equals(getScheme())) {\n          // Avoid looping when target fs scheme is matching to overloaded\n          // scheme.\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\n                \"The file system initialized uri scheme is matching with the \"\n                    + \"given target uri scheme. So, the target file system \"\n                    + \"instances will not be cached. To cache fs instances, \"\n                    + \"please set fs.viewfs.enable.inner.cache to true. \"\n                    + \"The target uri is: \" + uri);\n          }\n          return createFileSystem(uri, conf);\n        } else {\n          return FileSystem.get(uri, conf);\n        }\n      }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/viewfs/ViewFileSystemOverloadScheme.java"
    }
  }
}