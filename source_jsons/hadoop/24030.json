{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "LocalJobRunner.java",
  "functionName": "runTasks",
  "functionId": "runTasks___runnables-List__RunnableWithThrowable____service-ExecutorService__taskType-String",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalJobRunner.java",
  "functionStartLine": 465,
  "functionEndLine": 495,
  "numCommitsSeen": 17,
  "timeTaken": 1136,
  "changeHistory": [
    "0cb2fdc3b4fbbaa6153b6421a63082dc006f8eb4"
  ],
  "changeHistoryShort": {
    "0cb2fdc3b4fbbaa6153b6421a63082dc006f8eb4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0cb2fdc3b4fbbaa6153b6421a63082dc006f8eb4": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-434. LocalJobRunner limited to single reducer (Sandy Ryza and Aaron Kimball via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1510866 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/08/13 11:36 PM",
      "commitName": "0cb2fdc3b4fbbaa6153b6421a63082dc006f8eb4",
      "commitAuthor": "Sanford Ryza",
      "diff": "@@ -0,0 +1,31 @@\n+    private void runTasks(List\u003cRunnableWithThrowable\u003e runnables,\n+        ExecutorService service, String taskType) throws Exception {\n+      // Start populating the executor with work units.\n+      // They may begin running immediately (in other threads).\n+      for (Runnable r : runnables) {\n+        service.submit(r);\n+      }\n+\n+      try {\n+        service.shutdown(); // Instructs queue to drain.\n+\n+        // Wait for tasks to finish; do not use a time-based timeout.\n+        // (See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d6179024)\n+        LOG.info(\"Waiting for \" + taskType + \" tasks\");\n+        service.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n+      } catch (InterruptedException ie) {\n+        // Cancel all threads.\n+        service.shutdownNow();\n+        throw ie;\n+      }\n+\n+      LOG.info(taskType + \" task executor complete.\");\n+\n+      // After waiting for the tasks to complete, if any of these\n+      // have thrown an exception, rethrow it now in the main thread context.\n+      for (RunnableWithThrowable r : runnables) {\n+        if (r.storedException !\u003d null) {\n+          throw new Exception(r.storedException);\n+        }\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private void runTasks(List\u003cRunnableWithThrowable\u003e runnables,\n        ExecutorService service, String taskType) throws Exception {\n      // Start populating the executor with work units.\n      // They may begin running immediately (in other threads).\n      for (Runnable r : runnables) {\n        service.submit(r);\n      }\n\n      try {\n        service.shutdown(); // Instructs queue to drain.\n\n        // Wait for tasks to finish; do not use a time-based timeout.\n        // (See http://bugs.sun.com/bugdatabase/view_bug.do?bug_id\u003d6179024)\n        LOG.info(\"Waiting for \" + taskType + \" tasks\");\n        service.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);\n      } catch (InterruptedException ie) {\n        // Cancel all threads.\n        service.shutdownNow();\n        throw ie;\n      }\n\n      LOG.info(taskType + \" task executor complete.\");\n\n      // After waiting for the tasks to complete, if any of these\n      // have thrown an exception, rethrow it now in the main thread context.\n      for (RunnableWithThrowable r : runnables) {\n        if (r.storedException !\u003d null) {\n          throw new Exception(r.storedException);\n        }\n      }\n    }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-common/src/main/java/org/apache/hadoop/mapred/LocalJobRunner.java"
    }
  }
}