{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ClientRMService.java",
  "functionName": "getContainerReport",
  "functionId": "getContainerReport___request-GetContainerReportRequest",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
  "functionStartLine": 509,
  "functionEndLine": 542,
  "numCommitsSeen": 128,
  "timeTaken": 4009,
  "changeHistory": [
    "cffea251be4b73ca16e5e11f0be2d22651330f73",
    "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
    "1bbd023275db535ab80fcb60e022151e9679d468",
    "8f58f742aea87b2b46b9741ffeaebfa36af3573f",
    "18b2507edaac991e3ed68d2f27eb96f6882137b9",
    "6af044bb75fe3ddf184841483cce5e222ad1853a"
  ],
  "changeHistoryShort": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": "Ybodychange",
    "e0bb867c3fa638c9f689ee0b044b400481cf02b5": "Ybodychange",
    "1bbd023275db535ab80fcb60e022151e9679d468": "Ybodychange",
    "8f58f742aea87b2b46b9741ffeaebfa36af3573f": "Ybodychange",
    "18b2507edaac991e3ed68d2f27eb96f6882137b9": "Ybodychange",
    "6af044bb75fe3ddf184841483cce5e222ad1853a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cffea251be4b73ca16e5e11f0be2d22651330f73": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5956. Refactor ClientRMService for unify error handling across apis. Contributed by Kai Sasaki.\n",
      "commitDate": "25/03/17 9:56 AM",
      "commitName": "cffea251be4b73ca16e5e11f0be2d22651330f73",
      "commitAuthor": "Sunil G",
      "commitDateOld": "28/02/17 11:04 AM",
      "commitNameOld": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 24.91,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,34 @@\n   public GetContainerReportResponse getContainerReport(\n       GetContainerReportRequest request) throws YarnException, IOException {\n     ContainerId containerId \u003d request.getContainerId();\n     ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n     ApplicationId appId \u003d appAttemptId.getApplicationId();\n-    UserGroupInformation callerUGI;\n-    try {\n-      callerUGI \u003d UserGroupInformation.getCurrentUser();\n-    } catch (IOException ie) {\n-      LOG.info(\"Error getting UGI \", ie);\n-      throw RPCUtil.getRemoteException(ie);\n-    }\n-    RMApp application \u003d this.rmContext.getRMApps().get(appId);\n-    if (application \u003d\u003d null) {\n-      // If the RM doesn\u0027t have the application, throw\n-      // ApplicationNotFoundException and let client to handle.\n-      throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n-          + \"\u0027 doesn\u0027t exist in RM. Please check that the job submission \"\n-          + \"was successful.\");\n-    }\n+    UserGroupInformation callerUGI \u003d getCallerUgi(appId,\n+        AuditConstants.GET_CONTAINER_REPORT);\n+    RMApp application \u003d verifyUserAccessForRMApp(appId, callerUGI,\n+        AuditConstants.GET_CONTAINER_REPORT, ApplicationAccessType.VIEW_APP,\n+        false);\n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, application);\n     GetContainerReportResponse response \u003d null;\n     if (allowAccess) {\n       RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n       if (appAttempt \u003d\u003d null) {\n         throw new ApplicationAttemptNotFoundException(\n             \"ApplicationAttempt with id \u0027\" + appAttemptId +\n             \"\u0027 doesn\u0027t exist in RM.\");\n       }\n-      RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n+      RMContainer rmContainer \u003d this.rmContext.getScheduler().getRMContainer(\n           containerId);\n-      if (rmConatiner \u003d\u003d null) {\n+      if (rmContainer \u003d\u003d null) {\n         throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n             + \"\u0027 doesn\u0027t exist in RM.\");\n       }\n-      response \u003d GetContainerReportResponse.newInstance(rmConatiner\n+      response \u003d GetContainerReportResponse.newInstance(rmContainer\n           .createContainerReport());\n     } else {\n       throw new YarnException(\"User \" + callerUGI.getShortUserName()\n           + \" does not have privilege to see this application \" + appId);\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetContainerReportResponse getContainerReport(\n      GetContainerReportRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n    ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n    ApplicationId appId \u003d appAttemptId.getApplicationId();\n    UserGroupInformation callerUGI \u003d getCallerUgi(appId,\n        AuditConstants.GET_CONTAINER_REPORT);\n    RMApp application \u003d verifyUserAccessForRMApp(appId, callerUGI,\n        AuditConstants.GET_CONTAINER_REPORT, ApplicationAccessType.VIEW_APP,\n        false);\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    GetContainerReportResponse response \u003d null;\n    if (allowAccess) {\n      RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n      if (appAttempt \u003d\u003d null) {\n        throw new ApplicationAttemptNotFoundException(\n            \"ApplicationAttempt with id \u0027\" + appAttemptId +\n            \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      RMContainer rmContainer \u003d this.rmContext.getScheduler().getRMContainer(\n          containerId);\n      if (rmContainer \u003d\u003d null) {\n        throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n            + \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      response \u003d GetContainerReportResponse.newInstance(rmContainer\n          .createContainerReport());\n    } else {\n      throw new YarnException(\"User \" + callerUGI.getShortUserName()\n          + \" does not have privilege to see this application \" + appId);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "e0bb867c3fa638c9f689ee0b044b400481cf02b5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6189: Improve application status log message when RM restarted when\napp is in NEW state. Contributed by Junping Du\n",
      "commitDate": "28/02/17 11:04 AM",
      "commitName": "e0bb867c3fa638c9f689ee0b044b400481cf02b5",
      "commitAuthor": "Xuan",
      "commitDateOld": "23/02/17 12:49 AM",
      "commitNameOld": "a207aa9930e7ee4f10228e2db4b4e733794eb8ea",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 5.43,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   public GetContainerReportResponse getContainerReport(\n       GetContainerReportRequest request) throws YarnException, IOException {\n     ContainerId containerId \u003d request.getContainerId();\n     ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n     ApplicationId appId \u003d appAttemptId.getApplicationId();\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n     RMApp application \u003d this.rmContext.getRMApps().get(appId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n-          + \"\u0027 doesn\u0027t exist in RM.\");\n+          + \"\u0027 doesn\u0027t exist in RM. Please check that the job submission \"\n+          + \"was successful.\");\n     }\n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, application);\n     GetContainerReportResponse response \u003d null;\n     if (allowAccess) {\n       RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n       if (appAttempt \u003d\u003d null) {\n         throw new ApplicationAttemptNotFoundException(\n             \"ApplicationAttempt with id \u0027\" + appAttemptId +\n             \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n           containerId);\n       if (rmConatiner \u003d\u003d null) {\n         throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n             + \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       response \u003d GetContainerReportResponse.newInstance(rmConatiner\n           .createContainerReport());\n     } else {\n       throw new YarnException(\"User \" + callerUGI.getShortUserName()\n           + \" does not have privilege to see this application \" + appId);\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetContainerReportResponse getContainerReport(\n      GetContainerReportRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n    ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n    ApplicationId appId \u003d appAttemptId.getApplicationId();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(appId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n          + \"\u0027 doesn\u0027t exist in RM. Please check that the job submission \"\n          + \"was successful.\");\n    }\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    GetContainerReportResponse response \u003d null;\n    if (allowAccess) {\n      RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n      if (appAttempt \u003d\u003d null) {\n        throw new ApplicationAttemptNotFoundException(\n            \"ApplicationAttempt with id \u0027\" + appAttemptId +\n            \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n          containerId);\n      if (rmConatiner \u003d\u003d null) {\n        throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n            + \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      response \u003d GetContainerReportResponse.newInstance(rmConatiner\n          .createContainerReport());\n    } else {\n      throw new YarnException(\"User \" + callerUGI.getShortUserName()\n          + \" does not have privilege to see this application \" + appId);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "1bbd023275db535ab80fcb60e022151e9679d468": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5962. Spelling errors in logging and exceptions for resource manager code (gsohn via rkanter)\n",
      "commitDate": "27/12/16 1:35 PM",
      "commitName": "1bbd023275db535ab80fcb60e022151e9679d468",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "13/12/16 8:49 PM",
      "commitNameOld": "ada876cd1d22b61f237603cf339bbed65285dab8",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.7,
      "commitsBetweenForRepo": 53,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public GetContainerReportResponse getContainerReport(\n       GetContainerReportRequest request) throws YarnException, IOException {\n     ContainerId containerId \u003d request.getContainerId();\n     ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n     ApplicationId appId \u003d appAttemptId.getApplicationId();\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n     RMApp application \u003d this.rmContext.getRMApps().get(appId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, application);\n     GetContainerReportResponse response \u003d null;\n     if (allowAccess) {\n       RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n       if (appAttempt \u003d\u003d null) {\n         throw new ApplicationAttemptNotFoundException(\n             \"ApplicationAttempt with id \u0027\" + appAttemptId +\n             \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n           containerId);\n       if (rmConatiner \u003d\u003d null) {\n         throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n             + \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       response \u003d GetContainerReportResponse.newInstance(rmConatiner\n           .createContainerReport());\n     } else {\n       throw new YarnException(\"User \" + callerUGI.getShortUserName()\n-          + \" does not have privilage to see this application \" + appId);\n+          + \" does not have privilege to see this application \" + appId);\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetContainerReportResponse getContainerReport(\n      GetContainerReportRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n    ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n    ApplicationId appId \u003d appAttemptId.getApplicationId();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(appId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    GetContainerReportResponse response \u003d null;\n    if (allowAccess) {\n      RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n      if (appAttempt \u003d\u003d null) {\n        throw new ApplicationAttemptNotFoundException(\n            \"ApplicationAttempt with id \u0027\" + appAttemptId +\n            \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n          containerId);\n      if (rmConatiner \u003d\u003d null) {\n        throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n            + \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      response \u003d GetContainerReportResponse.newInstance(rmConatiner\n          .createContainerReport());\n    } else {\n      throw new YarnException(\"User \" + callerUGI.getShortUserName()\n          + \" does not have privilege to see this application \" + appId);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "8f58f742aea87b2b46b9741ffeaebfa36af3573f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4605. Spelling mistake in the help message of \"yarn applicationattempt\" command. Contributed by Weiwei Yang.\n",
      "commitDate": "22/01/16 2:43 AM",
      "commitName": "8f58f742aea87b2b46b9741ffeaebfa36af3573f",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "12/01/16 9:18 PM",
      "commitNameOld": "c0537bcd2c2dcdb4812fcab7badf42e4f55a54d9",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 9.23,
      "commitsBetweenForRepo": 76,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,43 @@\n   public GetContainerReportResponse getContainerReport(\n       GetContainerReportRequest request) throws YarnException, IOException {\n     ContainerId containerId \u003d request.getContainerId();\n     ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n     ApplicationId appId \u003d appAttemptId.getApplicationId();\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n     RMApp application \u003d this.rmContext.getRMApps().get(appId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, application);\n     GetContainerReportResponse response \u003d null;\n     if (allowAccess) {\n       RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n       if (appAttempt \u003d\u003d null) {\n         throw new ApplicationAttemptNotFoundException(\n             \"ApplicationAttempt with id \u0027\" + appAttemptId +\n             \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n           containerId);\n       if (rmConatiner \u003d\u003d null) {\n         throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n             + \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       response \u003d GetContainerReportResponse.newInstance(rmConatiner\n           .createContainerReport());\n     } else {\n       throw new YarnException(\"User \" + callerUGI.getShortUserName()\n-          + \" does not have privilage to see this aplication \" + appId);\n+          + \" does not have privilage to see this application \" + appId);\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetContainerReportResponse getContainerReport(\n      GetContainerReportRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n    ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n    ApplicationId appId \u003d appAttemptId.getApplicationId();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(appId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    GetContainerReportResponse response \u003d null;\n    if (allowAccess) {\n      RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n      if (appAttempt \u003d\u003d null) {\n        throw new ApplicationAttemptNotFoundException(\n            \"ApplicationAttempt with id \u0027\" + appAttemptId +\n            \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n          containerId);\n      if (rmConatiner \u003d\u003d null) {\n        throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n            + \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      response \u003d GetContainerReportResponse.newInstance(rmConatiner\n          .createContainerReport());\n    } else {\n      throw new YarnException(\"User \" + callerUGI.getShortUserName()\n          + \" does not have privilage to see this application \" + appId);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "18b2507edaac991e3ed68d2f27eb96f6882137b9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1904. Ensure exceptions thrown in ClientRMService \u0026 ApplicationHistoryClientService are uniform when application-attempt is not found. Contributed by Zhijie Shen.\n",
      "commitDate": "05/02/15 11:48 PM",
      "commitName": "18b2507edaac991e3ed68d2f27eb96f6882137b9",
      "commitAuthor": "Arun C. Murthy",
      "commitDateOld": "30/12/14 5:15 PM",
      "commitNameOld": "e2351c7ae24cea9b217af4174512d279c55e8efd",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 37.27,
      "commitsBetweenForRepo": 260,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,43 @@\n   public GetContainerReportResponse getContainerReport(\n       GetContainerReportRequest request) throws YarnException, IOException {\n     ContainerId containerId \u003d request.getContainerId();\n     ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n     ApplicationId appId \u003d appAttemptId.getApplicationId();\n     UserGroupInformation callerUGI;\n     try {\n       callerUGI \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ie) {\n       LOG.info(\"Error getting UGI \", ie);\n       throw RPCUtil.getRemoteException(ie);\n     }\n     RMApp application \u003d this.rmContext.getRMApps().get(appId);\n     if (application \u003d\u003d null) {\n       // If the RM doesn\u0027t have the application, throw\n       // ApplicationNotFoundException and let client to handle.\n       throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n           + \"\u0027 doesn\u0027t exist in RM.\");\n     }\n     boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n         ApplicationAccessType.VIEW_APP, application);\n     GetContainerReportResponse response \u003d null;\n     if (allowAccess) {\n       RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n       if (appAttempt \u003d\u003d null) {\n-        throw new ApplicationAttemptNotFoundException(\"ApplicationAttempt \"\n-            + appAttemptId + \" Not Found in RM\");\n+        throw new ApplicationAttemptNotFoundException(\n+            \"ApplicationAttempt with id \u0027\" + appAttemptId +\n+            \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n           containerId);\n       if (rmConatiner \u003d\u003d null) {\n-        throw new ContainerNotFoundException(\"Container with id \" + containerId\n-            + \" not found\");\n+        throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n+            + \"\u0027 doesn\u0027t exist in RM.\");\n       }\n       response \u003d GetContainerReportResponse.newInstance(rmConatiner\n           .createContainerReport());\n     } else {\n       throw new YarnException(\"User \" + callerUGI.getShortUserName()\n           + \" does not have privilage to see this aplication \" + appId);\n     }\n     return response;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public GetContainerReportResponse getContainerReport(\n      GetContainerReportRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n    ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n    ApplicationId appId \u003d appAttemptId.getApplicationId();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(appId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    GetContainerReportResponse response \u003d null;\n    if (allowAccess) {\n      RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n      if (appAttempt \u003d\u003d null) {\n        throw new ApplicationAttemptNotFoundException(\n            \"ApplicationAttempt with id \u0027\" + appAttemptId +\n            \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n          containerId);\n      if (rmConatiner \u003d\u003d null) {\n        throw new ContainerNotFoundException(\"Container with id \u0027\" + containerId\n            + \"\u0027 doesn\u0027t exist in RM.\");\n      }\n      response \u003d GetContainerReportResponse.newInstance(rmConatiner\n          .createContainerReport());\n    } else {\n      throw new YarnException(\"User \" + callerUGI.getShortUserName()\n          + \" does not have privilage to see this aplication \" + appId);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java",
      "extendedDetails": {}
    },
    "6af044bb75fe3ddf184841483cce5e222ad1853a": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1389. Made ApplicationClientProtocol and ApplicationHistoryProtocol expose analogous getApplication(s)/Attempt(s)/Container(s) APIs. Contributed by Mayank Bansal.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577052 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/03/14 12:42 AM",
      "commitName": "6af044bb75fe3ddf184841483cce5e222ad1853a",
      "commitAuthor": "Zhijie Shen",
      "diff": "@@ -0,0 +1,42 @@\n+  public GetContainerReportResponse getContainerReport(\n+      GetContainerReportRequest request) throws YarnException, IOException {\n+    ContainerId containerId \u003d request.getContainerId();\n+    ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n+    ApplicationId appId \u003d appAttemptId.getApplicationId();\n+    UserGroupInformation callerUGI;\n+    try {\n+      callerUGI \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ie) {\n+      LOG.info(\"Error getting UGI \", ie);\n+      throw RPCUtil.getRemoteException(ie);\n+    }\n+    RMApp application \u003d this.rmContext.getRMApps().get(appId);\n+    if (application \u003d\u003d null) {\n+      // If the RM doesn\u0027t have the application, throw\n+      // ApplicationNotFoundException and let client to handle.\n+      throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n+          + \"\u0027 doesn\u0027t exist in RM.\");\n+    }\n+    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n+        ApplicationAccessType.VIEW_APP, application);\n+    GetContainerReportResponse response \u003d null;\n+    if (allowAccess) {\n+      RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n+      if (appAttempt \u003d\u003d null) {\n+        throw new ApplicationAttemptNotFoundException(\"ApplicationAttempt \"\n+            + appAttemptId + \" Not Found in RM\");\n+      }\n+      RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n+          containerId);\n+      if (rmConatiner \u003d\u003d null) {\n+        throw new ContainerNotFoundException(\"Container with id \" + containerId\n+            + \" not found\");\n+      }\n+      response \u003d GetContainerReportResponse.newInstance(rmConatiner\n+          .createContainerReport());\n+    } else {\n+      throw new YarnException(\"User \" + callerUGI.getShortUserName()\n+          + \" does not have privilage to see this aplication \" + appId);\n+    }\n+    return response;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public GetContainerReportResponse getContainerReport(\n      GetContainerReportRequest request) throws YarnException, IOException {\n    ContainerId containerId \u003d request.getContainerId();\n    ApplicationAttemptId appAttemptId \u003d containerId.getApplicationAttemptId();\n    ApplicationId appId \u003d appAttemptId.getApplicationId();\n    UserGroupInformation callerUGI;\n    try {\n      callerUGI \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ie) {\n      LOG.info(\"Error getting UGI \", ie);\n      throw RPCUtil.getRemoteException(ie);\n    }\n    RMApp application \u003d this.rmContext.getRMApps().get(appId);\n    if (application \u003d\u003d null) {\n      // If the RM doesn\u0027t have the application, throw\n      // ApplicationNotFoundException and let client to handle.\n      throw new ApplicationNotFoundException(\"Application with id \u0027\" + appId\n          + \"\u0027 doesn\u0027t exist in RM.\");\n    }\n    boolean allowAccess \u003d checkAccess(callerUGI, application.getUser(),\n        ApplicationAccessType.VIEW_APP, application);\n    GetContainerReportResponse response \u003d null;\n    if (allowAccess) {\n      RMAppAttempt appAttempt \u003d application.getAppAttempts().get(appAttemptId);\n      if (appAttempt \u003d\u003d null) {\n        throw new ApplicationAttemptNotFoundException(\"ApplicationAttempt \"\n            + appAttemptId + \" Not Found in RM\");\n      }\n      RMContainer rmConatiner \u003d this.rmContext.getScheduler().getRMContainer(\n          containerId);\n      if (rmConatiner \u003d\u003d null) {\n        throw new ContainerNotFoundException(\"Container with id \" + containerId\n            + \" not found\");\n      }\n      response \u003d GetContainerReportResponse.newInstance(rmConatiner\n          .createContainerReport());\n    } else {\n      throw new YarnException(\"User \" + callerUGI.getShortUserName()\n          + \" does not have privilage to see this aplication \" + appId);\n    }\n    return response;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/ClientRMService.java"
    }
  }
}