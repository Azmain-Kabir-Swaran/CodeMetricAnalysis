{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineClientImpl.java",
  "functionName": "renewDelegationToken",
  "functionId": "renewDelegationToken___timelineDT-Token__TimelineDelegationTokenIdentifier__(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
  "functionStartLine": 218,
  "functionEndLine": 252,
  "numCommitsSeen": 49,
  "timeTaken": 2982,
  "changeHistory": [
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
    "b7d484aead762fa6d4876eb16b6836ab612ea36b",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
    "5cc3fced957a8471733e0e9490878bd68429fe24",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
    "af0842589359ad800427337ad2c84fac09907f72",
    "1b4be918664b09272b120bc42de3e5fc02d79047"
  ],
  "changeHistoryShort": {
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": "Ybodychange",
    "b7d484aead762fa6d4876eb16b6836ab612ea36b": "Ybodychange",
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": "Ybodychange",
    "5cc3fced957a8471733e0e9490878bd68429fe24": "Ybodychange",
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": "Ybodychange",
    "af0842589359ad800427337ad2c84fac09907f72": "Ybodychange",
    "1b4be918664b09272b120bc42de3e5fc02d79047": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4fa1afdb883dab8786d2fb5c72a195dd2e87d711": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4675. Reorganize TimelineClient and TimelineClientImpl into separate classes for ATSv1.x and ATSv2. Contributed by Naganarasimha G R.\n",
      "commitDate": "16/02/17 11:41 AM",
      "commitName": "4fa1afdb883dab8786d2fb5c72a195dd2e87d711",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "27/12/16 2:14 PM",
      "commitNameOld": "9262797e86453fc04b7ca3710b73b21fcdf9e6b4",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 50.89,
      "commitsBetweenForRepo": 246,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,35 +1,35 @@\n   public long renewDelegationToken(\n       final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n           throws IOException, YarnException {\n     final boolean isTokenServiceAddrEmpty \u003d\n         timelineDT.getService().toString().isEmpty();\n     final String scheme \u003d isTokenServiceAddrEmpty ? null\n         : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n     final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n         : SecurityUtil.getTokenServiceAddr(timelineDT);\n     PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n         new PrivilegedExceptionAction\u003cLong\u003e() {\n \n           @Override\n           public Long run() throws Exception {\n             // If the timeline DT to renew is different than cached, replace it.\n             // Token to set every time for retry, because when exception\n             // happens, DelegationTokenAuthenticatedURL will reset it to null;\n             if (!timelineDT.equals(token.getDelegationToken())) {\n               token.setDelegationToken((Token) timelineDT);\n             }\n             DelegationTokenAuthenticatedURL authUrl \u003d\n-                new DelegationTokenAuthenticatedURL(authenticator,\n-                    connConfigurator);\n+                connector.getDelegationTokenAuthenticatedURL();\n             // If the token service address is not available, fall back to use\n             // the configured service address.\n-            final URI serviceURI \u003d isTokenServiceAddrEmpty ?\n-                constructResURI(getConfig(), getTimelineServiceAddress(), false)\n+            final URI serviceURI \u003d isTokenServiceAddrEmpty\n+                ? TimelineConnector.constructResURI(getConfig(),\n+                    getTimelineServiceAddress(), RESOURCE_URI_STR_V1)\n                 : new URI(scheme, null, address.getHostName(),\n-                address.getPort(), RESOURCE_URI_STR_V1, null, null);\n+                    address.getPort(), RESOURCE_URI_STR_V1, null, null);\n             return authUrl\n                 .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n           }\n         };\n-    return (Long) operateDelegationToken(renewDTAction);\n+    return (Long) connector.operateDelegationToken(renewDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long renewDelegationToken(\n      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n          throws IOException, YarnException {\n    final boolean isTokenServiceAddrEmpty \u003d\n        timelineDT.getService().toString().isEmpty();\n    final String scheme \u003d isTokenServiceAddrEmpty ? null\n        : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n    final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n        : SecurityUtil.getTokenServiceAddr(timelineDT);\n    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n        new PrivilegedExceptionAction\u003cLong\u003e() {\n\n          @Override\n          public Long run() throws Exception {\n            // If the timeline DT to renew is different than cached, replace it.\n            // Token to set every time for retry, because when exception\n            // happens, DelegationTokenAuthenticatedURL will reset it to null;\n            if (!timelineDT.equals(token.getDelegationToken())) {\n              token.setDelegationToken((Token) timelineDT);\n            }\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                connector.getDelegationTokenAuthenticatedURL();\n            // If the token service address is not available, fall back to use\n            // the configured service address.\n            final URI serviceURI \u003d isTokenServiceAddrEmpty\n                ? TimelineConnector.constructResURI(getConfig(),\n                    getTimelineServiceAddress(), RESOURCE_URI_STR_V1)\n                : new URI(scheme, null, address.getHostName(),\n                    address.getPort(), RESOURCE_URI_STR_V1, null, null);\n            return authUrl\n                .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n          }\n        };\n    return (Long) connector.operateDelegationToken(renewDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "b7d484aead762fa6d4876eb16b6836ab612ea36b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4450. TestTimelineAuthenticationFilter and\nTestYarnConfigurationFields fail. Contributed by Sangjin Lee.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "b7d484aead762fa6d4876eb16b6836ab612ea36b",
      "commitAuthor": "Li Lu",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "89e5c44f9e891a3579384c3fa3766937cd4970f1",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,35 @@\n   public long renewDelegationToken(\n       final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n           throws IOException, YarnException {\n     final boolean isTokenServiceAddrEmpty \u003d\n         timelineDT.getService().toString().isEmpty();\n     final String scheme \u003d isTokenServiceAddrEmpty ? null\n         : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n     final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n         : SecurityUtil.getTokenServiceAddr(timelineDT);\n     PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n         new PrivilegedExceptionAction\u003cLong\u003e() {\n \n           @Override\n           public Long run() throws Exception {\n             // If the timeline DT to renew is different than cached, replace it.\n-            // Token to set every time for retry, because when exception happens,\n-            // DelegationTokenAuthenticatedURL will reset it to null;\n+            // Token to set every time for retry, because when exception\n+            // happens, DelegationTokenAuthenticatedURL will reset it to null;\n             if (!timelineDT.equals(token.getDelegationToken())) {\n               token.setDelegationToken((Token) timelineDT);\n             }\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n             // If the token service address is not available, fall back to use\n             // the configured service address.\n-            final URI serviceURI \u003d isTokenServiceAddrEmpty ? resURI\n+            final URI serviceURI \u003d isTokenServiceAddrEmpty ?\n+                constructResURI(getConfig(), getTimelineServiceAddress(), false)\n                 : new URI(scheme, null, address.getHostName(),\n                 address.getPort(), RESOURCE_URI_STR_V1, null, null);\n             return authUrl\n                 .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n           }\n         };\n     return (Long) operateDelegationToken(renewDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long renewDelegationToken(\n      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n          throws IOException, YarnException {\n    final boolean isTokenServiceAddrEmpty \u003d\n        timelineDT.getService().toString().isEmpty();\n    final String scheme \u003d isTokenServiceAddrEmpty ? null\n        : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n    final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n        : SecurityUtil.getTokenServiceAddr(timelineDT);\n    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n        new PrivilegedExceptionAction\u003cLong\u003e() {\n\n          @Override\n          public Long run() throws Exception {\n            // If the timeline DT to renew is different than cached, replace it.\n            // Token to set every time for retry, because when exception\n            // happens, DelegationTokenAuthenticatedURL will reset it to null;\n            if (!timelineDT.equals(token.getDelegationToken())) {\n              token.setDelegationToken((Token) timelineDT);\n            }\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            // If the token service address is not available, fall back to use\n            // the configured service address.\n            final URI serviceURI \u003d isTokenServiceAddrEmpty ?\n                constructResURI(getConfig(), getTimelineServiceAddress(), false)\n                : new URI(scheme, null, address.getHostName(),\n                address.getPort(), RESOURCE_URI_STR_V1, null, null);\n            return authUrl\n                .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n          }\n        };\n    return (Long) operateDelegationToken(renewDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3240. Implement client API to put generic entities. Contributed by Zhijie Shen\n\n(cherry picked from commit 4487da249f448d5c67b712cd0aa723e764eed77d)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "4f0c7eaff3b66df6e87aa251e1316a85f38ffab5",
      "commitAuthor": "Junping Du",
      "commitDateOld": "18/04/16 11:47 AM",
      "commitNameOld": "477003730e6a7c7eff11892f5cedf74073ca867b",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 82.87,
      "commitsBetweenForRepo": 551,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public long renewDelegationToken(\n       final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n           throws IOException, YarnException {\n     final boolean isTokenServiceAddrEmpty \u003d\n         timelineDT.getService().toString().isEmpty();\n     final String scheme \u003d isTokenServiceAddrEmpty ? null\n         : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n     final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n         : SecurityUtil.getTokenServiceAddr(timelineDT);\n     PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n         new PrivilegedExceptionAction\u003cLong\u003e() {\n \n           @Override\n           public Long run() throws Exception {\n             // If the timeline DT to renew is different than cached, replace it.\n             // Token to set every time for retry, because when exception happens,\n             // DelegationTokenAuthenticatedURL will reset it to null;\n             if (!timelineDT.equals(token.getDelegationToken())) {\n               token.setDelegationToken((Token) timelineDT);\n             }\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n             // If the token service address is not available, fall back to use\n             // the configured service address.\n             final URI serviceURI \u003d isTokenServiceAddrEmpty ? resURI\n                 : new URI(scheme, null, address.getHostName(),\n-                address.getPort(), RESOURCE_URI_STR, null, null);\n+                address.getPort(), RESOURCE_URI_STR_V1, null, null);\n             return authUrl\n                 .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n           }\n         };\n     return (Long) operateDelegationToken(renewDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long renewDelegationToken(\n      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n          throws IOException, YarnException {\n    final boolean isTokenServiceAddrEmpty \u003d\n        timelineDT.getService().toString().isEmpty();\n    final String scheme \u003d isTokenServiceAddrEmpty ? null\n        : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n    final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n        : SecurityUtil.getTokenServiceAddr(timelineDT);\n    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n        new PrivilegedExceptionAction\u003cLong\u003e() {\n\n          @Override\n          public Long run() throws Exception {\n            // If the timeline DT to renew is different than cached, replace it.\n            // Token to set every time for retry, because when exception happens,\n            // DelegationTokenAuthenticatedURL will reset it to null;\n            if (!timelineDT.equals(token.getDelegationToken())) {\n              token.setDelegationToken((Token) timelineDT);\n            }\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            // If the token service address is not available, fall back to use\n            // the configured service address.\n            final URI serviceURI \u003d isTokenServiceAddrEmpty ? resURI\n                : new URI(scheme, null, address.getHostName(),\n                address.getPort(), RESOURCE_URI_STR_V1, null, null);\n            return authUrl\n                .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n          }\n        };\n    return (Long) operateDelegationToken(renewDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "5cc3fced957a8471733e0e9490878bd68429fe24": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3725. App submission via REST API is broken in secure mode due to Timeline DT service address is empty. (Zhijie Shen via wangda)\n",
      "commitDate": "31/05/15 4:31 PM",
      "commitName": "5cc3fced957a8471733e0e9490878bd68429fe24",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/05/15 9:13 PM",
      "commitNameOld": "fcd0702c10ce574b887280476aba63d6682d5271",
      "commitAuthorOld": "Zhijie Shen",
      "daysBetweenCommits": 18.8,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,34 @@\n   public long renewDelegationToken(\n       final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n           throws IOException, YarnException {\n-    boolean useHttps \u003d YarnConfiguration.useHttps(this.getConfig());\n-    final String scheme \u003d useHttps ? \"https\" : \"http\";\n-    final InetSocketAddress address \u003d SecurityUtil.getTokenServiceAddr(timelineDT);\n+    final boolean isTokenServiceAddrEmpty \u003d\n+        timelineDT.getService().toString().isEmpty();\n+    final String scheme \u003d isTokenServiceAddrEmpty ? null\n+        : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n+    final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n+        : SecurityUtil.getTokenServiceAddr(timelineDT);\n     PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n         new PrivilegedExceptionAction\u003cLong\u003e() {\n \n           @Override\n           public Long run() throws Exception {\n             // If the timeline DT to renew is different than cached, replace it.\n             // Token to set every time for retry, because when exception happens,\n             // DelegationTokenAuthenticatedURL will reset it to null;\n             if (!timelineDT.equals(token.getDelegationToken())) {\n               token.setDelegationToken((Token) timelineDT);\n             }\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n-            final URI serviceURI \u003d new URI(scheme, null, address.getHostName(),\n+            // If the token service address is not available, fall back to use\n+            // the configured service address.\n+            final URI serviceURI \u003d isTokenServiceAddrEmpty ? resURI\n+                : new URI(scheme, null, address.getHostName(),\n                 address.getPort(), RESOURCE_URI_STR, null, null);\n             return authUrl\n                 .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n           }\n         };\n     return (Long) operateDelegationToken(renewDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long renewDelegationToken(\n      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n          throws IOException, YarnException {\n    final boolean isTokenServiceAddrEmpty \u003d\n        timelineDT.getService().toString().isEmpty();\n    final String scheme \u003d isTokenServiceAddrEmpty ? null\n        : (YarnConfiguration.useHttps(this.getConfig()) ? \"https\" : \"http\");\n    final InetSocketAddress address \u003d isTokenServiceAddrEmpty ? null\n        : SecurityUtil.getTokenServiceAddr(timelineDT);\n    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n        new PrivilegedExceptionAction\u003cLong\u003e() {\n\n          @Override\n          public Long run() throws Exception {\n            // If the timeline DT to renew is different than cached, replace it.\n            // Token to set every time for retry, because when exception happens,\n            // DelegationTokenAuthenticatedURL will reset it to null;\n            if (!timelineDT.equals(token.getDelegationToken())) {\n              token.setDelegationToken((Token) timelineDT);\n            }\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            // If the token service address is not available, fall back to use\n            // the configured service address.\n            final URI serviceURI \u003d isTokenServiceAddrEmpty ? resURI\n                : new URI(scheme, null, address.getHostName(),\n                address.getPort(), RESOURCE_URI_STR, null, null);\n            return authUrl\n                .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n          }\n        };\n    return (Long) operateDelegationToken(renewDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3287. Made TimelineClient put methods do as the correct login context. Contributed by Daryn Sharp and Jonathan Eagles.\n",
      "commitDate": "09/03/15 1:54 PM",
      "commitName": "d6e05c5ee26feefc17267b7c9db1e2a3dbdef117",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "06/03/15 1:32 PM",
      "commitNameOld": "d1abc5d4fc00bb1b226066684556ba16ace71744",
      "commitAuthorOld": "Xuan",
      "daysBetweenCommits": 2.97,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,28 @@\n   public long renewDelegationToken(\n       final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n           throws IOException, YarnException {\n-    boolean isProxyAccess \u003d\n-        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n-        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n-    final String doAsUser \u003d isProxyAccess ?\n-        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n     boolean useHttps \u003d YarnConfiguration.useHttps(this.getConfig());\n     final String scheme \u003d useHttps ? \"https\" : \"http\";\n     final InetSocketAddress address \u003d SecurityUtil.getTokenServiceAddr(timelineDT);\n     PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n         new PrivilegedExceptionAction\u003cLong\u003e() {\n \n           @Override\n           public Long run() throws Exception {\n             // If the timeline DT to renew is different than cached, replace it.\n             // Token to set every time for retry, because when exception happens,\n             // DelegationTokenAuthenticatedURL will reset it to null;\n             if (!timelineDT.equals(token.getDelegationToken())) {\n               token.setDelegationToken((Token) timelineDT);\n             }\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n             final URI serviceURI \u003d new URI(scheme, null, address.getHostName(),\n                 address.getPort(), RESOURCE_URI_STR, null, null);\n             return authUrl\n                 .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n           }\n         };\n     return (Long) operateDelegationToken(renewDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long renewDelegationToken(\n      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n          throws IOException, YarnException {\n    boolean useHttps \u003d YarnConfiguration.useHttps(this.getConfig());\n    final String scheme \u003d useHttps ? \"https\" : \"http\";\n    final InetSocketAddress address \u003d SecurityUtil.getTokenServiceAddr(timelineDT);\n    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n        new PrivilegedExceptionAction\u003cLong\u003e() {\n\n          @Override\n          public Long run() throws Exception {\n            // If the timeline DT to renew is different than cached, replace it.\n            // Token to set every time for retry, because when exception happens,\n            // DelegationTokenAuthenticatedURL will reset it to null;\n            if (!timelineDT.equals(token.getDelegationToken())) {\n              token.setDelegationToken((Token) timelineDT);\n            }\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            final URI serviceURI \u003d new URI(scheme, null, address.getHostName(),\n                address.getPort(), RESOURCE_URI_STR, null, null);\n            return authUrl\n                .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n          }\n        };\n    return (Long) operateDelegationToken(renewDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "af0842589359ad800427337ad2c84fac09907f72": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2971. RM uses conf instead of token service address to renew timeline delegation tokens (jeagles)\n",
      "commitDate": "09/02/15 3:56 PM",
      "commitName": "af0842589359ad800427337ad2c84fac09907f72",
      "commitAuthor": "Jonathan Eagles",
      "commitDateOld": "22/12/14 3:06 AM",
      "commitNameOld": "a696fbb001b946ae75f3b8e962839c2fd3decfa1",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 49.53,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,33 @@\n   public long renewDelegationToken(\n       final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n           throws IOException, YarnException {\n     boolean isProxyAccess \u003d\n         UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n         \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n     final String doAsUser \u003d isProxyAccess ?\n         UserGroupInformation.getCurrentUser().getShortUserName() : null;\n+    boolean useHttps \u003d YarnConfiguration.useHttps(this.getConfig());\n+    final String scheme \u003d useHttps ? \"https\" : \"http\";\n+    final InetSocketAddress address \u003d SecurityUtil.getTokenServiceAddr(timelineDT);\n     PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n         new PrivilegedExceptionAction\u003cLong\u003e() {\n \n           @Override\n-          public Long run()\n-              throws Exception {\n+          public Long run() throws Exception {\n             // If the timeline DT to renew is different than cached, replace it.\n             // Token to set every time for retry, because when exception happens,\n             // DelegationTokenAuthenticatedURL will reset it to null;\n             if (!timelineDT.equals(token.getDelegationToken())) {\n               token.setDelegationToken((Token) timelineDT);\n             }\n             DelegationTokenAuthenticatedURL authUrl \u003d\n                 new DelegationTokenAuthenticatedURL(authenticator,\n                     connConfigurator);\n+            final URI serviceURI \u003d new URI(scheme, null, address.getHostName(),\n+                address.getPort(), RESOURCE_URI_STR, null, null);\n             return authUrl\n-                .renewDelegationToken(resURI.toURL(), token, doAsUser);\n+                .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n           }\n         };\n     return (Long) operateDelegationToken(renewDTAction);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public long renewDelegationToken(\n      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n          throws IOException, YarnException {\n    boolean isProxyAccess \u003d\n        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n    final String doAsUser \u003d isProxyAccess ?\n        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n    boolean useHttps \u003d YarnConfiguration.useHttps(this.getConfig());\n    final String scheme \u003d useHttps ? \"https\" : \"http\";\n    final InetSocketAddress address \u003d SecurityUtil.getTokenServiceAddr(timelineDT);\n    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n        new PrivilegedExceptionAction\u003cLong\u003e() {\n\n          @Override\n          public Long run() throws Exception {\n            // If the timeline DT to renew is different than cached, replace it.\n            // Token to set every time for retry, because when exception happens,\n            // DelegationTokenAuthenticatedURL will reset it to null;\n            if (!timelineDT.equals(token.getDelegationToken())) {\n              token.setDelegationToken((Token) timelineDT);\n            }\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            final URI serviceURI \u003d new URI(scheme, null, address.getHostName(),\n                address.getPort(), RESOURCE_URI_STR, null, null);\n            return authUrl\n                .renewDelegationToken(serviceURI.toURL(), token, doAsUser);\n          }\n        };\n    return (Long) operateDelegationToken(renewDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java",
      "extendedDetails": {}
    },
    "1b4be918664b09272b120bc42de3e5fc02d79047": {
      "type": "Yintroduced",
      "commitMessage": "YARN-2770. Added functionality to renew/cancel TimeLineDelegationToken. Contributed by Zhijie Shen\n",
      "commitDate": "31/10/14 1:16 PM",
      "commitName": "1b4be918664b09272b120bc42de3e5fc02d79047",
      "commitAuthor": "Jian He",
      "diff": "@@ -0,0 +1,29 @@\n+  public long renewDelegationToken(\n+      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n+          throws IOException, YarnException {\n+    boolean isProxyAccess \u003d\n+        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n+        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n+    final String doAsUser \u003d isProxyAccess ?\n+        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n+    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n+        new PrivilegedExceptionAction\u003cLong\u003e() {\n+\n+          @Override\n+          public Long run()\n+              throws Exception {\n+            // If the timeline DT to renew is different than cached, replace it.\n+            // Token to set every time for retry, because when exception happens,\n+            // DelegationTokenAuthenticatedURL will reset it to null;\n+            if (!timelineDT.equals(token.getDelegationToken())) {\n+              token.setDelegationToken((Token) timelineDT);\n+            }\n+            DelegationTokenAuthenticatedURL authUrl \u003d\n+                new DelegationTokenAuthenticatedURL(authenticator,\n+                    connConfigurator);\n+            return authUrl\n+                .renewDelegationToken(resURI.toURL(), token, doAsUser);\n+          }\n+        };\n+    return (Long) operateDelegationToken(renewDTAction);\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public long renewDelegationToken(\n      final Token\u003cTimelineDelegationTokenIdentifier\u003e timelineDT)\n          throws IOException, YarnException {\n    boolean isProxyAccess \u003d\n        UserGroupInformation.getCurrentUser().getAuthenticationMethod()\n        \u003d\u003d UserGroupInformation.AuthenticationMethod.PROXY;\n    final String doAsUser \u003d isProxyAccess ?\n        UserGroupInformation.getCurrentUser().getShortUserName() : null;\n    PrivilegedExceptionAction\u003cLong\u003e renewDTAction \u003d\n        new PrivilegedExceptionAction\u003cLong\u003e() {\n\n          @Override\n          public Long run()\n              throws Exception {\n            // If the timeline DT to renew is different than cached, replace it.\n            // Token to set every time for retry, because when exception happens,\n            // DelegationTokenAuthenticatedURL will reset it to null;\n            if (!timelineDT.equals(token.getDelegationToken())) {\n              token.setDelegationToken((Token) timelineDT);\n            }\n            DelegationTokenAuthenticatedURL authUrl \u003d\n                new DelegationTokenAuthenticatedURL(authenticator,\n                    connConfigurator);\n            return authUrl\n                .renewDelegationToken(resURI.toURL(), token, doAsUser);\n          }\n        };\n    return (Long) operateDelegationToken(renewDTAction);\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-common/src/main/java/org/apache/hadoop/yarn/client/api/impl/TimelineClientImpl.java"
    }
  }
}