{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ContainerUpdateContext.java",
  "functionName": "matchContainerToOutstandingIncreaseReq",
  "functionId": "matchContainerToOutstandingIncreaseReq___node-SchedulerNode__schedulerKey-SchedulerRequestKey__rmContainer-RMContainer",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
  "functionStartLine": 272,
  "functionEndLine": 303,
  "numCommitsSeen": 7,
  "timeTaken": 3070,
  "changeHistory": [
    "38af23796971193fa529c3d08ffde8fcd6e607b6",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4"
  ],
  "changeHistoryShort": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": "Ybodychange",
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": "Ybodychange",
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "38af23796971193fa529c3d08ffde8fcd6e607b6": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6599. Support anti-affinity constraint via AppPlacementAllocator. (Wangda Tan via asuresh)\n",
      "commitDate": "31/01/18 1:30 AM",
      "commitName": "38af23796971193fa529c3d08ffde8fcd6e607b6",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "05/12/17 9:20 AM",
      "commitNameOld": "a957f1c60e1308d1d70a1803381994f59949c5f8",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 56.67,
      "commitsBetweenForRepo": 333,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public ContainerId matchContainerToOutstandingIncreaseReq(\n       SchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer rmContainer) {\n     ContainerId retVal \u003d null;\n     Container container \u003d rmContainer.getContainer();\n     Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n         outstandingIncreases.get(schedulerKey);\n     if (resourceMap !\u003d null) {\n       Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n           resourceMap.get(container.getResource());\n       if (locationMap !\u003d null) {\n         Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n         if (containerIds !\u003d null \u0026\u0026 !containerIds.isEmpty()) {\n           retVal \u003d containerIds.iterator().next();\n         }\n       }\n     }\n     // Allocation happened on NM on the same host, but not on the NM\n     // we need.. We need to signal that this container has to be released.\n     // We also need to add these requests back.. to be reallocated.\n     if (resourceMap !\u003d null \u0026\u0026 retVal \u003d\u003d null) {\n       Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e reqsToUpdate \u003d\n           new HashMap\u003c\u003e();\n       Map\u003cString, ResourceRequest\u003e resMap \u003d createResourceRequests\n           (rmContainer, node, schedulerKey,\n           rmContainer.getContainer().getResource());\n       reqsToUpdate.put(schedulerKey, resMap);\n-      appSchedulingInfo.addRequestToAppPlacement(true, reqsToUpdate);\n+      appSchedulingInfo.updateResourceRequests(reqsToUpdate, true);\n       return UNDEFINED;\n     }\n     return retVal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerId matchContainerToOutstandingIncreaseReq(\n      SchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer rmContainer) {\n    ContainerId retVal \u003d null;\n    Container container \u003d rmContainer.getContainer();\n    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n        outstandingIncreases.get(schedulerKey);\n    if (resourceMap !\u003d null) {\n      Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n          resourceMap.get(container.getResource());\n      if (locationMap !\u003d null) {\n        Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n        if (containerIds !\u003d null \u0026\u0026 !containerIds.isEmpty()) {\n          retVal \u003d containerIds.iterator().next();\n        }\n      }\n    }\n    // Allocation happened on NM on the same host, but not on the NM\n    // we need.. We need to signal that this container has to be released.\n    // We also need to add these requests back.. to be reallocated.\n    if (resourceMap !\u003d null \u0026\u0026 retVal \u003d\u003d null) {\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e reqsToUpdate \u003d\n          new HashMap\u003c\u003e();\n      Map\u003cString, ResourceRequest\u003e resMap \u003d createResourceRequests\n          (rmContainer, node, schedulerKey,\n          rmContainer.getContainer().getResource());\n      reqsToUpdate.put(schedulerKey, resMap);\n      appSchedulingInfo.updateResourceRequests(reqsToUpdate, true);\n      return UNDEFINED;\n    }\n    return retVal;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7437. Rename PlacementSet and SchedulingPlacementSet. (Wangda Tan via kkaranasos)\n",
      "commitDate": "09/11/17 1:01 PM",
      "commitName": "ac4d2b1081d8836a21bc70e77f4e6cd2071a9949",
      "commitAuthor": "Konstantinos Karanasos",
      "commitDateOld": "28/02/17 10:35 AM",
      "commitNameOld": "eac6b4c35c50e555c2f1b5f913bb2c4d839f1ff4",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 254.1,
      "commitsBetweenForRepo": 1781,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,32 @@\n   public ContainerId matchContainerToOutstandingIncreaseReq(\n       SchedulerNode node, SchedulerRequestKey schedulerKey,\n       RMContainer rmContainer) {\n     ContainerId retVal \u003d null;\n     Container container \u003d rmContainer.getContainer();\n     Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n         outstandingIncreases.get(schedulerKey);\n     if (resourceMap !\u003d null) {\n       Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n           resourceMap.get(container.getResource());\n       if (locationMap !\u003d null) {\n         Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n         if (containerIds !\u003d null \u0026\u0026 !containerIds.isEmpty()) {\n           retVal \u003d containerIds.iterator().next();\n         }\n       }\n     }\n     // Allocation happened on NM on the same host, but not on the NM\n     // we need.. We need to signal that this container has to be released.\n     // We also need to add these requests back.. to be reallocated.\n     if (resourceMap !\u003d null \u0026\u0026 retVal \u003d\u003d null) {\n       Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e reqsToUpdate \u003d\n           new HashMap\u003c\u003e();\n       Map\u003cString, ResourceRequest\u003e resMap \u003d createResourceRequests\n           (rmContainer, node, schedulerKey,\n           rmContainer.getContainer().getResource());\n       reqsToUpdate.put(schedulerKey, resMap);\n-      appSchedulingInfo.addToPlacementSets(true, reqsToUpdate);\n+      appSchedulingInfo.addRequestToAppPlacement(true, reqsToUpdate);\n       return UNDEFINED;\n     }\n     return retVal;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerId matchContainerToOutstandingIncreaseReq(\n      SchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer rmContainer) {\n    ContainerId retVal \u003d null;\n    Container container \u003d rmContainer.getContainer();\n    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n        outstandingIncreases.get(schedulerKey);\n    if (resourceMap !\u003d null) {\n      Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n          resourceMap.get(container.getResource());\n      if (locationMap !\u003d null) {\n        Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n        if (containerIds !\u003d null \u0026\u0026 !containerIds.isEmpty()) {\n          retVal \u003d containerIds.iterator().next();\n        }\n      }\n    }\n    // Allocation happened on NM on the same host, but not on the NM\n    // we need.. We need to signal that this container has to be released.\n    // We also need to add these requests back.. to be reallocated.\n    if (resourceMap !\u003d null \u0026\u0026 retVal \u003d\u003d null) {\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e reqsToUpdate \u003d\n          new HashMap\u003c\u003e();\n      Map\u003cString, ResourceRequest\u003e resMap \u003d createResourceRequests\n          (rmContainer, node, schedulerKey,\n          rmContainer.getContainer().getResource());\n      reqsToUpdate.put(schedulerKey, resMap);\n      appSchedulingInfo.addRequestToAppPlacement(true, reqsToUpdate);\n      return UNDEFINED;\n    }\n    return retVal;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java",
      "extendedDetails": {}
    },
    "0a55bd841ec0f2eb89a0383f4c589526e8b138d4": {
      "type": "Yintroduced",
      "commitMessage": "YARN-5959. RM changes to support change of container ExecutionType. (Arun Suresh via wangda)\n",
      "commitDate": "05/01/17 10:31 AM",
      "commitName": "0a55bd841ec0f2eb89a0383f4c589526e8b138d4",
      "commitAuthor": "Wangda Tan",
      "diff": "@@ -0,0 +1,32 @@\n+  public ContainerId matchContainerToOutstandingIncreaseReq(\n+      SchedulerNode node, SchedulerRequestKey schedulerKey,\n+      RMContainer rmContainer) {\n+    ContainerId retVal \u003d null;\n+    Container container \u003d rmContainer.getContainer();\n+    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n+        outstandingIncreases.get(schedulerKey);\n+    if (resourceMap !\u003d null) {\n+      Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n+          resourceMap.get(container.getResource());\n+      if (locationMap !\u003d null) {\n+        Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n+        if (containerIds !\u003d null \u0026\u0026 !containerIds.isEmpty()) {\n+          retVal \u003d containerIds.iterator().next();\n+        }\n+      }\n+    }\n+    // Allocation happened on NM on the same host, but not on the NM\n+    // we need.. We need to signal that this container has to be released.\n+    // We also need to add these requests back.. to be reallocated.\n+    if (resourceMap !\u003d null \u0026\u0026 retVal \u003d\u003d null) {\n+      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e reqsToUpdate \u003d\n+          new HashMap\u003c\u003e();\n+      Map\u003cString, ResourceRequest\u003e resMap \u003d createResourceRequests\n+          (rmContainer, node, schedulerKey,\n+          rmContainer.getContainer().getResource());\n+      reqsToUpdate.put(schedulerKey, resMap);\n+      appSchedulingInfo.addToPlacementSets(true, reqsToUpdate);\n+      return UNDEFINED;\n+    }\n+    return retVal;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public ContainerId matchContainerToOutstandingIncreaseReq(\n      SchedulerNode node, SchedulerRequestKey schedulerKey,\n      RMContainer rmContainer) {\n    ContainerId retVal \u003d null;\n    Container container \u003d rmContainer.getContainer();\n    Map\u003cResource, Map\u003cNodeId, Set\u003cContainerId\u003e\u003e\u003e resourceMap \u003d\n        outstandingIncreases.get(schedulerKey);\n    if (resourceMap !\u003d null) {\n      Map\u003cNodeId, Set\u003cContainerId\u003e\u003e locationMap \u003d\n          resourceMap.get(container.getResource());\n      if (locationMap !\u003d null) {\n        Set\u003cContainerId\u003e containerIds \u003d locationMap.get(container.getNodeId());\n        if (containerIds !\u003d null \u0026\u0026 !containerIds.isEmpty()) {\n          retVal \u003d containerIds.iterator().next();\n        }\n      }\n    }\n    // Allocation happened on NM on the same host, but not on the NM\n    // we need.. We need to signal that this container has to be released.\n    // We also need to add these requests back.. to be reallocated.\n    if (resourceMap !\u003d null \u0026\u0026 retVal \u003d\u003d null) {\n      Map\u003cSchedulerRequestKey, Map\u003cString, ResourceRequest\u003e\u003e reqsToUpdate \u003d\n          new HashMap\u003c\u003e();\n      Map\u003cString, ResourceRequest\u003e resMap \u003d createResourceRequests\n          (rmContainer, node, schedulerKey,\n          rmContainer.getContainer().getResource());\n      reqsToUpdate.put(schedulerKey, resMap);\n      appSchedulingInfo.addToPlacementSets(true, reqsToUpdate);\n      return UNDEFINED;\n    }\n    return retVal;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/ContainerUpdateContext.java"
    }
  }
}