{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "VolumeImpl.java",
  "functionName": "handle",
  "functionId": "handle___event-VolumeEvent",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/volume/csi/lifecycle/VolumeImpl.java",
  "functionStartLine": 186,
  "functionEndLine": 219,
  "numCommitsSeen": 5,
  "timeTaken": 1356,
  "changeHistory": [
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55"
  ],
  "changeHistoryShort": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": "Ybodychange",
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": "Yintroduced"
  },
  "changeHistoryDetails": {
    "39b4a37e02e929a698fcf9e32f1f71bb6b977635": {
      "type": "Ybodychange",
      "commitMessage": "YARN-9341.  Fixed enentrant lock usage in YARN project.\n            Contributed by Prabhu Joseph\n",
      "commitDate": "07/03/19 1:47 PM",
      "commitName": "39b4a37e02e929a698fcf9e32f1f71bb6b977635",
      "commitAuthor": "Eric Yang",
      "commitDateOld": "04/03/19 9:10 PM",
      "commitNameOld": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthorOld": "Prabhu Joseph",
      "daysBetweenCommits": 2.69,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public void handle(VolumeEvent event) {\n+    this.writeLock.lock();\n     try {\n-      this.writeLock.lock();\n       VolumeId volumeId \u003d event.getVolumeId();\n \n       if (volumeId \u003d\u003d null) {\n         // This should not happen, safely ignore the event\n         LOG.warn(\"Unexpected volume event received, event type is \"\n             + event.getType().name() + \", but the volumeId is null.\");\n         return;\n       }\n \n       LOG.info(\"Processing volume event, type\u003d\" + event.getType().name()\n           + \", volumeId\u003d\" + volumeId.toString());\n \n       VolumeState oldState \u003d null;\n       VolumeState newState \u003d null;\n       try {\n         oldState \u003d stateMachine.getCurrentState();\n         newState \u003d stateMachine.doTransition(event.getType(), event);\n       } catch (InvalidStateTransitionException e) {\n         LOG.warn(\"Can\u0027t handle this event at current state: Current: [\"\n             + oldState + \"], eventType: [\" + event.getType() + \"],\" +\n             \" volumeId: [\" + volumeId + \"]\", e);\n       }\n \n       if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n         LOG.info(\"VolumeImpl \" + volumeId + \" transitioned from \" + oldState\n             + \" to \" + newState);\n       }\n     }finally {\n       this.writeLock.unlock();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(VolumeEvent event) {\n    this.writeLock.lock();\n    try {\n      VolumeId volumeId \u003d event.getVolumeId();\n\n      if (volumeId \u003d\u003d null) {\n        // This should not happen, safely ignore the event\n        LOG.warn(\"Unexpected volume event received, event type is \"\n            + event.getType().name() + \", but the volumeId is null.\");\n        return;\n      }\n\n      LOG.info(\"Processing volume event, type\u003d\" + event.getType().name()\n          + \", volumeId\u003d\" + volumeId.toString());\n\n      VolumeState oldState \u003d null;\n      VolumeState newState \u003d null;\n      try {\n        oldState \u003d stateMachine.getCurrentState();\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitionException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state: Current: [\"\n            + oldState + \"], eventType: [\" + event.getType() + \"],\" +\n            \" volumeId: [\" + volumeId + \"]\", e);\n      }\n\n      if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n        LOG.info(\"VolumeImpl \" + volumeId + \" transitioned from \" + oldState\n            + \" to \" + newState);\n      }\n    }finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/volume/csi/lifecycle/VolumeImpl.java",
      "extendedDetails": {}
    },
    "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55": {
      "type": "Yintroduced",
      "commitMessage": "YARN-8902. [CSI] Add volume manager that manages CSI volume lifecycle. Contributed by Weiwei Yang.\n",
      "commitDate": "11/11/18 10:27 PM",
      "commitName": "4e7284443e6cf8dac3cd5d2581730c87ae6ffb55",
      "commitAuthor": "Sunil G",
      "diff": "@@ -0,0 +1,34 @@\n+  public void handle(VolumeEvent event) {\n+    try {\n+      this.writeLock.lock();\n+      VolumeId volumeId \u003d event.getVolumeId();\n+\n+      if (volumeId \u003d\u003d null) {\n+        // This should not happen, safely ignore the event\n+        LOG.warn(\"Unexpected volume event received, event type is \"\n+            + event.getType().name() + \", but the volumeId is null.\");\n+        return;\n+      }\n+\n+      LOG.info(\"Processing volume event, type\u003d\" + event.getType().name()\n+          + \", volumeId\u003d\" + volumeId.toString());\n+\n+      VolumeState oldState \u003d null;\n+      VolumeState newState \u003d null;\n+      try {\n+        oldState \u003d stateMachine.getCurrentState();\n+        newState \u003d stateMachine.doTransition(event.getType(), event);\n+      } catch (InvalidStateTransitionException e) {\n+        LOG.warn(\"Can\u0027t handle this event at current state: Current: [\"\n+            + oldState + \"], eventType: [\" + event.getType() + \"],\" +\n+            \" volumeId: [\" + volumeId + \"]\", e);\n+      }\n+\n+      if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n+        LOG.info(\"VolumeImpl \" + volumeId + \" transitioned from \" + oldState\n+            + \" to \" + newState);\n+      }\n+    }finally {\n+      this.writeLock.unlock();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void handle(VolumeEvent event) {\n    try {\n      this.writeLock.lock();\n      VolumeId volumeId \u003d event.getVolumeId();\n\n      if (volumeId \u003d\u003d null) {\n        // This should not happen, safely ignore the event\n        LOG.warn(\"Unexpected volume event received, event type is \"\n            + event.getType().name() + \", but the volumeId is null.\");\n        return;\n      }\n\n      LOG.info(\"Processing volume event, type\u003d\" + event.getType().name()\n          + \", volumeId\u003d\" + volumeId.toString());\n\n      VolumeState oldState \u003d null;\n      VolumeState newState \u003d null;\n      try {\n        oldState \u003d stateMachine.getCurrentState();\n        newState \u003d stateMachine.doTransition(event.getType(), event);\n      } catch (InvalidStateTransitionException e) {\n        LOG.warn(\"Can\u0027t handle this event at current state: Current: [\"\n            + oldState + \"], eventType: [\" + event.getType() + \"],\" +\n            \" volumeId: [\" + volumeId + \"]\", e);\n      }\n\n      if (newState !\u003d null \u0026\u0026 oldState !\u003d newState) {\n        LOG.info(\"VolumeImpl \" + volumeId + \" transitioned from \" + oldState\n            + \" to \" + newState);\n      }\n    }finally {\n      this.writeLock.unlock();\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/volume/csi/lifecycle/VolumeImpl.java"
    }
  }
}