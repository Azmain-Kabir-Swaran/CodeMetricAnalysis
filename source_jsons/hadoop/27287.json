{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "TimelineReaderWebServices.java",
  "functionName": "getFlowRun",
  "functionId": "getFlowRun___req-HttpServletRequest(annotations-@Context)__res-HttpServletResponse(annotations-@Context)__uId-String(annotations-@PathParam(\"uid\"))__metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\"))",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
  "functionStartLine": 1001,
  "functionEndLine": 1045,
  "numCommitsSeen": 74,
  "timeTaken": 6535,
  "changeHistory": [
    "90e2e493b3dc8be54f655b957b98a4bc0e003684",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
    "8ef546c1ee9fce0b171813547253374d268566ba",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0"
  ],
  "changeHistoryShort": {
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": "Ybodychange",
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": "Ybodychange",
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": "Ybodychange",
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": "Ybodychange",
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": "Ymultichange(Yparameterchange,Ybodychange)",
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": "Ybodychange",
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": "Ymultichange(Yparameterchange,Ybodychange)",
    "8ef546c1ee9fce0b171813547253374d268566ba": "Ymultichange(Yparameterchange,Ybodychange)",
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": "Ybodychange",
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1": "Ybodychange",
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "90e2e493b3dc8be54f655b957b98a4bc0e003684": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8270 Adding JMX Metrics for Timeline Collector and Reader. Contributed by Sushil Ks.\n",
      "commitDate": "27/09/18 3:53 PM",
      "commitName": "90e2e493b3dc8be54f655b957b98a4bc0e003684",
      "commitAuthor": "Vrushali C",
      "commitDateOld": "13/09/18 5:17 AM",
      "commitNameOld": "f4bda5e8e9fee6c5a0dda7c79ef14e73aec20e7e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 14.44,
      "commitsBetweenForRepo": 161,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,45 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n+    boolean succeeded \u003d false;\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       // TODO to be removed or modified once ACL story is played\n       checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entity \u003d timelineReaderManager.getEntity(context,\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, null, null, null, null));\n+      succeeded \u003d true;\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n+    } finally {\n+      long latency \u003d Time.monotonicNow() - startTime;\n+      METRICS.addGetEntitiesLatency(latency, succeeded);\n+      LOG.info(\"Processed URL \" + url +\n+          \" (Took \" + latency + \" ms.)\");\n     }\n-    long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n-          (endTime - startTime) + \" ms.)\");\n+          (Time.monotonicNow() - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n-    LOG.info(\"Processed URL \" + url +\n-        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    boolean succeeded \u003d false;\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      // TODO to be removed or modified once ACL story is played\n      checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entity \u003d timelineReaderManager.getEntity(context,\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, null, null, null, null));\n      succeeded \u003d true;\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    } finally {\n      long latency \u003d Time.monotonicNow() - startTime;\n      METRICS.addGetEntitiesLatency(latency, succeeded);\n      LOG.info(\"Processed URL \" + url +\n          \" (Took \" + latency + \" ms.)\");\n    }\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (Time.monotonicNow() - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "469b29c0817b7bf1902c9195c4f8d031a909e1c9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8455. Add basic ACL check for all ATS v2 REST APIs. Contributed by Rohith Sharma K S.\n",
      "commitDate": "29/06/18 10:02 AM",
      "commitName": "469b29c0817b7bf1902c9195c4f8d031a909e1c9",
      "commitAuthor": "Sunil G",
      "commitDateOld": "01/06/18 8:59 PM",
      "commitNameOld": "8261f9e5710038ccbc475dbfcea3b9ae79b6f482",
      "commitAuthorOld": "Rohith Sharma K S",
      "daysBetweenCommits": 27.54,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,41 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n+      // TODO to be removed or modified once ACL story is played\n+      checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entity \u003d timelineReaderManager.getEntity(context,\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n           null, metricsToRetrieve, null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      // TODO to be removed or modified once ACL story is played\n      checkAccess(timelineReaderManager, callerUGI, context.getUserId());\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entity \u003d timelineReaderManager.getEntity(context,\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "70078e91e3287aad51f6ddf6acd9ed75e7c6760d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4455. Support fetching metrics by time range. Contributed by Varun Saxena.\n",
      "commitDate": "29/08/17 10:59 PM",
      "commitName": "70078e91e3287aad51f6ddf6acd9ed75e7c6760d",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "29/08/17 10:59 PM",
      "commitNameOld": "b87b72b40a3cd4e124d6c941276481747133895f",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entity \u003d timelineReaderManager.getEntity(context,\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, metricsToRetrieve, null, null));\n+          null, metricsToRetrieve, null, null, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entity \u003d timelineReaderManager.getEntity(context,\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, null, null, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "c81a2e1d197b9995103797348cb5cc4bcf9a015b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5015. entire time series is returned for YARN container system metrics (CPU and memory) (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:46 AM",
      "commitName": "c81a2e1d197b9995103797348cb5cc4bcf9a015b",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthorOld": "Sangjin Lee",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId,\n       @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entity \u003d timelineReaderManager.getEntity(context,\n           TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n-          null, metricsToRetrieve, null));\n+          null, metricsToRetrieve, null, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entity \u003d timelineReaderManager.getEntity(context,\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, null, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "089caf49fe968cf4cd3fd4f9637da89ee143991a": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,39 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"uid\") String uId) {\n+      @PathParam(\"uid\") String uId,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entity \u003d timelineReaderManager.getEntity(context,\n-          new TimelineDataToRetrieve());\n+          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n+          null, metricsToRetrieve, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entity \u003d timelineReaderManager.getEntity(context,\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\")), metricsToRetrieve-String(annotations-@QueryParam(\"metricstoretrieve\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4447. Provide a mechanism to represent complex filters and parse them at the REST layer (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "089caf49fe968cf4cd3fd4f9637da89ee143991a",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "960af7d4717b8a8949d0b2e43949e7daab45aa88",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 14,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,39 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"uid\") String uId) {\n+      @PathParam(\"uid\") String uId,\n+      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n       context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n       entity \u003d timelineReaderManager.getEntity(context,\n-          new TimelineDataToRetrieve());\n+          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n+          null, metricsToRetrieve, null));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId,\n      @QueryParam(\"metricstoretrieve\") String metricsToRetrieve) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entity \u003d timelineReaderManager.getEntity(context,\n          TimelineReaderWebServicesUtils.createTimelineDataToRetrieve(\n          null, metricsToRetrieve, null));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4446. Refactor reader API for better extensibility (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9cb1287e9b8425f91de925f411c3c2a8fa9fe2a3",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthorOld": "Li Lu",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"uid\") String uId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d\n         TimelineReaderWebServicesUtils.getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" +\n         TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       TimelineReaderContext context \u003d\n           TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n       if (context \u003d\u003d null) {\n         throw new BadRequestException(\"Incorrect UID \" +  uId);\n       }\n-      entity \u003d timelineReaderManager.getEntity(context.getUserId(),\n-          context.getClusterId(), context.getFlowName(), context.getFlowRunId(),\n-          null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);\n+      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n+      entity \u003d timelineReaderManager.getEntity(context,\n+          new TimelineDataToRetrieve());\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      context.setEntityType(TimelineEntityType.YARN_FLOW_RUN.toString());\n      entity \u003d timelineReaderManager.getEntity(context,\n          new TimelineDataToRetrieve());\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "9d40d9d34ce3b88e868ae91fcc09377107c094c7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"userid\") String userId,\n-      @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowname\") String flowName,\n-      @PathParam(\"flowrunid\") String flowRunId,\n-      @QueryParam(\"fields\") String fields) {\n+      @PathParam(\"uid\") String uId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n-    UserGroupInformation callerUGI \u003d getUser(req);\n-    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n-      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n-          parseStr(clusterId), parseStr(flowName), parseLongStr(flowRunId), null,\n-          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+      TimelineReaderContext context \u003d\n+          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n+      if (context \u003d\u003d null) {\n+        throw new BadRequestException(\"Incorrect UID \" +  uId);\n+      }\n+      entity \u003d timelineReaderManager.getEntity(context.getUserId(),\n+          context.getClusterId(), context.getFlowName(), context.getFlowRunId(),\n+          null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n-      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowName) +\n-          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n+      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      entity \u003d timelineReaderManager.getEntity(context.getUserId(),\n          context.getClusterId(), context.getFlowName(), context.getFlowRunId(),\n          null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowName-String(annotations-@PathParam(\"flowname\")), flowRunId-String(annotations-@PathParam(\"flowrunid\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), uId-String(annotations-@PathParam(\"uid\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4224. Support fetching entities by UID and change the REST\ninterface to conform to current REST APIs\u0027 in YARN. (Varun Saxena via\ngtcarrera9)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "9d40d9d34ce3b88e868ae91fcc09377107c094c7",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "6934b05c7117a12286fb2ba7a47f75e227cacb22",
          "commitAuthorOld": "Naganarasimha",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,37 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n-      @PathParam(\"userid\") String userId,\n-      @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowname\") String flowName,\n-      @PathParam(\"flowrunid\") String flowRunId,\n-      @QueryParam(\"fields\") String fields) {\n+      @PathParam(\"uid\") String uId) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n-    UserGroupInformation callerUGI \u003d getUser(req);\n-    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    UserGroupInformation callerUGI \u003d\n+        TimelineReaderWebServicesUtils.getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" +\n+        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n-      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n-          parseStr(clusterId), parseStr(flowName), parseLongStr(flowRunId), null,\n-          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n-          parseFieldsStr(fields, COMMA_DELIMITER));\n+      TimelineReaderContext context \u003d\n+          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n+      if (context \u003d\u003d null) {\n+        throw new BadRequestException(\"Incorrect UID \" +  uId);\n+      }\n+      entity \u003d timelineReaderManager.getEntity(context.getUserId(),\n+          context.getClusterId(), context.getFlowName(), context.getFlowRunId(),\n+          null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n-      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowName) +\n-          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n+      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"uid\") String uId) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d\n        TimelineReaderWebServicesUtils.getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" +\n        TimelineReaderWebServicesUtils.getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      TimelineReaderContext context \u003d\n          TimelineUIDConverter.FLOWRUN_UID.decodeUID(uId);\n      if (context \u003d\u003d null) {\n        throw new BadRequestException(\"Incorrect UID \" +  uId);\n      }\n      entity \u003d timelineReaderManager.getEntity(context.getUserId(),\n          context.getClusterId(), context.getFlowName(), context.getFlowRunId(),\n          null, TimelineEntityType.YARN_FLOW_RUN.toString(), null, null);\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flowrun with uid: \" + uId + \"is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "8ef546c1ee9fce0b171813547253374d268566ba": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
      "commitAuthor": "Li Lu",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowid\") String flowId,\n+      @PathParam(\"flowname\") String flowName,\n       @PathParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n-          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n+          parseStr(clusterId), parseStr(flowName), parseLongStr(flowRunId), null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n-      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n+      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowName) +\n           \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowname\") String flowName,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n          parseStr(clusterId), parseStr(flowName), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowName) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), flowRunId-String(annotations-@PathParam(\"flowrunid\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowName-String(annotations-@PathParam(\"flowname\")), flowRunId-String(annotations-@PathParam(\"flowrunid\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4445. Unify the term flowId and flowName in timeline v2 codebase.\nContributed by Zhan Zhang.\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "8ef546c1ee9fce0b171813547253374d268566ba",
          "commitAuthor": "Li Lu",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,36 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n-      @PathParam(\"flowid\") String flowId,\n+      @PathParam(\"flowname\") String flowName,\n       @PathParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n-          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n+          parseStr(clusterId), parseStr(flowName), parseLongStr(flowRunId), null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n-      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n+      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowName) +\n           \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowname\") String flowName,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n          parseStr(clusterId), parseStr(flowName), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowName) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        }
      ]
    },
    "09649005ca269f249f98384ecd1abf9fb6d5b0c1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange,Yparametermetachange)",
      "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
      "commitAuthor": "Sangjin Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n       @PathParam(\"flowrunid\") String flowRunId,\n-      @QueryParam(\"userid\") String userId,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n-      entity \u003d timelineReaderManager.getEntity(\n-          parseUser(callerUGI, userId), parseStr(clusterId),\n-          parseStr(flowId), parseLongStr(flowRunId), null,\n+      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n+          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n           \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), flowRunId-String(annotations-@PathParam(\"flowrunid\")), userId-String(annotations-@QueryParam(\"userid\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), flowRunId-String(annotations-@PathParam(\"flowrunid\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n       @PathParam(\"flowrunid\") String flowRunId,\n-      @QueryParam(\"userid\") String userId,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n-      entity \u003d timelineReaderManager.getEntity(\n-          parseUser(callerUGI, userId), parseStr(clusterId),\n-          parseStr(flowId), parseLongStr(flowRunId), null,\n+      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n+          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n           \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "YARN-4221. Store user in app to flow table (Varun Saxena via sjlee)\n",
          "commitDate": "10/07/16 8:45 AM",
          "commitName": "09649005ca269f249f98384ecd1abf9fb6d5b0c1",
          "commitAuthor": "Sangjin Lee",
          "commitDateOld": "10/07/16 8:45 AM",
          "commitNameOld": "e3e857866d9fdefb7e353b21ae24eab4401e60b3",
          "commitAuthorOld": "Sangjin Lee",
          "daysBetweenCommits": 0.0,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,37 +1,36 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n+      @PathParam(\"userid\") String userId,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n       @PathParam(\"flowrunid\") String flowRunId,\n-      @QueryParam(\"userid\") String userId,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n         (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n-      entity \u003d timelineReaderManager.getEntity(\n-          parseUser(callerUGI, userId), parseStr(clusterId),\n-          parseStr(flowId), parseLongStr(flowRunId), null,\n+      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n+          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n           \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"userid\") String userId,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(parseStr(userId),\n          parseStr(clusterId), parseStr(flowId), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
          "extendedDetails": {
            "oldValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), flowRunId-String(annotations-@PathParam(\"flowrunid\")), userId-String(annotations-@QueryParam(\"userid\")), fields-String(annotations-@QueryParam(\"fields\"))]",
            "newValue": "[req-HttpServletRequest(annotations-@Context), res-HttpServletResponse(annotations-@Context), userId-String(annotations-@PathParam(\"userid\")), clusterId-String(annotations-@PathParam(\"clusterid\")), flowId-String(annotations-@PathParam(\"flowid\")), flowRunId-String(annotations-@PathParam(\"flowrunid\")), fields-String(annotations-@QueryParam(\"fields\"))]"
          }
        }
      ]
    },
    "0f44b5508d2ffcae08f130b6535a9832d37e2b38": {
      "type": "Ybodychange",
      "commitMessage": "YARN-3864. Implement support for querying single app and all apps for a flow run (Varun Saxena via sjlee)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "0f44b5508d2ffcae08f130b6535a9832d37e2b38",
      "commitAuthor": "Sangjin Lee",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
      "commitAuthorOld": "Vrushali Channapattan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,37 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n       @PathParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"fields\") String fields) {\n     String url \u003d req.getRequestURI() +\n-        (null \u003d\u003d req.getQueryString() ? \"\" :\n+        (req.getQueryString() \u003d\u003d null ? \"\" :\n             QUERY_STRING_SEP + req.getQueryString());\n     UserGroupInformation callerUGI \u003d getUser(req);\n     LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n     long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n     TimelineEntity entity \u003d null;\n     try {\n       entity \u003d timelineReaderManager.getEntity(\n           parseUser(callerUGI, userId), parseStr(clusterId),\n           parseStr(flowId), parseLongStr(flowRunId), null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n     } catch (Exception e) {\n       handleException(e, url, startTime, \"flowrunid\");\n     }\n     long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n       LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n           (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n           \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n     }\n     LOG.info(\"Processed URL \" + url +\n         \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (req.getQueryString() \u003d\u003d null ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(\n          parseUser(callerUGI, userId), parseStr(clusterId),\n          parseStr(flowId), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "da2b7bd08e27673945cccc391b1ad17e8f22abf1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4203. Add request/response logging \u0026 timing for each REST endpoint call (Varun Saxena via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "da2b7bd08e27673945cccc391b1ad17e8f22abf1",
      "commitAuthor": "Vrushali Channapattan",
      "commitDateOld": "10/07/16 8:45 AM",
      "commitNameOld": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
      "commitAuthorOld": "Vrushali Channapattan",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,37 @@\n   public TimelineEntity getFlowRun(\n       @Context HttpServletRequest req,\n       @Context HttpServletResponse res,\n       @PathParam(\"clusterid\") String clusterId,\n       @PathParam(\"flowid\") String flowId,\n       @PathParam(\"flowrunid\") String flowRunId,\n       @QueryParam(\"userid\") String userId,\n       @QueryParam(\"fields\") String fields) {\n+    String url \u003d req.getRequestURI() +\n+        (null \u003d\u003d req.getQueryString() ? \"\" :\n+            QUERY_STRING_SEP + req.getQueryString());\n+    UserGroupInformation callerUGI \u003d getUser(req);\n+    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n+    long startTime \u003d Time.monotonicNow();\n     init(res);\n     TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n-    UserGroupInformation callerUGI \u003d getUser(req);\n     TimelineEntity entity \u003d null;\n     try {\n       entity \u003d timelineReaderManager.getEntity(\n           parseUser(callerUGI, userId), parseStr(clusterId),\n           parseStr(flowId), parseLongStr(flowRunId), null,\n           TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n           parseFieldsStr(fields, COMMA_DELIMITER));\n-    } catch (NumberFormatException e) {\n-      throw new BadRequestException(\"flowRunId is not a numeric value.\");\n     } catch (Exception e) {\n-      handleException(e);\n+      handleException(e, url, startTime, \"flowrunid\");\n     }\n+    long endTime \u003d Time.monotonicNow();\n     if (entity \u003d\u003d null) {\n+      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n+          (endTime - startTime) + \" ms.)\");\n       throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n           \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n     }\n+    LOG.info(\"Processed URL \" + url +\n+        \" (Took \" + (endTime - startTime) + \" ms.)\");\n     return entity;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"fields\") String fields) {\n    String url \u003d req.getRequestURI() +\n        (null \u003d\u003d req.getQueryString() ? \"\" :\n            QUERY_STRING_SEP + req.getQueryString());\n    UserGroupInformation callerUGI \u003d getUser(req);\n    LOG.info(\"Received URL \" + url + \" from user \" + getUserName(callerUGI));\n    long startTime \u003d Time.monotonicNow();\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(\n          parseUser(callerUGI, userId), parseStr(clusterId),\n          parseStr(flowId), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (Exception e) {\n      handleException(e, url, startTime, \"flowrunid\");\n    }\n    long endTime \u003d Time.monotonicNow();\n    if (entity \u003d\u003d null) {\n      LOG.info(\"Processed URL \" + url + \" but flowrun not found (Took \" +\n          (endTime - startTime) + \" ms.)\");\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    LOG.info(\"Processed URL \" + url +\n        \" (Took \" + (endTime - startTime) + \" ms.)\");\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java",
      "extendedDetails": {}
    },
    "d95dc89a02d5915363153e0d9254f2cc0cf73ca0": {
      "type": "Yintroduced",
      "commitMessage": "YARN-4075 [reader REST API] implement support for querying for flows and flow runs (Varun Saxena via vrushali)\n",
      "commitDate": "10/07/16 8:45 AM",
      "commitName": "d95dc89a02d5915363153e0d9254f2cc0cf73ca0",
      "commitAuthor": "Vrushali Channapattan",
      "diff": "@@ -0,0 +1,29 @@\n+  public TimelineEntity getFlowRun(\n+      @Context HttpServletRequest req,\n+      @Context HttpServletResponse res,\n+      @PathParam(\"clusterid\") String clusterId,\n+      @PathParam(\"flowid\") String flowId,\n+      @PathParam(\"flowrunid\") String flowRunId,\n+      @QueryParam(\"userid\") String userId,\n+      @QueryParam(\"fields\") String fields) {\n+    init(res);\n+    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n+    UserGroupInformation callerUGI \u003d getUser(req);\n+    TimelineEntity entity \u003d null;\n+    try {\n+      entity \u003d timelineReaderManager.getEntity(\n+          parseUser(callerUGI, userId), parseStr(clusterId),\n+          parseStr(flowId), parseLongStr(flowRunId), null,\n+          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n+          parseFieldsStr(fields, COMMA_DELIMITER));\n+    } catch (NumberFormatException e) {\n+      throw new BadRequestException(\"flowRunId is not a numeric value.\");\n+    } catch (Exception e) {\n+      handleException(e);\n+    }\n+    if (entity \u003d\u003d null) {\n+      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n+          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n+    }\n+    return entity;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TimelineEntity getFlowRun(\n      @Context HttpServletRequest req,\n      @Context HttpServletResponse res,\n      @PathParam(\"clusterid\") String clusterId,\n      @PathParam(\"flowid\") String flowId,\n      @PathParam(\"flowrunid\") String flowRunId,\n      @QueryParam(\"userid\") String userId,\n      @QueryParam(\"fields\") String fields) {\n    init(res);\n    TimelineReaderManager timelineReaderManager \u003d getTimelineReaderManager();\n    UserGroupInformation callerUGI \u003d getUser(req);\n    TimelineEntity entity \u003d null;\n    try {\n      entity \u003d timelineReaderManager.getEntity(\n          parseUser(callerUGI, userId), parseStr(clusterId),\n          parseStr(flowId), parseLongStr(flowRunId), null,\n          TimelineEntityType.YARN_FLOW_RUN.toString(), null,\n          parseFieldsStr(fields, COMMA_DELIMITER));\n    } catch (NumberFormatException e) {\n      throw new BadRequestException(\"flowRunId is not a numeric value.\");\n    } catch (Exception e) {\n      handleException(e);\n    }\n    if (entity \u003d\u003d null) {\n      throw new NotFoundException(\"Flow run {flow id: \" + parseStr(flowId) +\n          \", run id: \" + parseLongStr(flowRunId) + \" } is not found\");\n    }\n    return entity;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-timelineservice/src/main/java/org/apache/hadoop/yarn/server/timelineservice/reader/TimelineReaderWebServices.java"
    }
  }
}