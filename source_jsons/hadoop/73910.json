{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "Server.java",
  "functionName": "setupResponse",
  "functionId": "setupResponse___call-RpcCall__status-RpcStatusProto__erCode-RpcErrorCodeProto__rv-Writable__errorClass-String__error-String",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
  "functionStartLine": 3207,
  "functionEndLine": 3247,
  "numCommitsSeen": 735,
  "timeTaken": 11050,
  "changeHistory": [
    "e27708c2daf663086380cdf5215cffcab1a0b00c",
    "e880660a204b6fd0e5a0799393a4d36359765a54",
    "c9d73437e881296282abe46a6b3196befc8cef72",
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
    "2d8227605fe22c1c05f31729edc8939013763c05",
    "476a251e5efe5e5850671f924e622b587c262653",
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
    "9ff01d626118a97ea4bf2fd72f022e11e69ee17d",
    "eb2a60338715e517ba8e4d32ecfe28691a882188",
    "725623534ce7ab20c28af6e0cdf57bd7278551dd",
    "357472001725e786f28b27560bac8aca54c3c983",
    "a4c20088b5d35e6f986ece0db3c5e438dd9c3df1",
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2",
    "4b9c956bc56cec2c5b669102340d0912e0db3517",
    "940389afce6a1b9b9e1519aed528cbc444786756",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "e27708c2daf663086380cdf5215cffcab1a0b00c": "Ybodychange",
    "e880660a204b6fd0e5a0799393a4d36359765a54": "Ybodychange",
    "c9d73437e881296282abe46a6b3196befc8cef72": "Ybodychange",
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": "Ybodychange",
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": "Yparameterchange",
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": "Yparameterchange",
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": "Yparameterchange",
    "2d8227605fe22c1c05f31729edc8939013763c05": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "476a251e5efe5e5850671f924e622b587c262653": "Ybodychange",
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3": "Ymodifierchange",
    "9ff01d626118a97ea4bf2fd72f022e11e69ee17d": "Ybodychange",
    "eb2a60338715e517ba8e4d32ecfe28691a882188": "Ybodychange",
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": "Ymultichange(Yparameterchange,Ybodychange)",
    "357472001725e786f28b27560bac8aca54c3c983": "Ybodychange",
    "a4c20088b5d35e6f986ece0db3c5e438dd9c3df1": "Ybodychange",
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3": "Ymultichange(Yparameterchange,Ybodychange)",
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2": "Ybodychange",
    "4b9c956bc56cec2c5b669102340d0912e0db3517": "Ybodychange",
    "940389afce6a1b9b9e1519aed528cbc444786756": "Ybodychange",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e27708c2daf663086380cdf5215cffcab1a0b00c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13665. [SBN read] Move RPC response serialization into Server.doResponse(). Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:34 AM",
      "commitName": "e27708c2daf663086380cdf5215cffcab1a0b00c",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthorOld": "Plamen Jeliazkov",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n   private void setupResponse(\n       RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n       Writable rv, String errorClass, String error)\n           throws IOException {\n     // fatal responses will cause the reader to close the connection.\n     if (status \u003d\u003d RpcStatusProto.FATAL) {\n       call.connection.setShouldClose();\n     }\n     RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n+    if (alignmentContext !\u003d null) {\n+      alignmentContext.updateResponseState(headerBuilder);\n+    }\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       try {\n         setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       setupResponse(call, headerBuilder.build(), null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(\n      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    // fatal responses will cause the reader to close the connection.\n    if (status \u003d\u003d RpcStatusProto.FATAL) {\n      call.connection.setShouldClose();\n    }\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n    if (alignmentContext !\u003d null) {\n      alignmentContext.updateResponseState(headerBuilder);\n    }\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "e880660a204b6fd0e5a0799393a4d36359765a54": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13399. [SBN read] Make Client field AlignmentContext non-static. Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "e880660a204b6fd0e5a0799393a4d36359765a54",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "24/12/18 9:33 AM",
      "commitNameOld": "9bf0696c7348879678693176da0071628ca42566",
      "commitAuthorOld": "Erik Krogen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,38 @@\n   private void setupResponse(\n       RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n       Writable rv, String errorClass, String error)\n           throws IOException {\n     // fatal responses will cause the reader to close the connection.\n     if (status \u003d\u003d RpcStatusProto.FATAL) {\n       call.connection.setShouldClose();\n     }\n     RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n-    if(alignmentContext !\u003d null) {\n-      alignmentContext.updateResponseState(headerBuilder);\n-    }\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       try {\n         setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       setupResponse(call, headerBuilder.build(), null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(\n      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    // fatal responses will cause the reader to close the connection.\n    if (status \u003d\u003d RpcStatusProto.FATAL) {\n      call.connection.setShouldClose();\n    }\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "c9d73437e881296282abe46a6b3196befc8cef72": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12977. [SBN read] Add stateId to RPC headers. Contributed by Plamen Jeliazkov.",
      "commitDate": "24/12/18 9:33 AM",
      "commitName": "c9d73437e881296282abe46a6b3196befc8cef72",
      "commitAuthor": "Plamen Jeliazkov",
      "commitDateOld": "23/10/18 2:53 PM",
      "commitNameOld": "635786a511344b53b1d3f25c2f29ab5298f6ac74",
      "commitAuthorOld": "Chen Liang",
      "daysBetweenCommits": 61.82,
      "commitsBetweenForRepo": 404,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,38 +1,41 @@\n   private void setupResponse(\n       RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n       Writable rv, String errorClass, String error)\n           throws IOException {\n     // fatal responses will cause the reader to close the connection.\n     if (status \u003d\u003d RpcStatusProto.FATAL) {\n       call.connection.setShouldClose();\n     }\n     RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n+    if(alignmentContext !\u003d null) {\n+      alignmentContext.updateResponseState(headerBuilder);\n+    }\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       try {\n         setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       setupResponse(call, headerBuilder.build(), null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(\n      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    // fatal responses will cause the reader to close the connection.\n    if (status \u003d\u003d RpcStatusProto.FATAL) {\n      call.connection.setShouldClose();\n    }\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n    if(alignmentContext !\u003d null) {\n      alignmentContext.updateResponseState(headerBuilder);\n    }\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "b6bb99c18a772d2179d5cc6757cddf141e8d39c0": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-14034. Allow ipc layer exceptions to selectively close connections. Contributed by Daryn Sharp.\n",
      "commitDate": "09/02/17 8:47 AM",
      "commitName": "b6bb99c18a772d2179d5cc6757cddf141e8d39c0",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "28/11/16 9:07 PM",
      "commitNameOld": "67d9f2808efb34b9a7b0b824cb4033b95ad33474",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 72.49,
      "commitsBetweenForRepo": 352,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,38 @@\n   private void setupResponse(\n       RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n       Writable rv, String errorClass, String error)\n           throws IOException {\n+    // fatal responses will cause the reader to close the connection.\n+    if (status \u003d\u003d RpcStatusProto.FATAL) {\n+      call.connection.setShouldClose();\n+    }\n     RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       try {\n         setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       setupResponse(call, headerBuilder.build(), null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(\n      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    // fatal responses will cause the reader to close the connection.\n    if (status \u003d\u003d RpcStatusProto.FATAL) {\n      call.connection.setShouldClose();\n    }\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "76cd81f4b656f0d40a4b2122e15f04ea53d8020b": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "01/09/16 1:44 PM",
      "commitName": "76cd81f4b656f0d40a4b2122e15f04ea53d8020b",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 2:04 PM",
      "commitNameOld": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 6.99,
      "commitsBetweenForRepo": 39,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void setupResponse(\n-      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n+      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n       Writable rv, String errorClass, String error)\n           throws IOException {\n     RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       try {\n         setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       setupResponse(call, headerBuilder.build(), null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(\n      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[call-Call, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]",
        "newValue": "[call-RpcCall, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]"
      }
    },
    "81485dbfc1ffb8daa609be8eb31094cc28646dd3": {
      "type": "Yparameterchange",
      "commitMessage": "Revert \"HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\"\n\nThis reverts commit d288a0ba8364d81aacda9f4a21022eecb6dc4e22.\n",
      "commitDate": "25/08/16 2:04 PM",
      "commitName": "81485dbfc1ffb8daa609be8eb31094cc28646dd3",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "25/08/16 9:44 AM",
      "commitNameOld": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void setupResponse(\n-      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n+      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n       Writable rv, String errorClass, String error)\n           throws IOException {\n     RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       try {\n         setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       setupResponse(call, headerBuilder.build(), null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(\n      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[call-RpcCall, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]",
        "newValue": "[call-Call, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]"
      }
    },
    "d288a0ba8364d81aacda9f4a21022eecb6dc4e22": {
      "type": "Yparameterchange",
      "commitMessage": "HADOOP-13465. Design Server.Call to be extensible for unified call queue. Contributed by Daryn Sharp.\n",
      "commitDate": "25/08/16 9:44 AM",
      "commitName": "d288a0ba8364d81aacda9f4a21022eecb6dc4e22",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "03/08/16 11:22 AM",
      "commitNameOld": "580a8334963709e728ed677c815fb7fef9bca70e",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 21.93,
      "commitsBetweenForRepo": 167,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   private void setupResponse(\n-      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n+      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n       Writable rv, String errorClass, String error)\n           throws IOException {\n     RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       try {\n         setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       setupResponse(call, headerBuilder.build(), null);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(\n      RpcCall call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[call-Call, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]",
        "newValue": "[call-RpcCall, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]"
      }
    },
    "2d8227605fe22c1c05f31729edc8939013763c05": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
      "commitDate": "03/08/16 7:31 AM",
      "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 7:31 AM",
          "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/08/16 8:40 AM",
          "commitNameOld": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,34 @@\n-  private static void setupResponse(ByteArrayOutputStream responseBuf,\n-                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n-                             Writable rv, String errorClass, String error) \n-  throws IOException {\n-    responseBuf.reset();\n-    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n-    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n+  private void setupResponse(\n+      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n+      Writable rv, String errorClass, String error)\n+          throws IOException {\n+    RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n-      final int headerLen \u003d header.getSerializedSize();\n-      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n-          headerLen;\n       try {\n-        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n-          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n-              (ProtobufRpcEngine.RpcWrapper) rv;\n-          fullLength +\u003d resWrapper.getLength();\n-          out.writeInt(fullLength);\n-          header.writeDelimitedTo(out);\n-          rv.write(out);\n-        } else { // Have to serialize to buffer to get len\n-          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n-          rv.write(buf);\n-          byte[] data \u003d buf.getData();\n-          fullLength +\u003d buf.getLength();\n-          out.writeInt(fullLength);\n-          header.writeDelimitedTo(out);\n-          out.write(data, 0, buf.getLength());\n-        }\n+        setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n-        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n+        setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n-      RpcResponseHeaderProto header \u003d headerBuilder.build();\n-      int headerLen \u003d header.getSerializedSize();\n-      final int fullLength  \u003d \n-          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n-      out.writeInt(fullLength);\n-      header.writeDelimitedTo(out);\n+      setupResponse(call, headerBuilder.build(), null);\n     }\n-    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponse(\n      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[responseBuf-ByteArrayOutputStream, call-Call, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]",
            "newValue": "[call-Call, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 7:31 AM",
          "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/08/16 8:40 AM",
          "commitNameOld": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,34 @@\n-  private static void setupResponse(ByteArrayOutputStream responseBuf,\n-                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n-                             Writable rv, String errorClass, String error) \n-  throws IOException {\n-    responseBuf.reset();\n-    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n-    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n+  private void setupResponse(\n+      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n+      Writable rv, String errorClass, String error)\n+          throws IOException {\n+    RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n-      final int headerLen \u003d header.getSerializedSize();\n-      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n-          headerLen;\n       try {\n-        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n-          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n-              (ProtobufRpcEngine.RpcWrapper) rv;\n-          fullLength +\u003d resWrapper.getLength();\n-          out.writeInt(fullLength);\n-          header.writeDelimitedTo(out);\n-          rv.write(out);\n-        } else { // Have to serialize to buffer to get len\n-          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n-          rv.write(buf);\n-          byte[] data \u003d buf.getData();\n-          fullLength +\u003d buf.getLength();\n-          out.writeInt(fullLength);\n-          header.writeDelimitedTo(out);\n-          out.write(data, 0, buf.getLength());\n-        }\n+        setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n-        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n+        setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n-      RpcResponseHeaderProto header \u003d headerBuilder.build();\n-      int headerLen \u003d header.getSerializedSize();\n-      final int fullLength  \u003d \n-          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n-      out.writeInt(fullLength);\n-      header.writeDelimitedTo(out);\n+      setupResponse(call, headerBuilder.build(), null);\n     }\n-    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponse(\n      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-13426. More efficiently build IPC responses. Contributed by Daryn Sharp.\n",
          "commitDate": "03/08/16 7:31 AM",
          "commitName": "2d8227605fe22c1c05f31729edc8939013763c05",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "02/08/16 8:40 AM",
          "commitNameOld": "b3018e73ccae43484d9cb85eabae814eb7f050a6",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 0.95,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,60 +1,34 @@\n-  private static void setupResponse(ByteArrayOutputStream responseBuf,\n-                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n-                             Writable rv, String errorClass, String error) \n-  throws IOException {\n-    responseBuf.reset();\n-    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n-    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n+  private void setupResponse(\n+      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n+      Writable rv, String errorClass, String error)\n+          throws IOException {\n+    RpcResponseHeaderProto.Builder headerBuilder \u003d\n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n-      final int headerLen \u003d header.getSerializedSize();\n-      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n-          headerLen;\n       try {\n-        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n-          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n-              (ProtobufRpcEngine.RpcWrapper) rv;\n-          fullLength +\u003d resWrapper.getLength();\n-          out.writeInt(fullLength);\n-          header.writeDelimitedTo(out);\n-          rv.write(out);\n-        } else { // Have to serialize to buffer to get len\n-          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n-          rv.write(buf);\n-          byte[] data \u003d buf.getData();\n-          fullLength +\u003d buf.getLength();\n-          out.writeInt(fullLength);\n-          header.writeDelimitedTo(out);\n-          out.write(data, 0, buf.getLength());\n-        }\n+        setupResponse(call, header, rv);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n-        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n+        setupResponse(call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n-      RpcResponseHeaderProto header \u003d headerBuilder.build();\n-      int headerLen \u003d header.getSerializedSize();\n-      final int fullLength  \u003d \n-          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n-      out.writeInt(fullLength);\n-      header.writeDelimitedTo(out);\n+      setupResponse(call, headerBuilder.build(), null);\n     }\n-    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponse(\n      Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n      Writable rv, String errorClass, String error)\n          throws IOException {\n    RpcResponseHeaderProto.Builder headerBuilder \u003d\n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      try {\n        setupResponse(call, header, rv);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      setupResponse(call, headerBuilder.build(), null);\n    }\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "476a251e5efe5e5850671f924e622b587c262653": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-12483. Maintain wrapped SASL ordering for postponed IPC responses. (Daryn Sharp via yliu)\n",
      "commitDate": "18/10/15 6:54 PM",
      "commitName": "476a251e5efe5e5850671f924e622b587c262653",
      "commitAuthor": "yliu",
      "commitDateOld": "12/10/15 1:09 AM",
      "commitNameOld": "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
      "commitAuthorOld": "yliu",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 58,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,60 @@\n   private static void setupResponse(ByteArrayOutputStream responseBuf,\n                              Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n     RpcResponseHeaderProto.Builder headerBuilder \u003d  \n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       final int headerLen \u003d header.getSerializedSize();\n       int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n           headerLen;\n       try {\n         if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n           ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n               (ProtobufRpcEngine.RpcWrapper) rv;\n           fullLength +\u003d resWrapper.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           rv.write(out);\n         } else { // Have to serialize to buffer to get len\n           final DataOutputBuffer buf \u003d new DataOutputBuffer();\n           rv.write(buf);\n           byte[] data \u003d buf.getData();\n           fullLength +\u003d buf.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           out.write(data, 0, buf.getLength());\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       int headerLen \u003d header.getSerializedSize();\n       final int fullLength  \u003d \n           CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n       out.writeInt(fullLength);\n       header.writeDelimitedTo(out);\n     }\n-    if (call.connection.useWrap) {\n-      wrapWithSasl(responseBuf, call);\n-    }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      final int headerLen \u003d header.getSerializedSize();\n      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n          headerLen;\n      try {\n        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n              (ProtobufRpcEngine.RpcWrapper) rv;\n          fullLength +\u003d resWrapper.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          rv.write(out);\n        } else { // Have to serialize to buffer to get len\n          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n          rv.write(buf);\n          byte[] data \u003d buf.getData();\n          fullLength +\u003d buf.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          out.write(data, 0, buf.getLength());\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      int headerLen \u003d header.getSerializedSize();\n      final int fullLength  \u003d \n          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n      out.writeInt(fullLength);\n      header.writeDelimitedTo(out);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3": {
      "type": "Ymodifierchange",
      "commitMessage": "HADOOP-10300. Allowed deferred sending of call responses. (Daryn Sharp via yliu)\n",
      "commitDate": "12/10/15 1:09 AM",
      "commitName": "e617cf6dd13f2bb5d7cbb15ee2cdb260ecd46cd3",
      "commitAuthor": "yliu",
      "commitDateOld": "28/09/15 7:42 AM",
      "commitNameOld": "892ade689f9bcce76daae8f66fc00a49bee8548e",
      "commitAuthorOld": "Colin Patrick Mccabe",
      "daysBetweenCommits": 13.73,
      "commitsBetweenForRepo": 94,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,63 @@\n-  private void setupResponse(ByteArrayOutputStream responseBuf,\n+  private static void setupResponse(ByteArrayOutputStream responseBuf,\n                              Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n     RpcResponseHeaderProto.Builder headerBuilder \u003d  \n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       final int headerLen \u003d header.getSerializedSize();\n       int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n           headerLen;\n       try {\n         if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n           ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n               (ProtobufRpcEngine.RpcWrapper) rv;\n           fullLength +\u003d resWrapper.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           rv.write(out);\n         } else { // Have to serialize to buffer to get len\n           final DataOutputBuffer buf \u003d new DataOutputBuffer();\n           rv.write(buf);\n           byte[] data \u003d buf.getData();\n           fullLength +\u003d buf.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           out.write(data, 0, buf.getLength());\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       int headerLen \u003d header.getSerializedSize();\n       final int fullLength  \u003d \n           CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n       out.writeInt(fullLength);\n       header.writeDelimitedTo(out);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(responseBuf, call);\n     }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      final int headerLen \u003d header.getSerializedSize();\n      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n          headerLen;\n      try {\n        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n              (ProtobufRpcEngine.RpcWrapper) rv;\n          fullLength +\u003d resWrapper.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          rv.write(out);\n        } else { // Have to serialize to buffer to get len\n          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n          rv.write(buf);\n          byte[] data \u003d buf.getData();\n          fullLength +\u003d buf.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          out.write(data, 0, buf.getLength());\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      int headerLen \u003d header.getSerializedSize();\n      final int fullLength  \u003d \n          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n      out.writeInt(fullLength);\n      header.writeDelimitedTo(out);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldValue": "[private]",
        "newValue": "[private, static]"
      }
    },
    "9ff01d626118a97ea4bf2fd72f022e11e69ee17d": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9751. Add clientId and retryCount to RpcResponseHeaderProto.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1505036 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/07/13 2:49 PM",
      "commitName": "9ff01d626118a97ea4bf2fd72f022e11e69ee17d",
      "commitAuthor": "Tsz-wo Sze",
      "commitDateOld": "18/07/13 4:44 PM",
      "commitNameOld": "8724ceb2359af66c800043e665c17a2a30981c7d",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 0.92,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,63 @@\n   private void setupResponse(ByteArrayOutputStream responseBuf,\n                              Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n     RpcResponseHeaderProto.Builder headerBuilder \u003d  \n         RpcResponseHeaderProto.newBuilder();\n+    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n     headerBuilder.setCallId(call.callId);\n+    headerBuilder.setRetryCount(call.retryCount);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       final int headerLen \u003d header.getSerializedSize();\n       int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n           headerLen;\n       try {\n         if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n           ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n               (ProtobufRpcEngine.RpcWrapper) rv;\n           fullLength +\u003d resWrapper.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           rv.write(out);\n         } else { // Have to serialize to buffer to get len\n           final DataOutputBuffer buf \u003d new DataOutputBuffer();\n           rv.write(buf);\n           byte[] data \u003d buf.getData();\n           fullLength +\u003d buf.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           out.write(data, 0, buf.getLength());\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       int headerLen \u003d header.getSerializedSize();\n       final int fullLength  \u003d \n           CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n       out.writeInt(fullLength);\n       header.writeDelimitedTo(out);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(responseBuf, call);\n     }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setClientId(ByteString.copyFrom(call.clientId));\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setRetryCount(call.retryCount);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      final int headerLen \u003d header.getSerializedSize();\n      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n          headerLen;\n      try {\n        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n              (ProtobufRpcEngine.RpcWrapper) rv;\n          fullLength +\u003d resWrapper.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          rv.write(out);\n        } else { // Have to serialize to buffer to get len\n          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n          rv.write(buf);\n          byte[] data \u003d buf.getData();\n          fullLength +\u003d buf.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          out.write(data, 0, buf.getLength());\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      int headerLen \u003d header.getSerializedSize();\n      final int fullLength  \u003d \n          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n      out.writeInt(fullLength);\n      header.writeDelimitedTo(out);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "eb2a60338715e517ba8e4d32ecfe28691a882188": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9688. Add globally unique Client ID to RPC requests. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1500843 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/07/13 10:08 AM",
      "commitName": "eb2a60338715e517ba8e4d32ecfe28691a882188",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "01/07/13 4:17 PM",
      "commitNameOld": "805e9b5b6d835d1b7a50af18967afb8eebdf8606",
      "commitAuthorOld": "Colin McCabe",
      "daysBetweenCommits": 6.74,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,61 @@\n   private void setupResponse(ByteArrayOutputStream responseBuf,\n                              Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n     RpcResponseHeaderProto.Builder headerBuilder \u003d  \n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setStatus(status);\n-    headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);\n+    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       final int headerLen \u003d header.getSerializedSize();\n       int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n           headerLen;\n       try {\n         if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n           ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n               (ProtobufRpcEngine.RpcWrapper) rv;\n           fullLength +\u003d resWrapper.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           rv.write(out);\n         } else { // Have to serialize to buffer to get len\n           final DataOutputBuffer buf \u003d new DataOutputBuffer();\n           rv.write(buf);\n           byte[] data \u003d buf.getData();\n           fullLength +\u003d buf.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           out.write(data, 0, buf.getLength());\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n       headerBuilder.setErrorDetail(erCode);\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       int headerLen \u003d header.getSerializedSize();\n       final int fullLength  \u003d \n           CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n       out.writeInt(fullLength);\n       header.writeDelimitedTo(out);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(responseBuf, call);\n     }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      final int headerLen \u003d header.getSerializedSize();\n      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n          headerLen;\n      try {\n        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n              (ProtobufRpcEngine.RpcWrapper) rv;\n          fullLength +\u003d resWrapper.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          rv.write(out);\n        } else { // Have to serialize to buffer to get len\n          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n          rv.write(buf);\n          byte[] data \u003d buf.getData();\n          fullLength +\u003d buf.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          out.write(data, 0, buf.getLength());\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      int headerLen \u003d header.getSerializedSize();\n      final int fullLength  \u003d \n          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n      out.writeInt(fullLength);\n      header.writeDelimitedTo(out);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "725623534ce7ab20c28af6e0cdf57bd7278551dd": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/05/13 10:51 AM",
      "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 10:51 AM",
          "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "27/03/13 11:51 AM",
          "commitNameOld": "fc0a4de670c3e6dcf5d30305d3969fe4946a0fed",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 37.96,
          "commitsBetweenForRepo": 210,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,61 @@\n   private void setupResponse(ByteArrayOutputStream responseBuf,\n-                             Call call, RpcStatusProto status, \n+                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n     RpcResponseHeaderProto.Builder headerBuilder \u003d  \n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       final int headerLen \u003d header.getSerializedSize();\n       int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n           headerLen;\n       try {\n         if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n           ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n               (ProtobufRpcEngine.RpcWrapper) rv;\n           fullLength +\u003d resWrapper.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           rv.write(out);\n         } else { // Have to serialize to buffer to get len\n           final DataOutputBuffer buf \u003d new DataOutputBuffer();\n           rv.write(buf);\n           byte[] data \u003d buf.getData();\n           fullLength +\u003d buf.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           out.write(data, 0, buf.getLength());\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n+            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n+      headerBuilder.setErrorDetail(erCode);\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       int headerLen \u003d header.getSerializedSize();\n       final int fullLength  \u003d \n           CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n       out.writeInt(fullLength);\n       header.writeDelimitedTo(out);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(responseBuf, call);\n     }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      final int headerLen \u003d header.getSerializedSize();\n      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n          headerLen;\n      try {\n        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n              (ProtobufRpcEngine.RpcWrapper) rv;\n          fullLength +\u003d resWrapper.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          rv.write(out);\n        } else { // Have to serialize to buffer to get len\n          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n          rv.write(buf);\n          byte[] data \u003d buf.getData();\n          fullLength +\u003d buf.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          out.write(data, 0, buf.getLength());\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      int headerLen \u003d header.getSerializedSize();\n      final int fullLength  \u003d \n          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n      out.writeInt(fullLength);\n      header.writeDelimitedTo(out);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[responseBuf-ByteArrayOutputStream, call-Call, status-RpcStatusProto, rv-Writable, errorClass-String, error-String]",
            "newValue": "[responseBuf-ByteArrayOutputStream, call-Call, status-RpcStatusProto, erCode-RpcErrorCodeProto, rv-Writable, errorClass-String, error-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-9425 Add error codes to rpc-response (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1479143 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "04/05/13 10:51 AM",
          "commitName": "725623534ce7ab20c28af6e0cdf57bd7278551dd",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "27/03/13 11:51 AM",
          "commitNameOld": "fc0a4de670c3e6dcf5d30305d3969fe4946a0fed",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 37.96,
          "commitsBetweenForRepo": 210,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,59 +1,61 @@\n   private void setupResponse(ByteArrayOutputStream responseBuf,\n-                             Call call, RpcStatusProto status, \n+                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n     RpcResponseHeaderProto.Builder headerBuilder \u003d  \n         RpcResponseHeaderProto.newBuilder();\n     headerBuilder.setCallId(call.callId);\n     headerBuilder.setStatus(status);\n     headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       final int headerLen \u003d header.getSerializedSize();\n       int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n           headerLen;\n       try {\n         if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n           ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n               (ProtobufRpcEngine.RpcWrapper) rv;\n           fullLength +\u003d resWrapper.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           rv.write(out);\n         } else { // Have to serialize to buffer to get len\n           final DataOutputBuffer buf \u003d new DataOutputBuffer();\n           rv.write(buf);\n           byte[] data \u003d buf.getData();\n           fullLength +\u003d buf.getLength();\n           out.writeInt(fullLength);\n           header.writeDelimitedTo(out);\n           out.write(data, 0, buf.getLength());\n         }\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n+            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n       headerBuilder.setExceptionClassName(errorClass);\n       headerBuilder.setErrorMsg(error);\n+      headerBuilder.setErrorDetail(erCode);\n       RpcResponseHeaderProto header \u003d headerBuilder.build();\n       int headerLen \u003d header.getSerializedSize();\n       final int fullLength  \u003d \n           CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n       out.writeInt(fullLength);\n       header.writeDelimitedTo(out);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(responseBuf, call);\n     }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, RpcErrorCodeProto erCode,\n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      final int headerLen \u003d header.getSerializedSize();\n      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n          headerLen;\n      try {\n        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n              (ProtobufRpcEngine.RpcWrapper) rv;\n          fullLength +\u003d resWrapper.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          rv.write(out);\n        } else { // Have to serialize to buffer to get len\n          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n          rv.write(buf);\n          byte[] data \u003d buf.getData();\n          fullLength +\u003d buf.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          out.write(data, 0, buf.getLength());\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            RpcErrorCodeProto.ERROR_SERIALIZING_RESPONSE,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      headerBuilder.setErrorDetail(erCode);\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      int headerLen \u003d header.getSerializedSize();\n      final int fullLength  \u003d \n          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n      out.writeInt(fullLength);\n      header.writeDelimitedTo(out);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "357472001725e786f28b27560bac8aca54c3c983": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9380 Add totalLength to rpc response  (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1459392 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/03/13 9:41 AM",
      "commitName": "357472001725e786f28b27560bac8aca54c3c983",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "08/03/13 1:47 PM",
      "commitNameOld": "a4c20088b5d35e6f986ece0db3c5e438dd9c3df1",
      "commitAuthorOld": "Sanjay Radia",
      "daysBetweenCommits": 12.79,
      "commitsBetweenForRepo": 59,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,59 @@\n   private void setupResponse(ByteArrayOutputStream responseBuf,\n                              Call call, RpcStatusProto status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n-    RpcResponseHeaderProto.Builder response \u003d  \n+    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n         RpcResponseHeaderProto.newBuilder();\n-    response.setCallId(call.callId);\n-    response.setStatus(status);\n-    response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n-\n+    headerBuilder.setCallId(call.callId);\n+    headerBuilder.setStatus(status);\n+    headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);\n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n+      RpcResponseHeaderProto header \u003d headerBuilder.build();\n+      final int headerLen \u003d header.getSerializedSize();\n+      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n+          headerLen;\n       try {\n-        response.build().writeDelimitedTo(out);\n-        rv.write(out);\n+        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n+          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n+              (ProtobufRpcEngine.RpcWrapper) rv;\n+          fullLength +\u003d resWrapper.getLength();\n+          out.writeInt(fullLength);\n+          header.writeDelimitedTo(out);\n+          rv.write(out);\n+        } else { // Have to serialize to buffer to get len\n+          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n+          rv.write(buf);\n+          byte[] data \u003d buf.getData();\n+          fullLength +\u003d buf.getLength();\n+          out.writeInt(fullLength);\n+          header.writeDelimitedTo(out);\n+          out.write(data, 0, buf.getLength());\n+        }\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else { // Rpc Failure\n-      response.setExceptionClassName(errorClass);\n-      response.setErrorMsg(error);\n-      response.build().writeDelimitedTo(out);\n+      headerBuilder.setExceptionClassName(errorClass);\n+      headerBuilder.setErrorMsg(error);\n+      RpcResponseHeaderProto header \u003d headerBuilder.build();\n+      int headerLen \u003d header.getSerializedSize();\n+      final int fullLength  \u003d \n+          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n+      out.writeInt(fullLength);\n+      header.writeDelimitedTo(out);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(responseBuf, call);\n     }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder headerBuilder \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    headerBuilder.setCallId(call.callId);\n    headerBuilder.setStatus(status);\n    headerBuilder.setServerIpcVersionNum(Server.CURRENT_VERSION);\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      final int headerLen \u003d header.getSerializedSize();\n      int fullLength  \u003d CodedOutputStream.computeRawVarint32Size(headerLen) +\n          headerLen;\n      try {\n        if (rv instanceof ProtobufRpcEngine.RpcWrapper) {\n          ProtobufRpcEngine.RpcWrapper resWrapper \u003d \n              (ProtobufRpcEngine.RpcWrapper) rv;\n          fullLength +\u003d resWrapper.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          rv.write(out);\n        } else { // Have to serialize to buffer to get len\n          final DataOutputBuffer buf \u003d new DataOutputBuffer();\n          rv.write(buf);\n          byte[] data \u003d buf.getData();\n          fullLength +\u003d buf.getLength();\n          out.writeInt(fullLength);\n          header.writeDelimitedTo(out);\n          out.write(data, 0, buf.getLength());\n        }\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      headerBuilder.setExceptionClassName(errorClass);\n      headerBuilder.setErrorMsg(error);\n      RpcResponseHeaderProto header \u003d headerBuilder.build();\n      int headerLen \u003d header.getSerializedSize();\n      final int fullLength  \u003d \n          CodedOutputStream.computeRawVarint32Size(headerLen) + headerLen;\n      out.writeInt(fullLength);\n      header.writeDelimitedTo(out);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "a4c20088b5d35e6f986ece0db3c5e438dd9c3df1": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9151 Include RPC error info in RpcResponseHeader instead of sending it separately (sanjay Radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1454593 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/03/13 1:47 PM",
      "commitName": "a4c20088b5d35e6f986ece0db3c5e438dd9c3df1",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "05/03/13 9:56 AM",
      "commitNameOld": "52703c2d0d9e2ad89d0ffca079e37eee339b89b7",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 3.16,
      "commitsBetweenForRepo": 32,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,37 @@\n   private void setupResponse(ByteArrayOutputStream responseBuf,\n                              Call call, RpcStatusProto status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     responseBuf.reset();\n     DataOutputStream out \u003d new DataOutputStream(responseBuf);\n     RpcResponseHeaderProto.Builder response \u003d  \n         RpcResponseHeaderProto.newBuilder();\n     response.setCallId(call.callId);\n     response.setStatus(status);\n+    response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n \n \n     if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       try {\n         response.build().writeDelimitedTo(out);\n         rv.write(out);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n-    } else {\n-      if (status \u003d\u003d RpcStatusProto.FATAL) {\n-        response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n-      }\n+    } else { // Rpc Failure\n+      response.setExceptionClassName(errorClass);\n+      response.setErrorMsg(error);\n       response.build().writeDelimitedTo(out);\n-      WritableUtils.writeString(out, errorClass);\n-      WritableUtils.writeString(out, error);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(responseBuf, call);\n     }\n     call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder response \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    response.setCallId(call.callId);\n    response.setStatus(status);\n    response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      try {\n        response.build().writeDelimitedTo(out);\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else { // Rpc Failure\n      response.setExceptionClassName(errorClass);\n      response.setErrorMsg(error);\n      response.build().writeDelimitedTo(out);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/05/12 9:56 AM",
      "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
      "commitAuthor": "Sanjay Radia",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/05/12 9:56 AM",
          "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "02/05/12 11:35 PM",
          "commitNameOld": "d94899877709836153244c2f0c5f14c37c9d4795",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 8.43,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,39 @@\n-  private void setupResponse(ByteArrayOutputStream response, \n-                             Call call, Status status, \n+  private void setupResponse(ByteArrayOutputStream responseBuf,\n+                             Call call, RpcStatusProto status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n-    response.reset();\n-    DataOutputStream out \u003d new DataOutputStream(response);\n-    out.writeInt(call.callId);                // write call id\n-    out.writeInt(status.state);           // write status\n+    responseBuf.reset();\n+    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n+    RpcResponseHeaderProto.Builder response \u003d  \n+        RpcResponseHeaderProto.newBuilder();\n+    response.setCallId(call.callId);\n+    response.setStatus(status);\n \n-    if (status \u003d\u003d Status.SUCCESS) {\n+\n+    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       try {\n+        response.build().writeDelimitedTo(out);\n         rv.write(out);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n-        setupResponse(response, call, Status.ERROR,\n+        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else {\n+      if (status \u003d\u003d RpcStatusProto.FATAL) {\n+        response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n+      }\n+      response.build().writeDelimitedTo(out);\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n     if (call.connection.useWrap) {\n-      wrapWithSasl(response, call);\n+      wrapWithSasl(responseBuf, call);\n     }\n-    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n+    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder response \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    response.setCallId(call.callId);\n    response.setStatus(status);\n\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      try {\n        response.build().writeDelimitedTo(out);\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      if (status \u003d\u003d RpcStatusProto.FATAL) {\n        response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n      }\n      response.build().writeDelimitedTo(out);\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {
            "oldValue": "[response-ByteArrayOutputStream, call-Call, status-Status, rv-Writable, errorClass-String, error-String]",
            "newValue": "[responseBuf-ByteArrayOutputStream, call-Call, status-RpcStatusProto, rv-Writable, errorClass-String, error-String]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "    HADOOP-8366 Use ProtoBuf for RpcResponseHeader (sanjay radia)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1337283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "11/05/12 9:56 AM",
          "commitName": "2116f28d9e95896b54f4dc60336dc3f6ac7d64f3",
          "commitAuthor": "Sanjay Radia",
          "commitDateOld": "02/05/12 11:35 PM",
          "commitNameOld": "d94899877709836153244c2f0c5f14c37c9d4795",
          "commitAuthorOld": "Eli Collins",
          "daysBetweenCommits": 8.43,
          "commitsBetweenForRepo": 61,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,31 +1,39 @@\n-  private void setupResponse(ByteArrayOutputStream response, \n-                             Call call, Status status, \n+  private void setupResponse(ByteArrayOutputStream responseBuf,\n+                             Call call, RpcStatusProto status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n-    response.reset();\n-    DataOutputStream out \u003d new DataOutputStream(response);\n-    out.writeInt(call.callId);                // write call id\n-    out.writeInt(status.state);           // write status\n+    responseBuf.reset();\n+    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n+    RpcResponseHeaderProto.Builder response \u003d  \n+        RpcResponseHeaderProto.newBuilder();\n+    response.setCallId(call.callId);\n+    response.setStatus(status);\n \n-    if (status \u003d\u003d Status.SUCCESS) {\n+\n+    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n       try {\n+        response.build().writeDelimitedTo(out);\n         rv.write(out);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n-        setupResponse(response, call, Status.ERROR,\n+        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else {\n+      if (status \u003d\u003d RpcStatusProto.FATAL) {\n+        response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n+      }\n+      response.build().writeDelimitedTo(out);\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n     if (call.connection.useWrap) {\n-      wrapWithSasl(response, call);\n+      wrapWithSasl(responseBuf, call);\n     }\n-    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n+    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void setupResponse(ByteArrayOutputStream responseBuf,\n                             Call call, RpcStatusProto status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    responseBuf.reset();\n    DataOutputStream out \u003d new DataOutputStream(responseBuf);\n    RpcResponseHeaderProto.Builder response \u003d  \n        RpcResponseHeaderProto.newBuilder();\n    response.setCallId(call.callId);\n    response.setStatus(status);\n\n\n    if (status \u003d\u003d RpcStatusProto.SUCCESS) {\n      try {\n        response.build().writeDelimitedTo(out);\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(responseBuf, call, RpcStatusProto.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      if (status \u003d\u003d RpcStatusProto.FATAL) {\n        response.setServerIpcVersionNum(Server.CURRENT_VERSION);\n      }\n      response.build().writeDelimitedTo(out);\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(responseBuf, call);\n    }\n    call.setResponse(ByteBuffer.wrap(responseBuf.toByteArray()));\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
          "extendedDetails": {}
        }
      ]
    },
    "072bdd85d16509d2c0cc32b5cfae3739521a29e9": {
      "type": "Ybodychange",
      "commitMessage": "\t\tHADOOP-7776 Make the Ipc-Header in a RPC-Payload an explicit header (sanjay)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1197885 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/11/11 10:06 PM",
      "commitName": "072bdd85d16509d2c0cc32b5cfae3739521a29e9",
      "commitAuthor": "Sanjay Radia",
      "commitDateOld": "24/10/11 11:07 PM",
      "commitNameOld": "d19cfe01642f9582e1fe5d567beb480399c37a01",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 10.96,
      "commitsBetweenForRepo": 133,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,31 +1,31 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n-    out.writeInt(call.id);                // write call id\n+    out.writeInt(call.callId);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n       try {\n         rv.write(out);\n       } catch (Throwable t) {\n         LOG.warn(\"Error serializing call response for call \" + call, t);\n         // Call back to same function - this is OK since the\n         // buffer is reset at the top, and since status is changed\n         // to ERROR it won\u0027t infinite loop.\n         setupResponse(response, call, Status.ERROR,\n             null, t.getClass().getName(),\n             StringUtils.stringifyException(t));\n         return;\n       }\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(response, call);\n     }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.callId);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "common/src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/ipc/Server.java",
        "newPath": "common/src/java/org/apache/hadoop/ipc/Server.java"
      }
    },
    "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-7121. Exceptions while serializing IPC call responses are not handled well. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1129982 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/05/11 7:00 PM",
      "commitName": "e05a6d1dce1b83bc2abe4eb2efc1afd51c8facd2",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "26/05/11 12:48 AM",
      "commitNameOld": "2f6c03ad54725e59e3d18866cfaaea734bb37c82",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 5.76,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,31 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.id);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n-      rv.write(out);\n+      try {\n+        rv.write(out);\n+      } catch (Throwable t) {\n+        LOG.warn(\"Error serializing call response for call \" + call, t);\n+        // Call back to same function - this is OK since the\n+        // buffer is reset at the top, and since status is changed\n+        // to ERROR it won\u0027t infinite loop.\n+        setupResponse(response, call, Status.ERROR,\n+            null, t.getClass().getName(),\n+            StringUtils.stringifyException(t));\n+        return;\n+      }\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n     if (call.connection.useWrap) {\n       wrapWithSasl(response, call);\n     }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      try {\n        rv.write(out);\n      } catch (Throwable t) {\n        LOG.warn(\"Error serializing call response for call \" + call, t);\n        // Call back to same function - this is OK since the\n        // buffer is reset at the top, and since status is changed\n        // to ERROR it won\u0027t infinite loop.\n        setupResponse(response, call, Status.ERROR,\n            null, t.getClass().getName(),\n            StringUtils.stringifyException(t));\n        return;\n      }\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "4b9c956bc56cec2c5b669102340d0912e0db3517": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6674. Makes use of the SASL authentication options in the SASL RPC. Contributed by Jitendra Pandey.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@951624 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/06/10 5:34 PM",
      "commitName": "4b9c956bc56cec2c5b669102340d0912e0db3517",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "26/05/10 1:31 PM",
      "commitNameOld": "24a2f1fafe2e13963c510cc04b3177c300af8aae",
      "commitAuthorOld": "Jakob Homan",
      "daysBetweenCommits": 9.17,
      "commitsBetweenForRepo": 14,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.id);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n       rv.write(out);\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n-    wrapWithSasl(response, call);\n+    if (call.connection.useWrap) {\n+      wrapWithSasl(response, call);\n+    }\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      rv.write(out);\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    if (call.connection.useWrap) {\n      wrapWithSasl(response, call);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "940389afce6a1b9b9e1519aed528cbc444786756": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-6419. Adds SASL based authentication to RPC. Contributed by Kan Zhang.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@905860 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/02/10 5:30 PM",
      "commitName": "940389afce6a1b9b9e1519aed528cbc444786756",
      "commitAuthor": "Devaraj Das",
      "commitDateOld": "27/01/10 12:08 AM",
      "commitNameOld": "0c5734e4aca873f405fbf994e5fe7061e31731c8",
      "commitAuthorOld": "Owen O\u0027Malley",
      "daysBetweenCommits": 6.72,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,17 +1,18 @@\n   private void setupResponse(ByteArrayOutputStream response, \n                              Call call, Status status, \n                              Writable rv, String errorClass, String error) \n   throws IOException {\n     response.reset();\n     DataOutputStream out \u003d new DataOutputStream(response);\n     out.writeInt(call.id);                // write call id\n     out.writeInt(status.state);           // write status\n \n     if (status \u003d\u003d Status.SUCCESS) {\n       rv.write(out);\n     } else {\n       WritableUtils.writeString(out, errorClass);\n       WritableUtils.writeString(out, error);\n     }\n+    wrapWithSasl(response, call);\n     call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      rv.write(out);\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    wrapWithSasl(response, call);\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java",
      "extendedDetails": {}
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,17 @@\n+  private void setupResponse(ByteArrayOutputStream response, \n+                             Call call, Status status, \n+                             Writable rv, String errorClass, String error) \n+  throws IOException {\n+    response.reset();\n+    DataOutputStream out \u003d new DataOutputStream(response);\n+    out.writeInt(call.id);                // write call id\n+    out.writeInt(status.state);           // write status\n+\n+    if (status \u003d\u003d Status.SUCCESS) {\n+      rv.write(out);\n+    } else {\n+      WritableUtils.writeString(out, errorClass);\n+      WritableUtils.writeString(out, error);\n+    }\n+    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void setupResponse(ByteArrayOutputStream response, \n                             Call call, Status status, \n                             Writable rv, String errorClass, String error) \n  throws IOException {\n    response.reset();\n    DataOutputStream out \u003d new DataOutputStream(response);\n    out.writeInt(call.id);                // write call id\n    out.writeInt(status.state);           // write status\n\n    if (status \u003d\u003d Status.SUCCESS) {\n      rv.write(out);\n    } else {\n      WritableUtils.writeString(out, errorClass);\n      WritableUtils.writeString(out, error);\n    }\n    call.setResponse(ByteBuffer.wrap(response.toByteArray()));\n  }",
      "path": "src/java/org/apache/hadoop/ipc/Server.java"
    }
  }
}