{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceScheduler.java",
  "functionName": "onContainersAllocated",
  "functionId": "onContainersAllocated___containers-List__Container__",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
  "functionStartLine": 674,
  "functionEndLine": 699,
  "numCommitsSeen": 34,
  "timeTaken": 3258,
  "changeHistory": [
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
    "b8a7ef1b64392094562e7782e0fd092934724ad2",
    "40ab068eabe50875449d601471619a4e82fff86d",
    "1888318c89776f0bf354c1b13e3ee169e14ff638"
  ],
  "changeHistoryShort": {
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": "Ybodychange",
    "b8a7ef1b64392094562e7782e0fd092934724ad2": "Ybodychange",
    "40ab068eabe50875449d601471619a4e82fff86d": "Yfilerename",
    "1888318c89776f0bf354c1b13e3ee169e14ff638": "Yintroduced"
  },
  "changeHistoryDetails": {
    "f4d5d20286eb05449f6fd7cd6ff0554228205fe2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7486. Race condition in service AM that can cause NPE. Contributed by Jian He\n",
      "commitDate": "16/11/17 7:58 AM",
      "commitName": "f4d5d20286eb05449f6fd7cd6ff0554228205fe2",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "a6c4bd74b636d0715ffb4c1aca9ef4e49201aa02",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 9.77,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,26 @@\n     public void onContainersAllocated(List\u003cContainer\u003e containers) {\n       LOG.info(containers.size() + \" containers allocated. \");\n       for (Container container : containers) {\n         Component comp \u003d componentsById.get(container.getAllocationRequestId());\n         ComponentEvent event \u003d\n             new ComponentEvent(comp.getName(), CONTAINER_ALLOCATED)\n                 .setContainer(container);\n         dispatcher.getEventHandler().handle(event);\n-        Collection\u003cAMRMClient.ContainerRequest\u003e requests \u003d amRMClient\n-            .getMatchingRequests(container.getAllocationRequestId());\n-        LOG.info(\"[COMPONENT {}]: {} outstanding container requests.\",\n-            comp.getName(), requests.size());\n-        // remove the corresponding request\n-        if (requests.iterator().hasNext()) {\n-          LOG.info(\"[COMPONENT {}]: removing one container request.\", comp\n-              .getName());\n-          AMRMClient.ContainerRequest request \u003d requests.iterator().next();\n-          amRMClient.removeContainerRequest(request);\n+        try {\n+          Collection\u003cAMRMClient.ContainerRequest\u003e requests \u003d amRMClient\n+              .getMatchingRequests(container.getAllocationRequestId());\n+          LOG.info(\"[COMPONENT {}]: remove {} outstanding container requests \" +\n+                  \"for allocateId \" + container.getAllocationRequestId(),\n+              comp.getName(), requests.size());\n+          // remove the corresponding request\n+          if (requests.iterator().hasNext()) {\n+            AMRMClient.ContainerRequest request \u003d requests.iterator().next();\n+            amRMClient.removeContainerRequest(request);\n+          }\n+        } catch(Exception e) {\n+          //TODO Due to YARN-7490, exception may be thrown, catch and ignore for\n+          //now.\n+          LOG.error(\"Exception when removing the matching requests. \", e);\n         }\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainersAllocated(List\u003cContainer\u003e containers) {\n      LOG.info(containers.size() + \" containers allocated. \");\n      for (Container container : containers) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_ALLOCATED)\n                .setContainer(container);\n        dispatcher.getEventHandler().handle(event);\n        try {\n          Collection\u003cAMRMClient.ContainerRequest\u003e requests \u003d amRMClient\n              .getMatchingRequests(container.getAllocationRequestId());\n          LOG.info(\"[COMPONENT {}]: remove {} outstanding container requests \" +\n                  \"for allocateId \" + container.getAllocationRequestId(),\n              comp.getName(), requests.size());\n          // remove the corresponding request\n          if (requests.iterator().hasNext()) {\n            AMRMClient.ContainerRequest request \u003d requests.iterator().next();\n            amRMClient.removeContainerRequest(request);\n          }\n        } catch(Exception e) {\n          //TODO Due to YARN-7490, exception may be thrown, catch and ignore for\n          //now.\n          LOG.error(\"Exception when removing the matching requests. \", e);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "b8a7ef1b64392094562e7782e0fd092934724ad2": {
      "type": "Ybodychange",
      "commitMessage": "YARN-6744. Recover component information on YARN native services AM restart. Contributed by Billie Rinaldi\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "b8a7ef1b64392094562e7782e0fd092934724ad2",
      "commitAuthor": "Jian He",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "ce74e64363abc64561263be70a923ab3e67f043f",
      "commitAuthorOld": "Billie Rinaldi",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,21 @@\n     public void onContainersAllocated(List\u003cContainer\u003e containers) {\n       LOG.info(containers.size() + \" containers allocated. \");\n       for (Container container : containers) {\n         Component comp \u003d componentsById.get(container.getAllocationRequestId());\n         ComponentEvent event \u003d\n             new ComponentEvent(comp.getName(), CONTAINER_ALLOCATED)\n                 .setContainer(container);\n         dispatcher.getEventHandler().handle(event);\n-        LOG.info(\"[COMPONENT {}]: {} outstanding container requests.\",\n-            comp.getName(),\n-            amRMClient.getMatchingRequests(container.getAllocationRequestId()).size());\n-        // remove the corresponding request\n-        Collection\u003cAMRMClient.ContainerRequest\u003e collection \u003d amRMClient\n+        Collection\u003cAMRMClient.ContainerRequest\u003e requests \u003d amRMClient\n             .getMatchingRequests(container.getAllocationRequestId());\n-        if (collection.iterator().hasNext()) {\n-          AMRMClient.ContainerRequest request \u003d collection.iterator().next();\n+        LOG.info(\"[COMPONENT {}]: {} outstanding container requests.\",\n+            comp.getName(), requests.size());\n+        // remove the corresponding request\n+        if (requests.iterator().hasNext()) {\n+          LOG.info(\"[COMPONENT {}]: removing one container request.\", comp\n+              .getName());\n+          AMRMClient.ContainerRequest request \u003d requests.iterator().next();\n           amRMClient.removeContainerRequest(request);\n         }\n-\n       }\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainersAllocated(List\u003cContainer\u003e containers) {\n      LOG.info(containers.size() + \" containers allocated. \");\n      for (Container container : containers) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_ALLOCATED)\n                .setContainer(container);\n        dispatcher.getEventHandler().handle(event);\n        Collection\u003cAMRMClient.ContainerRequest\u003e requests \u003d amRMClient\n            .getMatchingRequests(container.getAllocationRequestId());\n        LOG.info(\"[COMPONENT {}]: {} outstanding container requests.\",\n            comp.getName(), requests.size());\n        // remove the corresponding request\n        if (requests.iterator().hasNext()) {\n          LOG.info(\"[COMPONENT {}]: removing one container request.\", comp\n              .getName());\n          AMRMClient.ContainerRequest request \u003d requests.iterator().next();\n          amRMClient.removeContainerRequest(request);\n        }\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {}
    },
    "40ab068eabe50875449d601471619a4e82fff86d": {
      "type": "Yfilerename",
      "commitMessage": "YARN-7091. Rename application to service in yarn-native-services. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "40ab068eabe50875449d601471619a4e82fff86d",
      "commitAuthor": "Billie Rinaldi",
      "commitDateOld": "06/11/17 1:30 PM",
      "commitNameOld": "2ba38ce8ecb1cf3836fab48cdb2c5ae7e1b5427d",
      "commitAuthorOld": "Gour Saha",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    public void onContainersAllocated(List\u003cContainer\u003e containers) {\n      LOG.info(containers.size() + \" containers allocated. \");\n      for (Container container : containers) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_ALLOCATED)\n                .setContainer(container);\n        dispatcher.getEventHandler().handle(event);\n        LOG.info(\"[COMPONENT {}]: {} outstanding container requests.\",\n            comp.getName(),\n            amRMClient.getMatchingRequests(container.getAllocationRequestId()).size());\n        // remove the corresponding request\n        Collection\u003cAMRMClient.ContainerRequest\u003e collection \u003d amRMClient\n            .getMatchingRequests(container.getAllocationRequestId());\n        if (collection.iterator().hasNext()) {\n          AMRMClient.ContainerRequest request \u003d collection.iterator().next();\n          amRMClient.removeContainerRequest(request);\n        }\n\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-services/hadoop-yarn-services-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
      }
    },
    "1888318c89776f0bf354c1b13e3ee169e14ff638": {
      "type": "Yintroduced",
      "commitMessage": "YARN-6903. Yarn-native-service framework core rewrite. Contributed by Jian He\n",
      "commitDate": "06/11/17 1:30 PM",
      "commitName": "1888318c89776f0bf354c1b13e3ee169e14ff638",
      "commitAuthor": "Billie Rinaldi",
      "diff": "@@ -0,0 +1,21 @@\n+    public void onContainersAllocated(List\u003cContainer\u003e containers) {\n+      LOG.info(containers.size() + \" containers allocated. \");\n+      for (Container container : containers) {\n+        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n+        ComponentEvent event \u003d\n+            new ComponentEvent(comp.getName(), CONTAINER_ALLOCATED)\n+                .setContainer(container);\n+        dispatcher.getEventHandler().handle(event);\n+        LOG.info(\"[COMPONENT {}]: {} outstanding container requests.\",\n+            comp.getName(),\n+            amRMClient.getMatchingRequests(container.getAllocationRequestId()).size());\n+        // remove the corresponding request\n+        Collection\u003cAMRMClient.ContainerRequest\u003e collection \u003d amRMClient\n+            .getMatchingRequests(container.getAllocationRequestId());\n+        if (collection.iterator().hasNext()) {\n+          AMRMClient.ContainerRequest request \u003d collection.iterator().next();\n+          amRMClient.removeContainerRequest(request);\n+        }\n+\n+      }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void onContainersAllocated(List\u003cContainer\u003e containers) {\n      LOG.info(containers.size() + \" containers allocated. \");\n      for (Container container : containers) {\n        Component comp \u003d componentsById.get(container.getAllocationRequestId());\n        ComponentEvent event \u003d\n            new ComponentEvent(comp.getName(), CONTAINER_ALLOCATED)\n                .setContainer(container);\n        dispatcher.getEventHandler().handle(event);\n        LOG.info(\"[COMPONENT {}]: {} outstanding container requests.\",\n            comp.getName(),\n            amRMClient.getMatchingRequests(container.getAllocationRequestId()).size());\n        // remove the corresponding request\n        Collection\u003cAMRMClient.ContainerRequest\u003e collection \u003d amRMClient\n            .getMatchingRequests(container.getAllocationRequestId());\n        if (collection.iterator().hasNext()) {\n          AMRMClient.ContainerRequest request \u003d collection.iterator().next();\n          amRMClient.removeContainerRequest(request);\n        }\n\n      }\n    }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-applications/hadoop-yarn-slider/hadoop-yarn-slider-core/src/main/java/org/apache/hadoop/yarn/service/ServiceScheduler.java"
    }
  }
}