{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NetUtils.java",
  "functionName": "getCanonicalUri",
  "functionId": "getCanonicalUri___uri-URI__defaultPort-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java",
  "functionStartLine": 256,
  "functionEndLine": 277,
  "numCommitsSeen": 39,
  "timeTaken": 1261,
  "changeHistory": [
    "4bb572d3366c478924fa95e513858e8a8c793774"
  ],
  "changeHistoryShort": {
    "4bb572d3366c478924fa95e513858e8a8c793774": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4bb572d3366c478924fa95e513858e8a8c793774": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7808. Port HADOOP-7510 - Add configurable option to use original hostname in token instead of IP to allow server IP change. Contributed by Daryn Sharp.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1227737 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "05/01/12 10:41 AM",
      "commitName": "4bb572d3366c478924fa95e513858e8a8c793774",
      "commitAuthor": "Suresh Srinivas",
      "diff": "@@ -0,0 +1,22 @@\n+  public static URI getCanonicalUri(URI uri, int defaultPort) {\n+    // skip if there is no authority, ie. \"file\" scheme or relative uri\n+    String host \u003d uri.getHost();\n+    if (host \u003d\u003d null) {\n+      return uri;\n+    }\n+    String fqHost \u003d canonicalizeHost(host);\n+    int port \u003d uri.getPort();\n+    // short out if already canonical with a port\n+    if (host.equals(fqHost) \u0026\u0026 port !\u003d -1) {\n+      return uri;\n+    }\n+    // reconstruct the uri with the canonical host and port\n+    try {\n+      uri \u003d new URI(uri.getScheme(), uri.getUserInfo(),\n+          fqHost, (port \u003d\u003d -1) ? defaultPort : port,\n+          uri.getPath(), uri.getQuery(), uri.getFragment());\n+    } catch (URISyntaxException e) {\n+      throw new IllegalArgumentException(e);\n+    }\n+    return uri;\n+  }  \n\\ No newline at end of file\n",
      "actualSource": "  public static URI getCanonicalUri(URI uri, int defaultPort) {\n    // skip if there is no authority, ie. \"file\" scheme or relative uri\n    String host \u003d uri.getHost();\n    if (host \u003d\u003d null) {\n      return uri;\n    }\n    String fqHost \u003d canonicalizeHost(host);\n    int port \u003d uri.getPort();\n    // short out if already canonical with a port\n    if (host.equals(fqHost) \u0026\u0026 port !\u003d -1) {\n      return uri;\n    }\n    // reconstruct the uri with the canonical host and port\n    try {\n      uri \u003d new URI(uri.getScheme(), uri.getUserInfo(),\n          fqHost, (port \u003d\u003d -1) ? defaultPort : port,\n          uri.getPath(), uri.getQuery(), uri.getFragment());\n    } catch (URISyntaxException e) {\n      throw new IllegalArgumentException(e);\n    }\n    return uri;\n  }  ",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/net/NetUtils.java"
    }
  }
}