{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSEditLog.java",
  "functionName": "startLogSegment",
  "functionId": "startLogSegment___txid-long__abortCurrentLogSegment-boolean__layoutVersion-int",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
  "functionStartLine": 1357,
  "functionEndLine": 1381,
  "numCommitsSeen": 287,
  "timeTaken": 5585,
  "changeHistory": [
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
    "706394d03992b394e9f907aff2155df493e4ea4e",
    "6be13332db5342465c2f279a5984b4b8a33420fc",
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63"
  ],
  "changeHistoryShort": {
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": "Ymultichange(Yparameterchange,Ybodychange)",
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": "Ybodychange",
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "706394d03992b394e9f907aff2155df493e4ea4e": "Ybodychange",
    "6be13332db5342465c2f279a5984b4b8a33420fc": "Ybodychange",
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": "Yintroduced"
  },
  "changeHistoryDetails": {
    "71de367c5e80ea76d1e8d21f0216cd6b879dcee5": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
      "commitDate": "06/06/15 9:43 AM",
      "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
          "commitDate": "06/06/15 9:43 AM",
          "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
          "commitAuthor": "cnauroth",
          "commitDateOld": "27/05/15 3:42 PM",
          "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 9.75,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public synchronized void startLogSegment(long txid, \n-      boolean abortCurrentLogSegment) throws IOException {\n+      boolean abortCurrentLogSegment, int layoutVersion) throws IOException {\n     LOG.info(\"Started a new log segment at txid \" + txid);\n     if (isSegmentOpen()) {\n       if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n         //In sync with the NN, so end and finalize the current segment`\n         endCurrentLogSegment(false);\n       } else {\n         //Missed some transactions: probably lost contact with NN temporarily.\n         final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n             + \" since only up to txid \" + getLastWrittenTxId()\n             + \" have been written in the log segment starting at \"\n             + getCurSegmentTxId() + \".\";\n         if (abortCurrentLogSegment) {\n           //Mark the current segment as aborted.\n           LOG.warn(mess);\n           abortCurrentLogSegment();\n         } else {\n           throw new IOException(mess);\n         }\n       }\n     }\n     setNextTxId(txid);\n-    startLogSegment(txid);\n+    startLogSegment(txid, layoutVersion);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void startLogSegment(long txid, \n      boolean abortCurrentLogSegment, int layoutVersion) throws IOException {\n    LOG.info(\"Started a new log segment at txid \" + txid);\n    if (isSegmentOpen()) {\n      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n        //In sync with the NN, so end and finalize the current segment`\n        endCurrentLogSegment(false);\n      } else {\n        //Missed some transactions: probably lost contact with NN temporarily.\n        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n            + \" since only up to txid \" + getLastWrittenTxId()\n            + \" have been written in the log segment starting at \"\n            + getCurSegmentTxId() + \".\";\n        if (abortCurrentLogSegment) {\n          //Mark the current segment as aborted.\n          LOG.warn(mess);\n          abortCurrentLogSegment();\n        } else {\n          throw new IOException(mess);\n        }\n      }\n    }\n    setNextTxId(txid);\n    startLogSegment(txid, layoutVersion);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[txid-long, abortCurrentLogSegment-boolean]",
            "newValue": "[txid-long, abortCurrentLogSegment-boolean, layoutVersion-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-8432. Introduce a minimum compatible layout version to allow downgrade in more rolling upgrade use cases. Contributed by Chris Nauroth.\n",
          "commitDate": "06/06/15 9:43 AM",
          "commitName": "71de367c5e80ea76d1e8d21f0216cd6b879dcee5",
          "commitAuthor": "cnauroth",
          "commitDateOld": "27/05/15 3:42 PM",
          "commitNameOld": "4928f5473394981829e5ffd4b16ea0801baf5c45",
          "commitAuthorOld": "Andrew Wang",
          "daysBetweenCommits": 9.75,
          "commitsBetweenForRepo": 88,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,25 +1,25 @@\n   public synchronized void startLogSegment(long txid, \n-      boolean abortCurrentLogSegment) throws IOException {\n+      boolean abortCurrentLogSegment, int layoutVersion) throws IOException {\n     LOG.info(\"Started a new log segment at txid \" + txid);\n     if (isSegmentOpen()) {\n       if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n         //In sync with the NN, so end and finalize the current segment`\n         endCurrentLogSegment(false);\n       } else {\n         //Missed some transactions: probably lost contact with NN temporarily.\n         final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n             + \" since only up to txid \" + getLastWrittenTxId()\n             + \" have been written in the log segment starting at \"\n             + getCurSegmentTxId() + \".\";\n         if (abortCurrentLogSegment) {\n           //Mark the current segment as aborted.\n           LOG.warn(mess);\n           abortCurrentLogSegment();\n         } else {\n           throw new IOException(mess);\n         }\n       }\n     }\n     setNextTxId(txid);\n-    startLogSegment(txid);\n+    startLogSegment(txid, layoutVersion);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void startLogSegment(long txid, \n      boolean abortCurrentLogSegment, int layoutVersion) throws IOException {\n    LOG.info(\"Started a new log segment at txid \" + txid);\n    if (isSegmentOpen()) {\n      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n        //In sync with the NN, so end and finalize the current segment`\n        endCurrentLogSegment(false);\n      } else {\n        //Missed some transactions: probably lost contact with NN temporarily.\n        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n            + \" since only up to txid \" + getLastWrittenTxId()\n            + \" have been written in the log segment starting at \"\n            + getCurSegmentTxId() + \".\";\n        if (abortCurrentLogSegment) {\n          //Mark the current segment as aborted.\n          LOG.warn(mess);\n          abortCurrentLogSegment();\n        } else {\n          throw new IOException(mess);\n        }\n      }\n    }\n    setNextTxId(txid);\n    startLogSegment(txid, layoutVersion);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "cea7bbc630deede93dbe6a1bbda56ad49de4f3de": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-4122. Cleanup HDFS logs and reduce the size of logged messages. Contributed by Suresh Srinivas.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1403120 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/10/12 4:10 PM",
      "commitName": "cea7bbc630deede93dbe6a1bbda56ad49de4f3de",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "15/10/12 6:59 PM",
      "commitNameOld": "557ffe2101325438f15dbb218128d327984ecb11",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 12.88,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,25 +1,25 @@\n   public synchronized void startLogSegment(long txid, \n       boolean abortCurrentLogSegment) throws IOException {\n-    LOG.info(\"Namenode started a new log segment at txid \" + txid);\n+    LOG.info(\"Started a new log segment at txid \" + txid);\n     if (isSegmentOpen()) {\n       if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n         //In sync with the NN, so end and finalize the current segment`\n         endCurrentLogSegment(false);\n       } else {\n         //Missed some transactions: probably lost contact with NN temporarily.\n         final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n             + \" since only up to txid \" + getLastWrittenTxId()\n             + \" have been written in the log segment starting at \"\n             + getCurSegmentTxId() + \".\";\n         if (abortCurrentLogSegment) {\n           //Mark the current segment as aborted.\n           LOG.warn(mess);\n           abortCurrentLogSegment();\n         } else {\n           throw new IOException(mess);\n         }\n       }\n     }\n     setNextTxId(txid);\n     startLogSegment(txid);\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public synchronized void startLogSegment(long txid, \n      boolean abortCurrentLogSegment) throws IOException {\n    LOG.info(\"Started a new log segment at txid \" + txid);\n    if (isSegmentOpen()) {\n      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n        //In sync with the NN, so end and finalize the current segment`\n        endCurrentLogSegment(false);\n      } else {\n        //Missed some transactions: probably lost contact with NN temporarily.\n        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n            + \" since only up to txid \" + getLastWrittenTxId()\n            + \" have been written in the log segment starting at \"\n            + getCurSegmentTxId() + \".\";\n        if (abortCurrentLogSegment) {\n          //Mark the current segment as aborted.\n          LOG.warn(mess);\n          abortCurrentLogSegment();\n        } else {\n          throw new IOException(mess);\n        }\n      }\n    }\n    setNextTxId(txid);\n    startLogSegment(txid);\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "841fdc5628fbba341efe0bfc6763fe12e7fca7f4": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-3273. Refactor BackupImage and FSEditLog, and rename JournalListener.rollLogs(..) to startLogSegment(..). \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326016 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/04/12 4:41 PM",
      "commitName": "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
      "commitAuthor": "Tsz-wo Sze",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-3273. Refactor BackupImage and FSEditLog, and rename JournalListener.rollLogs(..) to startLogSegment(..). \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/04/12 4:41 PM",
          "commitName": "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,25 @@\n-  synchronized void startLogSegment(final long segmentTxId,\n-      boolean writeHeaderTxn) throws IOException {\n-    LOG.info(\"Starting log segment at \" + segmentTxId);\n-    Preconditions.checkArgument(segmentTxId \u003e 0,\n-        \"Bad txid: %s\", segmentTxId);\n-    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n-        \"Bad state: %s\", state);\n-    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n-        \"Cannot start writing to log segment \" + segmentTxId +\n-        \" when previous log segment started at \" + curSegmentTxId);\n-    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n-        \"Cannot start log segment at txid %s when next expected \" +\n-        \"txid is %s\", segmentTxId, txid + 1);\n-    \n-    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n-\n-    // TODO no need to link this back to storage anymore!\n-    // See HDFS-2174.\n-    storage.attemptRestoreRemovedStorage();\n-    \n-    try {\n-      editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n-    } catch (IOException ex) {\n-      throw new IOException(\"Unable to start log segment \" +\n-          segmentTxId + \": too few journals successfully started.\", ex);\n+  public synchronized void startLogSegment(long txid, \n+      boolean abortCurrentLogSegment) throws IOException {\n+    LOG.info(\"Namenode started a new log segment at txid \" + txid);\n+    if (isSegmentOpen()) {\n+      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n+        //In sync with the NN, so end and finalize the current segment`\n+        endCurrentLogSegment(false);\n+      } else {\n+        //Missed some transactions: probably lost contact with NN temporarily.\n+        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n+            + \" since only up to txid \" + getLastWrittenTxId()\n+            + \" have been written in the log segment starting at \"\n+            + getCurSegmentTxId() + \".\";\n+        if (abortCurrentLogSegment) {\n+          //Mark the current segment as aborted.\n+          LOG.warn(mess);\n+          abortCurrentLogSegment();\n+        } else {\n+          throw new IOException(mess);\n+        }\n+      }\n     }\n-    \n-    curSegmentTxId \u003d segmentTxId;\n-    state \u003d State.IN_SEGMENT;\n-\n-    if (writeHeaderTxn) {\n-      logEdit(LogSegmentOp.getInstance(cache.get(),\n-          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n-      logSync();\n-    }\n+    setNextTxId(txid);\n+    startLogSegment(txid);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void startLogSegment(long txid, \n      boolean abortCurrentLogSegment) throws IOException {\n    LOG.info(\"Namenode started a new log segment at txid \" + txid);\n    if (isSegmentOpen()) {\n      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n        //In sync with the NN, so end and finalize the current segment`\n        endCurrentLogSegment(false);\n      } else {\n        //Missed some transactions: probably lost contact with NN temporarily.\n        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n            + \" since only up to txid \" + getLastWrittenTxId()\n            + \" have been written in the log segment starting at \"\n            + getCurSegmentTxId() + \".\";\n        if (abortCurrentLogSegment) {\n          //Mark the current segment as aborted.\n          LOG.warn(mess);\n          abortCurrentLogSegment();\n        } else {\n          throw new IOException(mess);\n        }\n      }\n    }\n    setNextTxId(txid);\n    startLogSegment(txid);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[segmentTxId-long(modifiers-final), writeHeaderTxn-boolean]",
            "newValue": "[txid-long, abortCurrentLogSegment-boolean]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-3273. Refactor BackupImage and FSEditLog, and rename JournalListener.rollLogs(..) to startLogSegment(..). \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/04/12 4:41 PM",
          "commitName": "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,25 @@\n-  synchronized void startLogSegment(final long segmentTxId,\n-      boolean writeHeaderTxn) throws IOException {\n-    LOG.info(\"Starting log segment at \" + segmentTxId);\n-    Preconditions.checkArgument(segmentTxId \u003e 0,\n-        \"Bad txid: %s\", segmentTxId);\n-    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n-        \"Bad state: %s\", state);\n-    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n-        \"Cannot start writing to log segment \" + segmentTxId +\n-        \" when previous log segment started at \" + curSegmentTxId);\n-    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n-        \"Cannot start log segment at txid %s when next expected \" +\n-        \"txid is %s\", segmentTxId, txid + 1);\n-    \n-    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n-\n-    // TODO no need to link this back to storage anymore!\n-    // See HDFS-2174.\n-    storage.attemptRestoreRemovedStorage();\n-    \n-    try {\n-      editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n-    } catch (IOException ex) {\n-      throw new IOException(\"Unable to start log segment \" +\n-          segmentTxId + \": too few journals successfully started.\", ex);\n+  public synchronized void startLogSegment(long txid, \n+      boolean abortCurrentLogSegment) throws IOException {\n+    LOG.info(\"Namenode started a new log segment at txid \" + txid);\n+    if (isSegmentOpen()) {\n+      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n+        //In sync with the NN, so end and finalize the current segment`\n+        endCurrentLogSegment(false);\n+      } else {\n+        //Missed some transactions: probably lost contact with NN temporarily.\n+        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n+            + \" since only up to txid \" + getLastWrittenTxId()\n+            + \" have been written in the log segment starting at \"\n+            + getCurSegmentTxId() + \".\";\n+        if (abortCurrentLogSegment) {\n+          //Mark the current segment as aborted.\n+          LOG.warn(mess);\n+          abortCurrentLogSegment();\n+        } else {\n+          throw new IOException(mess);\n+        }\n+      }\n     }\n-    \n-    curSegmentTxId \u003d segmentTxId;\n-    state \u003d State.IN_SEGMENT;\n-\n-    if (writeHeaderTxn) {\n-      logEdit(LogSegmentOp.getInstance(cache.get(),\n-          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n-      logSync();\n-    }\n+    setNextTxId(txid);\n+    startLogSegment(txid);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void startLogSegment(long txid, \n      boolean abortCurrentLogSegment) throws IOException {\n    LOG.info(\"Namenode started a new log segment at txid \" + txid);\n    if (isSegmentOpen()) {\n      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n        //In sync with the NN, so end and finalize the current segment`\n        endCurrentLogSegment(false);\n      } else {\n        //Missed some transactions: probably lost contact with NN temporarily.\n        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n            + \" since only up to txid \" + getLastWrittenTxId()\n            + \" have been written in the log segment starting at \"\n            + getCurSegmentTxId() + \".\";\n        if (abortCurrentLogSegment) {\n          //Mark the current segment as aborted.\n          LOG.warn(mess);\n          abortCurrentLogSegment();\n        } else {\n          throw new IOException(mess);\n        }\n      }\n    }\n    setNextTxId(txid);\n    startLogSegment(txid);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {
            "oldValue": "[synchronized]",
            "newValue": "[public, synchronized]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-3273. Refactor BackupImage and FSEditLog, and rename JournalListener.rollLogs(..) to startLogSegment(..). \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1326016 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "13/04/12 4:41 PM",
          "commitName": "841fdc5628fbba341efe0bfc6763fe12e7fca7f4",
          "commitAuthor": "Tsz-wo Sze",
          "commitDateOld": "12/04/12 2:11 PM",
          "commitNameOld": "07a436744588d131d8ef31abab3093aa59b4d531",
          "commitAuthorOld": "Aaron Myers",
          "daysBetweenCommits": 1.1,
          "commitsBetweenForRepo": 9,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,36 +1,25 @@\n-  synchronized void startLogSegment(final long segmentTxId,\n-      boolean writeHeaderTxn) throws IOException {\n-    LOG.info(\"Starting log segment at \" + segmentTxId);\n-    Preconditions.checkArgument(segmentTxId \u003e 0,\n-        \"Bad txid: %s\", segmentTxId);\n-    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n-        \"Bad state: %s\", state);\n-    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n-        \"Cannot start writing to log segment \" + segmentTxId +\n-        \" when previous log segment started at \" + curSegmentTxId);\n-    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n-        \"Cannot start log segment at txid %s when next expected \" +\n-        \"txid is %s\", segmentTxId, txid + 1);\n-    \n-    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n-\n-    // TODO no need to link this back to storage anymore!\n-    // See HDFS-2174.\n-    storage.attemptRestoreRemovedStorage();\n-    \n-    try {\n-      editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n-    } catch (IOException ex) {\n-      throw new IOException(\"Unable to start log segment \" +\n-          segmentTxId + \": too few journals successfully started.\", ex);\n+  public synchronized void startLogSegment(long txid, \n+      boolean abortCurrentLogSegment) throws IOException {\n+    LOG.info(\"Namenode started a new log segment at txid \" + txid);\n+    if (isSegmentOpen()) {\n+      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n+        //In sync with the NN, so end and finalize the current segment`\n+        endCurrentLogSegment(false);\n+      } else {\n+        //Missed some transactions: probably lost contact with NN temporarily.\n+        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n+            + \" since only up to txid \" + getLastWrittenTxId()\n+            + \" have been written in the log segment starting at \"\n+            + getCurSegmentTxId() + \".\";\n+        if (abortCurrentLogSegment) {\n+          //Mark the current segment as aborted.\n+          LOG.warn(mess);\n+          abortCurrentLogSegment();\n+        } else {\n+          throw new IOException(mess);\n+        }\n+      }\n     }\n-    \n-    curSegmentTxId \u003d segmentTxId;\n-    state \u003d State.IN_SEGMENT;\n-\n-    if (writeHeaderTxn) {\n-      logEdit(LogSegmentOp.getInstance(cache.get(),\n-          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n-      logSync();\n-    }\n+    setNextTxId(txid);\n+    startLogSegment(txid);\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public synchronized void startLogSegment(long txid, \n      boolean abortCurrentLogSegment) throws IOException {\n    LOG.info(\"Namenode started a new log segment at txid \" + txid);\n    if (isSegmentOpen()) {\n      if (getLastWrittenTxId() \u003d\u003d txid - 1) {\n        //In sync with the NN, so end and finalize the current segment`\n        endCurrentLogSegment(false);\n      } else {\n        //Missed some transactions: probably lost contact with NN temporarily.\n        final String mess \u003d \"Cannot start a new log segment at txid \" + txid\n            + \" since only up to txid \" + getLastWrittenTxId()\n            + \" have been written in the log segment starting at \"\n            + getCurSegmentTxId() + \".\";\n        if (abortCurrentLogSegment) {\n          //Mark the current segment as aborted.\n          LOG.warn(mess);\n          abortCurrentLogSegment();\n        } else {\n          throw new IOException(mess);\n        }\n      }\n    }\n    setNextTxId(txid);\n    startLogSegment(txid);\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
          "extendedDetails": {}
        }
      ]
    },
    "706394d03992b394e9f907aff2155df493e4ea4e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-3004. Implement Recovery Mode. Contributed by Colin Patrick McCabe\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1311394 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/04/12 12:39 PM",
      "commitName": "706394d03992b394e9f907aff2155df493e4ea4e",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "02/04/12 5:55 PM",
      "commitNameOld": "e449de0526ce0aa58bdd0f513b0e2a744a4bbda1",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 6.78,
      "commitsBetweenForRepo": 66,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   synchronized void startLogSegment(final long segmentTxId,\n       boolean writeHeaderTxn) throws IOException {\n     LOG.info(\"Starting log segment at \" + segmentTxId);\n     Preconditions.checkArgument(segmentTxId \u003e 0,\n         \"Bad txid: %s\", segmentTxId);\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n     Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n         \"Cannot start writing to log segment \" + segmentTxId +\n         \" when previous log segment started at \" + curSegmentTxId);\n     Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n         \"Cannot start log segment at txid %s when next expected \" +\n         \"txid is %s\", segmentTxId, txid + 1);\n     \n     numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n \n     // TODO no need to link this back to storage anymore!\n     // See HDFS-2174.\n     storage.attemptRestoreRemovedStorage();\n     \n     try {\n       editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n     } catch (IOException ex) {\n       throw new IOException(\"Unable to start log segment \" +\n           segmentTxId + \": too few journals successfully started.\", ex);\n     }\n     \n     curSegmentTxId \u003d segmentTxId;\n     state \u003d State.IN_SEGMENT;\n \n     if (writeHeaderTxn) {\n-      logEdit(LogSegmentOp.getInstance(\n+      logEdit(LogSegmentOp.getInstance(cache.get(),\n           FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n       logSync();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void startLogSegment(final long segmentTxId,\n      boolean writeHeaderTxn) throws IOException {\n    LOG.info(\"Starting log segment at \" + segmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003e 0,\n        \"Bad txid: %s\", segmentTxId);\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n        \"Cannot start writing to log segment \" + segmentTxId +\n        \" when previous log segment started at \" + curSegmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n        \"Cannot start log segment at txid %s when next expected \" +\n        \"txid is %s\", segmentTxId, txid + 1);\n    \n    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n\n    // TODO no need to link this back to storage anymore!\n    // See HDFS-2174.\n    storage.attemptRestoreRemovedStorage();\n    \n    try {\n      editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n    } catch (IOException ex) {\n      throw new IOException(\"Unable to start log segment \" +\n          segmentTxId + \": too few journals successfully started.\", ex);\n    }\n    \n    curSegmentTxId \u003d segmentTxId;\n    state \u003d State.IN_SEGMENT;\n\n    if (writeHeaderTxn) {\n      logEdit(LogSegmentOp.getInstance(cache.get(),\n          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n      logSync();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "6be13332db5342465c2f279a5984b4b8a33420fc": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2853. HA: NN fails to start if the shared edits dir is marked required. Contributed by Aaron T. Myers.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1238134 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/01/12 6:17 PM",
      "commitName": "6be13332db5342465c2f279a5984b4b8a33420fc",
      "commitAuthor": "Eli Collins",
      "commitDateOld": "11/01/12 12:32 AM",
      "commitNameOld": "4f1bf2fe23e53ff4b8550882d19f2cf1dd477926",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 19.74,
      "commitsBetweenForRepo": 121,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,36 @@\n   synchronized void startLogSegment(final long segmentTxId,\n       boolean writeHeaderTxn) throws IOException {\n     LOG.info(\"Starting log segment at \" + segmentTxId);\n     Preconditions.checkArgument(segmentTxId \u003e 0,\n         \"Bad txid: %s\", segmentTxId);\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n     Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n         \"Cannot start writing to log segment \" + segmentTxId +\n         \" when previous log segment started at \" + curSegmentTxId);\n     Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n         \"Cannot start log segment at txid %s when next expected \" +\n         \"txid is %s\", segmentTxId, txid + 1);\n     \n     numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n \n     // TODO no need to link this back to storage anymore!\n     // See HDFS-2174.\n     storage.attemptRestoreRemovedStorage();\n     \n     try {\n       editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n     } catch (IOException ex) {\n       throw new IOException(\"Unable to start log segment \" +\n-          segmentTxId + \": no journals successfully started.\");\n+          segmentTxId + \": too few journals successfully started.\", ex);\n     }\n     \n     curSegmentTxId \u003d segmentTxId;\n     state \u003d State.IN_SEGMENT;\n \n     if (writeHeaderTxn) {\n       logEdit(LogSegmentOp.getInstance(\n           FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n       logSync();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void startLogSegment(final long segmentTxId,\n      boolean writeHeaderTxn) throws IOException {\n    LOG.info(\"Starting log segment at \" + segmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003e 0,\n        \"Bad txid: %s\", segmentTxId);\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n        \"Cannot start writing to log segment \" + segmentTxId +\n        \" when previous log segment started at \" + curSegmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n        \"Cannot start log segment at txid %s when next expected \" +\n        \"txid is %s\", segmentTxId, txid + 1);\n    \n    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n\n    // TODO no need to link this back to storage anymore!\n    // See HDFS-2174.\n    storage.attemptRestoreRemovedStorage();\n    \n    try {\n      editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n    } catch (IOException ex) {\n      throw new IOException(\"Unable to start log segment \" +\n          segmentTxId + \": too few journals successfully started.\", ex);\n    }\n    \n    curSegmentTxId \u003d segmentTxId;\n    state \u003d State.IN_SEGMENT;\n\n    if (writeHeaderTxn) {\n      logEdit(LogSegmentOp.getInstance(\n          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n      logSync();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "1ae5b5e338ef383c5642e2f04b927871c7b184f6": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2158. Add JournalSet to manage the set of journals.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1177473 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/09/11 6:14 PM",
      "commitName": "1ae5b5e338ef383c5642e2f04b927871c7b184f6",
      "commitAuthor": "Jitendra Nath Pandey",
      "commitDateOld": "06/09/11 1:27 PM",
      "commitNameOld": "bdc3720d5b67a1c8fc2dfb29be16e4155c0e7f15",
      "commitAuthorOld": "Jitendra Nath Pandey",
      "daysBetweenCommits": 23.2,
      "commitsBetweenForRepo": 169,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,36 @@\n   synchronized void startLogSegment(final long segmentTxId,\n       boolean writeHeaderTxn) throws IOException {\n     LOG.info(\"Starting log segment at \" + segmentTxId);\n     Preconditions.checkArgument(segmentTxId \u003e 0,\n         \"Bad txid: %s\", segmentTxId);\n     Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n         \"Bad state: %s\", state);\n     Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n         \"Cannot start writing to log segment \" + segmentTxId +\n         \" when previous log segment started at \" + curSegmentTxId);\n     Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n         \"Cannot start log segment at txid %s when next expected \" +\n         \"txid is %s\", segmentTxId, txid + 1);\n     \n     numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n \n     // TODO no need to link this back to storage anymore!\n     // See HDFS-2174.\n     storage.attemptRestoreRemovedStorage();\n     \n-    mapJournalsAndReportErrors(new JournalClosure() {\n-      @Override\n-      public void apply(JournalAndStream jas) throws IOException {\n-        jas.startLogSegment(segmentTxId);\n-      }\n-    }, \"starting log segment \" + segmentTxId);\n-\n-    if (countActiveJournals() \u003d\u003d 0) {\n+    try {\n+      editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n+    } catch (IOException ex) {\n       throw new IOException(\"Unable to start log segment \" +\n           segmentTxId + \": no journals successfully started.\");\n     }\n     \n     curSegmentTxId \u003d segmentTxId;\n     state \u003d State.IN_SEGMENT;\n \n     if (writeHeaderTxn) {\n       logEdit(LogSegmentOp.getInstance(\n           FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n       logSync();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void startLogSegment(final long segmentTxId,\n      boolean writeHeaderTxn) throws IOException {\n    LOG.info(\"Starting log segment at \" + segmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003e 0,\n        \"Bad txid: %s\", segmentTxId);\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n        \"Cannot start writing to log segment \" + segmentTxId +\n        \" when previous log segment started at \" + curSegmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n        \"Cannot start log segment at txid %s when next expected \" +\n        \"txid is %s\", segmentTxId, txid + 1);\n    \n    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n\n    // TODO no need to link this back to storage anymore!\n    // See HDFS-2174.\n    storage.attemptRestoreRemovedStorage();\n    \n    try {\n      editLogStream \u003d journalSet.startLogSegment(segmentTxId);\n    } catch (IOException ex) {\n      throw new IOException(\"Unable to start log segment \" +\n          segmentTxId + \": no journals successfully started.\");\n    }\n    \n    curSegmentTxId \u003d segmentTxId;\n    state \u003d State.IN_SEGMENT;\n\n    if (writeHeaderTxn) {\n      logEdit(LogSegmentOp.getInstance(\n          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n      logSync();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void startLogSegment(final long segmentTxId,\n      boolean writeHeaderTxn) throws IOException {\n    LOG.info(\"Starting log segment at \" + segmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003e 0,\n        \"Bad txid: %s\", segmentTxId);\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n        \"Cannot start writing to log segment \" + segmentTxId +\n        \" when previous log segment started at \" + curSegmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n        \"Cannot start log segment at txid %s when next expected \" +\n        \"txid is %s\", segmentTxId, txid + 1);\n    \n    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n\n    // TODO no need to link this back to storage anymore!\n    // See HDFS-2174.\n    storage.attemptRestoreRemovedStorage();\n    \n    mapJournalsAndReportErrors(new JournalClosure() {\n      @Override\n      public void apply(JournalAndStream jas) throws IOException {\n        jas.startLogSegment(segmentTxId);\n      }\n    }, \"starting log segment \" + segmentTxId);\n\n    if (countActiveJournals() \u003d\u003d 0) {\n      throw new IOException(\"Unable to start log segment \" +\n          segmentTxId + \": no journals successfully started.\");\n    }\n    \n    curSegmentTxId \u003d segmentTxId;\n    state \u003d State.IN_SEGMENT;\n\n    if (writeHeaderTxn) {\n      logEdit(LogSegmentOp.getInstance(\n          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n      logSync();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  synchronized void startLogSegment(final long segmentTxId,\n      boolean writeHeaderTxn) throws IOException {\n    LOG.info(\"Starting log segment at \" + segmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003e 0,\n        \"Bad txid: %s\", segmentTxId);\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n        \"Cannot start writing to log segment \" + segmentTxId +\n        \" when previous log segment started at \" + curSegmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n        \"Cannot start log segment at txid %s when next expected \" +\n        \"txid is %s\", segmentTxId, txid + 1);\n    \n    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n\n    // TODO no need to link this back to storage anymore!\n    // See HDFS-2174.\n    storage.attemptRestoreRemovedStorage();\n    \n    mapJournalsAndReportErrors(new JournalClosure() {\n      @Override\n      public void apply(JournalAndStream jas) throws IOException {\n        jas.startLogSegment(segmentTxId);\n      }\n    }, \"starting log segment \" + segmentTxId);\n\n    if (countActiveJournals() \u003d\u003d 0) {\n      throw new IOException(\"Unable to start log segment \" +\n          segmentTxId + \": no journals successfully started.\");\n    }\n    \n    curSegmentTxId \u003d segmentTxId;\n    state \u003d State.IN_SEGMENT;\n\n    if (writeHeaderTxn) {\n      logEdit(LogSegmentOp.getInstance(\n          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n      logSync();\n    }\n  }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java"
      }
    },
    "28e6a4e44a3e920dcaf858f9a74a6358226b3a63": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-1073. Redesign the NameNode\u0027s storage layout for image checkpoints and edit logs to introduce transaction IDs and be more robust. Contributed by Todd Lipcon and Ivan Kelly.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1152295 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/07/11 9:28 AM",
      "commitName": "28e6a4e44a3e920dcaf858f9a74a6358226b3a63",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,41 @@\n+  synchronized void startLogSegment(final long segmentTxId,\n+      boolean writeHeaderTxn) throws IOException {\n+    LOG.info(\"Starting log segment at \" + segmentTxId);\n+    Preconditions.checkArgument(segmentTxId \u003e 0,\n+        \"Bad txid: %s\", segmentTxId);\n+    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n+        \"Bad state: %s\", state);\n+    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n+        \"Cannot start writing to log segment \" + segmentTxId +\n+        \" when previous log segment started at \" + curSegmentTxId);\n+    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n+        \"Cannot start log segment at txid %s when next expected \" +\n+        \"txid is %s\", segmentTxId, txid + 1);\n+    \n+    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n+\n+    // TODO no need to link this back to storage anymore!\n+    // See HDFS-2174.\n+    storage.attemptRestoreRemovedStorage();\n+    \n+    mapJournalsAndReportErrors(new JournalClosure() {\n+      @Override\n+      public void apply(JournalAndStream jas) throws IOException {\n+        jas.startLogSegment(segmentTxId);\n+      }\n+    }, \"starting log segment \" + segmentTxId);\n+\n+    if (countActiveJournals() \u003d\u003d 0) {\n+      throw new IOException(\"Unable to start log segment \" +\n+          segmentTxId + \": no journals successfully started.\");\n+    }\n+    \n+    curSegmentTxId \u003d segmentTxId;\n+    state \u003d State.IN_SEGMENT;\n+\n+    if (writeHeaderTxn) {\n+      logEdit(LogSegmentOp.getInstance(\n+          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n+      logSync();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  synchronized void startLogSegment(final long segmentTxId,\n      boolean writeHeaderTxn) throws IOException {\n    LOG.info(\"Starting log segment at \" + segmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003e 0,\n        \"Bad txid: %s\", segmentTxId);\n    Preconditions.checkState(state \u003d\u003d State.BETWEEN_LOG_SEGMENTS,\n        \"Bad state: %s\", state);\n    Preconditions.checkState(segmentTxId \u003e curSegmentTxId,\n        \"Cannot start writing to log segment \" + segmentTxId +\n        \" when previous log segment started at \" + curSegmentTxId);\n    Preconditions.checkArgument(segmentTxId \u003d\u003d txid + 1,\n        \"Cannot start log segment at txid %s when next expected \" +\n        \"txid is %s\", segmentTxId, txid + 1);\n    \n    numTransactions \u003d totalTimeTransactions \u003d numTransactionsBatchedInSync \u003d 0;\n\n    // TODO no need to link this back to storage anymore!\n    // See HDFS-2174.\n    storage.attemptRestoreRemovedStorage();\n    \n    mapJournalsAndReportErrors(new JournalClosure() {\n      @Override\n      public void apply(JournalAndStream jas) throws IOException {\n        jas.startLogSegment(segmentTxId);\n      }\n    }, \"starting log segment \" + segmentTxId);\n\n    if (countActiveJournals() \u003d\u003d 0) {\n      throw new IOException(\"Unable to start log segment \" +\n          segmentTxId + \": no journals successfully started.\");\n    }\n    \n    curSegmentTxId \u003d segmentTxId;\n    state \u003d State.IN_SEGMENT;\n\n    if (writeHeaderTxn) {\n      logEdit(LogSegmentOp.getInstance(\n          FSEditLogOpCodes.OP_START_LOG_SEGMENT));\n      logSync();\n    }\n  }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/namenode/FSEditLog.java"
    }
  }
}