{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FTPFileSystem.java",
  "functionName": "initialize",
  "functionId": "initialize___uri-URI__conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
  "functionStartLine": 103,
  "functionEndLine": 133,
  "numCommitsSeen": 25,
  "timeTaken": 2379,
  "changeHistory": [
    "18d7dfbf35564694e24bf2b7c99fea1bee1c790e",
    "9a44a832a99eb967aa4e34338dfa75baf35f9845",
    "bbd6a3277678a60d472e76a207f25a916220946c",
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36"
  ],
  "changeHistoryShort": {
    "18d7dfbf35564694e24bf2b7c99fea1bee1c790e": "Ybodychange",
    "9a44a832a99eb967aa4e34338dfa75baf35f9845": "Ybodychange",
    "bbd6a3277678a60d472e76a207f25a916220946c": "Ybodychange",
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yfilerename",
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": "Yintroduced"
  },
  "changeHistoryDetails": {
    "18d7dfbf35564694e24bf2b7c99fea1bee1c790e": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-1820. FTPFileSystem attempts to close the outputstream even when it is not initialised. (#1952)\n\n\r\nContributed by Mikhail Pryakhin.",
      "commitDate": "27/04/20 6:43 AM",
      "commitName": "18d7dfbf35564694e24bf2b7c99fea1bee1c790e",
      "commitAuthor": "Mike",
      "commitDateOld": "17/10/18 11:34 AM",
      "commitNameOld": "24dc068a361648b4e59e1807b07ff2239f41c740",
      "commitAuthorOld": "Adam Antal",
      "daysBetweenCommits": 557.8,
      "commitsBetweenForRepo": 3405,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,31 @@\n   public void initialize(URI uri, Configuration conf) throws IOException { // get\n     super.initialize(uri, conf);\n     // get host information from uri (overrides info in conf)\n     String host \u003d uri.getHost();\n     host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n     if (host \u003d\u003d null) {\n       throw new IOException(\"Invalid host specified\");\n     }\n     conf.set(FS_FTP_HOST, host);\n \n     // get port information from uri, (overrides info in conf)\n     int port \u003d uri.getPort();\n-    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n+    if(port \u003d\u003d -1){\n+      port \u003d conf.getInt(FS_FTP_HOST_PORT, FTP.DEFAULT_PORT);\n+    }\n     conf.setInt(FS_FTP_HOST_PORT, port);\n \n     // get user/password information from URI (overrides info in conf)\n     String userAndPassword \u003d uri.getUserInfo();\n     if (userAndPassword \u003d\u003d null) {\n       userAndPassword \u003d (conf.get(FS_FTP_USER_PREFIX + host, null) + \":\" + conf\n           .get(FS_FTP_PASSWORD_PREFIX + host, null));\n     }\n     String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n     Preconditions.checkState(userPasswdInfo.length \u003e 1,\n                              \"Invalid username / password\");\n     conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n     conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n     setConf(conf);\n     this.uri \u003d uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(FS_FTP_HOST, host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    if(port \u003d\u003d -1){\n      port \u003d conf.getInt(FS_FTP_HOST_PORT, FTP.DEFAULT_PORT);\n    }\n    conf.setInt(FS_FTP_HOST_PORT, port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(FS_FTP_USER_PREFIX + host, null) + \":\" + conf\n          .get(FS_FTP_PASSWORD_PREFIX + host, null));\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    Preconditions.checkState(userPasswdInfo.length \u003e 1,\n                             \"Invalid username / password\");\n    conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n    conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {}
    },
    "9a44a832a99eb967aa4e34338dfa75baf35f9845": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-13658. Replace config key literal strings with names I: hadoop common. Contributed by Chen Liang\n",
      "commitDate": "27/09/16 5:36 PM",
      "commitName": "9a44a832a99eb967aa4e34338dfa75baf35f9845",
      "commitAuthor": "Mingliang Liu",
      "commitDateOld": "23/08/16 2:12 PM",
      "commitNameOld": "c37346d0e3f9d39d0aec7a9c5bda3e9772aa969b",
      "commitAuthorOld": "Chris Douglas",
      "daysBetweenCommits": 35.14,
      "commitsBetweenForRepo": 191,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,29 +1,29 @@\n   public void initialize(URI uri, Configuration conf) throws IOException { // get\n     super.initialize(uri, conf);\n     // get host information from uri (overrides info in conf)\n     String host \u003d uri.getHost();\n     host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n     if (host \u003d\u003d null) {\n       throw new IOException(\"Invalid host specified\");\n     }\n     conf.set(FS_FTP_HOST, host);\n \n     // get port information from uri, (overrides info in conf)\n     int port \u003d uri.getPort();\n     port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n-    conf.setInt(\"fs.ftp.host.port\", port);\n+    conf.setInt(FS_FTP_HOST_PORT, port);\n \n     // get user/password information from URI (overrides info in conf)\n     String userAndPassword \u003d uri.getUserInfo();\n     if (userAndPassword \u003d\u003d null) {\n-      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n-          .get(\"fs.ftp.password.\" + host, null));\n+      userAndPassword \u003d (conf.get(FS_FTP_USER_PREFIX + host, null) + \":\" + conf\n+          .get(FS_FTP_PASSWORD_PREFIX + host, null));\n     }\n     String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n     Preconditions.checkState(userPasswdInfo.length \u003e 1,\n                              \"Invalid username / password\");\n     conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n     conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n     setConf(conf);\n     this.uri \u003d uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(FS_FTP_HOST, host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n    conf.setInt(FS_FTP_HOST_PORT, port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(FS_FTP_USER_PREFIX + host, null) + \":\" + conf\n          .get(FS_FTP_PASSWORD_PREFIX + host, null));\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    Preconditions.checkState(userPasswdInfo.length \u003e 1,\n                             \"Invalid username / password\");\n    conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n    conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {}
    },
    "bbd6a3277678a60d472e76a207f25a916220946c": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-10482. Fix various findbugs warnings in hadoop-common. Contributed by Haohui Mai.\n",
      "commitDate": "10/12/14 12:44 PM",
      "commitName": "bbd6a3277678a60d472e76a207f25a916220946c",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "03/07/14 5:04 AM",
      "commitNameOld": "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
      "commitAuthorOld": "Steve Loughran",
      "daysBetweenCommits": 160.36,
      "commitsBetweenForRepo": 1472,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,29 @@\n   public void initialize(URI uri, Configuration conf) throws IOException { // get\n     super.initialize(uri, conf);\n     // get host information from uri (overrides info in conf)\n     String host \u003d uri.getHost();\n     host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n     if (host \u003d\u003d null) {\n       throw new IOException(\"Invalid host specified\");\n     }\n     conf.set(FS_FTP_HOST, host);\n \n     // get port information from uri, (overrides info in conf)\n     int port \u003d uri.getPort();\n     port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n     conf.setInt(\"fs.ftp.host.port\", port);\n \n     // get user/password information from URI (overrides info in conf)\n     String userAndPassword \u003d uri.getUserInfo();\n     if (userAndPassword \u003d\u003d null) {\n       userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n           .get(\"fs.ftp.password.\" + host, null));\n-      if (userAndPassword \u003d\u003d null) {\n-        throw new IOException(\"Invalid user/passsword specified\");\n-      }\n     }\n     String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n+    Preconditions.checkState(userPasswdInfo.length \u003e 1,\n+                             \"Invalid username / password\");\n     conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n-    if (userPasswdInfo.length \u003e 1) {\n-      conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n-    } else {\n-      conf.set(FS_FTP_PASSWORD_PREFIX + host, null);\n-    }\n+    conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n     setConf(conf);\n     this.uri \u003d uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(FS_FTP_HOST, host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n    conf.setInt(\"fs.ftp.host.port\", port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n          .get(\"fs.ftp.password.\" + host, null));\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    Preconditions.checkState(userPasswdInfo.length \u003e 1,\n                             \"Invalid username / password\");\n    conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n    conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {}
    },
    "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5": {
      "type": "Ybodychange",
      "commitMessage": "HADOOP-9361: Strictly define FileSystem APIs\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1607596 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/07/14 5:04 AM",
      "commitName": "e09ea0c06ee1caa5a9ebae0a8f0273dfe04d05e5",
      "commitAuthor": "Steve Loughran",
      "commitDateOld": "09/01/13 3:30 PM",
      "commitNameOld": "7e599d9e3b852954a5a21b4738817c7aabfa1bc8",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 539.52,
      "commitsBetweenForRepo": 3454,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,34 +1,34 @@\n   public void initialize(URI uri, Configuration conf) throws IOException { // get\n     super.initialize(uri, conf);\n     // get host information from uri (overrides info in conf)\n     String host \u003d uri.getHost();\n-    host \u003d (host \u003d\u003d null) ? conf.get(\"fs.ftp.host\", null) : host;\n+    host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n     if (host \u003d\u003d null) {\n       throw new IOException(\"Invalid host specified\");\n     }\n-    conf.set(\"fs.ftp.host\", host);\n+    conf.set(FS_FTP_HOST, host);\n \n     // get port information from uri, (overrides info in conf)\n     int port \u003d uri.getPort();\n     port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n     conf.setInt(\"fs.ftp.host.port\", port);\n \n     // get user/password information from URI (overrides info in conf)\n     String userAndPassword \u003d uri.getUserInfo();\n     if (userAndPassword \u003d\u003d null) {\n       userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n           .get(\"fs.ftp.password.\" + host, null));\n       if (userAndPassword \u003d\u003d null) {\n         throw new IOException(\"Invalid user/passsword specified\");\n       }\n     }\n     String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n-    conf.set(\"fs.ftp.user.\" + host, userPasswdInfo[0]);\n+    conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n     if (userPasswdInfo.length \u003e 1) {\n-      conf.set(\"fs.ftp.password.\" + host, userPasswdInfo[1]);\n+      conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n     } else {\n-      conf.set(\"fs.ftp.password.\" + host, null);\n+      conf.set(FS_FTP_PASSWORD_PREFIX + host, null);\n     }\n     setConf(conf);\n     this.uri \u003d uri;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(FS_FTP_HOST, null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(FS_FTP_HOST, host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n    conf.setInt(\"fs.ftp.host.port\", port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n          .get(\"fs.ftp.password.\" + host, null));\n      if (userAndPassword \u003d\u003d null) {\n        throw new IOException(\"Invalid user/passsword specified\");\n      }\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    conf.set(FS_FTP_USER_PREFIX + host, userPasswdInfo[0]);\n    if (userPasswdInfo.length \u003e 1) {\n      conf.set(FS_FTP_PASSWORD_PREFIX + host, userPasswdInfo[1]);\n    } else {\n      conf.set(FS_FTP_PASSWORD_PREFIX + host, null);\n    }\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(\"fs.ftp.host\", null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(\"fs.ftp.host\", host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n    conf.setInt(\"fs.ftp.host.port\", port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n          .get(\"fs.ftp.password.\" + host, null));\n      if (userAndPassword \u003d\u003d null) {\n        throw new IOException(\"Invalid user/passsword specified\");\n      }\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    conf.set(\"fs.ftp.user.\" + host, userPasswdInfo[0]);\n    if (userPasswdInfo.length \u003e 1) {\n      conf.set(\"fs.ftp.password.\" + host, userPasswdInfo[1]);\n    } else {\n      conf.set(\"fs.ftp.password.\" + host, null);\n    }\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {
        "oldPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
        "newPath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
      }
    },
    "0f6dfeeacbab65a31a33927a4eb84871d371fe52": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-6671. Use maven for hadoop common builds. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1153184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/08/11 9:37 AM",
      "commitName": "0f6dfeeacbab65a31a33927a4eb84871d371fe52",
      "commitAuthor": "Thomas White",
      "commitDateOld": "01/08/11 3:53 PM",
      "commitNameOld": "9bac807cedbcff34e1a144fb475eff267e5ed86d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(\"fs.ftp.host\", null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(\"fs.ftp.host\", host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n    conf.setInt(\"fs.ftp.host.port\", port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n          .get(\"fs.ftp.password.\" + host, null));\n      if (userAndPassword \u003d\u003d null) {\n        throw new IOException(\"Invalid user/passsword specified\");\n      }\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    conf.set(\"fs.ftp.user.\" + host, userPasswdInfo[0]);\n    if (userPasswdInfo.length \u003e 1) {\n      conf.set(\"fs.ftp.password.\" + host, userPasswdInfo[1]);\n    } else {\n      conf.set(\"fs.ftp.password.\" + host, null);\n    }\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {
        "oldPath": "common/src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
        "newPath": "hadoop-common/src/main/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "11/06/11 9:13 PM",
      "commitNameOld": "a285fb5effe9ba3be4ec5f942afaf5ddd1186151",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 0.74,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(\"fs.ftp.host\", null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(\"fs.ftp.host\", host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n    conf.setInt(\"fs.ftp.host.port\", port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n          .get(\"fs.ftp.password.\" + host, null));\n      if (userAndPassword \u003d\u003d null) {\n        throw new IOException(\"Invalid user/passsword specified\");\n      }\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    conf.set(\"fs.ftp.user.\" + host, userPasswdInfo[0]);\n    if (userPasswdInfo.length \u003e 1) {\n      conf.set(\"fs.ftp.password.\" + host, userPasswdInfo[1]);\n    } else {\n      conf.set(\"fs.ftp.password.\" + host, null);\n    }\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "common/src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java",
        "newPath": "common/src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
      }
    },
    "5128a9a453d64bfe1ed978cf9ffed27985eeef36": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-4687 Moving src directories on branch\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/core/branches/HADOOP-4687/core@776174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/05/09 9:20 PM",
      "commitName": "5128a9a453d64bfe1ed978cf9ffed27985eeef36",
      "commitAuthor": "Owen O\u0027Malley",
      "diff": "@@ -0,0 +1,34 @@\n+  public void initialize(URI uri, Configuration conf) throws IOException { // get\n+    super.initialize(uri, conf);\n+    // get host information from uri (overrides info in conf)\n+    String host \u003d uri.getHost();\n+    host \u003d (host \u003d\u003d null) ? conf.get(\"fs.ftp.host\", null) : host;\n+    if (host \u003d\u003d null) {\n+      throw new IOException(\"Invalid host specified\");\n+    }\n+    conf.set(\"fs.ftp.host\", host);\n+\n+    // get port information from uri, (overrides info in conf)\n+    int port \u003d uri.getPort();\n+    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n+    conf.setInt(\"fs.ftp.host.port\", port);\n+\n+    // get user/password information from URI (overrides info in conf)\n+    String userAndPassword \u003d uri.getUserInfo();\n+    if (userAndPassword \u003d\u003d null) {\n+      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n+          .get(\"fs.ftp.password.\" + host, null));\n+      if (userAndPassword \u003d\u003d null) {\n+        throw new IOException(\"Invalid user/passsword specified\");\n+      }\n+    }\n+    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n+    conf.set(\"fs.ftp.user.\" + host, userPasswdInfo[0]);\n+    if (userPasswdInfo.length \u003e 1) {\n+      conf.set(\"fs.ftp.password.\" + host, userPasswdInfo[1]);\n+    } else {\n+      conf.set(\"fs.ftp.password.\" + host, null);\n+    }\n+    setConf(conf);\n+    this.uri \u003d uri;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void initialize(URI uri, Configuration conf) throws IOException { // get\n    super.initialize(uri, conf);\n    // get host information from uri (overrides info in conf)\n    String host \u003d uri.getHost();\n    host \u003d (host \u003d\u003d null) ? conf.get(\"fs.ftp.host\", null) : host;\n    if (host \u003d\u003d null) {\n      throw new IOException(\"Invalid host specified\");\n    }\n    conf.set(\"fs.ftp.host\", host);\n\n    // get port information from uri, (overrides info in conf)\n    int port \u003d uri.getPort();\n    port \u003d (port \u003d\u003d -1) ? FTP.DEFAULT_PORT : port;\n    conf.setInt(\"fs.ftp.host.port\", port);\n\n    // get user/password information from URI (overrides info in conf)\n    String userAndPassword \u003d uri.getUserInfo();\n    if (userAndPassword \u003d\u003d null) {\n      userAndPassword \u003d (conf.get(\"fs.ftp.user.\" + host, null) + \":\" + conf\n          .get(\"fs.ftp.password.\" + host, null));\n      if (userAndPassword \u003d\u003d null) {\n        throw new IOException(\"Invalid user/passsword specified\");\n      }\n    }\n    String[] userPasswdInfo \u003d userAndPassword.split(\":\");\n    conf.set(\"fs.ftp.user.\" + host, userPasswdInfo[0]);\n    if (userPasswdInfo.length \u003e 1) {\n      conf.set(\"fs.ftp.password.\" + host, userPasswdInfo[1]);\n    } else {\n      conf.set(\"fs.ftp.password.\" + host, null);\n    }\n    setConf(conf);\n    this.uri \u003d uri;\n  }",
      "path": "src/java/org/apache/hadoop/fs/ftp/FTPFileSystem.java"
    }
  }
}