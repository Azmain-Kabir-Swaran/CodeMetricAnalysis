{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "MRAppMaster.java",
  "functionName": "main",
  "functionId": "main___args-String[]",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
  "functionStartLine": 1640,
  "functionEndLine": 1696,
  "numCommitsSeen": 130,
  "timeTaken": 13171,
  "changeHistory": [
    "453d48bdfbb67ed3e66c33c4aef239c3d7bdd3bc",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1",
    "f30065c8b6099372f57015b505434120fe83c2b0",
    "348208014b2023894dc416dcd733a9ccdafc6e25",
    "64306aa1b5f280e5ffaf2186bef706acd93b1412",
    "0ab1f90d40352d4daad8efd21eda0a87dec55cf9",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
    "122be11c1497b183f18079adf97a4f0396ea66ee",
    "cc4c74be09ed54e7541b7e2ae8cebc42c2c130fe",
    "21181b65531449e5fda321c11f0672c3067641aa",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
    "4d8e350750748b919ee2158690a44cd9fd80dcae",
    "14d856be57288c6fbf6a5f3546240a928bf626ef",
    "27e8c86999bc6a972a99216060b11ef35b7de858",
    "46315a2d914058969c7234272420c063ce268bf5",
    "0ba7078ef4ee127a47c5042c82db0b113a967b23",
    "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1",
    "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5",
    "5f52156aa2389e8583a699fb3ba7b78250390154",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
    "e979a3ddb17f32582e36cdc9b826f06c80c473f2",
    "c9a7d3dbf902244902b636bf566154c09ecd1116",
    "b549c107825581b15fd14494099a943ff3213c6f",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
    "4ba2acf3363bdfd7fcdd9de496cd57f8af6f03ad",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "453d48bdfbb67ed3e66c33c4aef239c3d7bdd3bc": "Ybodychange",
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": "Ybodychange",
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": "Ybodychange",
    "f30065c8b6099372f57015b505434120fe83c2b0": "Ybodychange",
    "348208014b2023894dc416dcd733a9ccdafc6e25": "Ybodychange",
    "64306aa1b5f280e5ffaf2186bef706acd93b1412": "Ybodychange",
    "0ab1f90d40352d4daad8efd21eda0a87dec55cf9": "Ybodychange",
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": "Ybodychange",
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": "Ybodychange",
    "122be11c1497b183f18079adf97a4f0396ea66ee": "Ybodychange",
    "cc4c74be09ed54e7541b7e2ae8cebc42c2c130fe": "Ybodychange",
    "21181b65531449e5fda321c11f0672c3067641aa": "Ybodychange",
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": "Ybodychange",
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": "Ybodychange",
    "4d8e350750748b919ee2158690a44cd9fd80dcae": "Ybodychange",
    "14d856be57288c6fbf6a5f3546240a928bf626ef": "Ybodychange",
    "27e8c86999bc6a972a99216060b11ef35b7de858": "Ybodychange",
    "46315a2d914058969c7234272420c063ce268bf5": "Ybodychange",
    "0ba7078ef4ee127a47c5042c82db0b113a967b23": "Ybodychange",
    "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1": "Ybodychange",
    "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5": "Ybodychange",
    "5f52156aa2389e8583a699fb3ba7b78250390154": "Ybodychange",
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": "Ybodychange",
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": "Ybodychange",
    "e979a3ddb17f32582e36cdc9b826f06c80c473f2": "Ybodychange",
    "c9a7d3dbf902244902b636bf566154c09ecd1116": "Ybodychange",
    "b549c107825581b15fd14494099a943ff3213c6f": "Ybodychange",
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": "Ybodychange",
    "4ba2acf3363bdfd7fcdd9de496cd57f8af6f03ad": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "453d48bdfbb67ed3e66c33c4aef239c3d7bdd3bc": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6971. Moving logging APIs over to slf4j in hadoop-mapreduce-client-app. Contributed by Jinjiang Ling.\n",
      "commitDate": "02/10/17 8:14 PM",
      "commitName": "453d48bdfbb67ed3e66c33c4aef239c3d7bdd3bc",
      "commitAuthor": "Akira Ajisaka",
      "commitDateOld": "08/08/17 12:46 PM",
      "commitNameOld": "735fce5bec17f4e1799daf922625c475cf588114",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 55.31,
      "commitsBetweenForRepo": 487,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public static void main(String[] args) {\n     try {\n       mainStarted \u003d true;\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ContainerId.fromString(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       if (applicationAttemptId !\u003d null) {\n         CallerContext.setCurrent(new CallerContext.Builder(\n             \"mr_appmaster_\" + applicationAttemptId.toString()).build());\n       }\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       MRWebAppUtil.initialize(conf);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n-      LOG.fatal(\"Error starting MRAppMaster\", t);\n+      LOG.error(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      mainStarted \u003d true;\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ContainerId.fromString(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      if (applicationAttemptId !\u003d null) {\n        CallerContext.setCurrent(new CallerContext.Builder(\n            \"mr_appmaster_\" + applicationAttemptId.toString()).build());\n      }\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.error(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "c77a1095dc556e8bea87df6d8ddf36e898f27e86": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1942. Deprecate toString/fromString methods from ConverterUtils and move them to records classes like ContainerId/ApplicationId, etc. (wangda)\n",
      "commitDate": "14/06/16 3:06 PM",
      "commitName": "c77a1095dc556e8bea87df6d8ddf36e898f27e86",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "22/05/16 3:24 PM",
      "commitNameOld": "3b3b63081b39270ba363eb4558c5fb37fd5172d5",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 22.99,
      "commitsBetweenForRepo": 147,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,57 +1,57 @@\n   public static void main(String[] args) {\n     try {\n       mainStarted \u003d true;\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n-      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n+      ContainerId containerId \u003d ContainerId.fromString(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       if (applicationAttemptId !\u003d null) {\n         CallerContext.setCurrent(new CallerContext.Builder(\n             \"mr_appmaster_\" + applicationAttemptId.toString()).build());\n       }\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       MRWebAppUtil.initialize(conf);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      mainStarted \u003d true;\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ContainerId.fromString(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      if (applicationAttemptId !\u003d null) {\n        CallerContext.setCurrent(new CallerContext.Builder(\n            \"mr_appmaster_\" + applicationAttemptId.toString()).build());\n      }\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "8676a118a12165ae5a8b80a2a4596c133471ebc1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4349. Support CallerContext in YARN. Contributed by Wangda Tan\n",
      "commitDate": "23/11/15 5:19 PM",
      "commitName": "8676a118a12165ae5a8b80a2a4596c133471ebc1",
      "commitAuthor": "Jian He",
      "commitDateOld": "16/11/15 5:06 PM",
      "commitNameOld": "6502d59e73cd6f3f3a358fce58d398ca38a61fba",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 7.01,
      "commitsBetweenForRepo": 64,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,53 +1,57 @@\n   public static void main(String[] args) {\n     try {\n       mainStarted \u003d true;\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n+      if (applicationAttemptId !\u003d null) {\n+        CallerContext.setCurrent(new CallerContext.Builder(\n+            \"mr_appmaster_\" + applicationAttemptId.toString()).build());\n+      }\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       MRWebAppUtil.initialize(conf);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      mainStarted \u003d true;\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      if (applicationAttemptId !\u003d null) {\n        CallerContext.setCurrent(new CallerContext.Builder(\n            \"mr_appmaster_\" + applicationAttemptId.toString()).build());\n      }\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "f30065c8b6099372f57015b505434120fe83c2b0": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6279. AM should explicity exit JVM after all services have stopped. Contributed by Eric Payne\n",
      "commitDate": "07/05/15 3:05 PM",
      "commitName": "f30065c8b6099372f57015b505434120fe83c2b0",
      "commitAuthor": "Jason Lowe",
      "commitDateOld": "04/05/15 1:39 PM",
      "commitNameOld": "bf70c5ae2824a9139c1aa9d7c14020018881cec2",
      "commitAuthorOld": "Jason Lowe",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 42,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,53 @@\n   public static void main(String[] args) {\n     try {\n+      mainStarted \u003d true;\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       MRWebAppUtil.initialize(conf);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      mainStarted \u003d true;\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "348208014b2023894dc416dcd733a9ccdafc6e25": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-6136. MRAppMaster doesn\u0027t shutdown file systems. Contributed by Brahma Reddy Battula.\n",
      "commitDate": "04/03/15 9:12 PM",
      "commitName": "348208014b2023894dc416dcd733a9ccdafc6e25",
      "commitAuthor": "Tsuyoshi Ozawa",
      "commitDateOld": "18/11/14 8:35 AM",
      "commitNameOld": "7250b0bf914a55d0fa4802834de7f1909f1b0d6b",
      "commitAuthorOld": "Devaraj K",
      "daysBetweenCommits": 106.53,
      "commitsBetweenForRepo": 792,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,56 +1,52 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       MRWebAppUtil.initialize(conf);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n-      // Do not automatically close FileSystem objects so that in case of\n-      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n-      // the objects myself.\n-      conf.setBoolean(\"fs.automatic.close\", false);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "64306aa1b5f280e5ffaf2186bef706acd93b1412": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5956. Made MR AM not use maxAttempts to determine if the current attempt is the last retry. Contributed by Wangda Tan.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1609649 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "11/07/14 1:45 AM",
      "commitName": "64306aa1b5f280e5ffaf2186bef706acd93b1412",
      "commitAuthor": "Zhijie Shen",
      "commitDateOld": "28/04/14 8:18 AM",
      "commitNameOld": "bb7ce82816574f67aa1898f67e0e0cff54fa67be",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 73.73,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,56 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n-      String maxAppAttempts \u003d\n-          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n-      validateInputParam(maxAppAttempts,\n-          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n-              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n-              Integer.parseInt(maxAppAttempts));\n+              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       MRWebAppUtil.initialize(conf);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "0ab1f90d40352d4daad8efd21eda0a87dec55cf9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5751. MR app master fails to start in some cases if mapreduce.job.classloader is true. Contributed by Sangjin Lee\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1577554 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/03/14 7:43 AM",
      "commitName": "0ab1f90d40352d4daad8efd21eda0a87dec55cf9",
      "commitAuthor": "Jason Darrell Lowe",
      "commitDateOld": "27/02/14 11:23 AM",
      "commitNameOld": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 14.81,
      "commitsBetweenForRepo": 132,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,63 +1,61 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       MRWebAppUtil.initialize(conf);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n-      // set job classloader if configured\n-      MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "94b29b3348f5919a7599cc4b8e0466a4c72e95ae": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5770. Fixed MapReduce ApplicationMaster to correctly redirect to the YARN\u0027s web-app proxy with the correct scheme prefix. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1572711 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/02/14 11:23 AM",
      "commitName": "94b29b3348f5919a7599cc4b8e0466a4c72e95ae",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "14/02/14 12:01 PM",
      "commitNameOld": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.97,
      "commitsBetweenForRepo": 97,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,69 +1,63 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n-      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n-      // to gain access to keystore file for opening SSL listener. We can trust\n-      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n-      // running in user-land.\n       MRWebAppUtil.initialize(conf);\n-      conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY,\n-          HttpConfig.Policy.HTTP_ONLY.name());\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      MRWebAppUtil.initialize(conf);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "990cffdcfa9349fff0cee144b1d0e5267c40f63d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1553. Modified YARN and MR to stop using HttpConfig.isSecure() and\ninstead rely on the http policy framework. And also fix some bugs related\nto https handling in YARN web-apps. Contributed by Haohui Mai.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1568501 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/02/14 12:01 PM",
      "commitName": "990cffdcfa9349fff0cee144b1d0e5267c40f63d",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "22/01/14 10:06 PM",
      "commitNameOld": "122be11c1497b183f18079adf97a4f0396ea66ee",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 22.58,
      "commitsBetweenForRepo": 172,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,69 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n       // to gain access to keystore file for opening SSL listener. We can trust\n       // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n       // running in user-land.\n       MRWebAppUtil.initialize(conf);\n-      HttpConfig.setPolicy(HttpConfig.Policy.HTTP_ONLY);\n+      conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY,\n+          HttpConfig.Policy.HTTP_ONLY.name());\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      MRWebAppUtil.initialize(conf);\n      conf.set(YarnConfiguration.YARN_HTTP_POLICY_KEY,\n          HttpConfig.Policy.HTTP_ONLY.name());\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "122be11c1497b183f18079adf97a4f0396ea66ee": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5723. MR AM container log can be truncated or empty. (Mohammad Kamrul Islam via kasha)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1560592 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "22/01/14 10:06 PM",
      "commitName": "122be11c1497b183f18079adf97a4f0396ea66ee",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "21/01/14 11:23 AM",
      "commitNameOld": "d1963ad4bd1fb735bfa39e2b70773bdf1f623a87",
      "commitAuthorOld": "Jason Darrell Lowe",
      "daysBetweenCommits": 1.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,70 +1,68 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n       // to gain access to keystore file for opening SSL listener. We can trust\n       // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n       // running in user-land.\n       MRWebAppUtil.initialize(conf);\n       HttpConfig.setPolicy(HttpConfig.Policy.HTTP_ONLY);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n-      System.exit(1);\n-    } finally {\n-      LogManager.shutdown();\n+      ExitUtil.terminate(1, t);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      MRWebAppUtil.initialize(conf);\n      HttpConfig.setPolicy(HttpConfig.Policy.HTTP_ONLY);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      ExitUtil.terminate(1, t);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "cc4c74be09ed54e7541b7e2ae8cebc42c2c130fe": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5694. Fixed MR AppMaster to shutdown the LogManager so as to avoid losing syslog in some conditions. Contributed by Mohammad Kamrul Islam.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1553879 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/12/13 9:51 AM",
      "commitName": "cc4c74be09ed54e7541b7e2ae8cebc42c2c130fe",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/12/13 2:54 PM",
      "commitNameOld": "9ca394d54dd24e67867c845a58150f6b51761512",
      "commitAuthorOld": "Christopher Douglas",
      "daysBetweenCommits": 10.79,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,70 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n       // to gain access to keystore file for opening SSL listener. We can trust\n       // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n       // running in user-land.\n       MRWebAppUtil.initialize(conf);\n       HttpConfig.setPolicy(HttpConfig.Policy.HTTP_ONLY);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n+    } finally {\n+      LogManager.shutdown();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      MRWebAppUtil.initialize(conf);\n      HttpConfig.setPolicy(HttpConfig.Policy.HTTP_ONLY);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    } finally {\n      LogManager.shutdown();\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "21181b65531449e5fda321c11f0672c3067641aa": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1277. Added a policy based configuration for http/https in common HttpServer and using the same in YARN - related\nto per project https config support via HADOOP-10022. Contributed by Suresh Srinivas and Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1529662 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "06/10/13 11:43 AM",
      "commitName": "21181b65531449e5fda321c11f0672c3067641aa",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "01/10/13 3:52 PM",
      "commitNameOld": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 4.83,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,68 +1,68 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n       // to gain access to keystore file for opening SSL listener. We can trust\n       // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n       // running in user-land.\n       MRWebAppUtil.initialize(conf);\n-      HttpConfig.setSecure(MRWebAppUtil.isSSLEnabledInMRAM());\n+      HttpConfig.setPolicy(HttpConfig.Policy.HTTP_ONLY);\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      MRWebAppUtil.initialize(conf);\n      HttpConfig.setPolicy(HttpConfig.Policy.HTTP_ONLY);\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "82f4348f27a7b6bb74edb583fc17fef9f4f3b082": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5536. Fixed MR AM and JHS to respect mapreduce.jobhistory.webapp.https.address. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1528251 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "01/10/13 3:52 PM",
      "commitName": "82f4348f27a7b6bb74edb583fc17fef9f4f3b082",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "28/09/13 12:14 PM",
      "commitNameOld": "aa12a7914fc6d70d0ae16e99dc13a739f931b173",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.15,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,72 +1,68 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       \n       // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n       // to gain access to keystore file for opening SSL listener. We can trust\n       // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n       // running in user-land.\n-      HttpConfig.setSecure(conf.getBoolean(MRConfig.SSL_ENABLED_KEY,\n-          MRConfig.SSL_ENABLED_KEY_DEFAULT));\n-      WebAppUtil.setSSLEnabledInYARN(conf.getBoolean(\n-          CommonConfigurationKeysPublic.HADOOP_SSL_ENABLED_KEY,\n-          CommonConfigurationKeysPublic.HADOOP_SSL_ENABLED_DEFAULT));\n-\n+      MRWebAppUtil.initialize(conf);\n+      HttpConfig.setSecure(MRWebAppUtil.isSSLEnabledInMRAM());\n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      MRWebAppUtil.initialize(conf);\n      HttpConfig.setSecure(MRWebAppUtil.isSSLEnabledInMRAM());\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "13420d01f2fb28a0e445dc87ad9ee9b607804d53": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1203. Changed YARN web-app proxy to handle http and https URLs from AM registration and finish correctly. Contributed by Omkar Vinit Joshi.\nMAPREDUCE-5515. Fixed MR AM\u0027s webapp to depend on a new config mapreduce.ssl.enabled to enable https and disabling it by default as MR AM needs\nto set up its own certificates etc and not depend on clusters\u0027. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1524864 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/09/13 4:35 PM",
      "commitName": "13420d01f2fb28a0e445dc87ad9ee9b607804d53",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/09/13 5:38 PM",
      "commitNameOld": "1c1ebc1553650ac8e4486faf21f0d95150f607ad",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 8.96,
      "commitsBetweenForRepo": 51,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,61 +1,72 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n+      \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n+      \n+      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n+      // to gain access to keystore file for opening SSL listener. We can trust\n+      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n+      // running in user-land.\n+      HttpConfig.setSecure(conf.getBoolean(MRConfig.SSL_ENABLED_KEY,\n+          MRConfig.SSL_ENABLED_KEY_DEFAULT));\n+      WebAppUtil.setSSLEnabledInYARN(conf.getBoolean(\n+          CommonConfigurationKeysPublic.HADOOP_SSL_ENABLED_KEY,\n+          CommonConfigurationKeysPublic.HADOOP_SSL_ENABLED_DEFAULT));\n \n       // log the system properties\n       String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n       if (systemPropsToLog !\u003d null) {\n         LOG.info(systemPropsToLog);\n       }\n \n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      \n      // Explicitly disabling SSL for map reduce task as we can\u0027t allow MR users\n      // to gain access to keystore file for opening SSL listener. We can trust\n      // RM/NM to issue SSL certificates but definitely not MR-AM as it is\n      // running in user-land.\n      HttpConfig.setSecure(conf.getBoolean(MRConfig.SSL_ENABLED_KEY,\n          MRConfig.SSL_ENABLED_KEY_DEFAULT));\n      WebAppUtil.setSSLEnabledInYARN(conf.getBoolean(\n          CommonConfigurationKeysPublic.HADOOP_SSL_ENABLED_KEY,\n          CommonConfigurationKeysPublic.HADOOP_SSL_ENABLED_DEFAULT));\n\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "4d8e350750748b919ee2158690a44cd9fd80dcae": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5232. Add a configuration to be able to log classpath and other system properties on mapreduce JVMs startup. Contributed by Sangjin Lee.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1482643 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/05/13 4:43 PM",
      "commitName": "4d8e350750748b919ee2158690a44cd9fd80dcae",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/05/13 7:48 PM",
      "commitNameOld": "14d856be57288c6fbf6a5f3546240a928bf626ef",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.87,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,61 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n+\n+      // log the system properties\n+      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n+      if (systemPropsToLog !\u003d null) {\n+        LOG.info(systemPropsToLog);\n+      }\n+\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n\n      // log the system properties\n      String systemPropsToLog \u003d MRApps.getSystemPropertiesToLog(conf);\n      if (systemPropsToLog !\u003d null) {\n        LOG.info(systemPropsToLog);\n      }\n\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "14d856be57288c6fbf6a5f3546240a928bf626ef": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5240. Fix a bug in MRAppMaster because of which OutputCommitter could not access credentials set by the user. Contributed by Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1482175 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/13 7:48 PM",
      "commitName": "14d856be57288c6fbf6a5f3546240a928bf626ef",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/05/13 5:27 PM",
      "commitNameOld": "6e37a7e5e11efb60058d7012de2ef951a8bac113",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 10.1,
      "commitsBetweenForRepo": 55,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(Environment.CONTAINER_ID.name());\n       String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n       String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n           System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           Environment.CONTAINER_ID.name());\n       validateInputParam(nodeHostString, Environment.NM_HOST.name());\n       validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n           Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n-      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n+      JobConf conf \u003d new JobConf(new YarnConfiguration());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      JobConf conf \u003d new JobConf(new YarnConfiguration());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "27e8c86999bc6a972a99216060b11ef35b7de858": {
      "type": "Ybodychange",
      "commitMessage": "YARN-561. Modified NodeManager to set key information into the environment of every container that it launches. Contributed by Xuan Gong.\nMAPREDUCE-5175. Updated MR App to not set envs that will be set by NMs anyways after YARN-561. Contributed by Xuan Gong.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1471156 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/04/13 2:39 PM",
      "commitName": "27e8c86999bc6a972a99216060b11ef35b7de858",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "10/04/13 9:52 PM",
      "commitNameOld": "6a1c41111edcdc58c846fc50e53554fbba230171",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 12.7,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,54 +1,54 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n-          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n-      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n-      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n+          System.getenv(Environment.CONTAINER_ID.name());\n+      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n+      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n       String nodeHttpPortString \u003d\n-          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n+          System.getenv(Environment.NM_HTTP_PORT.name());\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       String maxAppAttempts \u003d\n           System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n-          ApplicationConstants.AM_CONTAINER_ID_ENV);\n-      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n-      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n+          Environment.CONTAINER_ID.name());\n+      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n+      validateInputParam(nodePortString, Environment.NM_PORT.name());\n       validateInputParam(nodeHttpPortString,\n-          ApplicationConstants.NM_HTTP_PORT_ENV);\n+          Environment.NM_HTTP_PORT.name());\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       validateInputParam(maxAppAttempts,\n           ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime,\n               Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(Environment.CONTAINER_ID.name());\n      String nodeHostString \u003d System.getenv(Environment.NM_HOST.name());\n      String nodePortString \u003d System.getenv(Environment.NM_PORT.name());\n      String nodeHttpPortString \u003d\n          System.getenv(Environment.NM_HTTP_PORT.name());\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          Environment.CONTAINER_ID.name());\n      validateInputParam(nodeHostString, Environment.NM_HOST.name());\n      validateInputParam(nodePortString, Environment.NM_PORT.name());\n      validateInputParam(nodeHttpPortString,\n          Environment.NM_HTTP_PORT.name());\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "46315a2d914058969c7234272420c063ce268bf5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-5062. Fix MR AM to read max-retries from the RM. Contributed by *Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1460923 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/03/13 3:33 PM",
      "commitName": "46315a2d914058969c7234272420c063ce268bf5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "15/03/13 2:09 PM",
      "commitNameOld": "7d7553c4eb7d9a282410a3213d26a89fea9b7865",
      "commitAuthorOld": "Robert Joseph Evans",
      "daysBetweenCommits": 10.06,
      "commitsBetweenForRepo": 47,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,54 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n       String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n       String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n       String nodeHttpPortString \u003d\n           System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n+      String maxAppAttempts \u003d\n+          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n       \n       validateInputParam(containerIdStr,\n           ApplicationConstants.AM_CONTAINER_ID_ENV);\n       validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n       validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n       validateInputParam(nodeHttpPortString,\n           ApplicationConstants.NM_HTTP_PORT_ENV);\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n+      validateInputParam(maxAppAttempts,\n+          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n-              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n+              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n+              Integer.parseInt(maxAppAttempts));\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       // set job classloader if configured\n       MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n      String nodeHttpPortString \u003d\n          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      String maxAppAttempts \u003d\n          System.getenv(ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n      \n      validateInputParam(containerIdStr,\n          ApplicationConstants.AM_CONTAINER_ID_ENV);\n      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n      validateInputParam(nodeHttpPortString,\n          ApplicationConstants.NM_HTTP_PORT_ENV);\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      validateInputParam(maxAppAttempts,\n          ApplicationConstants.MAX_APP_ATTEMPTS_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime,\n              Integer.parseInt(maxAppAttempts));\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "0ba7078ef4ee127a47c5042c82db0b113a967b23": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-1700. User supplied dependencies may conflict with MapReduce system JARs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430929 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/01/13 8:12 AM",
      "commitName": "0ba7078ef4ee127a47c5042c82db0b113a967b23",
      "commitAuthor": "Thomas White",
      "commitDateOld": "05/01/13 12:07 PM",
      "commitNameOld": "bbc426f53ad9132104752074b78971a04d48634a",
      "commitAuthorOld": "Thomas Graves",
      "daysBetweenCommits": 3.84,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,49 @@\n   public static void main(String[] args) {\n     try {\n       Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n       String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n       String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n       String nodeHttpPortString \u003d\n           System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           ApplicationConstants.AM_CONTAINER_ID_ENV);\n       validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n       validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n       validateInputParam(nodeHttpPortString,\n           ApplicationConstants.NM_HTTP_PORT_ENV);\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n+      // set job classloader if configured\n+      MRApps.setJobClassLoader(conf);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n      String nodeHttpPortString \u003d\n          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          ApplicationConstants.AM_CONTAINER_ID_ENV);\n      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n      validateInputParam(nodeHttpPortString,\n          ApplicationConstants.NM_HTTP_PORT_ENV);\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      // set job classloader if configured\n      MRApps.setJobClassLoader(conf);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4300. OOM in AM can turn it into a zombie. (Robert Evans via tgraves)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1359399 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "09/07/12 2:08 PM",
      "commitName": "11782dd3a5ee5a2f6ad42b335f0386d00baa9ae1",
      "commitAuthor": "Thomas Graves",
      "commitDateOld": "03/05/12 8:20 PM",
      "commitNameOld": "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5",
      "commitAuthorOld": "Alejandro Abdelnur",
      "daysBetweenCommits": 66.74,
      "commitsBetweenForRepo": 326,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,47 @@\n   public static void main(String[] args) {\n     try {\n+      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n       String containerIdStr \u003d\n           System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n       String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n       String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n       String nodeHttpPortString \u003d\n           System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           ApplicationConstants.AM_CONTAINER_ID_ENV);\n       validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n       validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n       validateInputParam(nodeHttpPortString,\n           ApplicationConstants.NM_HTTP_PORT_ENV);\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       ShutdownHookManager.get().addShutdownHook(\n         new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      Thread.setDefaultUncaughtExceptionHandler(new YarnUncaughtExceptionHandler());\n      String containerIdStr \u003d\n          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n      String nodeHttpPortString \u003d\n          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          ApplicationConstants.AM_CONTAINER_ID_ENV);\n      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n      validateInputParam(nodeHttpPortString,\n          ApplicationConstants.NM_HTTP_PORT_ENV);\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4205. retrofit all JVM shutdown hooks to use ShutdownHookManager (tucu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1333748 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/05/12 8:20 PM",
      "commitName": "0fca4fbaf35ad6b48c57125a9389aaf45a2c88a5",
      "commitAuthor": "Alejandro Abdelnur",
      "commitDateOld": "11/04/12 10:09 AM",
      "commitNameOld": "cfafd8c29dc3679e503c6155bcbf26f377b0ea8f",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 22.42,
      "commitsBetweenForRepo": 153,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,46 @@\n   public static void main(String[] args) {\n     try {\n       String containerIdStr \u003d\n           System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n       String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n       String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n       String nodeHttpPortString \u003d\n           System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           ApplicationConstants.AM_CONTAINER_ID_ENV);\n       validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n       validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n       validateInputParam(nodeHttpPortString,\n           ApplicationConstants.NM_HTTP_PORT_ENV);\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n-      Runtime.getRuntime().addShutdownHook(\n-        new MRAppMasterShutdownHook(appMaster));\n+      ShutdownHookManager.get().addShutdownHook(\n+        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       // Do not automatically close FileSystem objects so that in case of\n       // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n       // the objects myself.\n       conf.setBoolean(\"fs.automatic.close\", false);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      String containerIdStr \u003d\n          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n      String nodeHttpPortString \u003d\n          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          ApplicationConstants.AM_CONTAINER_ID_ENV);\n      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n      validateInputParam(nodeHttpPortString,\n          ApplicationConstants.NM_HTTP_PORT_ENV);\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      ShutdownHookManager.get().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster), SHUTDOWN_HOOK_PRIORITY);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "5f52156aa2389e8583a699fb3ba7b78250390154": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3614. Fixed MR AM to close history file quickly and send a correct final state to the RM when it is killed. Contributed by Ravi Prakash.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1296747 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/03/12 9:23 PM",
      "commitName": "5f52156aa2389e8583a699fb3ba7b78250390154",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/02/12 9:30 PM",
      "commitNameOld": "b2172c394e7ef40c4820abe6b830b64c7ceeec4e",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 12.0,
      "commitsBetweenForRepo": 99,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,42 +1,46 @@\n   public static void main(String[] args) {\n     try {\n       String containerIdStr \u003d\n           System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n       String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n       String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n       String nodeHttpPortString \u003d\n           System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n       \n       validateInputParam(containerIdStr,\n           ApplicationConstants.AM_CONTAINER_ID_ENV);\n       validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n       validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n       validateInputParam(nodeHttpPortString,\n           ApplicationConstants.NM_HTTP_PORT_ENV);\n       validateInputParam(appSubmitTimeStr,\n           ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n           new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n               Integer.parseInt(nodePortString),\n               Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       Runtime.getRuntime().addShutdownHook(\n-          new CompositeServiceShutdownHook(appMaster));\n+        new MRAppMasterShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n+      // Do not automatically close FileSystem objects so that in case of\n+      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n+      // the objects myself.\n+      conf.setBoolean(\"fs.automatic.close\", false);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      String containerIdStr \u003d\n          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n      String nodeHttpPortString \u003d\n          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          ApplicationConstants.AM_CONTAINER_ID_ENV);\n      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n      validateInputParam(nodeHttpPortString,\n          ApplicationConstants.NM_HTTP_PORT_ENV);\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      Runtime.getRuntime().addShutdownHook(\n        new MRAppMasterShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      // Do not automatically close FileSystem objects so that in case of\n      // SIGTERM I have a chance to write out the job history. I\u0027ll be closing\n      // the objects myself.\n      conf.setBoolean(\"fs.automatic.close\", false);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "670fa24b48acb407c22fbfdde87ae3123dcbf449": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2989. Modified JobHistory to link to task and AM logs from the JobHistoryServer. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1190174 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "27/10/11 11:45 PM",
      "commitName": "670fa24b48acb407c22fbfdde87ae3123dcbf449",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "24/10/11 2:02 PM",
      "commitNameOld": "6288dfa873364d1bb735bdb811002f0080e9a1be",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 3.4,
      "commitsBetweenForRepo": 63,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,42 @@\n   public static void main(String[] args) {\n     try {\n       String containerIdStr \u003d\n           System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n-      String nodeHttpAddressStr \u003d\n-          System.getenv(ApplicationConstants.NM_HTTP_ADDRESS_ENV);\n+      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n+      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n+      String nodeHttpPortString \u003d\n+          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n       String appSubmitTimeStr \u003d\n           System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n-      if (containerIdStr \u003d\u003d null) {\n-        String msg \u003d ApplicationConstants.AM_CONTAINER_ID_ENV + \" is null\";\n-        LOG.error(msg);\n-        throw new IOException(msg);\n-      }\n-      if (nodeHttpAddressStr \u003d\u003d null) {\n-        String msg \u003d ApplicationConstants.NM_HTTP_ADDRESS_ENV + \" is null\";\n-        LOG.error(msg);\n-        throw new IOException(msg);\n-      }\n-      if (appSubmitTimeStr \u003d\u003d null) {\n-        String msg \u003d ApplicationConstants.APP_SUBMIT_TIME_ENV + \" is null\";\n-        LOG.error(msg);\n-        throw new IOException(msg);\n-      }\n+      \n+      validateInputParam(containerIdStr,\n+          ApplicationConstants.AM_CONTAINER_ID_ENV);\n+      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n+      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n+      validateInputParam(nodeHttpPortString,\n+          ApplicationConstants.NM_HTTP_PORT_ENV);\n+      validateInputParam(appSubmitTimeStr,\n+          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n \n       ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n       ApplicationAttemptId applicationAttemptId \u003d\n           containerId.getApplicationAttemptId();\n-      InetSocketAddress nodeHttpInetAddr \u003d\n-        NetUtils.createSocketAddr(nodeHttpAddressStr);\n       long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n       \n       MRAppMaster appMaster \u003d\n-          new MRAppMaster(applicationAttemptId, containerId,\n-              nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n-              appSubmitTime);\n+          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n+              Integer.parseInt(nodePortString),\n+              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n       Runtime.getRuntime().addShutdownHook(\n           new CompositeServiceShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      String containerIdStr \u003d\n          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n      String nodeHostString \u003d System.getenv(ApplicationConstants.NM_HOST_ENV);\n      String nodePortString \u003d System.getenv(ApplicationConstants.NM_PORT_ENV);\n      String nodeHttpPortString \u003d\n          System.getenv(ApplicationConstants.NM_HTTP_PORT_ENV);\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      \n      validateInputParam(containerIdStr,\n          ApplicationConstants.AM_CONTAINER_ID_ENV);\n      validateInputParam(nodeHostString, ApplicationConstants.NM_HOST_ENV);\n      validateInputParam(nodePortString, ApplicationConstants.NM_PORT_ENV);\n      validateInputParam(nodeHttpPortString,\n          ApplicationConstants.NM_HTTP_PORT_ENV);\n      validateInputParam(appSubmitTimeStr,\n          ApplicationConstants.APP_SUBMIT_TIME_ENV);\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId, nodeHostString,\n              Integer.parseInt(nodePortString),\n              Integer.parseInt(nodeHttpPortString), appSubmitTime);\n      Runtime.getRuntime().addShutdownHook(\n          new CompositeServiceShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "13e4562924a6cb3d16c262e0f595b2ffbf9e0546": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3144. Augmented JobHistory with the information needed for serving aggregated logs. Contributed by Siddharth Seth.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1185976 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/10/11 10:21 PM",
      "commitName": "13e4562924a6cb3d16c262e0f595b2ffbf9e0546",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/10/11 3:46 PM",
      "commitNameOld": "b4d20c707af6fe8b9b3e5ffa95a88012a1cdfc17",
      "commitAuthorOld": "Mahadev Konar",
      "daysBetweenCommits": 0.27,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,26 +1,48 @@\n   public static void main(String[] args) {\n     try {\n-      String applicationAttemptIdStr \u003d System\n-          .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);\n-      if (applicationAttemptIdStr \u003d\u003d null) {\n-        String msg \u003d ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV\n-            + \" is null\";\n+      String containerIdStr \u003d\n+          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n+      String nodeHttpAddressStr \u003d\n+          System.getenv(ApplicationConstants.NM_HTTP_ADDRESS_ENV);\n+      String appSubmitTimeStr \u003d\n+          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n+      if (containerIdStr \u003d\u003d null) {\n+        String msg \u003d ApplicationConstants.AM_CONTAINER_ID_ENV + \" is null\";\n         LOG.error(msg);\n         throw new IOException(msg);\n       }\n-      ApplicationAttemptId applicationAttemptId \u003d ConverterUtils\n-          .toApplicationAttemptId(applicationAttemptIdStr);\n-      MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId);\n+      if (nodeHttpAddressStr \u003d\u003d null) {\n+        String msg \u003d ApplicationConstants.NM_HTTP_ADDRESS_ENV + \" is null\";\n+        LOG.error(msg);\n+        throw new IOException(msg);\n+      }\n+      if (appSubmitTimeStr \u003d\u003d null) {\n+        String msg \u003d ApplicationConstants.APP_SUBMIT_TIME_ENV + \" is null\";\n+        LOG.error(msg);\n+        throw new IOException(msg);\n+      }\n+\n+      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n+      ApplicationAttemptId applicationAttemptId \u003d\n+          containerId.getApplicationAttemptId();\n+      InetSocketAddress nodeHttpInetAddr \u003d\n+        NetUtils.createSocketAddr(nodeHttpAddressStr);\n+      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n+      \n+      MRAppMaster appMaster \u003d\n+          new MRAppMaster(applicationAttemptId, containerId,\n+              nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n+              appSubmitTime);\n       Runtime.getRuntime().addShutdownHook(\n           new CompositeServiceShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       String jobUserName \u003d System\n           .getenv(ApplicationConstants.Environment.USER.name());\n       conf.set(MRJobConfig.USER_NAME, jobUserName);\n       initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      String containerIdStr \u003d\n          System.getenv(ApplicationConstants.AM_CONTAINER_ID_ENV);\n      String nodeHttpAddressStr \u003d\n          System.getenv(ApplicationConstants.NM_HTTP_ADDRESS_ENV);\n      String appSubmitTimeStr \u003d\n          System.getenv(ApplicationConstants.APP_SUBMIT_TIME_ENV);\n      if (containerIdStr \u003d\u003d null) {\n        String msg \u003d ApplicationConstants.AM_CONTAINER_ID_ENV + \" is null\";\n        LOG.error(msg);\n        throw new IOException(msg);\n      }\n      if (nodeHttpAddressStr \u003d\u003d null) {\n        String msg \u003d ApplicationConstants.NM_HTTP_ADDRESS_ENV + \" is null\";\n        LOG.error(msg);\n        throw new IOException(msg);\n      }\n      if (appSubmitTimeStr \u003d\u003d null) {\n        String msg \u003d ApplicationConstants.APP_SUBMIT_TIME_ENV + \" is null\";\n        LOG.error(msg);\n        throw new IOException(msg);\n      }\n\n      ContainerId containerId \u003d ConverterUtils.toContainerId(containerIdStr);\n      ApplicationAttemptId applicationAttemptId \u003d\n          containerId.getApplicationAttemptId();\n      InetSocketAddress nodeHttpInetAddr \u003d\n        NetUtils.createSocketAddr(nodeHttpAddressStr);\n      long appSubmitTime \u003d Long.parseLong(appSubmitTimeStr);\n      \n      MRAppMaster appMaster \u003d\n          new MRAppMaster(applicationAttemptId, containerId,\n              nodeHttpInetAddr.getHostName(), nodeHttpInetAddr.getPort(),\n              appSubmitTime);\n      Runtime.getRuntime().addShutdownHook(\n          new CompositeServiceShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "e979a3ddb17f32582e36cdc9b826f06c80c473f2": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3056. Changed the default staging directory to not include user.name to prevent issues with non-secure mode. Contributed by Devaraj K.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1178740 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "04/10/11 2:37 AM",
      "commitName": "e979a3ddb17f32582e36cdc9b826f06c80c473f2",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "03/10/11 4:21 PM",
      "commitNameOld": "12743d2169f5a24a9b3be07c9e9dcc3f2f1001f0",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.43,
      "commitsBetweenForRepo": 10,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,27 +1,26 @@\n   public static void main(String[] args) {\n     try {\n       String applicationAttemptIdStr \u003d System\n           .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);\n       if (applicationAttemptIdStr \u003d\u003d null) {\n         String msg \u003d ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV\n             + \" is null\";\n         LOG.error(msg);\n         throw new IOException(msg);\n       }\n       ApplicationAttemptId applicationAttemptId \u003d ConverterUtils\n           .toApplicationAttemptId(applicationAttemptIdStr);\n       MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId);\n       Runtime.getRuntime().addShutdownHook(\n           new CompositeServiceShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n-      conf.set(MRJobConfig.USER_NAME, \n-          System.getProperty(\"user.name\")); \n-      UserGroupInformation.setConfiguration(conf);\n-      appMaster.init(conf);\n-      appMaster.start();\n+      String jobUserName \u003d System\n+          .getenv(ApplicationConstants.Environment.USER.name());\n+      conf.set(MRJobConfig.USER_NAME, jobUserName);\n+      initAndStartAppMaster(appMaster, conf, jobUserName);\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n-  } \n\\ No newline at end of file\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      String applicationAttemptIdStr \u003d System\n          .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);\n      if (applicationAttemptIdStr \u003d\u003d null) {\n        String msg \u003d ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV\n            + \" is null\";\n        LOG.error(msg);\n        throw new IOException(msg);\n      }\n      ApplicationAttemptId applicationAttemptId \u003d ConverterUtils\n          .toApplicationAttemptId(applicationAttemptIdStr);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId);\n      Runtime.getRuntime().addShutdownHook(\n          new CompositeServiceShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      String jobUserName \u003d System\n          .getenv(ApplicationConstants.Environment.USER.name());\n      conf.set(MRJobConfig.USER_NAME, jobUserName);\n      initAndStartAppMaster(appMaster, conf, jobUserName);\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "c9a7d3dbf902244902b636bf566154c09ecd1116": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3090. Fix MR AM to use ApplicationAttemptId rather than (ApplicationId, startCount) consistently. \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1175718 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "26/09/11 1:44 AM",
      "commitName": "c9a7d3dbf902244902b636bf566154c09ecd1116",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "23/09/11 7:07 AM",
      "commitNameOld": "b549c107825581b15fd14494099a943ff3213c6f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.78,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,28 +1,27 @@\n   public static void main(String[] args) {\n     try {\n       String applicationAttemptIdStr \u003d System\n           .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);\n       if (applicationAttemptIdStr \u003d\u003d null) {\n         String msg \u003d ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV\n             + \" is null\";\n         LOG.error(msg);\n         throw new IOException(msg);\n       }\n       ApplicationAttemptId applicationAttemptId \u003d ConverterUtils\n           .toApplicationAttemptId(applicationAttemptIdStr);\n-      MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId\n-          .getApplicationId(), applicationAttemptId.getAttemptId());\n+      MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId);\n       Runtime.getRuntime().addShutdownHook(\n           new CompositeServiceShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       conf.set(MRJobConfig.USER_NAME, \n           System.getProperty(\"user.name\")); \n       UserGroupInformation.setConfiguration(conf);\n       appMaster.init(conf);\n       appMaster.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      String applicationAttemptIdStr \u003d System\n          .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);\n      if (applicationAttemptIdStr \u003d\u003d null) {\n        String msg \u003d ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV\n            + \" is null\";\n        LOG.error(msg);\n        throw new IOException(msg);\n      }\n      ApplicationAttemptId applicationAttemptId \u003d ConverterUtils\n          .toApplicationAttemptId(applicationAttemptIdStr);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId);\n      Runtime.getRuntime().addShutdownHook(\n          new CompositeServiceShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  } ",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "b549c107825581b15fd14494099a943ff3213c6f": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3055. Simplified ApplicationAttemptId passing to ApplicationMaster via environment variable. (vinodkv)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1174785 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/09/11 7:07 AM",
      "commitName": "b549c107825581b15fd14494099a943ff3213c6f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "21/09/11 11:28 AM",
      "commitNameOld": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 1.82,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,28 @@\n   public static void main(String[] args) {\n     try {\n-      //Configuration.addDefaultResource(\"job.xml\");\n-      ApplicationId applicationId \u003d RecordFactoryProvider\n-          .getRecordFactory(null).newRecordInstance(ApplicationId.class);\n-      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n-      applicationId.setId(Integer.valueOf(args[1]));\n-      int failCount \u003d Integer.valueOf(args[2]);\n-      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n+      String applicationAttemptIdStr \u003d System\n+          .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);\n+      if (applicationAttemptIdStr \u003d\u003d null) {\n+        String msg \u003d ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV\n+            + \" is null\";\n+        LOG.error(msg);\n+        throw new IOException(msg);\n+      }\n+      ApplicationAttemptId applicationAttemptId \u003d ConverterUtils\n+          .toApplicationAttemptId(applicationAttemptIdStr);\n+      MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId\n+          .getApplicationId(), applicationAttemptId.getAttemptId());\n       Runtime.getRuntime().addShutdownHook(\n           new CompositeServiceShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       conf.set(MRJobConfig.USER_NAME, \n           System.getProperty(\"user.name\")); \n       UserGroupInformation.setConfiguration(conf);\n       appMaster.init(conf);\n       appMaster.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      String applicationAttemptIdStr \u003d System\n          .getenv(ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV);\n      if (applicationAttemptIdStr \u003d\u003d null) {\n        String msg \u003d ApplicationConstants.APPLICATION_ATTEMPT_ID_ENV\n            + \" is null\";\n        LOG.error(msg);\n        throw new IOException(msg);\n      }\n      ApplicationAttemptId applicationAttemptId \u003d ConverterUtils\n          .toApplicationAttemptId(applicationAttemptIdStr);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationAttemptId\n          .getApplicationId(), applicationAttemptId.getAttemptId());\n      Runtime.getRuntime().addShutdownHook(\n          new CompositeServiceShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  } ",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "d00b3c49f6fb3f6a617add6203c6b55f6c345940": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2880. Improved classpath-construction for mapreduce AM and containers. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1173783 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/09/11 11:28 AM",
      "commitName": "d00b3c49f6fb3f6a617add6203c6b55f6c345940",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "18/09/11 12:16 AM",
      "commitNameOld": "61900651b1b85cf235e01142acf2a51727fc5537",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 3.47,
      "commitsBetweenForRepo": 26,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,23 @@\n   public static void main(String[] args) {\n     try {\n       //Configuration.addDefaultResource(\"job.xml\");\n       ApplicationId applicationId \u003d RecordFactoryProvider\n           .getRecordFactory(null).newRecordInstance(ApplicationId.class);\n       applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n       applicationId.setId(Integer.valueOf(args[1]));\n       int failCount \u003d Integer.valueOf(args[2]);\n       MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n       Runtime.getRuntime().addShutdownHook(\n           new CompositeServiceShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n-      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n+      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n       conf.set(MRJobConfig.USER_NAME, \n           System.getProperty(\"user.name\")); \n       UserGroupInformation.setConfiguration(conf);\n       appMaster.init(conf);\n       appMaster.start();\n     } catch (Throwable t) {\n       LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      //Configuration.addDefaultResource(\"job.xml\");\n      ApplicationId applicationId \u003d RecordFactoryProvider\n          .getRecordFactory(null).newRecordInstance(ApplicationId.class);\n      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n      applicationId.setId(Integer.valueOf(args[1]));\n      int failCount \u003d Integer.valueOf(args[2]);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n      Runtime.getRuntime().addShutdownHook(\n          new CompositeServiceShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRJobConfig.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  } ",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "4ba2acf3363bdfd7fcdd9de496cd57f8af6f03ad": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-2966. Added ShutDown hooks for MRV2 processes so that they can gracefully exit. Contributed by Abhijit Suresh Shingate.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1170746 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "14/09/11 10:57 AM",
      "commitName": "4ba2acf3363bdfd7fcdd9de496cd57f8af6f03ad",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "08/09/11 6:44 PM",
      "commitNameOld": "fafe8cd28e726566509c679e19d7da622f29f90d",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 5.68,
      "commitsBetweenForRepo": 37,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,21 +1,23 @@\n   public static void main(String[] args) {\n     try {\n       //Configuration.addDefaultResource(\"job.xml\");\n-      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n-      \n+      ApplicationId applicationId \u003d RecordFactoryProvider\n+          .getRecordFactory(null).newRecordInstance(ApplicationId.class);\n       applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n       applicationId.setId(Integer.valueOf(args[1]));\n       int failCount \u003d Integer.valueOf(args[2]);\n       MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n+      Runtime.getRuntime().addShutdownHook(\n+          new CompositeServiceShutdownHook(appMaster));\n       YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n       conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n       conf.set(MRJobConfig.USER_NAME, \n           System.getProperty(\"user.name\")); \n       UserGroupInformation.setConfiguration(conf);\n       appMaster.init(conf);\n       appMaster.start();\n     } catch (Throwable t) {\n-      LOG.error(\"Caught throwable. Exiting:\", t);\n+      LOG.fatal(\"Error starting MRAppMaster\", t);\n       System.exit(1);\n     }\n   } \n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      //Configuration.addDefaultResource(\"job.xml\");\n      ApplicationId applicationId \u003d RecordFactoryProvider\n          .getRecordFactory(null).newRecordInstance(ApplicationId.class);\n      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n      applicationId.setId(Integer.valueOf(args[1]));\n      int failCount \u003d Integer.valueOf(args[2]);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n      Runtime.getRuntime().addShutdownHook(\n          new CompositeServiceShutdownHook(appMaster));\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.fatal(\"Error starting MRAppMaster\", t);\n      System.exit(1);\n    }\n  } ",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public static void main(String[] args) {\n    try {\n      //Configuration.addDefaultResource(\"job.xml\");\n      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n      \n      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n      applicationId.setId(Integer.valueOf(args[1]));\n      int failCount \u003d Integer.valueOf(args[2]);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.error(\"Caught throwable. Exiting:\", t);\n      System.exit(1);\n    }\n  } ",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
        "newPath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Ymultichange(Ymovefromfile,Yexceptionschange,Ybodychange,Yparameterchange)",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-  public static void main(String argv[]) throws Exception {\n-    StringUtils.startupShutdownMessage(TaskTracker.class, argv, LOG);\n-    if (argv.length !\u003d 0) {\n-      System.out.println(\"usage: TaskTracker\");\n-      System.exit(-1);\n-    }\n+  public static void main(String[] args) {\n     try {\n-      JobConf conf\u003dnew JobConf();\n-      // enable the server to track time spent waiting on locks\n-      ReflectionUtils.setContentionTracing\n-        (conf.getBoolean(TT_CONTENTION_TRACKING, false));\n-      new TaskTracker(conf).run();\n-    } catch (Throwable e) {\n-      LOG.error(\"Can not start task tracker because \"+\n-                StringUtils.stringifyException(e));\n-      System.exit(-1);\n+      //Configuration.addDefaultResource(\"job.xml\");\n+      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n+      \n+      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n+      applicationId.setId(Integer.valueOf(args[1]));\n+      int failCount \u003d Integer.valueOf(args[2]);\n+      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n+      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n+      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n+      conf.set(MRJobConfig.USER_NAME, \n+          System.getProperty(\"user.name\")); \n+      UserGroupInformation.setConfiguration(conf);\n+      appMaster.init(conf);\n+      appMaster.start();\n+    } catch (Throwable t) {\n+      LOG.error(\"Caught throwable. Exiting:\", t);\n+      System.exit(1);\n     }\n-  }\n\\ No newline at end of file\n+  } \n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] args) {\n    try {\n      //Configuration.addDefaultResource(\"job.xml\");\n      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n      \n      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n      applicationId.setId(Integer.valueOf(args[1]));\n      int failCount \u003d Integer.valueOf(args[2]);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.error(\"Caught throwable. Exiting:\", t);\n      System.exit(1);\n    }\n  } ",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
          "extendedDetails": {
            "oldPath": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java",
            "newPath": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
            "oldMethodName": "main",
            "newMethodName": "main"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-  public static void main(String argv[]) throws Exception {\n-    StringUtils.startupShutdownMessage(TaskTracker.class, argv, LOG);\n-    if (argv.length !\u003d 0) {\n-      System.out.println(\"usage: TaskTracker\");\n-      System.exit(-1);\n-    }\n+  public static void main(String[] args) {\n     try {\n-      JobConf conf\u003dnew JobConf();\n-      // enable the server to track time spent waiting on locks\n-      ReflectionUtils.setContentionTracing\n-        (conf.getBoolean(TT_CONTENTION_TRACKING, false));\n-      new TaskTracker(conf).run();\n-    } catch (Throwable e) {\n-      LOG.error(\"Can not start task tracker because \"+\n-                StringUtils.stringifyException(e));\n-      System.exit(-1);\n+      //Configuration.addDefaultResource(\"job.xml\");\n+      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n+      \n+      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n+      applicationId.setId(Integer.valueOf(args[1]));\n+      int failCount \u003d Integer.valueOf(args[2]);\n+      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n+      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n+      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n+      conf.set(MRJobConfig.USER_NAME, \n+          System.getProperty(\"user.name\")); \n+      UserGroupInformation.setConfiguration(conf);\n+      appMaster.init(conf);\n+      appMaster.start();\n+    } catch (Throwable t) {\n+      LOG.error(\"Caught throwable. Exiting:\", t);\n+      System.exit(1);\n     }\n-  }\n\\ No newline at end of file\n+  } \n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] args) {\n    try {\n      //Configuration.addDefaultResource(\"job.xml\");\n      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n      \n      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n      applicationId.setId(Integer.valueOf(args[1]));\n      int failCount \u003d Integer.valueOf(args[2]);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.error(\"Caught throwable. Exiting:\", t);\n      System.exit(1);\n    }\n  } ",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
          "extendedDetails": {
            "oldValue": "[Exception]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-  public static void main(String argv[]) throws Exception {\n-    StringUtils.startupShutdownMessage(TaskTracker.class, argv, LOG);\n-    if (argv.length !\u003d 0) {\n-      System.out.println(\"usage: TaskTracker\");\n-      System.exit(-1);\n-    }\n+  public static void main(String[] args) {\n     try {\n-      JobConf conf\u003dnew JobConf();\n-      // enable the server to track time spent waiting on locks\n-      ReflectionUtils.setContentionTracing\n-        (conf.getBoolean(TT_CONTENTION_TRACKING, false));\n-      new TaskTracker(conf).run();\n-    } catch (Throwable e) {\n-      LOG.error(\"Can not start task tracker because \"+\n-                StringUtils.stringifyException(e));\n-      System.exit(-1);\n+      //Configuration.addDefaultResource(\"job.xml\");\n+      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n+      \n+      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n+      applicationId.setId(Integer.valueOf(args[1]));\n+      int failCount \u003d Integer.valueOf(args[2]);\n+      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n+      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n+      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n+      conf.set(MRJobConfig.USER_NAME, \n+          System.getProperty(\"user.name\")); \n+      UserGroupInformation.setConfiguration(conf);\n+      appMaster.init(conf);\n+      appMaster.start();\n+    } catch (Throwable t) {\n+      LOG.error(\"Caught throwable. Exiting:\", t);\n+      System.exit(1);\n     }\n-  }\n\\ No newline at end of file\n+  } \n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] args) {\n    try {\n      //Configuration.addDefaultResource(\"job.xml\");\n      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n      \n      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n      applicationId.setId(Integer.valueOf(args[1]));\n      int failCount \u003d Integer.valueOf(args[2]);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.error(\"Caught throwable. Exiting:\", t);\n      System.exit(1);\n    }\n  } ",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "18/08/11 4:07 AM",
          "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "17/08/11 8:02 PM",
          "commitNameOld": "dd86860633d2ed64705b669a75bf318442ed6225",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.34,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,21 @@\n-  public static void main(String argv[]) throws Exception {\n-    StringUtils.startupShutdownMessage(TaskTracker.class, argv, LOG);\n-    if (argv.length !\u003d 0) {\n-      System.out.println(\"usage: TaskTracker\");\n-      System.exit(-1);\n-    }\n+  public static void main(String[] args) {\n     try {\n-      JobConf conf\u003dnew JobConf();\n-      // enable the server to track time spent waiting on locks\n-      ReflectionUtils.setContentionTracing\n-        (conf.getBoolean(TT_CONTENTION_TRACKING, false));\n-      new TaskTracker(conf).run();\n-    } catch (Throwable e) {\n-      LOG.error(\"Can not start task tracker because \"+\n-                StringUtils.stringifyException(e));\n-      System.exit(-1);\n+      //Configuration.addDefaultResource(\"job.xml\");\n+      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n+      \n+      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n+      applicationId.setId(Integer.valueOf(args[1]));\n+      int failCount \u003d Integer.valueOf(args[2]);\n+      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n+      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n+      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n+      conf.set(MRJobConfig.USER_NAME, \n+          System.getProperty(\"user.name\")); \n+      UserGroupInformation.setConfiguration(conf);\n+      appMaster.init(conf);\n+      appMaster.start();\n+    } catch (Throwable t) {\n+      LOG.error(\"Caught throwable. Exiting:\", t);\n+      System.exit(1);\n     }\n-  }\n\\ No newline at end of file\n+  } \n\\ No newline at end of file\n",
          "actualSource": "  public static void main(String[] args) {\n    try {\n      //Configuration.addDefaultResource(\"job.xml\");\n      ApplicationId applicationId \u003d RecordFactoryProvider.getRecordFactory(null).newRecordInstance(ApplicationId.class);\n      \n      applicationId.setClusterTimestamp(Long.valueOf(args[0]));\n      applicationId.setId(Integer.valueOf(args[1]));\n      int failCount \u003d Integer.valueOf(args[2]);\n      MRAppMaster appMaster \u003d new MRAppMaster(applicationId, failCount);\n      YarnConfiguration conf \u003d new YarnConfiguration(new JobConf());\n      conf.addResource(new Path(MRConstants.JOB_CONF_FILE));\n      conf.set(MRJobConfig.USER_NAME, \n          System.getProperty(\"user.name\")); \n      UserGroupInformation.setConfiguration(conf);\n      appMaster.init(conf);\n      appMaster.start();\n    } catch (Throwable t) {\n      LOG.error(\"Caught throwable. Exiting:\", t);\n      System.exit(1);\n    }\n  } ",
          "path": "hadoop-mapreduce/hadoop-mr-client/hadoop-mapreduce-client-app/src/main/java/org/apache/hadoop/mapreduce/v2/app/MRAppMaster.java",
          "extendedDetails": {
            "oldValue": "[argv-String[]]",
            "newValue": "[args-String[]]"
          }
        }
      ]
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,18 @@\n+  public static void main(String argv[]) throws Exception {\n+    StringUtils.startupShutdownMessage(TaskTracker.class, argv, LOG);\n+    if (argv.length !\u003d 0) {\n+      System.out.println(\"usage: TaskTracker\");\n+      System.exit(-1);\n+    }\n+    try {\n+      JobConf conf\u003dnew JobConf();\n+      // enable the server to track time spent waiting on locks\n+      ReflectionUtils.setContentionTracing\n+        (conf.getBoolean(TT_CONTENTION_TRACKING, false));\n+      new TaskTracker(conf).run();\n+    } catch (Throwable e) {\n+      LOG.error(\"Can not start task tracker because \"+\n+                StringUtils.stringifyException(e));\n+      System.exit(-1);\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static void main(String argv[]) throws Exception {\n    StringUtils.startupShutdownMessage(TaskTracker.class, argv, LOG);\n    if (argv.length !\u003d 0) {\n      System.out.println(\"usage: TaskTracker\");\n      System.exit(-1);\n    }\n    try {\n      JobConf conf\u003dnew JobConf();\n      // enable the server to track time spent waiting on locks\n      ReflectionUtils.setContentionTracing\n        (conf.getBoolean(TT_CONTENTION_TRACKING, false));\n      new TaskTracker(conf).run();\n    } catch (Throwable e) {\n      LOG.error(\"Can not start task tracker because \"+\n                StringUtils.stringifyException(e));\n      System.exit(-1);\n    }\n  }",
      "path": "mapreduce/src/java/org/apache/hadoop/mapred/TaskTracker.java"
    }
  }
}