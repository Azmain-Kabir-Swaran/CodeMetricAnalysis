{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "CapacityScheduler.java",
  "functionName": "schedule",
  "functionId": "schedule___cs-CapacityScheduler",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
  "functionStartLine": 524,
  "functionEndLine": 574,
  "numCommitsSeen": 239,
  "timeTaken": 7469,
  "changeHistory": [
    "bedc4fe0799cf3b161100acc521fc62a97793427",
    "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
    "834e91ee91d22d74866afbf6252107e969bf8370",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "57cdf8626a32b8595a645b7551f46ab950db4789"
  ],
  "changeHistoryShort": {
    "bedc4fe0799cf3b161100acc521fc62a97793427": "Ybodychange",
    "e9c72d04beddfe0252d2e81123a9fe66bdf04078": "Ybodychange",
    "834e91ee91d22d74866afbf6252107e969bf8370": "Ymultichange(Yexceptionschange,Ybodychange)",
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "57cdf8626a32b8595a645b7551f46ab950db4789": "Yintroduced"
  },
  "changeHistoryDetails": {
    "bedc4fe0799cf3b161100acc521fc62a97793427": {
      "type": "Ybodychange",
      "commitMessage": "YARN-8464. Async scheduling thread could be interrupted when there are no NodeManagers in cluster. (Sunil G via wangda)\n\nChange-Id: I4f5f856373378685713e77752ba6cf0988a66065\n",
      "commitDate": "26/06/18 7:27 PM",
      "commitName": "bedc4fe0799cf3b161100acc521fc62a97793427",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "12/06/18 8:35 AM",
      "commitNameOld": "652bcbb3e4950758e61ce123ecc1798ae2b60a7f",
      "commitAuthorOld": "Akira Ajisaka",
      "daysBetweenCommits": 14.45,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,51 @@\n   static void schedule(CapacityScheduler cs) throws InterruptedException{\n     // First randomize the start point\n     int current \u003d 0;\n     Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n-    int start \u003d random.nextInt(nodes.size());\n+\n+    // If nodes size is 0 (when there are no node managers registered,\n+    // we can return from here itself.\n+    int nodeSize \u003d nodes.size();\n+    if(nodeSize \u003d\u003d 0) {\n+      return;\n+    }\n+    int start \u003d random.nextInt(nodeSize);\n \n     // To avoid too verbose DEBUG logging, only print debug log once for\n     // every 10 secs.\n     boolean printSkipedNodeLogging \u003d false;\n     if (Time.monotonicNow() / 1000 % 10 \u003d\u003d 0) {\n       printSkipedNodeLogging \u003d (!printedVerboseLoggingForAsyncScheduling);\n     } else {\n       printedVerboseLoggingForAsyncScheduling \u003d false;\n     }\n \n     // Allocate containers of node [start, end)\n     for (FiCaSchedulerNode node : nodes) {\n       if (current++ \u003e\u003d start) {\n         if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n           continue;\n         }\n         cs.allocateContainersToNode(node.getNodeID(), false);\n       }\n     }\n \n     current \u003d 0;\n \n     // Allocate containers of node [0, start)\n     for (FiCaSchedulerNode node : nodes) {\n       if (current++ \u003e start) {\n         break;\n       }\n       if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n         continue;\n       }\n       cs.allocateContainersToNode(node.getNodeID(), false);\n     }\n \n     if (printSkipedNodeLogging) {\n       printedVerboseLoggingForAsyncScheduling \u003d true;\n     }\n \n     Thread.sleep(cs.getAsyncScheduleInterval());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void schedule(CapacityScheduler cs) throws InterruptedException{\n    // First randomize the start point\n    int current \u003d 0;\n    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n\n    // If nodes size is 0 (when there are no node managers registered,\n    // we can return from here itself.\n    int nodeSize \u003d nodes.size();\n    if(nodeSize \u003d\u003d 0) {\n      return;\n    }\n    int start \u003d random.nextInt(nodeSize);\n\n    // To avoid too verbose DEBUG logging, only print debug log once for\n    // every 10 secs.\n    boolean printSkipedNodeLogging \u003d false;\n    if (Time.monotonicNow() / 1000 % 10 \u003d\u003d 0) {\n      printSkipedNodeLogging \u003d (!printedVerboseLoggingForAsyncScheduling);\n    } else {\n      printedVerboseLoggingForAsyncScheduling \u003d false;\n    }\n\n    // Allocate containers of node [start, end)\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e\u003d start) {\n        if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n          continue;\n        }\n        cs.allocateContainersToNode(node.getNodeID(), false);\n      }\n    }\n\n    current \u003d 0;\n\n    // Allocate containers of node [0, start)\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e start) {\n        break;\n      }\n      if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n        continue;\n      }\n      cs.allocateContainersToNode(node.getNodeID(), false);\n    }\n\n    if (printSkipedNodeLogging) {\n      printedVerboseLoggingForAsyncScheduling \u003d true;\n    }\n\n    Thread.sleep(cs.getAsyncScheduleInterval());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "e9c72d04beddfe0252d2e81123a9fe66bdf04078": {
      "type": "Ybodychange",
      "commitMessage": "YARN-7790. Improve Capacity Scheduler Async Scheduling to better handle node failures. Contributed by Wangda Tan.\n",
      "commitDate": "29/01/18 7:14 AM",
      "commitName": "e9c72d04beddfe0252d2e81123a9fe66bdf04078",
      "commitAuthor": "Sunil G",
      "commitDateOld": "25/01/18 1:02 AM",
      "commitNameOld": "82cc6f6968d2897ae006c5ef29eba74023f3483e",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 4.26,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,44 @@\n   static void schedule(CapacityScheduler cs) throws InterruptedException{\n     // First randomize the start point\n     int current \u003d 0;\n     Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n     int start \u003d random.nextInt(nodes.size());\n \n+    // To avoid too verbose DEBUG logging, only print debug log once for\n+    // every 10 secs.\n+    boolean printSkipedNodeLogging \u003d false;\n+    if (Time.monotonicNow() / 1000 % 10 \u003d\u003d 0) {\n+      printSkipedNodeLogging \u003d (!printedVerboseLoggingForAsyncScheduling);\n+    } else {\n+      printedVerboseLoggingForAsyncScheduling \u003d false;\n+    }\n+\n+    // Allocate containers of node [start, end)\n     for (FiCaSchedulerNode node : nodes) {\n       if (current++ \u003e\u003d start) {\n+        if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n+          continue;\n+        }\n         cs.allocateContainersToNode(node.getNodeID(), false);\n       }\n     }\n-    // Now, just get everyone to be safe\n+\n+    current \u003d 0;\n+\n+    // Allocate containers of node [0, start)\n     for (FiCaSchedulerNode node : nodes) {\n+      if (current++ \u003e start) {\n+        break;\n+      }\n+      if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n+        continue;\n+      }\n       cs.allocateContainersToNode(node.getNodeID(), false);\n     }\n \n+    if (printSkipedNodeLogging) {\n+      printedVerboseLoggingForAsyncScheduling \u003d true;\n+    }\n+\n     Thread.sleep(cs.getAsyncScheduleInterval());\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void schedule(CapacityScheduler cs) throws InterruptedException{\n    // First randomize the start point\n    int current \u003d 0;\n    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n    int start \u003d random.nextInt(nodes.size());\n\n    // To avoid too verbose DEBUG logging, only print debug log once for\n    // every 10 secs.\n    boolean printSkipedNodeLogging \u003d false;\n    if (Time.monotonicNow() / 1000 % 10 \u003d\u003d 0) {\n      printSkipedNodeLogging \u003d (!printedVerboseLoggingForAsyncScheduling);\n    } else {\n      printedVerboseLoggingForAsyncScheduling \u003d false;\n    }\n\n    // Allocate containers of node [start, end)\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e\u003d start) {\n        if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n          continue;\n        }\n        cs.allocateContainersToNode(node.getNodeID(), false);\n      }\n    }\n\n    current \u003d 0;\n\n    // Allocate containers of node [0, start)\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e start) {\n        break;\n      }\n      if (shouldSkipNodeSchedule(node, cs, printSkipedNodeLogging)) {\n        continue;\n      }\n      cs.allocateContainersToNode(node.getNodeID(), false);\n    }\n\n    if (printSkipedNodeLogging) {\n      printedVerboseLoggingForAsyncScheduling \u003d true;\n    }\n\n    Thread.sleep(cs.getAsyncScheduleInterval());\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "834e91ee91d22d74866afbf6252107e969bf8370": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-7509. AsyncScheduleThread and ResourceCommitterService are still running after RM is transitioned to standby. (Tao Yang via wangda)\n\nChange-Id: I7477fe355419fd4a0a6e2bdda7319abad4c4c748\n",
      "commitDate": "23/11/17 7:59 PM",
      "commitName": "834e91ee91d22d74866afbf6252107e969bf8370",
      "commitAuthor": "Wangda Tan",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-7509. AsyncScheduleThread and ResourceCommitterService are still running after RM is transitioned to standby. (Tao Yang via wangda)\n\nChange-Id: I7477fe355419fd4a0a6e2bdda7319abad4c4c748\n",
          "commitDate": "23/11/17 7:59 PM",
          "commitName": "834e91ee91d22d74866afbf6252107e969bf8370",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "16/11/17 11:25 AM",
          "commitNameOld": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 7.36,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,18 @@\n-  static void schedule(CapacityScheduler cs) {\n+  static void schedule(CapacityScheduler cs) throws InterruptedException{\n     // First randomize the start point\n     int current \u003d 0;\n     Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n     int start \u003d random.nextInt(nodes.size());\n \n     for (FiCaSchedulerNode node : nodes) {\n       if (current++ \u003e\u003d start) {\n         cs.allocateContainersToNode(node.getNodeID(), false);\n       }\n     }\n     // Now, just get everyone to be safe\n     for (FiCaSchedulerNode node : nodes) {\n       cs.allocateContainersToNode(node.getNodeID(), false);\n     }\n \n-    try {\n-      Thread.sleep(cs.getAsyncScheduleInterval());\n-    } catch (InterruptedException e) {}\n+    Thread.sleep(cs.getAsyncScheduleInterval());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void schedule(CapacityScheduler cs) throws InterruptedException{\n    // First randomize the start point\n    int current \u003d 0;\n    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n    int start \u003d random.nextInt(nodes.size());\n\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e\u003d start) {\n        cs.allocateContainersToNode(node.getNodeID(), false);\n      }\n    }\n    // Now, just get everyone to be safe\n    for (FiCaSchedulerNode node : nodes) {\n      cs.allocateContainersToNode(node.getNodeID(), false);\n    }\n\n    Thread.sleep(cs.getAsyncScheduleInterval());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[InterruptedException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-7509. AsyncScheduleThread and ResourceCommitterService are still running after RM is transitioned to standby. (Tao Yang via wangda)\n\nChange-Id: I7477fe355419fd4a0a6e2bdda7319abad4c4c748\n",
          "commitDate": "23/11/17 7:59 PM",
          "commitName": "834e91ee91d22d74866afbf6252107e969bf8370",
          "commitAuthor": "Wangda Tan",
          "commitDateOld": "16/11/17 11:25 AM",
          "commitNameOld": "0987a7b8cbbbb2c1e4c2095821d98a7db19644df",
          "commitAuthorOld": "Wangda Tan",
          "daysBetweenCommits": 7.36,
          "commitsBetweenForRepo": 26,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,18 @@\n-  static void schedule(CapacityScheduler cs) {\n+  static void schedule(CapacityScheduler cs) throws InterruptedException{\n     // First randomize the start point\n     int current \u003d 0;\n     Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n     int start \u003d random.nextInt(nodes.size());\n \n     for (FiCaSchedulerNode node : nodes) {\n       if (current++ \u003e\u003d start) {\n         cs.allocateContainersToNode(node.getNodeID(), false);\n       }\n     }\n     // Now, just get everyone to be safe\n     for (FiCaSchedulerNode node : nodes) {\n       cs.allocateContainersToNode(node.getNodeID(), false);\n     }\n \n-    try {\n-      Thread.sleep(cs.getAsyncScheduleInterval());\n-    } catch (InterruptedException e) {}\n+    Thread.sleep(cs.getAsyncScheduleInterval());\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static void schedule(CapacityScheduler cs) throws InterruptedException{\n    // First randomize the start point\n    int current \u003d 0;\n    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n    int start \u003d random.nextInt(nodes.size());\n\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e\u003d start) {\n        cs.allocateContainersToNode(node.getNodeID(), false);\n      }\n    }\n    // Now, just get everyone to be safe\n    for (FiCaSchedulerNode node : nodes) {\n      cs.allocateContainersToNode(node.getNodeID(), false);\n    }\n\n    Thread.sleep(cs.getAsyncScheduleInterval());\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "01/11/16 3:02 AM",
      "commitNameOld": "7d2d8d25ba0cb10a3c6192d4123f27ede5ef2ba6",
      "commitAuthorOld": "Varun Saxena",
      "daysBetweenCommits": 6.34,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,20 @@\n   static void schedule(CapacityScheduler cs) {\n     // First randomize the start point\n     int current \u003d 0;\n     Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n     int start \u003d random.nextInt(nodes.size());\n+\n     for (FiCaSchedulerNode node : nodes) {\n       if (current++ \u003e\u003d start) {\n-        cs.allocateContainersToNode(node);\n+        cs.allocateContainersToNode(node.getNodeID(), false);\n       }\n     }\n     // Now, just get everyone to be safe\n     for (FiCaSchedulerNode node : nodes) {\n-      cs.allocateContainersToNode(node);\n+      cs.allocateContainersToNode(node.getNodeID(), false);\n     }\n+\n     try {\n       Thread.sleep(cs.getAsyncScheduleInterval());\n     } catch (InterruptedException e) {}\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void schedule(CapacityScheduler cs) {\n    // First randomize the start point\n    int current \u003d 0;\n    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n    int start \u003d random.nextInt(nodes.size());\n\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e\u003d start) {\n        cs.allocateContainersToNode(node.getNodeID(), false);\n      }\n    }\n    // Now, just get everyone to be safe\n    for (FiCaSchedulerNode node : nodes) {\n      cs.allocateContainersToNode(node.getNodeID(), false);\n    }\n\n    try {\n      Thread.sleep(cs.getAsyncScheduleInterval());\n    } catch (InterruptedException e) {}\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "01/03/16 1:14 PM",
      "commitNameOld": "5c465df90414d43250d09084748ab2d41af44eea",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 13.0,
      "commitsBetweenForRepo": 69,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   static void schedule(CapacityScheduler cs) {\n     // First randomize the start point\n     int current \u003d 0;\n-    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.getAllNodes().values();\n+    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n     int start \u003d random.nextInt(nodes.size());\n     for (FiCaSchedulerNode node : nodes) {\n       if (current++ \u003e\u003d start) {\n         cs.allocateContainersToNode(node);\n       }\n     }\n     // Now, just get everyone to be safe\n     for (FiCaSchedulerNode node : nodes) {\n       cs.allocateContainersToNode(node);\n     }\n     try {\n       Thread.sleep(cs.getAsyncScheduleInterval());\n     } catch (InterruptedException e) {}\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static void schedule(CapacityScheduler cs) {\n    // First randomize the start point\n    int current \u003d 0;\n    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.nodeTracker.getAllNodes();\n    int start \u003d random.nextInt(nodes.size());\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e\u003d start) {\n        cs.allocateContainersToNode(node);\n      }\n    }\n    // Now, just get everyone to be safe\n    for (FiCaSchedulerNode node : nodes) {\n      cs.allocateContainersToNode(node);\n    }\n    try {\n      Thread.sleep(cs.getAsyncScheduleInterval());\n    } catch (InterruptedException e) {}\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java",
      "extendedDetails": {}
    },
    "57cdf8626a32b8595a645b7551f46ab950db4789": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1512. Enhanced CapacityScheduler to be able to decouple scheduling from node-heartbeats. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1578722 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/03/14 7:53 PM",
      "commitName": "57cdf8626a32b8595a645b7551f46ab950db4789",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,18 @@\n+  static void schedule(CapacityScheduler cs) {\n+    // First randomize the start point\n+    int current \u003d 0;\n+    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.getAllNodes().values();\n+    int start \u003d random.nextInt(nodes.size());\n+    for (FiCaSchedulerNode node : nodes) {\n+      if (current++ \u003e\u003d start) {\n+        cs.allocateContainersToNode(node);\n+      }\n+    }\n+    // Now, just get everyone to be safe\n+    for (FiCaSchedulerNode node : nodes) {\n+      cs.allocateContainersToNode(node);\n+    }\n+    try {\n+      Thread.sleep(cs.getAsyncScheduleInterval());\n+    } catch (InterruptedException e) {}\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  static void schedule(CapacityScheduler cs) {\n    // First randomize the start point\n    int current \u003d 0;\n    Collection\u003cFiCaSchedulerNode\u003e nodes \u003d cs.getAllNodes().values();\n    int start \u003d random.nextInt(nodes.size());\n    for (FiCaSchedulerNode node : nodes) {\n      if (current++ \u003e\u003d start) {\n        cs.allocateContainersToNode(node);\n      }\n    }\n    // Now, just get everyone to be safe\n    for (FiCaSchedulerNode node : nodes) {\n      cs.allocateContainersToNode(node);\n    }\n    try {\n      Thread.sleep(cs.getAsyncScheduleInterval());\n    } catch (InterruptedException e) {}\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/capacity/CapacityScheduler.java"
    }
  }
}