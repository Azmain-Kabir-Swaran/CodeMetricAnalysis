{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FifoScheduler.java",
  "functionName": "assignContainers",
  "functionId": "assignContainers___node-FiCaSchedulerNode",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
  "functionStartLine": 492,
  "functionEndLine": 550,
  "numCommitsSeen": 169,
  "timeTaken": 11063,
  "changeHistory": [
    "de3b4aac561258ad242a3c5ed1c919428893fd4c",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
    "620325e81696fca140195b74929ed9eda2d5eb16",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b",
    "424fd9494f144c035fdef8c533be51e2027ad8d9",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
    "84dfae2f8a1c787380c65bf8de59bfd2d65901e3",
    "1393581bceda234c88cafec00dbfc0ef2a402e83",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
    "025f1719472282a30aa26ae3e235e404f04ba932",
    "8eb3be63f598daae01f0a0c09eab5086881f153d",
    "453926397182078c65a4428eb5de5a90d6af6448",
    "e1fdf62123625e4ba399af02f8aad500637d29d1",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
    "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
    "21c9116309d8482e7e28522cd7386e65415b15e9",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517"
  ],
  "changeHistoryShort": {
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": "Ybodychange",
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": "Ybodychange",
    "620325e81696fca140195b74929ed9eda2d5eb16": "Ybodychange",
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": "Ybodychange",
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": "Ybodychange",
    "424fd9494f144c035fdef8c533be51e2027ad8d9": "Ybodychange",
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": "Ybodychange",
    "84dfae2f8a1c787380c65bf8de59bfd2d65901e3": "Ybodychange",
    "1393581bceda234c88cafec00dbfc0ef2a402e83": "Ybodychange",
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": "Ybodychange",
    "025f1719472282a30aa26ae3e235e404f04ba932": "Ybodychange",
    "8eb3be63f598daae01f0a0c09eab5086881f153d": "Ybodychange",
    "453926397182078c65a4428eb5de5a90d6af6448": "Ybodychange",
    "e1fdf62123625e4ba399af02f8aad500637d29d1": "Yfilerename",
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": "Ymultichange(Yparameterchange,Ybodychange)",
    "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c": "Ybodychange",
    "21c9116309d8482e7e28522cd7386e65415b15e9": "Ybodychange",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": "Yintroduced"
  },
  "changeHistoryDetails": {
    "de3b4aac561258ad242a3c5ed1c919428893fd4c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5716. Add global scheduler interface definition and update CapacityScheduler to use it. Contributed by Wangda Tan\n",
      "commitDate": "07/11/16 10:14 AM",
      "commitName": "de3b4aac561258ad242a3c5ed1c919428893fd4c",
      "commitAuthor": "Jian He",
      "commitDateOld": "20/10/16 9:17 PM",
      "commitNameOld": "754cb4e30fac1c5fe8d44626968c0ddbfe459335",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 17.58,
      "commitsBetweenForRepo": 196,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,59 +1,59 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n-    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n+    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFifoAppAttempt\u003e\u003e e : applications\n         .entrySet()) {\n-      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n+      FifoAppAttempt application \u003d e.getValue().getCurrentAppAttempt();\n       if (application \u003d\u003d null) {\n         continue;\n       }\n \n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isPlaceBlacklisted(application, node, LOG)) {\n           continue;\n         }\n \n         for (SchedulerRequestKey schedulerKey :\n             application.getSchedulerKeys()) {\n           int maxContainers \u003d\n               getMaxAllocatableContainers(application, schedulerKey, node,\n                   NodeType.OFF_SWITCH);\n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d\n                 assignContainersOnNode(node, application, schedulerKey);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, getClusterResource(),\n               node.getUnallocatedResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n-    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n-      FiCaSchedulerApp attempt \u003d\n-          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n+    for (SchedulerApplication\u003cFifoAppAttempt\u003e application : applications.values()) {\n+      FifoAppAttempt attempt \u003d\n+          (FifoAppAttempt) application.getCurrentAppAttempt();\n       if (attempt \u003d\u003d null) {\n         continue;\n       }\n       updateAppHeadRoom(attempt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFifoAppAttempt\u003e\u003e e : applications\n        .entrySet()) {\n      FifoAppAttempt application \u003d e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isPlaceBlacklisted(application, node, LOG)) {\n          continue;\n        }\n\n        for (SchedulerRequestKey schedulerKey :\n            application.getSchedulerKeys()) {\n          int maxContainers \u003d\n              getMaxAllocatableContainers(application, schedulerKey, node,\n                  NodeType.OFF_SWITCH);\n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d\n                assignContainersOnNode(node, application, schedulerKey);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, getClusterResource(),\n              node.getUnallocatedResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication\u003cFifoAppAttempt\u003e application : applications.values()) {\n      FifoAppAttempt attempt \u003d\n          (FifoAppAttempt) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      updateAppHeadRoom(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "5aace38b748ba71aaadd2c4d64eba8dc1f816828": {
      "type": "Ybodychange",
      "commitMessage": "YARN-5392. Replace use of Priority in the Scheduling infrastructure with an opaque ShedulerRequestKey. (asuresh and subru)\n",
      "commitDate": "26/07/16 2:54 PM",
      "commitName": "5aace38b748ba71aaadd2c4d64eba8dc1f816828",
      "commitAuthor": "Arun Suresh",
      "commitDateOld": "07/06/16 3:06 PM",
      "commitNameOld": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 48.99,
      "commitsBetweenForRepo": 441,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,59 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n       if (application \u003d\u003d null) {\n         continue;\n       }\n \n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isPlaceBlacklisted(application, node, LOG)) {\n           continue;\n         }\n \n-        for (Priority priority : application.getPriorities()) {\n-          int maxContainers \u003d \n-            getMaxAllocatableContainers(application, priority, node, \n-                NodeType.OFF_SWITCH); \n+        for (SchedulerRequestKey schedulerKey :\n+            application.getSchedulerKeys()) {\n+          int maxContainers \u003d\n+              getMaxAllocatableContainers(application, schedulerKey, node,\n+                  NodeType.OFF_SWITCH);\n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n-            int assignedContainers \u003d \n-              assignContainersOnNode(node, application, priority);\n+            int assignedContainers \u003d\n+                assignContainersOnNode(node, application, schedulerKey);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, getClusterResource(),\n               node.getUnallocatedResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n       FiCaSchedulerApp attempt \u003d\n           (FiCaSchedulerApp) application.getCurrentAppAttempt();\n       if (attempt \u003d\u003d null) {\n         continue;\n       }\n       updateAppHeadRoom(attempt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isPlaceBlacklisted(application, node, LOG)) {\n          continue;\n        }\n\n        for (SchedulerRequestKey schedulerKey :\n            application.getSchedulerKeys()) {\n          int maxContainers \u003d\n              getMaxAllocatableContainers(application, schedulerKey, node,\n                  NodeType.OFF_SWITCH);\n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d\n                assignContainersOnNode(node, application, schedulerKey);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, getClusterResource(),\n              node.getUnallocatedResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      updateAppHeadRoom(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "620325e81696fca140195b74929ed9eda2d5eb16": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4837. User facing aspects of \u0027AM blacklisting\u0027 feature need fixing. (vinodkv via wangda)\n",
      "commitDate": "07/06/16 3:06 PM",
      "commitName": "620325e81696fca140195b74929ed9eda2d5eb16",
      "commitAuthor": "Wangda Tan",
      "commitDateOld": "29/05/16 8:54 AM",
      "commitNameOld": "42f90ab885d9693fcc1e52f9637f7de4111110ae",
      "commitAuthorOld": "Varun Vasudev",
      "daysBetweenCommits": 9.26,
      "commitsBetweenForRepo": 57,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n       if (application \u003d\u003d null) {\n         continue;\n       }\n \n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n-        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n+        if (SchedulerAppUtils.isPlaceBlacklisted(application, node, LOG)) {\n           continue;\n         }\n-        \n+\n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, getClusterResource(),\n               node.getUnallocatedResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n       FiCaSchedulerApp attempt \u003d\n           (FiCaSchedulerApp) application.getCurrentAppAttempt();\n       if (attempt \u003d\u003d null) {\n         continue;\n       }\n       updateAppHeadRoom(attempt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isPlaceBlacklisted(application, node, LOG)) {\n          continue;\n        }\n\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, getClusterResource(),\n              node.getUnallocatedResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      updateAppHeadRoom(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "20d389ce61eaacb5ddfb329015f50e96ad894f8d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4719. Add a helper library to maintain node state and allows common queries. (kasha)\n",
      "commitDate": "14/03/16 2:19 PM",
      "commitName": "20d389ce61eaacb5ddfb329015f50e96ad894f8d",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "28/02/16 9:35 AM",
      "commitNameOld": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 15.15,
      "commitsBetweenForRepo": 90,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n       if (application \u003d\u003d null) {\n         continue;\n       }\n \n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n-      if (Resources.lessThan(resourceCalculator, clusterResource,\n+      if (Resources.lessThan(resourceCalculator, getClusterResource(),\n               node.getUnallocatedResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n       FiCaSchedulerApp attempt \u003d\n           (FiCaSchedulerApp) application.getCurrentAppAttempt();\n       if (attempt \u003d\u003d null) {\n         continue;\n       }\n       updateAppHeadRoom(attempt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, getClusterResource(),\n              node.getUnallocatedResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      updateAppHeadRoom(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "f9692770a58af0ab082eb7f15da9cbdcd177605b": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4718. Rename variables in SchedulerNode to reduce ambiguity post YARN-1011. (Inigo Goiri via kasha)\n",
      "commitDate": "28/02/16 9:35 AM",
      "commitName": "f9692770a58af0ab082eb7f15da9cbdcd177605b",
      "commitAuthor": "Karthik Kambatla",
      "commitDateOld": "23/02/16 3:30 AM",
      "commitNameOld": "9ed17f181d96b8719a0ef54a129081948781d57e",
      "commitAuthorOld": "Junping Du",
      "daysBetweenCommits": 5.25,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n       if (application \u003d\u003d null) {\n         continue;\n       }\n \n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n-              node.getAvailableResource(), minimumAllocation)) {\n+              node.getUnallocatedResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n       FiCaSchedulerApp attempt \u003d\n           (FiCaSchedulerApp) application.getCurrentAppAttempt();\n       if (attempt \u003d\u003d null) {\n         continue;\n       }\n       updateAppHeadRoom(attempt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getUnallocatedResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      updateAppHeadRoom(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "424fd9494f144c035fdef8c533be51e2027ad8d9": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1368. Added core functionality of recovering container state into schedulers after ResourceManager Restart so as to preserve running work in the cluster. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1601303 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/06/14 8:09 PM",
      "commitName": "424fd9494f144c035fdef8c533be51e2027ad8d9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "31/05/14 12:33 PM",
      "commitNameOld": "a4ba451802c6c61a0c804809740d46dd76059f25",
      "commitAuthorOld": "Karthik Kambatla",
      "daysBetweenCommits": 8.32,
      "commitsBetweenForRepo": 29,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n       if (application \u003d\u003d null) {\n         continue;\n       }\n \n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n               node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n       FiCaSchedulerApp attempt \u003d\n           (FiCaSchedulerApp) application.getCurrentAppAttempt();\n       if (attempt \u003d\u003d null) {\n         continue;\n       }\n-      attempt.setHeadroom(Resources.subtract(clusterResource, usedResource));\n+      updateAppHeadRoom(attempt);\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      updateAppHeadRoom(attempt);\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2017. Merged some of the common scheduler code. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1596753 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/05/14 10:32 PM",
      "commitName": "82f3454f5ac1f1c457e668e2cee12b4dcc800ee1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "13/05/14 11:41 PM",
      "commitNameOld": "84dfae2f8a1c787380c65bf8de59bfd2d65901e3",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 7.95,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,58 +1,58 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n-    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003e e : applications\n+    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n         .entrySet()) {\n-      FiCaSchedulerApp application \u003d\n-          (FiCaSchedulerApp) e.getValue().getCurrentAppAttempt();\n+      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n       if (application \u003d\u003d null) {\n         continue;\n       }\n+\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n               node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n-    for (SchedulerApplication application : applications.values()) {\n+    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n       FiCaSchedulerApp attempt \u003d\n           (FiCaSchedulerApp) application.getCurrentAppAttempt();\n       if (attempt \u003d\u003d null) {\n         continue;\n       }\n       attempt.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003cFiCaSchedulerApp\u003e\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication\u003cFiCaSchedulerApp\u003e application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      attempt.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "84dfae2f8a1c787380c65bf8de59bfd2d65901e3": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1986. In Fifo Scheduler, node heartbeat in between creating app and attempt causes NPE (Hong Zhiguo via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1594476 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/05/14 11:41 PM",
      "commitName": "84dfae2f8a1c787380c65bf8de59bfd2d65901e3",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "12/03/14 7:36 AM",
      "commitNameOld": "4ce0e4bf2e91278bbc33f4a1c44c7929627b5d6e",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 62.67,
      "commitsBetweenForRepo": 408,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,52 +1,58 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationId, SchedulerApplication\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d\n           (FiCaSchedulerApp) e.getValue().getCurrentAppAttempt();\n+      if (application \u003d\u003d null) {\n+        continue;\n+      }\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n               node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (SchedulerApplication application : applications.values()) {\n       FiCaSchedulerApp attempt \u003d\n           (FiCaSchedulerApp) application.getCurrentAppAttempt();\n+      if (attempt \u003d\u003d null) {\n+        continue;\n+      }\n       attempt.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d\n          (FiCaSchedulerApp) e.getValue().getCurrentAppAttempt();\n      if (application \u003d\u003d null) {\n        continue;\n      }\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      if (attempt \u003d\u003d null) {\n        continue;\n      }\n      attempt.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "1393581bceda234c88cafec00dbfc0ef2a402e83": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1490. Introduced the ability to make ResourceManager optionally not kill all containers when an ApplicationMaster exits. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1557143 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "10/01/14 7:04 AM",
      "commitName": "1393581bceda234c88cafec00dbfc0ef2a402e83",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "02/01/14 12:19 PM",
      "commitNameOld": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 7.78,
      "commitsBetweenForRepo": 34,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,52 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n-        \" #applications\u003d\" + appAttempts.size());\n+        \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n-    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : appAttempts\n+    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003e e : applications\n         .entrySet()) {\n-      FiCaSchedulerApp application \u003d e.getValue();\n+      FiCaSchedulerApp application \u003d\n+          (FiCaSchedulerApp) e.getValue().getCurrentAppAttempt();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n               node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n-    for (FiCaSchedulerApp application : appAttempts.values()) {\n-      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n+    for (SchedulerApplication application : applications.values()) {\n+      FiCaSchedulerApp attempt \u003d\n+          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n+      attempt.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationId, SchedulerApplication\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d\n          (FiCaSchedulerApp) e.getValue().getCurrentAppAttempt();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApplication application : applications.values()) {\n      FiCaSchedulerApp attempt \u003d\n          (FiCaSchedulerApp) application.getCurrentAppAttempt();\n      attempt.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1493. Changed ResourceManager and Scheduler interfacing to recognize app-attempts separately from apps. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1554896 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "02/01/14 12:19 PM",
      "commitName": "a45017a5f17ec11814db7e206d1e80aaa4dd8d8f",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "12/12/13 5:44 PM",
      "commitNameOld": "28db28d491b4e3e3ddf440db4cebab8c0ad6b7f3",
      "commitAuthorOld": "Jian He",
      "daysBetweenCommits": 20.77,
      "commitsBetweenForRepo": 83,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n-        \" #applications\u003d\" + applications.size());\n+        \" #applications\u003d\" + appAttempts.size());\n \n     // Try to assign containers to applications in fifo order\n-    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n+    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : appAttempts\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n         if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n               node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n-    for (FiCaSchedulerApp application : applications.values()) {\n+    for (FiCaSchedulerApp application : appAttempts.values()) {\n       application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + appAttempts.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : appAttempts\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (FiCaSchedulerApp application : appAttempts.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "025f1719472282a30aa26ae3e235e404f04ba932": {
      "type": "Ybodychange",
      "commitMessage": "YARN-1333. Support blacklisting in the Fair Scheduler (Tsuyoshi Ozawa via Sandy Ryza)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1535899 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/10/13 5:27 PM",
      "commitName": "025f1719472282a30aa26ae3e235e404f04ba932",
      "commitAuthor": "Sanford Ryza",
      "commitDateOld": "21/10/13 11:45 AM",
      "commitNameOld": "dc523bd18247df232fe814aed7062a116242ab04",
      "commitAuthorOld": "Sanford Ryza",
      "daysBetweenCommits": 4.24,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,49 +1,49 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         // Check if this resource is on the blacklist\n-        if (FiCaSchedulerUtils.isBlacklisted(application, node, LOG)) {\n+        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n           continue;\n         }\n         \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n               node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (FiCaSchedulerApp application : applications.values()) {\n       application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (SchedulerAppUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (FiCaSchedulerApp application : applications.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "8eb3be63f598daae01f0a0c09eab5086881f153d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-877. Support resource blacklisting for FifoScheduler. (Junping Du via llu)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1498021 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/06/13 1:18 PM",
      "commitName": "8eb3be63f598daae01f0a0c09eab5086881f153d",
      "commitAuthor": "Luke Lu",
      "commitDateOld": "21/06/13 11:28 AM",
      "commitNameOld": "37d7935a9d7b86635c9c1ffc03f88b49857f88a0",
      "commitAuthorOld": "Bikas Saha",
      "daysBetweenCommits": 8.08,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,44 +1,49 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n+        // Check if this resource is on the blacklist\n+        if (FiCaSchedulerUtils.isBlacklisted(application, node, LOG)) {\n+          continue;\n+        }\n+        \n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(resourceCalculator, clusterResource,\n               node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (FiCaSchedulerApp application : applications.values()) {\n       application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        // Check if this resource is on the blacklist\n        if (FiCaSchedulerUtils.isBlacklisted(application, node, LOG)) {\n          continue;\n        }\n        \n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (FiCaSchedulerApp application : applications.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "453926397182078c65a4428eb5de5a90d6af6448": {
      "type": "Ybodychange",
      "commitMessage": "YARN-2. Enhanced CapacityScheduler to account for CPU alongwith memory for multi-dimensional resource scheduling. Contributed by Arun C. Murthy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1430682 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "08/01/13 9:08 PM",
      "commitName": "453926397182078c65a4428eb5de5a90d6af6448",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "28/11/12 5:56 PM",
      "commitNameOld": "1943fdbec613715f3cdc3ca60cbd273115f28299",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 41.13,
      "commitsBetweenForRepo": 152,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,44 @@\n   private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n         .entrySet()) {\n       FiCaSchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n-      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n+      if (Resources.lessThan(resourceCalculator, clusterResource,\n+              node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n     for (FiCaSchedulerApp application : applications.values()) {\n       application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(resourceCalculator, clusterResource,\n              node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (FiCaSchedulerApp application : applications.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "e1fdf62123625e4ba399af02f8aad500637d29d1": {
      "type": "Yfilerename",
      "commitMessage": "YARN-1. Promote YARN to be a sub-project of Apache Hadoop.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1370666 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "07/08/12 10:22 PM",
      "commitName": "e1fdf62123625e4ba399af02f8aad500637d29d1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "07/08/12 7:53 PM",
      "commitNameOld": "34554d1e11ee1d5b564d7d9ed3e6d55931d72749",
      "commitAuthorOld": "Aaron Myers",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (FiCaSchedulerApp application : applications.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "16/07/12 6:43 PM",
      "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
      "commitAuthor": "Arun Murthy",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "13/07/12 1:53 PM",
          "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 3.2,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  private void assignContainers(SchedulerNode node) {\n+  private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n-    for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n+    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n         .entrySet()) {\n-      SchedulerApp application \u003d e.getValue();\n+      FiCaSchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n-    for (SchedulerApp application : applications.values()) {\n+    for (FiCaSchedulerApp application : applications.values()) {\n       application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (FiCaSchedulerApp application : applications.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {
            "oldValue": "[node-SchedulerNode]",
            "newValue": "[node-FiCaSchedulerNode]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "MAPREDUCE-4440. Changed SchedulerApp and SchedulerNode to be a minimal interface to allow schedulers to maintain their own.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1362332 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "16/07/12 6:43 PM",
          "commitName": "7f2b1eadc1b0807ec1302a0c3488bf6e7a59bc76",
          "commitAuthor": "Arun Murthy",
          "commitDateOld": "13/07/12 1:53 PM",
          "commitNameOld": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
          "commitAuthorOld": "Robert Joseph Evans",
          "daysBetweenCommits": 3.2,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,43 +1,43 @@\n-  private void assignContainers(SchedulerNode node) {\n+  private void assignContainers(FiCaSchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n-    for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n+    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n         .entrySet()) {\n-      SchedulerApp application \u003d e.getValue();\n+      FiCaSchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n         break;\n       }\n     }\n \n     // Update the applications\u0027 headroom to correctly take into\n     // account the containers assigned in this update.\n-    for (SchedulerApp application : applications.values()) {\n+    for (FiCaSchedulerApp application : applications.values()) {\n       application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private void assignContainers(FiCaSchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, FiCaSchedulerApp\u003e e : applications\n        .entrySet()) {\n      FiCaSchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (FiCaSchedulerApp application : applications.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
          "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-4299. Terasort hangs with MR2 FifoScheduler (Tom White via bobby)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1361397 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "13/07/12 1:53 PM",
      "commitName": "17de78a43e8d010f3df91dc5a1a40d74b60dfb8c",
      "commitAuthor": "Robert Joseph Evans",
      "commitDateOld": "10/07/12 2:26 PM",
      "commitNameOld": "3bfb26ad3b5ac46f992a632541c97ca2bc897638",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 2.98,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,43 @@\n   private void assignContainers(SchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n         .entrySet()) {\n       SchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n-      application.setHeadroom(clusterResource);\n-      \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n-        return;\n+        break;\n       }\n     }\n+\n+    // Update the applications\u0027 headroom to correctly take into\n+    // account the containers assigned in this update.\n+    for (SchedulerApp application : applications.values()) {\n+      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(SchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n        .entrySet()) {\n      SchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n        break;\n      }\n    }\n\n    // Update the applications\u0027 headroom to correctly take into\n    // account the containers assigned in this update.\n    for (SchedulerApp application : applications.values()) {\n      application.setHeadroom(Resources.subtract(clusterResource, usedResource));\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "21c9116309d8482e7e28522cd7386e65415b15e9": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-3713. Fixed the way head-room is allocated to applications by CapacityScheduler so that it deducts current-usage per user and not per-application. Contributed by Arun C Murthy.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1235989 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "25/01/12 3:31 PM",
      "commitName": "21c9116309d8482e7e28522cd7386e65415b15e9",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "19/01/12 2:23 PM",
      "commitNameOld": "68615600985dfadf067a4967a5e08c1421e7a1c8",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 6.05,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,39 +1,39 @@\n   private void assignContainers(SchedulerNode node) {\n     LOG.debug(\"assignContainers:\" +\n         \" node\u003d\" + node.getRMNode().getNodeAddress() + \n         \" #applications\u003d\" + applications.size());\n \n     // Try to assign containers to applications in fifo order\n     for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n         .entrySet()) {\n       SchedulerApp application \u003d e.getValue();\n       LOG.debug(\"pre-assignContainers\");\n       application.showRequests();\n       synchronized (application) {\n         for (Priority priority : application.getPriorities()) {\n           int maxContainers \u003d \n             getMaxAllocatableContainers(application, priority, node, \n                 NodeType.OFF_SWITCH); \n           // Ensure the application needs containers of this priority\n           if (maxContainers \u003e 0) {\n             int assignedContainers \u003d \n               assignContainersOnNode(node, application, priority);\n             // Do not assign out of order w.r.t priorities\n             if (assignedContainers \u003d\u003d 0) {\n               break;\n             }\n           }\n         }\n       }\n       \n-      application.setAvailableResourceLimit(clusterResource);\n+      application.setHeadroom(clusterResource);\n       \n       LOG.debug(\"post-assignContainers\");\n       application.showRequests();\n \n       // Done\n       if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n         return;\n       }\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(SchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n        .entrySet()) {\n      SchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      application.setHeadroom(clusterResource);\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n        return;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {}
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  private void assignContainers(SchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n        .entrySet()) {\n      SchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      application.setAvailableResourceLimit(clusterResource);\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n        return;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
      "extendedDetails": {
        "oldPath": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java",
        "newPath": "hadoop-mapreduce-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
      }
    },
    "dbecbe5dfe50f834fc3b8401709079e9470cc517": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-279. MapReduce 2.0. Merging MR-279 branch into trunk. Contributed by Arun C Murthy, Christopher Douglas, Devaraj Das, Greg Roelofs, Jeffrey Naisbitt, Josh Wills, Jonathan Eagles, Krishna Ramachandran, Luke Lu, Mahadev Konar, Robert Evans, Sharad Agarwal, Siddharth Seth, Thomas Graves, and Vinod Kumar Vavilapalli.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159166 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/08/11 4:07 AM",
      "commitName": "dbecbe5dfe50f834fc3b8401709079e9470cc517",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,39 @@\n+  private void assignContainers(SchedulerNode node) {\n+    LOG.debug(\"assignContainers:\" +\n+        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n+        \" #applications\u003d\" + applications.size());\n+\n+    // Try to assign containers to applications in fifo order\n+    for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n+        .entrySet()) {\n+      SchedulerApp application \u003d e.getValue();\n+      LOG.debug(\"pre-assignContainers\");\n+      application.showRequests();\n+      synchronized (application) {\n+        for (Priority priority : application.getPriorities()) {\n+          int maxContainers \u003d \n+            getMaxAllocatableContainers(application, priority, node, \n+                NodeType.OFF_SWITCH); \n+          // Ensure the application needs containers of this priority\n+          if (maxContainers \u003e 0) {\n+            int assignedContainers \u003d \n+              assignContainersOnNode(node, application, priority);\n+            // Do not assign out of order w.r.t priorities\n+            if (assignedContainers \u003d\u003d 0) {\n+              break;\n+            }\n+          }\n+        }\n+      }\n+      \n+      application.setAvailableResourceLimit(clusterResource);\n+      \n+      LOG.debug(\"post-assignContainers\");\n+      application.showRequests();\n+\n+      // Done\n+      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n+        return;\n+      }\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void assignContainers(SchedulerNode node) {\n    LOG.debug(\"assignContainers:\" +\n        \" node\u003d\" + node.getRMNode().getNodeAddress() + \n        \" #applications\u003d\" + applications.size());\n\n    // Try to assign containers to applications in fifo order\n    for (Map.Entry\u003cApplicationAttemptId, SchedulerApp\u003e e : applications\n        .entrySet()) {\n      SchedulerApp application \u003d e.getValue();\n      LOG.debug(\"pre-assignContainers\");\n      application.showRequests();\n      synchronized (application) {\n        for (Priority priority : application.getPriorities()) {\n          int maxContainers \u003d \n            getMaxAllocatableContainers(application, priority, node, \n                NodeType.OFF_SWITCH); \n          // Ensure the application needs containers of this priority\n          if (maxContainers \u003e 0) {\n            int assignedContainers \u003d \n              assignContainersOnNode(node, application, priority);\n            // Do not assign out of order w.r.t priorities\n            if (assignedContainers \u003d\u003d 0) {\n              break;\n            }\n          }\n        }\n      }\n      \n      application.setAvailableResourceLimit(clusterResource);\n      \n      LOG.debug(\"post-assignContainers\");\n      application.showRequests();\n\n      // Done\n      if (Resources.lessThan(node.getAvailableResource(), minimumAllocation)) {\n        return;\n      }\n    }\n  }",
      "path": "hadoop-mapreduce/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/scheduler/fifo/FifoScheduler.java"
    }
  }
}