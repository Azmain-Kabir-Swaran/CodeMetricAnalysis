{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPServiceActor.java",
  "functionName": "run",
  "functionId": "run",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
  "functionStartLine": 1310,
  "functionEndLine": 1316,
  "numCommitsSeen": 126,
  "timeTaken": 4121,
  "changeHistory": [
    "b86895485d95440de099831e0db38db037f16bdd",
    "2759689d7d23001f007cb0dbe2521de90734dd5c",
    "176ff5ce90f2cbcd8342016d0f5570337d2ff79f",
    "9d21180c1a625295bb9da0d9d5d8c55740944008",
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
    "1e346aa829519f8a2aa830e76d9856f914861805",
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd"
  ],
  "changeHistoryShort": {
    "b86895485d95440de099831e0db38db037f16bdd": "Ybodychange",
    "2759689d7d23001f007cb0dbe2521de90734dd5c": "Ybodychange",
    "176ff5ce90f2cbcd8342016d0f5570337d2ff79f": "Ybodychange",
    "9d21180c1a625295bb9da0d9d5d8c55740944008": "Ybodychange",
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8": "Ybodychange",
    "1e346aa829519f8a2aa830e76d9856f914861805": "Ymultichange(Ymovefromfile,Ybodychange)",
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd": "Yintroduced"
  },
  "changeHistoryDetails": {
    "b86895485d95440de099831e0db38db037f16bdd": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14997. BPServiceActor processes commands from NameNode asynchronously. Contributed by Xiaoqiao He.\n",
      "commitDate": "19/12/19 9:34 AM",
      "commitName": "b86895485d95440de099831e0db38db037f16bdd",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "21/10/19 2:33 PM",
      "commitNameOld": "c4e27ef7735acd6f91b73d2ecb0227f8dd75a2e4",
      "commitAuthorOld": "Kihwal Lee",
      "daysBetweenCommits": 58.83,
      "commitsBetweenForRepo": 220,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,37 +1,7 @@\n     public void run() {\n-      // The lifeline RPC depends on registration with the NameNode, so wait for\n-      // initial registration to complete.\n-      while (shouldRun()) {\n-        try {\n-          initialRegistrationComplete.await();\n-          break;\n-        } catch (InterruptedException e) {\n-          // The only way thread interruption can happen while waiting on this\n-          // latch is if the state of the actor has been updated to signal\n-          // shutdown.  The next loop\u0027s call to shouldRun() will return false,\n-          // and the thread will finish.\n-          Thread.currentThread().interrupt();\n-        }\n+      try {\n+        processQueue();\n+      } catch (Throwable t) {\n+        LOG.error(\"{} encountered fatal exception and exit.\", getName(), t);\n       }\n-\n-      // After initial NameNode registration has completed, execute the main\n-      // loop for sending periodic lifeline RPCs if needed.  This is done in a\n-      // second loop to avoid a pointless wait on the above latch in every\n-      // iteration of the main loop.\n-      while (shouldRun()) {\n-        try {\n-          if (lifelineNamenode \u003d\u003d null) {\n-            lifelineNamenode \u003d dn.connectToLifelineNN(lifelineNnAddr);\n-          }\n-          sendLifelineIfDue();\n-          Thread.sleep(scheduler.getLifelineWaitTime());\n-        } catch (InterruptedException e) {\n-          Thread.currentThread().interrupt();\n-        } catch (IOException e) {\n-          LOG.warn(\"IOException in LifelineSender for \" + BPServiceActor.this,\n-              e);\n-        }\n-      }\n-\n-      LOG.info(\"LifelineSender for \" + BPServiceActor.this + \" exiting.\");\n     }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      try {\n        processQueue();\n      } catch (Throwable t) {\n        LOG.error(\"{} encountered fatal exception and exit.\", getName(), t);\n      }\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "2759689d7d23001f007cb0dbe2521de90734dd5c": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9239. DataNode Lifeline Protocol: an alternative protocol for reporting DataNode liveness. Contributed by Chris Nauroth.\n",
      "commitDate": "04/03/16 3:29 PM",
      "commitName": "2759689d7d23001f007cb0dbe2521de90734dd5c",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "26/02/16 3:32 PM",
      "commitNameOld": "d1d4e16690cc85f7f22fbead9cf596260819b561",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 7.0,
      "commitsBetweenForRepo": 48,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,37 @@\n-  public void run() {\n-    LOG.info(this + \" starting to offer service\");\n-\n-    try {\n-      while (true) {\n-        // init stuff\n-        try {\n-          // setup storage\n-          connectToNNAndHandshake();\n-          break;\n-        } catch (IOException ioe) {\n-          // Initial handshake, storage recovery or registration failed\n-          runningState \u003d RunningState.INIT_FAILED;\n-          if (shouldRetryInit()) {\n-            // Retry until all namenode\u0027s of BPOS failed initialization\n-            LOG.error(\"Initialization failed for \" + this + \" \"\n-                + ioe.getLocalizedMessage());\n-            sleepAndLogInterrupts(5000, \"initializing\");\n-          } else {\n-            runningState \u003d RunningState.FAILED;\n-            LOG.error(\"Initialization failed for \" + this + \". Exiting. \", ioe);\n-            return;\n-          }\n-        }\n-      }\n-\n-      runningState \u003d RunningState.RUNNING;\n-\n+    public void run() {\n+      // The lifeline RPC depends on registration with the NameNode, so wait for\n+      // initial registration to complete.\n       while (shouldRun()) {\n         try {\n-          offerService();\n-        } catch (Exception ex) {\n-          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n-          sleepAndLogInterrupts(5000, \"offering service\");\n+          initialRegistrationComplete.await();\n+          break;\n+        } catch (InterruptedException e) {\n+          // The only way thread interruption can happen while waiting on this\n+          // latch is if the state of the actor has been updated to signal\n+          // shutdown.  The next loop\u0027s call to shouldRun() will return false,\n+          // and the thread will finish.\n+          Thread.currentThread().interrupt();\n         }\n       }\n-      runningState \u003d RunningState.EXITED;\n-    } catch (Throwable ex) {\n-      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n-      runningState \u003d RunningState.FAILED;\n-    } finally {\n-      LOG.warn(\"Ending block pool service for: \" + this);\n-      cleanUp();\n-    }\n-  }\n\\ No newline at end of file\n+\n+      // After initial NameNode registration has completed, execute the main\n+      // loop for sending periodic lifeline RPCs if needed.  This is done in a\n+      // second loop to avoid a pointless wait on the above latch in every\n+      // iteration of the main loop.\n+      while (shouldRun()) {\n+        try {\n+          if (lifelineNamenode \u003d\u003d null) {\n+            lifelineNamenode \u003d dn.connectToLifelineNN(lifelineNnAddr);\n+          }\n+          sendLifelineIfDue();\n+          Thread.sleep(scheduler.getLifelineWaitTime());\n+        } catch (InterruptedException e) {\n+          Thread.currentThread().interrupt();\n+        } catch (IOException e) {\n+          LOG.warn(\"IOException in LifelineSender for \" + BPServiceActor.this,\n+              e);\n+        }\n+      }\n+\n+      LOG.info(\"LifelineSender for \" + BPServiceActor.this + \" exiting.\");\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void run() {\n      // The lifeline RPC depends on registration with the NameNode, so wait for\n      // initial registration to complete.\n      while (shouldRun()) {\n        try {\n          initialRegistrationComplete.await();\n          break;\n        } catch (InterruptedException e) {\n          // The only way thread interruption can happen while waiting on this\n          // latch is if the state of the actor has been updated to signal\n          // shutdown.  The next loop\u0027s call to shouldRun() will return false,\n          // and the thread will finish.\n          Thread.currentThread().interrupt();\n        }\n      }\n\n      // After initial NameNode registration has completed, execute the main\n      // loop for sending periodic lifeline RPCs if needed.  This is done in a\n      // second loop to avoid a pointless wait on the above latch in every\n      // iteration of the main loop.\n      while (shouldRun()) {\n        try {\n          if (lifelineNamenode \u003d\u003d null) {\n            lifelineNamenode \u003d dn.connectToLifelineNN(lifelineNnAddr);\n          }\n          sendLifelineIfDue();\n          Thread.sleep(scheduler.getLifelineWaitTime());\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        } catch (IOException e) {\n          LOG.warn(\"IOException in LifelineSender for \" + BPServiceActor.this,\n              e);\n        }\n      }\n\n      LOG.info(\"LifelineSender for \" + BPServiceActor.this + \" exiting.\");\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "176ff5ce90f2cbcd8342016d0f5570337d2ff79f": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-9402. Switch DataNode.LOG to use slf4j. Contributed by Walter Su.\n",
      "commitDate": "22/11/15 3:54 PM",
      "commitName": "176ff5ce90f2cbcd8342016d0f5570337d2ff79f",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "26/10/15 3:54 PM",
      "commitNameOld": "d8736eb9ca351b82854601ea3b1fbc3c9fab44e4",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 27.04,
      "commitsBetweenForRepo": 188,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,45 +1,45 @@\n   public void run() {\n     LOG.info(this + \" starting to offer service\");\n \n     try {\n       while (true) {\n         // init stuff\n         try {\n           // setup storage\n           connectToNNAndHandshake();\n           break;\n         } catch (IOException ioe) {\n           // Initial handshake, storage recovery or registration failed\n           runningState \u003d RunningState.INIT_FAILED;\n           if (shouldRetryInit()) {\n             // Retry until all namenode\u0027s of BPOS failed initialization\n             LOG.error(\"Initialization failed for \" + this + \" \"\n                 + ioe.getLocalizedMessage());\n             sleepAndLogInterrupts(5000, \"initializing\");\n           } else {\n             runningState \u003d RunningState.FAILED;\n-            LOG.fatal(\"Initialization failed for \" + this + \". Exiting. \", ioe);\n+            LOG.error(\"Initialization failed for \" + this + \". Exiting. \", ioe);\n             return;\n           }\n         }\n       }\n \n       runningState \u003d RunningState.RUNNING;\n \n       while (shouldRun()) {\n         try {\n           offerService();\n         } catch (Exception ex) {\n           LOG.error(\"Exception in BPOfferService for \" + this, ex);\n           sleepAndLogInterrupts(5000, \"offering service\");\n         }\n       }\n       runningState \u003d RunningState.EXITED;\n     } catch (Throwable ex) {\n       LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n       runningState \u003d RunningState.FAILED;\n     } finally {\n       LOG.warn(\"Ending block pool service for: \" + this);\n       cleanUp();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(this + \" starting to offer service\");\n\n    try {\n      while (true) {\n        // init stuff\n        try {\n          // setup storage\n          connectToNNAndHandshake();\n          break;\n        } catch (IOException ioe) {\n          // Initial handshake, storage recovery or registration failed\n          runningState \u003d RunningState.INIT_FAILED;\n          if (shouldRetryInit()) {\n            // Retry until all namenode\u0027s of BPOS failed initialization\n            LOG.error(\"Initialization failed for \" + this + \" \"\n                + ioe.getLocalizedMessage());\n            sleepAndLogInterrupts(5000, \"initializing\");\n          } else {\n            runningState \u003d RunningState.FAILED;\n            LOG.error(\"Initialization failed for \" + this + \". Exiting. \", ioe);\n            return;\n          }\n        }\n      }\n\n      runningState \u003d RunningState.RUNNING;\n\n      while (shouldRun()) {\n        try {\n          offerService();\n        } catch (Exception ex) {\n          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n          sleepAndLogInterrupts(5000, \"offering service\");\n        }\n      }\n      runningState \u003d RunningState.EXITED;\n    } catch (Throwable ex) {\n      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n      runningState \u003d RunningState.FAILED;\n    } finally {\n      LOG.warn(\"Ending block pool service for: \" + this);\n      cleanUp();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "9d21180c1a625295bb9da0d9d5d8c55740944008": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2882. DN continues to start up, even if block pool fails to initialize (Contributed by Vinayakumar B)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1590941 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/04/14 3:27 AM",
      "commitName": "9d21180c1a625295bb9da0d9d5d8c55740944008",
      "commitAuthor": "Vinayakumar B",
      "commitDateOld": "23/04/14 1:13 PM",
      "commitNameOld": "876fd8ab7913a259ff9f69c16cc2d9af46ad3f9b",
      "commitAuthorOld": "Suresh Srinivas",
      "daysBetweenCommits": 5.59,
      "commitsBetweenForRepo": 36,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,32 +1,45 @@\n   public void run() {\n     LOG.info(this + \" starting to offer service\");\n \n     try {\n-      // init stuff\n-      try {\n-        // setup storage\n-        connectToNNAndHandshake();\n-      } catch (IOException ioe) {\n-        // Initial handshake, storage recovery or registration failed\n-        // End BPOfferService thread\n-        LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n-        return;\n+      while (true) {\n+        // init stuff\n+        try {\n+          // setup storage\n+          connectToNNAndHandshake();\n+          break;\n+        } catch (IOException ioe) {\n+          // Initial handshake, storage recovery or registration failed\n+          runningState \u003d RunningState.INIT_FAILED;\n+          if (shouldRetryInit()) {\n+            // Retry until all namenode\u0027s of BPOS failed initialization\n+            LOG.error(\"Initialization failed for \" + this + \" \"\n+                + ioe.getLocalizedMessage());\n+            sleepAndLogInterrupts(5000, \"initializing\");\n+          } else {\n+            runningState \u003d RunningState.FAILED;\n+            LOG.fatal(\"Initialization failed for \" + this + \". Exiting. \", ioe);\n+            return;\n+          }\n+        }\n       }\n \n-      initialized \u003d true; // bp is initialized;\n-      \n+      runningState \u003d RunningState.RUNNING;\n+\n       while (shouldRun()) {\n         try {\n           offerService();\n         } catch (Exception ex) {\n           LOG.error(\"Exception in BPOfferService for \" + this, ex);\n           sleepAndLogInterrupts(5000, \"offering service\");\n         }\n       }\n+      runningState \u003d RunningState.EXITED;\n     } catch (Throwable ex) {\n       LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n+      runningState \u003d RunningState.FAILED;\n     } finally {\n       LOG.warn(\"Ending block pool service for: \" + this);\n       cleanUp();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(this + \" starting to offer service\");\n\n    try {\n      while (true) {\n        // init stuff\n        try {\n          // setup storage\n          connectToNNAndHandshake();\n          break;\n        } catch (IOException ioe) {\n          // Initial handshake, storage recovery or registration failed\n          runningState \u003d RunningState.INIT_FAILED;\n          if (shouldRetryInit()) {\n            // Retry until all namenode\u0027s of BPOS failed initialization\n            LOG.error(\"Initialization failed for \" + this + \" \"\n                + ioe.getLocalizedMessage());\n            sleepAndLogInterrupts(5000, \"initializing\");\n          } else {\n            runningState \u003d RunningState.FAILED;\n            LOG.fatal(\"Initialization failed for \" + this + \". Exiting. \", ioe);\n            return;\n          }\n        }\n      }\n\n      runningState \u003d RunningState.RUNNING;\n\n      while (shouldRun()) {\n        try {\n          offerService();\n        } catch (Exception ex) {\n          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n          sleepAndLogInterrupts(5000, \"offering service\");\n        }\n      }\n      runningState \u003d RunningState.EXITED;\n    } catch (Throwable ex) {\n      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n      runningState \u003d RunningState.FAILED;\n    } finally {\n      LOG.warn(\"Ending block pool service for: \" + this);\n      cleanUp();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-2686. Remove DistributedUpgrade related code. Contributed by Suresh Srinivas\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1375800 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/08/12 2:18 PM",
      "commitName": "6c0ccb5989c2053f5a1ebab0dd9fdb7b4019fda8",
      "commitAuthor": "Suresh Srinivas",
      "commitDateOld": "12/07/12 12:01 PM",
      "commitNameOld": "4a5ba3b7bd2360fd9605863630b477d362874e1e",
      "commitAuthorOld": "Eli Collins",
      "daysBetweenCommits": 40.1,
      "commitsBetweenForRepo": 216,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,33 +1,32 @@\n   public void run() {\n     LOG.info(this + \" starting to offer service\");\n \n     try {\n       // init stuff\n       try {\n         // setup storage\n         connectToNNAndHandshake();\n       } catch (IOException ioe) {\n         // Initial handshake, storage recovery or registration failed\n         // End BPOfferService thread\n         LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n         return;\n       }\n \n       initialized \u003d true; // bp is initialized;\n       \n       while (shouldRun()) {\n         try {\n-          bpos.startDistributedUpgradeIfNeeded();\n           offerService();\n         } catch (Exception ex) {\n           LOG.error(\"Exception in BPOfferService for \" + this, ex);\n           sleepAndLogInterrupts(5000, \"offering service\");\n         }\n       }\n     } catch (Throwable ex) {\n       LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n     } finally {\n       LOG.warn(\"Ending block pool service for: \" + this);\n       cleanUp();\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(this + \" starting to offer service\");\n\n    try {\n      // init stuff\n      try {\n        // setup storage\n        connectToNNAndHandshake();\n      } catch (IOException ioe) {\n        // Initial handshake, storage recovery or registration failed\n        // End BPOfferService thread\n        LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n        return;\n      }\n\n      initialized \u003d true; // bp is initialized;\n      \n      while (shouldRun()) {\n        try {\n          offerService();\n        } catch (Exception ex) {\n          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n          sleepAndLogInterrupts(5000, \"offering service\");\n        }\n      }\n    } catch (Throwable ex) {\n      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n    } finally {\n      LOG.warn(\"Ending block pool service for: \" + this);\n      cleanUp();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "1e346aa829519f8a2aa830e76d9856f914861805": {
      "type": "Ymultichange(Ymovefromfile,Ybodychange)",
      "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 5:10 PM",
      "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/11 5:10 PM",
          "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "30/11/11 1:46 PM",
          "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n   public void run() {\n     LOG.info(this + \" starting to offer service\");\n \n     try {\n       // init stuff\n       try {\n         // setup storage\n         connectToNNAndHandshake();\n       } catch (IOException ioe) {\n         // Initial handshake, storage recovery or registration failed\n         // End BPOfferService thread\n         LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n         return;\n       }\n \n       initialized \u003d true; // bp is initialized;\n       \n       while (shouldRun()) {\n         try {\n-          startDistributedUpgradeIfNeeded();\n+          bpos.startDistributedUpgradeIfNeeded();\n           offerService();\n         } catch (Exception ex) {\n           LOG.error(\"Exception in BPOfferService for \" + this, ex);\n           sleepAndLogInterrupts(5000, \"offering service\");\n         }\n       }\n     } catch (Throwable ex) {\n       LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n     } finally {\n       LOG.warn(\"Ending block pool service for: \" + this);\n       cleanUp();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void run() {\n    LOG.info(this + \" starting to offer service\");\n\n    try {\n      // init stuff\n      try {\n        // setup storage\n        connectToNNAndHandshake();\n      } catch (IOException ioe) {\n        // Initial handshake, storage recovery or registration failed\n        // End BPOfferService thread\n        LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n        return;\n      }\n\n      initialized \u003d true; // bp is initialized;\n      \n      while (shouldRun()) {\n        try {\n          bpos.startDistributedUpgradeIfNeeded();\n          offerService();\n        } catch (Exception ex) {\n          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n          sleepAndLogInterrupts(5000, \"offering service\");\n        }\n      }\n    } catch (Throwable ex) {\n      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n    } finally {\n      LOG.warn(\"Ending block pool service for: \" + this);\n      cleanUp();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
            "oldMethodName": "run",
            "newMethodName": "run"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/11 5:10 PM",
          "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "30/11/11 1:46 PM",
          "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,33 +1,33 @@\n   public void run() {\n     LOG.info(this + \" starting to offer service\");\n \n     try {\n       // init stuff\n       try {\n         // setup storage\n         connectToNNAndHandshake();\n       } catch (IOException ioe) {\n         // Initial handshake, storage recovery or registration failed\n         // End BPOfferService thread\n         LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n         return;\n       }\n \n       initialized \u003d true; // bp is initialized;\n       \n       while (shouldRun()) {\n         try {\n-          startDistributedUpgradeIfNeeded();\n+          bpos.startDistributedUpgradeIfNeeded();\n           offerService();\n         } catch (Exception ex) {\n           LOG.error(\"Exception in BPOfferService for \" + this, ex);\n           sleepAndLogInterrupts(5000, \"offering service\");\n         }\n       }\n     } catch (Throwable ex) {\n       LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n     } finally {\n       LOG.warn(\"Ending block pool service for: \" + this);\n       cleanUp();\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public void run() {\n    LOG.info(this + \" starting to offer service\");\n\n    try {\n      // init stuff\n      try {\n        // setup storage\n        connectToNNAndHandshake();\n      } catch (IOException ioe) {\n        // Initial handshake, storage recovery or registration failed\n        // End BPOfferService thread\n        LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n        return;\n      }\n\n      initialized \u003d true; // bp is initialized;\n      \n      while (shouldRun()) {\n        try {\n          bpos.startDistributedUpgradeIfNeeded();\n          offerService();\n        } catch (Exception ex) {\n          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n          sleepAndLogInterrupts(5000, \"offering service\");\n        }\n      }\n    } catch (Throwable ex) {\n      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n    } finally {\n      LOG.warn(\"Ending block pool service for: \" + this);\n      cleanUp();\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {}
        }
      ]
    },
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-2566. Move BPOfferService to be a non-inner class. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204659 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/11 11:27 AM",
      "commitName": "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,33 @@\n+  public void run() {\n+    LOG.info(this + \" starting to offer service\");\n+\n+    try {\n+      // init stuff\n+      try {\n+        // setup storage\n+        connectToNNAndHandshake();\n+      } catch (IOException ioe) {\n+        // Initial handshake, storage recovery or registration failed\n+        // End BPOfferService thread\n+        LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n+        return;\n+      }\n+\n+      initialized \u003d true; // bp is initialized;\n+      \n+      while (shouldRun()) {\n+        try {\n+          startDistributedUpgradeIfNeeded();\n+          offerService();\n+        } catch (Exception ex) {\n+          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n+          sleepAndLogInterrupts(5000, \"offering service\");\n+        }\n+      }\n+    } catch (Throwable ex) {\n+      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n+    } finally {\n+      LOG.warn(\"Ending block pool service for: \" + this);\n+      cleanUp();\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public void run() {\n    LOG.info(this + \" starting to offer service\");\n\n    try {\n      // init stuff\n      try {\n        // setup storage\n        connectToNNAndHandshake();\n      } catch (IOException ioe) {\n        // Initial handshake, storage recovery or registration failed\n        // End BPOfferService thread\n        LOG.fatal(\"Initialization failed for block pool \" + this, ioe);\n        return;\n      }\n\n      initialized \u003d true; // bp is initialized;\n      \n      while (shouldRun()) {\n        try {\n          startDistributedUpgradeIfNeeded();\n          offerService();\n        } catch (Exception ex) {\n          LOG.error(\"Exception in BPOfferService for \" + this, ex);\n          sleepAndLogInterrupts(5000, \"offering service\");\n        }\n      }\n    } catch (Throwable ex) {\n      LOG.warn(\"Unexpected exception in block pool \" + this, ex);\n    } finally {\n      LOG.warn(\"Ending block pool service for: \" + this);\n      cleanUp();\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java"
    }
  }
}