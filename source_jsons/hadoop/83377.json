{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ServiceLauncher.java",
  "functionName": "instantiateService",
  "functionId": "instantiateService___conf-Configuration",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/ServiceLauncher.java",
  "functionStartLine": 657,
  "functionEndLine": 692,
  "numCommitsSeen": 3,
  "timeTaken": 702,
  "changeHistory": [
    "373bb4931fb392e3ca6bfd78992887e5a405e186"
  ],
  "changeHistoryShort": {
    "373bb4931fb392e3ca6bfd78992887e5a405e186": "Yintroduced"
  },
  "changeHistoryDetails": {
    "373bb4931fb392e3ca6bfd78992887e5a405e186": {
      "type": "Yintroduced",
      "commitMessage": "YARN-679. Add an entry point that can start any Yarn service. Contributed by Steve Loughran.\n",
      "commitDate": "28/04/17 10:45 AM",
      "commitName": "373bb4931fb392e3ca6bfd78992887e5a405e186",
      "commitAuthor": "Junping Du",
      "diff": "@@ -0,0 +1,36 @@\n+  public Service instantiateService(Configuration conf) {\n+    Preconditions.checkArgument(conf !\u003d null, \"null conf\");\n+    Preconditions.checkArgument(serviceClassName !\u003d null,\n+        \"null service classname\");\n+    Preconditions.checkArgument(!serviceClassName.isEmpty(),\n+        \"undefined service classname\");\n+    configuration \u003d conf;\n+\n+    // Instantiate the class. this requires the service to have a public\n+    // zero-argument or string-argument constructor\n+    Object instance;\n+    try {\n+      Class\u003c?\u003e serviceClass \u003d getClassLoader().loadClass(serviceClassName);\n+      try {\n+        instance \u003d serviceClass.getConstructor().newInstance();\n+      } catch (NoSuchMethodException noEmptyConstructor) {\n+        // no simple constructor, fall back to a string\n+        LOG.debug(\"No empty constructor {}\", noEmptyConstructor,\n+            noEmptyConstructor);\n+        instance \u003d serviceClass.getConstructor(String.class)\n+                               .newInstance(serviceClassName);\n+      }\n+    } catch (Exception e) {\n+      throw serviceCreationFailure(e);\n+    }\n+    if (!(instance instanceof Service)) {\n+      //not a service\n+      throw new ServiceLaunchException(\n+          LauncherExitCodes.EXIT_SERVICE_CREATION_FAILURE,\n+          \"Not a service class: \\\"%s\\\"\", serviceClassName);\n+    }\n+\n+    // cast to the specific instance type of this ServiceLauncher\n+    service \u003d (S) instance;\n+    return service;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Service instantiateService(Configuration conf) {\n    Preconditions.checkArgument(conf !\u003d null, \"null conf\");\n    Preconditions.checkArgument(serviceClassName !\u003d null,\n        \"null service classname\");\n    Preconditions.checkArgument(!serviceClassName.isEmpty(),\n        \"undefined service classname\");\n    configuration \u003d conf;\n\n    // Instantiate the class. this requires the service to have a public\n    // zero-argument or string-argument constructor\n    Object instance;\n    try {\n      Class\u003c?\u003e serviceClass \u003d getClassLoader().loadClass(serviceClassName);\n      try {\n        instance \u003d serviceClass.getConstructor().newInstance();\n      } catch (NoSuchMethodException noEmptyConstructor) {\n        // no simple constructor, fall back to a string\n        LOG.debug(\"No empty constructor {}\", noEmptyConstructor,\n            noEmptyConstructor);\n        instance \u003d serviceClass.getConstructor(String.class)\n                               .newInstance(serviceClassName);\n      }\n    } catch (Exception e) {\n      throw serviceCreationFailure(e);\n    }\n    if (!(instance instanceof Service)) {\n      //not a service\n      throw new ServiceLaunchException(\n          LauncherExitCodes.EXIT_SERVICE_CREATION_FAILURE,\n          \"Not a service class: \\\"%s\\\"\", serviceClassName);\n    }\n\n    // cast to the specific instance type of this ServiceLauncher\n    service \u003d (S) instance;\n    return service;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/service/launcher/ServiceLauncher.java"
    }
  }
}