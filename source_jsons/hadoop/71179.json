{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "ApplicationMaster.java",
  "functionName": "getContainerStartCommand",
  "functionId": "getContainerStartCommand",
  "sourceFilePath": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java",
  "functionStartLine": 787,
  "functionEndLine": 811,
  "numCommitsSeen": 2,
  "timeTaken": 415,
  "changeHistory": [
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91"
  ],
  "changeHistoryShort": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ab0b180ddb5d0775a2452d5eeb7badd252aadb91": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-12345 Add Dynamometer to hadoop-tools, a tool for scale testing the HDFS NameNode with real metadata and workloads. Contributed by Erik Krogen.\n",
      "commitDate": "25/06/19 8:07 AM",
      "commitName": "ab0b180ddb5d0775a2452d5eeb7badd252aadb91",
      "commitAuthor": "Erik Krogen",
      "diff": "@@ -0,0 +1,25 @@\n+    private List\u003cString\u003e getContainerStartCommand() throws IOException {\n+      // Set the necessary command to execute on the allocated container\n+      List\u003cString\u003e vargs \u003d new ArrayList\u003c\u003e();\n+\n+      // Set executable command\n+      vargs.add(\"./\" + DynoConstants.START_SCRIPT.getResourcePath());\n+      String component \u003d isNameNodeLauncher ? \"namenode\" : \"datanode\";\n+      vargs.add(component);\n+      if (isNameNodeLauncher) {\n+        vargs.add(remoteStoragePath.getFileSystem(conf)\n+            .makeQualified(remoteStoragePath).toString());\n+      } else {\n+        vargs.add(namenodeServiceRpcAddress);\n+        vargs.add(String.valueOf(amOptions.getDataNodeLaunchDelaySec() \u003c 1 ? 0\n+            : RAND.nextInt(\n+                Ints.checkedCast(amOptions.getDataNodeLaunchDelaySec()))));\n+      }\n+\n+      // Add log redirect params\n+      vargs.add(\"1\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + \"/stdout\");\n+      vargs.add(\"2\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + \"/stderr\");\n+\n+      LOG.info(\"Completed setting up command for \" + component + \": \" + vargs);\n+      return Lists.newArrayList(Joiner.on(\" \").join(vargs));\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private List\u003cString\u003e getContainerStartCommand() throws IOException {\n      // Set the necessary command to execute on the allocated container\n      List\u003cString\u003e vargs \u003d new ArrayList\u003c\u003e();\n\n      // Set executable command\n      vargs.add(\"./\" + DynoConstants.START_SCRIPT.getResourcePath());\n      String component \u003d isNameNodeLauncher ? \"namenode\" : \"datanode\";\n      vargs.add(component);\n      if (isNameNodeLauncher) {\n        vargs.add(remoteStoragePath.getFileSystem(conf)\n            .makeQualified(remoteStoragePath).toString());\n      } else {\n        vargs.add(namenodeServiceRpcAddress);\n        vargs.add(String.valueOf(amOptions.getDataNodeLaunchDelaySec() \u003c 1 ? 0\n            : RAND.nextInt(\n                Ints.checkedCast(amOptions.getDataNodeLaunchDelaySec()))));\n      }\n\n      // Add log redirect params\n      vargs.add(\"1\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + \"/stdout\");\n      vargs.add(\"2\u003e\" + ApplicationConstants.LOG_DIR_EXPANSION_VAR + \"/stderr\");\n\n      LOG.info(\"Completed setting up command for \" + component + \": \" + vargs);\n      return Lists.newArrayList(Joiner.on(\" \").join(vargs));\n    }",
      "path": "hadoop-tools/hadoop-dynamometer/hadoop-dynamometer-infra/src/main/java/org/apache/hadoop/tools/dynamometer/ApplicationMaster.java"
    }
  }
}