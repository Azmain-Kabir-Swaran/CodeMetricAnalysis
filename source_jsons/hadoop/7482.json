{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirRenameOp.java",
  "functionName": "validateDestination",
  "functionId": "validateDestination___src-String__dst-String__srcInode-INode",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
  "functionStartLine": 515,
  "functionEndLine": 539,
  "numCommitsSeen": 245,
  "timeTaken": 4383,
  "changeHistory": [
    "3dadf369d550c2ae393b751cb5a184dbfe2814df",
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7"
  ],
  "changeHistoryShort": {
    "3dadf369d550c2ae393b751cb5a184dbfe2814df": "Ybodychange",
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": "Ymultichange(Ymovefromfile,Yrename)"
  },
  "changeHistoryDetails": {
    "3dadf369d550c2ae393b751cb5a184dbfe2814df": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7087. Ability to list /.reserved. Contributed by Xiao Chen.\n",
      "commitDate": "21/10/15 4:58 PM",
      "commitName": "3dadf369d550c2ae393b751cb5a184dbfe2814df",
      "commitAuthor": "Andrew Wang",
      "commitDateOld": "09/09/15 11:07 PM",
      "commitNameOld": "f62237bc2f02afe11ce185e13aa51a60b5960037",
      "commitAuthorOld": "Zhe Zhang",
      "daysBetweenCommits": 41.74,
      "commitsBetweenForRepo": 325,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,25 @@\n   private static void validateDestination(\n       String src, String dst, INode srcInode)\n       throws IOException {\n     String error;\n     if (srcInode.isSymlink() \u0026\u0026\n         dst.equals(srcInode.asSymlink().getSymlinkString())) {\n       throw new FileAlreadyExistsException(\"Cannot rename symlink \" + src\n           + \" to its target \" + dst);\n     }\n     // dst cannot be a directory or a file under src\n     if (dst.startsWith(src)\n         \u0026\u0026 dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n       error \u003d \"Rename destination \" + dst\n           + \" is a directory or file under source \" + src;\n       NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n           + error);\n       throw new IOException(error);\n     }\n+\n+    if (FSDirectory.isExactReservedName(src)\n+        || FSDirectory.isExactReservedName(dst)) {\n+      error \u003d \"Cannot rename to or from /.reserved\";\n+      throw new InvalidPathException(error);\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private static void validateDestination(\n      String src, String dst, INode srcInode)\n      throws IOException {\n    String error;\n    if (srcInode.isSymlink() \u0026\u0026\n        dst.equals(srcInode.asSymlink().getSymlinkString())) {\n      throw new FileAlreadyExistsException(\"Cannot rename symlink \" + src\n          + \" to its target \" + dst);\n    }\n    // dst cannot be a directory or a file under src\n    if (dst.startsWith(src)\n        \u0026\u0026 dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n      error \u003d \"Rename destination \" + dst\n          + \" is a directory or file under source \" + src;\n      NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n          + error);\n      throw new IOException(error);\n    }\n\n    if (FSDirectory.isExactReservedName(src)\n        || FSDirectory.isExactReservedName(dst)) {\n      error \u003d \"Cannot rename to or from /.reserved\";\n      throw new InvalidPathException(error);\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
      "extendedDetails": {}
    },
    "042699401ebe5186fa5556a79f8f9a206e5ebcd7": {
      "type": "Ymultichange(Ymovefromfile,Yrename)",
      "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
      "commitDate": "01/12/14 9:48 PM",
      "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
      "commitAuthor": "Haohui Mai",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private static void validateRenameDestination(String src, String dst, INode srcInode)\n-          throws IOException {\n+  private static void validateDestination(\n+      String src, String dst, INode srcInode)\n+      throws IOException {\n     String error;\n     if (srcInode.isSymlink() \u0026\u0026\n         dst.equals(srcInode.asSymlink().getSymlinkString())) {\n-      throw new FileAlreadyExistsException(\n-          \"Cannot rename symlink \"+src+\" to its target \"+dst);\n+      throw new FileAlreadyExistsException(\"Cannot rename symlink \" + src\n+          + \" to its target \" + dst);\n     }\n     // dst cannot be a directory or a file under src\n-    if (dst.startsWith(src) \u0026\u0026\n-        dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n+    if (dst.startsWith(src)\n+        \u0026\u0026 dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n       error \u003d \"Rename destination \" + dst\n           + \" is a directory or file under source \" + src;\n       NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n           + error);\n       throw new IOException(error);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateDestination(\n      String src, String dst, INode srcInode)\n      throws IOException {\n    String error;\n    if (srcInode.isSymlink() \u0026\u0026\n        dst.equals(srcInode.asSymlink().getSymlinkString())) {\n      throw new FileAlreadyExistsException(\"Cannot rename symlink \" + src\n          + \" to its target \" + dst);\n    }\n    // dst cannot be a directory or a file under src\n    if (dst.startsWith(src)\n        \u0026\u0026 dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n      error \u003d \"Rename destination \" + dst\n          + \" is a directory or file under source \" + src;\n      NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n          + error);\n      throw new IOException(error);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
            "oldMethodName": "validateRenameDestination",
            "newMethodName": "validateDestination"
          }
        },
        {
          "type": "Yrename",
          "commitMessage": "HDFS-7438. Consolidate the implementation of rename() into a single class. Contributed by Haohui Mai.\n",
          "commitDate": "01/12/14 9:48 PM",
          "commitName": "042699401ebe5186fa5556a79f8f9a206e5ebcd7",
          "commitAuthor": "Haohui Mai",
          "commitDateOld": "01/12/14 9:36 PM",
          "commitNameOld": "0af44ea8462437f8e7a8271b15a19677fd7f05a1",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,19 @@\n-  private static void validateRenameDestination(String src, String dst, INode srcInode)\n-          throws IOException {\n+  private static void validateDestination(\n+      String src, String dst, INode srcInode)\n+      throws IOException {\n     String error;\n     if (srcInode.isSymlink() \u0026\u0026\n         dst.equals(srcInode.asSymlink().getSymlinkString())) {\n-      throw new FileAlreadyExistsException(\n-          \"Cannot rename symlink \"+src+\" to its target \"+dst);\n+      throw new FileAlreadyExistsException(\"Cannot rename symlink \" + src\n+          + \" to its target \" + dst);\n     }\n     // dst cannot be a directory or a file under src\n-    if (dst.startsWith(src) \u0026\u0026\n-        dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n+    if (dst.startsWith(src)\n+        \u0026\u0026 dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n       error \u003d \"Rename destination \" + dst\n           + \" is a directory or file under source \" + src;\n       NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n           + error);\n       throw new IOException(error);\n     }\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static void validateDestination(\n      String src, String dst, INode srcInode)\n      throws IOException {\n    String error;\n    if (srcInode.isSymlink() \u0026\u0026\n        dst.equals(srcInode.asSymlink().getSymlinkString())) {\n      throw new FileAlreadyExistsException(\"Cannot rename symlink \" + src\n          + \" to its target \" + dst);\n    }\n    // dst cannot be a directory or a file under src\n    if (dst.startsWith(src)\n        \u0026\u0026 dst.charAt(src.length()) \u003d\u003d Path.SEPARATOR_CHAR) {\n      error \u003d \"Rename destination \" + dst\n          + \" is a directory or file under source \" + src;\n      NameNode.stateChangeLog.warn(\"DIR* FSDirectory.unprotectedRenameTo: \"\n          + error);\n      throw new IOException(error);\n    }\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirRenameOp.java",
          "extendedDetails": {
            "oldValue": "validateRenameDestination",
            "newValue": "validateDestination"
          }
        }
      ]
    }
  }
}