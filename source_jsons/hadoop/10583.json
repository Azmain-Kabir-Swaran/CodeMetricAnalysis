{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "BPServiceActor.java",
  "functionName": "processCommand",
  "functionId": "processCommand___cmds-DatanodeCommand[]",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
  "functionStartLine": 1346,
  "functionEndLine": 1377,
  "numCommitsSeen": 160,
  "timeTaken": 9075,
  "changeHistory": [
    "cdcb77a2c5ca99502d2ac2fbf803f22463eb1343",
    "b86895485d95440de099831e0db38db037f16bdd",
    "c4e27ef7735acd6f91b73d2ecb0227f8dd75a2e4",
    "1e346aa829519f8a2aa830e76d9856f914861805",
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
    "d86f3183d93714ba078416af4f609d26376eadb0",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc"
  ],
  "changeHistoryShort": {
    "cdcb77a2c5ca99502d2ac2fbf803f22463eb1343": "Ybodychange",
    "b86895485d95440de099831e0db38db037f16bdd": "Ymultichange(Ymodifierchange,Ybodychange)",
    "c4e27ef7735acd6f91b73d2ecb0227f8dd75a2e4": "Ybodychange",
    "1e346aa829519f8a2aa830e76d9856f914861805": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd": "Ymovefromfile",
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": "Yfilerename",
    "d86f3183d93714ba078416af4f609d26376eadb0": "Yfilerename",
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "cdcb77a2c5ca99502d2ac2fbf803f22463eb1343": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-15075. Remove process command timing from BPServiceActor. Contributed by Xiaoqiao He.\n",
      "commitDate": "25/03/20 11:30 AM",
      "commitName": "cdcb77a2c5ca99502d2ac2fbf803f22463eb1343",
      "commitAuthor": "Inigo Goiri",
      "commitDateOld": "13/03/20 6:55 PM",
      "commitNameOld": "e9955bb8ff44396eb478f709307d647ca884de99",
      "commitAuthorOld": "He Xiaoqiao",
      "daysBetweenCommits": 11.69,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,23 +1,32 @@\n     private boolean processCommand(DatanodeCommand[] cmds) {\n       if (cmds !\u003d null) {\n+        long startProcessCommands \u003d monotonicNow();\n         for (DatanodeCommand cmd : cmds) {\n           try {\n             if (!bpos.processCommandFromActor(cmd, actor)) {\n               return false;\n             }\n           } catch (RemoteException re) {\n             String reClass \u003d re.getClassName();\n             if (UnregisteredNodeException.class.getName().equals(reClass) ||\n                 DisallowedDatanodeException.class.getName().equals(reClass) ||\n                 IncorrectVersionException.class.getName().equals(reClass)) {\n               LOG.warn(\"{} is shutting down\", this, re);\n               shouldServiceRun \u003d false;\n               return false;\n             }\n           } catch (IOException ioe) {\n             LOG.warn(\"Error processing datanode Command\", ioe);\n           }\n         }\n+        long processCommandsMs \u003d monotonicNow() - startProcessCommands;\n+        if (cmds.length \u003e 0) {\n+          dn.getMetrics().addNumProcessedCommands(processCommandsMs);\n+        }\n+        if (processCommandsMs \u003e dnConf.getProcessCommandsThresholdMs()) {\n+          LOG.info(\"Took {} ms to process {} commands from NN\",\n+              processCommandsMs, cmds.length);\n+        }\n       }\n       return true;\n     }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processCommand(DatanodeCommand[] cmds) {\n      if (cmds !\u003d null) {\n        long startProcessCommands \u003d monotonicNow();\n        for (DatanodeCommand cmd : cmds) {\n          try {\n            if (!bpos.processCommandFromActor(cmd, actor)) {\n              return false;\n            }\n          } catch (RemoteException re) {\n            String reClass \u003d re.getClassName();\n            if (UnregisteredNodeException.class.getName().equals(reClass) ||\n                DisallowedDatanodeException.class.getName().equals(reClass) ||\n                IncorrectVersionException.class.getName().equals(reClass)) {\n              LOG.warn(\"{} is shutting down\", this, re);\n              shouldServiceRun \u003d false;\n              return false;\n            }\n          } catch (IOException ioe) {\n            LOG.warn(\"Error processing datanode Command\", ioe);\n          }\n        }\n        long processCommandsMs \u003d monotonicNow() - startProcessCommands;\n        if (cmds.length \u003e 0) {\n          dn.getMetrics().addNumProcessedCommands(processCommandsMs);\n        }\n        if (processCommandsMs \u003e dnConf.getProcessCommandsThresholdMs()) {\n          LOG.info(\"Took {} ms to process {} commands from NN\",\n              processCommandsMs, cmds.length);\n        }\n      }\n      return true;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "b86895485d95440de099831e0db38db037f16bdd": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-14997. BPServiceActor processes commands from NameNode asynchronously. Contributed by Xiaoqiao He.\n",
      "commitDate": "19/12/19 9:34 AM",
      "commitName": "b86895485d95440de099831e0db38db037f16bdd",
      "commitAuthor": "Inigo Goiri",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-14997. BPServiceActor processes commands from NameNode asynchronously. Contributed by Xiaoqiao He.\n",
          "commitDate": "19/12/19 9:34 AM",
          "commitName": "b86895485d95440de099831e0db38db037f16bdd",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "21/10/19 2:33 PM",
          "commitNameOld": "c4e27ef7735acd6f91b73d2ecb0227f8dd75a2e4",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 58.83,
          "commitsBetweenForRepo": 220,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  boolean processCommand(DatanodeCommand[] cmds) {\n-    if (cmds !\u003d null) {\n-      for (DatanodeCommand cmd : cmds) {\n-        try {\n-          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n-            return false;\n+    private boolean processCommand(DatanodeCommand[] cmds) {\n+      if (cmds !\u003d null) {\n+        for (DatanodeCommand cmd : cmds) {\n+          try {\n+            if (!bpos.processCommandFromActor(cmd, actor)) {\n+              return false;\n+            }\n+          } catch (RemoteException re) {\n+            String reClass \u003d re.getClassName();\n+            if (UnregisteredNodeException.class.getName().equals(reClass) ||\n+                DisallowedDatanodeException.class.getName().equals(reClass) ||\n+                IncorrectVersionException.class.getName().equals(reClass)) {\n+              LOG.warn(\"{} is shutting down\", this, re);\n+              shouldServiceRun \u003d false;\n+              return false;\n+            }\n+          } catch (IOException ioe) {\n+            LOG.warn(\"Error processing datanode Command\", ioe);\n           }\n-        } catch (RemoteException re) {\n-          String reClass \u003d re.getClassName();\n-          if (UnregisteredNodeException.class.getName().equals(reClass) ||\n-              DisallowedDatanodeException.class.getName().equals(reClass) ||\n-              IncorrectVersionException.class.getName().equals(reClass)) {\n-            LOG.warn(this + \" is shutting down\", re);\n-            shouldServiceRun \u003d false;\n-            return false;\n-          }\n-        } catch (IOException ioe) {\n-          LOG.warn(\"Error processing datanode Command\", ioe);\n         }\n       }\n-    }\n-    return true;\n-  }\n\\ No newline at end of file\n+      return true;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processCommand(DatanodeCommand[] cmds) {\n      if (cmds !\u003d null) {\n        for (DatanodeCommand cmd : cmds) {\n          try {\n            if (!bpos.processCommandFromActor(cmd, actor)) {\n              return false;\n            }\n          } catch (RemoteException re) {\n            String reClass \u003d re.getClassName();\n            if (UnregisteredNodeException.class.getName().equals(reClass) ||\n                DisallowedDatanodeException.class.getName().equals(reClass) ||\n                IncorrectVersionException.class.getName().equals(reClass)) {\n              LOG.warn(\"{} is shutting down\", this, re);\n              shouldServiceRun \u003d false;\n              return false;\n            }\n          } catch (IOException ioe) {\n            LOG.warn(\"Error processing datanode Command\", ioe);\n          }\n        }\n      }\n      return true;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-14997. BPServiceActor processes commands from NameNode asynchronously. Contributed by Xiaoqiao He.\n",
          "commitDate": "19/12/19 9:34 AM",
          "commitName": "b86895485d95440de099831e0db38db037f16bdd",
          "commitAuthor": "Inigo Goiri",
          "commitDateOld": "21/10/19 2:33 PM",
          "commitNameOld": "c4e27ef7735acd6f91b73d2ecb0227f8dd75a2e4",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 58.83,
          "commitsBetweenForRepo": 220,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,23 @@\n-  boolean processCommand(DatanodeCommand[] cmds) {\n-    if (cmds !\u003d null) {\n-      for (DatanodeCommand cmd : cmds) {\n-        try {\n-          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n-            return false;\n+    private boolean processCommand(DatanodeCommand[] cmds) {\n+      if (cmds !\u003d null) {\n+        for (DatanodeCommand cmd : cmds) {\n+          try {\n+            if (!bpos.processCommandFromActor(cmd, actor)) {\n+              return false;\n+            }\n+          } catch (RemoteException re) {\n+            String reClass \u003d re.getClassName();\n+            if (UnregisteredNodeException.class.getName().equals(reClass) ||\n+                DisallowedDatanodeException.class.getName().equals(reClass) ||\n+                IncorrectVersionException.class.getName().equals(reClass)) {\n+              LOG.warn(\"{} is shutting down\", this, re);\n+              shouldServiceRun \u003d false;\n+              return false;\n+            }\n+          } catch (IOException ioe) {\n+            LOG.warn(\"Error processing datanode Command\", ioe);\n           }\n-        } catch (RemoteException re) {\n-          String reClass \u003d re.getClassName();\n-          if (UnregisteredNodeException.class.getName().equals(reClass) ||\n-              DisallowedDatanodeException.class.getName().equals(reClass) ||\n-              IncorrectVersionException.class.getName().equals(reClass)) {\n-            LOG.warn(this + \" is shutting down\", re);\n-            shouldServiceRun \u003d false;\n-            return false;\n-          }\n-        } catch (IOException ioe) {\n-          LOG.warn(\"Error processing datanode Command\", ioe);\n         }\n       }\n-    }\n-    return true;\n-  }\n\\ No newline at end of file\n+      return true;\n+    }\n\\ No newline at end of file\n",
          "actualSource": "    private boolean processCommand(DatanodeCommand[] cmds) {\n      if (cmds !\u003d null) {\n        for (DatanodeCommand cmd : cmds) {\n          try {\n            if (!bpos.processCommandFromActor(cmd, actor)) {\n              return false;\n            }\n          } catch (RemoteException re) {\n            String reClass \u003d re.getClassName();\n            if (UnregisteredNodeException.class.getName().equals(reClass) ||\n                DisallowedDatanodeException.class.getName().equals(reClass) ||\n                IncorrectVersionException.class.getName().equals(reClass)) {\n              LOG.warn(\"{} is shutting down\", this, re);\n              shouldServiceRun \u003d false;\n              return false;\n            }\n          } catch (IOException ioe) {\n            LOG.warn(\"Error processing datanode Command\", ioe);\n          }\n        }\n      }\n      return true;\n    }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {}
        }
      ]
    },
    "c4e27ef7735acd6f91b73d2ecb0227f8dd75a2e4": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12749. DN may not send block report to NN after NN restart. Contributed by Xiaoqiao He.\n",
      "commitDate": "21/10/19 2:33 PM",
      "commitName": "c4e27ef7735acd6f91b73d2ecb0227f8dd75a2e4",
      "commitAuthor": "Kihwal Lee",
      "commitDateOld": "17/08/19 4:37 AM",
      "commitNameOld": "528378784fe14e7069dd0471f3c4c478544b57c8",
      "commitAuthorOld": "Wei-Chiu Chuang",
      "daysBetweenCommits": 65.41,
      "commitsBetweenForRepo": 514,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,23 @@\n   boolean processCommand(DatanodeCommand[] cmds) {\n     if (cmds !\u003d null) {\n       for (DatanodeCommand cmd : cmds) {\n         try {\n           if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n             return false;\n           }\n+        } catch (RemoteException re) {\n+          String reClass \u003d re.getClassName();\n+          if (UnregisteredNodeException.class.getName().equals(reClass) ||\n+              DisallowedDatanodeException.class.getName().equals(reClass) ||\n+              IncorrectVersionException.class.getName().equals(reClass)) {\n+            LOG.warn(this + \" is shutting down\", re);\n+            shouldServiceRun \u003d false;\n+            return false;\n+          }\n         } catch (IOException ioe) {\n           LOG.warn(\"Error processing datanode Command\", ioe);\n         }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  boolean processCommand(DatanodeCommand[] cmds) {\n    if (cmds !\u003d null) {\n      for (DatanodeCommand cmd : cmds) {\n        try {\n          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n            return false;\n          }\n        } catch (RemoteException re) {\n          String reClass \u003d re.getClassName();\n          if (UnregisteredNodeException.class.getName().equals(reClass) ||\n              DisallowedDatanodeException.class.getName().equals(reClass) ||\n              IncorrectVersionException.class.getName().equals(reClass)) {\n            LOG.warn(this + \" is shutting down\", re);\n            shouldServiceRun \u003d false;\n            return false;\n          }\n        } catch (IOException ioe) {\n          LOG.warn(\"Error processing datanode Command\", ioe);\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
      "extendedDetails": {}
    },
    "1e346aa829519f8a2aa830e76d9856f914861805": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange)",
      "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/11/11 5:10 PM",
      "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
      "commitAuthor": "Suresh Srinivas",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/11 5:10 PM",
          "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "30/11/11 1:46 PM",
          "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private boolean processCommand(DatanodeCommand[] cmds) {\n+  boolean processCommand(DatanodeCommand[] cmds) {\n     if (cmds !\u003d null) {\n       for (DatanodeCommand cmd : cmds) {\n         try {\n-          if (processCommand(cmd) \u003d\u003d false) {\n+          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n             return false;\n           }\n         } catch (IOException ioe) {\n           LOG.warn(\"Error processing datanode Command\", ioe);\n         }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean processCommand(DatanodeCommand[] cmds) {\n    if (cmds !\u003d null) {\n      for (DatanodeCommand cmd : cmds) {\n        try {\n          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n            return false;\n          }\n        } catch (IOException ioe) {\n          LOG.warn(\"Error processing datanode Command\", ioe);\n        }\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
            "oldMethodName": "processCommand",
            "newMethodName": "processCommand"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/11 5:10 PM",
          "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "30/11/11 1:46 PM",
          "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private boolean processCommand(DatanodeCommand[] cmds) {\n+  boolean processCommand(DatanodeCommand[] cmds) {\n     if (cmds !\u003d null) {\n       for (DatanodeCommand cmd : cmds) {\n         try {\n-          if (processCommand(cmd) \u003d\u003d false) {\n+          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n             return false;\n           }\n         } catch (IOException ioe) {\n           LOG.warn(\"Error processing datanode Command\", ioe);\n         }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean processCommand(DatanodeCommand[] cmds) {\n    if (cmds !\u003d null) {\n      for (DatanodeCommand cmd : cmds) {\n        try {\n          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n            return false;\n          }\n        } catch (IOException ioe) {\n          LOG.warn(\"Error processing datanode Command\", ioe);\n        }\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-1971. Send block report from datanode to both active and standby namenodes. (sanjay, todd via suresh)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-1623@1208925 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "30/11/11 5:10 PM",
          "commitName": "1e346aa829519f8a2aa830e76d9856f914861805",
          "commitAuthor": "Suresh Srinivas",
          "commitDateOld": "30/11/11 1:46 PM",
          "commitNameOld": "f87a4b40bc99e76602a75906df31747cfdbff78a",
          "commitAuthorOld": "Todd Lipcon",
          "daysBetweenCommits": 0.14,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,14 +1,14 @@\n-  private boolean processCommand(DatanodeCommand[] cmds) {\n+  boolean processCommand(DatanodeCommand[] cmds) {\n     if (cmds !\u003d null) {\n       for (DatanodeCommand cmd : cmds) {\n         try {\n-          if (processCommand(cmd) \u003d\u003d false) {\n+          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n             return false;\n           }\n         } catch (IOException ioe) {\n           LOG.warn(\"Error processing datanode Command\", ioe);\n         }\n       }\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  boolean processCommand(DatanodeCommand[] cmds) {\n    if (cmds !\u003d null) {\n      for (DatanodeCommand cmd : cmds) {\n        try {\n          if (bpos.processCommandFromActor(cmd, this) \u003d\u003d false) {\n            return false;\n          }\n        } catch (IOException ioe) {\n          LOG.warn(\"Error processing datanode Command\", ioe);\n        }\n      }\n    }\n    return true;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPServiceActor.java",
          "extendedDetails": {}
        }
      ]
    },
    "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd": {
      "type": "Ymovefromfile",
      "commitMessage": "HDFS-2566. Move BPOfferService to be a non-inner class. Contributed by Todd Lipcon.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1204659 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "21/11/11 11:27 AM",
      "commitName": "39ce694d05c6d8c428bd87bc1b9c95f94dfdf6fd",
      "commitAuthor": "Todd Lipcon",
      "commitDateOld": "21/11/11 11:03 AM",
      "commitNameOld": "68173af69d2fbda3292404c90a5077483e14d6f4",
      "commitAuthorOld": "Todd Lipcon",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,14 +1,14 @@\n-    private boolean processCommand(DatanodeCommand[] cmds) {\n-      if (cmds !\u003d null) {\n-        for (DatanodeCommand cmd : cmds) {\n-          try {\n-            if (processCommand(cmd) \u003d\u003d false) {\n-              return false;\n-            }\n-          } catch (IOException ioe) {\n-            LOG.warn(\"Error processing datanode Command\", ioe);\n+  private boolean processCommand(DatanodeCommand[] cmds) {\n+    if (cmds !\u003d null) {\n+      for (DatanodeCommand cmd : cmds) {\n+        try {\n+          if (processCommand(cmd) \u003d\u003d false) {\n+            return false;\n           }\n+        } catch (IOException ioe) {\n+          LOG.warn(\"Error processing datanode Command\", ioe);\n         }\n       }\n-      return true;\n-    }\n\\ No newline at end of file\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean processCommand(DatanodeCommand[] cmds) {\n    if (cmds !\u003d null) {\n      for (DatanodeCommand cmd : cmds) {\n        try {\n          if (processCommand(cmd) \u003d\u003d false) {\n            return false;\n          }\n        } catch (IOException ioe) {\n          LOG.warn(\"Error processing datanode Command\", ioe);\n        }\n      }\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/BPOfferService.java",
        "oldMethodName": "processCommand",
        "newMethodName": "processCommand"
      }
    },
    "cd7157784e5e5ddc4e77144d042e54dd0d04bac1": {
      "type": "Yfilerename",
      "commitMessage": "HADOOP-7560. Change src layout to be heirarchical. Contributed by Alejandro Abdelnur.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1161332 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "24/08/11 5:14 PM",
      "commitName": "cd7157784e5e5ddc4e77144d042e54dd0d04bac1",
      "commitAuthor": "Arun Murthy",
      "commitDateOld": "24/08/11 5:06 PM",
      "commitNameOld": "bb0005cfec5fd2861600ff5babd259b48ba18b63",
      "commitAuthorOld": "Arun Murthy",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean processCommand(DatanodeCommand[] cmds) {\n      if (cmds !\u003d null) {\n        for (DatanodeCommand cmd : cmds) {\n          try {\n            if (processCommand(cmd) \u003d\u003d false) {\n              return false;\n            }\n          } catch (IOException ioe) {\n            LOG.warn(\"Error processing datanode Command\", ioe);\n          }\n        }\n      }\n      return true;\n    }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
      }
    },
    "d86f3183d93714ba078416af4f609d26376eadb0": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-2096. Mavenization of hadoop-hdfs. Contributed by Alejandro Abdelnur.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1159702 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "19/08/11 10:36 AM",
      "commitName": "d86f3183d93714ba078416af4f609d26376eadb0",
      "commitAuthor": "Thomas White",
      "commitDateOld": "19/08/11 10:26 AM",
      "commitNameOld": "6ee5a73e0e91a2ef27753a32c576835e951d8119",
      "commitAuthorOld": "Thomas White",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "    private boolean processCommand(DatanodeCommand[] cmds) {\n      if (cmds !\u003d null) {\n        for (DatanodeCommand cmd : cmds) {\n          try {\n            if (processCommand(cmd) \u003d\u003d false) {\n              return false;\n            }\n          } catch (IOException ioe) {\n            LOG.warn(\"Error processing datanode Command\", ioe);\n          }\n        }\n      }\n      return true;\n    }",
      "path": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
      "extendedDetails": {
        "oldPath": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java",
        "newPath": "hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
      }
    },
    "a196766ea07775f18ded69bd9e8d239f8cfd3ccc": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-7106. Reorganize SVN layout to combine HDFS, Common, and MR in a single tree (project unsplit)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1134994 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/06/11 3:00 PM",
      "commitName": "a196766ea07775f18ded69bd9e8d239f8cfd3ccc",
      "commitAuthor": "Todd Lipcon",
      "diff": "@@ -0,0 +1,14 @@\n+    private boolean processCommand(DatanodeCommand[] cmds) {\n+      if (cmds !\u003d null) {\n+        for (DatanodeCommand cmd : cmds) {\n+          try {\n+            if (processCommand(cmd) \u003d\u003d false) {\n+              return false;\n+            }\n+          } catch (IOException ioe) {\n+            LOG.warn(\"Error processing datanode Command\", ioe);\n+          }\n+        }\n+      }\n+      return true;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private boolean processCommand(DatanodeCommand[] cmds) {\n      if (cmds !\u003d null) {\n        for (DatanodeCommand cmd : cmds) {\n          try {\n            if (processCommand(cmd) \u003d\u003d false) {\n              return false;\n            }\n          } catch (IOException ioe) {\n            LOG.warn(\"Error processing datanode Command\", ioe);\n          }\n        }\n      }\n      return true;\n    }",
      "path": "hdfs/src/java/org/apache/hadoop/hdfs/server/datanode/DataNode.java"
    }
  }
}