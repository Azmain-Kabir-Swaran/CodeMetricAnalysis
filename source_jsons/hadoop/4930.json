{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DiffListBySkipList.java",
  "functionName": "getMinListForRange",
  "functionId": "getMinListForRange___fromIndex-int__toIndex-int__dir-INodeDirectory",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DiffListBySkipList.java",
  "functionStartLine": 551,
  "functionEndLine": 575,
  "numCommitsSeen": 6,
  "timeTaken": 2295,
  "changeHistory": [
    "ba82e5c488ca0081534c1e40810b3f9e7da9eaad",
    "96e8f260ab90cc7b5a5aa2a59c182ef20a028238",
    "81d9446a92e3968234702b2981468a991c7cf8a0"
  ],
  "changeHistoryShort": {
    "ba82e5c488ca0081534c1e40810b3f9e7da9eaad": "Yfilerename",
    "96e8f260ab90cc7b5a5aa2a59c182ef20a028238": "Ybodychange",
    "81d9446a92e3968234702b2981468a991c7cf8a0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ba82e5c488ca0081534c1e40810b3f9e7da9eaad": {
      "type": "Yfilerename",
      "commitMessage": "HDFS-13173.  Replace ArrayList with DirectoryDiffList(SnapshotSkipList) to store DirectoryDiffs.  Contributed by Shashikant Banerjee\n",
      "commitDate": "02/03/18 5:47 PM",
      "commitName": "ba82e5c488ca0081534c1e40810b3f9e7da9eaad",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "02/03/18 5:08 PM",
      "commitNameOld": "90d2bdcb752f5f32ef65765af6fd5596dd5d373b",
      "commitAuthorOld": "Andras Bokor",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public List\u003cDirectoryDiff\u003e getMinListForRange(int fromIndex, int toIndex,\n      INodeDirectory dir) {\n    final List\u003cDirectoryDiff\u003e subList \u003d new ArrayList\u003c\u003e();\n    final int toSnapshotId \u003d get(toIndex - 1).getSnapshotId();\n    for (SkipListNode current \u003d getNode(fromIndex); current !\u003d null;) {\n      SkipListNode next \u003d null;\n      ChildrenDiff childrenDiff \u003d null;\n      for (int level \u003d current.level(); level \u003e\u003d 0; level--) {\n        next \u003d current.getSkipNode(level);\n        if (next !\u003d null \u0026\u0026 next.getDiff().compareTo(toSnapshotId) \u003c\u003d 0) {\n          childrenDiff \u003d current.getChildrenDiff(level);\n          break;\n        }\n      }\n      final DirectoryDiff curDiff \u003d current.getDiff();\n      subList.add(childrenDiff \u003d\u003d null ? curDiff :\n          new DirectoryDiff(curDiff.getSnapshotId(), dir, childrenDiff));\n\n      if (current.getDiff().compareTo(toSnapshotId) \u003d\u003d 0) {\n        break;\n      }\n      current \u003d next;\n    }\n    return subList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DiffListBySkipList.java",
      "extendedDetails": {
        "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryDiffList.java",
        "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DiffListBySkipList.java"
      }
    },
    "96e8f260ab90cc7b5a5aa2a59c182ef20a028238": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-13211. Fix a bug in DirectoryDiffList.getMinListForRange.  Contributed by Shashikant Banerjee\n",
      "commitDate": "01/03/18 2:12 PM",
      "commitName": "96e8f260ab90cc7b5a5aa2a59c182ef20a028238",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "commitDateOld": "28/02/18 1:42 PM",
      "commitNameOld": "81d9446a92e3968234702b2981468a991c7cf8a0",
      "commitAuthorOld": "Tsz-Wo Nicholas Sze",
      "daysBetweenCommits": 1.02,
      "commitsBetweenForRepo": 12,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,22 +1,25 @@\n   public List\u003cDirectoryDiff\u003e getMinListForRange(int fromIndex, int toIndex,\n       INodeDirectory dir) {\n     final List\u003cDirectoryDiff\u003e subList \u003d new ArrayList\u003c\u003e();\n-    final int toSnapshotId \u003d get(toIndex).getSnapshotId();\n+    final int toSnapshotId \u003d get(toIndex - 1).getSnapshotId();\n     for (SkipListNode current \u003d getNode(fromIndex); current !\u003d null;) {\n       SkipListNode next \u003d null;\n       ChildrenDiff childrenDiff \u003d null;\n       for (int level \u003d current.level(); level \u003e\u003d 0; level--) {\n         next \u003d current.getSkipNode(level);\n         if (next !\u003d null \u0026\u0026 next.getDiff().compareTo(toSnapshotId) \u003c\u003d 0) {\n           childrenDiff \u003d current.getChildrenDiff(level);\n           break;\n         }\n       }\n       final DirectoryDiff curDiff \u003d current.getDiff();\n       subList.add(childrenDiff \u003d\u003d null ? curDiff :\n           new DirectoryDiff(curDiff.getSnapshotId(), dir, childrenDiff));\n \n+      if (current.getDiff().compareTo(toSnapshotId) \u003d\u003d 0) {\n+        break;\n+      }\n       current \u003d next;\n     }\n     return subList;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cDirectoryDiff\u003e getMinListForRange(int fromIndex, int toIndex,\n      INodeDirectory dir) {\n    final List\u003cDirectoryDiff\u003e subList \u003d new ArrayList\u003c\u003e();\n    final int toSnapshotId \u003d get(toIndex - 1).getSnapshotId();\n    for (SkipListNode current \u003d getNode(fromIndex); current !\u003d null;) {\n      SkipListNode next \u003d null;\n      ChildrenDiff childrenDiff \u003d null;\n      for (int level \u003d current.level(); level \u003e\u003d 0; level--) {\n        next \u003d current.getSkipNode(level);\n        if (next !\u003d null \u0026\u0026 next.getDiff().compareTo(toSnapshotId) \u003c\u003d 0) {\n          childrenDiff \u003d current.getChildrenDiff(level);\n          break;\n        }\n      }\n      final DirectoryDiff curDiff \u003d current.getDiff();\n      subList.add(childrenDiff \u003d\u003d null ? curDiff :\n          new DirectoryDiff(curDiff.getSnapshotId(), dir, childrenDiff));\n\n      if (current.getDiff().compareTo(toSnapshotId) \u003d\u003d 0) {\n        break;\n      }\n      current \u003d next;\n    }\n    return subList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryDiffList.java",
      "extendedDetails": {}
    },
    "81d9446a92e3968234702b2981468a991c7cf8a0": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-13102. Implement SnapshotSkipList class to store Multi level DirectoryDiffs.  Contributed by Shashikant Banerjee\n",
      "commitDate": "28/02/18 1:42 PM",
      "commitName": "81d9446a92e3968234702b2981468a991c7cf8a0",
      "commitAuthor": "Tsz-Wo Nicholas Sze",
      "diff": "@@ -0,0 +1,22 @@\n+  public List\u003cDirectoryDiff\u003e getMinListForRange(int fromIndex, int toIndex,\n+      INodeDirectory dir) {\n+    final List\u003cDirectoryDiff\u003e subList \u003d new ArrayList\u003c\u003e();\n+    final int toSnapshotId \u003d get(toIndex).getSnapshotId();\n+    for (SkipListNode current \u003d getNode(fromIndex); current !\u003d null;) {\n+      SkipListNode next \u003d null;\n+      ChildrenDiff childrenDiff \u003d null;\n+      for (int level \u003d current.level(); level \u003e\u003d 0; level--) {\n+        next \u003d current.getSkipNode(level);\n+        if (next !\u003d null \u0026\u0026 next.getDiff().compareTo(toSnapshotId) \u003c\u003d 0) {\n+          childrenDiff \u003d current.getChildrenDiff(level);\n+          break;\n+        }\n+      }\n+      final DirectoryDiff curDiff \u003d current.getDiff();\n+      subList.add(childrenDiff \u003d\u003d null ? curDiff :\n+          new DirectoryDiff(curDiff.getSnapshotId(), dir, childrenDiff));\n+\n+      current \u003d next;\n+    }\n+    return subList;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cDirectoryDiff\u003e getMinListForRange(int fromIndex, int toIndex,\n      INodeDirectory dir) {\n    final List\u003cDirectoryDiff\u003e subList \u003d new ArrayList\u003c\u003e();\n    final int toSnapshotId \u003d get(toIndex).getSnapshotId();\n    for (SkipListNode current \u003d getNode(fromIndex); current !\u003d null;) {\n      SkipListNode next \u003d null;\n      ChildrenDiff childrenDiff \u003d null;\n      for (int level \u003d current.level(); level \u003e\u003d 0; level--) {\n        next \u003d current.getSkipNode(level);\n        if (next !\u003d null \u0026\u0026 next.getDiff().compareTo(toSnapshotId) \u003c\u003d 0) {\n          childrenDiff \u003d current.getChildrenDiff(level);\n          break;\n        }\n      }\n      final DirectoryDiff curDiff \u003d current.getDiff();\n      subList.add(childrenDiff \u003d\u003d null ? curDiff :\n          new DirectoryDiff(curDiff.getSnapshotId(), dir, childrenDiff));\n\n      current \u003d next;\n    }\n    return subList;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/snapshot/DirectoryDiffList.java"
    }
  }
}