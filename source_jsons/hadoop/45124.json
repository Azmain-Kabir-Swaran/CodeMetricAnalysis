{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "NMClientImpl.java",
  "functionName": "startContainer",
  "functionId": "startContainer___container-Container__containerLaunchContext-ContainerLaunchContext",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java",
  "functionStartLine": 187,
  "functionEndLine": 238,
  "numCommitsSeen": 24,
  "timeTaken": 1601,
  "changeHistory": [
    "ff722bbbdfaf9715643507628e94ece26d904b9d",
    "3ca3137179ef093e42cde06587c9ea785b10f32c",
    "243bcd367ff3130d74676280233041f88aca62a5",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
    "a83fb61ac07c0468cbc7a38526e92683883dd932",
    "edc6d7d3abac3ebad711dda43d7c6a3aeabe025b"
  ],
  "changeHistoryShort": {
    "ff722bbbdfaf9715643507628e94ece26d904b9d": "Ybodychange",
    "3ca3137179ef093e42cde06587c9ea785b10f32c": "Ybodychange",
    "243bcd367ff3130d74676280233041f88aca62a5": "Ybodychange",
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": "Yfilerename",
    "a83fb61ac07c0468cbc7a38526e92683883dd932": "Ymultichange(Yexceptionschange,Ybodychange)",
    "edc6d7d3abac3ebad711dda43d7c6a3aeabe025b": "Yintroduced"
  },
  "changeHistoryDetails": {
    "ff722bbbdfaf9715643507628e94ece26d904b9d": {
      "type": "Ybodychange",
      "commitMessage": "YARN-4794. Deadlock in NMClientImpl. Contributed by Jian He.\n",
      "commitDate": "11/04/16 9:29 PM",
      "commitName": "ff722bbbdfaf9715643507628e94ece26d904b9d",
      "commitAuthor": "Rohith Sharma K S",
      "commitDateOld": "10/11/15 11:45 AM",
      "commitNameOld": "c99925d6dd0235f0d27536f0bebd129e435688fb",
      "commitAuthorOld": "Wangda Tan",
      "daysBetweenCommits": 153.36,
      "commitsBetweenForRepo": 951,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,55 +1,52 @@\n   public Map\u003cString, ByteBuffer\u003e startContainer(\n       Container container, ContainerLaunchContext containerLaunchContext)\n           throws YarnException, IOException {\n     // Do synchronization on StartedContainer to prevent race condition\n     // between startContainer and stopContainer only when startContainer is\n     // in progress for a given container.\n-    StartedContainer startingContainer \u003d createStartedContainer(container);\n+    StartedContainer startingContainer \u003d\n+        new StartedContainer(container.getId(), container.getNodeId());\n     synchronized (startingContainer) {\n       addStartingContainer(startingContainer);\n       \n       Map\u003cString, ByteBuffer\u003e allServiceResponse;\n       ContainerManagementProtocolProxyData proxy \u003d null;\n       try {\n         proxy \u003d\n             cmProxy.getProxy(container.getNodeId().toString(),\n                 container.getId());\n         StartContainerRequest scRequest \u003d\n             StartContainerRequest.newInstance(containerLaunchContext,\n               container.getContainerToken());\n         List\u003cStartContainerRequest\u003e list \u003d new ArrayList\u003cStartContainerRequest\u003e();\n         list.add(scRequest);\n         StartContainersRequest allRequests \u003d\n             StartContainersRequest.newInstance(list);\n         StartContainersResponse response \u003d\n             proxy\n                 .getContainerManagementProtocol().startContainers(allRequests);\n         if (response.getFailedRequests() !\u003d null\n             \u0026\u0026 response.getFailedRequests().containsKey(container.getId())) {\n           Throwable t \u003d\n               response.getFailedRequests().get(container.getId()).deSerialize();\n           parseAndThrowException(t);\n         }\n         allServiceResponse \u003d response.getAllServicesMetaData();\n         startingContainer.state \u003d ContainerState.RUNNING;\n-      } catch (YarnException e) {\n+      } catch (YarnException | IOException e) {\n         startingContainer.state \u003d ContainerState.COMPLETE;\n         // Remove the started container if it failed to start\n-        removeStartedContainer(startingContainer);\n-        throw e;\n-      } catch (IOException e) {\n-        startingContainer.state \u003d ContainerState.COMPLETE;\n-        removeStartedContainer(startingContainer);\n+        startedContainers.remove(startingContainer.containerId);\n         throw e;\n       } catch (Throwable t) {\n         startingContainer.state \u003d ContainerState.COMPLETE;\n-        removeStartedContainer(startingContainer);\n+        startedContainers.remove(startingContainer.containerId);\n         throw RPCUtil.getRemoteException(t);\n       } finally {\n         if (proxy !\u003d null) {\n           cmProxy.mayBeCloseProxy(proxy);\n         }\n       }\n       return allServiceResponse;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, ByteBuffer\u003e startContainer(\n      Container container, ContainerLaunchContext containerLaunchContext)\n          throws YarnException, IOException {\n    // Do synchronization on StartedContainer to prevent race condition\n    // between startContainer and stopContainer only when startContainer is\n    // in progress for a given container.\n    StartedContainer startingContainer \u003d\n        new StartedContainer(container.getId(), container.getNodeId());\n    synchronized (startingContainer) {\n      addStartingContainer(startingContainer);\n      \n      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n      ContainerManagementProtocolProxyData proxy \u003d null;\n      try {\n        proxy \u003d\n            cmProxy.getProxy(container.getNodeId().toString(),\n                container.getId());\n        StartContainerRequest scRequest \u003d\n            StartContainerRequest.newInstance(containerLaunchContext,\n              container.getContainerToken());\n        List\u003cStartContainerRequest\u003e list \u003d new ArrayList\u003cStartContainerRequest\u003e();\n        list.add(scRequest);\n        StartContainersRequest allRequests \u003d\n            StartContainersRequest.newInstance(list);\n        StartContainersResponse response \u003d\n            proxy\n                .getContainerManagementProtocol().startContainers(allRequests);\n        if (response.getFailedRequests() !\u003d null\n            \u0026\u0026 response.getFailedRequests().containsKey(container.getId())) {\n          Throwable t \u003d\n              response.getFailedRequests().get(container.getId()).deSerialize();\n          parseAndThrowException(t);\n        }\n        allServiceResponse \u003d response.getAllServicesMetaData();\n        startingContainer.state \u003d ContainerState.RUNNING;\n      } catch (YarnException | IOException e) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        // Remove the started container if it failed to start\n        startedContainers.remove(startingContainer.containerId);\n        throw e;\n      } catch (Throwable t) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        startedContainers.remove(startingContainer.containerId);\n        throw RPCUtil.getRemoteException(t);\n      } finally {\n        if (proxy !\u003d null) {\n          cmProxy.mayBeCloseProxy(proxy);\n        }\n      }\n      return allServiceResponse;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java",
      "extendedDetails": {}
    },
    "3ca3137179ef093e42cde06587c9ea785b10f32c": {
      "type": "Ybodychange",
      "commitMessage": "YARN-926. Modified ContainerManagerProtcol APIs to take in requests for multiple containers. Contributed by Jian He.\nMAPREDUCE-5412. Update MR app to use multiple containers API of ContainerManager after YARN-926. Contributed by Jian He.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1506391 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "23/07/13 8:41 PM",
      "commitName": "3ca3137179ef093e42cde06587c9ea785b10f32c",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "20/06/13 5:08 PM",
      "commitNameOld": "1a06175440eec7994d6b63b0e5ac8b6532870fb3",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 33.15,
      "commitsBetweenForRepo": 159,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,43 +1,55 @@\n   public Map\u003cString, ByteBuffer\u003e startContainer(\n       Container container, ContainerLaunchContext containerLaunchContext)\n           throws YarnException, IOException {\n     // Do synchronization on StartedContainer to prevent race condition\n     // between startContainer and stopContainer only when startContainer is\n     // in progress for a given container.\n     StartedContainer startingContainer \u003d createStartedContainer(container);\n     synchronized (startingContainer) {\n       addStartingContainer(startingContainer);\n       \n       Map\u003cString, ByteBuffer\u003e allServiceResponse;\n       ContainerManagementProtocolProxyData proxy \u003d null;\n       try {\n         proxy \u003d\n             cmProxy.getProxy(container.getNodeId().toString(),\n                 container.getId());\n-        allServiceResponse \u003d\n+        StartContainerRequest scRequest \u003d\n+            StartContainerRequest.newInstance(containerLaunchContext,\n+              container.getContainerToken());\n+        List\u003cStartContainerRequest\u003e list \u003d new ArrayList\u003cStartContainerRequest\u003e();\n+        list.add(scRequest);\n+        StartContainersRequest allRequests \u003d\n+            StartContainersRequest.newInstance(list);\n+        StartContainersResponse response \u003d\n             proxy\n-                .getContainerManagementProtocol().startContainer(\n-                    StartContainerRequest.newInstance(containerLaunchContext,\n-                        container.getContainerToken())).getAllServicesMetaData();\n+                .getContainerManagementProtocol().startContainers(allRequests);\n+        if (response.getFailedRequests() !\u003d null\n+            \u0026\u0026 response.getFailedRequests().containsKey(container.getId())) {\n+          Throwable t \u003d\n+              response.getFailedRequests().get(container.getId()).deSerialize();\n+          parseAndThrowException(t);\n+        }\n+        allServiceResponse \u003d response.getAllServicesMetaData();\n         startingContainer.state \u003d ContainerState.RUNNING;\n       } catch (YarnException e) {\n         startingContainer.state \u003d ContainerState.COMPLETE;\n         // Remove the started container if it failed to start\n         removeStartedContainer(startingContainer);\n         throw e;\n       } catch (IOException e) {\n         startingContainer.state \u003d ContainerState.COMPLETE;\n         removeStartedContainer(startingContainer);\n         throw e;\n       } catch (Throwable t) {\n         startingContainer.state \u003d ContainerState.COMPLETE;\n         removeStartedContainer(startingContainer);\n         throw RPCUtil.getRemoteException(t);\n       } finally {\n         if (proxy !\u003d null) {\n           cmProxy.mayBeCloseProxy(proxy);\n         }\n       }\n       return allServiceResponse;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, ByteBuffer\u003e startContainer(\n      Container container, ContainerLaunchContext containerLaunchContext)\n          throws YarnException, IOException {\n    // Do synchronization on StartedContainer to prevent race condition\n    // between startContainer and stopContainer only when startContainer is\n    // in progress for a given container.\n    StartedContainer startingContainer \u003d createStartedContainer(container);\n    synchronized (startingContainer) {\n      addStartingContainer(startingContainer);\n      \n      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n      ContainerManagementProtocolProxyData proxy \u003d null;\n      try {\n        proxy \u003d\n            cmProxy.getProxy(container.getNodeId().toString(),\n                container.getId());\n        StartContainerRequest scRequest \u003d\n            StartContainerRequest.newInstance(containerLaunchContext,\n              container.getContainerToken());\n        List\u003cStartContainerRequest\u003e list \u003d new ArrayList\u003cStartContainerRequest\u003e();\n        list.add(scRequest);\n        StartContainersRequest allRequests \u003d\n            StartContainersRequest.newInstance(list);\n        StartContainersResponse response \u003d\n            proxy\n                .getContainerManagementProtocol().startContainers(allRequests);\n        if (response.getFailedRequests() !\u003d null\n            \u0026\u0026 response.getFailedRequests().containsKey(container.getId())) {\n          Throwable t \u003d\n              response.getFailedRequests().get(container.getId()).deSerialize();\n          parseAndThrowException(t);\n        }\n        allServiceResponse \u003d response.getAllServicesMetaData();\n        startingContainer.state \u003d ContainerState.RUNNING;\n      } catch (YarnException e) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        // Remove the started container if it failed to start\n        removeStartedContainer(startingContainer);\n        throw e;\n      } catch (IOException e) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        removeStartedContainer(startingContainer);\n        throw e;\n      } catch (Throwable t) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        removeStartedContainer(startingContainer);\n        throw RPCUtil.getRemoteException(t);\n      } finally {\n        if (proxy !\u003d null) {\n          cmProxy.mayBeCloseProxy(proxy);\n        }\n      }\n      return allServiceResponse;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java",
      "extendedDetails": {}
    },
    "243bcd367ff3130d74676280233041f88aca62a5": {
      "type": "Ybodychange",
      "commitMessage": "YARN-694. Starting to use NMTokens to authenticate all communication with NodeManagers. Contributed by Omkar Vinit Joshi.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494369 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "18/06/13 4:19 PM",
      "commitName": "243bcd367ff3130d74676280233041f88aca62a5",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 11:20 PM",
      "commitNameOld": "f4d80e91ae314d316100baa7770b9d73ea853d9c",
      "commitAuthorOld": "Vinod Kumar Vavilapalli",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,41 +1,43 @@\n   public Map\u003cString, ByteBuffer\u003e startContainer(\n       Container container, ContainerLaunchContext containerLaunchContext)\n           throws YarnException, IOException {\n     // Do synchronization on StartedContainer to prevent race condition\n-    // between startContainer and stopContainer\n-    synchronized (addStartedContainer(container)) {\n+    // between startContainer and stopContainer only when startContainer is\n+    // in progress for a given container.\n+    StartedContainer startingContainer \u003d createStartedContainer(container);\n+    synchronized (startingContainer) {\n+      addStartingContainer(startingContainer);\n+      \n       Map\u003cString, ByteBuffer\u003e allServiceResponse;\n-      NMCommunicator nmCommunicator \u003d null;\n+      ContainerManagementProtocolProxyData proxy \u003d null;\n       try {\n-        nmCommunicator \u003d new NMCommunicator(container.getId(),\n-            container.getNodeId(), container.getContainerToken());\n-        nmCommunicator.init(getConfig());\n-        nmCommunicator.start();\n+        proxy \u003d\n+            cmProxy.getProxy(container.getNodeId().toString(),\n+                container.getId());\n         allServiceResponse \u003d\n-            nmCommunicator.startContainer(container, containerLaunchContext);\n+            proxy\n+                .getContainerManagementProtocol().startContainer(\n+                    StartContainerRequest.newInstance(containerLaunchContext,\n+                        container.getContainerToken())).getAllServicesMetaData();\n+        startingContainer.state \u003d ContainerState.RUNNING;\n       } catch (YarnException e) {\n+        startingContainer.state \u003d ContainerState.COMPLETE;\n         // Remove the started container if it failed to start\n-        removeStartedContainer(container.getId());\n+        removeStartedContainer(startingContainer);\n         throw e;\n       } catch (IOException e) {\n-        removeStartedContainer(container.getId());\n+        startingContainer.state \u003d ContainerState.COMPLETE;\n+        removeStartedContainer(startingContainer);\n         throw e;\n       } catch (Throwable t) {\n-        removeStartedContainer(container.getId());\n+        startingContainer.state \u003d ContainerState.COMPLETE;\n+        removeStartedContainer(startingContainer);\n         throw RPCUtil.getRemoteException(t);\n       } finally {\n-        if (nmCommunicator !\u003d null) {\n-          nmCommunicator.stop();\n+        if (proxy !\u003d null) {\n+          cmProxy.mayBeCloseProxy(proxy);\n         }\n       }\n       return allServiceResponse;\n     }\n-\n-    // Three choices:\n-    // 1. starting and releasing the proxy before and after each interaction\n-    // 2. starting the proxy when starting the container and releasing it when\n-    // stopping the container\n-    // 3. starting the proxy when starting the container and releasing it when\n-    // stopping the client\n-    // Adopt 1 currently\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, ByteBuffer\u003e startContainer(\n      Container container, ContainerLaunchContext containerLaunchContext)\n          throws YarnException, IOException {\n    // Do synchronization on StartedContainer to prevent race condition\n    // between startContainer and stopContainer only when startContainer is\n    // in progress for a given container.\n    StartedContainer startingContainer \u003d createStartedContainer(container);\n    synchronized (startingContainer) {\n      addStartingContainer(startingContainer);\n      \n      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n      ContainerManagementProtocolProxyData proxy \u003d null;\n      try {\n        proxy \u003d\n            cmProxy.getProxy(container.getNodeId().toString(),\n                container.getId());\n        allServiceResponse \u003d\n            proxy\n                .getContainerManagementProtocol().startContainer(\n                    StartContainerRequest.newInstance(containerLaunchContext,\n                        container.getContainerToken())).getAllServicesMetaData();\n        startingContainer.state \u003d ContainerState.RUNNING;\n      } catch (YarnException e) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        // Remove the started container if it failed to start\n        removeStartedContainer(startingContainer);\n        throw e;\n      } catch (IOException e) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        removeStartedContainer(startingContainer);\n        throw e;\n      } catch (Throwable t) {\n        startingContainer.state \u003d ContainerState.COMPLETE;\n        removeStartedContainer(startingContainer);\n        throw RPCUtil.getRemoteException(t);\n      } finally {\n        if (proxy !\u003d null) {\n          cmProxy.mayBeCloseProxy(proxy);\n        }\n      }\n      return allServiceResponse;\n    }\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java",
      "extendedDetails": {}
    },
    "7ef54faad4bee4346da082a3f8cc5d6ea405d74a": {
      "type": "Yfilerename",
      "commitMessage": "YARN-834. Fixed annotations for yarn-client module, reorganized packages and clearly differentiated *Async apis. Contributed by Arun C Murthy and Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1494017 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "17/06/13 9:02 PM",
      "commitName": "7ef54faad4bee4346da082a3f8cc5d6ea405d74a",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "commitDateOld": "17/06/13 8:10 PM",
      "commitNameOld": "2b14656ab5050dd75935b64681cdc25fb49db94f",
      "commitAuthorOld": "Siddharth Seth",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "diff": "",
      "actualSource": "  public Map\u003cString, ByteBuffer\u003e startContainer(\n      Container container, ContainerLaunchContext containerLaunchContext)\n          throws YarnException, IOException {\n    // Do synchronization on StartedContainer to prevent race condition\n    // between startContainer and stopContainer\n    synchronized (addStartedContainer(container)) {\n      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n      NMCommunicator nmCommunicator \u003d null;\n      try {\n        nmCommunicator \u003d new NMCommunicator(container.getId(),\n            container.getNodeId(), container.getContainerToken());\n        nmCommunicator.init(getConfig());\n        nmCommunicator.start();\n        allServiceResponse \u003d\n            nmCommunicator.startContainer(container, containerLaunchContext);\n      } catch (YarnException e) {\n        // Remove the started container if it failed to start\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (IOException e) {\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (Throwable t) {\n        removeStartedContainer(container.getId());\n        throw RPCUtil.getRemoteException(t);\n      } finally {\n        if (nmCommunicator !\u003d null) {\n          nmCommunicator.stop();\n        }\n      }\n      return allServiceResponse;\n    }\n\n    // Three choices:\n    // 1. starting and releasing the proxy before and after each interaction\n    // 2. starting the proxy when starting the container and releasing it when\n    // stopping the container\n    // 3. starting the proxy when starting the container and releasing it when\n    // stopping the client\n    // Adopt 1 currently\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java",
      "extendedDetails": {
        "oldPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/NMClientImpl.java",
        "newPath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/api/impl/NMClientImpl.java"
      }
    },
    "a83fb61ac07c0468cbc7a38526e92683883dd932": {
      "type": "Ymultichange(Yexceptionschange,Ybodychange)",
      "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "03/06/13 9:05 PM",
      "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yexceptionschange",
          "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/13 9:05 PM",
          "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "01/06/13 3:01 PM",
          "commitNameOld": "3dce234ed945f2dd5506e820141891a7d9306196",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 2.25,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n   public Map\u003cString, ByteBuffer\u003e startContainer(\n       Container container, ContainerLaunchContext containerLaunchContext)\n-          throws YarnRemoteException, IOException {\n+          throws YarnException, IOException {\n     // Do synchronization on StartedContainer to prevent race condition\n     // between startContainer and stopContainer\n     synchronized (addStartedContainer(container)) {\n       Map\u003cString, ByteBuffer\u003e allServiceResponse;\n       NMCommunicator nmCommunicator \u003d null;\n       try {\n         nmCommunicator \u003d new NMCommunicator(container.getId(),\n             container.getNodeId(), container.getContainerToken());\n         nmCommunicator.init(getConfig());\n         nmCommunicator.start();\n         allServiceResponse \u003d\n             nmCommunicator.startContainer(container, containerLaunchContext);\n-      } catch (YarnRemoteException e) {\n+      } catch (YarnException e) {\n         // Remove the started container if it failed to start\n         removeStartedContainer(container.getId());\n         throw e;\n       } catch (IOException e) {\n         removeStartedContainer(container.getId());\n         throw e;\n       } catch (Throwable t) {\n         removeStartedContainer(container.getId());\n         throw RPCUtil.getRemoteException(t);\n       } finally {\n         if (nmCommunicator !\u003d null) {\n           nmCommunicator.stop();\n         }\n       }\n       return allServiceResponse;\n     }\n \n     // Three choices:\n     // 1. starting and releasing the proxy before and after each interaction\n     // 2. starting the proxy when starting the container and releasing it when\n     // stopping the container\n     // 3. starting the proxy when starting the container and releasing it when\n     // stopping the client\n     // Adopt 1 currently\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cString, ByteBuffer\u003e startContainer(\n      Container container, ContainerLaunchContext containerLaunchContext)\n          throws YarnException, IOException {\n    // Do synchronization on StartedContainer to prevent race condition\n    // between startContainer and stopContainer\n    synchronized (addStartedContainer(container)) {\n      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n      NMCommunicator nmCommunicator \u003d null;\n      try {\n        nmCommunicator \u003d new NMCommunicator(container.getId(),\n            container.getNodeId(), container.getContainerToken());\n        nmCommunicator.init(getConfig());\n        nmCommunicator.start();\n        allServiceResponse \u003d\n            nmCommunicator.startContainer(container, containerLaunchContext);\n      } catch (YarnException e) {\n        // Remove the started container if it failed to start\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (IOException e) {\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (Throwable t) {\n        removeStartedContainer(container.getId());\n        throw RPCUtil.getRemoteException(t);\n      } finally {\n        if (nmCommunicator !\u003d null) {\n          nmCommunicator.stop();\n        }\n      }\n      return allServiceResponse;\n    }\n\n    // Three choices:\n    // 1. starting and releasing the proxy before and after each interaction\n    // 2. starting the proxy when starting the container and releasing it when\n    // stopping the container\n    // 3. starting the proxy when starting the container and releasing it when\n    // stopping the client\n    // Adopt 1 currently\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/NMClientImpl.java",
          "extendedDetails": {
            "oldValue": "[YarnRemoteException, IOException]",
            "newValue": "[YarnException, IOException]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-635. Renamed YarnRemoteException to YarnException. Contributed by Siddharth Seth.\nMAPREDUCE-5301. Updated MR code to work with YARN-635 changes of renaming YarnRemoteException to YarnException. Contributed by Siddharth Seth\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1489283 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "03/06/13 9:05 PM",
          "commitName": "a83fb61ac07c0468cbc7a38526e92683883dd932",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "01/06/13 3:01 PM",
          "commitNameOld": "3dce234ed945f2dd5506e820141891a7d9306196",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 2.25,
          "commitsBetweenForRepo": 30,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,41 +1,41 @@\n   public Map\u003cString, ByteBuffer\u003e startContainer(\n       Container container, ContainerLaunchContext containerLaunchContext)\n-          throws YarnRemoteException, IOException {\n+          throws YarnException, IOException {\n     // Do synchronization on StartedContainer to prevent race condition\n     // between startContainer and stopContainer\n     synchronized (addStartedContainer(container)) {\n       Map\u003cString, ByteBuffer\u003e allServiceResponse;\n       NMCommunicator nmCommunicator \u003d null;\n       try {\n         nmCommunicator \u003d new NMCommunicator(container.getId(),\n             container.getNodeId(), container.getContainerToken());\n         nmCommunicator.init(getConfig());\n         nmCommunicator.start();\n         allServiceResponse \u003d\n             nmCommunicator.startContainer(container, containerLaunchContext);\n-      } catch (YarnRemoteException e) {\n+      } catch (YarnException e) {\n         // Remove the started container if it failed to start\n         removeStartedContainer(container.getId());\n         throw e;\n       } catch (IOException e) {\n         removeStartedContainer(container.getId());\n         throw e;\n       } catch (Throwable t) {\n         removeStartedContainer(container.getId());\n         throw RPCUtil.getRemoteException(t);\n       } finally {\n         if (nmCommunicator !\u003d null) {\n           nmCommunicator.stop();\n         }\n       }\n       return allServiceResponse;\n     }\n \n     // Three choices:\n     // 1. starting and releasing the proxy before and after each interaction\n     // 2. starting the proxy when starting the container and releasing it when\n     // stopping the container\n     // 3. starting the proxy when starting the container and releasing it when\n     // stopping the client\n     // Adopt 1 currently\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public Map\u003cString, ByteBuffer\u003e startContainer(\n      Container container, ContainerLaunchContext containerLaunchContext)\n          throws YarnException, IOException {\n    // Do synchronization on StartedContainer to prevent race condition\n    // between startContainer and stopContainer\n    synchronized (addStartedContainer(container)) {\n      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n      NMCommunicator nmCommunicator \u003d null;\n      try {\n        nmCommunicator \u003d new NMCommunicator(container.getId(),\n            container.getNodeId(), container.getContainerToken());\n        nmCommunicator.init(getConfig());\n        nmCommunicator.start();\n        allServiceResponse \u003d\n            nmCommunicator.startContainer(container, containerLaunchContext);\n      } catch (YarnException e) {\n        // Remove the started container if it failed to start\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (IOException e) {\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (Throwable t) {\n        removeStartedContainer(container.getId());\n        throw RPCUtil.getRemoteException(t);\n      } finally {\n        if (nmCommunicator !\u003d null) {\n          nmCommunicator.stop();\n        }\n      }\n      return allServiceResponse;\n    }\n\n    // Three choices:\n    // 1. starting and releasing the proxy before and after each interaction\n    // 2. starting the proxy when starting the container and releasing it when\n    // stopping the container\n    // 3. starting the proxy when starting the container and releasing it when\n    // stopping the client\n    // Adopt 1 currently\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/NMClientImpl.java",
          "extendedDetails": {}
        }
      ]
    },
    "edc6d7d3abac3ebad711dda43d7c6a3aeabe025b": {
      "type": "Yintroduced",
      "commitMessage": "YARN-422. Add a NM Client library to help application-writers. Contributed by Zhijie Shen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1487184 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "28/05/13 6:41 PM",
      "commitName": "edc6d7d3abac3ebad711dda43d7c6a3aeabe025b",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "diff": "@@ -0,0 +1,41 @@\n+  public Map\u003cString, ByteBuffer\u003e startContainer(\n+      Container container, ContainerLaunchContext containerLaunchContext)\n+          throws YarnRemoteException, IOException {\n+    // Do synchronization on StartedContainer to prevent race condition\n+    // between startContainer and stopContainer\n+    synchronized (addStartedContainer(container)) {\n+      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n+      NMCommunicator nmCommunicator \u003d null;\n+      try {\n+        nmCommunicator \u003d new NMCommunicator(container.getId(),\n+            container.getNodeId(), container.getContainerToken());\n+        nmCommunicator.init(getConfig());\n+        nmCommunicator.start();\n+        allServiceResponse \u003d\n+            nmCommunicator.startContainer(container, containerLaunchContext);\n+      } catch (YarnRemoteException e) {\n+        // Remove the started container if it failed to start\n+        removeStartedContainer(container.getId());\n+        throw e;\n+      } catch (IOException e) {\n+        removeStartedContainer(container.getId());\n+        throw e;\n+      } catch (Throwable t) {\n+        removeStartedContainer(container.getId());\n+        throw RPCUtil.getRemoteException(t);\n+      } finally {\n+        if (nmCommunicator !\u003d null) {\n+          nmCommunicator.stop();\n+        }\n+      }\n+      return allServiceResponse;\n+    }\n+\n+    // Three choices:\n+    // 1. starting and releasing the proxy before and after each interaction\n+    // 2. starting the proxy when starting the container and releasing it when\n+    // stopping the container\n+    // 3. starting the proxy when starting the container and releasing it when\n+    // stopping the client\n+    // Adopt 1 currently\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public Map\u003cString, ByteBuffer\u003e startContainer(\n      Container container, ContainerLaunchContext containerLaunchContext)\n          throws YarnRemoteException, IOException {\n    // Do synchronization on StartedContainer to prevent race condition\n    // between startContainer and stopContainer\n    synchronized (addStartedContainer(container)) {\n      Map\u003cString, ByteBuffer\u003e allServiceResponse;\n      NMCommunicator nmCommunicator \u003d null;\n      try {\n        nmCommunicator \u003d new NMCommunicator(container.getId(),\n            container.getNodeId(), container.getContainerToken());\n        nmCommunicator.init(getConfig());\n        nmCommunicator.start();\n        allServiceResponse \u003d\n            nmCommunicator.startContainer(container, containerLaunchContext);\n      } catch (YarnRemoteException e) {\n        // Remove the started container if it failed to start\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (IOException e) {\n        removeStartedContainer(container.getId());\n        throw e;\n      } catch (Throwable t) {\n        removeStartedContainer(container.getId());\n        throw RPCUtil.getRemoteException(t);\n      } finally {\n        if (nmCommunicator !\u003d null) {\n          nmCommunicator.stop();\n        }\n      }\n      return allServiceResponse;\n    }\n\n    // Three choices:\n    // 1. starting and releasing the proxy before and after each interaction\n    // 2. starting the proxy when starting the container and releasing it when\n    // stopping the container\n    // 3. starting the proxy when starting the container and releasing it when\n    // stopping the client\n    // Adopt 1 currently\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-client/src/main/java/org/apache/hadoop/yarn/client/NMClientImpl.java"
    }
  }
}