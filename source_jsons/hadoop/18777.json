{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FrameworkUploader.java",
  "functionName": "addJar",
  "functionId": "addJar___jar-File",
  "sourceFilePath": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
  "functionStartLine": 408,
  "functionEndLine": 446,
  "numCommitsSeen": 12,
  "timeTaken": 1168,
  "changeHistory": [
    "e404650f489727d2df9a8813fddc4e0d682fbbee",
    "3b78607a02f3a81ad730975ecdfa35967413271d"
  ],
  "changeHistoryShort": {
    "e404650f489727d2df9a8813fddc4e0d682fbbee": "Ybodychange",
    "3b78607a02f3a81ad730975ecdfa35967413271d": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e404650f489727d2df9a8813fddc4e0d682fbbee": {
      "type": "Ybodychange",
      "commitMessage": "MAPREDUCE-7030. Uploader tool should ignore symlinks to the same directory (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "12/01/18 2:18 PM",
      "commitName": "e404650f489727d2df9a8813fddc4e0d682fbbee",
      "commitAuthor": "Robert Kanter",
      "commitDateOld": "11/12/17 2:00 PM",
      "commitNameOld": "2316f526902e827b6c1b92a5bddef72d211bc742",
      "commitAuthorOld": "Robert Kanter",
      "daysBetweenCommits": 32.01,
      "commitsBetweenForRepo": 175,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,36 +1,39 @@\n   private void addJar(File jar) throws UploaderException{\n     boolean found \u003d false;\n     if (!jar.getName().endsWith(\".jar\")) {\n       LOG.info(\"Ignored non-jar \" + jar.getAbsolutePath());\n     }\n     for (Pattern pattern : whitelistedFiles) {\n       Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n       if (matcher.matches()) {\n         LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n         found \u003d true;\n         break;\n       }\n     }\n     boolean excluded \u003d false;\n     for (Pattern pattern : blacklistedFiles) {\n       Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n       if (matcher.matches()) {\n         LOG.info(\"Blacklisted \" + jar.getAbsolutePath());\n         excluded \u003d true;\n         break;\n       }\n     }\n+    if (ignoreSymlink \u0026\u0026 !excluded) {\n+      excluded \u003d checkSymlink(jar);\n+    }\n     if (found \u0026\u0026 !excluded) {\n       LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n       if (!filteredInputFiles.add(jar.getAbsolutePath())) {\n         throw new UploaderException(\"Duplicate jar\" + jar.getAbsolutePath());\n       }\n     }\n     if (!found) {\n       LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is missing \" +\n           \"from the whitelist\");\n     } else if (excluded) {\n       LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is on \" +\n           \"the the blacklist\");\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private void addJar(File jar) throws UploaderException{\n    boolean found \u003d false;\n    if (!jar.getName().endsWith(\".jar\")) {\n      LOG.info(\"Ignored non-jar \" + jar.getAbsolutePath());\n    }\n    for (Pattern pattern : whitelistedFiles) {\n      Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n      if (matcher.matches()) {\n        LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n        found \u003d true;\n        break;\n      }\n    }\n    boolean excluded \u003d false;\n    for (Pattern pattern : blacklistedFiles) {\n      Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n      if (matcher.matches()) {\n        LOG.info(\"Blacklisted \" + jar.getAbsolutePath());\n        excluded \u003d true;\n        break;\n      }\n    }\n    if (ignoreSymlink \u0026\u0026 !excluded) {\n      excluded \u003d checkSymlink(jar);\n    }\n    if (found \u0026\u0026 !excluded) {\n      LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n      if (!filteredInputFiles.add(jar.getAbsolutePath())) {\n        throw new UploaderException(\"Duplicate jar\" + jar.getAbsolutePath());\n      }\n    }\n    if (!found) {\n      LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is missing \" +\n          \"from the whitelist\");\n    } else if (excluded) {\n      LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is on \" +\n          \"the the blacklist\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java",
      "extendedDetails": {}
    },
    "3b78607a02f3a81ad730975ecdfa35967413271d": {
      "type": "Yintroduced",
      "commitMessage": "MAPREDUCE-6994. Uploader tool for Distributed Cache Deploy code changes  (miklos.szegedi@cloudera.com via rkanter)\n",
      "commitDate": "01/12/17 12:12 PM",
      "commitName": "3b78607a02f3a81ad730975ecdfa35967413271d",
      "commitAuthor": "Robert Kanter",
      "diff": "@@ -0,0 +1,36 @@\n+  private void addJar(File jar) throws UploaderException{\n+    boolean found \u003d false;\n+    if (!jar.getName().endsWith(\".jar\")) {\n+      LOG.info(\"Ignored non-jar \" + jar.getAbsolutePath());\n+    }\n+    for (Pattern pattern : whitelistedFiles) {\n+      Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n+      if (matcher.matches()) {\n+        LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n+        found \u003d true;\n+        break;\n+      }\n+    }\n+    boolean excluded \u003d false;\n+    for (Pattern pattern : blacklistedFiles) {\n+      Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n+      if (matcher.matches()) {\n+        LOG.info(\"Blacklisted \" + jar.getAbsolutePath());\n+        excluded \u003d true;\n+        break;\n+      }\n+    }\n+    if (found \u0026\u0026 !excluded) {\n+      LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n+      if (!filteredInputFiles.add(jar.getAbsolutePath())) {\n+        throw new UploaderException(\"Duplicate jar\" + jar.getAbsolutePath());\n+      }\n+    }\n+    if (!found) {\n+      LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is missing \" +\n+          \"from the whitelist\");\n+    } else if (excluded) {\n+      LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is on \" +\n+          \"the the blacklist\");\n+    }\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private void addJar(File jar) throws UploaderException{\n    boolean found \u003d false;\n    if (!jar.getName().endsWith(\".jar\")) {\n      LOG.info(\"Ignored non-jar \" + jar.getAbsolutePath());\n    }\n    for (Pattern pattern : whitelistedFiles) {\n      Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n      if (matcher.matches()) {\n        LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n        found \u003d true;\n        break;\n      }\n    }\n    boolean excluded \u003d false;\n    for (Pattern pattern : blacklistedFiles) {\n      Matcher matcher \u003d pattern.matcher(jar.getAbsolutePath());\n      if (matcher.matches()) {\n        LOG.info(\"Blacklisted \" + jar.getAbsolutePath());\n        excluded \u003d true;\n        break;\n      }\n    }\n    if (found \u0026\u0026 !excluded) {\n      LOG.info(\"Whitelisted \" + jar.getAbsolutePath());\n      if (!filteredInputFiles.add(jar.getAbsolutePath())) {\n        throw new UploaderException(\"Duplicate jar\" + jar.getAbsolutePath());\n      }\n    }\n    if (!found) {\n      LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is missing \" +\n          \"from the whitelist\");\n    } else if (excluded) {\n      LOG.info(\"Ignored \" + jar.getAbsolutePath() + \" because it is on \" +\n          \"the the blacklist\");\n    }\n  }",
      "path": "hadoop-mapreduce-project/hadoop-mapreduce-client/hadoop-mapreduce-client-uploader/src/main/java/org/apache/hadoop/mapred/uploader/FrameworkUploader.java"
    }
  }
}