{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "DecayRpcScheduler.java",
  "functionName": "parseThresholds",
  "functionId": "parseThresholds___ns-String__conf-Configuration__numLevels-int",
  "sourceFilePath": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
  "functionStartLine": 331,
  "functionEndLine": 359,
  "numCommitsSeen": 21,
  "timeTaken": 1689,
  "changeHistory": [
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
    "e0a9e1bfb724b60af322666b8267c7a9121f84a7"
  ],
  "changeHistoryShort": {
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": "Ymultichange(Yparameterchange,Ybodychange)",
    "e0a9e1bfb724b60af322666b8267c7a9121f84a7": "Yintroduced"
  },
  "changeHistoryDetails": {
    "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
      "commitDate": "31/03/16 8:42 AM",
      "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
      "commitAuthor": "Xiaoyu Yao",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
          "commitDate": "31/03/16 8:42 AM",
          "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "01/12/15 9:27 AM",
          "commitNameOld": "485c3468a8520fcde14800af3e4a075231c946de",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 120.93,
          "commitsBetweenForRepo": 745,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,29 @@\n   private static double[] parseThresholds(String ns, Configuration conf,\n-      int numQueues) {\n+      int numLevels) {\n     int[] percentages \u003d conf.getInts(ns + \".\" +\n-      IPC_CALLQUEUE_DECAYSCHEDULER_THRESHOLDS_KEY);\n+        IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY);\n \n     if (percentages.length \u003d\u003d 0) {\n-      return getDefaultThresholds(numQueues);\n-    } else if (percentages.length !\u003d numQueues-1) {\n+      percentages \u003d conf.getInts(ns + \".\" + IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n+      if (percentages.length \u003d\u003d 0) {\n+        return getDefaultThresholds(numLevels);\n+      }\n+    } else {\n+      LOG.warn(IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY +\n+          \" is deprecated. Please use \" +\n+          IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n+    }\n+\n+    if (percentages.length !\u003d numLevels-1) {\n       throw new IllegalArgumentException(\"Number of thresholds should be \" +\n-        (numQueues-1) + \". Was: \" + percentages.length);\n+        (numLevels-1) + \". Was: \" + percentages.length);\n     }\n \n     // Convert integer percentages to decimals\n     double[] decimals \u003d new double[percentages.length];\n     for (int i \u003d 0; i \u003c percentages.length; i++) {\n       decimals[i] \u003d percentages[i] / 100.0;\n     }\n \n     return decimals;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static double[] parseThresholds(String ns, Configuration conf,\n      int numLevels) {\n    int[] percentages \u003d conf.getInts(ns + \".\" +\n        IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY);\n\n    if (percentages.length \u003d\u003d 0) {\n      percentages \u003d conf.getInts(ns + \".\" + IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n      if (percentages.length \u003d\u003d 0) {\n        return getDefaultThresholds(numLevels);\n      }\n    } else {\n      LOG.warn(IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY +\n          \" is deprecated. Please use \" +\n          IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n    }\n\n    if (percentages.length !\u003d numLevels-1) {\n      throw new IllegalArgumentException(\"Number of thresholds should be \" +\n        (numLevels-1) + \". Was: \" + percentages.length);\n    }\n\n    // Convert integer percentages to decimals\n    double[] decimals \u003d new double[percentages.length];\n    for (int i \u003d 0; i \u003c percentages.length; i++) {\n      decimals[i] \u003d percentages[i] / 100.0;\n    }\n\n    return decimals;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
          "extendedDetails": {
            "oldValue": "[ns-String, conf-Configuration, numQueues-int]",
            "newValue": "[ns-String, conf-Configuration, numLevels-int]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HADOOP-12916. Allow RPC scheduler/callqueue backoff using response times. Contributed by Xiaoyu Yao.\n",
          "commitDate": "31/03/16 8:42 AM",
          "commitName": "d95c6eb32cec7768ac418fb467b1198ccf3cf0dc",
          "commitAuthor": "Xiaoyu Yao",
          "commitDateOld": "01/12/15 9:27 AM",
          "commitNameOld": "485c3468a8520fcde14800af3e4a075231c946de",
          "commitAuthorOld": "Arpit Agarwal",
          "daysBetweenCommits": 120.93,
          "commitsBetweenForRepo": 745,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,20 +1,29 @@\n   private static double[] parseThresholds(String ns, Configuration conf,\n-      int numQueues) {\n+      int numLevels) {\n     int[] percentages \u003d conf.getInts(ns + \".\" +\n-      IPC_CALLQUEUE_DECAYSCHEDULER_THRESHOLDS_KEY);\n+        IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY);\n \n     if (percentages.length \u003d\u003d 0) {\n-      return getDefaultThresholds(numQueues);\n-    } else if (percentages.length !\u003d numQueues-1) {\n+      percentages \u003d conf.getInts(ns + \".\" + IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n+      if (percentages.length \u003d\u003d 0) {\n+        return getDefaultThresholds(numLevels);\n+      }\n+    } else {\n+      LOG.warn(IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY +\n+          \" is deprecated. Please use \" +\n+          IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n+    }\n+\n+    if (percentages.length !\u003d numLevels-1) {\n       throw new IllegalArgumentException(\"Number of thresholds should be \" +\n-        (numQueues-1) + \". Was: \" + percentages.length);\n+        (numLevels-1) + \". Was: \" + percentages.length);\n     }\n \n     // Convert integer percentages to decimals\n     double[] decimals \u003d new double[percentages.length];\n     for (int i \u003d 0; i \u003c percentages.length; i++) {\n       decimals[i] \u003d percentages[i] / 100.0;\n     }\n \n     return decimals;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  private static double[] parseThresholds(String ns, Configuration conf,\n      int numLevels) {\n    int[] percentages \u003d conf.getInts(ns + \".\" +\n        IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY);\n\n    if (percentages.length \u003d\u003d 0) {\n      percentages \u003d conf.getInts(ns + \".\" + IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n      if (percentages.length \u003d\u003d 0) {\n        return getDefaultThresholds(numLevels);\n      }\n    } else {\n      LOG.warn(IPC_FCQ_DECAYSCHEDULER_THRESHOLDS_KEY +\n          \" is deprecated. Please use \" +\n          IPC_DECAYSCHEDULER_THRESHOLDS_KEY);\n    }\n\n    if (percentages.length !\u003d numLevels-1) {\n      throw new IllegalArgumentException(\"Number of thresholds should be \" +\n        (numLevels-1) + \". Was: \" + percentages.length);\n    }\n\n    // Convert integer percentages to decimals\n    double[] decimals \u003d new double[percentages.length];\n    for (int i \u003d 0; i \u003c percentages.length; i++) {\n      decimals[i] \u003d percentages[i] / 100.0;\n    }\n\n    return decimals;\n  }",
          "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java",
          "extendedDetails": {}
        }
      ]
    },
    "e0a9e1bfb724b60af322666b8267c7a9121f84a7": {
      "type": "Yintroduced",
      "commitMessage": "HADOOP-10281. Create a scheduler, which assigns schedulables a priority level. (Contributed by Chris Li)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1617643 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "12/08/14 5:54 PM",
      "commitName": "e0a9e1bfb724b60af322666b8267c7a9121f84a7",
      "commitAuthor": "Arpit Agarwal",
      "diff": "@@ -0,0 +1,20 @@\n+  private static double[] parseThresholds(String ns, Configuration conf,\n+      int numQueues) {\n+    int[] percentages \u003d conf.getInts(ns + \".\" +\n+      IPC_CALLQUEUE_DECAYSCHEDULER_THRESHOLDS_KEY);\n+\n+    if (percentages.length \u003d\u003d 0) {\n+      return getDefaultThresholds(numQueues);\n+    } else if (percentages.length !\u003d numQueues-1) {\n+      throw new IllegalArgumentException(\"Number of thresholds should be \" +\n+        (numQueues-1) + \". Was: \" + percentages.length);\n+    }\n+\n+    // Convert integer percentages to decimals\n+    double[] decimals \u003d new double[percentages.length];\n+    for (int i \u003d 0; i \u003c percentages.length; i++) {\n+      decimals[i] \u003d percentages[i] / 100.0;\n+    }\n+\n+    return decimals;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private static double[] parseThresholds(String ns, Configuration conf,\n      int numQueues) {\n    int[] percentages \u003d conf.getInts(ns + \".\" +\n      IPC_CALLQUEUE_DECAYSCHEDULER_THRESHOLDS_KEY);\n\n    if (percentages.length \u003d\u003d 0) {\n      return getDefaultThresholds(numQueues);\n    } else if (percentages.length !\u003d numQueues-1) {\n      throw new IllegalArgumentException(\"Number of thresholds should be \" +\n        (numQueues-1) + \". Was: \" + percentages.length);\n    }\n\n    // Convert integer percentages to decimals\n    double[] decimals \u003d new double[percentages.length];\n    for (int i \u003d 0; i \u003c percentages.length; i++) {\n      decimals[i] \u003d percentages[i] / 100.0;\n    }\n\n    return decimals;\n  }",
      "path": "hadoop-common-project/hadoop-common/src/main/java/org/apache/hadoop/ipc/DecayRpcScheduler.java"
    }
  }
}