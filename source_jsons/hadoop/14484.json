{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "JournalNodeSyncer.java",
  "functionName": "downloadMissingLogSegment",
  "functionId": "downloadMissingLogSegment___url-URL__log-RemoteEditLog",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
  "functionStartLine": 424,
  "functionEndLine": 482,
  "numCommitsSeen": 14,
  "timeTaken": 2606,
  "changeHistory": [
    "4be87353e35a30d95d8847b09a1890b014bfc6bb",
    "077a5eed9f505f3ad8fe46d86f3fabed762eeb15",
    "bbc6d254c8a953abba69415d80edeede3ee6269d",
    "07761af357ef4da791df2972d7d3f049d6011c8d",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4"
  ],
  "changeHistoryShort": {
    "4be87353e35a30d95d8847b09a1890b014bfc6bb": "Ybodychange",
    "077a5eed9f505f3ad8fe46d86f3fabed762eeb15": "Ybodychange",
    "bbc6d254c8a953abba69415d80edeede3ee6269d": "Ybodychange",
    "07761af357ef4da791df2972d7d3f049d6011c8d": "Ybodychange",
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4be87353e35a30d95d8847b09a1890b014bfc6bb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-14140. JournalNodeSyncer authentication is failing in secure cluster. Contributed by Surendra Singh Lilhore.\n\nSigned-off-by: Wei-Chiu Chuang \u003cweichiu@apache.org\u003e\n",
      "commitDate": "07/02/19 4:51 PM",
      "commitName": "4be87353e35a30d95d8847b09a1890b014bfc6bb",
      "commitAuthor": "Surendra Singh Lilhore",
      "commitDateOld": "02/02/18 4:28 PM",
      "commitNameOld": "0ef639235b305d684cbe46818613320b3fa62d44",
      "commitAuthorOld": "Hanisha Koneru",
      "daysBetweenCommits": 370.02,
      "commitsBetweenForRepo": 3370,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,51 +1,59 @@\n   private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n       throws IOException {\n     LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n         .getRoot());\n \n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n     File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n         log.getEndTxId());\n \n     if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n       LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n           \" already stored locally at \" + finalEditsFile);\n       return true;\n     }\n \n     // Download the log segment to current.tmp directory first.\n     File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n         log.getStartTxId(), log.getEndTxId());\n \n-    try {\n-      Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n-          logSegmentTransferTimeout, throttler);\n-    } catch (IOException e) {\n-      LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n-          \"file: \" + tmpEditsFile);\n-      if (!tmpEditsFile.delete()) {\n-        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n+    if (!SecurityUtil.doAsLoginUser(() -\u003e {\n+      if (UserGroupInformation.isSecurityEnabled()) {\n+        UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();\n       }\n+      try {\n+        Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n+            logSegmentTransferTimeout, throttler);\n+      } catch (IOException e) {\n+        LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \"\n+            + \"file: \" + tmpEditsFile, e);\n+        if (!tmpEditsFile.delete()) {\n+          LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n+        }\n+        return false;\n+      }\n+      return true;\n+    })) {\n       return false;\n     }\n     LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n         tmpEditsFile.length() + \" bytes.\");\n \n     boolean moveSuccess \u003d false;\n     try {\n       moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n           finalEditsFile, log.getEndTxId());\n     } catch (IOException e) {\n       LOG.info(\"Could not move %s to current directory.\", tmpEditsFile);\n     } finally {\n       if (tmpEditsFile.exists() \u0026\u0026 !tmpEditsFile.delete()) {\n         LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n       }\n     }\n     if (moveSuccess) {\n       metrics.incrNumEditLogsSynced();\n       return true;\n     } else {\n       return false;\n     }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n      throws IOException {\n    LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n        .getRoot());\n\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n    File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n        log.getEndTxId());\n\n    if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n      LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n          \" already stored locally at \" + finalEditsFile);\n      return true;\n    }\n\n    // Download the log segment to current.tmp directory first.\n    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n        log.getStartTxId(), log.getEndTxId());\n\n    if (!SecurityUtil.doAsLoginUser(() -\u003e {\n      if (UserGroupInformation.isSecurityEnabled()) {\n        UserGroupInformation.getCurrentUser().checkTGTAndReloginFromKeytab();\n      }\n      try {\n        Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n            logSegmentTransferTimeout, throttler);\n      } catch (IOException e) {\n        LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \"\n            + \"file: \" + tmpEditsFile, e);\n        if (!tmpEditsFile.delete()) {\n          LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n        }\n        return false;\n      }\n      return true;\n    })) {\n      return false;\n    }\n    LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n        tmpEditsFile.length() + \" bytes.\");\n\n    boolean moveSuccess \u003d false;\n    try {\n      moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n          finalEditsFile, log.getEndTxId());\n    } catch (IOException e) {\n      LOG.info(\"Could not move %s to current directory.\", tmpEditsFile);\n    } finally {\n      if (tmpEditsFile.exists() \u0026\u0026 !tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n    }\n    if (moveSuccess) {\n      metrics.incrNumEditLogsSynced();\n      return true;\n    } else {\n      return false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "077a5eed9f505f3ad8fe46d86f3fabed762eeb15": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12358. Handle IOException when transferring edit log to Journal current dir through JN sync. Contributed by Hanisha Koneru.\n",
      "commitDate": "26/08/17 10:47 PM",
      "commitName": "077a5eed9f505f3ad8fe46d86f3fabed762eeb15",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "04/08/17 12:51 PM",
      "commitNameOld": "bbc6d254c8a953abba69415d80edeede3ee6269d",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 22.41,
      "commitsBetweenForRepo": 131,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,48 +1,51 @@\n   private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n       throws IOException {\n     LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n         .getRoot());\n \n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n     File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n         log.getEndTxId());\n \n     if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n       LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n           \" already stored locally at \" + finalEditsFile);\n       return true;\n     }\n \n     // Download the log segment to current.tmp directory first.\n     File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n         log.getStartTxId(), log.getEndTxId());\n \n     try {\n       Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n           logSegmentTransferTimeout, throttler);\n     } catch (IOException e) {\n       LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n           \"file: \" + tmpEditsFile);\n       if (!tmpEditsFile.delete()) {\n         LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n       }\n       return false;\n     }\n     LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n         tmpEditsFile.length() + \" bytes.\");\n \n-    final boolean moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n-        finalEditsFile, log.getEndTxId());\n-    if (!moveSuccess) {\n-      // If move is not successful, delete the tmpFile\n-      LOG.debug(\"Move to current directory unsuccessful. Deleting temporary \" +\n-          \"file: \" + tmpEditsFile);\n-      if (!tmpEditsFile.delete()) {\n+    boolean moveSuccess \u003d false;\n+    try {\n+      moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n+          finalEditsFile, log.getEndTxId());\n+    } catch (IOException e) {\n+      LOG.info(\"Could not move %s to current directory.\", tmpEditsFile);\n+    } finally {\n+      if (tmpEditsFile.exists() \u0026\u0026 !tmpEditsFile.delete()) {\n         LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n       }\n-      return false;\n-    } else {\n-      metrics.incrNumEditLogsSynced();\n     }\n-    return true;\n+    if (moveSuccess) {\n+      metrics.incrNumEditLogsSynced();\n+      return true;\n+    } else {\n+      return false;\n+    }\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n      throws IOException {\n    LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n        .getRoot());\n\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n    File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n        log.getEndTxId());\n\n    if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n      LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n          \" already stored locally at \" + finalEditsFile);\n      return true;\n    }\n\n    // Download the log segment to current.tmp directory first.\n    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n        log.getStartTxId(), log.getEndTxId());\n\n    try {\n      Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n          logSegmentTransferTimeout, throttler);\n    } catch (IOException e) {\n      LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n          \"file: \" + tmpEditsFile);\n      if (!tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n      return false;\n    }\n    LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n        tmpEditsFile.length() + \" bytes.\");\n\n    boolean moveSuccess \u003d false;\n    try {\n      moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n          finalEditsFile, log.getEndTxId());\n    } catch (IOException e) {\n      LOG.info(\"Could not move %s to current directory.\", tmpEditsFile);\n    } finally {\n      if (tmpEditsFile.exists() \u0026\u0026 !tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n    }\n    if (moveSuccess) {\n      metrics.incrNumEditLogsSynced();\n      return true;\n    } else {\n      return false;\n    }\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "bbc6d254c8a953abba69415d80edeede3ee6269d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-12224. Add tests to TestJournalNodeSync for sync after JN downtime. Contributed by Hanisha Koneru.\n",
      "commitDate": "04/08/17 12:51 PM",
      "commitName": "bbc6d254c8a953abba69415d80edeede3ee6269d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "25/05/17 2:01 PM",
      "commitNameOld": "11615631360ba49c1e9d256ed4f65119d99fd67d",
      "commitAuthorOld": "Arpit Agarwal",
      "daysBetweenCommits": 70.95,
      "commitsBetweenForRepo": 403,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,46 +1,48 @@\n   private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n       throws IOException {\n     LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n         .getRoot());\n \n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n     File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n         log.getEndTxId());\n \n     if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n       LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n           \" already stored locally at \" + finalEditsFile);\n       return true;\n     }\n \n     // Download the log segment to current.tmp directory first.\n     File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n         log.getStartTxId(), log.getEndTxId());\n \n     try {\n       Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n           logSegmentTransferTimeout, throttler);\n     } catch (IOException e) {\n       LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n           \"file: \" + tmpEditsFile);\n       if (!tmpEditsFile.delete()) {\n         LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n       }\n       return false;\n     }\n     LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n         tmpEditsFile.length() + \" bytes.\");\n \n     final boolean moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n         finalEditsFile, log.getEndTxId());\n     if (!moveSuccess) {\n       // If move is not successful, delete the tmpFile\n       LOG.debug(\"Move to current directory unsuccessful. Deleting temporary \" +\n           \"file: \" + tmpEditsFile);\n       if (!tmpEditsFile.delete()) {\n         LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n       }\n       return false;\n+    } else {\n+      metrics.incrNumEditLogsSynced();\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n      throws IOException {\n    LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n        .getRoot());\n\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n    File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n        log.getEndTxId());\n\n    if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n      LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n          \" already stored locally at \" + finalEditsFile);\n      return true;\n    }\n\n    // Download the log segment to current.tmp directory first.\n    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n        log.getStartTxId(), log.getEndTxId());\n\n    try {\n      Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n          logSegmentTransferTimeout, throttler);\n    } catch (IOException e) {\n      LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n          \"file: \" + tmpEditsFile);\n      if (!tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n      return false;\n    }\n    LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n        tmpEditsFile.length() + \" bytes.\");\n\n    final boolean moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n        finalEditsFile, log.getEndTxId());\n    if (!moveSuccess) {\n      // If move is not successful, delete the tmpFile\n      LOG.debug(\"Move to current directory unsuccessful. Deleting temporary \" +\n          \"file: \" + tmpEditsFile);\n      if (!tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n      return false;\n    } else {\n      metrics.incrNumEditLogsSynced();\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "07761af357ef4da791df2972d7d3f049d6011c8d": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-11448. JN log segment syncing should support HA upgrade. Contributed by Hanisha Koneru.\n",
      "commitDate": "04/05/17 3:57 PM",
      "commitName": "07761af357ef4da791df2972d7d3f049d6011c8d",
      "commitAuthor": "Arpit Agarwal",
      "commitDateOld": "22/02/17 4:33 PM",
      "commitNameOld": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 70.93,
      "commitsBetweenForRepo": 421,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,47 +1,46 @@\n-  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log) throws\n-      IOException {\n+  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n+      throws IOException {\n     LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n         .getRoot());\n \n     assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n     File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n         log.getEndTxId());\n \n     if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n       LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n           \" already stored locally at \" + finalEditsFile);\n       return true;\n     }\n \n-    final long milliTime \u003d Time.monotonicNow();\n-    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(log.getStartTxId(), log\n-        .getEndTxId(), milliTime);\n+    // Download the log segment to current.tmp directory first.\n+    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n+        log.getStartTxId(), log.getEndTxId());\n+\n     try {\n       Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n           logSegmentTransferTimeout, throttler);\n     } catch (IOException e) {\n       LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n           \"file: \" + tmpEditsFile);\n       if (!tmpEditsFile.delete()) {\n         LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n       }\n       return false;\n     }\n     LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n         tmpEditsFile.length() + \" bytes.\");\n \n-    LOG.debug(\"Renaming \" + tmpEditsFile.getName() + \" to \"\n-        + finalEditsFile.getName());\n-    boolean renameSuccess \u003d journal.renameTmpSegment(tmpEditsFile,\n+    final boolean moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n         finalEditsFile, log.getEndTxId());\n-    if (!renameSuccess) {\n-      //If rename is not successful, delete the tmpFile\n-      LOG.debug(\"Renaming unsuccessful. Deleting temporary file: \"\n-          + tmpEditsFile);\n+    if (!moveSuccess) {\n+      // If move is not successful, delete the tmpFile\n+      LOG.debug(\"Move to current directory unsuccessful. Deleting temporary \" +\n+          \"file: \" + tmpEditsFile);\n       if (!tmpEditsFile.delete()) {\n         LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n       }\n       return false;\n     }\n     return true;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log)\n      throws IOException {\n    LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n        .getRoot());\n\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n    File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n        log.getEndTxId());\n\n    if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n      LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n          \" already stored locally at \" + finalEditsFile);\n      return true;\n    }\n\n    // Download the log segment to current.tmp directory first.\n    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(\n        log.getStartTxId(), log.getEndTxId());\n\n    try {\n      Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n          logSegmentTransferTimeout, throttler);\n    } catch (IOException e) {\n      LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n          \"file: \" + tmpEditsFile);\n      if (!tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n      return false;\n    }\n    LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n        tmpEditsFile.length() + \" bytes.\");\n\n    final boolean moveSuccess \u003d journal.moveTmpSegmentToCurrent(tmpEditsFile,\n        finalEditsFile, log.getEndTxId());\n    if (!moveSuccess) {\n      // If move is not successful, delete the tmpFile\n      LOG.debug(\"Move to current directory unsuccessful. Deleting temporary \" +\n          \"file: \" + tmpEditsFile);\n      if (!tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java",
      "extendedDetails": {}
    },
    "13d4bcfe3535a2df79c2a56e7578716d15497ff4": {
      "type": "Yintroduced",
      "commitMessage": "HDFS-4025. QJM: Sychronize past log segments to JNs that missed them. Contributed by Hanisha Koneru.\n",
      "commitDate": "22/02/17 4:33 PM",
      "commitName": "13d4bcfe3535a2df79c2a56e7578716d15497ff4",
      "commitAuthor": "Jing Zhao",
      "diff": "@@ -0,0 +1,47 @@\n+  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log) throws\n+      IOException {\n+    LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n+        .getRoot());\n+\n+    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n+    File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n+        log.getEndTxId());\n+\n+    if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n+      LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n+          \" already stored locally at \" + finalEditsFile);\n+      return true;\n+    }\n+\n+    final long milliTime \u003d Time.monotonicNow();\n+    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(log.getStartTxId(), log\n+        .getEndTxId(), milliTime);\n+    try {\n+      Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n+          logSegmentTransferTimeout, throttler);\n+    } catch (IOException e) {\n+      LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n+          \"file: \" + tmpEditsFile);\n+      if (!tmpEditsFile.delete()) {\n+        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n+      }\n+      return false;\n+    }\n+    LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n+        tmpEditsFile.length() + \" bytes.\");\n+\n+    LOG.debug(\"Renaming \" + tmpEditsFile.getName() + \" to \"\n+        + finalEditsFile.getName());\n+    boolean renameSuccess \u003d journal.renameTmpSegment(tmpEditsFile,\n+        finalEditsFile, log.getEndTxId());\n+    if (!renameSuccess) {\n+      //If rename is not successful, delete the tmpFile\n+      LOG.debug(\"Renaming unsuccessful. Deleting temporary file: \"\n+          + tmpEditsFile);\n+      if (!tmpEditsFile.delete()) {\n+        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n+      }\n+      return false;\n+    }\n+    return true;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  private boolean downloadMissingLogSegment(URL url, RemoteEditLog log) throws\n      IOException {\n    LOG.info(\"Downloading missing Edit Log from \" + url + \" to \" + jnStorage\n        .getRoot());\n\n    assert log.getStartTxId() \u003e 0 \u0026\u0026 log.getEndTxId() \u003e 0 : \"bad log: \" + log;\n    File finalEditsFile \u003d jnStorage.getFinalizedEditsFile(log.getStartTxId(),\n        log.getEndTxId());\n\n    if (finalEditsFile.exists() \u0026\u0026 FileUtil.canRead(finalEditsFile)) {\n      LOG.info(\"Skipping download of remote edit log \" + log + \" since it\u0027s\" +\n          \" already stored locally at \" + finalEditsFile);\n      return true;\n    }\n\n    final long milliTime \u003d Time.monotonicNow();\n    File tmpEditsFile \u003d jnStorage.getTemporaryEditsFile(log.getStartTxId(), log\n        .getEndTxId(), milliTime);\n    try {\n      Util.doGetUrl(url, ImmutableList.of(tmpEditsFile), jnStorage, false,\n          logSegmentTransferTimeout, throttler);\n    } catch (IOException e) {\n      LOG.error(\"Download of Edit Log file for Syncing failed. Deleting temp \" +\n          \"file: \" + tmpEditsFile);\n      if (!tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n      return false;\n    }\n    LOG.info(\"Downloaded file \" + tmpEditsFile.getName() + \" of size \" +\n        tmpEditsFile.length() + \" bytes.\");\n\n    LOG.debug(\"Renaming \" + tmpEditsFile.getName() + \" to \"\n        + finalEditsFile.getName());\n    boolean renameSuccess \u003d journal.renameTmpSegment(tmpEditsFile,\n        finalEditsFile, log.getEndTxId());\n    if (!renameSuccess) {\n      //If rename is not successful, delete the tmpFile\n      LOG.debug(\"Renaming unsuccessful. Deleting temporary file: \"\n          + tmpEditsFile);\n      if (!tmpEditsFile.delete()) {\n        LOG.warn(\"Deleting \" + tmpEditsFile + \" has failed\");\n      }\n      return false;\n    }\n    return true;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/qjournal/server/JournalNodeSyncer.java"
    }
  }
}