{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "RMServerUtils.java",
  "functionName": "verifyAdminAccess",
  "functionId": "verifyAdminAccess___authorizer-YarnAuthorizationProvider__method-String__module-String__LOG-Logger(modifiers-final)",
  "sourceFilePath": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
  "functionStartLine": 399,
  "functionEndLine": 428,
  "numCommitsSeen": 113,
  "timeTaken": 4588,
  "changeHistory": [
    "e40e2d6ad5cbe782c3a067229270738b501ed27e",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
    "03510d00f48137fe4273c3e694e87fc0e660a706"
  ],
  "changeHistoryShort": {
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": "Yparameterchange",
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": "Ymultichange(Yparameterchange,Ybodychange)",
    "03510d00f48137fe4273c3e694e87fc0e660a706": "Yintroduced"
  },
  "changeHistoryDetails": {
    "e40e2d6ad5cbe782c3a067229270738b501ed27e": {
      "type": "Yparameterchange",
      "commitMessage": "YARN-7243. Moving logging APIs over to slf4j in hadoop-yarn-server-resourcemanager.\n\nSigned-off-by: Akira Ajisaka \u003caajisaka@apache.org\u003e\n",
      "commitDate": "04/03/19 9:10 PM",
      "commitName": "e40e2d6ad5cbe782c3a067229270738b501ed27e",
      "commitAuthor": "Prabhu Joseph",
      "commitDateOld": "03/02/19 11:18 PM",
      "commitNameOld": "604b2489a9e168a0fd702343f6f8844df9e86d17",
      "commitAuthorOld": "Sunil G",
      "daysBetweenCommits": 28.91,
      "commitsBetweenForRepo": 251,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,30 +1,30 @@\n   public static UserGroupInformation verifyAdminAccess(\n       YarnAuthorizationProvider authorizer, String method, String module,\n-      final Log LOG)\n+      final Logger LOG)\n       throws IOException {\n     UserGroupInformation user;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ioe) {\n       LOG.warn(\"Couldn\u0027t get current user\", ioe);\n       RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n           \"AdminService\", \"Couldn\u0027t get current user\");\n       throw ioe;\n     }\n \n     if (!authorizer.isAdmin(user)) {\n       LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n           \" to call \u0027\" + method + \"\u0027\");\n \n       RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n           RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n \n       throw new AccessControlException(\"User \" + user.getShortUserName() +\n           \" doesn\u0027t have permission\" +\n           \" to call \u0027\" + method + \"\u0027\");\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n     }\n     return user;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation verifyAdminAccess(\n      YarnAuthorizationProvider authorizer, String method, String module,\n      final Logger LOG)\n      throws IOException {\n    UserGroupInformation user;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n      RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n          \"AdminService\", \"Couldn\u0027t get current user\");\n      throw ioe;\n    }\n\n    if (!authorizer.isAdmin(user)) {\n      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n\n      RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n\n      throw new AccessControlException(\"User \" + user.getShortUserName() +\n          \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n    }\n    return user;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
      "extendedDetails": {
        "oldValue": "[authorizer-YarnAuthorizationProvider, method-String, module-String, LOG-Log(modifiers-final)]",
        "newValue": "[authorizer-YarnAuthorizationProvider, method-String, module-String, LOG-Logger(modifiers-final)]"
      }
    },
    "23bf6c72071782e3fd5a628e21495d6b974c7a9e": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
      "commitDate": "09/02/15 8:34 PM",
      "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
      "commitAuthor": "Zhijie Shen",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
          "commitDate": "09/02/15 8:34 PM",
          "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "21/10/14 8:09 PM",
          "commitNameOld": "c0e034336c85296be6f549d88d137fb2b2b79a15",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 111.06,
          "commitsBetweenForRepo": 835,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public static UserGroupInformation verifyAccess(\n-      AccessControlList acl, String method, String module, final Log LOG)\n+  public static UserGroupInformation verifyAdminAccess(\n+      YarnAuthorizationProvider authorizer, String method, String module,\n+      final Log LOG)\n       throws IOException {\n     UserGroupInformation user;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ioe) {\n       LOG.warn(\"Couldn\u0027t get current user\", ioe);\n-      RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n+      RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n           \"AdminService\", \"Couldn\u0027t get current user\");\n       throw ioe;\n     }\n \n-    if (!acl.isUserAllowed(user)) {\n+    if (!authorizer.isAdmin(user)) {\n       LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n           \" to call \u0027\" + method + \"\u0027\");\n \n-      RMAuditLogger.logFailure(user.getShortUserName(), method,\n-          acl.toString(), module,\n-          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n+      RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n+        RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n \n       throw new AccessControlException(\"User \" + user.getShortUserName() +\n               \" doesn\u0027t have permission\" +\n               \" to call \u0027\" + method + \"\u0027\");\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n     }\n     return user;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation verifyAdminAccess(\n      YarnAuthorizationProvider authorizer, String method, String module,\n      final Log LOG)\n      throws IOException {\n    UserGroupInformation user;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n      RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n          \"AdminService\", \"Couldn\u0027t get current user\");\n      throw ioe;\n    }\n\n    if (!authorizer.isAdmin(user)) {\n      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n\n      RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n        RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n\n      throw new AccessControlException(\"User \" + user.getShortUserName() +\n              \" doesn\u0027t have permission\" +\n              \" to call \u0027\" + method + \"\u0027\");\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n    }\n    return user;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {
            "oldValue": "verifyAccess",
            "newValue": "verifyAdminAccess"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
          "commitDate": "09/02/15 8:34 PM",
          "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "21/10/14 8:09 PM",
          "commitNameOld": "c0e034336c85296be6f549d88d137fb2b2b79a15",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 111.06,
          "commitsBetweenForRepo": 835,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public static UserGroupInformation verifyAccess(\n-      AccessControlList acl, String method, String module, final Log LOG)\n+  public static UserGroupInformation verifyAdminAccess(\n+      YarnAuthorizationProvider authorizer, String method, String module,\n+      final Log LOG)\n       throws IOException {\n     UserGroupInformation user;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ioe) {\n       LOG.warn(\"Couldn\u0027t get current user\", ioe);\n-      RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n+      RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n           \"AdminService\", \"Couldn\u0027t get current user\");\n       throw ioe;\n     }\n \n-    if (!acl.isUserAllowed(user)) {\n+    if (!authorizer.isAdmin(user)) {\n       LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n           \" to call \u0027\" + method + \"\u0027\");\n \n-      RMAuditLogger.logFailure(user.getShortUserName(), method,\n-          acl.toString(), module,\n-          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n+      RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n+        RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n \n       throw new AccessControlException(\"User \" + user.getShortUserName() +\n               \" doesn\u0027t have permission\" +\n               \" to call \u0027\" + method + \"\u0027\");\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n     }\n     return user;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation verifyAdminAccess(\n      YarnAuthorizationProvider authorizer, String method, String module,\n      final Log LOG)\n      throws IOException {\n    UserGroupInformation user;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n      RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n          \"AdminService\", \"Couldn\u0027t get current user\");\n      throw ioe;\n    }\n\n    if (!authorizer.isAdmin(user)) {\n      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n\n      RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n        RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n\n      throw new AccessControlException(\"User \" + user.getShortUserName() +\n              \" doesn\u0027t have permission\" +\n              \" to call \u0027\" + method + \"\u0027\");\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n    }\n    return user;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {
            "oldValue": "[acl-AccessControlList, method-String, module-String, LOG-Log(modifiers-final)]",
            "newValue": "[authorizer-YarnAuthorizationProvider, method-String, module-String, LOG-Log(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-3100. Made YARN authorization pluggable. Contributed by Jian He.\n",
          "commitDate": "09/02/15 8:34 PM",
          "commitName": "23bf6c72071782e3fd5a628e21495d6b974c7a9e",
          "commitAuthor": "Zhijie Shen",
          "commitDateOld": "21/10/14 8:09 PM",
          "commitNameOld": "c0e034336c85296be6f549d88d137fb2b2b79a15",
          "commitAuthorOld": "Vinod Kumar Vavilapalli",
          "daysBetweenCommits": 111.06,
          "commitsBetweenForRepo": 835,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n-  public static UserGroupInformation verifyAccess(\n-      AccessControlList acl, String method, String module, final Log LOG)\n+  public static UserGroupInformation verifyAdminAccess(\n+      YarnAuthorizationProvider authorizer, String method, String module,\n+      final Log LOG)\n       throws IOException {\n     UserGroupInformation user;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ioe) {\n       LOG.warn(\"Couldn\u0027t get current user\", ioe);\n-      RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n+      RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n           \"AdminService\", \"Couldn\u0027t get current user\");\n       throw ioe;\n     }\n \n-    if (!acl.isUserAllowed(user)) {\n+    if (!authorizer.isAdmin(user)) {\n       LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n           \" to call \u0027\" + method + \"\u0027\");\n \n-      RMAuditLogger.logFailure(user.getShortUserName(), method,\n-          acl.toString(), module,\n-          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n+      RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n+        RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n \n       throw new AccessControlException(\"User \" + user.getShortUserName() +\n               \" doesn\u0027t have permission\" +\n               \" to call \u0027\" + method + \"\u0027\");\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n     }\n     return user;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation verifyAdminAccess(\n      YarnAuthorizationProvider authorizer, String method, String module,\n      final Log LOG)\n      throws IOException {\n    UserGroupInformation user;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n      RMAuditLogger.logFailure(\"UNKNOWN\", method, \"\",\n          \"AdminService\", \"Couldn\u0027t get current user\");\n      throw ioe;\n    }\n\n    if (!authorizer.isAdmin(user)) {\n      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n\n      RMAuditLogger.logFailure(user.getShortUserName(), method, \"\", module,\n        RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n\n      throw new AccessControlException(\"User \" + user.getShortUserName() +\n              \" doesn\u0027t have permission\" +\n              \" to call \u0027\" + method + \"\u0027\");\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n    }\n    return user;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "f2ea555ac6c06a3f2f6559731f48711fff05d3f1": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
      "commitDate": "15/10/14 6:33 PM",
      "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
      "commitAuthor": "Vinod Kumar Vavilapalli",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "10/09/14 6:20 PM",
          "commitNameOld": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 35.01,
          "commitsBetweenForRepo": 369,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   public static UserGroupInformation verifyAccess(\n-      AccessControlList acl, String method, final Log LOG)\n+      AccessControlList acl, String method, String module, final Log LOG)\n       throws IOException {\n     UserGroupInformation user;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ioe) {\n       LOG.warn(\"Couldn\u0027t get current user\", ioe);\n       RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n           \"AdminService\", \"Couldn\u0027t get current user\");\n       throw ioe;\n     }\n \n     if (!acl.isUserAllowed(user)) {\n       LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n           \" to call \u0027\" + method + \"\u0027\");\n \n       RMAuditLogger.logFailure(user.getShortUserName(), method,\n-          acl.toString(), \"AdminService\",\n+          acl.toString(), module,\n           RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n \n       throw new AccessControlException(\"User \" + user.getShortUserName() +\n               \" doesn\u0027t have permission\" +\n               \" to call \u0027\" + method + \"\u0027\");\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n     }\n     return user;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation verifyAccess(\n      AccessControlList acl, String method, String module, final Log LOG)\n      throws IOException {\n    UserGroupInformation user;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n      RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n          \"AdminService\", \"Couldn\u0027t get current user\");\n      throw ioe;\n    }\n\n    if (!acl.isUserAllowed(user)) {\n      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n\n      RMAuditLogger.logFailure(user.getShortUserName(), method,\n          acl.toString(), module,\n          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n\n      throw new AccessControlException(\"User \" + user.getShortUserName() +\n              \" doesn\u0027t have permission\" +\n              \" to call \u0027\" + method + \"\u0027\");\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n    }\n    return user;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {
            "oldValue": "[acl-AccessControlList, method-String, LOG-Log(modifiers-final)]",
            "newValue": "[acl-AccessControlList, method-String, module-String, LOG-Log(modifiers-final)]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "YARN-2496. Enhanced Capacity Scheduler to have basic support for allocating resources based on node-labels. Contributed by Wangda Tan.\nYARN-2500. Ehnaced ResourceManager to support schedulers allocating resources based on node-labels. Contributed by Wangda Tan.\n",
          "commitDate": "15/10/14 6:33 PM",
          "commitName": "f2ea555ac6c06a3f2f6559731f48711fff05d3f1",
          "commitAuthor": "Vinod Kumar Vavilapalli",
          "commitDateOld": "10/09/14 6:20 PM",
          "commitNameOld": "83be3ad44484bf8a24cb90de4b9c26ab59d226a8",
          "commitAuthorOld": "Jian He",
          "daysBetweenCommits": 35.01,
          "commitsBetweenForRepo": 369,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,30 +1,30 @@\n   public static UserGroupInformation verifyAccess(\n-      AccessControlList acl, String method, final Log LOG)\n+      AccessControlList acl, String method, String module, final Log LOG)\n       throws IOException {\n     UserGroupInformation user;\n     try {\n       user \u003d UserGroupInformation.getCurrentUser();\n     } catch (IOException ioe) {\n       LOG.warn(\"Couldn\u0027t get current user\", ioe);\n       RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n           \"AdminService\", \"Couldn\u0027t get current user\");\n       throw ioe;\n     }\n \n     if (!acl.isUserAllowed(user)) {\n       LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n           \" to call \u0027\" + method + \"\u0027\");\n \n       RMAuditLogger.logFailure(user.getShortUserName(), method,\n-          acl.toString(), \"AdminService\",\n+          acl.toString(), module,\n           RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n \n       throw new AccessControlException(\"User \" + user.getShortUserName() +\n               \" doesn\u0027t have permission\" +\n               \" to call \u0027\" + method + \"\u0027\");\n     }\n     if (LOG.isTraceEnabled()) {\n       LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n     }\n     return user;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  public static UserGroupInformation verifyAccess(\n      AccessControlList acl, String method, String module, final Log LOG)\n      throws IOException {\n    UserGroupInformation user;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n      RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n          \"AdminService\", \"Couldn\u0027t get current user\");\n      throw ioe;\n    }\n\n    if (!acl.isUserAllowed(user)) {\n      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n\n      RMAuditLogger.logFailure(user.getShortUserName(), method,\n          acl.toString(), module,\n          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n\n      throw new AccessControlException(\"User \" + user.getShortUserName() +\n              \" doesn\u0027t have permission\" +\n              \" to call \u0027\" + method + \"\u0027\");\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n    }\n    return user;\n  }",
          "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java",
          "extendedDetails": {}
        }
      ]
    },
    "03510d00f48137fe4273c3e694e87fc0e660a706": {
      "type": "Yintroduced",
      "commitMessage": "YARN-1068. Add admin support for HA operations (Karthik Kambatla via bikas)\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1536888 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "29/10/13 2:03 PM",
      "commitName": "03510d00f48137fe4273c3e694e87fc0e660a706",
      "commitAuthor": "Bikas Saha",
      "diff": "@@ -0,0 +1,30 @@\n+  public static UserGroupInformation verifyAccess(\n+      AccessControlList acl, String method, final Log LOG)\n+      throws IOException {\n+    UserGroupInformation user;\n+    try {\n+      user \u003d UserGroupInformation.getCurrentUser();\n+    } catch (IOException ioe) {\n+      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n+      RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n+          \"AdminService\", \"Couldn\u0027t get current user\");\n+      throw ioe;\n+    }\n+\n+    if (!acl.isUserAllowed(user)) {\n+      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n+          \" to call \u0027\" + method + \"\u0027\");\n+\n+      RMAuditLogger.logFailure(user.getShortUserName(), method,\n+          acl.toString(), \"AdminService\",\n+          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n+\n+      throw new AccessControlException(\"User \" + user.getShortUserName() +\n+              \" doesn\u0027t have permission\" +\n+              \" to call \u0027\" + method + \"\u0027\");\n+    }\n+    if (LOG.isTraceEnabled()) {\n+      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n+    }\n+    return user;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public static UserGroupInformation verifyAccess(\n      AccessControlList acl, String method, final Log LOG)\n      throws IOException {\n    UserGroupInformation user;\n    try {\n      user \u003d UserGroupInformation.getCurrentUser();\n    } catch (IOException ioe) {\n      LOG.warn(\"Couldn\u0027t get current user\", ioe);\n      RMAuditLogger.logFailure(\"UNKNOWN\", method, acl.toString(),\n          \"AdminService\", \"Couldn\u0027t get current user\");\n      throw ioe;\n    }\n\n    if (!acl.isUserAllowed(user)) {\n      LOG.warn(\"User \" + user.getShortUserName() + \" doesn\u0027t have permission\" +\n          \" to call \u0027\" + method + \"\u0027\");\n\n      RMAuditLogger.logFailure(user.getShortUserName(), method,\n          acl.toString(), \"AdminService\",\n          RMAuditLogger.AuditConstants.UNAUTHORIZED_USER);\n\n      throw new AccessControlException(\"User \" + user.getShortUserName() +\n              \" doesn\u0027t have permission\" +\n              \" to call \u0027\" + method + \"\u0027\");\n    }\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(method + \" invoked by user \" + user.getShortUserName());\n    }\n    return user;\n  }",
      "path": "hadoop-yarn-project/hadoop-yarn/hadoop-yarn-server/hadoop-yarn-server-resourcemanager/src/main/java/org/apache/hadoop/yarn/server/resourcemanager/RMServerUtils.java"
    }
  }
}