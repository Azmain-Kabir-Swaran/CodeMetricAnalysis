{
  "origin": "codeshovel",
  "repositoryName": "hadoop",
  "repositoryPath": "/home/shaiful/research/codeshovel/codeshovel-projects/hadoop/.git",
  "startCommitName": "HEAD",
  "sourceFileName": "FSDirAclOp.java",
  "functionName": "unprotectedSetAcl",
  "functionId": "unprotectedSetAcl___fsd-FSDirectory__iip-INodesInPath__aclSpec-List__AclEntry____fromEdits-boolean",
  "sourceFilePath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
  "functionStartLine": 181,
  "functionEndLine": 200,
  "numCommitsSeen": 241,
  "timeTaken": 7409,
  "changeHistory": [
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
    "2cf90a2c338497a466bbad9e83966033bf14bfb7",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
    "9297f980c2de8886ff970946a2513e6890cd5552",
    "0689363343a281a6f7f6f395227668bddc2663eb",
    "14f1f76bf609704d36a1699c05fa85750cefe917"
  ],
  "changeHistoryShort": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": "Ymultichange(Yparameterchange,Ybodychange)",
    "2cf90a2c338497a466bbad9e83966033bf14bfb7": "Ymultichange(Yparameterchange,Ybodychange)",
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": "Ybodychange",
    "9297f980c2de8886ff970946a2513e6890cd5552": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
    "0689363343a281a6f7f6f395227668bddc2663eb": "Ybodychange",
    "14f1f76bf609704d36a1699c05fa85750cefe917": "Ybodychange"
  },
  "changeHistoryDetails": {
    "9d175853b0170683ad5f21d9bcdeaac49fe89e04": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
      "commitDate": "24/10/16 3:14 PM",
      "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
      "commitAuthor": "Kihwal Lee",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
          "commitDate": "24/10/16 3:14 PM",
          "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 11:03 AM",
          "commitNameOld": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 24.17,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,20 @@\n-  static List\u003cAclEntry\u003e unprotectedSetAcl(\n-      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec, boolean fromEdits)\n-      throws IOException {\n+  static List\u003cAclEntry\u003e unprotectedSetAcl(FSDirectory fsd, INodesInPath iip,\n+      List\u003cAclEntry\u003e aclSpec, boolean fromEdits) throws IOException {\n     assert fsd.hasWriteLock();\n-    final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n-        FSDirectory.normalizePath(src), true);\n \n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n       unprotectedRemoveAcl(fsd, iip);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n     if (!fromEdits) {\n       List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n       newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n     }\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(FSDirectory fsd, INodesInPath iip,\n      List\u003cAclEntry\u003e aclSpec, boolean fromEdits) throws IOException {\n    assert fsd.hasWriteLock();\n\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, iip);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n    if (!fromEdits) {\n      List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n      newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n    }\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String, aclSpec-List\u003cAclEntry\u003e, fromEdits-boolean]",
            "newValue": "[fsd-FSDirectory, iip-INodesInPath, aclSpec-List\u003cAclEntry\u003e, fromEdits-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-10997. Reduce number of path resolving methods. Contributed by Daryn Sharp.\n",
          "commitDate": "24/10/16 3:14 PM",
          "commitName": "9d175853b0170683ad5f21d9bcdeaac49fe89e04",
          "commitAuthor": "Kihwal Lee",
          "commitDateOld": "30/09/16 11:03 AM",
          "commitNameOld": "a0730aa5ced7666a8c92f9fb830b615f5f9f477a",
          "commitAuthorOld": "Kihwal Lee",
          "daysBetweenCommits": 24.17,
          "commitsBetweenForRepo": 168,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,23 +1,20 @@\n-  static List\u003cAclEntry\u003e unprotectedSetAcl(\n-      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec, boolean fromEdits)\n-      throws IOException {\n+  static List\u003cAclEntry\u003e unprotectedSetAcl(FSDirectory fsd, INodesInPath iip,\n+      List\u003cAclEntry\u003e aclSpec, boolean fromEdits) throws IOException {\n     assert fsd.hasWriteLock();\n-    final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n-        FSDirectory.normalizePath(src), true);\n \n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n       unprotectedRemoveAcl(fsd, iip);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n     if (!fromEdits) {\n       List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n       newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n     }\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(FSDirectory fsd, INodesInPath iip,\n      List\u003cAclEntry\u003e aclSpec, boolean fromEdits) throws IOException {\n    assert fsd.hasWriteLock();\n\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, iip);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n    if (!fromEdits) {\n      List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n      newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n    }\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "2cf90a2c338497a466bbad9e83966033bf14bfb7": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "HDFS-7560. ACLs removed by removeDefaultAcl() will be back after NameNode restart/failover. Contributed by Vinayakumar B.\n",
      "commitDate": "22/12/14 1:59 PM",
      "commitName": "2cf90a2c338497a466bbad9e83966033bf14bfb7",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7560. ACLs removed by removeDefaultAcl() will be back after NameNode restart/failover. Contributed by Vinayakumar B.\n",
          "commitDate": "22/12/14 1:59 PM",
          "commitName": "2cf90a2c338497a466bbad9e83966033bf14bfb7",
          "commitAuthor": "cnauroth",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 4.11,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n   static List\u003cAclEntry\u003e unprotectedSetAcl(\n-      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n+      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec, boolean fromEdits)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n         FSDirectory.normalizePath(src), true);\n \n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n       unprotectedRemoveAcl(fsd, iip);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n-    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n-    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n-      aclSpec);\n+    List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n+    if (!fromEdits) {\n+      List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n+      newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n+    }\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(\n      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec, boolean fromEdits)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n        FSDirectory.normalizePath(src), true);\n\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, iip);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n    if (!fromEdits) {\n      List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n      newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n    }\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[fsd-FSDirectory, src-String, aclSpec-List\u003cAclEntry\u003e]",
            "newValue": "[fsd-FSDirectory, src-String, aclSpec-List\u003cAclEntry\u003e, fromEdits-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7560. ACLs removed by removeDefaultAcl() will be back after NameNode restart/failover. Contributed by Vinayakumar B.\n",
          "commitDate": "22/12/14 1:59 PM",
          "commitName": "2cf90a2c338497a466bbad9e83966033bf14bfb7",
          "commitAuthor": "cnauroth",
          "commitDateOld": "18/12/14 11:25 AM",
          "commitNameOld": "65f2a4ee600dfffa5203450261da3c1989de25a9",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 4.11,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,21 +1,23 @@\n   static List\u003cAclEntry\u003e unprotectedSetAcl(\n-      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n+      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec, boolean fromEdits)\n       throws IOException {\n     assert fsd.hasWriteLock();\n     final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n         FSDirectory.normalizePath(src), true);\n \n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n       unprotectedRemoveAcl(fsd, iip);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n     INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n-    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n-    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n-      aclSpec);\n+    List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n+    if (!fromEdits) {\n+      List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n+      newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n+    }\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(\n      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec, boolean fromEdits)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n        FSDirectory.normalizePath(src), true);\n\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, iip);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e newAcl \u003d aclSpec;\n    if (!fromEdits) {\n      List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n      newAcl \u003d AclTransformation.replaceAclEntries(existingAcl, aclSpec);\n    }\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {}
        }
      ]
    },
    "c78e3a7cdd10c40454e9acb06986ba6d8573cb19": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-7059. Avoid resolving path multiple times. Contributed by Jing Zhao.\n",
      "commitDate": "12/12/14 3:13 PM",
      "commitName": "c78e3a7cdd10c40454e9acb06986ba6d8573cb19",
      "commitAuthor": "Jing Zhao",
      "commitDateOld": "08/12/14 10:23 AM",
      "commitNameOld": "ffe942b82c1208bc7b22899da3a233944cb5ab52",
      "commitAuthorOld": "cnauroth",
      "daysBetweenCommits": 4.2,
      "commitsBetweenForRepo": 50,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,20 +1,21 @@\n   static List\u003cAclEntry\u003e unprotectedSetAcl(\n       FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n       throws IOException {\n+    assert fsd.hasWriteLock();\n+    final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n+        FSDirectory.normalizePath(src), true);\n+\n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n-      unprotectedRemoveAcl(fsd, src);\n+      unprotectedRemoveAcl(fsd, iip);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n-    assert fsd.hasWriteLock();\n-    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n-        (src), true);\n-    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n+    INode inode \u003d FSDirectory.resolveLastINode(iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n     List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n       aclSpec);\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(\n      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n      throws IOException {\n    assert fsd.hasWriteLock();\n    final INodesInPath iip \u003d fsd.getINodesInPath4Write(\n        FSDirectory.normalizePath(src), true);\n\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, iip);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    INode inode \u003d FSDirectory.resolveLastINode(iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n      aclSpec);\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
      "extendedDetails": {}
    },
    "9297f980c2de8886ff970946a2513e6890cd5552": {
      "type": "Ymultichange(Ymovefromfile,Ymodifierchange,Ybodychange,Yparameterchange)",
      "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
      "commitDate": "06/12/14 2:20 PM",
      "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
      "commitAuthor": "cnauroth",
      "subchanges": [
        {
          "type": "Ymovefromfile",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n+  static List\u003cAclEntry\u003e unprotectedSetAcl(\n+      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n       throws IOException {\n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n-      unprotectedRemoveAcl(src);\n+      unprotectedRemoveAcl(fsd, src);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n+        (src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n     List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n       aclSpec);\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(\n      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n      throws IOException {\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, src);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n        (src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n      aclSpec);\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
            "newPath": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
            "oldMethodName": "unprotectedSetAcl",
            "newMethodName": "unprotectedSetAcl"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n+  static List\u003cAclEntry\u003e unprotectedSetAcl(\n+      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n       throws IOException {\n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n-      unprotectedRemoveAcl(src);\n+      unprotectedRemoveAcl(fsd, src);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n+        (src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n     List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n       aclSpec);\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(\n      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n      throws IOException {\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, src);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n        (src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n      aclSpec);\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[]",
            "newValue": "[static]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n+  static List\u003cAclEntry\u003e unprotectedSetAcl(\n+      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n       throws IOException {\n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n-      unprotectedRemoveAcl(src);\n+      unprotectedRemoveAcl(fsd, src);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n+        (src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n     List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n       aclSpec);\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(\n      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n      throws IOException {\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, src);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n        (src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n      aclSpec);\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {}
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "HDFS-7476. Consolidate ACL-related operations to a single class. Contributed by Haohui Mai.\n",
          "commitDate": "06/12/14 2:20 PM",
          "commitName": "9297f980c2de8886ff970946a2513e6890cd5552",
          "commitAuthor": "cnauroth",
          "commitDateOld": "05/12/14 6:37 PM",
          "commitNameOld": "e227fb8fbcd414717faded9454b8ef813f7aafea",
          "commitAuthorOld": "Haohui Mai",
          "daysBetweenCommits": 0.82,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "diff": "@@ -1,18 +1,20 @@\n-  List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n+  static List\u003cAclEntry\u003e unprotectedSetAcl(\n+      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n       throws IOException {\n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n-      unprotectedRemoveAcl(src);\n+      unprotectedRemoveAcl(fsd, src);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n-    assert hasWriteLock();\n-    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n-    INode inode \u003d resolveLastINode(src, iip);\n+    assert fsd.hasWriteLock();\n+    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n+        (src), true);\n+    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n     List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n       aclSpec);\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
          "actualSource": "  static List\u003cAclEntry\u003e unprotectedSetAcl(\n      FSDirectory fsd, String src, List\u003cAclEntry\u003e aclSpec)\n      throws IOException {\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(fsd, src);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    assert fsd.hasWriteLock();\n    INodesInPath iip \u003d fsd.getINodesInPath4Write(FSDirectory.normalizePath\n        (src), true);\n    INode inode \u003d FSDirectory.resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n      aclSpec);\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
          "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirAclOp.java",
          "extendedDetails": {
            "oldValue": "[src-String, aclSpec-List\u003cAclEntry\u003e]",
            "newValue": "[fsd-FSDirectory, src-String, aclSpec-List\u003cAclEntry\u003e]"
          }
        }
      ]
    },
    "0689363343a281a6f7f6f395227668bddc2663eb": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-6304. Consolidate the logic of path resolution in FSDirectory. Contributed by Haohui Mai.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/trunk@1591411 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "30/04/14 10:44 AM",
      "commitName": "0689363343a281a6f7f6f395227668bddc2663eb",
      "commitAuthor": "Haohui Mai",
      "commitDateOld": "24/04/14 7:05 PM",
      "commitNameOld": "10a037cccb00c9f791da394bf2dc05985fb80612",
      "commitAuthorOld": "Jing Zhao",
      "daysBetweenCommits": 5.65,
      "commitsBetweenForRepo": 24,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,18 +1,18 @@\n   List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n       throws IOException {\n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n       unprotectedRemoveAcl(src);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n     assert hasWriteLock();\n-    INodesInPath iip \u003d rootDir.getINodesInPath4Write(normalizePath(src), true);\n+    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n     INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n     List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n     List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n       aclSpec);\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n      throws IOException {\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(src);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    assert hasWriteLock();\n    INodesInPath iip \u003d getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n      aclSpec);\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    },
    "14f1f76bf609704d36a1699c05fa85750cefe917": {
      "type": "Ybodychange",
      "commitMessage": "HDFS-5614. NameNode: implement handling of ACLs in combination with snapshots. Contributed by Chris Nauroth.\n\ngit-svn-id: https://svn.apache.org/repos/asf/hadoop/common/branches/HDFS-4685@1563304 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "31/01/14 2:21 PM",
      "commitName": "14f1f76bf609704d36a1699c05fa85750cefe917",
      "commitAuthor": "Chris Nauroth",
      "commitDateOld": "23/01/14 9:49 AM",
      "commitNameOld": "738b076cc6d12a99c454584df08d35c43184be8b",
      "commitAuthorOld": "",
      "daysBetweenCommits": 8.19,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "diff": "@@ -1,19 +1,18 @@\n   List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n       throws IOException {\n     // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n     if (aclSpec.isEmpty()) {\n       unprotectedRemoveAcl(src);\n       return AclFeature.EMPTY_ENTRY_LIST;\n     }\n \n     assert hasWriteLock();\n     INodesInPath iip \u003d rootDir.getINodesInPath4Write(normalizePath(src), true);\n-    INodeWithAdditionalFields inode \u003d resolveINodeWithAdditionalFields(src, iip);\n+    INode inode \u003d resolveLastINode(src, iip);\n     int snapshotId \u003d iip.getLatestSnapshotId();\n-    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode,\n-      snapshotId);\n+    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n     List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n       aclSpec);\n     AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n     return newAcl;\n   }\n\\ No newline at end of file\n",
      "actualSource": "  List\u003cAclEntry\u003e unprotectedSetAcl(String src, List\u003cAclEntry\u003e aclSpec)\n      throws IOException {\n    // ACL removal is logged to edits as OP_SET_ACL with an empty list.\n    if (aclSpec.isEmpty()) {\n      unprotectedRemoveAcl(src);\n      return AclFeature.EMPTY_ENTRY_LIST;\n    }\n\n    assert hasWriteLock();\n    INodesInPath iip \u003d rootDir.getINodesInPath4Write(normalizePath(src), true);\n    INode inode \u003d resolveLastINode(src, iip);\n    int snapshotId \u003d iip.getLatestSnapshotId();\n    List\u003cAclEntry\u003e existingAcl \u003d AclStorage.readINodeLogicalAcl(inode);\n    List\u003cAclEntry\u003e newAcl \u003d AclTransformation.replaceAclEntries(existingAcl,\n      aclSpec);\n    AclStorage.updateINodeAcl(inode, newAcl, snapshotId);\n    return newAcl;\n  }",
      "path": "hadoop-hdfs-project/hadoop-hdfs/src/main/java/org/apache/hadoop/hdfs/server/namenode/FSDirectory.java",
      "extendedDetails": {}
    }
  }
}